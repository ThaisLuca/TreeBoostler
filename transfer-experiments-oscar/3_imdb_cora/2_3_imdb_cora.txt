Starting experiment #2 for 3_imdb_cora

Start learning from source dataset

Source train facts examples: 1078
Source train pos examples: 382
Source train neg examples: 14236

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1.43e-06, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048768;  // std dev = 4.59e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   else return -0.14185106490048918;  // std dev = 0.000, 735.000 (wgt'ed) examples reached here.  /* #neg=735 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.12544463852839152;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else return -0.12544463852839235;  // std dev = 0.000, 720.000 (wgt'ed) examples reached here.  /* #neg=720 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360635;  // std dev = 1.49e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   else return -0.11231637819360628;  // std dev = 0.000, 663.000 (wgt'ed) examples reached here.  /* #neg=663 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783624;  // std dev = 2.79e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.10159632948783519;  // std dev = 4.28e-07, 685.000 (wgt'ed) examples reached here.  /* #neg=685 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.09269127618926107;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.09269127618926198;  // std dev = 0.000, 680.000 (wgt'ed) examples reached here.  /* #neg=680 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4.42e-07, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1.67e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.08518475138839675;  // std dev = 1.33e-07, 733.000 (wgt'ed) examples reached here.  /* #neg=733 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2.53e-07, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.0787767547310917;  // std dev = 2.98e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.07877675473109273;  // std dev = 0.000, 690.000 (wgt'ed) examples reached here.  /* #neg=690 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2.60e-07, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.07324622576333657;  // std dev = 2.28e-07, 712.000 (wgt'ed) examples reached here.  /* #neg=712 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.0684269778442027;  // std dev = 1.39e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.06842697784420254;  // std dev = 1.85e-07, 704.000 (wgt'ed) examples reached here.  /* #neg=704 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.0641918400820253;  // std dev = 2.52e-07, 719.000 (wgt'ed) examples reached here.  /* #neg=719 */


Starting fold 1

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos  examples: 2649
Target test neg examples: 4334

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995115;  // std dev = 3.37e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.14148226843284084;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109541;  // std dev = 1.88e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.12337225912665603;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 4.09e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.10609124460882104;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 2.23e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.09008724406738394;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601504;  // std dev = 4.21e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.07565334430281748;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.06292933824961128;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253567;  // std dev = 1.26e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.051926474826474944;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527722;  // std dev = 7.60e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.0425624532511307;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936713;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.03469642376981124;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801115;  // std dev = 3.65e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else return 0.028158189304628316;  // std dev = 13.962, 960.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=272 */


Results
   AUC ROC   = 0.575311
   AUC PR    = 0.53787
   CLL        = -0.627951
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.150623
   F1        = 0.261811


Total learning time: 3.334 seconds
Total inference time: 3.155 seconds
AUC ROC: 0.575311


Results scoring model
   AUC ROC   = 0.630435
   AUC PR    = 0.597315
   CLL        = -0.554626
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total scoring time: 1.5 seconds
Parameter learned model CLL: -0.554626


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.37e-07, 0, 96], 'false': [13.962, 688, 272]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.88e-07, 0, 96], 'false': [13.962, 688, 272]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.09e-07, 0, 96], 'false': [13.962, 688, 272]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.23e-07, 0, 96], 'false': [13.962, 688, 272]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.21e-08, 0, 96], 'false': [13.962, 688, 272]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 96], 'false': [13.962, 688, 272]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.26e-07, 0, 96], 'false': [13.962, 688, 272]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [7.6e-08, 0, 96], 'false': [13.962, 688, 272]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 96], 'false': [13.962, 688, 272]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.65e-08, 0, 96], 'false': [13.962, 688, 272]}]]
[{'': [1.1842378929335002e-15, 0.20305555555555715]}, {'': [3.7007434154171886e-16, 0.20305555555554874]}, {'': [1.7393494052460785e-15, 0.20305555555554408]}, {'': [5.181040781584064e-16, 0.20305555555556368]}, {'': [1.850371707708594e-17, 0.20305555555556454]}, {'': [-4.625929269271486e-17, 0.20305555555555405]}, {'': [1.6653345369377348e-16, 0.203055555555546]}, {'': [6.013708050052931e-17, 0.2030555555555644]}, {'': [-6.013708050052931e-17, 0.20305555555555183]}, {'': [1.3877787807814457e-17, 0.2030555555555464]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995115;  // std dev = 3.37e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.17528448497163038;  // std dev = 13.013, 782.000 (wgt'ed) examples reached here.  /* #neg=534 #pos=248 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.004815601766179008;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109541;  // std dev = 1.88e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.14993437132799067;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.4354444306854878;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10274059633606714;  // std dev = 1.929, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.004228390109386251;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 4.09e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.12829454018664238;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.4208291133316915;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07415526229938274;  // std dev = 1.886, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.0031576158915441093;  // std dev = 3.073, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.11669340332070102;  // std dev = 0.028, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0037111125833978686;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583099;  // std dev = 2.23e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return -0.011327011176877769;  // std dev = 0.924, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.10960458672978315;  // std dev = 12.864, 766.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=242 */
%   | | | else return 0.10354392761110284;  // std dev = 2.118, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.10659972967786581;  // std dev = 0.019, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0032558270569705674;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.004275198200142493;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.3207118471601504;  // std dev = 4.21e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.08966463030229276;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3333276588112347;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.046586885764803236;  // std dev = 1.886, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.09686776837207182;  // std dev = 0.017, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0028554031467501392;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0037523389461441205;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07366495603523426;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.32131925529153244;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.02337872245586458;  // std dev = 1.844, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.08872009475685076;  // std dev = 0.016, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.002503460836945874;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0032921083304070144;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253567;  // std dev = 1.26e-07, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.05994998012082611;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.25810605582079293;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.017678937413185467;  // std dev = 1.840, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.08180574262627595;  // std dev = 0.015, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0021943081594878503;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0028873101104008913;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527722;  // std dev = 7.60e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.04841507037474622;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.2484007238803491;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.0011723128722605034;  // std dev = 1.810, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.07586882447203397;  // std dev = 0.014, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0019228798175884457;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0025315036113168696;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936713;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.038859634343343226;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.1976269639465477;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return -0.0010753052986849964;  // std dev = 1.806, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.07071876782370917;  // std dev = 0.013, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0016846780662751325;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0022189414091018872;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801115;  // std dev = 3.65e-08, 96.000 (wgt'ed) examples reached here.  /* #pos=96 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.031037974301734047;  // std dev = 0.464, 770.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=242 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.19017560876385767;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return -0.0116237607941417;  // std dev = 1.786, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return -0.0662109507448831;  // std dev = 0.012, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0014757167188846957;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0019445078217377354;  // std dev = 3.063, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.617773
   AUC PR    = 0.569376
   CLL        = -0.618865
   Precision = 0.954442 at threshold = 0.5
   Recall    = 0.158173
   F1        = 0.271373


Total learning time: 85.313 seconds
Total inference time: 14.808 seconds
AUC ROC: 0.617773


Results scoring model
   AUC ROC   = 0.690516
   AUC PR    = 0.633976
   CLL        = -0.538917
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.26087
   F1        = 0.413793


Total scoring time: 2.147 seconds
Refined model CLL: -0.538917


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.617773
   AUC PR    = 0.569376
   CLL        = -0.618865
   Precision = 0.954442 at threshold = 0.5
   Recall    = 0.158173
   F1        = 0.271373


Total learning time: 92.29400000000001 seconds
Total inference time: 14.808 seconds
AUC ROC: 0.617773
Total revision time: 92.29400000000001
Best scored revision CLL: -0.538917


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:02:03
{'AUC ROC': 0.617773, 'AUC PR': 0.569376, 'CLL': -0.618865, 'Precision': [0.954442, 0.5], 'Recall': 0.158173, 'F1': 0.271373, 'Learning time': 92.29400000000001, 'Inference time': 14.808, 'parameter': {'AUC ROC': 0.575311, 'AUC PR': 0.53787, 'CLL': -0.627951, 'Precision': [1.0, 0.5], 'Recall': 0.150623, 'F1': 0.261811, 'Learning time': 3.334, 'Inference time': 3.155}}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.424815601766179;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.3927941835770488;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.36488314649717124;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.1488242116562869;  // std dev = 2.789, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14162905569876186;  // std dev = 0.023, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.12787230110394693;  // std dev = 0.016, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.3872849602520228;  // std dev = 0.802, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3330791005500561;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.2952280006806302;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.12205676751791568;  // std dev = 0.051, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.004507924439813021;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.3033243730905507;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2631184286055289;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.23313640158010038;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.10959153340338802;  // std dev = 0.046, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0039587175195313585;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.20207146513260704;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.22739357915372324;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.17984870059869698;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.09936314977686865;  // std dev = 0.042, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0028554031467501392;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0034749675716536097;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.1823483656629723;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.15992157471684912;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.13411729924251048;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.029249288580713365;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.09083148463204621;  // std dev = 0.039, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.002503460836945874;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.006905746264301315;  // std dev = 2.848, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.12021951834451652;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.1369359610733185;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.10098098482619793;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.08361444281056883;  // std dev = 0.036, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0021943081594878503;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0026983133071839514;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.10567201186415413;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.09017693544743159;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07555786328123722;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.15251840886580145;  // std dev = 2.768, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14122041259710866;  // std dev = 0.102, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.09277795092784967;  // std dev = 0.061, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.0023662943144487107;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.07536399315066977;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.07992091863297117;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.055410138037037;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.07611298750008501;  // std dev = 0.032, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0019042789674413108;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.002074606867905991;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03554750876544446;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.06709703453780476;  // std dev = 0.790, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.05391011618924772;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.04140971086867916;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.026392106663119863;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return -0.002002614471315333;  // std dev = 2.997, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.08083631074570923;  // std dev = 0.061, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.005186900569326893;  // std dev = 2.847, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.55744
   AUC PR    = 0.42843
   CLL        = -0.655374
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 123.026 seconds
Total inference time: 16.459 seconds
AUC ROC: 0.55744


Dataset: 3_imdb_cora, Fold: 1, Type: Scratch (RDN-B), Time: 00:04:24
{'AUC ROC': 0.55744, 'AUC PR': 0.42843, 'CLL': -0.655374, 'Precision': [0.637427, 0.5], 'Recall': 0.041148, 'F1': 0.077305, 'Learning time': 123.026, 'Inference time': 16.459}


Starting fold 2

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos  examples: 2246
Target test neg examples: 4478

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995112;  // std dev = 4.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.4093040506110586;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109546;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.3518584397759264;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 4.30e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.28978075601916603;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583097;  // std dev = 2.60e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.2301282512902187;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015033;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.17805229571102874;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.13555846379071965;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325356;  // std dev = 1.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.10230499048265658;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452773;  // std dev = 5.16e-08, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.0768855541294751;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936713;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.057686543517231556;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801087;  // std dev = 6.83e-08, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else return 0.043265933965801626;  // std dev = 17.316, 1,212.000 (wgt'ed) examples reached here.  /* #neg=544 #pos=668 */


Results
   AUC ROC   = 0.587266
   AUC PR    = 0.518945
   CLL        = -0.675396
   Precision = 0.334027 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.50078


Total learning time: 3.577 seconds
Total inference time: 3.126 seconds
AUC ROC: 0.587266


Results scoring model
   AUC ROC   = 0.566796
   AUC PR    = 0.695289
   CLL        = -0.645914
   Precision = 0.586312 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.739214


Total scoring time: 1.61 seconds
Parameter learned model CLL: -0.645914


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.46e-07, 0, 103], 'false': [17.316, 544, 668]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 103], 'false': [17.316, 544, 668]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.3e-07, 0, 103], 'false': [17.316, 544, 668]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.6e-07, 0, 103], 'false': [17.316, 544, 668]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 103], 'false': [17.316, 544, 668]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 103], 'false': [17.316, 544, 668]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.46e-07, 0, 103], 'false': [17.316, 544, 668]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [5.16e-08, 0, 103], 'false': [17.316, 544, 668]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 103], 'false': [17.316, 544, 668]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [6.83e-08, 0, 103], 'false': [17.316, 544, 668]}]]
[{'': [1.9315724855614373e-15, 0.2473831541569956]}, {'': [-3.4492365813597096e-16, 0.24738315415699694]}, {'': [1.793603022307049e-15, 0.24738315415698806]}, {'': [6.553549504583448e-16, 0.2473831541570005]}, {'': [-2.4144656069517967e-16, 0.24738315415699036]}, {'': [-5.1738548720395646e-17, 0.24738315415699547]}, {'': [2.0695419488158259e-16, 0.2473831541570034]}, {'': [2.5869274360197823e-17, 0.24738315415699816]}, {'': [-1.2503482607428947e-16, 0.24738315415699647]}, {'': [4.527123013034619e-17, 0.24738315415700443]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995112;  // std dev = 4.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3989290769434791;  // std dev = 0.498, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.5949910403626703;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2867203636709409;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109546;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.3431339147245365;  // std dev = 0.498, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.5111302802881205;  // std dev = 1.918, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.4752970037545024;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.24811816884741297;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462834;  // std dev = 4.30e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.2830762494159436;  // std dev = 0.498, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.4107512329462532;  // std dev = 1.917, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.3795539345047662;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.20848477447886868;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583097;  // std dev = 2.60e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.5266766974553888;  // std dev = 0.365, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return -0.05105768803469016;  // std dev = 0.851, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.1725714228453629;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.22324295386072326;  // std dev = 16.526, 1,099.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=592 */
%   | | | else return 0.30383009005271167;  // std dev = 2.685, 36.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=26 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.33324199902303153;  // std dev = 1.895, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.17062637354018512;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015033;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.47661611579119084;  // std dev = 0.365, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return -0.09709825422950451;  // std dev = 0.847, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.19803554070733828;  // std dev = 0.905, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(I, H) )
%   | | | then return 0.17248222046177067;  // std dev = 16.494, 1,099.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=592 */
%   | | | else return 0.22861413931286018;  // std dev = 2.685, 36.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=26 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.27247861877273527;  // std dev = 1.859, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | | else return 0.10753030962032166;  // std dev = 1.835, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.13333626224871;  // std dev = 0.496, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.188572014716109;  // std dev = 1.915, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.15271325583426587;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.28116111109659064;  // std dev = 2.58e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.08370165024909026;  // std dev = 1.834, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.08296779493411803;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2097577156325356;  // std dev = 1.46e-07, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.10083593143229641;  // std dev = 0.496, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.14449021074112234;  // std dev = 1.915, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.11303911182696555;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.22795923869172477;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.06459187490147256;  // std dev = 1.834, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.06400700230253199;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1770964977452773;  // std dev = 5.16e-08, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordtitle(E, D) )
%   | | then return 0.07589545049099813;  // std dev = 0.496, 1,128.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=610 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.11473076497135509;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.08091484977658936;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.1903357940735692;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.04954309788973836;  // std dev = 1.833, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.04908374375746268;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.1527438580936713;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.2837805367424989;  // std dev = 0.365, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return -0.13862341233911402;  // std dev = 0.840, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.21916430659397582;  // std dev = 0.905, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.28360788762395545;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.16893397689972164;  // std dev = 1.230, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | | | then return 0.053460773019213176;  // std dev = 16.549, 1,108.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=600 */
%   | | | else return 0.10719806812871222;  // std dev = 2.563, 46.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=32 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801087;  // std dev = 6.83e-08, 103.000 (wgt'ed) examples reached here.  /* #pos=103 */
%   else if ( haswordvenue(A, D), haswordvenue(B, D) )
%   | then if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.2152676490665642;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.1405965240751959;  // std dev = 1.235, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordtitle(H, D) )
%   | | | then return 0.04135844094262755;  // std dev = 16.474, 1,099.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=592 */
%   | | | else return 0.06375901556630918;  // std dev = 2.683, 36.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=26 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.14863293657784166;  // std dev = 2.36e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.0159166602794802;  // std dev = 1.823, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.015826260170217345;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.610417
   AUC PR    = 0.469651
   CLL        = -0.7064
   Precision = 0.353677 at threshold = 0.5
   Recall    = 0.957257
   F1        = 0.516517


Total learning time: 85.303 seconds
Total inference time: 13.558 seconds
AUC ROC: 0.610417


Results scoring model
   AUC ROC   = 0.616274
   AUC PR    = 0.740043
   CLL        = -0.629556
   Precision = 0.594957 at threshold = 0.5
   Recall    = 0.979248
   F1        = 0.740196


Total scoring time: 2.131 seconds
Refined model CLL: -0.629556


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.610417
   AUC PR    = 0.469651
   CLL        = -0.7064
   Precision = 0.353677 at threshold = 0.5
   Recall    = 0.957257
   F1        = 0.516517


Total learning time: 92.621 seconds
Total inference time: 13.558 seconds
AUC ROC: 0.610417
Total revision time: 92.621
Best scored revision CLL: -0.629556


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:06:17
{'AUC ROC': 0.610417, 'AUC PR': 0.469651, 'CLL': -0.7064, 'Precision': [0.353677, 0.5], 'Recall': 0.957257, 'F1': 0.516517, 'Learning time': 92.621, 'Inference time': 13.558, 'parameter': {'AUC ROC': 0.587266, 'AUC PR': 0.518945, 'CLL': -0.675396, 'Precision': [0.334027, 0.5], 'Recall': 1.0, 'F1': 0.50078, 'Learning time': 3.577, 'Inference time': 3.126}}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.5791684237702857;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.22916842377028543;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.008145345695425854;  // std dev = 0.852, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.07083157622971455;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.3045453081923796;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.4047531668618019;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.4246457186582996;  // std dev = 1.908, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.4317030979309822;  // std dev = 0.348, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24202763793698812;  // std dev = 0.493, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.3098169854894562;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.28778262938095234;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.44960468245709945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.44785888933339724;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.1316730160126654;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.4558238653150294;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.12696337948380876;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.1576162886746511;  // std dev = 0.411, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( haswordtitle(H, F) )
%   | | then return 0.3843074996866285;  // std dev = 0.365, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | else if ( author(I, G), venue(I, B) )
%   | | | then return -0.0500559806063354;  // std dev = 0.846, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.10593105372516383;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, J), haswordvenue(B, J) )
%   | | then if ( haswordtitle(K, J) )
%   | | | then return 0.18243715358426912;  // std dev = 16.896, 1,167.000 (wgt'ed) examples reached here.  /* #neg=498 #pos=669 */
%   | | | else return 0.2395015074255389;  // std dev = 2.697, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else return 0.23313045189186324;  // std dev = 0.387, 46.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14102390748116156;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.17335674088763253;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.15686404918843033;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.2908263107016503;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.2910448708292866;  // std dev = 4.21e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.09208876864605069;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.054492326217191404;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.26103874800093524;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.06247780827313676;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.0732051827419957;  // std dev = 1.220, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.10490467182802443;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.14745670194951416;  // std dev = 1.915, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.13085482216987773;  // std dev = 1.897, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.23480781430934297;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.07127250192219396;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.041734075890796314;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07970602185668384;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.10009460273724537;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.08318199030619383;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.21197601617094475;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.19526310630973093;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.0547798040640862;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.03185733431476393;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.2614089287358844;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordauthor(G, C) )
%   | | | then return 0.02723312796548616;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1814797523471532;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.05819589019076535;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.09261115589193178;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.07670964688605214;  // std dev = 1.897, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then return 0.16639009137095254;  // std dev = 2.36e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.04189949055738364;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.024261387840744227;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.045008125223470564;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.059903338024812076;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.042854008006319305;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.16773841951059232;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.14457244593840896;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.03193888603245625;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.018446003051164107;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.537416
   AUC PR    = 0.345724
   CLL        = -0.756798
   Precision = 0.353813 at threshold = 0.5
   Recall    = 0.956367
   F1        = 0.516532


Total learning time: 124.238 seconds
Total inference time: 14.622 seconds
AUC ROC: 0.537416


Dataset: 3_imdb_cora, Fold: 2, Type: Scratch (RDN-B), Time: 00:08:36
{'AUC ROC': 0.537416, 'AUC PR': 0.345724, 'CLL': -0.756798, 'Precision': [0.353813, 0.5], 'Recall': 0.956367, 'F1': 0.516532, 'Learning time': 124.238, 'Inference time': 14.622}


Starting fold 3

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos  examples: 2436
Target test neg examples: 2800

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.8581489350995114;  // std dev = 3.77e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.15549625157082136;  // std dev = 18.403, 1,621.000 (wgt'ed) examples reached here.  /* #neg=1,139 #pos=482 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.7194734122109542;  // std dev = 1.19e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.13771177916836266;  // std dev = 18.374, 1,609.000 (wgt'ed) examples reached here.  /* #neg=1,127 #pos=482 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.5553664367462835;  // std dev = 4.21e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.11266704731337468;  // std dev = 18.446, 1,639.000 (wgt'ed) examples reached here.  /* #neg=1,157 #pos=482 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.4175135841583098;  // std dev = 2.46e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.09623158715647233;  // std dev = 18.434, 1,634.000 (wgt'ed) examples reached here.  /* #neg=1,152 #pos=482 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.32071184716015044;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.07584166702907863;  // std dev = 18.494, 1,660.000 (wgt'ed) examples reached here.  /* #neg=1,178 #pos=482 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.2551722425694897;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.06579019757262439;  // std dev = 18.455, 1,643.000 (wgt'ed) examples reached here.  /* #neg=1,161 #pos=482 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.20975771563253565;  // std dev = 1.37e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.055634381094769966;  // std dev = 18.434, 1,634.000 (wgt'ed) examples reached here.  /* #neg=1,152 #pos=482 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.17709649774527725;  // std dev = 6.99e-08, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.04232186095897077;  // std dev = 18.474, 1,651.000 (wgt'ed) examples reached here.  /* #neg=1,169 #pos=482 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.15274385809367128;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.034310815205854966;  // std dev = 18.474, 1,651.000 (wgt'ed) examples reached here.  /* #neg=1,169 #pos=482 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( venue(C, A), venue(C, B) )
%   then return 0.13400703000801087;  // std dev = 6.50e-08, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   else return 0.03273083163114682;  // std dev = 18.408, 1,623.000 (wgt'ed) examples reached here.  /* #neg=1,141 #pos=482 */


Results
   AUC ROC   = 0.581281
   AUC PR    = 0.617874
   CLL        = -0.687555
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.162562
   F1        = 0.279661


Total learning time: 5.368 seconds
Total inference time: 2.818 seconds
AUC ROC: 0.581281


Results scoring model
   AUC ROC   = 0.585198
   AUC PR    = 0.401731
   CLL        = -0.479411
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.170396
   F1        = 0.291176


Total scoring time: 1.915 seconds
Parameter learned model CLL: -0.479411


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [3.77e-07, 0, 99], 'false': [18.403, 1, 482]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.19e-07, 0, 99], 'false': [18.374, 1, 482]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [4.21e-07, 0, 99], 'false': [18.446, 1, 482]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [2.46e-07, 0, 99], 'false': [18.434, 1, 482]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 99], 'false': [18.494, 1, 482]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 99], 'false': [18.455, 1, 482]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [1.37e-07, 0, 99], 'false': [18.434, 1, 482]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [6.99e-08, 0, 99], 'false': [18.474, 1, 482]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [0.0, 0, 99], 'false': [18.474, 1, 482]}], ['samevenue(A, B)', {'': 'venue(C, A), venue(C, B)'}, {'true': [6.5e-08, 0, 99], 'false': [18.408, 1, 482]}]]
[{'': [1.4354398702224246e-15, 0.20893188985860545]}, {'': [1.4354398702224247e-16, 0.20982578959789147]}, {'': [1.794299837778031e-15, 0.20759767726940528]}, {'': [6.100619448445304e-16, 0.20796747212311892]}, {'': [0.0, 0.20605167658587295]}, {'': [-4.485749594445077e-17, 0.20730230502593994]}, {'': [1.8840148296669324e-16, 0.20796747212313735]}, {'': [4.9343245538895844e-17, 0.2067128157925086]}, {'': [-1.1214373986112693e-16, 0.2067128157925117]}, {'': [4.261462114722823e-17, 0.20878324486008137]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
1;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
2;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
3;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
4;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
5;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
6;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
7;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
8;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true
9;;samevenue(A, B) :- venue(C, A), venue(C, B).;true;true


Refining candidate
***************************
Starting experiment #2 for 3_imdb_cora

Loading pre-trained trees.
Starting fold 1

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos  examples: 2649
Target test neg examples: 4334

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.424815601766179;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.3927941835770488;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.36488314649717124;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.3872849602520228;  // std dev = 0.802, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3330791005500561;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.29522800068063015;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.3033243730905507;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2631184286055289;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.23313640158010038;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.22739357915372327;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.20364894214225995;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.17958578776375475;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.09269127618926097;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0028554031467501392;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0028554031467501392;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.1823919705332058;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.15836224147606962;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.13437297640658105;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.08518475138839687;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.002503460836945874;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.002503460836945874;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.13696892934939894;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.12065587722053431;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10090491082830819;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.15191665241662;  // std dev = 2.771, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.1413439964226033;  // std dev = 0.091, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.08816184098481847;  // std dev = 0.061, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.0021943081594878503;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.10563615879160522;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.09381301143147072;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07495540444886355;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.07800134745978297;  // std dev = 0.031, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0019228798175884457;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.002212700942771624;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.0824456759856621;  // std dev = 0.792, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.07179479454773277;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.055752287069895275;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.07257879870861196;  // std dev = 0.029, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0016846780662751325;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0019397487266126533;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03554750876544446;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.05653138345537214;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.06444284007332605;  // std dev = 0.791, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.04124013726016377;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.02019094994778181;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | | then return -0.06784708719532455;  // std dev = 0.027, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0017001156848531433;  // std dev = 2.996, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.004062781395501627;  // std dev = 2.917, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.557027
   AUC PR    = 0.42832
   CLL	      = -0.657592
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 120.50685715675354 seconds
Total inference time: 15.359 seconds
AUC ROC: 0.557027


Results scoring model
   AUC ROC   = 0.590883
   AUC PR    = 0.419481
   CLL	      = -0.620314
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total scoring time: 2.096 seconds
Parameter learned model CLL: -0.620314


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.816, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.714, 13, 17], 'false,true,true': [0.0, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.816, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.714, 13, 17], 'false,true,true': [5.27e-09, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.802, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.716, 13, 17], 'false,true,true': [9.13e-09, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.8, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.716, 13, 17], 'false,true,true': [0.0, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.801, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.716, 13, 17], 'false,true,true': [5.27e-09, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.794, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true,true': [5.27e-09, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, A)', 'false,true,true': 'samebib(K, L), venue(L, B)', 'false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.794, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true,true,true': [2.771, 27, 11], 'false,true,true,false': [0.091, 42, 0], 'false,true,false': [0.061, 7, 0], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.793, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true,true': [0.031, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.792, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true,true': [0.029, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false,true': 'haswordtitle(L, M), haswordvenue(B, M)', 'false,false,false': 'haswordvenue(B, N), haswordtitle(P, N)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [1.095, 2, 3], 'true,false,false,true': [0.791, 1, 2], 'true,false,false,false': [2.718, 13, 17], 'false,true': [0.331, 7, 1], 'false,false,true,true': [0.027, 12, 0], 'false,false,true,false': [2.996, 64, 11], 'false,false,false,true': [2.917, 57, 10], 'false,false,false,false': [0.0, 4, 0]}]]
[{'': [0.23762656230272572, 0.11496588764697444], 'true': [0.2356675262844691, 0.24376731301939172], 'true,false': [0.22222222222222224, 0.2448979591836734], 'true,false,false': [0.23999999999999994, 0.2455555555555551], 'false': [0.1104505218655035, 0.11985258772632539], 'false,false': [0.12515555555555502, 0.0], 'false,true': [-1.1564823173178714e-17, 0.12515555555555502]}, {'': [0.23716066162823085, 0.11455688633284844], 'true': [0.2356675262844735, 0.24352902641532298], 'true,false': [0.2222222222222222, 0.24485729569956294], 'true,false,false': [0.24, 0.2455555555555557], 'false': [0.10989213699570438, 0.1196268538653256], 'false,false': [0.125155555555556, 0.0], 'false,true': [2.3129646346357427e-18, 0.125155555555556]}, {'': [0.23670841319763658, 0.11426488031687218], 'true': [0.23566752628446727, 0.24329127189035754], 'true,false': [0.21422556099951198, 0.245189868787586], 'true,false,false': [0.24000000000000005, 0.24585017466723233], 'false': [0.10949347876263746, 0.1194656914359021], 'false,false': [0.12515555555555488, 0.0], 'false,true': [6.938893903907228e-18, 0.12515555555555488]}, {'': [0.2363668466234202, 0.11404989376870131], 'true': [0.23566752628446358, 0.242950133085621], 'true,false': [0.21313045709187692, 0.24516320168752975], 'true,false,false': [0.23999999999999994, 0.24589531788146748], 'false': [0.1091999705719235, 0.11934703718735738], 'false,false': [0.12515555555555585, 0.0], 'false,true': [0.0, 0.12515555555555585]}, {'': [0.23616117657895658, 0.11388747773154602], 'true': [0.235667526284474, 0.24274010354977613], 'true,false': [0.21367569932475008, 0.2450759133716617], 'true,false,false': [0.24, 0.24583917959094184], 'false': [0.10897823373482877, 0.11925739737963524], 'false,false': [0.1251555555555548, 0.0], 'false,true': [2.3129646346357427e-18, 0.1251555555555548]}, {'': [0.23605468177217206, 0.11376206515768521], 'true': [0.23566752628446164, 0.2426434539952754], 'true,false': [0.21013352585834397, 0.2452730369565456], 'true,false,false': [0.24, 0.2460696643295068], 'false': [0.10880701549834226, 0.11918818032937877], 'false,false': [0.12515555555555608, 0.0], 'false,true': [2.3129646346357427e-18, 0.12515555555555608]}, {'': [0.2360022603769858, 0.11366339398297505], 'true': [0.23566752628447166, 0.2425599230375723], 'true,false': [0.21020207016275397, 0.24524621165704583], 'true,false,false': [0.24, 0.24606485159892122], 'false': [0.10867230568411562, 0.11913372225194024], 'false,false': [0.12515555555555608, 0.0], 'false,true': [0.11753819459178187, 0.0005284790639393423], 'false,true,true': [0.20208154497787642, 0.00019573298664419893]}, {'': [0.23597826162995036, 0.11116031378212243], 'true': [0.23566752628446394, 0.242519839034401], 'true,false': [0.20963866538757644, 0.2452763889079363], 'true,false,false': [0.23999999999999994, 0.2461049857248146], 'false': [0.10866331669629706, 0.11388074475797728], 'false,false': [0.11966607816854768, 0.0], 'false,true': [8.00289070648647e-05, 0.1251555555555557]}, {'': [0.2359671371633601, 0.11108255922569926], 'true': [0.23566752628446355, 0.24249314546112358], 'true,false': [0.20909927245025686, 0.24530846915558874], 'true,false,false': [0.24, 0.24615644800825692], 'false': [0.10855817168407286, 0.11383737176539377], 'false,false': [0.11965799060343202, 0.0], 'false,true': [7.015698498885961e-05, 0.1251555555555548]}, {'': [0.2359619713705396, 0.11101898387735905], 'true': [0.23566752628447613, 0.2424766796824991], 'true,false': [0.24, 0.24282907066141782], 'true,false,false': [0.20878371000656157, 0.24618466441619105], 'false': [0.10937499999999999, 0.1110899743665174], 'false,false': [0.10373099938968536, 0.12007109314915373], 'false,false,false': [0.12697705502339063, 0.0], 'false,false,true': [6.197387189045671e-05, 0.11965089679274536]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
0;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
0;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
1;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
1;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
2;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
2;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
3;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
3;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
4;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
4;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
5;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
5;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
6;false,true;title(K, J), venue(K, A).;true;true
6;false,true,true;samebib(K, L), venue(L, B).;true;true
6;false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
7;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
7;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
8;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
8;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(A, I), haswordauthor(J, I).;true;true
9;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;true
9;false,false,true;haswordtitle(L, M), haswordvenue(B, M).;true;true
9;false,false,false;haswordvenue(B, N), haswordtitle(P, N).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.424815601766179;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.3982164798305049;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.45935396641210174;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.36287359443791467;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.3269052770205085;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.3045778662456429;  // std dev = 0.494, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( haswordtitle(H, I), haswordvenue(B, I) )
%   | | then return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.3071843372135812;  // std dev = 0.807, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2620381251135723;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.2329977997131101;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.24534868674825872;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.20326173921214089;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.1778774712088064;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.09269127618926097;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0028554031467501392;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0028554031467501392;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.18476149180048637;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.1578582721999965;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.13420804310278658;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.08518475138839687;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.002503460836945874;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.002503460836945874;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.13868281955631065;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.12038983891655688;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10074657789227995;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.15191665241662;  // std dev = 2.771, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.1413439964226033;  // std dev = 0.091, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.08816184098481847;  // std dev = 0.061, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.0021943081594878503;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.09346777311387604;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.1184959766178227;  // std dev = 0.792, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.0736875952800891;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.030176912701803598;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.07800134745978297;  // std dev = 0.031, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0019228798175884457;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.006080117497347766;  // std dev = 2.847, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.08944950098996225;  // std dev = 0.792, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.07191139844879095;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.0549947063202575;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.15264442112293236;  // std dev = 2.767, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.1412938508684115;  // std dev = 0.107, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.08724871367583661;  // std dev = 0.067, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.0019635200942717773;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return -0.14473418137539884;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.06785891274554268;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.03661174542507164;  // std dev = 0.486, 847.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=323 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.056462320828413445;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.04087828638801996;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return -0.03079296821735826;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return -0.008392227808054565;  // std dev = 0.322, 87.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=11 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.0055289747098403895;  // std dev = 2.847, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.55731
   AUC PR    = 0.428171
   CLL	      = -0.655545
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 126.81640291213989 seconds
Total inference time: 15.452 seconds
AUC ROC: 0.55731


Results scoring model
   AUC ROC   = 0.593517
   AUC PR    = 0.42064
   CLL	      = -0.618686
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total scoring time: 2.063 seconds
Refined model CLL: -0.618686


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.55731
   AUC PR    = 0.428171
   CLL	      = -0.655545
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 251.48226006889342 seconds
Total inference time: 15.452 seconds
AUC ROC: 0.55731
Total revision time: 251.48226006889342
Best scored revision CLL: -0.618686


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:04:46
{'AUC ROC': 0.55731, 'AUC PR': 0.428171, 'CLL': -0.655545, 'Precision': [0.637427, 0.5], 'Recall': 0.041148, 'F1': 0.077305, 'Learning time': 251.48226006889342, 'Inference time': 15.452, 'parameter': {'AUC ROC': 0.557027, 'AUC PR': 0.42832, 'CLL': -0.657592, 'Precision': [0.637427, 0.5], 'Recall': 0.041148, 'F1': 0.077305, 'Learning time': 120.50685715675354, 'Inference time': 15.359}}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.424815601766179;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.14762261931003867;  // std dev = 2.796, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14185106490048768;  // std dev = 4.47e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.45935396641210174;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3982164798305049;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.36287359443791467;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.13722572521892853;  // std dev = 0.058, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0051997502391447625;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.37391135762433364;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.3269052770205085;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.2976445171077738;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.12180522429396212;  // std dev = 0.052, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.004568660166365274;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.3022417434729106;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2574772746827477;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.2341792805932751;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.1506670054132313;  // std dev = 2.779, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14132800495646702;  // std dev = 0.060, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.1225777611919501;  // std dev = 0.040, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.004012232942941118;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.22917654013008595;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.20948408680407216;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.17842471896496798;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.1060513171556411;  // std dev = 0.043, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0033998919760287512;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0035220811797056872;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.15383308004394028;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.18151331965100115;  // std dev = 0.795, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1352084039382705;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.029368058821374193;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return -0.0027976088225988493;  // std dev = 3.004, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.10021074785055803;  // std dev = 0.040, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.006846006102670337;  // std dev = 2.848, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.13630208604227537;  // std dev = 0.795, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.12509181189750876;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10022571104921742;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.09214348791593481;  // std dev = 0.041, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.002640430229181662;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0035723188121324963;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.10709374097034989;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.09384026616344765;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07479884566109475;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.029291959182861912;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.08473143002004556;  // std dev = 0.038, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0023154401520872146;  // std dev = 2.995, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.007006744451861986;  // std dev = 2.848, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.08185645340450913;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.07185791455113547;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.0557956692664753;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.07839672266959537;  // std dev = 0.036, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.00202995039642457;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.002774107194824229;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03554750876544446;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.05654091057151844;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.05399415643664311;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.0414420051539374;  // std dev = 2.610, 28.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.0264742069099966;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then return -0.025869580481203705;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return -0.006706946502802449;  // std dev = 2.858, 79.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=10 */
%   | | | else return 0.0018684218712829883;  // std dev = 2.850, 71.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=10 */


Results
   AUC ROC   = 0.55743
   AUC PR    = 0.428428
   CLL	      = -0.655042
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 124.51033401489258 seconds
Total inference time: 15.794 seconds
AUC ROC: 0.55743


Dataset: 3_imdb_cora, Fold: 1, Type: Scratch (RDN-B), Time: 00:07:07
{'AUC ROC': 0.55743, 'AUC PR': 0.428428, 'CLL': -0.655042, 'Precision': [0.637427, 0.5], 'Recall': 0.041148, 'F1': 0.077305, 'Learning time': 124.51033401489258, 'Inference time': 15.794}


Starting fold 2

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos  examples: 2246
Target test neg examples: 4478

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.5791684237702857;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.22916842377028543;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.008145345695425854;  // std dev = 0.852, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.07083157622971455;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.3045453081923796;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.4047531668618019;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.42464571865829975;  // std dev = 1.908, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.4317030979309822;  // std dev = 0.348, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.5118627986468952;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.18162271221626702;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.06570188218847453;  // std dev = 0.846, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.13495415790755155;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.23990098036198004;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.3098169854894562;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.32456036871644006;  // std dev = 1.905, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.35163309306853874;  // std dev = 0.335, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.1316730160126654;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.38933682736945724;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.140979150293288;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.04970938777667089;  // std dev = 0.846, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.10547967158030476;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.18453092005799973;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.23288770051702257;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.24463018700680503;  // std dev = 1.906, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.27145755720448295;  // std dev = 0.333, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.10395681007912147;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14103775723532472;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.17498421379444495;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.14651091925551252;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.31616366159683995;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.30313444198126616;  // std dev = 3.33e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.08081634704127262;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.046025459399455605;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10616457864986874;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.1324762415840328;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.11077439423300654;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.2520662823249502;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.24313822402764415;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.06231133890180871;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.03517780289379508;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.28030608100083715;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.047713120479303095;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.1390761933376094;  // std dev = 0.836, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.20393802223184898;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.2278580009237725;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.09644669597791836;  // std dev = 1.220, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordtitle(K, G) )
%   | | | then return 0.07682173575054178;  // std dev = 16.896, 1,167.000 (wgt'ed) examples reached here.  /* #neg=498 #pos=669 */
%   | | | else return 0.10723570533789839;  // std dev = 2.697, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else return 0.11410012533859125;  // std dev = 0.381, 47.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.059910327712411504;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.07681796189632492;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.059509715509960585;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.19047537509193446;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.18350349971053617;  // std dev = 2.98e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.02432381919896124;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return -6.705751385256975E-4;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0450303234302578;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.07517893815341217;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.028838440504245697;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.16281920380910642;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.15758704241669802;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.01848854381513116;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return -5.076088292842372E-4;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.537043
   AUC PR    = 0.345485
   CLL	      = -0.755618
   Precision = 0.353628 at threshold = 0.5
   Recall    = 0.956812
   F1        = 0.5164


Total learning time: 121.04942607879639 seconds
Total inference time: 12.581 seconds
AUC ROC: 0.537043


Results scoring model
   AUC ROC   = 0.553719
   AUC PR    = 0.662697
   CLL	      = -0.66491
   Precision = 0.594317 at threshold = 0.5
   Recall    = 0.976654
   F1        = 0.73896


Total scoring time: 2.142 seconds
Parameter learned model CLL: -0.66491


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [7.3e-08, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(F, D), venue(F, A)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)'}, {'true,true': [0.357, 3, 17], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.852, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.494, 507, 687], 'false,true,false,true': [1.919, 5, 14], 'false,true,false,false': [1.908, 5, 17], 'false,false,true': [0.348, 7, 26], 'false,false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'haswordvenue(B, C)', 'true,false,false': 'author(F, D), venue(F, B)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)'}, {'true,true': [0.356, 3, 17], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.846, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.494, 507, 687], 'false,true,false,true': [1.919, 5, 14], 'false,true,false,false': [1.905, 5, 17], 'false,false,true': [0.335, 7, 26], 'false,false,false': [0.49, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(F, D), venue(F, A)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)'}, {'true,true': [0.356, 3, 17], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.846, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.493, 507, 687], 'false,true,false,true': [1.919, 5, 14], 'false,true,false,false': [1.906, 5, 17], 'false,false,true': [0.333, 7, 26], 'false,false,false': [0.49, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.492, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [3.33e-08, 0, 20], 'false,true,false': [0.49, 8, 6], 'false,false': [0.487, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.492, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.49, 8, 6], 'false,false': [0.486, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'haswordvenue(B, C)', 'true,false,false': 'author(F, D), venue(F, B)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,true,true': 'haswordtitle(J, H)', 'false,true,false': 'haswordtitle(K, G)'}, {'true,true': [0.356, 3, 17], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.836, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true,true': [1.589, 3, 16], 'false,true,true,false': [1.22, 6, 2], 'false,true,false,true': [16.896, 498, 669], 'false,true,false,false': [2.697, 10, 31], 'false,false': [0.381, 15, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.491, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [2.98e-08, 0, 20], 'false,true,false': [0.487, 8, 6], 'false,false': [0.486, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.491, 518, 708], 'true,false,true': [0.439, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.487, 8, 6], 'false,false': [0.486, 8, 6]}]]
[{'': [0.24306651325713594, 0.22222222222222385], 'true': [0.24399564626142126, 0.1844140392623454], 'false': [0.17993079584775207, 0.24489795918367352], 'true,false': [0.19390581717451486, 0.17561983471074338], 'false,true': [-8.881784197001253e-17, 0.24489795918367352], 'true,false,false': [0.20761245674740453, 0.0]}, {'': [0.2426572019465864, 0.1968581969586748], 'true': [0.2439956462613994, 0.18151807630785105], 'false': [0.15465453537750243, 0.24489795918367324], 'true,false': [0.193905817174515, 0.17043669583228802], 'true,false,false': [0.20761245674740458, 0.0], 'false,true': [2.6645352591003756e-16, 0.24489795918367324]}, {'': [0.22952352137572604, 0.2399408807915938], 'false': [0.24253575522871798, 0.16862805083149532], 'false,true': [0.24431832529482975, 0.17873720595178566], 'true': [0.12749999999999978, 0.21079846857026777], 'true,false': [0.25, 0.17058790973374105], 'false,true,false': [0.1939058171745152, 0.16545366223293648], 'true,false,false': [0.18163970606836305, 0.16000000000000003], 'false,false': [0.12142920769740277, 0.2448979591836735]}, {'': [0.226813920719407, 0.23867839580048358], 'false': [0.24158712821313147, 0.16041315924103158], 'false,true': [0.2435535975744991, 0.17846373208604316], 'true': [0.12673759051228348, 0.21175330992800884], 'true,false': [0.24999999999999997, 0.16962230622100344], 'false,true,false': [0.1939058171745152, 0.1650266546627699], 'true,false,false': [0.17898581250155157, 0.16], 'false,false': [0.11214733462026104, 0.2402119567889687]}, {'': [0.19591223848133163, 0.238337861777561], 'false': [0.24145393200341014, 0.1552632909507074], 'false,true': [0.24351625382528366, 0.17850681904003898], 'true': [0.1267007957596511, 0.204535826315456], 'true,false': [0.25, 0.1692099919853684], 'false,true,false': [0.19390581717451524, 0.16514378590240736], 'true,false,false': [0.178994523880669, 0.16], 'false,false': [0.1108863377959215, 0.24016686421852354]}, {'': [0.23984075615591802, 0.15319377353265157], 'true': [0.24183598807913173, 0.17867957121202077], 'true,false': [0.19390581717451524, 0.16548250687430516], 'true,false,false': [0.2076124567474048, 0.0], 'false': [0.11078938506757552, 0.23675889965506142], 'false,true': [5.551115123125783e-17, 0.23998620849484845]}, {'': [0.23977978299392974, 0.14827339196528436], 'true': [0.24181791281313447, 0.17785020523152648], 'true,false': [0.1939058171745152, 0.16393377608053564], 'true,false,false': [0.20761245674740483, 0.0], 'false': [0.10668421223756844, 0.23665115836825185], 'false,true': [-3.3306690738754695e-17, 0.23985589890550804]}, {'': [0.19251462816142853, 0.23740780519617535], 'false': [0.24087373233292841, 0.1451503966698876], 'false,true': [0.1706036207809716, 0.24238079207378155], 'false,true,false': [0.2446322717930768, 0.17740237692857805], 'true': [0.12641455357922068, 0.20350573226957674], 'true,false': [0.25, 0.16756457177580786], 'false,true,true': [0.13296398891966751, 0.1859867393324038], 'true,false,false': [0.17468303269139795, 0.15999999999999998]}, {'': [0.23910888279787593, 0.14538685344096736], 'true': [0.24114796106400424, 0.17759691126859387], 'true,false': [0.19390581717451524, 0.16344003959226744], 'true,false,false': [0.20761245674740486, 0.0], 'false': [0.10383195850457057, 0.23633753847184186], 'false,true': [4.4408920985006264e-17, 0.23725852150989227]}, {'': [0.2391025815472179, 0.1435383159028007], 'true': [0.2411553320167299, 0.17726794936850934], 'true,false': [0.19298128049301508, 0.1635803319071662], 'true,false,false': [0.20761245674740486, 0.0], 'false': [0.10236171910821201, 0.23633881767346704], 'false,true': [-1.3877787807814457e-17, 0.23721133916259304]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
0;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
0;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
1;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
1;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
5;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
5;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
5;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
6;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
6;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
8;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
8;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
8;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
9;true,false,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
9;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.30665618885999163;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.4047531668618019;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.386198448632422;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24206322397592006;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.3261448737160187;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2788572331674748;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.4586612187245652;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.10866121872456526;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.14133878127543473;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.18403810314669028;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.24558668125641064;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.23490503051382786;  // std dev = 1.891, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.3207118471601496;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14099928981223944;  // std dev = 0.493, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.18439264910484143;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.15116160134657963;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.2718201561947905;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.25517224256948945;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.10762034996184425;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.10762034996184425;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.37570263335321136;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.04785994221285604;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.22087032518560257;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.10394929247550566;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.14286117219398245;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.13556054134273204;  // std dev = 1.891, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.2097577156325356;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.08372807955323866;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.08372807955323866;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.2822999703056952;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.035979638325955396;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.15330815751559518;  // std dev = 0.852, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.21641175180908964;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.07800530949370418;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.1089271882629248;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.10557905581886738;  // std dev = 1.894, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.14575648741360903;  // std dev = 0.315, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.06457405393631672;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.26036680427222664;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.0270206743893201;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.18534574403831083;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.05819105189405195;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.08273392196844122;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.08405202913706912;  // std dev = 1.895, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.15684395404186718;  // std dev = 1.67e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.04949778322519479;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.03514366680160557;  // std dev = 0.491, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.044959531416368506;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.06426412575921713;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.03619635530442473;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.17045313977889454;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.13719983240199474;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.03777940363354101;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.026737502328327768;  // std dev = 0.491, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.537471
   AUC PR    = 0.344396
   CLL	      = -0.755794
   Precision = 0.354232 at threshold = 0.5
   Recall    = 0.955922
   F1        = 0.516913


Total learning time: 138.07246088981628 seconds
Total inference time: 15.538 seconds
AUC ROC: 0.537471


Results scoring model
   AUC ROC   = 0.553438
   AUC PR    = 0.660717
   CLL	      = -0.665502
   Precision = 0.594317 at threshold = 0.5
   Recall    = 0.976654
   F1        = 0.73896


Total scoring time: 2.199 seconds
Refined model CLL: -0.665502


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.537043
   AUC PR    = 0.345485
   CLL	      = -0.755618
   Precision = 0.353628 at threshold = 0.5
   Recall    = 0.956812
   F1        = 0.5164


Total learning time: 263.4628869686127 seconds
Total inference time: 12.581 seconds
AUC ROC: 0.537043
Total revision time: 263.4628869686127
Best scored revision CLL: -0.66491


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:12:02
{'AUC ROC': 0.537043, 'AUC PR': 0.345485, 'CLL': -0.755618, 'Precision': [0.353628, 0.5], 'Recall': 0.956812, 'F1': 0.5164, 'Learning time': 263.4628869686127, 'Inference time': 12.581, 'parameter': {'AUC ROC': 0.537043, 'AUC PR': 0.345485, 'CLL': -0.755618, 'Precision': [0.353628, 0.5], 'Recall': 0.956812, 'F1': 0.5164, 'Learning time': 121.04942607879639, 'Inference time': 12.581}}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.5791684237702857;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.22916842377028543;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.008145345695425854;  // std dev = 0.852, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.07083157622971455;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.3045453081923796;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.4047531668618019;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.42464571865829975;  // std dev = 1.908, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.4317030979309822;  // std dev = 0.348, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.5118627986468952;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.18162271221626702;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.06570188218847453;  // std dev = 0.846, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.13495415790755155;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.23990098036198004;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.3098169854894562;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.32456036871644006;  // std dev = 1.905, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.35163309306853874;  // std dev = 0.335, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.1316730160126654;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.18613079633684707;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.23288770051702257;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.20738703360610133;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.3712569085691976;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.36332570147106397;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.10395681007912147;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.10354034558269198;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14105921081951767;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.17498421379444495;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.15570970363466996;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.2894441187864921;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.2840857557415314;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.08081634704127262;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.08048520911847132;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1061452136318286;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.1468215107291236;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.10151648926205137;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.23370108066642245;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.22998958852745188;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.06231133890180871;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.062053704514323335;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.2822303592919295;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.03650523885744293;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.13936904665380662;  // std dev = 0.836, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.2043237899484712;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.07802936802005149;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.11183461688104616;  // std dev = 1.915, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.10409769596920966;  // std dev = 1.893, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.14542057253131474;  // std dev = 0.318, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.047569338903151896;  // std dev = 0.489, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.26034157223042514;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.027416474536547955;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.17888496796480324;  // std dev = 1.222, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.05818280183498398;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.08601392360697571;  // std dev = 1.915, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.08198878886582461;  // std dev = 1.895, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.17026078570671185;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.03631983068294583;  // std dev = 0.489, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.017249550293076482;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04498528319250191;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.0648417347663892;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.03730713011975576;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.1669614422973077;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.14753824165287371;  // std dev = 2.36e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.02765267645364165;  // std dev = 0.489, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.013094701883582511;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.537402
   AUC PR    = 0.346125
   CLL	      = -0.755713
   Precision = 0.353871 at threshold = 0.5
   Recall    = 0.956367
   F1        = 0.516595


Total learning time: 128.04011797904968 seconds
Total inference time: 13.635 seconds
AUC ROC: 0.537402


Dataset: 3_imdb_cora, Fold: 2, Type: Scratch (RDN-B), Time: 00:14:24
{'AUC ROC': 0.537402, 'AUC PR': 0.346125, 'CLL': -0.755713, 'Precision': [0.353871, 0.5], 'Recall': 0.956367, 'F1': 0.516595, 'Learning time': 128.04011797904968, 'Inference time': 13.635}


Starting fold 3

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos  examples: 2436
Target test neg examples: 2800

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D), haswordtitle(F, C) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordtitle(G, C) )
%   | | | then return 0.14703782398840126;  // std dev = 3.040, 45.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=13 */
%   | | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.22097472385122205;  // std dev = 0.481, 1,458.000 (wgt'ed) examples reached here.  /* #neg=929 #pos=529 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.4981489350995123;  // std dev = 2.400, 25.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=16 */
%   | | | else return -0.14185106490048766;  // std dev = 6.66e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else return -0.00851773156715447;  // std dev = 0.340, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.026373234164932945;  // std dev = 0.374, 107.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=18 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.24610808143841542;  // std dev = 0.483, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return 0.14161657658756205;  // std dev = 0.459, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | else return 0.1850556618516262;  // std dev = 0.479, 1,486.000 (wgt'ed) examples reached here.  /* #neg=957 #pos=529 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then return -0.016408026096206514;  // std dev = 0.329, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.03212330510771571;  // std dev = 3.394, 79.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=14 */
%   | | | else return -0.033980773654591206;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.013897229995687745;  // std dev = 3.627, 111.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=18 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.19642490805216734;  // std dev = 0.490, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return 0.12158612039650357;  // std dev = 0.459, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.14333047650474606;  // std dev = 0.474, 38.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=13 */
%   | | else return 0.15344364338098973;  // std dev = 0.478, 1,465.000 (wgt'ed) examples reached here.  /* #neg=949 #pos=516 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.02742573511224809;  // std dev = 0.287, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return 0.0398966346955991;  // std dev = 3.604, 85.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=16 */
%   | | | else return -0.03566436700339059;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.010354347812155837;  // std dev = 3.425, 100.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=16 */
%   | | | else return -0.11458421803166378;  // std dev = 0.010, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.10441729437545806;  // std dev = 0.461, 48.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=15 */
%   | | else return 0.11051512777555145;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.13679801587899043;  // std dev = 0.480, 1,465.000 (wgt'ed) examples reached here.  /* #neg=936 #pos=529 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then return 0.03743420878268739;  // std dev = 0.363, 84.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=16 */
%   | | else if ( title(J, H), venue(J, A) )
%   | | | then return -0.14377714949233236;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.07844507272988989;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return 0.028818867401466334;  // std dev = 3.616, 88.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=16 */
%   | | | else return -0.0625907152234978;  // std dev = 1.361, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   | | else return -0.10398325596870023;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.3242429312087709;  // std dev = 1.037, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.05517010296838672;  // std dev = 0.459, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | else return 0.11535575585653578;  // std dev = 0.481, 1,455.000 (wgt'ed) examples reached here.  /* #neg=926 #pos=529 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then return -0.012008170868949878;  // std dev = 0.338, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.032398901061771956;  // std dev = 3.317, 84.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=16 */
%   | | | else return -0.01867932234169635;  // std dev = 1.309, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.012565026626663084;  // std dev = 3.648, 97.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
%   | | | else return -0.09230055367423375;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09004089433754113;  // std dev = 0.480, 1,512.000 (wgt'ed) examples reached here.  /* #neg=967 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5324391617423424;  // std dev = 1.953, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.13540498499342832;  // std dev = 0.013, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.12491116245044956;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.030525790776552972;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.00889745639836804;  // std dev = 3.648, 96.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=16 */
%   | | | else return -0.03563084151355225;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else return -0.08882919261482741;  // std dev = 0.014, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0677453634319274;  // std dev = 0.479, 1,530.000 (wgt'ed) examples reached here.  /* #neg=985 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.567218153369388;  // std dev = 2.091, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.15958982195854016;  // std dev = 0.026, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.1268692334232573;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.05494894839492453;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else return -0.011142039845801751;  // std dev = 0.304, 116.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=18 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.0936732182717057;  // std dev = 1.230, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.028204458110061278;  // std dev = 0.465, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | else return 0.059622417749236684;  // std dev = 0.481, 1,461.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=529 */
%   else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | then if ( title(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.5486259942935932;  // std dev = 1.792, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.1387274510679268;  // std dev = 0.027, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else return -0.03504045546689467;  // std dev = 0.285, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, B) )
%   | | | then return -0.006113406410511894;  // std dev = 2.990, 98.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=16 */
%   | | | else return -0.05702158660961623;  // std dev = 1.334, 26.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | | else return -0.08162670721591384;  // std dev = 0.013, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.04247213439815805;  // std dev = 0.471, 43.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=15 */
%   | | else return -0.11283035846397911;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.0437224153776229;  // std dev = 0.480, 1,474.000 (wgt'ed) examples reached here.  /* #neg=945 #pos=529 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then return 0.03658530407894154;  // std dev = 0.306, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return -0.010334947114744818;  // std dev = 0.269, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.007151760632502551;  // std dev = 2.960, 87.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=16 */
%   | | | else return 0.0034943203210871477;  // std dev = 3.043, 98.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=16 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.02579132203631436;  // std dev = 0.468, 44.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=15 */
%   | | else return -0.003836754721215215;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.03965282657707058;  // std dev = 0.481, 1,451.000 (wgt'ed) examples reached here.  /* #neg=922 #pos=529 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( title(J, H), venue(J, B) )
%   | | | then return 0.23588547591272077;  // std dev = 2.433, 33.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=16 */
%   | | | else return -0.11964760052768361;  // std dev = 0.220, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return 0.05303973923597431;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then return -0.10981570810360591;  // std dev = 0.036, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return -0.008670783107500265;  // std dev = 3.161, 109.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=18 */
%   | | | else return -0.07527690509366522;  // std dev = 0.015, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.566646
   AUC PR    = 0.515574
   CLL	      = -0.708532
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 110.70648193359375 seconds
Total inference time: 11.942 seconds
AUC ROC: 0.566646


Results scoring model
   AUC ROC   = 0.595452
   AUC PR    = 0.279814
   CLL	      = -0.515781
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 3.277 seconds
Parameter learned model CLL: -0.515781


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(A, D), haswordtitle(F, C)', 'true,true,false': 'haswordtitle(G, C)', 'false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false,true': 'title(J, I), venue(J, B)', 'false,true,true': 'samebib(J, K), venue(K, A)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true': [0.816, 1, 2], 'true,true,false,true': [3.04, 32, 13], 'true,true,false,false': [0.866, 3, 1], 'true,false': [0.481, 929, 529], 'false,true,true,true': [2.4, 9, 16], 'false,true,true,false': [6.66e-08, 65, 0], 'false,true,false': [0.34, 13, 2], 'false,false,true': [0.374, 89, 18], 'false,false,false': [0.0, 6, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, A)', 'false,false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true': [0.483, 4, 3], 'true,true,false': [0.459, 30, 13], 'true,false': [0.479, 957, 529], 'false,true': [0.329, 14, 2], 'false,false,true,true': [3.394, 65, 14], 'false,false,true,false': [1.333, 16, 2], 'false,false,false,true': [3.627, 93, 18], 'false,false,false,false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false,true': 'title(M, L), venue(M, A)', 'false,false,false': 'haswordvenue(B, N), haswordtitle(P, N)'}, {'true,true,true': [0.49, 4, 3], 'true,true,false': [0.459, 30, 13], 'true,false,true': [0.474, 25, 13], 'true,false,false': [0.478, 949, 516], 'false,true': [0.287, 16, 2], 'false,false,true,true': [3.604, 69, 16], 'false,false,true,false': [1.338, 17, 2], 'false,false,false,true': [3.425, 84, 16], 'false,false,false,false': [0.01, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, C)', 'false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false,true': 'title(I, H), venue(I, B)', 'false,true,false': 'title(J, H), venue(J, A)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false,true': 'title(M, L), venue(M, A)'}, {'true,true,true': [0.461, 33, 15], 'true,true,false': [0.816, 2, 1], 'true,false': [0.48, 936, 529], 'false,true,true': [0.363, 68, 16], 'false,true,false,true': [0.0, 7, 0], 'false,true,false,false': [1.247, 7, 2], 'false,false,true,true': [3.616, 72, 16], 'false,false,true,false': [1.361, 25, 2], 'false,false,false': [0.009, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, B)', 'false,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true': [1.037, 2, 3], 'true,true,false': [0.459, 30, 13], 'true,false': [0.481, 926, 529], 'false,true': [0.338, 13, 2], 'false,false,true,true': [3.317, 68, 16], 'false,false,true,false': [1.309, 14, 2], 'false,false,false,true': [3.648, 81, 16], 'false,false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,true,false': 'title(H, E), venue(H, A)', 'false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, A)'}, {'true': [0.48, 967, 545], 'false,true,true,true': [1.953, 5, 16], 'false,true,true,false': [0.013, 60, 0], 'false,true,false,true': [5.27e-09, 9, 0], 'false,true,false,false': [1.279, 9, 2], 'false,false,true,true': [3.648, 80, 16], 'false,false,true,false': [1.345, 19, 2], 'false,false,false': [0.014, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,true,false': 'title(H, E), venue(H, B)'}, {'true': [0.479, 985, 545], 'false,true,true,true': [2.091, 6, 16], 'false,true,true,false': [0.026, 63, 0], 'false,true,false,true': [0.0, 8, 0], 'false,true,false,false': [1.279, 9, 2], 'false,false': [0.304, 98, 18]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(B, D)', 'false': 'haswordvenue(A, F), haswordtitle(G, F)', 'false,true': 'title(H, G), venue(H, A)', 'false,true,true': 'samebib(H, I), venue(I, B)', 'false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,false,true': 'title(L, K), venue(L, B)'}, {'true,true,true': [1.23, 3, 3], 'true,true,false': [0.465, 28, 13], 'true,false': [0.481, 932, 529], 'false,true,true,true': [1.792, 4, 16], 'false,true,true,false': [0.027, 61, 0], 'false,true,false': [0.285, 20, 2], 'false,false,true,true': [2.99, 82, 16], 'false,false,true,false': [1.334, 24, 2], 'false,false,false': [0.013, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, C)', 'false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false,false': 'haswordvenue(A, K), haswordtitle(L, K)'}, {'true,true,true': [0.471, 28, 15], 'true,true,false': [0.866, 3, 1], 'true,false': [0.48, 945, 529], 'false,true': [0.306, 8, 2], 'false,false,true': [0.269, 13, 2], 'false,false,false,true': [2.96, 71, 16], 'false,false,false,false': [3.043, 82, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, C)', 'false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false,true': 'title(I, H), venue(I, A)', 'false,true,true': 'title(J, H), venue(J, B)', 'false,false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true,true': [0.468, 29, 15], 'true,true,false': [0.816, 2, 1], 'true,false': [0.481, 922, 529], 'false,true,true,true': [2.433, 17, 16], 'false,true,true,false': [0.22, 69, 0], 'false,true,false': [0.4, 8, 2], 'false,false,true': [0.036, 6, 0], 'false,false,false,true': [3.161, 91, 18], 'false,false,false,false': [0.015, 5, 0]}]]
[{'': [0.2306587430375725, 0.13786718289706365], 'true': [0.21301775147928942, 0.23118323576839714], 'true,true': [0.22222222222222224, 0.20408163265306076], 'true,true,false': [0.20543209876543156, 0.18750000000000003], 'false': [0.14204081632653007, 0.13391808285691856], 'false,true': [0.1461728395061723, 0.11555555555555559], 'false,true,true': [0.23039999999999958, 6.832141690000964e-17], 'false,false': [0.13992488426936797, -6.938893903907228e-18]}, {'': [0.22883374265015943, 0.12479095631994395], 'true': [0.21533564500524588, 0.22926089894193333], 'true,true': [0.23304079877059106, 0.2109248242293131], 'false': [0.10851284219631224, 0.12595730137323644], 'false,false': [0.13774046126049583, 0.11588868013299901], 'false,false,true': [0.14580996635154675, 0.09876543209876543], 'false,false,false': [0.1185098551408753, 0.0]}, {'': [0.22770033604632028, 0.12427517941836974], 'true': [0.2157063659360975, 0.22808497000231925], 'true,false': [0.22506925207756182, 0.22816060757840906], 'true,true': [0.24026196760500132, 0.21092482422931377], 'false': [0.08232441281635931, 0.12774411099962266], 'false,false': [0.1429410259182552, 0.11245788370836368], 'false,false,true': [0.15279684244738448, 0.09418282548476449], 'false,false,false': [0.11733643283450848, 2.0572390124320993e-05]}, {'': [0.23013753972897816, 0.12791580884503514], 'true': [0.21300386842012226, 0.23069950602000439], 'true,true': [0.2124255340385396, 0.22222222222222224], 'false': [0.12831381184338003, 0.12729993565659536], 'false,true': [0.13141564988759274, 0.10937499999999999], 'false,false': [0.13131035965804128, 2.0182391828479918e-05], 'false,false,true': [0.14859321860554547, 0.0685871056241426], 'false,true,false': [-3.96508223080413e-18, 0.1728395061728395]}, {'': [0.23100165197166844, 0.12884480594073358], 'true': [0.2181139105197826, 0.2313937898209072], 'true,true': [0.21508155185567146, 0.2109248242293133], 'false': [0.11405398151623297, 0.12989302863810404], 'false,false': [0.12747938169816617, 0.1321583517851838], 'false,false,false': [0.13717266429183472, 0.0], 'false,false,true': [0.13095596469926774, 0.10703577362129658]}, {'': [0.23043678882552449, 0.12533280481438883], 'false': [0.12480743314437347, 0.12549776775643415], 'false,false': [0.12952047778094372, 4.742915705148801e-05], 'false,false,true': [0.13864799427440772, 0.08616780045351477], 'false,true': [0.13276661615793744, 0.08779794180923402], 'false,true,true': [0.1817101071509123, 2.6672620771051035e-06], 'false,true,false': [3.0839528461809902e-18, 0.14876033057851248]}, {'': [0.22919341967813522, 0.11622497448769356], 'false': [0.1424718089610359, 0.09225332641008761], 'false,true': [0.15280668511535278, 0.09418282548476449], 'false,true,true': [0.1988322133634882, 1.0792237218683178e-05], 'false,true,false': [0.0, 0.14876033057851235]}, {'': [0.2306293968869068, 0.09941873665724008], 'true': [0.22155540383644654, 0.23090473105838843], 'true,true': [0.2521035439246004, 0.21653777513384875], 'false': [0.11839740948700118, 0.08368385620906756], 'false,true': [0.1275048276356498, 0.08143685456152962], 'false,true,true': [0.16055874727978775, 1.1980920220421499e-05], 'false,false': [0.0868939073951668, 3.343970918487232e-05], 'false,false,true': [0.09125402460159394, 0.06841138562860224]}, {'': [0.22971633263081093, 0.09547562404043665], 'true': [0.22052837537705275, 0.23000283226155518], 'true,true': [0.22154811308766356, 0.1875], 'false': [0.09334274096999881, 0.09553185539007895], 'false,false': [0.0722355331604991, 0.09740261293678293], 'false,false,false': [0.10070526068925945, 0.09446437980018078]}, {'': [0.23136069822830066, 0.08839888880858836], 'true': [0.21925760760938415, 0.23174494930351552], 'true,true': [0.2189994435438714, 0.22222222222222224], 'false': [0.09302927650686586, 0.08393719211945358], 'false,true': [0.08616665336590701, 0.16000000000000003], 'false,true,true': [0.17935871341967036, 0.0007012008387563551], 'false,false': [0.00021454837609534658, 0.08786125323558798], 'false,false,false': [0.09169504567349379, 4.278047540076726e-05]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
0;false,true;title(J, I), venue(J, B).;true;true
0;false,true,true;samebib(J, K), venue(K, A).;true;true
0;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(B, G), haswordauthor(H, G).;true;true
1;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
1;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(A, I), haswordauthor(J, I).;true;true
2;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;true
2;false,false,false;haswordvenue(B, N), haswordtitle(P, N).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, G), haswordtitle(H, G).;true;true
3;false,true;title(I, H), venue(I, B).;true;true
3;false,true,false;title(J, H), venue(J, A).;true;true
3;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(B, G), haswordauthor(H, G).;true;true
4;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
4;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;false,true;title(F, E), venue(F, B).;true;true
5;false,true,true;samebib(F, G), venue(G, A).;true;true
5;false,true,false;title(H, E), venue(H, A).;true;true
5;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
6;false,true;title(F, E), venue(F, A).;true;true
6;false,true,true;samebib(F, G), venue(G, B).;true;true
6;false,true,false;title(H, E), venue(H, B).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(A, F), haswordtitle(G, F).;true;true
7;false,true;title(H, G), venue(H, A).;true;true
7;false,true,true;samebib(H, I), venue(I, B).;true;true
7;false,false;haswordvenue(B, J), haswordtitle(K, J).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(B, G), haswordtitle(H, G).;true;true
9;false,true;title(I, H), venue(I, A).;true;true
9;false,true,true;title(J, H), venue(J, B).;true;true
9;false,false;haswordvenue(A, K), haswordauthor(L, K).;true;true
9;false,false,false;haswordvenue(A, M), haswordtitle(N, M).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21623040684720776;  // std dev = 0.479, 1,522.000 (wgt'ed) examples reached here.  /* #neg=977 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6581489350995123;  // std dev = 1.789, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.14185106490048766;  // std dev = 6.32e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.10814893509951218;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.05567979929704324;  // std dev = 3.583, 81.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=16 */
%   | | | else return -0.05489454316135737;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18271699658229415;  // std dev = 0.478, 1,544.000 (wgt'ed) examples reached here.  /* #neg=999 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.017934924427598302;  // std dev = 0.329, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 0.031257377735792805;  // std dev = 3.240, 85.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=16 */
%   | | | else return -0.05231477522230454;  // std dev = 1.332, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return -0.1429349244275983;  // std dev = 0.020, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.013240891332773517;  // std dev = 3.662, 101.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=16 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16787735889713312;  // std dev = 0.482, 1,491.000 (wgt'ed) examples reached here.  /* #neg=946 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5773606214334274;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.1492389505134057;  // std dev = 0.027, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.1368558354472103;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0.04496234637097151;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.033010781454612906;  // std dev = 3.199, 85.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=16 */
%   | | | else return -0.026408226867604034;  // std dev = 1.318, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else return -0.12408529060969166;  // std dev = 0.015, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12306225160249432;  // std dev = 0.477, 1,563.000 (wgt'ed) examples reached here.  /* #neg=1,018 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5226311341078348;  // std dev = 1.953, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.1310116750085001;  // std dev = 0.029, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.12147781711191906;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.024412359085430973;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.03362263603860947;  // std dev = 3.192, 81.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=16 */
%   | | | else return -0.021732593314660188;  // std dev = 1.316, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else return -0.11121893463807629;  // std dev = 0.014, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10240724434439068;  // std dev = 0.477, 1,556.000 (wgt'ed) examples reached here.  /* #neg=1,011 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4668861469430173;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.1363033540413857;  // std dev = 0.010, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.11483206164890133;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.039028028856861935;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.027048302356705557;  // std dev = 2.871, 76.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=16 */
%   | | | else return -0.042580412309298495;  // std dev = 1.331, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else return -0.10256380546887418;  // std dev = 0.003, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.07348001014486547;  // std dev = 0.474, 44.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=15 */
%   | | else return -0.06742908076422541;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.09145830051122354;  // std dev = 0.480, 1,474.000 (wgt'ed) examples reached here.  /* #neg=945 #pos=529 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.4022986464049133;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.11900811080551893;  // std dev = 0.050, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | else return 0.05236585620953012;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return -0.012268298637545473;  // std dev = 2.940, 100.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=16 */
%   | | | else return 0.01379430061073041;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | else return -0.09341351645742042;  // std dev = 0.002, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0667278697547174;  // std dev = 0.478, 1,547.000 (wgt'ed) examples reached here.  /* #neg=1,002 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4500847761470874;  // std dev = 1.790, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.11912338676931572;  // std dev = 0.009, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.10388017970365745;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.02494520113464463;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return -0.006557729289408756;  // std dev = 2.554, 85.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=16 */
%   | | | else return -0.047405655652519495;  // std dev = 1.325, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | | else return -0.08628273063595181;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04752784999506511;  // std dev = 0.476, 1,571.000 (wgt'ed) examples reached here.  /* #neg=1,026 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.017348802106947673;  // std dev = 0.222, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.010839910155176286;  // std dev = 0.227, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return -0.021782110650276243;  // std dev = 2.784, 102.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=16 */
%   | | | else return -0.024960038053822763;  // std dev = 2.823, 102.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=16 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05220403599206393;  // std dev = 0.480, 1,507.000 (wgt'ed) examples reached here.  /* #neg=962 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.04902645279975404;  // std dev = 0.227, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.005470575137297786;  // std dev = 2.362, 70.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=14 */
%   | | | else return -0.025716138329342872;  // std dev = 1.318, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return -0.006852225175441641;  // std dev = 2.884, 106.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=18 */
%   | | | else return -0.07790669749887885;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.6929346089335201;  // std dev = 0.024, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.021508023111380482;  // std dev = 0.456, 44.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=13 */
%   | else return 0.029928191111302238;  // std dev = 0.477, 1,508.000 (wgt'ed) examples reached here.  /* #neg=979 #pos=529 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( title(J, H), venue(J, A) )
%   | | | then return 0.2576072686819503;  // std dev = 2.003, 25.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=16 */
%   | | | else return -0.11229526050265022;  // std dev = 0.493, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else return 0.14671399065965277;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return 1.1808302534454606E-4;  // std dev = 2.535, 87.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=16 */
%   | | | else return -0.04672723019036003;  // std dev = 1.334, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   | | else return -0.07256256913003865;  // std dev = 0.000320, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.565042
   AUC PR    = 0.5125
   CLL	      = -0.708589
   Precision = 0.582524 at threshold = 0.5
   Recall    = 0.024631
   F1        = 0.047263


Total learning time: 96.71748304367065 seconds
Total inference time: 11.942 seconds
AUC ROC: 0.565042


Results scoring model
   AUC ROC   = 0.592924
   AUC PR    = 0.279939
   CLL	      = -0.510541
   Precision = 0.636364 at threshold = 0.5
   Recall    = 0.024096
   F1        = 0.046434


Total scoring time: 3.044 seconds
Refined model CLL: -0.510541


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.565042
   AUC PR    = 0.5125
   CLL	      = -0.708589
   Precision = 0.582524 at threshold = 0.5
   Recall    = 0.024631
   F1        = 0.047263


Total learning time: 213.7449649772644 seconds
Total inference time: 11.942 seconds
AUC ROC: 0.565042
Total revision time: 213.7449649772644
Best scored revision CLL: -0.510541


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:18:26
{'AUC ROC': 0.565042, 'AUC PR': 0.5125, 'CLL': -0.708589, 'Precision': [0.582524, 0.5], 'Recall': 0.024631, 'F1': 0.047263, 'Learning time': 213.7449649772644, 'Inference time': 11.942, 'parameter': {'AUC ROC': 0.566646, 'AUC PR': 0.515574, 'CLL': -0.708532, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 110.70648193359375, 'Inference time': 11.942}}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.212505241991575;  // std dev = 0.478, 1,538.000 (wgt'ed) examples reached here.  /* #neg=993 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.00851773156715447;  // std dev = 0.340, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 0.04205698107652387;  // std dev = 3.614, 87.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=16 */
%   | | | else return -0.0168510649004878;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.023097388707759806;  // std dev = 3.655, 97.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then if ( haswordvenue(A, D) )
%   | | | then return 0.4969300077413307;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.14733651180637136;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.030263341074664007;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.19736951734115063;  // std dev = 0.482, 1,441.000 (wgt'ed) examples reached here.  /* #neg=912 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return -0.03567457948155247;  // std dev = 0.314, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.03984456757051832;  // std dev = 3.613, 87.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=16 */
%   | | | else return -0.027038961549758326;  // std dev = 1.328, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else return 0.016948495665830916;  // std dev = 0.367, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D), haswordtitle(F, C) )
%   | | then return 0.24848805284644312;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( haswordtitle(G, C) )
%   | | | then return 0.0895011252466019;  // std dev = 3.040, 45.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=13 */
%   | | | else return 0.07595572031565523;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.13347915557321444;  // std dev = 0.468, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | | else return 0.16553444286408558;  // std dev = 0.481, 1,414.000 (wgt'ed) examples reached here.  /* #neg=898 #pos=516 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, A) )
%   | | then if ( samebib(L, M), venue(M, B) )
%   | | | then return 0.6514690331367797;  // std dev = 1.790, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.14740289857227806;  // std dev = 0.026, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else return 0.10813707450286048;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else return 0.009770449863896186;  // std dev = 0.363, 115.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=18 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1290884140344611;  // std dev = 0.479, 1,533.000 (wgt'ed) examples reached here.  /* #neg=988 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then return 0.03602974649830481;  // std dev = 0.389, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
%   | | else if ( title(G, E), venue(G, B) )
%   | | | then return -0.14256209258756966;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 2.9505026957317237E-4;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.028997340308083014;  // std dev = 3.222, 83.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=16 */
%   | | | else return -0.056575670530145276;  // std dev = 1.335, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else return -0.13005548286365337;  // std dev = 0.016, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10587899850322903;  // std dev = 0.479, 1,532.000 (wgt'ed) examples reached here.  /* #neg=987 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then return 0.018143561765298553;  // std dev = 0.349, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
%   | | else if ( title(G, E), venue(G, A) )
%   | | | then return -0.11879602926086766;  // std dev = 6.45e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.01492321441554043;  // std dev = 1.317, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.047860391580817035;  // std dev = 3.570, 79.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=16 */
%   | | | else return -0.030349330503477264;  // std dev = 1.328, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else return -0.11738617654804435;  // std dev = 0.013, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0855233952013202;  // std dev = 0.479, 1,532.000 (wgt'ed) examples reached here.  /* #neg=987 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6384213282312252;  // std dev = 1.790, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.16128118155574678;  // std dev = 0.014, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.12270259548270947;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.0832945920972162;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return -0.004374841371413849;  // std dev = 3.261, 101.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=16 */
%   | | | else return -0.0361077646571839;  // std dev = 1.326, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else return -0.10316208296924813;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07096295015352845;  // std dev = 0.480, 1,520.000 (wgt'ed) examples reached here.  /* #neg=975 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5411513605536408;  // std dev = 1.791, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.13179181020729347;  // std dev = 0.097, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | else return 0.03989067127425499;  // std dev = 0.386, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 1.96567854685575E-5;  // std dev = 3.232, 94.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=16 */
%   | | | else return -0.03746440684718573;  // std dev = 1.326, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else return -0.09400073769497364;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05400321451872959;  // std dev = 0.479, 1,530.000 (wgt'ed) examples reached here.  /* #neg=985 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.044019812596091015;  // std dev = 0.255, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.0204903606812264;  // std dev = 3.190, 82.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=16 */
%   | | | else return -0.018602785999359592;  // std dev = 1.313, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else return -0.007032730344648856;  // std dev = 0.310, 93.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=16 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04330123111167605;  // std dev = 0.479, 1,527.000 (wgt'ed) examples reached here.  /* #neg=982 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0026102668625973087;  // std dev = 0.275, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -0.04020244731554324;  // std dev = 0.285, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return -0.0016380610611469594;  // std dev = 3.297, 95.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=16 */
%   | | | else return -0.01277692818257135;  // std dev = 2.969, 105.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=16 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03127188432469309;  // std dev = 0.478, 1,538.000 (wgt'ed) examples reached here.  /* #neg=993 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.39669215023794063;  // std dev = 2.310, 24.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | | | else return -0.14159642624631646;  // std dev = 0.034, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.10456596914756125;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.024649489742551683;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return -0.10697805151925932;  // std dev = 0.016, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return -0.0040057049234968;  // std dev = 3.134, 110.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=18 */
%   | | | else return -0.08362927247670818;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.563567
   AUC PR    = 0.510286
   CLL	      = -0.712068
   Precision = 0.2 at threshold = 0.5
   Recall    = 0.000411
   F1        = 0.000819


Total learning time: 92.61608910560608 seconds
Total inference time: 10.195 seconds
AUC ROC: 0.563567


Dataset: 3_imdb_cora, Fold: 3, Type: Scratch (RDN-B), Time: 00:20:09
{'AUC ROC': 0.563567, 'AUC PR': 0.510286, 'CLL': -0.712068, 'Precision': [0.2, 0.5], 'Recall': 0.000411, 'F1': 0.000819, 'Learning time': 92.61608910560608, 'Inference time': 10.195}


Starting fold 4

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos  examples: 2270
Target test neg examples: 3954

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.24811816884741328;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.16653882456488167;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7825012972897073;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.21749870271029265;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.5825012972897073;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.2006373174408249;  // std dev = 0.493, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.25543090384670025;  // std dev = 3.509, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.33354380143522294;  // std dev = 2.603, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return 0.1420942428155646;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.16627278814108717;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.16153884536939936;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.24389847404002757;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.2613806000007637;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3144965494660669;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.11914890490746433;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.13351355589432412;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.12875910516214492;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.18678417359691227;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.20129574584424512;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.23723136491506377;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.0984134027840187;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10546120260430522;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.10105349094222651;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.14111998948018567;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.152505134275848;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.17800353626734847;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.08026654944252247;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08229285039787738;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.07842124408592599;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.10600521577534826;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.1146753959044374;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.1341360554815721;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.06479591611329234;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06365159050563558;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.06037404761988859;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.0795104766976609;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.0860246254109223;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.10185911604805963;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.05187916934404051;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04892590698407874;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.04622102614851068;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.059671618864593844;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.06454279368145692;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.07797595788497556;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.04126932998424623;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.5997412828275803;  // std dev = 0.134, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.3576767531787838;  // std dev = 0.065, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.39899310596894744;  // std dev = 0.877, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.03532015873420728;  // std dev = 0.492, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.039470128123094604;  // std dev = 3.489, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.051295643370206444;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | | then return 0.03266374873483021;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.018802582886875124;  // std dev = 2.960, 54.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
%   | | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.573143
   AUC PR    = 0.43669
   CLL	      = -0.640199
   Precision = 0.755869 at threshold = 0.5
   Recall    = 0.070925
   F1        = 0.129682


Total learning time: 190.2116448879242 seconds
Total inference time: 16.138 seconds
AUC ROC: 0.573143


Results scoring model
   AUC ROC   = 0.556635
   AUC PR    = 0.474299
   CLL	      = -0.665958
   Precision = 0.701493 at threshold = 0.5
   Recall    = 0.062918
   F1        = 0.115479


Total scoring time: 2.611 seconds
Parameter learned model CLL: -0.665958


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'samebib(F, G), venue(G, B)', 'true,false': 'haswordtitle(H, C)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,true': 'haswordtitle(L, M), haswordvenue(B, M)'}, {'true,true,true,true': [0.0, 0, 8], 'true,true,true,false': [1.05e-08, 7, 0], 'true,true,false': [0.894, 1, 4], 'true,false,true': [0.493, 924, 664], 'true,false,false,true': [3.509, 25, 25], 'true,false,false,false': [2.603, 11, 18], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.493, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.493, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.492, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.492, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.492, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.492, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'samebib(E, F), venue(F, A)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false,true': 'haswordtitle(L, M), haswordvenue(B, M)'}, {'true,true,true': [0.134, 0, 8], 'true,true,false': [0.065, 8, 0], 'true,false': [0.877, 1, 4], 'false,true,true': [0.492, 924, 664], 'false,true,false,true': [3.489, 25, 25], 'false,true,false,false': [2.598, 11, 18], 'false,false,true,true': [2.0, 12, 6], 'false,false,true,false': [2.96, 43, 11], 'false,false,false': [0.4, 44, 11]}]]
[{'': [0.24455361249545102, 0.17089843750000108], 'true': [0.24366352318011741, 0.24803717352988336], 'true,false': [0.25000000000000133, 0.2354340071343634], 'true,false,true': [0.24489795918367302, 0.2417355371900822], 'true,false,false': [0.2417355371900822, 0.20408163265306106], 'false': [0.17864514918371124, 0.15999999999999948], 'false,true': [0.22222222222222232, 0.15999999999999948]}, {'': [0.24423965838627743, 0.17036542604714275], 'true': [0.24366352318012574, 0.2455497403386633], 'true,false': [0.24813620683257942, 0.2345699639132993], 'true,false,true': [0.244897959183673, 0.2417355371900833], 'true,false,false': [0.2417355371900833, 0.20408163265306115], 'false': [0.177825777852918, 0.1600000000000007], 'false,true': [0.22222222222222207, 0.1600000000000007]}, {'': [0.24393157221315054, 0.1699046770245384], 'true': [0.24000000000000013, 0.24360350281441523], 'true,false': [0.24329828880331825, 0.2431019584682027], 'true,false,false': [0.24631150685892023, 0.2337064665173658], 'true,true': [0.24888888888888888, 0.16], 'true,true,true': [0.0, 1.586032892321652e-17], 'false': [0.1771174918718374, 0.15999999999999953], 'false,true': [0.22222222222222218, 0.15999999999999953]}, {'': [0.24275361851629576, 0.1695374267579385], 'true': [0.24261841584396163, 0.24212444330022406], 'true,false': [0.2451778514248195, 0.23316328773523748], 'true,false,true': [0.2448979591836733, 0.24173553719008273], 'true,false,false': [0.24173553719008262, 0.20408163265306126], 'false': [0.17655293676131073, 0.15999999999999967], 'false,true': [0.2222222222222222, 0.15999999999999967]}, {'': [0.24255322439123894, 0.16926465814576508], 'true': [0.24255724716963636, 0.24085213719201962], 'true,false': [0.24433609977736775, 0.23288313310156572], 'true,false,true': [0.24489795918367332, 0.24173553719008262], 'true,false,false': [0.24173553719008273, 0.20408163265306126], 'false': [0.17613362348097325, 0.15999999999999995], 'false,true': [0.22222222222222218, 0.15999999999999995]}, {'': [0.24244011119833353, 0.16907391107668154], 'true': [0.24251444341198522, 0.24018533814034473], 'true,false': [0.24390204541526841, 0.23276571950710898], 'true,false,true': [0.24489795918367344, 0.24173553719008278], 'true,false,false': [0.24173553719008264, 0.2040816326530612], 'false': [0.17584039773694393, 0.1599999999999999], 'false,true': [0.22222222222222215, 0.1599999999999999]}, {'': [0.24237809750863273, 0.16894712567466702], 'true': [0.24248533111562587, 0.23985699203291247], 'true,false': [0.24369397322825484, 0.2327160126225985], 'true,false,true': [0.24489795918367355, 0.2417355371900827], 'true,false,false': [0.24173553719008262, 0.20408163265306123], 'false': [0.17564549700260335, 0.16000000000000006], 'false,true': [0.22222222222222227, 0.16000000000000006]}, {'': [0.2423435376116293, 0.16886637846587366], 'true': [0.24246580728819464, 0.23969691096061163], 'true,false': [0.24359672590545128, 0.23269257639034463], 'true,false,true': [0.24489795918367324, 0.24173553719008253], 'true,false,false': [0.2417355371900827, 0.20408163265306123], 'false': [0.17552136843543573, 0.16000000000000014], 'false,true': [0.2222222222222222, 0.16000000000000014]}, {'': [0.24232355003255368, 0.16881678838519856], 'true': [0.24245275479578435, 0.23961719241429544], 'true,false': [0.2435510718111969, 0.23267970682583106], 'true,false,true': [0.24489795918367357, 0.24173553719008262], 'true,false,false': [0.24173553719008256, 0.20408163265306126], 'false': [0.1754451361327745, 0.16000000000000014], 'false,true': [0.22222222222222213, 0.16000000000000014]}, {'': [0.22774508981970953, 0.2369934519908113], 'false': [0.2420938438121464, 0.16979098879580476], 'false,true': [0.24221568808411095, 0.2395759396519611], 'false,true,false': [0.24352918357456904, 0.23267149374622248], 'true': [0.23241596941109618, 0.15393181477695944], 'true,true': [0.002242802538754418, 0.004264488448296244], 'false,false': [0.17724795889112818, 0.16000000000000011], 'false,false,true': [0.22222222222222202, 0.1622085048010975]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
2;true,true;author(F, E), venue(F, A).;true;true
2;true,true,true;samebib(F, G), venue(G, B).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true
9;true;author(E, D), venue(E, B).;true;true
9;true,true;samebib(E, F), venue(F, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.24811816884741328;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.16653882456488167;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7825012972897073;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.21749870271029265;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.5825012972897073;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.2006373174408249;  // std dev = 0.493, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.25543090384670025;  // std dev = 3.509, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.33354380143522294;  // std dev = 2.603, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return 0.1420942428155646;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.16627278814108717;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.16153884536939936;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.24389847404002757;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.2613806000007637;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3144965494660669;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.11914890490746433;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.13351355589432412;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.12875910516214492;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.18678417359691227;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.20129574584424512;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.23723136491506377;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.0984134027840187;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10546120260430522;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.10105349094222651;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.14111998948018567;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.152505134275848;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.17800353626734847;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.31684340738050265;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return -0.1831565926194978;  // std dev = 0.169, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.05508940509084233;  // std dev = 0.454, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08229285039787738;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.07842124408592599;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.10600521577534826;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.1146753959044374;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.1341360554815721;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.0698566325552314;  // std dev = 0.453, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.019979710273601896;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06365159050563558;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.06037404761988859;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.0795104766976609;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.0860246254109223;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.10185911604805963;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.056164285002883875;  // std dev = 0.453, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.017038797015620652;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.611318051219116;  // std dev = 0.133, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.3434794817453657;  // std dev = 0.072, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.4106189555011753;  // std dev = 0.877, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.04680436420374125;  // std dev = 0.492, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.05213928694358708;  // std dev = 3.490, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.06778528159265114;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return 0.04484505311418676;  // std dev = 1.918, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.017760671541598414;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else return 0.017579965844601066;  // std dev = 0.383, 54.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03735487848486755;  // std dev = 0.491, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.033834712779363015;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.04671171720033753;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.04768019026003068;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.06243862236880361;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.03561377160144466;  // std dev = 0.452, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.012608942154231957;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.574723
   AUC PR    = 0.437095
   CLL	      = -0.636592
   Precision = 0.755869 at threshold = 0.5
   Recall    = 0.070925
   F1        = 0.129682


Total learning time: 199.65278100967407 seconds
Total inference time: 16.212 seconds
AUC ROC: 0.574723


Results scoring model
   AUC ROC   = 0.55727
   AUC PR    = 0.474461
   CLL	      = -0.664009
   Precision = 0.701493 at threshold = 0.5
   Recall    = 0.062918
   F1        = 0.115479


Total scoring time: 2.603 seconds
Refined model CLL: -0.664009


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.574723
   AUC PR    = 0.437095
   CLL	      = -0.636592
   Precision = 0.755869 at threshold = 0.5
   Recall    = 0.070925
   F1        = 0.129682


Total learning time: 395.07842589759827 seconds
Total inference time: 16.212 seconds
AUC ROC: 0.574723
Total revision time: 395.07842589759827
Best scored revision CLL: -0.664009


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 00:27:20
{'AUC ROC': 0.574723, 'AUC PR': 0.437095, 'CLL': -0.636592, 'Precision': [0.755869, 0.5], 'Recall': 0.070925, 'F1': 0.129682, 'Learning time': 395.07842589759827, 'Inference time': 16.212, 'parameter': {'AUC ROC': 0.573143, 'AUC PR': 0.43669, 'CLL': -0.640199, 'Precision': [0.755869, 0.5], 'Recall': 0.070925, 'F1': 0.129682, 'Learning time': 190.2116448879242, 'Inference time': 16.138}}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.24811816884741328;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.16653882456488167;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.20848477447886868;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3912569620992536;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1420942428155646;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.17062637354018492;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3005711547884894;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.11914890490746433;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.13360339271793026;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.13664585375352234;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.22629823971521876;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.3234299635688567;  // std dev = 2.623, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return -0.1765700364311428;  // std dev = 0.141, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.07188755709780537;  // std dev = 0.454, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6851194194405705;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3148805805594295;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.4851194194405705;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.103255439591714;  // std dev = 0.493, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.12353511621533307;  // std dev = 3.492, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.1500790041100246;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then return 0.08623477877996187;  // std dev = 0.454, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.0238066600161269;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08223166766472047;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.08012368931034408;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.1064640057748568;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.113090430276702;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.13293567594053649;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, A) )
%   | | then if ( samebib(L, M), venue(M, B) )
%   | | | then return 0.3117043901101427;  // std dev = 2.617, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return -0.1882956098898577;  // std dev = 0.184, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.04640485188603882;  // std dev = 0.419, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0.020355951021442813;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06360288476548136;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.06171941813443866;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.07985482696276892;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.08483269039127353;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.10097419867196318;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.060758883011831806;  // std dev = 0.433, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.01736412134258457;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.01654780343017731;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04888771662526963;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.04726958997336258;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.059929054844707015;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.0636512698859724;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.07731786818829707;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.048701608211388366;  // std dev = 0.432, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.014781837877170705;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.01407913224870585;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.47441187664823126;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.2725296795162137;  // std dev = 0.127, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.32437017731280593;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.03574739740532342;  // std dev = 0.493, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.040008146471156414;  // std dev = 3.489, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.050670796522003146;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | | then return 0.03881160111571745;  // std dev = 1.831, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.015634422369800855;  // std dev = 2.813, 54.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
%   | | else return 0.011958818155578765;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.570959
   AUC PR    = 0.427223
   CLL	      = -0.634007
   Precision = 0.546125 at threshold = 0.5
   Recall    = 0.065198
   F1        = 0.11649


Total learning time: 205.83400678634644 seconds
Total inference time: 17.167 seconds
AUC ROC: 0.570959


Dataset: 3_imdb_cora, Fold: 4, Type: Scratch (RDN-B), Time: 00:31:05
{'AUC ROC': 0.570959, 'AUC PR': 0.427223, 'CLL': -0.634007, 'Precision': [0.546125, 0.5], 'Recall': 0.065198, 'F1': 0.11649, 'Learning time': 205.83400678634644, 'Inference time': 17.167}


Starting fold 5

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos  examples: 2467
Target test neg examples: 4522

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.7291166770349955;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15083186192878065;  // std dev = 2.913, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.051131391239862906;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6157326050686436;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.6392119282680095;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15769426647032894;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.10912768446848493;  // std dev = 0.441, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.03693744759731563;  // std dev = 0.807, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1534329638272584;  // std dev = 2.940, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.03825072160333175;  // std dev = 2.992, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05181004363723003;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.6805851247859591;  // std dev = 0.056, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return 0.2449182844345499;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.04746202633921468;  // std dev = 1.980, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.3226813064206765;  // std dev = 0.491, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.47549952672721435;  // std dev = 0.343, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.5336799076940315;  // std dev = 0.901, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.13786678533886548;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.0936683156805287;  // std dev = 0.441, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.0624998593509641;  // std dev = 0.413, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.24528990666542214;  // std dev = 0.490, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.4228986175459215;  // std dev = 0.287, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.521392715019265;  // std dev = 0.900, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14503719893982214;  // std dev = 0.015, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, A) )
%   | | | then return -0.15055128377111204;  // std dev = 0.001, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.09808717561246016;  // std dev = 2.863, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return 0.12318464039692018;  // std dev = 1.115, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.09605305267920337;  // std dev = 2.792, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.030729652385685913;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.44903606758792647;  // std dev = 0.079, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.1223729484181417;  // std dev = 2.581, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.18504017324300412;  // std dev = 1.906, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.15767810343418012;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.08972099213358319;  // std dev = 1.910, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.21318343022930808;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, B) )
%   | | then return 0.13897981107234658;  // std dev = 0.391, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.06772342310184162;  // std dev = 0.435, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.04311522572383724;  // std dev = 0.410, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), title(G, F) )
%   | | | then return 0.31693895884948997;  // std dev = 1.890, 20.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   | | | else return -0.15208188303176515;  // std dev = 1.356, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else return -0.0672604737122352;  // std dev = 0.390, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.1497996192353484;  // std dev = 0.487, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.26011100228584616;  // std dev = 0.342, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then return 0.11401458841446795;  // std dev = 0.385, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(L, J), venue(L, A) )
%   | | | then return -0.14026252266513542;  // std dev = 0.001, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.07096809311298231;  // std dev = 2.860, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.03668819560211793;  // std dev = 0.410, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.3589287276337186;  // std dev = 0.078, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordtitle(E, C) )
%   | | then return 0.10221989853939509;  // std dev = 0.486, 799.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=465 */
%   | | else return 0.21740542758160764;  // std dev = 0.354, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.36715813549652576;  // std dev = 0.901, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14665586156075686;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.04809140568287782;  // std dev = 0.436, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | | then return -0.18273773201647436;  // std dev = 0.045, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.08176837528703029;  // std dev = 4.047, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | else return 0.0017854789183821354;  // std dev = 0.382, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.07910927312918445;  // std dev = 0.484, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return 0.13877825894658855;  // std dev = 0.399, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.2742353683813111;  // std dev = 0.183, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.26291761873276087;  // std dev = 0.146, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, A) )
%   | | then if ( title(M, K), venue(M, B) )
%   | | | then return 0.6441042137528499;  // std dev = 1.813, 29.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=26 */
%   | | | else return -0.1857726626954086;  // std dev = 0.254, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return -0.17468547138061338;  // std dev = 0.096, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | then return 0.06148358931703967;  // std dev = 0.433, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | else return -0.21515714716912931;  // std dev = 0.108, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordvenue(A, C) )
%   | then return 0.26092947893185775;  // std dev = 0.074, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordtitle(E, C) )
%   | | then return 0.00686380351587426;  // std dev = 0.431, 34.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   | | else return -0.04407123178728033;  // std dev = 0.385, 71.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=20 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.41489692303680503;  // std dev = 1.284, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return -0.4096641083371839;  // std dev = 0.601, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( author(J, G), venue(J, A) )
%   | | | then return -0.281714155841086;  // std dev = 0.878, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.07758950619709062;  // std dev = 2.867, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
%   | else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | | then return 0.07747198674787893;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | else return 0.006426682308935518;  // std dev = 0.367, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordvenue(B, C) )
%   | then return 0.2149787817915909;  // std dev = 0.064, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordauthor(D, E), haswordvenue(B, E) )
%   | | then return -0.2750441622537384;  // std dev = 0.277, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.004359880319631462;  // std dev = 0.400, 101.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=36 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( haswordtitle(H, F) )
%   | | then if ( author(I, G), title(I, H) )
%   | | | then return 0.20207147828141364;  // std dev = 1.848, 21.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | | | else return -0.39092133652052546;  // std dev = 0.297, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( author(J, G), venue(J, B) )
%   | | | then return -0.25628525413626396;  // std dev = 1.335, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | | else return 0.07864719170218842;  // std dev = 2.614, 44.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | | then return 0.05839668019245229;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | else return 0.005462311103614422;  // std dev = 0.367, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */


Results
   AUC ROC   = 0.56903
   AUC PR    = 0.417499
   CLL	      = -0.702555
   Precision = 0.377313 at threshold = 0.5
   Recall    = 0.94244
   F1        = 0.538881


Total learning time: 101.67996621131897 seconds
Total inference time: 11.438 seconds
AUC ROC: 0.56903


Results scoring model
   AUC ROC   = 0.702795
   AUC PR    = 0.697569
   CLL	      = -0.600386
   Precision = 0.636595 at threshold = 0.5
   Recall    = 0.910909
   F1        = 0.749439


Total scoring time: 2.204 seconds
Parameter learned model CLL: -0.600386


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(A, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, B)', 'false,true,true': 'samebib(G, H), venue(H, A)', 'false,true,false': 'author(I, F), venue(I, A)', 'false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,false,true': 'author(L, K), venue(L, B)'}, {'true,true': [0.493, 334, 471], 'true,false': [0.335, 4, 27], 'false,true,true,true': [0.894, 1, 4], 'false,true,true,false': [0.0, 5, 0], 'false,true,false,true': [0.0, 3, 0], 'false,true,false,false': [2.913, 29, 12], 'false,false,true,true': [0.894, 4, 1], 'false,false,true,false': [2.98, 28, 13], 'false,false,false': [0.395, 92, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(B, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, A)', 'false,true,true': 'samebib(G, H), venue(H, B)', 'false,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false,true': 'haswordtitle(K, I)', 'false,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.493, 334, 471], 'true,false': [0.335, 4, 27], 'false,true,true,true': [0.899, 1, 4], 'false,true,true,false': [0.016, 5, 0], 'false,true,false': [0.441, 32, 12], 'false,false,true,true': [0.807, 4, 1], 'false,false,true,false': [2.94, 28, 13], 'false,false,false,true': [2.992, 48, 11], 'false,false,false,false': [2.966, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(B, D)', 'true,true,false': 'haswordtitle(F, D)', 'true,false': 'haswordtitle(G, C)', 'false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,true': 'author(J, I), venue(J, A)', 'false,true,true': 'samebib(J, K), venue(K, B)'}, {'true,true,true': [0.056, 0, 10], 'true,true,false,true': [2.596, 13, 14], 'true,true,false,false': [1.98, 18, 6], 'true,false,true': [0.491, 304, 449], 'true,false,false': [0.343, 3, 19], 'false,true,true,true': [0.901, 1, 4], 'false,true,true,false': [0.014, 5, 0], 'false,true,false': [0.441, 32, 12], 'false,false': [0.413, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordtitle(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, B)', 'false,true,true': 'samebib(H, I), venue(I, A)', 'false,true,false': 'author(J, G), venue(J, A)', 'false,false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false,false,true': 'author(M, L), venue(M, A)'}, {'true,true': [0.49, 336, 479], 'true,false': [0.287, 2, 19], 'false,true,true,true': [0.9, 1, 4], 'false,true,true,false': [0.015, 5, 0], 'false,true,false,true': [0.001, 3, 0], 'false,true,false,false': [2.863, 29, 12], 'false,false,true,true': [1.115, 5, 3], 'false,false,true,false': [2.792, 27, 11], 'false,false,false': [0.395, 92, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'haswordtitle(G, D)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'true,false,true': 'haswordtitle(J, H)', 'false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,true': 'author(M, L), venue(M, B)'}, {'true,true,true': [0.079, 0, 10], 'true,true,false,true': [2.581, 13, 14], 'true,true,false,false': [1.906, 18, 6], 'true,false,true,true': [2.542, 12, 14], 'true,false,true,false': [1.91, 17, 6], 'true,false,false': [0.484, 278, 448], 'false,true,true': [0.391, 6, 4], 'false,true,false': [0.435, 32, 12], 'false,false': [0.41, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,true': 'author(G, E), title(G, F)', 'true,false': 'haswordtitle(H, C)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, B)', 'false,true,false': 'author(L, J), venue(L, A)'}, {'true,true,true,true': [1.89, 5, 15], 'true,true,true,false': [1.356, 8, 4], 'true,true,false': [0.39, 18, 11], 'true,false,true': [0.487, 304, 449], 'true,false,false': [0.342, 3, 19], 'false,true,true': [0.385, 6, 4], 'false,true,false,true': [0.001, 3, 0], 'false,true,false,false': [2.86, 29, 12], 'false,false': [0.41, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordauthor(D, C)', 'true,false': 'haswordtitle(E, C)', 'false': 'haswordvenue(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, A)', 'false,true,true': 'samebib(H, I), venue(I, B)', 'false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true': [0.078, 0, 10], 'true,false,true': [0.486, 334, 465], 'true,false,false': [0.354, 4, 23], 'false,true,true,true': [0.901, 1, 4], 'false,true,true,false': [0.016, 5, 0], 'false,true,false': [0.436, 32, 12], 'false,false,true,true': [0.045, 12, 0], 'false,false,true,false': [4.047, 59, 24], 'false,false,false': [0.382, 53, 12]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordtitle(E, D)', 'true,false': 'haswordvenue(A, F), haswordtitle(G, F)', 'true,false,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'title(L, K), venue(L, A)', 'false,true,true': 'title(M, K), venue(M, B)', 'false,false': 'haswordvenue(B, N), haswordtitle(P, N)'}, {'true,true': [0.484, 336, 479], 'true,false,true': [0.399, 2, 8], 'true,false,false,true': [0.183, 0, 3], 'true,false,false,false': [0.146, 0, 8], 'false,true,true,true': [1.813, 3, 26], 'false,true,true,false': [0.254, 69, 0], 'false,true,false': [0.096, 7, 0], 'false,false,true': [0.433, 65, 26], 'false,false,false': [0.108, 18, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'haswordvenue(A, C)', 'true,false': 'haswordtitle(E, C)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, B)', 'false,true,true': 'samebib(H, I), venue(I, A)', 'false,true,false': 'author(J, G), venue(J, A)', 'false,false': 'haswordvenue(A, K), haswordvenue(B, K)'}, {'true,true': [0.074, 0, 10], 'true,false,true': [0.431, 18, 16], 'true,false,false': [0.385, 51, 20], 'false,true,true,true': [1.284, 2, 18], 'false,true,true,false': [0.601, 18, 0], 'false,true,false,true': [0.878, 15, 1], 'false,true,false,false': [2.867, 26, 15], 'false,false,true': [0.484, 278, 448], 'false,false,false': [0.367, 92, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'haswordvenue(B, C)', 'true,false': 'haswordauthor(D, E), haswordvenue(B, E)', 'false': 'haswordvenue(B, F), haswordauthor(G, F)', 'false,true': 'haswordtitle(H, F)', 'false,true,true': 'author(I, G), title(I, H)', 'false,true,false': 'author(J, G), venue(J, B)', 'false,false': 'haswordvenue(A, K), haswordvenue(B, K)'}, {'true,true': [0.064, 0, 10], 'true,false,true': [0.277, 4, 0], 'true,false,false': [0.4, 65, 36], 'false,true,true,true': [1.848, 6, 15], 'false,true,true,false': [0.297, 10, 0], 'false,true,false,true': [1.335, 18, 2], 'false,true,false,false': [2.614, 27, 17], 'false,false,true': [0.484, 278, 448], 'false,false,false': [0.367, 92, 22]}]]
[{'': [0.24084270048762138, 0.18394619617433927], 'true': [0.2427591528104568, 0.11238293444328941], 'false': [0.20850480109739317, 0.17437500000000122], 'false,true': [0.23999999999999985, 0.19834710743801603], 'false,true,true': [0.15999999999999986, -2.7755575615628915e-18], 'false,true,false': [0.0, 0.20701963117192096], 'false,false': [0.21172022684309966, 0.15574022776238935], 'false,false,true': [0.16000000000000003, 0.2165377751338484]}, {'': [0.23990334821509715, 0.18064086185860803], 'true': [0.24275915281046145, 0.11238293444328855], 'false': [0.20548103654362931, 0.17131473287152157], 'false,true': [0.23956010966648247, 0.194527133631596], 'false,true,true': [0.16153950938681216, 5.096833998346761e-05], 'false,false': [0.20334904129270392, 0.15574022776238897], 'false,false,true': [0.1302457674210878, 0.21078894368062936], 'false,false,false': [0.1516805515656426, 0.16000000000000056]}, {'': [0.23897284752961936, 0.17739970765592988], 'true': [0.238162204136848, 0.23788346814211783], 'true,true': [0.0031484720128158727, 0.2303705006887006], 'true,false': [0.2407298649580488, 0.11776859504132223], 'true,true,false': [0.24965706447187935, 0.16341569201183295], 'false': [0.19584644263579049, 0.1705311311814916], 'false,true': [0.19389603672247752, 0.19427756636916396], 'false,true,true': [0.16226381167687126, 4.078130637391597e-05]}, {'': [0.23642904608101803, 0.17496789315416325], 'true': [0.2396124785803969, 0.08212908718215524], 'false': [0.19228697737421566, 0.16848957135964723], 'false,true': [0.1921251363384566, 0.19020186171234418], 'false,true,true': [0.16213987470137728, 4.598286577777999e-05], 'false,true,false': [6.252808129834456e-07, 0.1999039514797232], 'false,false': [0.19661916704298185, 0.15572859426910748], 'false,false,true': [0.15546311986737088, 0.20515557662695857]}, {'': [0.2359316612610512, 0.17201961082860845], 'true': [0.2198995194078127, 0.23560914414360548], 'true,false': [0.22159928108150595, 0.2346922487828814], 'true,false,true': [0.24852071005917167, 0.15868954249657347], 'true,true': [0.006194118908351554, 0.225384474451458], 'true,true,false': [0.24666098762049252, 0.15141748852893783], 'false': [0.18297303962523923, 0.16796220723090874], 'false,true': [0.15256802360279026, 0.18894299779376522]}, {'': [0.23274508862570598, 0.17152197199908595], 'true': [0.19903002241930387, 0.23450121679789254], 'true,false': [0.23758006496961745, 0.11729747076862247], 'true,true': [0.2206247501627691, 0.1524363407415918], 'true,true,true': [0.17851191848950565, 0.1533249591271657], 'false': [0.18165718995847716, 0.16786634688902616], 'false,true': [0.14806816404536605, 0.18867988547326978], 'false,true,false': [5.559139102847185e-07, 0.19944352827685569]}, {'': [0.23101465530045995, 0.1710083677430156], 'true': [0.0061048325540224765, 0.2329722174336617], 'true,false': [0.23616794209183517, 0.12556842363648746], 'false': [0.18258076524474076, 0.16687307423743658], 'false,true': [0.14714696767323643, 0.18991837657618219], 'false,false': [0.1801692009207763, 0.14615248113355772], 'false,false,true': [0.0001711772267439654, 0.19735551926364853], 'false,true,true': [0.16223799864911959, 5.352491136261517e-05]}, {'': [0.23049413375327552, 0.16848404069958597], 'true': [0.23391188148489253, 0.08229922737467467], 'false': [0.16933819278617296, 0.16726630564174025], 'false,true': [0.177674833107567, 0.0013059766480313134], 'false,true,true': [0.11330241401629428, 0.0009322213507346824], 'false,false': [0.18758486523704931, 0.0006525993987112869], 'true,false': [0.15885013564142575, 0.004999654560565655], 'true,false,false': [0.01115237814976954, 0.00265744918085771]}, {'': [0.15410633007574048, 0.21985937762829172], 'false': [0.1997701233073061, 0.22160371492475858], 'false,false': [0.2345403996322692, 0.13485503347347544], 'false,true': [0.22240370687511957, 0.18377540916666024], 'false,true,true': [0.08245162110430553, 0.0200634483663849], 'false,true,false': [0.04815932379393431, 0.2004604096461093], 'true': [0.00547703772179956, 0.1610235394575345], 'true,false': [0.18613490032469066, 0.1481582964855095]}, {'': [0.14805867416752566, 0.21643264296767534], 'false': [0.16920752333607258, 0.2213413553180409], 'false,false': [0.23455232976759363, 0.13478653794251275], 'false,true': [0.18989554947580323, 0.15874478662549393], 'false,true,true': [0.16269846717525185, 0.008801356289500916], 'false,true,false': [0.08908239576605212, 0.15535333996988201], 'true': [0.0041335135785836915, 0.1571798039224999], 'true,false': [0.019189784554640946, 0.1598535178327387]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
0;false,true;author(G, F), venue(G, B).;true;true
0;false,true,true;samebib(G, H), venue(H, A).;true;true
0;false,true,false;author(I, F), venue(I, A).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(B, E), haswordauthor(F, E).;true;true
1;false,true;author(G, F), venue(G, A).;true;true
1;false,true,true;samebib(G, H), venue(H, B).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(B, H), haswordauthor(I, H).;true;true
2;false,true;author(J, I), venue(J, A).;true;true
2;false,true,true;samebib(J, K), venue(K, B).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(A, F), haswordauthor(G, F).;true;true
3;false,true;author(H, G), venue(H, B).;true;true
3;false,true,true;samebib(H, I), venue(I, A).;true;true
3;false,true,false;author(J, G), venue(J, A).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(A, I), haswordauthor(J, I).;true;true
5;false,true;author(K, J), venue(K, B).;true;true
5;false,true,false;author(L, J), venue(L, A).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(B, F), haswordauthor(G, F).;true;true
6;false,true;author(H, G), venue(H, A).;true;true
6;false,true,true;samebib(H, I), venue(I, B).;true;true
6;false,false;haswordvenue(B, J), haswordtitle(K, J).;true;true
6;false,false,true;haswordtitle(K, L), haswordvenue(A, L).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(A, J), haswordtitle(K, J).;true;true
7;false,true;title(L, K), venue(L, A).;true;true
7;false,true,true;title(M, K), venue(M, B).;true;true
7;false,false;haswordvenue(B, N), haswordtitle(P, N).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.7291166770349955;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( haswordtitle(G, E) )
%   | | then return 0.1438632208137979;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( author(H, F), venue(H, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.17633075328133055;  // std dev = 3.090, 44.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=14 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.04458961306561406;  // std dev = 2.992, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else if ( haswordauthor(E, C) )
%   | | then return 0.7447648631331598;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5966167149850116;  // std dev = 0.355, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.6370678172949304;  // std dev = 0.896, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16204854522508044;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.11090510670335817;  // std dev = 0.444, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then return 0.1414822481952805;  // std dev = 0.460, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.03765285941803126;  // std dev = 2.990, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05244716084236053;  // std dev = 2.967, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.31149293361789177;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.4827700788285854;  // std dev = 0.334, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.5309661531190365;  // std dev = 0.897, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14123047231098515;  // std dev = 0.004, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.09530500514285709;  // std dev = 0.444, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.19644488012693542;  // std dev = 1.368, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.10543827749644023;  // std dev = 2.792, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.032687185853584;  // std dev = 2.990, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.04587099528048045;  // std dev = 2.967, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.5805882611348977;  // std dev = 0.098, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.17888762943411973;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.12348400696312645;  // std dev = 1.926, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.2566506514202554;  // std dev = 0.491, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.36151050873407303;  // std dev = 0.343, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.5917173229171542;  // std dev = 0.904, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.20444424745682524;  // std dev = 0.022, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.07149989142056677;  // std dev = 0.437, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.05316285828429747;  // std dev = 0.410, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.4420883937839011;  // std dev = 0.097, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.12241141021166861;  // std dev = 2.580, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.1885808593264705;  // std dev = 1.893, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.199673041146729;  // std dev = 0.489, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.2994867034793705;  // std dev = 0.342, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then return 0.1351071622449816;  // std dev = 0.389, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(L, J), venue(L, A) )
%   | | | then return -0.15758070190720466;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.0876535602760535;  // std dev = 2.887, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.043568973561106075;  // std dev = 0.412, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then if ( haswordvenue(A, D) )
%   | | | then return 0.41150745437066527;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.09282446195086459;  // std dev = 2.580, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | else return 0.14201160125552426;  // std dev = 0.488, 783.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | else return 0.2617454954586475;  // std dev = 0.289, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then return 0.06865255838489356;  // std dev = 0.437, 54.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return -0.028333939252657387;  // std dev = 0.677, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.09049099846011911;  // std dev = 2.897, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.013666915193189952;  // std dev = 2.989, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.02786968924117066;  // std dev = 2.968, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.1065986150792362;  // std dev = 0.487, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.2174994202821267;  // std dev = 0.285, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.45095454776517163;  // std dev = 0.905, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1911860598856494;  // std dev = 0.019, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, B) )
%   | | | then return -0.23278702095486878;  // std dev = 0.000654, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.05980272871565204;  // std dev = 2.851, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.17761464453394493;  // std dev = 0.047, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.08350862626349424;  // std dev = 4.045, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | else return 0.0022145498649387588;  // std dev = 0.383, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return -0.49055896145767436;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.21144087064217856;  // std dev = 0.383, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | else if ( author(G, D), venue(G, A) )
%   | | then return -0.2413822909629547;  // std dev = 0.318, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else return 0.07387052281121805;  // std dev = 0.430, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordtitle(I, H) )
%   | | then return 0.08967471858828893;  // std dev = 0.488, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.14152221296017647;  // std dev = 0.339, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | | then return -0.16020868726025267;  // std dev = 0.096, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.07917287721375871;  // std dev = 4.042, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | else return -0.00978120076791216;  // std dev = 0.383, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.06024659282674646;  // std dev = 0.484, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then return 0.07510532223017362;  // std dev = 0.396, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.2222074946696876;  // std dev = 0.051, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, A) )
%   | | then if ( title(K, I), venue(K, B) )
%   | | | then return 0.6320875692567072;  // std dev = 1.747, 29.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=26 */
%   | | | else return -0.20013727231403758;  // std dev = 0.328, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return -0.14792328300115973;  // std dev = 0.080, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then if ( haswordauthor(N, L) )
%   | | | then return 0.1240730873302444;  // std dev = 0.778, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.05571535176239251;  // std dev = 4.061, 86.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=24 */
%   | | else return -0.2241287686914396;  // std dev = 0.138, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then if ( author(F, D), title(F, E) )
%   | | then return 0.15942511032408346;  // std dev = 0.397, 25.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=17 */
%   | | else return -0.17718106686729176;  // std dev = 0.273, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | else if ( author(G, D), venue(G, A) )
%   | | then return -0.19826218629486547;  // std dev = 0.317, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else if ( author(H, D), venue(H, B) )
%   | | | then return 0.0407147236706232;  // std dev = 0.911, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.05496361876382043;  // std dev = 2.923, 46.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=18 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then if ( haswordtitle(J, I) )
%   | | then return 0.05234458121455073;  // std dev = 0.488, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.09317769785942173;  // std dev = 0.336, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.02454199454132345;  // std dev = 0.358, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | else return -0.010215644134210226;  // std dev = 0.379, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */


Results
   AUC ROC   = 0.555825
   AUC PR    = 0.403932
   CLL	      = -0.70107
   Precision = 0.373808 at threshold = 0.5
   Recall    = 0.937171
   F1        = 0.534443


Total learning time: 119.26245880126953 seconds
Total inference time: 26.306 seconds
AUC ROC: 0.555825


Results scoring model
   AUC ROC   = 0.686373
   AUC PR    = 0.678209
   CLL	      = -0.610229
   Precision = 0.62625 at threshold = 0.5
   Recall    = 0.910909
   F1        = 0.742222


Total scoring time: 2.39 seconds
Refined model CLL: -0.610229


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.56903
   AUC PR    = 0.417499
   CLL	      = -0.702555
   Precision = 0.377313 at threshold = 0.5
   Recall    = 0.94244
   F1        = 0.538881


Total learning time: 225.5364250125885 seconds
Total inference time: 11.438 seconds
AUC ROC: 0.56903
Total revision time: 225.5364250125885
Best scored revision CLL: -0.600386


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 00:35:32
{'AUC ROC': 0.56903, 'AUC PR': 0.417499, 'CLL': -0.702555, 'Precision': [0.377313, 0.5], 'Recall': 0.94244, 'F1': 0.538881, 'Learning time': 225.5364250125885, 'Inference time': 11.438, 'parameter': {'AUC ROC': 0.56903, 'AUC PR': 0.417499, 'CLL': -0.702555, 'Precision': [0.377313, 0.5], 'Recall': 0.94244, 'F1': 0.538881, 'Learning time': 101.67996621131897, 'Inference time': 11.438}}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( haswordauthor(E, C) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.44064893509950764;  // std dev = 0.493, 800.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=466 */
%   | else return 0.7291166770349955;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15083186192878065;  // std dev = 2.913, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then return 0.16249676118646889;  // std dev = 0.460, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.051131391239862906;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3802742035706283;  // std dev = 0.492, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6157326050686436;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( author(H, F), venue(H, A) )
%   | | | then return 0.337986753273381;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.16240916519530504;  // std dev = 0.001, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( author(I, F), venue(I, A) )
%   | | | then return 0.23719491633600884;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.12984644453860714;  // std dev = 2.888, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.03693744759731563;  // std dev = 0.807, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1534329638272584;  // std dev = 2.940, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.04479249977758044;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.6358464244432968;  // std dev = 0.103, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.2454435255722109;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.04704621043856602;  // std dev = 1.980, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.3232065475583421;  // std dev = 0.491, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.47549952672721435;  // std dev = 0.343, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.596032560924421;  // std dev = 0.888, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.19278634674720713;  // std dev = 0.059, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.09415952156438431;  // std dev = 0.440, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.06250133364459959;  // std dev = 0.413, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.24521936610922693;  // std dev = 0.489, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.42445675277652567;  // std dev = 0.287, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.5205312946025725;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14558053184234626;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.08174842114276495;  // std dev = 0.438, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return -0.005190857574136109;  // std dev = 0.756, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.11644178946265589;  // std dev = 2.932, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.02418978144463815;  // std dev = 2.992, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.03774910347853645;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return -0.380267266985155;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.3699551437956891;  // std dev = 1.924, 24.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | else return 0.18849790984235518;  // std dev = 0.490, 783.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | else return 0.3206846721908396;  // std dev = 0.287, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.1383592112357898;  // std dev = 0.390, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.06884907938536215;  // std dev = 0.438, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( haswordtitle(M, K) )
%   | | | then return -0.004370137775315275;  // std dev = 0.757, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.0972476172503921;  // std dev = 2.929, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.02650875440159565;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.3350540773964556;  // std dev = 0.053, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.0999182257578336;  // std dev = 2.337, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.148657231635801;  // std dev = 1.882, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.09377250934480401;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.2231899670609754;  // std dev = 1.887, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.16730980194811076;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, B) )
%   | | then return 0.1134764837135547;  // std dev = 0.384, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.057492372881755724;  // std dev = 0.437, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.036689331143533316;  // std dev = 0.411, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.26574058847021814;  // std dev = 0.152, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.05594657294729973;  // std dev = 2.571, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.18275011396006136;  // std dev = 1.913, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.11548219501842785;  // std dev = 0.485, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.20535704716891512;  // std dev = 0.341, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.012112447196153571;  // std dev = 0.312, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.06352527849291353;  // std dev = 0.444, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.051490763078723654;  // std dev = 0.426, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | else return 0.0012169485999028152;  // std dev = 0.386, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.0788193133359837;  // std dev = 0.482, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.21879261551662296;  // std dev = 0.285, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.4281654949649182;  // std dev = 0.901, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.19358408096944163;  // std dev = 0.084, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, B) )
%   | | | then return -0.18979119127802715;  // std dev = 0.001, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.04670733607771942;  // std dev = 2.841, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return -0.004194957987353262;  // std dev = 0.379, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.08014236906943546;  // std dev = 4.043, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return -0.20469020266777746;  // std dev = 0.102, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return -0.5015963340281241;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.1873679102176034;  // std dev = 0.380, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | else if ( author(G, D), venue(G, A) )
%   | | then return -0.21358734862636242;  // std dev = 0.310, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else if ( author(H, D), venue(H, B) )
%   | | | then return 0.05463685950554359;  // std dev = 0.917, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.08003657616284154;  // std dev = 2.950, 46.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=18 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then if ( haswordtitle(J, I) )
%   | | then return 0.06713327772740567;  // std dev = 0.485, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.1306879317674397;  // std dev = 0.339, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return -0.007769983571669706;  // std dev = 0.378, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | else return 0.039740825458633416;  // std dev = 0.425, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.3699213349752501;  // std dev = 0.262, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | else return -0.36398510671387263;  // std dev = 0.133, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return -0.03089809732259203;  // std dev = 0.402, 71.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=24 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.035321796673514455;  // std dev = 2.490, 30.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return -0.14131736391883476;  // std dev = 1.454, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.05993278333045823;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return -0.009428453899488154;  // std dev = 0.378, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.06149614324809398;  // std dev = 4.035, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return -0.18234565632813604;  // std dev = 0.103, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.554521
   AUC PR    = 0.403411
   CLL	      = -0.70728
   Precision = 0.372316 at threshold = 0.5
   Recall    = 0.927848
   F1        = 0.531399


Total learning time: 113.86485981941223 seconds
Total inference time: 27.184 seconds
AUC ROC: 0.554521


Dataset: 3_imdb_cora, Fold: 5, Type: Scratch (RDN-B), Time: 00:37:54
{'AUC ROC': 0.554521, 'AUC PR': 0.403411, 'CLL': -0.70728, 'Precision': [0.372316, 0.5], 'Recall': 0.927848, 'F1': 0.531399, 'Learning time': 113.86485981941223, 'Inference time': 27.184}


Starting fold 1

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos  examples: 2649
Target test neg examples: 4334

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.424815601766179;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.45935396641210174;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.3982164798305049;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.36287359443791467;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.1488242116562869;  // std dev = 2.789, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14162905569876189;  // std dev = 0.023, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.12787230110394693;  // std dev = 0.016, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.3269052770205085;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.37391135762433364;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2976445171077738;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.12205676751791568;  // std dev = 0.051, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.004507924439813013;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.3022417434729106;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2574772746827477;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.23417928059327514;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.10959153340338801;  // std dev = 0.046, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.003958717519531317;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.20948408680407216;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.2299388596657689;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.17834848701139966;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.09936314977686865;  // std dev = 0.042, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0028554031467501392;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0034749675716536257;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.15385191703478;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.18068515597411264;  // std dev = 0.795, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.13528795465302418;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.029249288580713354;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.09083148463204621;  // std dev = 0.039, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.002503460836945874;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.0069057462643013386;  // std dev = 2.848, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.1356777990301987;  // std dev = 0.795, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.12507197426428576;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10029146853567394;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.0836144428105688;  // std dev = 0.036, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0021943081594878503;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.002698313307183951;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.10777468984100314;  // std dev = 0.792, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.0938253401642124;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07473312070443165;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.07743495291601565;  // std dev = 0.034, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0019228798175884457;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.002366294314448712;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.08148776868267826;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.07187220975271606;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.05583018818173355;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.07208766412694816;  // std dev = 0.032, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0016846780662751325;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.002074606867905982;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return -0.14473418137539884;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.061919914517802765;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.03661174542507164;  // std dev = 0.486, 847.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=323 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.056521233924596403;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.04148929165199356;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return -0.06741741298188744;  // std dev = 0.030, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0014757167188846957;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.0018184731311992324;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.556744
   AUC PR    = 0.428235
   CLL	      = -0.657912
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 121.03145003318787 seconds
Total inference time: 15.114 seconds
AUC ROC: 0.556744


Results scoring model
   AUC ROC   = 0.592437
   AUC PR    = 0.420344
   CLL	      = -0.620178
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total scoring time: 2.309 seconds
Parameter learned model CLL: -0.620178


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.816, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.714, 13, 17], 'false,true,true': [0.0, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, A)', 'false,true,true': 'samebib(K, L), venue(L, B)', 'false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.81, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.715, 13, 17], 'false,true,true,true': [2.789, 27, 11], 'false,true,true,false': [0.023, 42, 0], 'false,true,false': [0.016, 7, 0], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [1.095, 2, 3], 'true,false,false,true': [0.808, 1, 2], 'true,false,false,false': [2.715, 13, 17], 'false,true,true': [0.051, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.801, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.716, 13, 17], 'false,true,true': [0.046, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [1.095, 2, 3], 'true,false,false,true': [0.8, 1, 2], 'true,false,false,false': [2.716, 13, 17], 'false,true,true': [0.042, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,false,true': 'haswordtitle(L, M), haswordvenue(A, M)', 'false,false,false': 'haswordvenue(A, N), haswordtitle(P, N)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [1.095, 2, 3], 'true,false,false,true': [0.795, 1, 2], 'true,false,false,false': [2.717, 13, 17], 'false,true': [0.328, 7, 1], 'false,false,true,true': [0.039, 12, 0], 'false,false,true,false': [3.064, 64, 11], 'false,false,false,true': [2.848, 57, 10], 'false,false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.795, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true,true': [0.036, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.792, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true,true': [0.034, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.793, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true,true': [0.032, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, C)', 'true,false': 'haswordtitle(G, C)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)', 'false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true,true': [0.894, 4, 1], 'true,true,false': [0.793, 1, 2], 'true,false,true': [0.486, 524, 323], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true,true': [0.03, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}]]
[{'': [0.23762656230272572, 0.11496588764697444], 'true': [0.2356675262844691, 0.24376731301939172], 'true,false': [0.22222222222222224, 0.2448979591836734], 'true,false,false': [0.23999999999999994, 0.2455555555555551], 'false': [0.1104505218655035, 0.11985258772632539], 'false,false': [0.12515555555555502, 0.0], 'false,true': [-1.1564823173178714e-17, 0.12515555555555502]}, {'': [0.2371606616282308, 0.11455688633284844], 'true': [0.2356675262844735, 0.24352902641532287], 'true,false': [0.21859724583033524, 0.2450060599606714], 'true,false,false': [0.23999999999999994, 0.24566195763775367], 'false': [0.10989213699570438, 0.1196268538653256], 'false,false': [0.125155555555556, 0.0], 'false,true': [0.11826329058716308, 3.536127348451442e-05], 'false,true,true': [0.20467024545790047, 1.309676795721185e-05]}, {'': [0.23670497169729696, 0.112007925399031], 'true': [0.23566752628446727, 0.2432006312450957], 'true,false': [0.23999999999999994, 0.2436199815215733], 'true,false,false': [0.2176873624141201, 0.24568445879937517], 'false': [0.1098029509778292, 0.11435781119864259], 'false,false': [0.11976586065569501, 0.0], 'false,true': [0.00021334506947594256, 0.12515555555555488]}, {'': [0.236366928633617, 0.11174095126946694], 'true': [0.23566752628446358, 0.2429528754435824], 'true,false': [0.21362996677670285, 0.24513543757798242], 'true,false,false': [0.24, 0.24591380147975203], 'false': [0.10943138431740565, 0.11422186192353923], 'false,false': [0.11974954934686752, 0.0], 'false,true': [0.00017727376614762314, 0.12515555555555585]}, {'': [0.2361622043098079, 0.11154110952395885], 'true': [0.235667526284474, 0.24276523484777104], 'true,false': [0.24, 0.24309218772515803], 'true,false,false': [0.2131559320007038, 0.2458438527020928], 'false': [0.1091557251522986, 0.11411720784514673], 'false,false': [0.11973520847760942, 0.0], 'false,true': [0.00014934326832803888, 0.1251555555555548]}, {'': [0.23605458411257926, 0.11138789543306424], 'true': [0.23566752628446164, 0.24264169120533374], 'true,false': [0.24000000000000007, 0.243014523059834], 'true,false,false': [0.21070133090552381, 0.2460584871945571], 'false': [0.10737257418635811, 0.11156272005497908], 'false,false': [0.10894612552278464, 0.11468851303083975], 'false,false,false': [0.12105780478733244, 0.0], 'false,false,true': [0.0001273498475321382, 0.12515555555555608]}, {'': [0.2360028721605453, 0.11125041843516104], 'true': [0.23566752628447166, 0.24257456257438967], 'true,false': [0.2107702462731917, 0.24522057965790667], 'true,false,false': [0.24, 0.24600295148696266], 'false': [0.10878338247785196, 0.1139319169132305], 'false,false': [0.11967217509568252, 0.0], 'false,true': [0.00010976475682055592, 0.12515555555555608]}, {'': [0.2359785119801561, 0.11115488562388329], 'true': [0.23566752628446394, 0.24252590563996596], 'true,false': [0.20928321900184757, 0.2453027304737375], 'true,false,false': [0.24, 0.2461344456226127], 'false': [0.10865472461070816, 0.11387826684374314], 'false,false': [0.11966229323443832, 0.0], 'false,true': [9.550912250217217e-05, 0.1251555555555557]}, {'': [0.2359672031706562, 0.11107768520551688], 'true': [0.23566752628446355, 0.24249479804603216], 'true,false': [0.2094960106885082, 0.24528016314750564], 'true,false,false': [0.24, 0.24612342655931607], 'false': [0.1085514094793725, 0.1138341369652607], 'false,false': [0.11965362139512511, 0.0], 'false,true': [8.380816472134886e-05, 0.1251555555555548]}, {'': [0.23596208924529263, 0.11101448183369872], 'true': [0.18864605369212123, 0.2362937950614828], 'true,false': [0.23592121091316984, 0.24526293963509016], 'true,false,false': [0.24, 0.24610781634258333], 'true,true': [0.16000000000000003, 0.2096982794189254], 'false': [0.10846729994208922, 0.11379744293268992], 'false,false': [0.11964601399287181, 0.0], 'false,true': [7.40960476067794e-05, 0.12515555555555566]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
0;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
0;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
1;false,true;title(K, J), venue(K, A).;true;true
1;false,true,true;samebib(K, L), venue(L, B).;true;true
1;false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
2;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
2;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
3;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
4;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
4;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(B, I), haswordauthor(J, I).;true;true
5;false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
5;false,false,true;haswordtitle(L, M), haswordvenue(A, M).;true;true
5;false,false,false;haswordvenue(A, N), haswordtitle(P, N).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
6;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
6;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
7;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
7;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
8;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
8;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(B, J), haswordtitle(K, J).;true;true
9;false,true;haswordtitle(K, L), haswordvenue(A, L).;true;true
9;false,false;haswordvenue(A, M), haswordtitle(N, M).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.424815601766179;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3982164798305049;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.3639794304549286;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.1488242116562869;  // std dev = 2.789, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14162905569876189;  // std dev = 0.023, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.12787230110394693;  // std dev = 0.016, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.3874028246526538;  // std dev = 0.802, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.326685698020276;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.29629366162004606;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.12205676751791568;  // std dev = 0.051, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.004507924439813013;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.2891267840656207;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2638891679144505;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.234423989427422;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.15058071527896152;  // std dev = 2.779, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14136704096958908;  // std dev = 0.059, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.12222326163509453;  // std dev = 0.041, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.003958717519531317;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.24326170791640442;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.20271369450747892;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.17815131145303673;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.1316041862580443;  // std dev = 2.777, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.1250714584428941;  // std dev = 0.053, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.10972932149175826;  // std dev = 0.037, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.0034749675716536257;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.18323985873041496;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.15937123388482158;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.1341176613645377;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.10441125487786575;  // std dev = 0.070, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0021162554259329756;  // std dev = 0.340, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0030492092141663906;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.13761339991874844;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.11997779188118277;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10095309787763344;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.029646757589802227;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return -0.004468061705602874;  // std dev = 2.950, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.092037835441081;  // std dev = 0.038, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.006534034772454763;  // std dev = 2.848, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.10411517458603625;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.08999532080563326;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07574471869858751;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.13381082766919195;  // std dev = 2.766, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.1252737445703355;  // std dev = 0.085, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.10594497965237715;  // std dev = 0.059, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.002520748317934741;  // std dev = 0.340, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return -0.13445782620068708;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.07876130994269077;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.04688810059978192;  // std dev = 0.486, 847.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=323 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.07565466284494696;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.05547858775092232;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return -0.08923556437391937;  // std dev = 0.068, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 9.672249907810541E-4;  // std dev = 0.340, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.00221238769084217;  // std dev = 0.340, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return -0.13702426676472196;  // std dev = 0.930, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.06777227371309798;  // std dev = 0.790, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.03655903241958992;  // std dev = 0.486, 847.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=323 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.05682948840251014;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.04085589099426154;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, A) )
%   | | then return -0.0036532822529478;  // std dev = 0.329, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | else return -0.09020554240286806;  // std dev = 0.055, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.0019413011736896949;  // std dev = 0.340, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.558314
   AUC PR    = 0.42895
   CLL	      = -0.652481
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 137.99969720840454 seconds
Total inference time: 17.529 seconds
AUC ROC: 0.558314


Results scoring model
   AUC ROC   = 0.595997
   AUC PR    = 0.422064
   CLL	      = -0.616201
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total scoring time: 2.263 seconds
Refined model CLL: -0.616201


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.558314
   AUC PR    = 0.42895
   CLL	      = -0.652481
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 263.60314724159235 seconds
Total inference time: 17.529 seconds
AUC ROC: 0.558314
Total revision time: 263.60314724159235
Best scored revision CLL: -0.616201


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:42:54
{'AUC ROC': 0.558314, 'AUC PR': 0.42895, 'CLL': -0.652481, 'Precision': [0.637427, 0.5], 'Recall': 0.041148, 'F1': 0.077305, 'Learning time': 263.60314724159235, 'Inference time': 17.529, 'parameter': {'AUC ROC': 0.556744, 'AUC PR': 0.428235, 'CLL': -0.657912, 'Precision': [0.637427, 0.5], 'Recall': 0.041148, 'F1': 0.077305, 'Learning time': 121.03145003318787, 'Inference time': 15.114}}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.424815601766179;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.45935396641210174;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3982164798305049;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.36287359443791467;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.37391135762433364;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.3269052770205085;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.2976445171077738;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.3022417434729106;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2574772746827477;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.23417928059327509;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.2299388596657689;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2094840868040723;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.17834848701139971;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.15104347198857354;  // std dev = 2.776, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14137697840893293;  // std dev = 0.071, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.09999413152221179;  // std dev = 0.047, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.0028554031467501392;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.18068515597411264;  // std dev = 0.795, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.15864385728225852;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.13448929794511097;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.029386526720904752;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.09128622856016311;  // std dev = 0.037, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.002503460836945874;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.006806848584045035;  // std dev = 2.848, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.12042790598479117;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.1356777990301986;  // std dev = 0.795, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.10106527447181396;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.1520184723645619;  // std dev = 2.771, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14129793501758198;  // std dev = 0.092, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.09794539624030721;  // std dev = 0.057, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.0026078801990567823;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.10777880746616138;  // std dev = 0.792, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.09033351155310503;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07531473183187251;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.02592918549522421;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then return -0.030188681577339033;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return -0.007724224764663304;  // std dev = 2.861, 79.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=10 */
%   | | | else return 0.0016186900208963653;  // std dev = 2.851, 71.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=10 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return -0.13445782620068708;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.08149084468189867;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.04688810059978192;  // std dev = 0.486, 847.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=323 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.07517946067014716;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.05527899036174772;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return -0.08184843768433907;  // std dev = 0.034, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0024586968066877797;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.003481494165669534;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07335618034120879;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.035540351086348634;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.06192222355450098;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.056474622701600995;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.04149678056281616;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.026594498008939836;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | | then return -0.07591159359285728;  // std dev = 0.032, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0030549255109161523;  // std dev = 2.996, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.005588653687864874;  // std dev = 2.847, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.06852321441666816;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.557331
   AUC PR    = 0.428355
   CLL	      = -0.655472
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 125.08902406692505 seconds
Total inference time: 15.302 seconds
AUC ROC: 0.557331


Dataset: 3_imdb_cora, Fold: 1, Type: Scratch (RDN-B), Time: 00:45:15
{'AUC ROC': 0.557331, 'AUC PR': 0.428355, 'CLL': -0.655472, 'Precision': [0.637427, 0.5], 'Recall': 0.041148, 'F1': 0.077305, 'Learning time': 125.08902406692505, 'Inference time': 15.302}


Starting fold 2

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos  examples: 2246
Target test neg examples: 4478

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.5791684237702857;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.22916842377028543;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.008145345695425854;  // std dev = 0.852, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.07083157622971455;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.3045453081923796;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.4047531668618019;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.42464571865829975;  // std dev = 1.908, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.4317030979309822;  // std dev = 0.348, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.5118627986468952;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.18162271221626702;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.06570188218847453;  // std dev = 0.846, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.13495415790755155;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.23990098036198007;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.3098169854894562;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.32456036871644006;  // std dev = 1.905, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.35163309306853874;  // std dev = 0.335, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.1316730160126654;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.3899641975686409;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.140979150293288;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.051753014992353755;  // std dev = 0.847, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.10559037743805288;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( haswordtitle(I, G) )
%   | | then return 0.3848353288706123;  // std dev = 0.365, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | else return -0.08069287877868972;  // std dev = 0.411, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, J), haswordvenue(B, J) )
%   | | then if ( haswordtitle(K, J) )
%   | | | then return 0.18294335346616894;  // std dev = 16.896, 1,167.000 (wgt'ed) examples reached here.  /* #neg=498 #pos=669 */
%   | | | else return 0.23918854692617392;  // std dev = 2.705, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else return 0.23171880603744419;  // std dev = 0.392, 46.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1410123204945564;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.17343372118798814;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.14785257782283778;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.3173413422526029;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.3115940809662359;  // std dev = 3.65e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.05529328944369205;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.055190452513902886;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.25846435280733066;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.0738618246513395;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.06672324111131367;  // std dev = 0.842, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.11315841224307117;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.10493792482710965;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.13134096007501314;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.14383276080078575;  // std dev = 1.899, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.1763019912233863;  // std dev = 0.326, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.042282960040020044;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07978422624420702;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.10044019791780556;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.07759999404573643;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.22667342970329854;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.21745263120499775;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.03228559480356737;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.0034117088818891306;  // std dev = 0.485, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.21369356447767496;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.03593268388648463;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.09354443327829336;  // std dev = 0.837, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.15978518933555877;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.05860419458278666;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.07753198976522972;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.08915159054389182;  // std dev = 1.896, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.12878334143978812;  // std dev = 0.320, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.002587276488283655;  // std dev = 0.485, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04511721248295312;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.06033772154096615;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.03955809661772692;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.17609724955526473;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.1642679118559775;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.0019618027558376155;  // std dev = 0.485, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return -0.003503795754395816;  // std dev = 0.485, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.534798
   AUC PR    = 0.343905
   CLL	      = -0.756475
   Precision = 0.35357 at threshold = 0.5
   Recall    = 0.956812
   F1        = 0.516338


Total learning time: 115.83713102340698 seconds
Total inference time: 11.738 seconds
AUC ROC: 0.534798


Results scoring model
   AUC ROC   = 0.553802
   AUC PR    = 0.662973
   CLL	      = -0.664414
   Precision = 0.594317 at threshold = 0.5
   Recall    = 0.976654
   F1        = 0.73896


Total scoring time: 2.215 seconds
Parameter learned model CLL: -0.664414


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [7.3e-08, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(F, D), venue(F, A)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)'}, {'true,true': [0.357, 3, 17], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.852, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.494, 507, 687], 'false,true,false,true': [1.919, 5, 14], 'false,true,false,false': [1.908, 5, 17], 'false,false,true': [0.348, 7, 26], 'false,false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'haswordvenue(B, C)', 'true,false,false': 'author(F, D), venue(F, B)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)'}, {'true,true': [0.356, 3, 17], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.846, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.494, 507, 687], 'false,true,false,true': [1.919, 5, 14], 'false,true,false,false': [1.905, 5, 17], 'false,false,true': [0.335, 7, 26], 'false,false,false': [0.49, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'haswordvenue(B, C)', 'true,false,false': 'author(F, D), venue(F, B)', 'false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false,true': 'haswordtitle(I, G)', 'false,false': 'haswordvenue(A, J), haswordvenue(B, J)', 'false,false,true': 'haswordtitle(K, J)'}, {'true,true': [0.356, 3, 17], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.847, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.365, 3, 16], 'false,true,false': [0.411, 7, 2], 'false,false,true,true': [16.896, 498, 669], 'false,false,true,false': [2.705, 10, 31], 'false,false,false': [0.392, 14, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.491, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [3.65e-08, 0, 20], 'false,true,false': [0.487, 8, 6], 'false,false': [0.487, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'haswordvenue(B, C)', 'true,false,false': 'author(F, D), venue(F, B)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)'}, {'true,true': [0.356, 3, 17], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.842, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.493, 507, 687], 'false,true,false,true': [1.919, 5, 14], 'false,true,false,false': [1.899, 5, 17], 'false,false,true': [0.326, 7, 26], 'false,false,false': [0.487, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)'}, {'true,true': [0.491, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.487, 8, 6], 'false,false': [0.485, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(F, D), venue(F, A)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)'}, {'true,true': [0.356, 3, 17], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.837, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.493, 507, 687], 'false,true,false,true': [1.919, 5, 14], 'false,true,false,false': [1.896, 5, 17], 'false,false,true': [0.32, 7, 26], 'false,false,false': [0.485, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.491, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.485, 8, 6], 'false,false': [0.485, 8, 6]}]]
[{'': [0.24306651325713594, 0.22222222222222385], 'true': [0.24399564626142126, 0.1844140392623454], 'false': [0.17993079584775207, 0.24489795918367352], 'true,false': [0.19390581717451486, 0.17561983471074338], 'false,true': [-8.881784197001253e-17, 0.24489795918367352], 'true,false,false': [0.20761245674740453, 0.0]}, {'': [0.2426572019465864, 0.1968581969586748], 'true': [0.2439956462613994, 0.18151807630785113], 'false': [0.15465453537750254, 0.24489795918367324], 'true,false': [0.193905817174515, 0.17043669583228802], 'true,false,false': [0.20761245674740458, 0.0], 'false,true': [2.6645352591003756e-16, 0.24489795918367324]}, {'': [0.22952352137572604, 0.23994088079159398], 'false': [0.24253575522871806, 0.16862805083149524], 'false,true': [0.24431832529482975, 0.17873720595178558], 'true': [0.12749999999999978, 0.21079846857026777], 'true,false': [0.25, 0.17058790973374105], 'false,true,false': [0.1939058171745152, 0.16545366223293648], 'true,false,false': [0.18163970606836305, 0.16000000000000003], 'false,false': [0.12142920769740272, 0.2448979591836735]}, {'': [0.22681392071940695, 0.23867839580048356], 'false': [0.24158712821313152, 0.16041315924103156], 'false,true': [0.24355359757449907, 0.17846373208604316], 'true': [0.12673759051228348, 0.21175330992800884], 'true,false': [0.24999999999999997, 0.16962230622100344], 'false,true,false': [0.1939058171745152, 0.1650266546627699], 'true,false,false': [0.17898581250155157, 0.16], 'false,false': [0.11214733462026104, 0.2402119567889687]}, {'': [0.1962038150325235, 0.23833009730882806], 'false': [0.19188301486940348, 0.23931554282365558], 'false,false': [0.24249167461739346, 0.15379166632294597], 'false,false,true': [0.24463227179308739, 0.17850681904003898], 'true': [0.1266951682630718, 0.2046510471027405], 'true,false': [0.25, 0.16924384122005628], 'false,true': [0.13296398891966751, 0.1692099919853684], 'true,false,false': [0.17918838630339903, 0.16]}, {'': [0.23942271613848898, 0.1542865721670108], 'true': [0.24140357919780842, 0.17869067478529038], 'true,false': [0.19390581717451524, 0.16547274035393247], 'true,false,false': [0.2076124567474049, 0.0], 'false': [0.11362334484626817, 0.23691763875809377], 'false,true': [6.661338147750939e-17, 0.23730117612702278]}, {'': [0.17678108451325814, 0.23756177845503587], 'false': [0.2409087597155702, 0.14872747720377832], 'false,true': [0.24303746203914928, 0.17785717594396389], 'false,true,false': [0.19390581717451524, 0.1639246722141576], 'true': [0.12672972388220255, 0.1993139395810792], 'true,false': [0.25, 0.16826892549647324], 'true,false,false': [0.17740717952371174, 0.16], 'false,false': [0.10601954472262302, 0.23678518958362985]}, {'': [0.23911287242703322, 0.1474123119606956], 'true': [0.2411315288815613, 0.17806648973766845], 'true,false': [0.19390581717451524, 0.1643305876180229], 'true,false,false': [0.20761245674740483, 0.0], 'false': [0.10576470826776785, 0.2351069089010969], 'false,true': [-1.6653345369377347e-17, 0.2366884243151823]}, {'': [0.1755202876379217, 0.23717948345068335], 'false': [0.24064133444856822, 0.14524250660464536], 'false,true': [0.24278636007695412, 0.17756186105636618], 'false,true,false': [0.19390581717451516, 0.16338405824357144], 'true': [0.12651302802164038, 0.1989303691413573], 'true,false': [0.25, 0.16772561100297], 'true,false,false': [0.17494493711055017, 0.15999999999999998], 'false,false': [0.10237775280789818, 0.23509915814398316]}, {'': [0.23886520022299568, 0.14369275748436267], 'true': [0.24089596268408386, 0.1777249603958025], 'true,false': [0.19390581717451524, 0.1637018775779875], 'true,false,false': [0.2076124567474048, 0.0], 'false': [0.10318384806215603, 0.23485444303824804], 'false,true': [-1.6653345369377347e-17, 0.23509330232249787]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
0;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
0;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
1;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
1;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
5;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
5;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
5;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
7;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
7;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
9;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
9;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
9;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.5791684237702857;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.22916842377028543;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.008145345695425868;  // std dev = 0.852, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.07083157622971455;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.3045453081923796;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.4047531668618019;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.42464571865829975;  // std dev = 1.908, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.4317030979309822;  // std dev = 0.348, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24202763793698798;  // std dev = 0.493, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.3098169854894562;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2877826293809521;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.44960468245709945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.44785888933339724;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.1316730160126654;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.45582386531502966;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.12696337948380887;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.11610211463453472;  // std dev = 0.841, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.19082762790674415;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.18401854443551588;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.23288770051702257;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.24521343157380357;  // std dev = 1.895, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.2737095584454257;  // std dev = 0.324, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.10354034558269198;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1410522387649531;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.18520723623655325;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.1440244614724635;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.2896496561409294;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.28274339818750194;  // std dev = 2.58e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.082975075234394;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.08048520911847132;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1061397969674872;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.13996335964322698;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.1089426081749053;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.23384323710608115;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.22905810700556062;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.0640165347533512;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.062053704514323335;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.2822682384153365;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.036200577867791295;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.16112086775623666;  // std dev = 1.221, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.07802886404759327;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.11222083625473991;  // std dev = 1.915, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.10369134108702119;  // std dev = 1.893, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.19112829770084167;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.04909424858375872;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.047569338903151896;  // std dev = 0.489, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05980143874368758;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.08630104521960849;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.053102963272218646;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.1788335397455575;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.1633072263001174;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.03749273080532868;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.03631983068294584;  // std dev = 0.489, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04491941413977067;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.0700920793784021;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.037651436764933245;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.1540603054964531;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.14220067485095883;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.028548646833003004;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.02765267645364165;  // std dev = 0.489, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.537384
   AUC PR    = 0.346121
   CLL	      = -0.755393
   Precision = 0.354174 at threshold = 0.5
   Recall    = 0.955922
   F1        = 0.516851


Total learning time: 129.88905596733093 seconds
Total inference time: 14.082 seconds
AUC ROC: 0.537384


Results scoring model
   AUC ROC   = 0.553404
   AUC PR    = 0.660708
   CLL	      = -0.666202
   Precision = 0.594317 at threshold = 0.5
   Recall    = 0.976654
   F1        = 0.73896


Total scoring time: 2.097 seconds
Refined model CLL: -0.666202


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.534798
   AUC PR    = 0.343905
   CLL	      = -0.756475
   Precision = 0.35357 at threshold = 0.5
   Recall    = 0.956812
   F1        = 0.516338


Total learning time: 250.03818699073793 seconds
Total inference time: 11.738 seconds
AUC ROC: 0.534798
Total revision time: 250.03818699073793
Best scored revision CLL: -0.664414


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:49:55
{'AUC ROC': 0.534798, 'AUC PR': 0.343905, 'CLL': -0.756475, 'Precision': [0.35357, 0.5], 'Recall': 0.956812, 'F1': 0.516338, 'Learning time': 250.03818699073793, 'Inference time': 11.738, 'parameter': {'AUC ROC': 0.534798, 'AUC PR': 0.343905, 'CLL': -0.756475, 'Precision': [0.35357, 0.5], 'Recall': 0.956812, 'F1': 0.516338, 'Learning time': 115.83713102340698, 'Inference time': 11.738}}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.30665618885999163;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.4047531668618019;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.386198448632422;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24206322397592006;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.3261448737160187;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2788572331674748;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.4586612187245652;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.10866121872456526;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.11648547966105265;  // std dev = 0.841, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.19133878127543472;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.18403810314669028;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.24558668125641064;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.23490503051382786;  // std dev = 1.891, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.2611880142597033;  // std dev = 0.321, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.4106434583517543;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.08249570247950498;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.18594145670149917;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return 0.33786210752146767;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.10325411527334308;  // std dev = 1.221, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordtitle(J, C) )
%   | | | then return 0.1373233247895152;  // std dev = 16.896, 1,167.000 (wgt'ed) examples reached here.  /* #neg=498 #pos=669 */
%   | | | else return 0.18127581309409266;  // std dev = 2.693, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then return 0.20116671499644384;  // std dev = 0.327, 34.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=26 */
%   | else return 0.08562597039058939;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.3084695664013876;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.06230725960603323;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.13473247283431378;  // std dev = 0.859, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.19088551016058922;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.10448466407324945;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.1401201447463663;  // std dev = 1.915, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.13660643122000346;  // std dev = 1.896, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.17643528870739572;  // std dev = 0.320, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.06611884415675119;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.2339828687179169;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.04691756632035203;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.10353521930983382;  // std dev = 1.221, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.07844014865474534;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.1040836474978466;  // std dev = 1.916, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.10864787619139295;  // std dev = 1.898, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.19952074739296982;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.05073647902347162;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.025644934386857998;  // std dev = 0.491, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.1803771801274699;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.03526794549518496;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.08025320519623123;  // std dev = 1.222, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return 0.2103153899492618;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.11937857203854363;  // std dev = 1.222, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordtitle(J, C) )
%   | | | then return 0.0576203767422046;  // std dev = 16.896, 1,167.000 (wgt'ed) examples reached here.  /* #neg=498 #pos=669 */
%   | | | else return 0.08296290810840569;  // std dev = 2.698, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then return 0.11569683243409734;  // std dev = 0.321, 34.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=26 */
%   | else return 0.01946932427883506;  // std dev = 0.491, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04507869555433329;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.06179533610177873;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.034220298834768244;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.18318733907965;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.15387715508257388;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.014761583163188399;  // std dev = 0.491, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.010978193287734306;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.537223
   AUC PR    = 0.345237
   CLL	      = -0.755754
   Precision = 0.354174 at threshold = 0.5
   Recall    = 0.955922
   F1        = 0.516851


Total learning time: 121.69891500473022 seconds
Total inference time: 13.844 seconds
AUC ROC: 0.537223


Dataset: 3_imdb_cora, Fold: 2, Type: Scratch (RDN-B), Time: 00:52:11
{'AUC ROC': 0.537223, 'AUC PR': 0.345237, 'CLL': -0.755754, 'Precision': [0.354174, 0.5], 'Recall': 0.955922, 'F1': 0.516851, 'Learning time': 121.69891500473022, 'Inference time': 13.844}


Starting fold 3

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos  examples: 2436
Target test neg examples: 2800

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21623040684720776;  // std dev = 0.479, 1,522.000 (wgt'ed) examples reached here.  /* #neg=977 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5854216623722396;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.14185106490048766;  // std dev = 6.14e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.024815601766178853;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.024815601766179047;  // std dev = 3.651, 96.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=16 */
%   | | | else return -0.06777699082641374;  // std dev = 1.361, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19018745742063053;  // std dev = 0.480, 1,512.000 (wgt'ed) examples reached here.  /* #neg=967 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.01031310772727918;  // std dev = 0.320, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.02946452826406771;  // std dev = 0.313, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.022223825395919238;  // std dev = 3.652, 97.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
%   | | | else return 0.011888161919100554;  // std dev = 3.360, 102.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=16 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.16401302895628894;  // std dev = 0.481, 1,502.000 (wgt'ed) examples reached here.  /* #neg=957 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6115209210734325;  // std dev = 1.590, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.12629277386549892;  // std dev = 0.009, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.12675468625769903;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.053622010055400085;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.028966678125295114;  // std dev = 3.631, 91.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=16 */
%   | | | else return -0.036395852230691195;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else return -0.12525234062078308;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.17914855438473656;  // std dev = 0.491, 37.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=15 */
%   | | else return -0.02625685102066925;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.12877670602631877;  // std dev = 0.479, 1,490.000 (wgt'ed) examples reached here.  /* #neg=961 #pos=529 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( title(J, H), venue(J, B) )
%   | | | then return 0.46452873958928;  // std dev = 2.483, 26.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=16 */
%   | | | else return -0.1474167072425767;  // std dev = 0.056, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return 0.11783483428776731;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return 5.64880647552495E-4;  // std dev = 2.869, 96.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=16 */
%   | | | else return -0.04279431362605684;  // std dev = 1.325, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else return -0.11308343004468394;  // std dev = 0.002, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10944154327823555;  // std dev = 0.480, 1,517.000 (wgt'ed) examples reached here.  /* #neg=972 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5149757943985296;  // std dev = 2.033, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.1407329899948955;  // std dev = 0.225, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.11615402233553075;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.007570338033236235;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.009471110784560133;  // std dev = 2.867, 87.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=16 */
%   | | | else return -0.03036978420911924;  // std dev = 1.318, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else return -0.1022958242135741;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09511454506902285;  // std dev = 0.482, 1,489.000 (wgt'ed) examples reached here.  /* #neg=944 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.00528274090702256;  // std dev = 0.272, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.020436142999653874;  // std dev = 2.842, 79.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=16 */
%   | | | else return -0.04584415392751988;  // std dev = 1.333, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | | else return -0.0020915689169316225;  // std dev = 0.313, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06965478653751077;  // std dev = 0.480, 1,515.000 (wgt'ed) examples reached here.  /* #neg=970 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.0338236066817367;  // std dev = 0.260, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.014185667709484099;  // std dev = 2.824, 83.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=16 */
%   | | | else return -0.02381781893884895;  // std dev = 1.322, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.0037650270348802105;  // std dev = 3.112, 92.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=16 */
%   | | | else return -0.0934104941831566;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04999328070743287;  // std dev = 0.478, 1,537.000 (wgt'ed) examples reached here.  /* #neg=992 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.3006350406814113;  // std dev = 2.309, 24.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | | | else return -0.1152682388767124;  // std dev = 0.050, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else return 0.11442039931232206;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.00383386891330365;  // std dev = 3.015, 91.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=16 */
%   | | | else return -0.03254975202496273;  // std dev = 1.322, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else return -0.08536345783744542;  // std dev = 0.001, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.18845102496859753;  // std dev = 1.226, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.019601117286060867;  // std dev = 0.456, 44.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=13 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return -0.01650175209000529;  // std dev = 0.462, 42.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=13 */
%   | | else return 0.055102156484637135;  // std dev = 0.483, 1,394.000 (wgt'ed) examples reached here.  /* #neg=878 #pos=516 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.4517633355918034;  // std dev = 1.870, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.12545477716015654;  // std dev = 0.239, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else return 0.07883290893504315;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return -0.0037259107266828283;  // std dev = 0.283, 105.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=18 */
%   | | else return -0.07879635514991164;  // std dev = 0.001, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then if ( haswordvenue(A, C) )
%   | | | then return 0.5693600927237705;  // std dev = 6.282, 423.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=379 */
%   | | | else return 0.26772101855940067;  // std dev = 2.283, 25.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=17 */
%   | | else return -0.2898000774002443;  // std dev = 0.144, 891.000 (wgt'ed) examples reached here.  /* #neg=875 #pos=16 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.14268506962430993;  // std dev = 0.499, 281.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=132 */
%   | | else return 0.053223258773634284;  // std dev = 0.414, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then return 0.006189427790836124;  // std dev = 0.278, 91.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=17 */
%   | | else return 0.18219227118731407;  // std dev = 0.442, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | else if ( haswordvenue(A, J), haswordvenue(B, J) )
%   | | then return 0.5963768452128572;  // std dev = 0.267, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return -0.07376412845567537;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.859032
   AUC PR    = 0.74464
   CLL	      = -0.565701
   Precision = 0.670588 at threshold = 0.5
   Recall    = 0.023399
   F1        = 0.04522


Total learning time: 180.32316088676453 seconds
Total inference time: 30.759 seconds
AUC ROC: 0.859032


Results scoring model
   AUC ROC   = 0.933331
   AUC PR    = 0.730618
   CLL	      = -0.42557
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.003442
   F1        = 0.006861


Total scoring time: 4.984 seconds
Parameter learned model CLL: -0.42557


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,true,false': 'title(H, E), venue(H, B)', 'false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, B)'}, {'true': [0.479, 977, 545], 'false,true,true,true': [2.089, 6, 16], 'false,true,true,false': [6.14e-08, 60, 0], 'false,true,false,true': [0.0, 9, 0], 'false,true,false,false': [1.291, 10, 2], 'false,false,true,true': [3.651, 80, 16], 'false,false,true,false': [1.361, 25, 2], 'false,false,false': [0.0, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,false,false': 'haswordvenue(B, H), haswordtitle(I, H)'}, {'true': [0.48, 967, 545], 'false,true': [0.32, 12, 2], 'false,false,true': [0.313, 16, 2], 'false,false,false,true': [3.652, 81, 16], 'false,false,false,false': [3.36, 86, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,true,false': 'title(H, E), venue(H, B)', 'false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, B)'}, {'true': [0.481, 957, 545], 'false,true,true,true': [1.59, 3, 16], 'false,true,true,false': [0.009, 67, 0], 'false,true,false,true': [0.0, 9, 0], 'false,true,false,false': [1.265, 8, 2], 'false,false,true,true': [3.631, 75, 16], 'false,false,true,false': [1.342, 18, 2], 'false,false,false': [0.004, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, C)', 'false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false,true': 'title(I, H), venue(I, A)', 'false,true,true': 'title(J, H), venue(J, B)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false,true': 'title(M, L), venue(M, A)'}, {'true,true,true': [0.491, 22, 15], 'true,true,false': [0.894, 4, 1], 'true,false': [0.479, 961, 529], 'false,true,true,true': [2.483, 10, 16], 'false,true,true,false': [0.056, 69, 0], 'false,true,false': [0.433, 6, 2], 'false,false,true,true': [2.869, 80, 16], 'false,false,true,false': [1.325, 19, 2], 'false,false,false': [0.002, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,true,false': 'title(H, E), venue(H, A)', 'false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, A)'}, {'true': [0.48, 972, 545], 'false,true,true,true': [2.033, 6, 16], 'false,true,true,false': [0.225, 71, 0], 'false,true,false,true': [0.0, 7, 0], 'false,true,false,false': [1.301, 11, 2], 'false,false,true,true': [2.867, 71, 16], 'false,false,true,false': [1.318, 18, 2], 'false,false,false': [0.002, 6, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordtitle(G, F)', 'false,false,true': 'title(H, G), venue(H, A)'}, {'true': [0.482, 944, 545], 'false,true': [0.272, 13, 2], 'false,false,true,true': [2.842, 63, 16], 'false,false,true,false': [1.333, 23, 2], 'false,false,false': [0.313, 83, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(A, F), haswordtitle(G, F)', 'false,false,true': 'title(H, G), venue(H, A)', 'false,false,false': 'haswordvenue(B, I), haswordtitle(J, I)'}, {'true': [0.48, 970, 545], 'false,true': [0.26, 16, 2], 'false,false,true,true': [2.824, 67, 16], 'false,false,true,false': [1.322, 18, 2], 'false,false,false,true': [3.112, 76, 16], 'false,false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false,false,true': 'title(J, I), venue(J, B)'}, {'true': [0.478, 992, 545], 'false,true,true,true': [2.309, 8, 16], 'false,true,true,false': [0.05, 72, 0], 'false,true,false': [0.433, 6, 2], 'false,false,true,true': [3.015, 75, 16], 'false,false,true,false': [1.322, 18, 2], 'false,false,false': [0.001, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, A)', 'false,true,true': 'samebib(K, L), venue(L, B)', 'false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true,true': [1.226, 3, 3], 'true,true,false': [0.456, 31, 13], 'true,false,true': [0.462, 29, 13], 'true,false,false': [0.483, 878, 516], 'false,true,true,true': [1.87, 5, 16], 'false,true,true,false': [0.239, 73, 0], 'false,true,false': [0.416, 7, 2], 'false,false,true': [0.283, 87, 18], 'false,false,false': [0.001, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordtitle(D, C)', 'true': 'title(E, D), venue(E, A)', 'true,true': 'samebib(E, F), venue(F, B)', 'true,true,true': 'haswordvenue(A, C)', 'true,false': 'haswordvenue(A, C)', 'false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false,true': 'title(I, H), venue(I, B)', 'false,false': 'haswordvenue(A, J), haswordvenue(B, J)'}, {'true,true,true,true': [6.282, 44, 379], 'true,true,true,false': [2.283, 8, 17], 'true,true,false': [0.144, 875, 16], 'true,false,true': [0.499, 149, 132], 'true,false,false': [0.414, 12, 4], 'false,true,true': [0.278, 74, 17], 'false,true,false': [0.442, 7, 4], 'false,false,true': [0.267, 1, 12], 'false,false,false': [0.0, 3, 0]}]]
[{'': [0.22985913133868754, 0.1315567549333794], 'false': [0.14421717409746387, 0.12084960937499944], 'false,true': [0.15704937537180197, 0.08616780045351478], 'false,true,true': [0.19834710743801612, 6.29126380620922e-17], 'false,false': [0.12492563950029689, -2.7755575615628915e-18], 'false,false,true': [0.13888888888888834, 0.0685871056241427], 'false,true,false': [-9.25185853854297e-18, 0.13888888888888892]}, {'': [0.2305257236639311, 0.12064871804873903], 'false': [0.10244677216815436, 0.12178987669021676], 'false,false': [0.0978701471141957, 0.12377495553558478], 'false,false,false': [0.13750033654075586, 0.11067031638944644]}, {'': [0.23118974966357328, 0.12573725186326287], 'false': [0.11822888130954948, 0.13259620213038575], 'false,false': [0.1356458212813127, 4.514084825516425e-06], 'false,false,true': [0.14490809327050763, 0.09000000000000005], 'false,true': [0.12310263820903423, 0.0923219327743892], 'false,true,true': [0.1330957477491166, 1.1908553556892638e-06], 'false,true,false': [-3.0839528461809902e-18, 0.15999999999999998]}, {'': [0.2291902426221582, 0.11098419522232712], 'true': [0.2358276643990929, 0.22898473041756104], 'true,true': [0.24105186267348422, 0.16], 'false': [0.14377972054763416, 0.08259225177510168], 'false,true': [0.1393555419560767, 0.18750000000000003], 'false,true,true': [0.23707522776570011, 4.512633636459238e-05], 'false,false': [0.08566247429862035, 7.851364952710105e-07], 'false,false,true': [0.08576488458534941, 0.0836517326981717]}, {'': [0.23020981271502317, 0.10291114937019043], 'false': [0.11687736905087813, 0.08890419475910574], 'false,true': [0.12262200454165705, 0.08809789031220489], 'false,true,true': [0.18781616708116333, 0.0007114456945284167], 'false,false': [0.09331160380538862, 5.705287333609976e-07], 'false,false,true': [0.0944899151833138, 0.08689534340946214], 'false,true,false': [-1.982541115402065e-18, 0.13017751479289938]}, {'': [0.23207831067152135, 0.09512696679228458], 'false': [0.07419247100275611, 0.09667088077803751], 'false,false': [0.09552963410517433, 0.09784748386836717], 'false,false,true': [0.10221784412909789, 0.0710578409766945]}, {'': [0.23034821201188962, 0.09545088770621302], 'false': [0.0675786656345925, 0.09785714595748822], 'false,false': [0.09465033056292363, 0.10127177125556026], 'false,false,false': [0.10528142999809928, 0.0], 'false,false,true': [0.09611617333860191, 0.0874032578517551]}, {'': [0.22885092299581963, 0.09566738693587924], 'false': [0.09679051438397071, 0.09464418923503731], 'false,true': [0.08801572037611122, 0.18750000000000003], 'false,false': [0.09781721735905625, 5.581873375286317e-07], 'false,false,true': [0.0998605966829201, 0.0874345902966932], 'false,true,true': [0.22222511214284424, 3.53719670662204e-05]}, {'': [0.2322904600913842, 0.09030555663692688], 'true': [0.21780308463149367, 0.232718521286665], 'true,false': [0.2137188208616778, 0.23314100809167368], 'true,true': [0.25041914311815616, 0.20816115702479332], 'false': [0.10279837401192567, 0.07826782418969268], 'false,true': [0.0955964066336494, 0.17283950617283947], 'false,true,true': [0.16643604626317474, 0.0007838828939494744], 'false,false': [0.08034748769593189, 5.735016941448012e-07]}, {'': [0.21682825219366877, 0.12083227900093302], 'true': [0.2066494358321951, 0.245310221334543], 'true,false': [0.2490849913248294, 0.17144356821586682], 'true,true': [0.10452539495596135, 0.020609577985938106], 'false': [0.09307940771772802, 0.12615522055331052], 'false,false': [0.07106379039740646, -1.1564823173178713e-18], 'true,true,true': [0.09330827593119312, 0.2084102688560761], 'false,true': [0.07742697261782998, 0.19493139052763941]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
0;false,true;title(F, E), venue(F, A).;true;true
0;false,true,true;samebib(F, G), venue(G, B).;true;true
0;false,true,false;title(H, E), venue(H, B).;true;true
0;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
2;false,true;title(F, E), venue(F, A).;true;true
2;false,true,true;samebib(F, G), venue(G, B).;true;true
2;false,true,false;title(H, E), venue(H, B).;true;true
2;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, G), haswordtitle(H, G).;true;true
3;false,true;title(I, H), venue(I, A).;true;true
3;false,true,true;title(J, H), venue(J, B).;true;true
3;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
4;false,true;title(F, E), venue(F, B).;true;true
4;false,true,true;samebib(F, G), venue(G, A).;true;true
4;false,true,false;title(H, E), venue(H, A).;true;true
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
6;false,false;haswordvenue(A, F), haswordtitle(G, F).;true;true
6;false,false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
7;false,true;title(F, E), venue(F, B).;true;true
7;false,true,true;samebib(F, G), venue(G, A).;true;true
7;false,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
8;false,true;title(K, J), venue(K, A).;true;true
8;false,true,true;samebib(K, L), venue(L, B).;true;true
8;false,false;haswordvenue(A, M), haswordtitle(N, M).;true;true
9;;samevenue(A, B) :- haswordvenue(B, C), haswordtitle(D, C).;true;true
9;false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;false,false;haswordvenue(A, J), haswordvenue(B, J).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21412542105639829;  // std dev = 0.479, 1,531.000 (wgt'ed) examples reached here.  /* #neg=986 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.00851773156715447;  // std dev = 0.340, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.05259337954395682;  // std dev = 3.358, 72.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=14 */
%   | | | else return -0.0418510649004878;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.03122585817643546;  // std dev = 3.858, 104.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=18 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19556138561425498;  // std dev = 0.482, 1,491.000 (wgt'ed) examples reached here.  /* #neg=946 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5799286611268707;  // std dev = 2.088, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.14721194672433074;  // std dev = 0.022, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.13683251744007502;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0.01701363640607884;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.024725475507863255;  // std dev = 3.643, 94.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=16 */
%   | | | else return -0.05478575170614131;  // std dev = 1.348, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else return -0.12800675989407506;  // std dev = 0.014, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.1339755713084487;  // std dev = 0.471, 45.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=15 */
%   | | else return 0.05064223797511558;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.09609678342966102;  // std dev = 0.456, 44.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=13 */
%   | | else return 0.16325643333703582;  // std dev = 0.481, 1,423.000 (wgt'ed) examples reached here.  /* #neg=907 #pos=516 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.6512005915106307;  // std dev = 1.789, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.14871667665872632;  // std dev = 0.005, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else return -0.03900726201358649;  // std dev = 0.300, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.01485047131014664;  // std dev = 0.339, 109.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=18 */
%   | | else return -0.11206118470381503;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13003487736974365;  // std dev = 0.479, 1,530.000 (wgt'ed) examples reached here.  /* #neg=985 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.02566167181982336;  // std dev = 0.292, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 0.056248150254377426;  // std dev = 3.152, 72.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=16 */
%   | | | else return -0.05107077624871165;  // std dev = 1.354, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.01614478393141154;  // std dev = 3.337, 93.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=16 */
%   | | | else return -0.1013859592062917;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.2601821426225254;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.05748151987662415;  // std dev = 0.459, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | else return 0.10896731835158084;  // std dev = 0.480, 1,474.000 (wgt'ed) examples reached here.  /* #neg=945 #pos=529 */
%   else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | then if ( title(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.4868186829124093;  // std dev = 2.088, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.13249364083643758;  // std dev = 0.032, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else return -0.03370397447410957;  // std dev = 0.297, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, B) )
%   | | | then return 0.008844186075600786;  // std dev = 3.233, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */
%   | | | else return -0.03333460556722015;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else return -0.09251510703035891;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.13982391164381827;  // std dev = 0.494, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return 0.02438360934012166;  // std dev = 0.450, 46.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=13 */
%   | else return 0.07973405015676821;  // std dev = 0.477, 1,509.000 (wgt'ed) examples reached here.  /* #neg=980 #pos=529 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.5785858308014129;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.13616781039946887;  // std dev = 0.043, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else return 0.05693433425337651;  // std dev = 0.386, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return 0.014689966347109139;  // std dev = 2.905, 85.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=16 */
%   | | | else return -0.04051979985082321;  // std dev = 1.338, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else return -0.08947021137262585;  // std dev = 0.015, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0764109588060204;  // std dev = 0.481, 1,502.000 (wgt'ed) examples reached here.  /* #neg=957 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.038328163081748336;  // std dev = 0.226, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return -0.0037505762949508843;  // std dev = 2.795, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
%   | | | else return 0.11875988639374117;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return -0.011206348950194208;  // std dev = 0.309, 100.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=16 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then if ( haswordvenue(B, D) )
%   | | | then return 0.3236513787506216;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.08497605839277911;  // std dev = 2.859, 35.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=13 */
%   | | else return -0.07448872366527182;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.056819538129951;  // std dev = 0.480, 1,472.000 (wgt'ed) examples reached here.  /* #neg=943 #pos=529 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.3555468981660372;  // std dev = 2.206, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.1177839915364923;  // std dev = 0.040, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | else return 0.049345700394052665;  // std dev = 0.386, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then return -0.10172673194683914;  // std dev = 0.012, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.018845715807376307;  // std dev = 0.283, 120.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=18 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04629373336643212;  // std dev = 0.480, 1,510.000 (wgt'ed) examples reached here.  /* #neg=965 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( title(G, E), venue(G, B) )
%   | | | then return 0.19649164040155442;  // std dev = 2.389, 33.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=16 */
%   | | | else return -0.12300984487334587;  // std dev = 0.266, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | else return 0.03876066441387332;  // std dev = 0.386, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return -0.025984819021766997;  // std dev = 2.778, 100.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=16 */
%   | | | else return 0.028419648772953044;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else return -0.07800306487045967;  // std dev = 0.006, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03394786685773289;  // std dev = 0.479, 1,520.000 (wgt'ed) examples reached here.  /* #neg=975 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( title(G, E), venue(G, A) )
%   | | | then return 0.22060899761220187;  // std dev = 2.229, 29.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=16 */
%   | | | else return -0.10357496710118039;  // std dev = 0.031, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else return 0.040150457639983754;  // std dev = 0.386, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return -0.01837355102746658;  // std dev = 2.696, 94.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=16 */
%   | | | else return -0.04963169455313996;  // std dev = 1.335, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | | else return -0.07257533517052077;  // std dev = 0.006, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.562987
   AUC PR    = 0.508709
   CLL	      = -0.706654
   Precision = 0.64 at threshold = 0.5
   Recall    = 0.006568
   F1        = 0.013003


Total learning time: 101.98502612113953 seconds
Total inference time: 12.51 seconds
AUC ROC: 0.562987


Results scoring model
   AUC ROC   = 0.594922
   AUC PR    = 0.281238
   CLL	      = -0.51289
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 3.245 seconds
Refined model CLL: -0.51289


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.859032
   AUC PR    = 0.74464
   CLL	      = -0.565701
   Precision = 0.670588 at threshold = 0.5
   Recall    = 0.023399
   F1        = 0.04522


Total learning time: 290.5371870079041 seconds
Total inference time: 30.759 seconds
AUC ROC: 0.859032
Total revision time: 290.5371870079041
Best scored revision CLL: -0.42557


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 00:57:49
{'AUC ROC': 0.859032, 'AUC PR': 0.74464, 'CLL': -0.565701, 'Precision': [0.670588, 0.5], 'Recall': 0.023399, 'F1': 0.04522, 'Learning time': 290.5371870079041, 'Inference time': 30.759, 'parameter': {'AUC ROC': 0.859032, 'AUC PR': 0.74464, 'CLL': -0.565701, 'Precision': [0.670588, 0.5], 'Recall': 0.023399, 'F1': 0.04522, 'Learning time': 180.32316088676453, 'Inference time': 30.759}}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21435808542630475;  // std dev = 0.479, 1,530.000 (wgt'ed) examples reached here.  /* #neg=985 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5854216623722396;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.14185106490048766;  // std dev = 6.14e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.011995088945666036;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0363667568816906;  // std dev = 3.846, 101.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=18 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1938204917886909;  // std dev = 0.481, 1,498.000 (wgt'ed) examples reached here.  /* #neg=953 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.016113073731491737;  // std dev = 0.329, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 0.02992172157265741;  // std dev = 3.281, 89.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=16 */
%   | | | else return 0.1423967842796546;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.015702321542978872;  // std dev = 3.661, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.15825991290657906;  // std dev = 0.479, 1,525.000 (wgt'ed) examples reached here.  /* #neg=980 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6078893056517818;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.12848221601828222;  // std dev = 0.009, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.12876425558357465;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.004963259064830662;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return 0.10566553835350617;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.002014290725142742;  // std dev = 3.686, 107.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=16 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.1232785231398815;  // std dev = 0.477, 43.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=15 */
%   | | else return 0.1077746471708891;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.14078480414225286;  // std dev = 0.482, 1,444.000 (wgt'ed) examples reached here.  /* #neg=915 #pos=529 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.5774391348253358;  // std dev = 2.090, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.14863652214373563;  // std dev = 0.036, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else if ( title(K, H), venue(K, A) )
%   | | | then return -0.1485629707464591;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.05143702925354092;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.002026110357337806;  // std dev = 0.304, 106.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=18 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.35333333577195314;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.07390423269962872;  // std dev = 0.468, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | else return 0.10474884480143203;  // std dev = 0.479, 1,487.000 (wgt'ed) examples reached here.  /* #neg=958 #pos=529 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.5235135739513012;  // std dev = 1.949, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.1308298446642589;  // std dev = 0.046, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | else return 0.09481236307732943;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then return 0.052566028339045494;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then return -0.1139975730781177;  // std dev = 0.012, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.01072622060912906;  // std dev = 3.024, 100.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=16 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09575018234384215;  // std dev = 0.482, 1,485.000 (wgt'ed) examples reached here.  /* #neg=940 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4542356932351785;  // std dev = 1.785, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.11722644181106759;  // std dev = 0.034, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.11657109789928038;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.014181974164750422;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.0023786340842047618;  // std dev = 2.839, 95.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=16 */
%   | | | else return -0.05671390084226141;  // std dev = 1.325, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | | else return -0.09610619323356007;  // std dev = 0.018, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06260136799196549;  // std dev = 0.478, 1,543.000 (wgt'ed) examples reached here.  /* #neg=998 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.529035866281815;  // std dev = 1.331, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | | else return -0.11440784498767596;  // std dev = 0.039, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | | else return 0.0463244036792273;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.026024130426135886;  // std dev = 2.617, 105.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=16 */
%   | | | else return 0.08394511334974575;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return -0.09007566428949278;  // std dev = 0.016, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.07542426884859145;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return 0.024975792996925414;  // std dev = 0.468, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | else return 0.05413592174018208;  // std dev = 0.479, 1,479.000 (wgt'ed) examples reached here.  /* #neg=950 #pos=529 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then return -0.016380290813225205;  // std dev = 0.283, 89.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=16 */
%   | | else if ( title(J, H), venue(J, A) )
%   | | | then return -0.10266991261415524;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.01134105096471059;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return -0.04083382808022226;  // std dev = 2.610, 109.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=16 */
%   | | | else return 0.06242457850326856;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return -0.0832706031051159;  // std dev = 0.014, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.3796971898115719;  // std dev = 0.864, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.0368098444609742;  // std dev = 0.474, 38.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=13 */
%   | else return 0.036415540365793114;  // std dev = 0.477, 1,505.000 (wgt'ed) examples reached here.  /* #neg=976 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return -0.05079479232595777;  // std dev = 0.224, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return -0.04227546050406618;  // std dev = 0.237, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return -0.003232092347141312;  // std dev = 2.756, 88.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=16 */
%   | | | else return -0.0210140866371847;  // std dev = 2.703, 103.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=16 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.037092379135573145;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.03054919049564137;  // std dev = 0.450, 46.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=13 */
%   | else return 0.028720554105753963;  // std dev = 0.477, 1,504.000 (wgt'ed) examples reached here.  /* #neg=975 #pos=529 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.28554555128224113;  // std dev = 2.087, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.0996217259584813;  // std dev = 0.040, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | else return 0.04633686445047526;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then return 0.01124147294895859;  // std dev = 0.239, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return -0.02068073627564353;  // std dev = 2.767, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
%   | | | else return -0.07027967481577085;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.564246
   AUC PR    = 0.507157
   CLL	      = -0.707404
   Precision = 0.565476 at threshold = 0.5
   Recall    = 0.038998
   F1        = 0.072965


Total learning time: 109.23670983314514 seconds
Total inference time: 11.76 seconds
AUC ROC: 0.564246


Dataset: 3_imdb_cora, Fold: 3, Type: Scratch (RDN-B), Time: 00:59:51
{'AUC ROC': 0.564246, 'AUC PR': 0.507157, 'CLL': -0.707404, 'Precision': [0.565476, 0.5], 'Recall': 0.038998, 'F1': 0.072965, 'Learning time': 109.23670983314514, 'Inference time': 11.76}


Starting fold 4

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos  examples: 2270
Target test neg examples: 3954

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.24811816884741328;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.16653882456488167;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7825012972897073;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.21749870271029265;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.5825012972897073;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.2006373174408249;  // std dev = 0.493, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.25543090384670025;  // std dev = 3.509, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.33354380143522294;  // std dev = 2.603, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return 0.1420942428155646;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.7308696361235547;  // std dev = 0.116, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.25356934620236316;  // std dev = 7.45e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.5306845497315434;  // std dev = 0.879, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.1641317688391931;  // std dev = 0.492, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.19777708198447586;  // std dev = 3.501, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.27420169125100924;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return 0.11914890490746433;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1333887869932144;  // std dev = 0.491, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.12109705167723443;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.19783972616495318;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.19824242129127534;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.24727322080322298;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.0984134027840187;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10537943817852782;  // std dev = 0.491, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.0947288453474379;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.1497819051861768;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.15009882357836804;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.1855346540046082;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.08026654944252247;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08224534400794924;  // std dev = 0.491, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.07334128830203183;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.11259716894938888;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.11283887691517792;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.1396804205646596;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.06479591611329234;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.48919169889086844;  // std dev = 0.133, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.2556213572176314;  // std dev = 0.082, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.33771733346244304;  // std dev = 0.877, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.06207762130236472;  // std dev = 0.492, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.06873069070283182;  // std dev = 3.491, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.08978508823846715;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return 0.03180318785257397;  // std dev = 3.274, 62.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=14 */
%   | | | else return 0.0287759413205105;  // std dev = 1.431, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04881503178035368;  // std dev = 0.491, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.0401744852977692;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.06222848198289233;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.0672963988790106;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.08477195363703181;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.04571303159124688;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.016844848743433647;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03738045524805284;  // std dev = 0.491, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.03058956112831426;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.046755158150731745;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.05054276558526913;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.06522720179673587;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.036256508552902994;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.014311711417457068;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.572894
   AUC PR    = 0.435818
   CLL	      = -0.640136
   Precision = 0.592105 at threshold = 0.5
   Recall    = 0.079295
   F1        = 0.13986


Total learning time: 204.16130304336548 seconds
Total inference time: 16.6 seconds
AUC ROC: 0.572894


Results scoring model
   AUC ROC   = 0.556791
   AUC PR    = 0.478374
   CLL	      = -0.664702
   Precision = 0.704225 at threshold = 0.5
   Recall    = 0.066934
   F1        = 0.122249


Total scoring time: 2.631 seconds
Parameter learned model CLL: -0.664702


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'samebib(F, G), venue(G, B)', 'true,false': 'haswordtitle(H, C)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,true': 'haswordtitle(L, M), haswordvenue(B, M)'}, {'true,true,true,true': [0.0, 0, 8], 'true,true,true,false': [1.05e-08, 7, 0], 'true,true,false': [0.894, 1, 4], 'true,false,true': [0.493, 924, 664], 'true,false,false,true': [3.509, 25, 25], 'true,false,false,false': [2.603, 11, 18], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'samebib(F, G), venue(G, A)', 'true,false': 'haswordtitle(H, C)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,true': 'haswordtitle(L, M), haswordvenue(B, M)'}, {'true,true,true,true': [0.116, 0, 8], 'true,true,true,false': [7.45e-09, 7, 0], 'true,true,false': [0.879, 1, 4], 'true,false,true': [0.492, 924, 664], 'true,false,false,true': [3.501, 25, 25], 'true,false,false,false': [2.6, 11, 18], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.491, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.491, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.491, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'samebib(E, F), venue(F, A)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false,true': 'title(M, L), venue(M, B)'}, {'true,true,true': [0.133, 0, 8], 'true,true,false': [0.082, 8, 0], 'true,false': [0.877, 1, 4], 'false,true,true': [0.492, 924, 664], 'false,true,false,true': [3.491, 25, 25], 'false,true,false,false': [2.598, 11, 18], 'false,false,true,true': [3.274, 48, 14], 'false,false,true,false': [1.431, 7, 3], 'false,false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true': [0.491, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true': [0.491, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}]]
[{'': [0.24455361249545102, 0.17089843750000108], 'true': [0.24366352318011741, 0.24803717352988336], 'true,false': [0.25000000000000133, 0.2354340071343634], 'true,false,true': [0.24489795918367302, 0.2417355371900822], 'true,false,false': [0.2417355371900822, 0.20408163265306106], 'false': [0.17864514918371124, 0.15999999999999948], 'false,true': [0.22222222222222232, 0.15999999999999948]}, {'': [0.24423965838627737, 0.17036542604714275], 'true': [0.24366352318012574, 0.24554974033866345], 'true,false': [0.24813620683257936, 0.23456996391329932], 'true,false,true': [0.244897959183673, 0.2417355371900833], 'true,false,false': [0.2417355371900833, 0.20408163265306115], 'false': [0.17782577785291798, 0.1600000000000007], 'false,true': [0.22222222222222207, 0.1600000000000007]}, {'': [0.2439315722131505, 0.16990467702453838], 'true': [0.24000000000000013, 0.2436035028144152], 'true,false': [0.24329828880331825, 0.24310195846820265], 'true,false,false': [0.2463115068589202, 0.2337064665173658], 'true,true': [0.24888888888888888, 0.16], 'true,true,true': [0.0, 1.586032892321652e-17], 'false': [0.1771174918718374, 0.15999999999999953], 'false,true': [0.22222222222222218, 0.15999999999999953]}, {'': [0.24275361851629546, 0.1695374267579385], 'true': [0.2328527985788389, 0.24253294562416394], 'true,false': [0.2423728578271841, 0.24212444330022406], 'true,false,false': [0.2451778514248195, 0.2331632877352376], 'true,true': [0.24210723637051715, 0.15469331754660373], 'true,true,true': [0.0016950168973718371, 7.93016446160826e-18], 'false': [0.17655293676131073, 0.15999999999999967], 'false,true': [0.2222222222222222, 0.15999999999999967]}, {'': [0.24156403173592483, 0.16926465814576508], 'true': [0.24149499607881986, 0.24130830687307714], 'true,false': [0.24495765105126047, 0.23308687649008855], 'true,false,true': [0.24489795918367369, 0.24173553719008242], 'true,false,false': [0.24173553719008278, 0.2040816326530612], 'false': [0.17613362348097328, 0.15999999999999995], 'false,true': [0.22222222222222218, 0.15999999999999995]}, {'': [0.2414046065690813, 0.16907391107668154], 'true': [0.24141474071034497, 0.2404432208244145], 'true,false': [0.24425329233406426, 0.23287660126023257], 'true,false,true': [0.2448979591836733, 0.2417355371900828], 'true,false,false': [0.24173553719008242, 0.20408163265306123], 'false': [0.17584039773694396, 0.1599999999999999], 'false,true': [0.22222222222222215, 0.1599999999999999]}, {'': [0.24131264946663808, 0.168947125674667], 'true': [0.2413603944103754, 0.24000014993846544], 'true,false': [0.2438862018608482, 0.23277859250835814], 'true,false,true': [0.24489795918367327, 0.24173553719008278], 'true,false,false': [0.2417355371900827, 0.20408163265306123], 'false': [0.17564549700260335, 0.16000000000000006], 'false,true': [0.22222222222222227, 0.16000000000000006]}, {'': [0.15230713427638648, 0.23709815275343882], 'false': [0.24212888949153652, 0.16986459038524898], 'false,true': [0.24223611288473795, 0.23977652675599997], 'false,true,false': [0.24370093376310384, 0.23272974597090013], 'false,false': [0.17735196873673686, 0.16000000000000014], 'false,false,true': [0.17292297599766537, 0.20480383230596494], 'true': [0.14020743394892635, 0.1538368263851931], 'true,true': [0.0022062818092639935, 0.0008353418137472257]}, {'': [0.2406206148603138, 0.16873536811437348], 'true': [0.24066081220973812, 0.23972511626134965], 'true,false': [0.24362633723536903, 0.23270258619264644], 'true,false,true': [0.2448979591836737, 0.24173553719008273], 'true,false,false': [0.24173553719008278, 0.20408163265306123], 'false': [0.17548764261066602, 0.1597384876518563], 'false,true': [0.22222231840503584, 0.16000000000000014]}, {'': [0.24060028647836948, 0.16869277055543014], 'true': [0.24064570253521436, 0.23963759552354932], 'true,false': [0.24357088436276877, 0.23268614933001053], 'true,false,true': [0.24489795918367355, 0.24173553719008256], 'true,false,false': [0.24173553719008264, 0.20408163265306123], 'false': [0.17542565211171546, 0.15973584105118854], 'false,true': [0.2222223221275417, 0.16000000000000011]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
2;true,true;author(F, E), venue(F, A).;true;true
2;true,true,true;samebib(F, G), venue(G, B).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
3;true,true;author(F, E), venue(F, B).;true;true
3;true,true,true;samebib(F, G), venue(G, A).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true
7;true;author(E, D), venue(E, B).;true;true
7;true,true;samebib(E, F), venue(F, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.24811816884741328;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.16653882456488167;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.20848477447886868;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3912569620992536;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1420942428155646;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.17062637354018492;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3005711547884894;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.11914890490746433;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.13360339271793026;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.13664585375352234;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.22629823971521876;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.0984134027840187;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6851194194405705;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3148805805594295;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.4851194194405705;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.103255439591714;  // std dev = 0.493, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.12353511621533303;  // std dev = 3.492, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.1500790041100246;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return 0.08026654944252247;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0822316676647204;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.08012368931034408;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.1064640057748568;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.113090430276702;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.13293567594053649;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.06479591611329234;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06360288476548136;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.06171941813443866;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.07985482696276892;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.08483269039127353;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.10097419867196318;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.05187916934404051;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.12904772108841087;  // std dev = 0.382, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | else return 0.33654614035427816;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.04722481222628199;  // std dev = 0.493, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.052839754516754246;  // std dev = 3.490, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.06695010395894731;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.3020714322715009;  // std dev = 2.612, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return -0.19792856772849954;  // std dev = 0.227, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.018918464139981474;  // std dev = 0.452, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03740365166082347;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.034728383651172264;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.04679438689405193;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.047000093227641676;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.061982690350314625;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.03549966694266289;  // std dev = 0.452, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.011251361743546424;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.570635
   AUC PR    = 0.42083
   CLL	      = -0.638825
   Precision = 0.546125 at threshold = 0.5
   Recall    = 0.065198
   F1        = 0.11649


Total learning time: 203.51061606407166 seconds
Total inference time: 16.521 seconds
AUC ROC: 0.570635


Results scoring model
   AUC ROC   = 0.548762
   AUC PR    = 0.463168
   CLL	      = -0.665893
   Precision = 0.671875 at threshold = 0.5
   Recall    = 0.057564
   F1        = 0.106042


Total scoring time: 2.574 seconds
Refined model CLL: -0.665893


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.572894
   AUC PR    = 0.435818
   CLL	      = -0.640136
   Precision = 0.592105 at threshold = 0.5
   Recall    = 0.079295
   F1        = 0.13986


Total learning time: 412.8769191074371 seconds
Total inference time: 16.6 seconds
AUC ROC: 0.572894
Total revision time: 412.8769191074371
Best scored revision CLL: -0.664702


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 01:07:20
{'AUC ROC': 0.572894, 'AUC PR': 0.435818, 'CLL': -0.640136, 'Precision': [0.592105, 0.5], 'Recall': 0.079295, 'F1': 0.13986, 'Learning time': 412.8769191074371, 'Inference time': 16.6, 'parameter': {'AUC ROC': 0.572894, 'AUC PR': 0.435818, 'CLL': -0.640136, 'Precision': [0.592105, 0.5], 'Recall': 0.079295, 'F1': 0.13986, 'Learning time': 204.16130304336548, 'Inference time': 16.6}}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.24811816884741328;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.16653882456488167;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.20848477447886868;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3912569620992536;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1420942428155646;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.17062637354018492;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3005711547884894;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.11914890490746433;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.13360339271793026;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.13664585375352234;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.22629823971521876;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.0984134027840187;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10551742939082928;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.10762034996184403;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.14379027326522745;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.14379027326522745;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.16984358676510128;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.08026654944252247;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08232251291348108;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.08372807955323855;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.10803450809035726;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.10803450809035726;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.12813320688246752;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.06479591611329234;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06366213733661014;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.06457405393631681;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.08103386685025628;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.08103386685025628;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.09743184803714998;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.05187916934404051;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.6285257899654785;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.34781984983750647;  // std dev = 0.063, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.4285257899654785;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.046661810116601865;  // std dev = 0.493, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.054475401026286584;  // std dev = 3.490, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.06415866688950288;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return 0.04126932998424623;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.021464375245302116;  // std dev = 2.960, 54.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
%   | | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4743654534944021;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.2944813628978504;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.3243237423986564;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.03570342650332641;  // std dev = 0.493, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.04023320225349696;  // std dev = 3.489, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.05034702413223978;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then return 0.03266374873483021;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.015439626897659712;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.568281
   AUC PR    = 0.426536
   CLL	      = -0.641232
   Precision = 0.546125 at threshold = 0.5
   Recall    = 0.065198
   F1        = 0.11649


Total learning time: 195.1356658935547 seconds
Total inference time: 16.603 seconds
AUC ROC: 0.568281


Dataset: 3_imdb_cora, Fold: 4, Type: Scratch (RDN-B), Time: 01:10:53
{'AUC ROC': 0.568281, 'AUC PR': 0.426536, 'CLL': -0.641232, 'Precision': [0.546125, 0.5], 'Recall': 0.065198, 'F1': 0.11649, 'Learning time': 195.1356658935547, 'Inference time': 16.603}


Starting fold 5

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos  examples: 2467
Target test neg examples: 4522

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.7291166770349955;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15083186192878065;  // std dev = 2.913, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.051131391239862906;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6157326050686436;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.6392119282680095;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15769426647032894;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, B) )
%   | | | then return -0.16343846579291768;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.12907154912175825;  // std dev = 2.884, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.03693744759731563;  // std dev = 0.807, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1534329638272584;  // std dev = 2.940, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.04479249977758044;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.31149293361789177;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.48283090502633463;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.5342138905737382;  // std dev = 0.901, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1371885616510316;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.09339221621720731;  // std dev = 0.439, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.031605648952777385;  // std dev = 0.805, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.13136057997248263;  // std dev = 2.936, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.03250702666026084;  // std dev = 2.992, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.04606634869415913;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.246046549984428;  // std dev = 0.492, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.39784229978637214;  // std dev = 0.294, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.5126961211624405;  // std dev = 0.908, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14843846012740272;  // std dev = 0.028, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.07317931426985173;  // std dev = 0.435, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.0099907349158465;  // std dev = 0.706, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.11114858274088883;  // std dev = 2.908, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.026718834472761115;  // std dev = 2.990, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.04158699001641421;  // std dev = 2.967, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.18839595997363331;  // std dev = 0.492, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.31748002118327856;  // std dev = 0.288, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.3982790799773085;  // std dev = 0.910, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.12894068236341732;  // std dev = 0.025, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, A) )
%   | | | then return -0.16737207814218968;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.07801359276479407;  // std dev = 2.853, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | | then return -0.16504450553831573;  // std dev = 0.025, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.09865113079049162;  // std dev = 4.050, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | else return 0.01490819530698163;  // std dev = 0.384, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.14257042067261919;  // std dev = 0.492, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.24330511223531182;  // std dev = 0.288, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.3789227400346353;  // std dev = 0.917, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.13812319677019466;  // std dev = 0.036, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.04842284293138263;  // std dev = 0.429, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, B) )
%   | | | then return 0.07659378317257269;  // std dev = 4.066, 88.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=24 */
%   | | | else return -0.15559881810195283;  // std dev = 0.063, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.043073713190593874;  // std dev = 2.982, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | else return -0.19566489924660616;  // std dev = 0.101, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.429718997149197;  // std dev = 0.114, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.04048601748855183;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.2750086621447558;  // std dev = 1.857, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.06042903743157178;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.26327420809534785;  // std dev = 1.857, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.13372858902616036;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, A) )
%   | | then return 0.028505938769632352;  // std dev = 0.279, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.05418086577567161;  // std dev = 0.433, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else return 0.02958012772098706;  // std dev = 0.405, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.3336999642989776;  // std dev = 0.101, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.030376440134936317;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.2087822253890823;  // std dev = 1.850, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return -0.06966628844062639;  // std dev = 3.259, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   | | | else return 0.1004635396898459;  // std dev = 13.050, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return -0.14950492888226027;  // std dev = 0.072, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return 0.0657020943011471;  // std dev = 0.431, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.0646157511189912;  // std dev = 0.431, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | else return -0.19623216289713413;  // std dev = 0.159, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordvenue(B, D), haswordauthor(F, C) )
%   | | then return 0.3372681020865213;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.05683141643313517;  // std dev = 0.486, 809.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=473 */
%   | else return 0.1774437368803165;  // std dev = 0.284, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then return 0.0022151336951114833;  // std dev = 0.282, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(J, H), venue(J, A) )
%   | | | then return 0.006132346948399442;  // std dev = 0.864, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.047793049105620815;  // std dev = 2.781, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return 0.048657616147164864;  // std dev = 4.052, 88.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=24 */
%   | | | else return -0.12376239805857084;  // std dev = 0.055, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.006320056278629244;  // std dev = 0.375, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return -0.4899182581204418;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.20800527475068986;  // std dev = 0.373, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | else if ( author(G, D), venue(G, A) )
%   | | then return -0.2482241502535781;  // std dev = 0.313, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else if ( author(H, D), venue(H, B) )
%   | | | then return 0.020306228153094536;  // std dev = 0.873, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.061218758432298494;  // std dev = 2.897, 46.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=18 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then if ( haswordtitle(J, I) )
%   | | then return 0.05130540185943411;  // std dev = 0.487, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.12418935032784297;  // std dev = 0.337, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.031961322332264536;  // std dev = 0.418, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | else return -0.009122918026444533;  // std dev = 0.377, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */


Results
   AUC ROC   = 0.554599
   AUC PR    = 0.404095
   CLL	      = -0.706126
   Precision = 0.373747 at threshold = 0.5
   Recall    = 0.937171
   F1        = 0.534381


Total learning time: 112.50688195228577 seconds
Total inference time: 28.86 seconds
AUC ROC: 0.554599


Results scoring model
   AUC ROC   = 0.673513
   AUC PR    = 0.666856
   CLL	      = -0.620218
   Precision = 0.627034 at threshold = 0.5
   Recall    = 0.910909
   F1        = 0.742772


Total scoring time: 2.226 seconds
Parameter learned model CLL: -0.620218


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(A, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, B)', 'false,true,true': 'samebib(G, H), venue(H, A)', 'false,true,false': 'author(I, F), venue(I, A)', 'false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,false,true': 'haswordtitle(L, J)'}, {'true,true': [0.493, 334, 471], 'true,false': [0.335, 4, 27], 'false,true,true,true': [0.894, 1, 4], 'false,true,true,false': [0.0, 5, 0], 'false,true,false,true': [0.0, 3, 0], 'false,true,false,false': [2.913, 29, 12], 'false,false,true,true': [0.894, 4, 1], 'false,false,true,false': [2.98, 28, 13], 'false,false,false': [0.395, 92, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(B, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, A)', 'false,true,true': 'samebib(G, H), venue(H, B)', 'false,true,false': 'author(I, F), venue(I, B)', 'false,false': 'haswordvenue(A, J), haswordauthor(K, J)', 'false,false,true': 'haswordtitle(L, J)'}, {'true,true': [0.493, 334, 471], 'true,false': [0.335, 4, 27], 'false,true,true,true': [0.899, 1, 4], 'false,true,true,false': [0.016, 5, 0], 'false,true,false,true': [0.003, 3, 0], 'false,true,false,false': [2.884, 29, 12], 'false,false,true,true': [0.807, 4, 1], 'false,false,true,false': [2.94, 28, 13], 'false,false,false': [0.395, 92, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(A, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, B)', 'false,true,true': 'samebib(G, H), venue(H, A)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false,true': 'haswordtitle(K, I)', 'false,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.493, 334, 471], 'true,false': [0.335, 4, 27], 'false,true,true,true': [0.901, 1, 4], 'false,true,true,false': [0.014, 5, 0], 'false,true,false': [0.439, 32, 12], 'false,false,true,true': [0.805, 4, 1], 'false,false,true,false': [2.936, 28, 13], 'false,false,false,true': [2.992, 48, 11], 'false,false,false,false': [2.966, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordtitle(E, D)', 'false': 'haswordvenue(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, A)', 'false,true,true': 'samebib(H, I), venue(I, B)', 'false,false': 'haswordvenue(A, J), haswordauthor(K, J)', 'false,false,true': 'haswordtitle(L, J)', 'false,false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true': [0.492, 336, 479], 'true,false': [0.294, 2, 19], 'false,true,true,true': [0.908, 1, 4], 'false,true,true,false': [0.028, 5, 0], 'false,true,false': [0.435, 32, 12], 'false,false,true,true': [0.706, 4, 1], 'false,false,true,false': [2.908, 28, 13], 'false,false,false,true': [2.99, 48, 11], 'false,false,false,false': [2.967, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordtitle(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, B)', 'false,true,true': 'samebib(H, I), venue(I, A)', 'false,true,false': 'author(J, G), venue(J, A)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false,true': 'haswordtitle(L, M), haswordvenue(B, M)'}, {'true,true': [0.492, 336, 479], 'true,false': [0.288, 2, 19], 'false,true,true,true': [0.91, 1, 4], 'false,true,true,false': [0.025, 5, 0], 'false,true,false,true': [0.007, 3, 0], 'false,true,false,false': [2.853, 29, 12], 'false,false,true,true': [0.025, 12, 0], 'false,false,true,false': [4.05, 59, 24], 'false,false,false': [0.384, 53, 12]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordtitle(E, D)', 'false': 'haswordvenue(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, A)', 'false,true,true': 'samebib(H, I), venue(I, B)', 'false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,false,true': 'title(L, K), venue(L, B)', 'false,false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.492, 336, 479], 'true,false': [0.288, 2, 19], 'false,true,true,true': [0.917, 1, 4], 'false,true,true,false': [0.036, 5, 0], 'false,true,false': [0.429, 32, 12], 'false,false,true,true': [4.066, 64, 24], 'false,false,true,false': [0.063, 7, 0], 'false,false,false,true': [2.982, 42, 12], 'false,false,false,false': [0.101, 11, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'haswordtitle(G, D)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'true,false,true': 'haswordtitle(J, H)', 'false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,true': 'author(M, L), venue(M, A)'}, {'true,true,true': [0.114, 0, 10], 'true,true,false,true': [2.596, 13, 14], 'true,true,false,false': [1.857, 18, 6], 'true,false,true,true': [2.542, 12, 14], 'true,false,true,false': [1.857, 17, 6], 'true,false,false': [0.484, 278, 448], 'false,true,true': [0.279, 6, 2], 'false,true,false': [0.433, 32, 14], 'false,false': [0.405, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordauthor(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,true': 'haswordtitle(G, E)', 'true,false,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)', 'false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.101, 0, 10], 'true,false,true,true': [2.596, 13, 14], 'true,false,true,false': [1.85, 18, 6], 'true,false,false,true': [3.259, 29, 20], 'true,false,false,false': [13.05, 278, 448], 'false,true,true': [0.072, 14, 0], 'false,true,false': [0.431, 65, 26], 'false,false,true': [0.431, 65, 26], 'false,false,false': [0.159, 18, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordtitle(E, D)', 'true,true': 'haswordvenue(B, D), haswordauthor(F, C)', 'false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false,true': 'author(I, H), venue(I, B)', 'false,true,false': 'author(J, H), venue(J, A)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,false,true': 'title(M, L), venue(M, B)'}, {'true,true,true': [0.0, 0, 6], 'true,true,false': [0.486, 336, 473], 'true,false': [0.284, 2, 19], 'false,true,true': [0.282, 6, 2], 'false,true,false,true': [0.864, 3, 2], 'false,true,false,false': [2.781, 29, 12], 'false,false,true,true': [4.052, 64, 24], 'false,false,true,false': [0.055, 7, 0], 'false,false,false': [0.375, 53, 12]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,true': 'author(F, D), venue(F, B)', 'true,false': 'author(G, D), venue(G, A)', 'true,false,false': 'author(H, D), venue(H, B)', 'false': 'haswordvenue(A, I), haswordvenue(B, I)', 'false,true': 'haswordtitle(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)'}, {'true,true,true': [0.0, 8, 0], 'true,true,false': [0.373, 10, 21], 'true,false,true': [0.313, 20, 4], 'true,false,false,true': [0.873, 3, 3], 'true,false,false,false': [2.897, 28, 18], 'false,true,true': [0.487, 304, 449], 'false,true,false': [0.337, 3, 19], 'false,false,true': [0.418, 71, 24], 'false,false,false': [0.377, 53, 12]}]]
[{'': [0.24084270048762138, 0.18394619617433927], 'true': [0.2427591528104568, 0.11238293444328941], 'false': [0.20850480109739317, 0.17437500000000122], 'false,true': [0.23999999999999985, 0.19834710743801603], 'false,true,true': [0.15999999999999986, -2.7755575615628915e-18], 'false,true,false': [0.0, 0.20701963117192096], 'false,false': [0.21172022684309966, 0.15574022776238935], 'false,false,true': [0.16000000000000003, 0.2165377751338484]}, {'': [0.23990334821509712, 0.18064086185860806], 'true': [0.24275915281046145, 0.11238293444328855], 'false': [0.2054810365436294, 0.1713147328715216], 'false,true': [0.23956010966648247, 0.19452713363159602], 'false,true,true': [0.16153950938681216, 5.096833998346761e-05], 'false,true,false': [2.4576686617067134e-06, 0.2029268663597475], 'false,false': [0.2033490412927039, 0.15574022776238897], 'false,false,true': [0.1302457674210878, 0.2107889436806293]}, {'': [0.23897284752961956, 0.17711242437218921], 'true': [0.24275915281046562, 0.1123829344432882], 'false': [0.19470410716262027, 0.17053456504147238], 'false,true': [0.19384073754219705, 0.19285397407922228], 'false,true,true': [0.16225081288610724, 4.0035771569829626e-05], 'false,false': [0.20246980632736908, 0.15574022776238927], 'false,false,true': [0.12955350753159564, 0.2102804024244872], 'false,false,false': [0.15168055156564172, 0.15999999999999967]}, {'': [0.23842675178441752, 0.17429212738174443], 'true': [0.24177118361165506, 0.08616780045351476], 'false': [0.19141942004594453, 0.16809954718997902], 'false,true': [0.19174164183894812, 0.1891480402108914], 'false,true,true': [0.16478151209742986, 0.0001523042918183476], 'false,false': [0.1956293184723737, 0.15572876475443995], 'false,false,true': [0.09972874111551631, 0.20621223798768418], 'false,false,false': [0.15156635372732458, 0.16007948727732724]}, {'': [0.23816056440613953, 0.17163703194393162], 'true': [0.24174427750376024, 0.08283423127592948], 'false': [0.1829156216885863, 0.16760311062224978], 'false,true': [0.15242069421340648, 0.1888489591278243], 'false,true,false': [1.6531066637302343e-05, 0.19856045736687125], 'false,false': [0.18035117848994253, 0.14746106275837073], 'false,false,true': [5.2434132695585355e-05, 0.19763504932099918], 'false,true,true': [0.16574000945495207, 0.00012104007055522282]}, {'': [0.23800709753466698, 0.16878290091771547], 'true': [0.2417446208676258, 0.08306301943658886], 'false': [0.17884415416293606, 0.16522510470532545], 'false,true': [0.1510550560832442, 0.18420047340802997], 'false,false': [0.17774555585067117, 0.1450095227689309], 'false,false,true': [0.18786740580586977, 0.0005586046584524694], 'false,true,true': [0.16818453323862154, 0.0002573285446747925], 'false,false,false': [0.16471279363455457, 0.000933747903207867]}, {'': [0.23793841768912188, 0.16596952501323733], 'true': [0.2295323710324471, 0.2371837330342267], 'true,false': [0.22837394786383636, 0.23457064051019672], 'true,true': [0.012933955056492353, 0.22460552827555774], 'true,false,true': [0.2485207100591715, 0.1499997844624838], 'true,true,false': [0.24965706447187921, 0.1437265479433838], 'false': [0.17133497144404936, 0.16404954701699764], 'false,true': [0.0775952134335316, 0.18753987851727563]}, {'': [0.2336164381783415, 0.16575128651625393], 'true': [0.010116549038616984, 0.23554684355063002], 'true,false': [0.21349464485145225, 0.23517404338899284], 'true,false,false': [0.21673160558307158, 0.234588763168709], 'true,false,true': [0.24965706447187938, 0.1425312283280559], 'false': [0.16657257611566315, 0.1648427444244925], 'false,true': [0.00036862015402458085, 0.18596720711738154], 'false,false': [0.18593622515987146, 0.001398079638511962]}, {'': [0.2315740304367344, 0.16343778659533717], 'true': [0.23510525211140312, 0.08082844866011912], 'true,true': [-1.850371707708594e-17, 0.23626994553854383], 'false': [0.16924401632349587, 0.1613927183769545], 'false,true': [0.07961699568946928, 0.18458168457510768], 'false,true,false': [0.14931556674208044, 0.1886937769453244], 'false,false': [0.17484918929216411, 0.14066453145327307], 'false,false,true': [0.18653225311358115, 0.0004382586048725696]}, {'': [0.1801886582338537, 0.22175970562892747], 'false': [0.23388706633098777, 0.16181437400440749], 'false,true': [0.23724289159237003, 0.11386504418382438], 'true': [0.18986815433060414, 0.1715130922475749], 'true,true': [-2.7755575615628914e-17, 0.13894900150412656], 'true,false': [0.09771627968367165, 0.17625032629678133], 'true,false,false': [0.12691433136265548, 0.18249232124766154], 'false,false': [0.1746849200997357, 0.14200137644910732]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
0;false,true;author(G, F), venue(G, B).;true;true
0;false,true,true;samebib(G, H), venue(H, A).;true;true
0;false,true,false;author(I, F), venue(I, A).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(B, E), haswordauthor(F, E).;true;true
1;false,true;author(G, F), venue(G, A).;true;true
1;false,true,true;samebib(G, H), venue(H, B).;true;true
1;false,true,false;author(I, F), venue(I, B).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
2;false,true;author(G, F), venue(G, B).;true;true
2;false,true,true;samebib(G, H), venue(H, A).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, F), haswordauthor(G, F).;true;true
3;false,true;author(H, G), venue(H, A).;true;true
3;false,true,true;samebib(H, I), venue(I, B).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(A, F), haswordauthor(G, F).;true;true
4;false,true;author(H, G), venue(H, B).;true;true
4;false,true,true;samebib(H, I), venue(I, A).;true;true
4;false,true,false;author(J, G), venue(J, A).;true;true
4;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;true
4;false,false,true;haswordtitle(L, M), haswordvenue(B, M).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(B, F), haswordauthor(G, F).;true;true
5;false,true;author(H, G), venue(H, A).;true;true
5;false,true,true;samebib(H, I), venue(I, B).;true;true
5;false,false;haswordvenue(B, J), haswordtitle(K, J).;true;true
5;false,false,true;title(L, K), venue(L, B).;true;true
5;false,false,false;haswordvenue(A, M), haswordtitle(N, M).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(B, J), haswordtitle(K, J).;true;true
7;false,true;haswordtitle(K, L), haswordvenue(A, L).;true;true
7;false,false;haswordvenue(A, M), haswordtitle(N, M).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordvenue(A, D), haswordtitle(E, D).;true;true
8;true,true;haswordvenue(B, D), haswordauthor(F, C).;true;true
8;false;haswordvenue(B, G), haswordauthor(H, G).;true;true
8;false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
8;false,false,true;title(M, L), venue(M, B).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true
9;true;haswordtitle(E, C).;true;true
9;true,true;author(F, D), venue(F, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.7291166770349955;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15083186192878065;  // std dev = 2.913, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.051131391239862906;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6157326050686436;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.6392119282680095;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15769426647032894;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.10912768446848493;  // std dev = 0.441, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.03693744759731563;  // std dev = 0.807, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1534329638272584;  // std dev = 2.940, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.03825072160333175;  // std dev = 2.992, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05181004363723003;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.6805851247859591;  // std dev = 0.056, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.2449182844345499;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.047462026339214695;  // std dev = 1.980, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.3226813064206765;  // std dev = 0.491, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.47549952672721435;  // std dev = 0.343, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.19790656117758298;  // std dev = 0.440, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(L, J), venue(L, B) )
%   | | | then return -0.17891175899361775;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.11361319919327112;  // std dev = 2.883, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.06249985935096421;  // std dev = 0.413, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.3421447211654781;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.43517753260968717;  // std dev = 1.922, 24.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return -0.1955020234161484;  // std dev = 1.552, 20.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=3 */
%   | | | else return 0.3611200399893474;  // std dev = 0.922, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( haswordtitle(I, C) )
%   | | then return 0.25659510724314716;  // std dev = 0.489, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.3876766473547288;  // std dev = 0.342, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, B) )
%   | | then return 0.18751767845219464;  // std dev = 0.438, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.082586465827592;  // std dev = 0.438, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.05152488438131035;  // std dev = 0.412, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.4376245974914782;  // std dev = 0.079, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return 0.12832451670601444;  // std dev = 2.316, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.11030328531236228;  // std dev = 1.794, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.19695624176868207;  // std dev = 0.489, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.2924122103949954;  // std dev = 0.342, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.15544925786542624;  // std dev = 0.433, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(K, I), venue(K, A) )
%   | | | then return -0.16232102344466562;  // std dev = 0.000756, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.08655372505877758;  // std dev = 2.877, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.044048434482282996;  // std dev = 0.412, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.1417575641367307;  // std dev = 0.484, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.2611705337429389;  // std dev = 0.289, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.46932672951457743;  // std dev = 0.898, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1787982272929512;  // std dev = 0.022, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.06157746529789749;  // std dev = 0.437, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.0041440674469794495;  // std dev = 0.743, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.08861385757578948;  // std dev = 2.932, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.010090704147814183;  // std dev = 2.990, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.02506673236806207;  // std dev = 2.967, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.03119572881819696;  // std dev = 0.401, 61.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordtitle(F, C) )
%   | | then return 0.11373114745672819;  // std dev = 0.489, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.17201620694425787;  // std dev = 0.340, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, A) )
%   | | then return 0.10235776565429003;  // std dev = 0.383, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(J, H), venue(J, B) )
%   | | | then return -0.17933690461108479;  // std dev = 0.006, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.06805425417927208;  // std dev = 2.871, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return 0.06798327598097657;  // std dev = 4.101, 88.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=24 */
%   | | | else return -0.18741870067462596;  // std dev = 0.047, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 2.505987053798684E-4;  // std dev = 0.386, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return -0.4943817068055481;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.2169398707073332;  // std dev = 0.390, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | else if ( author(G, D), venue(G, A) )
%   | | then return -0.24012862655216424;  // std dev = 0.333, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else return 0.07814600431652033;  // std dev = 0.433, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordtitle(I, H) )
%   | | then return 0.08902304825223865;  // std dev = 0.485, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.14447577715291463;  // std dev = 0.340, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | | then return -0.17622705093982724;  // std dev = 0.083, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.08035931001992198;  // std dev = 4.046, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | else return -0.00842422212046884;  // std dev = 0.382, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then if ( haswordvenue(A, D) )
%   | | | then return 0.27550921727970823;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.03827848633452216;  // std dev = 2.280, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | else return 0.05921935078677684;  // std dev = 0.483, 783.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then return 0.08998375394320925;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.23516123591973823;  // std dev = 0.154, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.16193711325159793;  // std dev = 0.116, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return 0.062439254029406394;  // std dev = 0.436, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.06113307866662723;  // std dev = 0.434, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | else return -0.2230852944189773;  // std dev = 0.136, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordvenue(B, C) )
%   | then return 0.24124506357481618;  // std dev = 0.096, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( author(E, D), venue(E, B) )
%   | | then return 0.017030839999097276;  // std dev = 0.444, 41.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=19 */
%   | | else return -0.05362767396267054;  // std dev = 0.410, 64.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=17 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.3906195364629976;  // std dev = 1.254, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return -0.36175199529980717;  // std dev = 0.529, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( author(J, G), venue(J, B) )
%   | | | then return -0.2727358589685015;  // std dev = 0.783, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.06610288888331121;  // std dev = 2.855, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
%   | else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | | then return 0.0605588142075902;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | else return 0.003519706552709274;  // std dev = 0.391, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */


Results
   AUC ROC   = 0.548567
   AUC PR    = 0.397041
   CLL	      = -0.708766
   Precision = 0.371908 at threshold = 0.5
   Recall    = 0.926226
   F1        = 0.530717


Total learning time: 111.23316407203674 seconds
Total inference time: 27.26 seconds
AUC ROC: 0.548567


Results scoring model
   AUC ROC   = 0.691073
   AUC PR    = 0.691397
   CLL	      = -0.613048
   Precision = 0.63555 at threshold = 0.5
   Recall    = 0.903636
   F1        = 0.746246


Total scoring time: 2.48 seconds
Refined model CLL: -0.613048


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.548567
   AUC PR    = 0.397041
   CLL	      = -0.708766
   Precision = 0.371908 at threshold = 0.5
   Recall    = 0.926226
   F1        = 0.530717


Total learning time: 228.4460460243225 seconds
Total inference time: 27.26 seconds
AUC ROC: 0.548567
Total revision time: 228.4460460243225
Best scored revision CLL: -0.613048


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 01:15:41
{'AUC ROC': 0.548567, 'AUC PR': 0.397041, 'CLL': -0.708766, 'Precision': [0.371908, 0.5], 'Recall': 0.926226, 'F1': 0.530717, 'Learning time': 228.4460460243225, 'Inference time': 27.26, 'parameter': {'AUC ROC': 0.554599, 'AUC PR': 0.404095, 'CLL': -0.706126, 'Precision': [0.373747, 0.5], 'Recall': 0.937171, 'F1': 0.534381, 'Learning time': 112.50688195228577, 'Inference time': 28.86}}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.7291166770349955;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15083186192878065;  // std dev = 2.913, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.051131391239862906;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6157326050686436;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.6392119282680095;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15769426647032894;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.10912768446848489;  // std dev = 0.441, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.03693744759731563;  // std dev = 0.807, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1534329638272584;  // std dev = 2.940, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.03825072160333175;  // std dev = 2.992, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05181004363723003;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.6805851247859591;  // std dev = 0.056, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return 0.2449182844345499;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.047462026339214695;  // std dev = 1.980, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return 0.2648613043775699;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.037629930350312334;  // std dev = 1.967, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.3407976691556591;  // std dev = 0.485, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, B) )
%   | | then return 0.07237294497440858;  // std dev = 0.387, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.12003234656356136;  // std dev = 0.451, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else return 0.06249985935096421;  // std dev = 0.413, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2432501681379613;  // std dev = 0.489, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.4187148080064092;  // std dev = 0.330, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.5203210690872115;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14571359961048033;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, A) )
%   | | | then return -0.151678618222209;  // std dev = 0.001, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.09984136057583563;  // std dev = 2.886, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.012558348508987521;  // std dev = 0.812, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.11453566435708577;  // std dev = 2.937, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.030729652385685743;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.1875455090109357;  // std dev = 0.488, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.34524501529331086;  // std dev = 0.289, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then return 0.05614573413547955;  // std dev = 0.321, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(I, G), venue(I, B) )
%   | | | then return 0.10667780992709912;  // std dev = 0.927, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.083850136435863;  // std dev = 2.884, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.010665383184628174;  // std dev = 0.812, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.09550416363787345;  // std dev = 2.934, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.019312490355018804;  // std dev = 2.990, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.03422935566673862;  // std dev = 2.967, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.3914266212612564;  // std dev = 0.092, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return 0.09100816707827812;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.14805771273318086;  // std dev = 1.914, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return 0.11307968968992575;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.14049877767816657;  // std dev = 1.865, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.16349238358316243;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, B) )
%   | | then return 0.1233250973777749;  // std dev = 0.387, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.05540094891446952;  // std dev = 0.438, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.03669022653652003;  // std dev = 0.412, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return -0.4527000318612746;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.3054651574073612;  // std dev = 1.899, 24.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | else return 0.1046669370170625;  // std dev = 0.485, 783.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | else return 0.2601086626718699;  // std dev = 0.287, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.10058853448842209;  // std dev = 0.383, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(K, I), venue(K, A) )
%   | | | then return -0.14658664160238094;  // std dev = 0.001, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.059954498564011305;  // std dev = 2.882, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.050778233907249885;  // std dev = 0.426, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | else return 0.0022487091564258165;  // std dev = 0.388, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07827456688304059;  // std dev = 0.484, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.18375189158384805;  // std dev = 0.328, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.4588172129979558;  // std dev = 0.920, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.178292013326464;  // std dev = 0.059, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.026860917743584848;  // std dev = 0.433, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return -0.18780428812247876;  // std dev = 0.054, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.07873023547632214;  // std dev = 4.041, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.03751162911540566;  // std dev = 2.989, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | else return -0.20766609784519677;  // std dev = 0.108, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return -0.3625778874360789;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.17433799630919763;  // std dev = 0.385, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | else if ( author(G, D), venue(G, B) )
%   | | then return -0.21723052540279544;  // std dev = 0.309, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else if ( haswordvenue(A, C) )
%   | | | then return 0.14552438765773856;  // std dev = 0.016, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.06672305587400476;  // std dev = 3.101, 49.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=18 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordtitle(I, H) )
%   | | then return 0.06625748733328189;  // std dev = 0.487, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.1366347531843924;  // std dev = 0.339, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then return -0.0031892209711866333;  // std dev = 0.375, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | else return 0.03741419781157238;  // std dev = 0.424, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return -0.5153851862912157;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.18639197856529832;  // std dev = 0.379, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | else if ( author(G, D), venue(G, A) )
%   | | then return -0.21926732977788013;  // std dev = 0.318, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else return 0.06016801813285667;  // std dev = 0.428, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.04073470182727584;  // std dev = 0.417, 38.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=18 */
%   | | else if ( author(K, I), venue(K, B) )
%   | | | then return -0.25512228470794274;  // std dev = 0.709, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.05627152552483475;  // std dev = 2.909, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
%   | else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | | then return 0.059823198551592814;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | else return 0.007373219006355879;  // std dev = 0.392, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */


Results
   AUC ROC   = 0.548583
   AUC PR    = 0.397924
   CLL	      = -0.710702
   Precision = 0.372112 at threshold = 0.5
   Recall    = 0.927037
   F1        = 0.531058


Total learning time: 103.61582112312317 seconds
Total inference time: 26.016 seconds
AUC ROC: 0.548583


Dataset: 3_imdb_cora, Fold: 5, Type: Scratch (RDN-B), Time: 01:17:52
{'AUC ROC': 0.548583, 'AUC PR': 0.397924, 'CLL': -0.710702, 'Precision': [0.372112, 0.5], 'Recall': 0.927037, 'F1': 0.531058, 'Learning time': 103.61582112312317, 'Inference time': 26.016}


Starting fold 1

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos  examples: 2649
Target test neg examples: 4334

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.424815601766179;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.14762261931003867;  // std dev = 2.796, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14185106490048768;  // std dev = 4.47e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.3927941835770488;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.36488314649717124;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.1488242116562869;  // std dev = 2.789, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14162905569876189;  // std dev = 0.023, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.14806844971629635;  // std dev = 0.041, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.005199750239144775;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.3872849602520228;  // std dev = 0.802, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3330791005500561;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.29522800068063015;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.13163182934748544;  // std dev = 0.052, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004537659908616167;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.004568660166365276;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.3033243730905507;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.25787277272373643;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.23401067756039903;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.13092743543338106;  // std dev = 2.782, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.12516093221377275;  // std dev = 0.039, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.11821940546290599;  // std dev = 0.034, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.004012232942941115;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.23083852342937852;  // std dev = 0.799, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.20902399401218;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.1783428571959746;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.03893040780034435;  // std dev = 0.326, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return -0.0030091706663380145;  // std dev = 3.005, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.12473026951901699;  // std dev = 0.063, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.007739639078816348;  // std dev = 2.792, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.17359177474533993;  // std dev = 0.798, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.15418963305351077;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.13594844085891153;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.1142749441330999;  // std dev = 2.773, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.11216074159314837;  // std dev = 0.049, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.10632734674294707;  // std dev = 0.031, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.004061311373428011;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.1416802390982562;  // std dev = 0.792, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.11585059145022317;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10123582441963615;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.04392331050024202;  // std dev = 0.324, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | | then return -0.10661329381993322;  // std dev = 0.094, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0035653311900344063;  // std dev = 2.996, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.005747517476278812;  // std dev = 2.745, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.08689625781594112;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.09925080414456011;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07514038804169797;  // std dev = 2.610, 28.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.0969461736065214;  // std dev = 0.087, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 4.694938126645213E-4;  // std dev = 0.334, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.003128741139301629;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.0882917637156031;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.05752515367117277;  // std dev = 0.495, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( haswordtitle(H, I), haswordvenue(A, I) )
%   | | then return -0.08883821944385327;  // std dev = 0.080, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 4.119276865748304E-4;  // std dev = 0.334, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then return 0.0027447029273934514;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03554750876544446;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.06749958959307545;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.05094620145488329;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.04184505351424406;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.0819476522061309;  // std dev = 0.075, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 3.6140474061255757E-4;  // std dev = 0.334, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.002407101991258411;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.557672
   AUC PR    = 0.42849
   CLL	      = -0.652302
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 134.60861587524414 seconds
Total inference time: 18.359 seconds
AUC ROC: 0.557672


Results scoring model
   AUC ROC   = 0.591811
   AUC PR    = 0.419735
   CLL	      = -0.616698
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total scoring time: 2.095 seconds
Parameter learned model CLL: -0.616698


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, A)', 'false,true,true': 'samebib(K, L), venue(L, B)', 'false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.816, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.714, 13, 17], 'false,true,true,true': [2.796, 27, 11], 'false,true,true,false': [4.47e-08, 42, 0], 'false,true,false': [0.0, 7, 0], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, B)', 'false,true,true': 'samebib(K, L), venue(L, A)', 'false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.816, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.714, 13, 17], 'false,true,true,true': [2.789, 27, 11], 'false,true,true,false': [0.023, 42, 0], 'false,true,false': [0.041, 7, 0], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.802, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.716, 13, 17], 'false,true,true': [0.052, 12, 0], 'false,true,false': [0.346, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, B)', 'false,true,true': 'samebib(K, L), venue(L, A)', 'false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.8, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.716, 13, 17], 'false,true,true,true': [2.782, 27, 11], 'false,true,true,false': [0.039, 42, 0], 'false,true,false': [0.034, 7, 0], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false,true': 'title(M, L), venue(M, A)', 'false,false,false': 'haswordvenue(B, N), haswordtitle(P, N)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.799, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.716, 13, 17], 'false,true': [0.326, 7, 1], 'false,false,true,true': [3.005, 69, 11], 'false,false,true,false': [0.063, 7, 0], 'false,false,false,true': [2.792, 57, 10], 'false,false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, B)', 'false,true,true': 'samebib(K, L), venue(L, A)', 'false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.798, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.716, 13, 17], 'false,true,true,true': [2.773, 27, 11], 'false,true,true,false': [0.049, 42, 0], 'false,true,false': [0.031, 7, 0], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false,true': 'haswordtitle(L, M), haswordvenue(B, M)', 'false,false,false': 'haswordvenue(B, N), haswordtitle(P, N)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.792, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.718, 13, 17], 'false,true': [0.324, 7, 1], 'false,false,true,true': [0.094, 12, 0], 'false,false,true,false': [2.996, 64, 11], 'false,false,false,true': [2.745, 57, 10], 'false,false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [1.095, 2, 3], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.61, 12, 16], 'false,true,true': [0.087, 12, 0], 'false,true,false': [0.334, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false,true': 'haswordtitle(H, I), haswordvenue(A, I)', 'false,false': 'haswordvenue(A, J), haswordtitle(K, J)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.793, 1, 2], 'true,false,false': [0.495, 15, 20], 'false,true,true': [0.08, 12, 0], 'false,true,false': [0.334, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.793, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true,true': [0.075, 12, 0], 'false,true,false': [0.334, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}]]
[{'': [0.23762656230272572, 0.11496588764697444], 'true': [0.2356675262844691, 0.24376731301939172], 'true,false': [0.22222222222222224, 0.2448979591836734], 'true,false,false': [0.23999999999999994, 0.2455555555555551], 'false': [0.1104505218655035, 0.11985258772632539], 'false,false': [0.12515555555555502, 0.0], 'false,true': [0.11859374999999946, -7.93016446160826e-18], 'false,true,true': [0.20567867036011028, 4.7580986769649563e-17]}, {'': [0.23716066162823085, 0.11237704672357923], 'true': [0.2356675262844735, 0.243529026415323], 'true,false': [0.2222222222222222, 0.24485729569956294], 'true,false,false': [0.24, 0.2455555555555557], 'false': [0.11031023146367078, 0.11455237397192931], 'false,false': [0.119797633597279, 0.0], 'false,true': [0.11826329058716308, 0.00024321571925047962], 'false,true,true': [0.20467024545790047, 1.309676795721185e-05]}, {'': [0.23670841319763664, 0.10975036390863203], 'true': [0.23566752628446727, 0.24329127189035757], 'true,false': [0.21422556099951198, 0.24518986878758606], 'true,false,false': [0.24000000000000005, 0.2458501746672324], 'false': [0.10547561302850386, 0.11437085679211725], 'false,false': [0.11977888330495866, 0.0], 'false,true': [0.0002256360669041594, 0.11975807419694352]}, {'': [0.23636684662342017, 0.1094277341548289], 'true': [0.23566752628446358, 0.24295013308562105], 'true,false': [0.21313045709187692, 0.2451632016875298], 'true,false,false': [0.24, 0.24594239250417746], 'false': [0.1050009000095223, 0.11423459197528411], 'false,false': [0.11976238615698556, 0.0], 'false,true': [0.11311538125088463, 0.00016632303637394746], 'false,true,true': [0.2036679156215219, 3.5803051702236e-05]}, {'': [0.23616184966382453, 0.10741508363363879], 'true': [0.235667526284474, 0.24275613642121133], 'true,false': [0.21262533174295772, 0.24515602734025604], 'true,false,false': [0.24, 0.24588088920796522], 'false': [0.10601043222610147, 0.10743430648505062], 'false,false': [0.10496553653841177, 0.11033742908733658], 'false,false,false': [0.11635649216029414, 0.0], 'false,false,true': [0.11290785130091012, 0.0005722930995040078]}, {'': [0.23605415667755997, 0.10722401680074543], 'true': [0.23566752628446164, 0.24263115501054558], 'true,false': [0.21250636504778633, 0.24511636227087383], 'true,false,false': [0.24000000000000005, 0.24592155487420797], 'false': [0.10096473579386207, 0.11403745873839469], 'false,false': [0.11971617250139661, 0.0], 'false,true': [0.10895435556102577, 0.00013968587927822812], 'false,true,true': [0.20239494839855326, 5.8134912362968936e-05]}, {'': [0.23600326548233072, 0.10563150609007116], 'true': [0.23566752628447166, 0.2425834083306444], 'true,false': [0.2092055340601188, 0.24532821939878968], 'true,false,false': [0.24, 0.24618574290591771], 'false': [0.10517734737888838, 0.10558505244013813], 'false,false': [0.10473687184831895, 0.10653671352070816], 'false,false,false': [0.11249461559032671, 0.0], 'false,false,true': [0.0007437753387055055, 0.11970137702653477]}, {'': [0.23597915352254362, 0.10542045002977674], 'true': [0.23566752628446394, 0.24254069569291664], 'true,false': [0.24000000000000005, 0.2429170107718619], 'true,false,false': [0.24, 0.24334982795184645], 'false': [0.09764165279810555, 0.11390859827610748], 'false,false': [0.11968837488107566, 0.0], 'false,true': [0.0006280921138239332, 0.1118548828856974]}, {'': [0.23596823235115275, 0.10528759953451153], 'true': [0.23566752628446355, 0.24251924038218908], 'true,false': [0.20952881292956171, 0.24527226096772956], 'false': [0.09744469324548247, 0.11386085213501351], 'false,false': [0.11967695455383343, 0.0], 'false,true': [0.0005367242753672972, 0.1118512663823832]}, {'': [0.23596314985963057, 0.10518239702512568], 'true': [0.23566752628447613, 0.24250457311194834], 'true,false': [0.20958665556661238, 0.2452792824194617], 'true,false,false': [0.24, 0.2461473298378714], 'false': [0.09729025908272232, 0.11382105027236605], 'false,false': [0.11966692810535906, 0.0], 'false,true': [0.00046346727040217847, 0.11184809324090562]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
0;false,true;title(K, J), venue(K, A).;true;true
0;false,true,true;samebib(K, L), venue(L, B).;true;true
0;false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
1;false,true;title(K, J), venue(K, B).;true;true
1;false,true,true;samebib(K, L), venue(L, A).;true;true
1;false,false;haswordvenue(A, M), haswordtitle(N, M).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
2;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
2;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true;title(K, J), venue(K, B).;true;true
3;false,true,true;samebib(K, L), venue(L, A).;true;true
3;false,false;haswordvenue(A, M), haswordtitle(N, M).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(A, I), haswordauthor(J, I).;true;true
4;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;true
4;false,false,true;title(M, L), venue(M, A).;true;true
4;false,false,false;haswordvenue(B, N), haswordtitle(P, N).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false,true;title(K, J), venue(K, B).;true;true
5;false,true,true;samebib(K, L), venue(L, A).;true;true
5;false,false;haswordvenue(A, M), haswordtitle(N, M).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(A, I), haswordauthor(J, I).;true;true
6;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;true
6;false,false,true;haswordtitle(L, M), haswordvenue(B, M).;true;true
6;false,false,false;haswordvenue(B, N), haswordtitle(P, N).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
7;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
7;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(B, G), haswordtitle(H, G).;true;true
8;false,true;haswordtitle(H, I), haswordvenue(A, I).;true;true
8;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
9;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
9;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.424815601766179;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.45935396641210174;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.3927941835770488;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.3637773104801572;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.37391135762433364;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.32092546969114216;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.2986282670629944;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.29107789104287257;  // std dev = 0.807, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2710148865976653;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.233027315710961;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.15046437198207863;  // std dev = 2.779, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.1414196724610361;  // std dev = 0.058, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.10756983093381625;  // std dev = 0.039, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.24175509705405238;  // std dev = 0.795, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.20867926057410338;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.17730575147799144;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.09971987173961457;  // std dev = 0.040, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0028554031467501392;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0033952271144695595;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.15800877855012233;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.18205869370085334;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.13446182317589894;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.09112998399939415;  // std dev = 0.037, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.002503460836945874;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0029790656544216297;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.13671663036834325;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.1187601629369405;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.1012433079842365;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.08386757148943062;  // std dev = 0.035, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0021943081594878503;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0026130881676001403;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.10602634227792751;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.09552342293915564;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07462918163275788;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.07765210197884008;  // std dev = 0.032, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0019228798175884457;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0022914346332885706;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.08228009469158377;  // std dev = 0.792, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.07167281351370561;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.05578738393727586;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.030373978903574867;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.07227583966072154;  // std dev = 0.030, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0016846780662751325;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.00587549523499502;  // std dev = 2.847, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03554750876544446;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.06251489638882764;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.053855922405183373;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.04187731738066227;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.026436771130127202;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.067581938772225;  // std dev = 0.028, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0014757167188846957;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.005154233929447075;  // std dev = 2.847, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.556906
   AUC PR    = 0.42829
   CLL	      = -0.657548
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 121.73297691345215 seconds
Total inference time: 15.799 seconds
AUC ROC: 0.556906


Results scoring model
   AUC ROC   = 0.59092
   AUC PR    = 0.419493
   CLL	      = -0.620306
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total scoring time: 2.169 seconds
Refined model CLL: -0.620306


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.557672
   AUC PR    = 0.42849
   CLL	      = -0.652302
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 260.6055927886963 seconds
Total inference time: 18.359 seconds
AUC ROC: 0.557672
Total revision time: 260.6055927886963
Best scored revision CLL: -0.616698


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 01:22:50
{'AUC ROC': 0.557672, 'AUC PR': 0.42849, 'CLL': -0.652302, 'Precision': [0.637427, 0.5], 'Recall': 0.041148, 'F1': 0.077305, 'Learning time': 260.6055927886963, 'Inference time': 18.359, 'parameter': {'AUC ROC': 0.557672, 'AUC PR': 0.42849, 'CLL': -0.652302, 'Precision': [0.637427, 0.5], 'Recall': 0.041148, 'F1': 0.077305, 'Learning time': 134.60861587524414, 'Inference time': 18.359}}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.424815601766179;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.14762261931003867;  // std dev = 2.796, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14185106490048768;  // std dev = 4.47e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.3982164798305049;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.45935396641210174;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.36287359443791467;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.1488242116562869;  // std dev = 2.789, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14162905569876189;  // std dev = 0.023, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.14806844971629635;  // std dev = 0.041, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.005199750239144775;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.37391135762433364;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.3269052770205085;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.2976445171077738;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.13163182934748544;  // std dev = 0.052, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004537659908616167;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.004568660166365276;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.3022417434729106;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.23750756546319976;  // std dev = 0.495, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( haswordtitle(H, I), haswordvenue(A, I) )
%   | | then return -0.11732682046812498;  // std dev = 0.047, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.003984925344895743;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then return 0.004012232942941115;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.2286346176368873;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.20869162291833102;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.17862093277843283;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.13175572734445512;  // std dev = 2.777, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.12510806231058444;  // std dev = 0.053, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.10836942012654154;  // std dev = 0.036, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.0035220811797056885;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.15871379590376924;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.13868170084288167;  // std dev = 0.493, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( haswordtitle(H, I), haswordvenue(A, I) )
%   | | then return -0.1039420966236445;  // std dev = 0.070, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0022024890910203663;  // std dev = 0.340, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then return 0.0030906559935836614;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.13729756721557132;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.123593094293771;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10037568322802905;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.09468971368622553;  // std dev = 0.065, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0019325747059921392;  // std dev = 0.340, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.002711187991890718;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.11906224567338146;  // std dev = 0.792, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.09271287046080526;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07377374704191965;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.04013320373915734;  // std dev = 0.326, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return -0.0021549417734195767;  // std dev = 3.000, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.09888197720036969;  // std dev = 0.058, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.006689856225619512;  // std dev = 2.791, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.0817235867851898;  // std dev = 0.797, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.07578906619665049;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.055132784334245774;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.08280028899610543;  // std dev = 0.052, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0015485948953145993;  // std dev = 0.340, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0027814261963656412;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return -0.14473418137539884;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.06207544333896927;  // std dev = 0.797, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.03661174542507164;  // std dev = 0.486, 847.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=323 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.05692985647386384;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.04138227859385319;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return -0.07674232068924478;  // std dev = 0.049, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0013581199912681779;  // std dev = 0.340, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.002439370551316322;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.557262
   AUC PR    = 0.428371
   CLL	      = -0.654169
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 130.22997999191284 seconds
Total inference time: 16.895 seconds
AUC ROC: 0.557262


Dataset: 3_imdb_cora, Fold: 1, Type: Scratch (RDN-B), Time: 01:25:18
{'AUC ROC': 0.557262, 'AUC PR': 0.428371, 'CLL': -0.654169, 'Precision': [0.637427, 0.5], 'Recall': 0.041148, 'F1': 0.077305, 'Learning time': 130.22997999191284, 'Inference time': 16.895}


Starting fold 2

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos  examples: 2246
Target test neg examples: 4478

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.5111302802881205;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4752970037545024;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.30665618885999163;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.409793436360072;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.3806244130422625;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.5145754588862081;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.16457545888620817;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.10459348710461978;  // std dev = 0.412, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( haswordtitle(H, F) )
%   | | then return 0.506680722044103;  // std dev = 0.365, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | else if ( author(I, G), venue(I, B) )
%   | | | then return -0.06605466959315473;  // std dev = 0.846, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.13542454111379182;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, J), haswordvenue(B, J) )
%   | | then if ( haswordtitle(K, J) )
%   | | | then return 0.2378402403772003;  // std dev = 16.896, 1,167.000 (wgt'ed) examples reached here.  /* #neg=498 #pos=669 */
%   | | | else return 0.31769208299621304;  // std dev = 2.696, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else return 0.29660217939899747;  // std dev = 0.390, 46.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=32 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.39405442167886573;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.1269550565727362;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.05202391583842798;  // std dev = 0.847, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.10593861001878171;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.18449116426523926;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.23536568659130888;  // std dev = 1.917, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.24307274340776505;  // std dev = 1.896, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.26696589922307024;  // std dev = 0.328, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.11566944880111066;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.2958684139663464;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.09681722057449814;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.04356089641366901;  // std dev = 1.220, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return 0.33827653538106006;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.10346251553127364;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordtitle(J, C) )
%   | | | then return 0.1382501106315979;  // std dev = 16.896, 1,167.000 (wgt'ed) examples reached here.  /* #neg=498 #pos=669 */
%   | | | else return 0.18085140821028922;  // std dev = 2.698, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then return 0.2076421155816105;  // std dev = 0.329, 34.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=26 */
%   | else return 0.059635969278386;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10610982591261656;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.1328532105508968;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.10899107107488315;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.25452832380837287;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.2489539593981478;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.045729718284880025;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.04252655563142923;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.2351149711869902;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.04718265869875804;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.10406773123837595;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.07845392540908003;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.10155560653557073;  // std dev = 1.917, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.1117561243328542;  // std dev = 1.895, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.20535538309293327;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.03493506404463862;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.03242313604972563;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.059902440381114516;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.0783644483806979;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.05719463935664471;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.19140764731953563;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.17386079749068792;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.026618331930274425;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.024659826271150497;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.16749613808886218;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.02054062094982334;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.08684127908244132;  // std dev = 1.220, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.04395221873211419;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.07309582284809812;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.0608992352138406;  // std dev = 1.897, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.15028479434295244;  // std dev = 1.97e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.020243695504434254;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.01872288149139575;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.537027
   AUC PR    = 0.345116
   CLL	      = -0.757084
   Precision = 0.353871 at threshold = 0.5
   Recall    = 0.956367
   F1        = 0.516595


Total learning time: 119.68462991714478 seconds
Total inference time: 14.778 seconds
AUC ROC: 0.537027


Results scoring model
   AUC ROC   = 0.55391
   AUC PR    = 0.663881
   CLL	      = -0.664204
   Precision = 0.594317 at threshold = 0.5
   Recall    = 0.976654
   F1        = 0.73896


Total scoring time: 2.234 seconds
Parameter learned model CLL: -0.664204


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [7.3e-08, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'haswordvenue(A, C)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,true': 'haswordtitle(H, F)', 'false,true,false': 'author(I, G), venue(I, B)', 'false,false': 'haswordvenue(A, J), haswordvenue(B, J)', 'false,false,true': 'haswordtitle(K, J)'}, {'true,true': [0.357, 3, 17], 'true,false,true': [1.0, 2, 2], 'true,false,false': [0.412, 7, 2], 'false,true,true': [0.365, 3, 16], 'false,true,false,true': [0.846, 3, 1], 'false,true,false,false': [0.894, 4, 1], 'false,false,true,true': [16.896, 498, 669], 'false,false,true,false': [2.696, 10, 31], 'false,false,false': [0.39, 14, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'haswordvenue(B, C)', 'true,false,false': 'author(F, D), venue(F, B)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)'}, {'true,true': [0.357, 3, 17], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.847, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.493, 507, 687], 'false,true,false,true': [1.917, 5, 14], 'false,true,false,false': [1.896, 5, 17], 'false,false,true': [0.328, 7, 26], 'false,false,false': [0.49, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,false': 'haswordvenue(B, D)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'true,false,true': 'haswordtitle(I, G)', 'true,false,false': 'haswordtitle(J, C)', 'false': 'haswordvenue(B, K), haswordtitle(L, K)'}, {'true,true,true': [0.357, 3, 17], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.22, 6, 2], 'true,false,true,true': [1.589, 3, 16], 'true,false,true,false': [1.225, 6, 2], 'true,false,false,true': [16.896, 498, 669], 'true,false,false,false': [2.698, 10, 31], 'false,true': [0.329, 8, 26], 'false,false': [0.487, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.491, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [1.49e-08, 0, 20], 'false,true,false': [0.487, 8, 6], 'false,false': [0.49, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,false': 'haswordvenue(A, D)', 'true,false': 'haswordtitle(G, C)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true,true': [0.356, 3, 17], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false,true': [0.493, 507, 687], 'true,false,false,true': [1.917, 5, 14], 'true,false,false,false': [1.895, 5, 17], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.487, 8, 6], 'false,false': [0.49, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.491, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.487, 8, 6], 'false,false': [0.49, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,false': 'haswordvenue(B, D)', 'true,false': 'haswordtitle(G, C)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true,true': [0.356, 3, 17], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.22, 6, 2], 'true,false,true': [0.493, 507, 687], 'true,false,false,true': [1.914, 5, 14], 'true,false,false,false': [1.897, 5, 17], 'false,true,true': [1.97e-08, 0, 20], 'false,true,false': [0.487, 8, 6], 'false,false': [0.49, 8, 6]}]]
[{'': [0.24306651325713594, 0.22222222222222385], 'true': [0.24399564626142126, 0.1844140392623454], 'false': [0.17993079584775207, 0.24489795918367352], 'true,false': [0.19390581717451486, 0.17561983471074338], 'false,true': [-8.881784197001253e-17, 0.24489795918367352], 'true,false,false': [0.20761245674740453, 0.0]}, {'': [0.24265720194658633, 0.1968581969586748], 'true': [0.2439956462613994, 0.18151807630785097], 'false': [0.15465453537750254, 0.24489795918367324], 'true,false': [0.1936068452327829, 0.1708986340733433], 'true,false,false': [0.2076124567474047, 0.0], 'false,true': [2.6645352591003756e-16, 0.24489795918367324]}, {'': [0.24225245960051184, 0.1721032613752618], 'true': [0.2439956462614137, 0.17867347599010966], 'true,false': [0.19353114744777358, 0.16579031959839755], 'false': [0.12998525701064176, 0.2448979591836735], 'true,false,false': [0.2076124567474049, -4.4408920985006264e-17], 'false,true': [-2.6645352591003756e-16, 0.2448979591836735]}, {'': [0.22859316790538875, 0.23914442831937843], 'false': [0.22624084363730315, 0.2393327592886062], 'false,false': [0.2425539840284099, 0.1517140488100338], 'false,false,true': [0.24463227179306954, 0.177238915608972], 'true': [0.12749999999999995, 0.20977633704439644], 'false,true': [0.13296398891966757, 0.16960625458986087], 'true,false': [0.25, 0.16960625458986087], 'false,true,false': [0.17894064000785942, 0.16]}, {'': [0.1978501960684961, 0.23819130637081642], 'false': [0.24141880663386242, 0.15216396103607524], 'false,true': [0.2435190002843818, 0.1773314293885755], 'true': [0.12747079778426693, 0.20337869466995812], 'true,false': [0.24999999999999994, 0.16922660521800612], 'false,true,false': [0.19348269654810465, 0.16335508151249128], 'true,false,false': [0.17914497604686877, 0.15999999999999998], 'false,false': [0.1079057733095149, 0.24041469753051808]}, {'': [0.2398407713696171, 0.15068006037161488], 'true': [0.179144401852866, 0.24136243157068685], 'true,false': [0.18980905549949348, 0.24241451442611633], 'true,false,false': [0.24463227179307953, 0.17753629380470964], 'true,false,true': [0.13296398891966765, 0.18749999999999997], 'true,true': [0.1274709336972873, 0.21174423476603968], 'true,true,false': [0.25000000000000006, 0.18604768023934504], 'false': [0.10854468889076307, 0.23749219764725327]}, {'': [0.2391659186475422, 0.14939797342454228], 'true': [0.24118657060844426, 0.17777187579273415], 'true,false': [0.1935017614100266, 0.16414762735093474], 'true,false,false': [0.2076124567474048, 0.0], 'false': [0.10773876613610882, 0.23989802777643035], 'false,true': [1.1102230246251566e-17, 0.23735711731942036]}, {'': [0.23914002871017795, 0.1463187253733698], 'true': [0.17894313416053123, 0.24064298066979406], 'true,false': [0.2427913698100215, 0.17728826663067085], 'true,true': [0.12698913496825265, 0.21341704010136334], 'true,true,false': [0.25, 0.18749999999999992], 'true,false,false': [0.1935145513925629, 0.1632264385098426], 'false': [0.10472943419394458, 0.2398416807068679], 'false,true': [-5.551115123125783e-18, 0.23725874388179347]}, {'': [0.23890315978833412, 0.14446181289559085], 'true': [0.24093927995321493, 0.17748518323250315], 'true,false': [0.1935261307848375, 0.16359127066441612], 'true,false,false': [0.20761245674740483, 0.0], 'false': [0.10291644720065411, 0.23980086163620662], 'false,true': [-4.4408920985006264e-17, 0.23718679986964192]}, {'': [0.23889671153391767, 0.1432560795756125], 'true': [0.169290801494304, 0.24065814026522112], 'true,false': [0.2428223812309096, 0.1771374564449675], 'true,false,false': [0.19281951938063235, 0.16352492058205237], 'true,true': [0.12703724931776147, 0.20986261360910086], 'true,true,false': [0.24999999999999997, 0.18595029626213808], 'false': [0.10173939190061597, 0.2397710995271932], 'false,true': [1.9428902930940238e-17, 0.2371339171611677]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
0;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
0;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
1;true,false,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
1;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
1;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
2;true,false,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
2;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
2;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
6;true,false,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
6;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(A, J), haswordtitle(K, J).;true;true
7;false,true;haswordtitle(K, L), haswordvenue(B, L).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
8;true,false,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
8;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
8;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(A, J), haswordtitle(K, J).;true;true
9;false,true;haswordtitle(K, L), haswordvenue(B, L).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.30665618885999163;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.4047531668618019;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.386198448632422;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.5145754588862081;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.16457545888620817;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.06605466959315473;  // std dev = 0.846, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.13542454111379182;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.2399523433083081;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.3261448737160187;  // std dev = 1.915, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.3103700402108464;  // std dev = 1.898, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.33324199902303153;  // std dev = 0.330, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.18613466623308167;  // std dev = 0.493, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.23233438181079052;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2166010869669191;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.344487667745488;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.33934134460665244;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.10772948932183567;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.4106469819165701;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.08249918443180637;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.15719122169857674;  // std dev = 0.838, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.23593793606157423;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.13890927572250147;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.1911614910571029;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.17295932626034205;  // std dev = 1.895, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.2177145969660308;  // std dev = 0.319, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.0838666172649487;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10613111442220031;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.13210812811573677;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.1156608645974372;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.23852089461257964;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.2273585653490687;  // std dev = 3.33e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.06472566799214809;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.06433615139035495;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.2816110187138011;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.0360401355877914;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1605026778378503;  // std dev = 1.222, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.0780294370809232;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.11633754707315101;  // std dev = 1.913, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.09974712707573836;  // std dev = 1.895, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.18990227512303268;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.04965004327313348;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.04934177305844981;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.2610160347116305;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.02706622910544887;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.15982112458726622;  // std dev = 0.835, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.22325099799981435;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.05814569018079303;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.07785042992104291;  // std dev = 1.916, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.08858197802125281;  // std dev = 1.894, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.12384569526237109;  // std dev = 0.317, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.03792398425604247;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.19973644954502956;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.020314966331254528;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1325280521525984;  // std dev = 1.219, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.043665626596992205;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.060579161422581476;  // std dev = 1.916, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.07019584152964425;  // std dev = 1.896, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.14624096833854588;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.028880971010355173;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.012205068374889145;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.537026
   AUC PR    = 0.345471
   CLL	      = -0.756656
   Precision = 0.353871 at threshold = 0.5
   Recall    = 0.956367
   F1        = 0.516595


Total learning time: 132.60113906860352 seconds
Total inference time: 13.855 seconds
AUC ROC: 0.537026


Results scoring model
   AUC ROC   = 0.553719
   AUC PR    = 0.662697
   CLL	      = -0.664913
   Precision = 0.594317 at threshold = 0.5
   Recall    = 0.976654
   F1        = 0.73896


Total scoring time: 2.211 seconds
Refined model CLL: -0.664913


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.537027
   AUC PR    = 0.345116
   CLL	      = -0.757084
   Precision = 0.353871 at threshold = 0.5
   Recall    = 0.956367
   F1        = 0.516595


Total learning time: 256.7307689857483 seconds
Total inference time: 14.778 seconds
AUC ROC: 0.537027
Total revision time: 256.7307689857483
Best scored revision CLL: -0.664204


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 01:30:07
{'AUC ROC': 0.537027, 'AUC PR': 0.345116, 'CLL': -0.757084, 'Precision': [0.353871, 0.5], 'Recall': 0.956367, 'F1': 0.516595, 'Learning time': 256.7307689857483, 'Inference time': 14.778, 'parameter': {'AUC ROC': 0.537027, 'AUC PR': 0.345116, 'CLL': -0.757084, 'Precision': [0.353871, 0.5], 'Recall': 0.956367, 'F1': 0.516595, 'Learning time': 119.68462991714478, 'Inference time': 14.778}}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.5791684237702857;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.22916842377028543;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.008145345695425868;  // std dev = 0.852, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.07083157622971455;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.3045453081923796;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.4047531668618019;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.4246457186582997;  // std dev = 1.908, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.4317030979309822;  // std dev = 0.348, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.5118627986468953;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.18162271221626702;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.06570188218847453;  // std dev = 0.846, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.13495415790755155;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.23990098036198007;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.3098169854894562;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.32456036871644;  // std dev = 1.905, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.35163309306853874;  // std dev = 0.335, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.1316730160126654;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.38996419756864076;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.140979150293288;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.051753014992353755;  // std dev = 0.847, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.10559037743805288;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( haswordtitle(I, G) )
%   | | then return 0.3848353288706123;  // std dev = 0.365, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | else return -0.08069287877868973;  // std dev = 0.411, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, J), haswordvenue(B, J) )
%   | | then if ( haswordtitle(K, J) )
%   | | | then return 0.18294335346616894;  // std dev = 16.896, 1,167.000 (wgt'ed) examples reached here.  /* #neg=498 #pos=669 */
%   | | | else return 0.23918854692617394;  // std dev = 2.705, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else return 0.23171880603744427;  // std dev = 0.392, 46.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=32 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14101232049455645;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.17343372118798814;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.14785257782283778;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.3173413422526029;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.3115940809662359;  // std dev = 3.65e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.05529328944369205;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.055190452513902886;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.25846435280733066;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.0738618246513395;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.07330727440631805;  // std dev = 1.220, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.10493792482710948;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.13134096007501314;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.1438327608007857;  // std dev = 1.899, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.248940413792584;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.042352186007857076;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.042282960040020044;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.23231590909384797;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.05570854258444291;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.07817030701020647;  // std dev = 0.839, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.14162054725195133;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.07846314767398295;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.10044019791780556;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.11148032033154602;  // std dev = 1.901, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.14557654301314962;  // std dev = 0.322, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.0323304323996107;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05996210499679187;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.07753198976522972;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.051957734575528186;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.20772863042695722;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.18260630185197715;  // std dev = 2.58e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.024621439784409085;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 2.652669734141827E-4;  // std dev = 0.485, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.16615475336938137;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.026996849836396594;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.08407181152162915;  // std dev = 1.220, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return 0.16208462927483208;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.08770288953485497;  // std dev = 1.220, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordtitle(J, C) )
%   | | | then return 0.04296257777737516;  // std dev = 16.896, 1,167.000 (wgt'ed) examples reached here.  /* #neg=498 #pos=669 */
%   | | | else return 0.06608462351265272;  // std dev = 2.699, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then return 0.10000831158237522;  // std dev = 0.320, 34.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=26 */
%   | else return 2.011074208293634E-4;  // std dev = 0.485, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.536504
   AUC PR    = 0.344786
   CLL	      = -0.756855
   Precision = 0.35357 at threshold = 0.5
   Recall    = 0.956812
   F1        = 0.516338


Total learning time: 116.6016800403595 seconds
Total inference time: 13.057 seconds
AUC ROC: 0.536504


Dataset: 3_imdb_cora, Fold: 2, Type: Scratch (RDN-B), Time: 01:32:18
{'AUC ROC': 0.536504, 'AUC PR': 0.344786, 'CLL': -0.756855, 'Precision': [0.35357, 0.5], 'Recall': 0.956812, 'F1': 0.516338, 'Learning time': 116.6016800403595, 'Inference time': 13.057}


Starting fold 3

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos  examples: 2436
Target test neg examples: 2800

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22639217834275063;  // std dev = 0.482, 1,480.000 (wgt'ed) examples reached here.  /* #neg=935 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5854216623722396;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.14185106490048766;  // std dev = 7.88e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | else return 0.058148935099512175;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.024815601766178853;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | | else return 0.011995088945666216;  // std dev = 3.679, 104.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18357763660548512;  // std dev = 0.479, 1,534.000 (wgt'ed) examples reached here.  /* #neg=989 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.49838075774401863;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.12544463852839152;  // std dev = 0.000, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.1254446385283914;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.05092203251355425;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.010876964885395938;  // std dev = 3.677, 104.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=16 */
%   | | | else return -0.04807940619653591;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else return -0.14005918506130915;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.15891395875758912;  // std dev = 0.480, 1,521.000 (wgt'ed) examples reached here.  /* #neg=976 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5824697223403184;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.1446041162715101;  // std dev = 0.019, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.13751505196464753;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0.0847071702575747;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.012311840045715472;  // std dev = 2.940, 92.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=16 */
%   | | | else return -0.05658527974657243;  // std dev = 1.332, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | | else return -0.12159918086295896;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12722191655632278;  // std dev = 0.478, 1,543.000 (wgt'ed) examples reached here.  /* #neg=998 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5673436404274523;  // std dev = 1.788, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.12691697940500044;  // std dev = 0.032, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.12200280429103313;  // std dev = 9.13e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0.052126416274856965;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.007064937780922482;  // std dev = 2.955, 93.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=16 */
%   | | | else return -0.021086218655750704;  // std dev = 1.312, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else return -0.11441196048256025;  // std dev = 0.001, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.1081319277209588;  // std dev = 0.479, 42.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
%   | | else return 9.89070578101374E-4;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.10963313837471059;  // std dev = 0.480, 1,475.000 (wgt'ed) examples reached here.  /* #neg=946 #pos=529 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.39475525382782256;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.11426283122219606;  // std dev = 2.36e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else if ( title(K, H), venue(K, A) )
%   | | | then return -0.1048024564611106;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0.008129700908574445;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else return -0.005992945399369497;  // std dev = 0.306, 111.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=18 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09113237077204635;  // std dev = 0.480, 1,509.000 (wgt'ed) examples reached here.  /* #neg=964 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.495038029144497;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.11338527634557242;  // std dev = 0.021, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.10894188072840473;  // std dev = 3.73e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.028036530783151773;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return -0.015486527848995442;  // std dev = 2.706, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
%   | | | else return 0.035086800327431326;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else return -0.10266828460751588;  // std dev = 0.001, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.22263350017245287;  // std dev = 1.216, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.011812207827013883;  // std dev = 0.447, 47.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=13 */
%   | else return 0.0717087226247638;  // std dev = 0.480, 1,469.000 (wgt'ed) examples reached here.  /* #neg=940 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return 0.015791802421931848;  // std dev = 0.252, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return -0.014302822401441498;  // std dev = 2.531, 95.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=16 */
%   | | | else return 0.02435253867289223;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return -0.09995480461386502;  // std dev = 0.006, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.011355717723105665;  // std dev = 2.778, 111.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=16 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05446911534268599;  // std dev = 0.479, 1,525.000 (wgt'ed) examples reached here.  /* #neg=980 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.04678652409424292;  // std dev = 0.229, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 0.02148074220477269;  // std dev = 2.607, 76.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=16 */
%   | | | else return -0.05257424255125972;  // std dev = 1.334, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return -0.009266138080821685;  // std dev = 2.715, 94.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=16 */
%   | | | else return -0.09244903663160801;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.07656560174172448;  // std dev = 0.488, 38.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=15 */
%   | | else return -0.07417071042485172;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.07418780833113851;  // std dev = 0.483, 35.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=13 */
%   | | else return 0.045106345243297985;  // std dev = 0.480, 1,433.000 (wgt'ed) examples reached here.  /* #neg=917 #pos=516 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.027816600285391783;  // std dev = 0.252, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then return 0.010990112574328562;  // std dev = 0.250, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return -0.008796568335265096;  // std dev = 2.691, 98.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=16 */
%   | | | else return -0.01297104148243389;  // std dev = 2.847, 103.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=16 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03959518938285452;  // std dev = 0.481, 1,496.000 (wgt'ed) examples reached here.  /* #neg=951 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.04089068465945816;  // std dev = 0.235, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -0.03438306362774432;  // std dev = 0.238, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return -0.007936086834713467;  // std dev = 2.752, 91.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=16 */
%   | | | else return -2.88788815274637E-4;  // std dev = 2.811, 94.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=16 */


Results
   AUC ROC   = 0.562766
   AUC PR    = 0.507132
   CLL	      = -0.70624
   Precision = 0.2 at threshold = 0.5
   Recall    = 0.000411
   F1        = 0.000819


Total learning time: 97.9776999950409 seconds
Total inference time: 10.677 seconds
AUC ROC: 0.562766


Results scoring model
   AUC ROC   = 0.591375
   AUC PR    = 0.275503
   CLL	      = -0.513436
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total scoring time: 3.024 seconds
Parameter learned model CLL: -0.513436


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'false,false,false': 'haswordvenue(B, J), haswordauthor(K, J)'}, {'true': [0.482, 935, 545], 'false,true,true,true': [2.089, 6, 16], 'false,true,true,false': [7.88e-08, 83, 0], 'false,true,false': [0.4, 8, 2], 'false,false,true': [0.0, 4, 0], 'false,false,false,true': [1.291, 10, 2], 'false,false,false,false': [3.679, 88, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,true,false': 'title(H, E), venue(H, A)', 'false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, A)'}, {'true': [0.479, 989, 545], 'false,true,true,true': [2.089, 6, 16], 'false,true,true,false': [0.0, 72, 0], 'false,true,false,true': [5.27e-09, 6, 0], 'false,true,false,false': [1.265, 8, 2], 'false,false,true,true': [3.677, 88, 16], 'false,false,true,false': [1.345, 19, 2], 'false,false,false': [0.016, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,true,false': 'title(H, E), venue(H, B)', 'false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, B)'}, {'true': [0.48, 976, 545], 'false,true,true,true': [2.089, 6, 16], 'false,true,true,false': [0.019, 68, 0], 'false,true,false,true': [0.0, 11, 0], 'false,true,false,false': [1.247, 7, 2], 'false,false,true,true': [2.94, 76, 16], 'false,false,true,false': [1.332, 23, 2], 'false,false,false': [0.013, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,true,false': 'title(H, E), venue(H, B)', 'false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, B)'}, {'true': [0.478, 998, 545], 'false,true,true,true': [1.788, 4, 16], 'false,true,true,false': [0.032, 67, 0], 'false,true,false,true': [9.13e-09, 11, 0], 'false,true,false,false': [1.265, 8, 2], 'false,false,true,true': [2.955, 77, 16], 'false,false,true,false': [1.312, 16, 2], 'false,false,false': [0.001, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, C)', 'false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false,true': 'title(I, H), venue(I, B)', 'false,true,true': 'samebib(I, J), venue(J, A)', 'false,true,false': 'title(K, H), venue(K, A)'}, {'true,true,true': [0.479, 27, 15], 'true,true,false': [0.866, 3, 1], 'true,false': [0.48, 946, 529], 'false,true,true,true': [2.089, 6, 16], 'false,true,true,false': [2.36e-08, 69, 0], 'false,true,false,true': [1.05e-08, 13, 0], 'false,true,false,false': [1.301, 11, 2], 'false,false': [0.306, 93, 18]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,true,false': 'title(H, E), venue(H, B)', 'false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, A)'}, {'true': [0.48, 964, 545], 'false,true,true,true': [1.589, 3, 16], 'false,true,true,false': [0.021, 75, 0], 'false,true,false,true': [3.73e-09, 6, 0], 'false,true,false,false': [1.279, 9, 2], 'false,false,true,true': [2.706, 83, 16], 'false,false,true,false': [1.279, 9, 2], 'false,false,false': [0.001, 6, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, B)', 'false,false,false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true': [1.216, 3, 3], 'true,true,false': [0.447, 34, 13], 'true,false': [0.48, 940, 529], 'false,true': [0.252, 10, 2], 'false,false,true,true': [2.531, 79, 16], 'false,false,true,false': [1.279, 9, 2], 'false,false,false,true': [0.006, 4, 0], 'false,false,false,false': [2.778, 95, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordtitle(G, F)', 'false,false,true': 'title(H, G), venue(H, B)', 'false,false,false': 'haswordvenue(A, I), haswordtitle(J, I)'}, {'true': [0.479, 980, 545], 'false,true': [0.229, 15, 2], 'false,false,true,true': [2.607, 60, 16], 'false,false,true,false': [1.334, 25, 2], 'false,false,false,true': [2.715, 78, 16], 'false,false,false,false': [1.86e-09, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, C)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true,true': [0.488, 23, 15], 'true,true,false': [0.866, 3, 1], 'true,false,true': [0.483, 22, 13], 'true,false,false': [0.48, 917, 516], 'false,true': [0.252, 12, 2], 'false,false,true': [0.25, 10, 2], 'false,false,false,true': [2.691, 82, 16], 'false,false,false,false': [2.847, 87, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordauthor(G, F)', 'false,false,false': 'haswordvenue(A, H), haswordtitle(I, H)'}, {'true': [0.481, 951, 545], 'false,true': [0.235, 15, 2], 'false,false,true': [0.238, 14, 2], 'false,false,false,true': [2.752, 75, 16], 'false,false,false,false': [2.811, 78, 16]}]]
[{'': [0.23264015704892754, 0.12972385694884672], 'false': [0.13202268431001835, 0.12749999999999945], 'false,true': [0.12916099773242576, 0.16000000000000003], 'false,true,true': [0.19834710743801612, 7.490661370964911e-17], 'false,false': [0.0, 0.13109393579072479], 'false,false,false': [0.13888888888888892, 0.13017751479289885]}, {'': [0.2290562121678218, 0.11736245573891055], 'false': [0.11505005363654489, 0.11913931397466335], 'false,false': [0.1231377403643418, 5.377131004964397e-05], 'false,false,true': [0.13001888096468414, 0.08616780045351483], 'false,true': [0.11618473157948729, 0.10729028187212918], 'false,true,true': [0.19834710743801678, -3.0839528461809905e-17], 'false,true,false': [4.625929269271485e-18, 0.16]}, {'': [0.22992589826151577, 0.1113910714629393], 'false': [0.13664559874754875, 0.08792591672965769], 'false,true': [0.1461040104131737, 0.08999999999999996], 'false,true,true': [0.19826829841650664, 5.106006305426589e-06], 'false,true,false': [0.0, 0.1728395061728395], 'false,false': [0.08982379798486276, 5.758425040571641e-05], 'false,false,true': [0.0939214716608749, 0.07101182204823164]}, {'': [0.22845211939104154, 0.10317130407751932], 'false': [0.1154539930482744, 0.09143677762146633], 'false,true': [0.12210433336688431, 0.08375353378693265], 'false,true,true': [0.15990867085510957, 1.5362654120801994e-05], 'false,false': [0.09425636327443661, 3.1794995684550353e-07], 'false,false,true': [0.09387087721730016, 0.09558406513170047], 'false,true,false': [7.569702440626067e-18, 0.15999999999999998]}, {'': [0.229925898261502, 0.09170042180801195], 'true': [0.22684310018903628, 0.2300185004309053], 'true,true': [0.22959183673469422, 0.1875], 'false': [0.08997411470858513, 0.0935177943256306], 'false,true': [0.09544787040807068, 0.06827717543849256], 'false,true,true': [0.19834710743801667, 8.045094381341714e-18], 'false,true,false': [8.540177112501205e-18, 0.13017751479289943]}, {'': [0.23073241746247908, 0.08332295601750818], 'false': [0.08881775637741153, 0.07786518989590559], 'false,true': [0.08656052724759981, 0.10054167973258465], 'false,true,false': [2.3129646346357427e-18, 0.1487603305785124], 'false,true,true': [0.13286806331092715, 5.886324970683828e-06], 'false,false': [0.08167229989818639, 1.9507498986529961e-07], 'false,false,true': [0.07396230811475528, 0.14876033057851243]}, {'': [0.2298582153115336, 0.07114170977680656], 'true': [0.2108666756574154, 0.23043035152904054], 'true,true': [0.24653738750617926, 0.20009053870529625], 'false': [0.06341031544437169, 0.07152043928155676], 'false,false': [0.0760172545304763, 0.0673673040228278], 'false,false,true': [0.06743930971676348, 0.14876033057851232], 'false,false,false': [9.927171911682658e-06, 0.06952156042326373]}, {'': [0.22956053996638737, 0.07838339955999159], 'false': [0.05245163747628127, 0.0804486818741288], 'false,false': [0.08435409207600722, 0.07620209543119909], 'false,false,true': [0.08945738133004508, 0.06594272741044255], 'false,false,false': [0.07842007530508475, 1.1564823173178713e-18]}, {'': [0.23065903428546783, 0.07486849958837823], 'true': [0.2354055426211376, 0.23051574481503068], 'true,true': [0.2382842850509015, 0.18749999999999997], 'true,false': [0.23346938775510176, 0.230423440300861], 'false': [0.06348081787351943, 0.07559674465479287], 'false,false': [0.062488152451659416, 0.07635226309513292], 'false,false,false': [0.07388590303754154, 0.07869040056741373]}, {'': [0.23153958421261617, 0.07962215501932472], 'false': [0.0554329035220903, 0.08157559373254135], 'false,false': [0.056619845156402254, 0.08366068946105791], 'false,false,false': [0.08322117464663126, 0.08405741079506437]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
0;false,true;title(F, E), venue(F, A).;true;true
0;false,true,true;samebib(F, G), venue(G, B).;true;true
0;false,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
1;false,true;title(F, E), venue(F, B).;true;true
1;false,true,true;samebib(F, G), venue(G, A).;true;true
1;false,true,false;title(H, E), venue(H, A).;true;true
1;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
2;false,true;title(F, E), venue(F, A).;true;true
2;false,true,true;samebib(F, G), venue(G, B).;true;true
2;false,true,false;title(H, E), venue(H, B).;true;true
2;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
3;false,true;title(F, E), venue(F, A).;true;true
3;false,true,true;samebib(F, G), venue(G, B).;true;true
3;false,true,false;title(H, E), venue(H, B).;true;true
3;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(B, G), haswordtitle(H, G).;true;true
4;false,true;title(I, H), venue(I, B).;true;true
4;false,true,true;samebib(I, J), venue(J, A).;true;true
4;false,true,false;title(K, H), venue(K, A).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
5;false,true;title(F, E), venue(F, A).;true;true
5;false,true,true;samebib(F, G), venue(G, B).;true;true
5;false,true,false;title(H, E), venue(H, B).;true;true
5;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(A, G), haswordauthor(H, G).;true;true
6;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
6;false,false,false;haswordvenue(B, L), haswordauthor(M, L).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
7;false,false;haswordvenue(B, F), haswordtitle(G, F).;true;true
7;false,false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22003472527215012;  // std dev = 0.481, 1,506.000 (wgt'ed) examples reached here.  /* #neg=961 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5538011090125557;  // std dev = 2.207, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.14185106490048766;  // std dev = 7.30e-08, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | else return 0.1438632208137979;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.037924215998388786;  // std dev = 3.623, 89.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=16 */
%   | | | else return -0.04661296966239256;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18798827673712834;  // std dev = 0.480, 1,519.000 (wgt'ed) examples reached here.  /* #neg=974 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5385459394230446;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.12544463852839158;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.1254446385283914;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0.039718729734897804;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else return 0.014073995594345664;  // std dev = 0.364, 114.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=18 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.15572538039886782;  // std dev = 0.478, 1,536.000 (wgt'ed) examples reached here.  /* #neg=991 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5119876038012159;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.11231637819360629;  // std dev = 3.80e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.016118724281656897;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.05170059179887761;  // std dev = 3.578, 80.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=16 */
%   | | | else return -0.03267292894639706;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else return -0.1269968291315271;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12539319529916002;  // std dev = 0.477, 1,555.000 (wgt'ed) examples reached here.  /* #neg=1,010 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6450510322846618;  // std dev = 1.789, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.1549489677153382;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.13409671799918013;  // std dev = 9.13e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.0659032820008199;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return -0.10399124228029213;  // std dev = 0.011, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return -0.016834556363488448;  // std dev = 2.911, 113.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=18 */
%   | | | else return -0.1135708934501153;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10344890706466323;  // std dev = 0.477, 1,552.000 (wgt'ed) examples reached here.  /* #neg=1,007 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( title(G, E), venue(G, A) )
%   | | | then return 0.41059703525967955;  // std dev = 2.210, 25.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=16 */
%   | | | else return -0.1357261802068654;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.11927553149414336;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.03988293496829536;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return -0.011888871863194884;  // std dev = 2.550, 103.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=16 */
%   | | | else return 0.01621765948187371;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else return -0.1026293722246097;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09082977805552347;  // std dev = 0.480, 1,521.000 (wgt'ed) examples reached here.  /* #neg=976 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( title(G, E), venue(G, A) )
%   | | | then return 0.2077198845181934;  // std dev = 2.546, 32.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=16 */
%   | | | else return -0.12057711802757988;  // std dev = 3.49e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.10730361849635296;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.006983870686970236;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return -0.01734310035044696;  // std dev = 2.652, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
%   | | | else return 0.032146400850396786;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return -0.0937594554609133;  // std dev = 0.000706, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.03349362747621994;  // std dev = 0.466, 47.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=15 */
%   | | else return 0.047678024639340566;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.02386850082981677;  // std dev = 0.462, 42.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=13 */
%   | | else return 0.07242935473417345;  // std dev = 0.479, 1,441.000 (wgt'ed) examples reached here.  /* #neg=925 #pos=516 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.2882846814785192;  // std dev = 2.216, 24.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | | | else return -0.11957527942514251;  // std dev = 0.320, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else return 0.1379748073534563;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return -0.022349428211783123;  // std dev = 0.284, 113.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=18 */
%   | | else return -0.08605281073668698;  // std dev = 0.000675, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.053981006390601834;  // std dev = 0.478, 1,539.000 (wgt'ed) examples reached here.  /* #neg=994 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.2929120281482179;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.0953027099206913;  // std dev = 0.010, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.09551969803553288;  // std dev = 7.45e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.030773515349511484;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return -0.027044301865439796;  // std dev = 2.611, 96.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=16 */
%   | | | else return 0.05625287062709207;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return -0.07938105807399926;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.053918548192912155;  // std dev = 0.482, 1,491.000 (wgt'ed) examples reached here.  /* #neg=946 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.22006554559061245;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.08749395561766726;  // std dev = 0.007, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.08758000100368545;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.008221139788663732;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return -0.023348749715011736;  // std dev = 2.636, 95.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=16 */
%   | | | else return -0.044908869511911594;  // std dev = 1.309, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else return -0.073934511235977;  // std dev = 0.000569, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.031359587281491734;  // std dev = 0.478, 1,537.000 (wgt'ed) examples reached here.  /* #neg=992 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.05095548064557191;  // std dev = 0.211, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return -0.003445605203812069;  // std dev = 2.069, 69.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=14 */
%   | | | else return -0.029958577673849452;  // std dev = 1.293, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return -0.0203019123364824;  // std dev = 2.973, 106.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=18 */
%   | | | else return -0.06902911301324044;  // std dev = 0.000534, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.560852
   AUC PR    = 0.506462
   CLL	      = -0.706898
   Precision = 0.55 at threshold = 0.5
   Recall    = 0.027094
   F1        = 0.051643


Total learning time: 105.35677313804626 seconds
Total inference time: 12.835 seconds
AUC ROC: 0.560852


Results scoring model
   AUC ROC   = 0.593722
   AUC PR    = 0.277803
   CLL	      = -0.510666
   Precision = 0.592593 at threshold = 0.5
   Recall    = 0.027539
   F1        = 0.052632


Total scoring time: 3.111 seconds
Refined model CLL: -0.510666


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.560852
   AUC PR    = 0.506462
   CLL	      = -0.706898
   Precision = 0.55 at threshold = 0.5
   Recall    = 0.027094
   F1        = 0.051643


Total learning time: 209.46947313308715 seconds
Total inference time: 12.835 seconds
AUC ROC: 0.560852
Total revision time: 209.46947313308715
Best scored revision CLL: -0.510666


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 01:36:16
{'AUC ROC': 0.560852, 'AUC PR': 0.506462, 'CLL': -0.706898, 'Precision': [0.55, 0.5], 'Recall': 0.027094, 'F1': 0.051643, 'Learning time': 209.46947313308715, 'Inference time': 12.835, 'parameter': {'AUC ROC': 0.562766, 'AUC PR': 0.507132, 'CLL': -0.70624, 'Precision': [0.2, 0.5], 'Recall': 0.000411, 'F1': 0.000819, 'Learning time': 97.9776999950409, 'Inference time': 10.677}}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.2914822684328457;  // std dev = 0.496, 30.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=13 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.17522210583121967;  // std dev = 0.465, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.22204174186960612;  // std dev = 0.481, 1,418.000 (wgt'ed) examples reached here.  /* #neg=902 #pos=516 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.6200536970042743;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.14185106490048766;  // std dev = 7.60e-08, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.013321348892615825;  // std dev = 0.362, 116.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=18 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1798743585920431;  // std dev = 0.477, 1,552.000 (wgt'ed) examples reached here.  /* #neg=1,007 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.65651958651618;  // std dev = 1.789, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.1434804134838201;  // std dev = 5.96e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.14348041348382032;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.023186253182846322;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.02225559321499535;  // std dev = 3.279, 92.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=16 */
%   | | | else return -0.055210482739330595;  // std dev = 1.321, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.15578915741651475;  // std dev = 0.478, 1,539.000 (wgt'ed) examples reached here.  /* #neg=994 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4831409799797734;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.126732975123712;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.12673297512371187;  // std dev = 3.73e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.03546470085567693;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.021458308967796134;  // std dev = 3.274, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */
%   | | | else return -0.06093503701747042;  // std dev = 1.331, 26.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | | else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13010367050719995;  // std dev = 0.478, 1,538.000 (wgt'ed) examples reached here.  /* #neg=993 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.038660083929782055;  // std dev = 0.274, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.0371890473517714;  // std dev = 0.310, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.01643624281895386;  // std dev = 3.325, 92.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=16 */
%   | | | else return 0.002440935362258285;  // std dev = 3.044, 94.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=16 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10645182964970618;  // std dev = 0.478, 1,539.000 (wgt'ed) examples reached here.  /* #neg=994 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.41694115012356603;  // std dev = 1.950, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.11375434963791871;  // std dev = 0.011, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.11360339400610212;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.04884704779534388;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return -0.12720478163656873;  // std dev = 0.026, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.01625470763217304;  // std dev = 3.508, 104.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=18 */
%   | | | else return -0.10181934144336434;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.18344129311439225;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.06626597117059618;  // std dev = 0.468, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | else return 0.08731505645168254;  // std dev = 0.479, 1,488.000 (wgt'ed) examples reached here.  /* #neg=959 #pos=529 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.5142795582506656;  // std dev = 1.950, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.13311331158660744;  // std dev = 0.017, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else if ( title(K, H), venue(K, A) )
%   | | | then return -0.11657149047393192;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.030516639431807144;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.003777527993256128;  // std dev = 0.289, 98.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=18 */
%   | | else return -0.09314191560410195;  // std dev = 0.000647, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07240565139602287;  // std dev = 0.479, 1,522.000 (wgt'ed) examples reached here.  /* #neg=977 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.05738885642021575;  // std dev = 0.215, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return -0.008777506415166465;  // std dev = 2.925, 97.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
%   | | | else return 0.04844914986000419;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return -0.09925508558251066;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.022795489398960752;  // std dev = 2.861, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06484360676866979;  // std dev = 0.482, 1,491.000 (wgt'ed) examples reached here.  /* #neg=946 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.2570016164342853;  // std dev = 2.207, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.10038594350143369;  // std dev = 0.020, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | else return 0.1306941360899538;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.018768957671334352;  // std dev = 0.286, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return -0.09767664391064028;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.021814884565785134;  // std dev = 3.075, 109.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=16 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.045018629276910235;  // std dev = 0.471, 43.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=15 */
%   | | else return -0.13961246396804045;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.04251535807373078;  // std dev = 0.479, 1,482.000 (wgt'ed) examples reached here.  /* #neg=953 #pos=529 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then return -0.0486467254734223;  // std dev = 0.215, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.0018795824750928484;  // std dev = 2.905, 93.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=16 */
%   | | | else return 0.06721477805613914;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return -0.005959454016235757;  // std dev = 2.610, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
%   | | | else return -0.08190485372594034;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.02962076809670883;  // std dev = 0.478, 1,543.000 (wgt'ed) examples reached here.  /* #neg=998 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.1959419043915915;  // std dev = 2.206, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.09104014416429099;  // std dev = 0.014, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | else return 0.05015161736507894;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.001472418835404276;  // std dev = 2.891, 95.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=16 */
%   | | | else return -0.05295825294009294;  // std dev = 1.323, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else return -0.0747965269190279;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.563249
   AUC PR    = 0.507516
   CLL	      = -0.709095
   Precision = 0.55 at threshold = 0.5
   Recall    = 0.027094
   F1        = 0.051643


Total learning time: 101.32388019561768 seconds
Total inference time: 11.465 seconds
AUC ROC: 0.563249


Dataset: 3_imdb_cora, Fold: 3, Type: Scratch (RDN-B), Time: 01:38:09
{'AUC ROC': 0.563249, 'AUC PR': 0.507516, 'CLL': -0.709095, 'Precision': [0.55, 0.5], 'Recall': 0.027094, 'F1': 0.051643, 'Learning time': 101.32388019561768, 'Inference time': 11.465}


Starting fold 4

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos  examples: 2270
Target test neg examples: 3954

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.24811816884741328;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.16653882456488167;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.20848477447886868;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3912569620992536;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1420942428155646;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.7460022840154411;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.25399771598455895;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.546002284015441;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.24600228401544116;  // std dev = 1.871, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | else return 0.49600228401544094;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordtitle(K, C) )
%   | | | then return 0.1625627935695863;  // std dev = 19.534, 1,570.000 (wgt'ed) examples reached here.  /* #neg=916 #pos=654 */
%   | | | else return 0.22526121460780696;  // std dev = 4.367, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.058332283717316434;  // std dev = 0.420, 73.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=17 */
%   | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1334737702640259;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.12522557064677162;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.19566169278688764;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.19566169278688764;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.24508897793105228;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.10916744629520789;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.030369811391533805;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10543006182977771;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.09813015134339377;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.14806957082045294;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.14806957082045294;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.18389330672640972;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.08961209498728577;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.026049028197814482;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08226940258845625;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.07606950791693179;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.11129186250894305;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.11129186250894305;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.13847163097806062;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.07271800616080458;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.02227414279274751;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then return 0.12329722719693496;  // std dev = 0.380, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   | else return 0.3523642525260708;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.6248598906197209;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.35087314389896795;  // std dev = 0.182, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.3146923060759963;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( haswordvenue(A, J), haswordvenue(B, J) )
%   | | then if ( haswordtitle(K, J) )
%   | | | then return 0.060766674533450166;  // std dev = 19.534, 1,570.000 (wgt'ed) examples reached here.  /* #neg=916 #pos=654 */
%   | | | else return 0.0765449472531827;  // std dev = 4.352, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.033028884702694376;  // std dev = 3.574, 72.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=17 */
%   | | | else return 0.02269931817391357;  // std dev = 2.960, 54.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4714220102992356;  // std dev = 0.000364, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.2971093639728548;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.2820149258097868;  // std dev = 0.890, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.04752423671413844;  // std dev = 0.492, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.05100487673948708;  // std dev = 3.490, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.06982936820609412;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then return 0.05183185490449951;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.016510609820336457;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.015684633323880943;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03732891369042307;  // std dev = 0.490, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.028325479323821633;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.04700002133704921;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.05167357545452869;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.07081527312093026;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.04123074075586222;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.014024776670090172;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.013314925356180993;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.571883
   AUC PR    = 0.427921
   CLL	      = -0.642343
   Precision = 0.503797 at threshold = 0.5
   Recall    = 0.087665
   F1        = 0.149343


Total learning time: 177.86954522132874 seconds
Total inference time: 15.233 seconds
AUC ROC: 0.571883


Results scoring model
   AUC ROC   = 0.55677
   AUC PR    = 0.478777
   CLL	      = -0.664554
   Precision = 0.706667 at threshold = 0.5
   Recall    = 0.07095
   F1        = 0.128954


Total scoring time: 2.772 seconds
Parameter learned model CLL: -0.664554


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'samebib(F, G), venue(G, A)', 'true,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'true,false,true': 'author(J, I), venue(J, A)', 'true,false,false': 'haswordtitle(K, C)', 'false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true,true': [0.0, 0, 8], 'true,true,true,false': [0.0, 7, 0], 'true,true,false': [0.894, 1, 4], 'true,false,true,true': [1.871, 7, 7], 'true,false,true,false': [0.866, 1, 3], 'true,false,false,true': [19.534, 916, 654], 'true,false,false,false': [4.367, 36, 43], 'false,true': [0.42, 56, 17], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.492, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.492, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.492, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'false': 'haswordvenue(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, A)', 'false,true,true': 'samebib(H, I), venue(I, B)', 'false,false': 'haswordvenue(A, J), haswordvenue(B, J)', 'false,false,true': 'haswordtitle(K, J)', 'false,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.38, 8, 8], 'true,false': [0.894, 1, 4], 'false,true,true,true': [0.0, 0, 7], 'false,true,true,false': [0.182, 8, 0], 'false,true,false': [0.866, 1, 3], 'false,false,true,true': [19.534, 916, 654], 'false,false,true,false': [4.352, 36, 43], 'false,false,false,true': [3.574, 55, 17], 'false,false,false,false': [2.96, 43, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'samebib(F, G), venue(G, B)', 'true,false': 'haswordtitle(H, C)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,true': 'haswordtitle(L, M), haswordvenue(A, M)'}, {'true,true,true,true': [0.000364, 0, 8], 'true,true,true,false': [0.0, 7, 0], 'true,true,false': [0.89, 1, 4], 'true,false,true': [0.492, 924, 664], 'true,false,false,true': [3.49, 25, 25], 'true,false,false,false': [2.598, 11, 18], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true': [0.49, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}]]
[{'': [0.24455361249545102, 0.17089843750000108], 'true': [0.24366352318011741, 0.24803717352988336], 'true,false': [0.25000000000000133, 0.2354340071343634], 'true,false,true': [0.24489795918367302, 0.2417355371900822], 'true,false,false': [0.2417355371900822, 0.20408163265306106], 'false': [0.17864514918371124, 0.15999999999999948], 'false,true': [0.22222222222222232, 0.15999999999999948]}, {'': [0.24423965838627754, 0.17036542604714275], 'true': [0.24366352318012574, 0.24554974033866306], 'true,false': [0.24813620683257936, 0.23456996391329935], 'true,false,true': [0.244897959183673, 0.2417355371900833], 'true,false,false': [0.2417355371900833, 0.20408163265306115], 'false': [0.177825777852918, 0.1600000000000007], 'false,true': [0.22222222222222207, 0.1600000000000007]}, {'': [0.24393157221315045, 0.16990467702453838], 'true': [0.2436635231801326, 0.24310195846820265], 'true,false': [0.2463115068589201, 0.2337064665173658], 'true,false,true': [0.24489795918367316, 0.24173553719008264], 'true,false,false': [0.24173553719008264, 0.20408163265306115], 'false': [0.1771174918718374, 0.15999999999999953], 'false,true': [0.22222222222222218, 0.15999999999999953]}, {'': [0.24371075047936072, 0.16953742675793848], 'true': [0.24000000000000005, 0.2433755514778198], 'true,false': [0.2469135802469136, 0.24313724008541723], 'true,false,true': [0.24999999999999994, 0.1875000000000001], 'true,false,false': [0.2430378514341155, 0.2413696703282902], 'true,true': [0.24888888888888885, 0.16], 'true,true,true': [-1.1102230246251565e-16, -2.3790493384824782e-17], 'false': [0.17655293676131073, 0.15999999999999967]}, {'': [0.24244198500862335, 0.16947574234936733], 'true': [0.24242828380294537, 0.24107111877312534], 'true,false': [0.24472894484173996, 0.23309402480311459], 'true,false,true': [0.24489795918367369, 0.24173553719008262], 'true,false,false': [0.24173553719008262, 0.2040816326530612], 'false': [0.17641586061378758, 0.15999999999999973], 'false,true': [0.22222222222222213, 0.15999999999999995]}, {'': [0.24231850035173866, 0.1692209407827565], 'true': [0.24238033028021777, 0.2403066188224396], 'true,false': [0.2441210017066964, 0.2328816629300834], 'true,false,true': [0.24489795918367366, 0.24173553719008256], 'true,false,false': [0.24173553719008256, 0.2040816326530612], 'false': [0.1760363920976602, 0.15999999999999986], 'false,true': [0.22222222222222227, 0.1599999999999999]}, {'': [0.24225021324635643, 0.16904561831528256], 'true': [0.24234770610938886, 0.23992362656169797], 'true,false': [0.24381218086089804, 0.2327819382725394], 'true,false,true': [0.24489795918367352, 0.24173553719008273], 'true,false,false': [0.24173553719008273, 0.20408163265306123], 'false': [0.17577603605086148, 0.16000000000000023], 'false,true': [0.22222222222222227, 0.16000000000000006]}, {'': [0.15752579167690958, 0.2379146761526205], 'false': [0.23562503487497, 0.2378542721717942], 'false,false': [0.2428909243793509, 0.17093124891717043], 'false,false,true': [0.2430378514341335, 0.239733954593931], 'false,true': [0.2391544061153, 0.18749999999999997], 'false,true,true': [0.0, 0.004122199295698001], 'false,false,false': [0.17742757845650747, 0.16220850480109728], 'true': [0.1442593391728155, 0.15999999999999998]}, {'': [0.2411230971298125, 0.16881307109206142], 'true': [0.1552052440690931, 0.2420180015992109], 'true,false': [0.24212693153788045, 0.23972551800737735], 'true,false,false': [0.24364682044905897, 0.23274037231154285], 'false': [0.1753349614789221, 0.1601048896613905], 'false,true': [0.22222222222222232, 0.15968241476224737], 'true,true': [0.1470038599629873, 0.15832753720804185], 'true,true,true': [1.658501222467912e-08, 0.0]}, {'': [0.24050212365762758, 0.1687496435482664], 'true': [0.24054008431996884, 0.2396896294720453], 'true,false': [0.2435924226776745, 0.23271375798173033], 'true,false,true': [0.24489795918367369, 0.24173553719008253], 'true,false,false': [0.24173553719008273, 0.20408163265306126], 'false': [0.17523837667253467, 0.16010594116056004], 'false,true': [0.22222222222222215, 0.15967933909113816]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
3;true,true;author(F, E), venue(F, B).;true;true
3;true,true,true;samebib(F, G), venue(G, A).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true
7;false;haswordvenue(B, F), haswordauthor(G, F).;true;true
7;false,true;author(H, G), venue(H, A).;true;true
7;false,true,true;samebib(H, I), venue(I, B).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
8;true,true;author(F, E), venue(F, A).;true;true
8;true,true,true;samebib(F, G), venue(G, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.35814893509951234;  // std dev = 2.646, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return -0.1418510649004877;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.15814893509951225;  // std dev = 0.458, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.24811816884741328;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.17487895797485534;  // std dev = 0.459, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.045167904687026944;  // std dev = 0.383, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.20848477447886868;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3912569620992536;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.15025944697389804;  // std dev = 0.457, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.039214416516084;  // std dev = 0.382, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.17062637354018492;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3005711547884894;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.1268293566682637;  // std dev = 0.456, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03389801444511924;  // std dev = 0.382, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.13360339271793026;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.13664585375352234;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.22629823971521876;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.10539138899679801;  // std dev = 0.455, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.0291907054103134;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10551742939082928;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.10762034996184403;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.14379027326522745;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.14379027326522745;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.16984358676510128;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.08642521547040476;  // std dev = 0.454, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.02505347559173894;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08232251291348108;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.08372807955323855;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.10803450809035726;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.10803450809035726;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.12813320688246752;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, A) )
%   | | then if ( samebib(L, M), venue(M, B) )
%   | | | then return 0.3110182399433708;  // std dev = 2.616, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return -0.1889817600566297;  // std dev = 0.194, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.05101984990028411;  // std dev = 0.419, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0.021440557109547266;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06366213733661014;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.06457405393631681;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.08103386685025628;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.08103386685025628;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.09743184803714998;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.06057692442503525;  // std dev = 0.433, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.01830292124310681;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.016635227972327905;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6285257899654785;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.37147421003452147;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.4285257899654785;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.046661810116601865;  // std dev = 0.493, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.054475401026286584;  // std dev = 3.490, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.06415866688950284;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return 0.04855343957920246;  // std dev = 0.432, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.015590964793219884;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.014154349160156149;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.037367193671363555;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.036593722070572786;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.04486526794085501;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.04726660744199421;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.06002833373015447;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.2543299414031438;  // std dev = 2.610, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return -0.16551184720681564;  // std dev = 0.186, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.009724671754269196;  // std dev = 0.415, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0.012023312525220778;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.574112
   AUC PR    = 0.432576
   CLL	      = -0.631531
   Precision = 0.721212 at threshold = 0.5
   Recall    = 0.052423
   F1        = 0.097741


Total learning time: 204.57273721694946 seconds
Total inference time: 18.118 seconds
AUC ROC: 0.574112


Results scoring model
   AUC ROC   = 0.551858
   AUC PR    = 0.464641
   CLL	      = -0.662811
   Precision = 0.661017 at threshold = 0.5
   Recall    = 0.052209
   F1        = 0.096774


Total scoring time: 2.689 seconds
Refined model CLL: -0.662811


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.574112
   AUC PR    = 0.432576
   CLL	      = -0.631531
   Precision = 0.721212 at threshold = 0.5
   Recall    = 0.052423
   F1        = 0.097741


Total learning time: 387.9032824382782 seconds
Total inference time: 18.118 seconds
AUC ROC: 0.574112
Total revision time: 387.9032824382782
Best scored revision CLL: -0.662811


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 01:45:14
{'AUC ROC': 0.574112, 'AUC PR': 0.432576, 'CLL': -0.631531, 'Precision': [0.721212, 0.5], 'Recall': 0.052423, 'F1': 0.097741, 'Learning time': 387.9032824382782, 'Inference time': 18.118, 'parameter': {'AUC ROC': 0.571883, 'AUC PR': 0.427921, 'CLL': -0.642343, 'Precision': [0.503797, 0.5], 'Recall': 0.087665, 'F1': 0.149343, 'Learning time': 177.86954522132874, 'Inference time': 15.233}}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.24811816884741328;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.16653882456488167;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.20848477447886868;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3912569620992536;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1420942428155646;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.17062637354018492;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3005711547884894;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.11914890490746433;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.13360339271793026;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.13664585375352234;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.22629823971521876;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.0984134027840187;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10551742939082928;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.10762034996184403;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.14379027326522745;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.14379027326522745;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.16984358676510128;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.08026654944252247;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08232251291348108;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.08372807955323855;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.10803450809035726;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.10803450809035726;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.12813320688246752;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.06479591611329234;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06366213733661014;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.06457405393631681;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.08103386685025628;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.08103386685025628;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.09743184803714998;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.05187916934404051;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.048923799915716965;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.049497783225195;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.0608105509549485;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.0608105509549485;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.07468131696953094;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.04126932998424623;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03743104240908369;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.03777940363354095;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.045695325992495844;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.045695325992495844;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.057651940521137104;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.03266374873483021;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.564202
   AUC PR    = 0.422227
   CLL	      = -0.642391
   Precision = 0.65625 at threshold = 0.5
   Recall    = 0.037004
   F1        = 0.070058


Total learning time: 197.04679012298584 seconds
Total inference time: 16.006 seconds
AUC ROC: 0.564202


Dataset: 3_imdb_cora, Fold: 4, Type: Scratch (RDN-B), Time: 01:48:48
{'AUC ROC': 0.564202, 'AUC PR': 0.422227, 'CLL': -0.642391, 'Precision': [0.65625, 0.5], 'Recall': 0.037004, 'F1': 0.070058, 'Learning time': 197.04679012298584, 'Inference time': 16.006}


Starting fold 5

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos  examples: 2467
Target test neg examples: 4522

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.7291166770349955;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15083186192878065;  // std dev = 2.913, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.23314893509951226;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.14762261931003867;  // std dev = 2.796, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.051131391239862906;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6157326050686436;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.629623109416637;  // std dev = 0.897, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.17037689058336297;  // std dev = 0.010, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.11167103821357358;  // std dev = 0.442, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.03693744759731563;  // std dev = 0.807, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1534329638272584;  // std dev = 2.940, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.03825072160333175;  // std dev = 2.992, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05181004363723003;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), title(G, F) )
%   | | | then return 0.47639976591603156;  // std dev = 1.936, 20.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   | | | else return 0.05973309924936462;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return -0.12360023408396874;  // std dev = 1.597, 20.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=3 */
%   | | | else return 0.5007520519797396;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.2648613043775699;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.03762993035031233;  // std dev = 1.967, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.3407976691556591;  // std dev = 0.485, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.11289390624983595;  // std dev = 0.442, 54.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else return 0.06249985935096407;  // std dev = 0.413, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.6184616219497344;  // std dev = 0.110, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.16821578153163685;  // std dev = 2.455, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.05424722422497871;  // std dev = 1.825, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return 0.2525474528743374;  // std dev = 13.414, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | | else return 0.41314899361989804;  // std dev = 1.602, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.5205087282359964;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1455948109784701;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.08236290489092714;  // std dev = 0.440, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.051716622730759255;  // std dev = 0.413, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.47439028304749964;  // std dev = 0.115, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.13676437060204125;  // std dev = 2.571, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.10616773501482439;  // std dev = 1.941, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.137655606586558;  // std dev = 2.586, 30.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return -0.053852525892861304;  // std dev = 1.512, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return 0.20774559258642117;  // std dev = 0.485, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, A) )
%   | | then return 0.15795045154671733;  // std dev = 0.434, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.06856286162440164;  // std dev = 0.438, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.04321394166241969;  // std dev = 0.410, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( haswordauthor(E, C) )
%   | | then return 0.4360579612992116;  // std dev = 0.090, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.13735191048486892;  // std dev = 0.485, 800.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=466 */
%   | else return 0.27974765730427337;  // std dev = 0.331, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.3934958151912036;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1339340595621896;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.060972451369379094;  // std dev = 0.439, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then return 1.1008288069470023E-4;  // std dev = 0.382, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.09427981494013374;  // std dev = 4.073, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return -0.19309416802853113;  // std dev = 0.060, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.10550780701991633;  // std dev = 0.483, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.24614165164622945;  // std dev = 0.291, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.43551546226009086;  // std dev = 0.904, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.20190129823616335;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.04726053021214978;  // std dev = 0.431, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | | then return -0.1794891536644948;  // std dev = 0.038, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.03152926938342518;  // std dev = 2.983, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.08555973508081985;  // std dev = 4.042, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return -0.18343725885482295;  // std dev = 0.121, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2652742571258356;  // std dev = 0.094, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.044457545797019875;  // std dev = 2.568, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.15203212157539375;  // std dev = 1.864, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.0862276323979216;  // std dev = 0.485, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.16687502507850593;  // std dev = 0.340, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.009136109222530928;  // std dev = 0.281, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(L, J), venue(L, B) )
%   | | | then return 0.029382349571611364;  // std dev = 0.869, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.059249847207264034;  // std dev = 2.828, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.022894525250447665;  // std dev = 0.406, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then if ( haswordvenue(A, D) )
%   | | | then return 0.25741275583886286;  // std dev = 0.067, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.033405524061777256;  // std dev = 2.568, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | else return 0.05882621654839657;  // std dev = 0.482, 783.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | else return 0.1796491429105688;  // std dev = 0.292, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then return 0.04184603541996673;  // std dev = 0.422, 54.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.0019891549402518125;  // std dev = 3.018, 61.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=12 */
%   | | | else return -0.15320626255060946;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.06544757539512783;  // std dev = 4.037, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return -0.16342087943740882;  // std dev = 0.118, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.019622666658809816;  // std dev = 0.399, 61.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | else if ( haswordtitle(F, C) )
%   | | then return 0.05056040590086183;  // std dev = 0.486, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.12236258307810116;  // std dev = 0.343, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( title(J, H), venue(J, B) )
%   | | | then return 0.6282024560793297;  // std dev = 1.768, 29.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=26 */
%   | | | else return -0.20419290837182003;  // std dev = 0.267, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return -0.16234584406378638;  // std dev = 0.117, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordauthor(M, K) )
%   | | | then return 0.10290844654499191;  // std dev = 0.767, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.04390859021135456;  // std dev = 4.066, 86.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=24 */
%   | | else return -0.17101095087014787;  // std dev = 0.197, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */


Results
   AUC ROC   = 0.556082
   AUC PR    = 0.402106
   CLL	      = -0.703143
   Precision = 0.376868 at threshold = 0.5
   Recall    = 0.940413
   F1        = 0.538096


Total learning time: 121.51809000968933 seconds
Total inference time: 29.152 seconds
AUC ROC: 0.556082


Results scoring model
   AUC ROC   = 0.681005
   AUC PR    = 0.669519
   CLL	      = -0.608046
   Precision = 0.626566 at threshold = 0.5
   Recall    = 0.909091
   F1        = 0.74184


Total scoring time: 2.555 seconds
Parameter learned model CLL: -0.608046


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(A, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, B)', 'false,true,true': 'samebib(G, H), venue(H, A)', 'false,true,false': 'author(I, F), venue(I, A)', 'false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,false,true': 'author(L, K), venue(L, A)'}, {'true,true': [0.493, 334, 471], 'true,false': [0.335, 4, 27], 'false,true,true,true': [0.894, 1, 4], 'false,true,true,false': [0.0, 5, 0], 'false,true,false,true': [0.0, 3, 0], 'false,true,false,false': [2.913, 29, 12], 'false,false,true,true': [1.369, 5, 3], 'false,false,true,false': [2.796, 27, 11], 'false,false,false': [0.395, 92, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(B, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, A)', 'false,true,true': 'samebib(G, H), venue(H, B)', 'false,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false,true': 'haswordtitle(K, I)', 'false,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.493, 334, 471], 'true,false': [0.335, 4, 27], 'false,true,true,true': [0.897, 1, 4], 'false,true,true,false': [0.01, 5, 0], 'false,true,false': [0.442, 32, 12], 'false,false,true,true': [0.807, 4, 1], 'false,false,true,false': [2.94, 28, 13], 'false,false,false,true': [2.992, 48, 11], 'false,false,false,false': [2.966, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,true': 'author(G, E), title(G, F)', 'true,true,false': 'haswordtitle(H, C)', 'true,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'true,false,true': 'haswordtitle(K, I)', 'false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true,true': [1.936, 5, 15], 'true,true,true,false': [1.633, 8, 4], 'true,true,false,true': [1.597, 17, 3], 'true,true,false,false': [0.943, 1, 8], 'true,false,true,true': [2.542, 12, 14], 'true,false,true,false': [1.967, 17, 6], 'true,false,false': [0.485, 278, 448], 'false,true': [0.442, 38, 16], 'false,false': [0.413, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordauthor(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,true': 'haswordtitle(G, E)', 'true,false,false': 'haswordtitle(H, C)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, B)', 'false,true,true': 'samebib(K, L), venue(L, A)'}, {'true,true': [0.11, 0, 10], 'true,false,true,true': [2.455, 13, 14], 'true,false,true,false': [1.825, 18, 6], 'true,false,false,true': [13.414, 304, 449], 'true,false,false,false': [1.602, 3, 19], 'false,true,true,true': [0.899, 1, 4], 'false,true,true,false': [0.016, 5, 0], 'false,true,false': [0.44, 32, 12], 'false,false': [0.413, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'haswordtitle(G, D)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'true,false,true': 'author(J, I), venue(J, B)', 'false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false,true': 'author(M, L), venue(M, A)'}, {'true,true,true': [0.115, 0, 10], 'true,true,false,true': [2.571, 13, 14], 'true,true,false,false': [1.941, 18, 6], 'true,false,true,true': [2.586, 15, 15], 'true,false,true,false': [1.512, 14, 5], 'true,false,false': [0.485, 278, 448], 'false,true,true': [0.434, 6, 4], 'false,true,false': [0.438, 32, 12], 'false,false': [0.41, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'haswordauthor(E, C)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, B)', 'false,true,true': 'samebib(H, I), venue(I, A)', 'false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true': [0.09, 0, 5], 'true,true,false': [0.485, 334, 466], 'true,false': [0.331, 4, 27], 'false,true,true,true': [0.899, 1, 4], 'false,true,true,false': [0.016, 5, 0], 'false,true,false': [0.439, 32, 12], 'false,false,true': [0.382, 54, 12], 'false,false,false,true': [4.073, 59, 24], 'false,false,false,false': [0.06, 11, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordtitle(E, D)', 'false': 'haswordvenue(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, A)', 'false,true,true': 'samebib(H, I), venue(I, B)', 'false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,false,true': 'haswordtitle(K, L), haswordvenue(B, L)', 'false,false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true': [0.483, 336, 479], 'true,false': [0.291, 2, 19], 'false,true,true,true': [0.904, 1, 4], 'false,true,true,false': [0.016, 5, 0], 'false,true,false': [0.431, 32, 12], 'false,false,true,true': [0.038, 12, 0], 'false,false,true,false': [2.983, 42, 12], 'false,false,false,true': [4.042, 59, 24], 'false,false,false,false': [0.121, 11, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'haswordtitle(G, D)', 'true,false': 'haswordtitle(H, C)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, A)', 'false,true,false': 'author(L, J), venue(L, B)'}, {'true,true,true': [0.094, 0, 10], 'true,true,false,true': [2.568, 13, 14], 'true,true,false,false': [1.864, 18, 6], 'true,false,true': [0.485, 304, 449], 'true,false,false': [0.34, 3, 19], 'false,true,true': [0.281, 6, 2], 'false,true,false,true': [0.869, 3, 2], 'false,true,false,false': [2.828, 29, 12], 'false,false': [0.406, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordtitle(E, D)', 'true,true': 'haswordauthor(F, D)', 'true,true,true': 'haswordvenue(A, D)', 'false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, A)', 'false,false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true,true': [0.067, 0, 5], 'true,true,true,false': [2.568, 13, 14], 'true,true,false': [0.482, 323, 460], 'true,false': [0.292, 2, 19], 'false,true': [0.422, 38, 16], 'false,false,true,true': [3.018, 49, 12], 'false,false,true,false': [3.73e-09, 5, 0], 'false,false,false,true': [4.037, 59, 24], 'false,false,false,false': [0.118, 11, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,false': 'haswordtitle(F, C)', 'false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false,true': 'title(I, H), venue(I, A)', 'false,true,true': 'title(J, H), venue(J, B)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,false,true': 'haswordauthor(M, K)'}, {'true,true': [0.399, 31, 30], 'true,false,true': [0.486, 304, 449], 'true,false,false': [0.343, 3, 19], 'false,true,true,true': [1.768, 3, 26], 'false,true,true,false': [0.267, 69, 0], 'false,true,false': [0.117, 7, 0], 'false,false,true,true': [0.767, 3, 2], 'false,false,true,false': [4.066, 62, 24], 'false,false,false': [0.197, 18, 0]}]]
[{'': [0.24084270048762138, 0.18394619617433927], 'true': [0.2427591528104568, 0.11238293444328941], 'false': [0.20850480109739317, 0.17437500000000122], 'false,true': [0.23999999999999985, 0.19834710743801603], 'false,true,true': [0.15999999999999986, -2.7755575615628915e-18], 'false,true,false': [0.0, 0.20701963117192096], 'false,false': [0.21172022684309966, 0.15574022776238935], 'false,false,true': [0.2343749999999999, 0.20567867036011028]}, {'': [0.2399033482150972, 0.18065319598114946], 'true': [0.24275915281046145, 0.11238293444328855], 'false': [0.20552898471110215, 0.17131473287152157], 'false,true': [0.24047872974684878, 0.19500943656136147], 'false,true,true': [0.16093650378655452, 2.095570714285011e-05], 'false,false': [0.20334904129270392, 0.15574022776238897], 'false,false,true': [0.1302457674210878, 0.21078894368062936], 'false,false,false': [0.1516805515656426, 0.16000000000000056]}, {'': [0.23897284752961942, 0.17735073170829127], 'true': [0.238162204136848, 0.23788346814211797], 'true,true': [0.24121093749999967, 0.2020150031606589], 'true,true,true': [0.18749999999999978, 0.22222222222222218], 'true,false': [0.23360894277494626, 0.2351693744600563], 'true,false,true': [0.24852071005917167, 0.1682006394224642], 'true,true,false': [0.1275, 0.09876543209876548], 'false': [0.1956582190705818, 0.17053113118149163]}, {'': [0.23484823903416488, 0.17691342376587757], 'true': [0.012163593484059243, 0.23587721253261767], 'true,false': [0.1958140860881909, 0.23619992330328912], 'true,false,false': [0.2389621845619423, 0.11659458323738522], 'true,false,true': [0.22317931922105316, 0.13882772232122545], 'false': [0.19459342742910765, 0.17031284959056972], 'false,true': [0.19184644434022896, 0.19317241581729447], 'false,true,true': [0.1617937973112496, 5.212889218920436e-05]}, {'': [0.23255243293638012, 0.1745020100565017], 'true': [0.21254742836550883, 0.233366595851437], 'true,false': [0.19191351920877014, 0.23484699390538502], 'true,true': [0.01327998188524857, 0.2181348859697031], 'true,true,false': [0.2447674547458759, 0.15692947718739128], 'true,false,true': [0.22299286426055803, 0.12038656414388452], 'false': [0.19223750713059728, 0.16807322935837385], 'false,true': [0.18826885181666472, 0.19165981846367394]}, {'': [0.23034262268957767, 0.17399044626764182], 'true': [0.23424875017926686, 0.1098901159294324], 'true,true': [0.0016027893053132125, 0.23514859299502036], 'false': [0.18543286460195568, 0.16976354799437812], 'false,true': [0.15043413306524187, 0.19251034407497333], 'false,false': [0.14586266276161686, 0.1850331272806701], 'false,false,false': [0.19984820457791863, 0.00032689127408047636], 'false,true,true': [0.1617231174627216, 5.401227657213237e-05]}, {'': [0.22965641663170316, 0.1711393117743628], 'true': [0.2329025033169488, 0.0843962726097806], 'false': [0.1860028347235139, 0.16587743865787627], 'false,true': [0.18330833190012558, 0.18571953230896918], 'false,true,true': [0.16341407471223843, 5.2525807243103406e-05], 'false,false': [0.14147549810368726, 0.18147987316240963], 'false,false,false': [0.19688856502781815, 0.0013224936833079307], 'false,false,true': [0.00011746270844124884, 0.16479225397352626]}, {'': [0.22938153604546802, 0.16734985916267145], 'true': [0.18805139433780702, 0.2321053568609242], 'true,false': [0.2353213734633118, 0.1157105073020578], 'true,true': [0.008839524879072613, 0.20710148717029797], 'true,true,false': [0.24429892648703894, 0.14481473826501778], 'false': [0.1741253089031135, 0.164890386184933], 'false,true': [0.0788236719241645, 0.190374093145699], 'false,true,false': [0.15086256701422907, 0.1950956080927616]}, {'': [0.2284794258478412, 0.16714666303912454], 'true': [0.23180341105368368, 0.0853341412951519], 'true,true': [0.21284910750387678, 0.2325744403292782], 'true,true,true': [0.0008863292377506493, 0.24426096761688806], 'false': [0.17814361725252842, 0.16329984577833748], 'false,false': [0.13967713995226294, 0.1789183699890483], 'false,false,false': [0.1963322976179118, 0.0012712655198903189], 'false,false,true': [0.1493014178492195, 2.7755575615628915e-18]}, {'': [0.22824016040177214, 0.16608137263148745], 'true': [0.15895261726254867, 0.233313173092342], 'true,false': [0.23655270662030034, 0.1174235740463012], 'false': [0.16791858016739544, 0.16416349808962996], 'false,true': [0.17698567699236098, 0.001956910786043784], 'false,true,true': [0.10778894757001914, 0.0010318375152848027], 'false,false': [0.18834902282509805, 0.0021575023499853705], 'false,false,true': [0.11759335540186525, 0.19227146161467026]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
0;false,true;author(G, F), venue(G, B).;true;true
0;false,true,true;samebib(G, H), venue(H, A).;true;true
0;false,true,false;author(I, F), venue(I, A).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(B, E), haswordauthor(F, E).;true;true
1;false,true;author(G, F), venue(G, A).;true;true
1;false,true,true;samebib(G, H), venue(H, B).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(A, I), haswordauthor(J, I).;true;true
3;false,true;author(K, J), venue(K, B).;true;true
3;false,true,true;samebib(K, L), venue(L, A).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;haswordauthor(E, C).;true;true
5;false;haswordvenue(A, F), haswordauthor(G, F).;true;true
5;false,true;author(H, G), venue(H, B).;true;true
5;false,true,true;samebib(H, I), venue(I, A).;true;true
5;false,false;haswordvenue(B, J), haswordtitle(K, J).;true;true
5;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(B, F), haswordauthor(G, F).;true;true
6;false,true;author(H, G), venue(H, A).;true;true
6;false,true,true;samebib(H, I), venue(I, B).;true;true
6;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;true
6;false,false,true;haswordtitle(K, L), haswordvenue(B, L).;true;true
6;false,false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordvenue(B, D), haswordtitle(E, D).;true;true
8;true,true;haswordauthor(F, D).;true;true
8;true,true,true;haswordvenue(A, D).;true;true
8;false;haswordvenue(B, G), haswordauthor(H, G).;true;true
8;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
8;false,false,true;title(K, J), venue(K, A).;true;true
8;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;false,true;title(I, H), venue(I, A).;true;true
9;false,true,true;title(J, H), venue(J, B).;true;true
9;false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.7291166770349955;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13087620782678508;  // std dev = 0.445, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.04458961306561406;  // std dev = 2.992, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6157326050686436;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.6397480032138977;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15715819152444083;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.1085582464606873;  // std dev = 0.441, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.1912873480467316;  // std dev = 1.246, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.13093264915071987;  // std dev = 2.796, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.03765285941803126;  // std dev = 2.990, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05244716084236053;  // std dev = 2.967, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.6805851247859591;  // std dev = 0.056, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.2449182844345499;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.047462026339214675;  // std dev = 1.980, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.2648613043775699;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.03762993035031233;  // std dev = 1.967, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.3407976691556591;  // std dev = 0.485, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, A) )
%   | | then return 0.19845126079174688;  // std dev = 0.441, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.09313650877267977;  // std dev = 0.441, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.06266324891860883;  // std dev = 0.413, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24325016813796135;  // std dev = 0.489, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.4187148080064091;  // std dev = 0.330, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.510591616357033;  // std dev = 0.897, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15470033516003137;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.08434412128973286;  // std dev = 0.441, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.002911433531182295;  // std dev = 0.793, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.11623372574229009;  // std dev = 2.936, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.0243558558774382;  // std dev = 2.990, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.037523214016576906;  // std dev = 2.967, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.44561144003391107;  // std dev = 0.083, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.13821591106707626;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.09852619775720362;  // std dev = 1.924, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.19584000444447094;  // std dev = 0.489, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.30949529842772666;  // std dev = 0.341, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.024482775612024377;  // std dev = 0.333, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(L, J), venue(L, B) )
%   | | | then return 0.101236724047066;  // std dev = 0.925, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.09095082493673086;  // std dev = 2.884, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.04382071885336329;  // std dev = 0.412, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then if ( haswordvenue(B, D) )
%   | | | then return 0.4029918878284843;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.10514776153066976;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | else return 0.140621972239184;  // std dev = 0.486, 783.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | else return 0.29228386581634297;  // std dev = 0.290, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.46307947510974756;  // std dev = 0.908, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.17980908985554048;  // std dev = 0.035, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(K, H), venue(K, B) )
%   | | | then return -0.20622772878241724;  // std dev = 0.011, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.07155054710258872;  // std dev = 2.861, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.03698000149467507;  // std dev = 0.410, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.10622019107455558;  // std dev = 0.486, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.22806610732277388;  // std dev = 0.289, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.36787993178019096;  // std dev = 0.904, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1476213579619709;  // std dev = 0.012, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.04946499665012232;  // std dev = 0.437, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, A) )
%   | | | then return 0.06784151866754612;  // std dev = 4.085, 88.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=24 */
%   | | | else return -0.18584786490418842;  // std dev = 0.045, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.04093083021495386;  // std dev = 2.999, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | else return -0.20472860857510486;  // std dev = 0.086, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.24960340229128689;  // std dev = 0.063, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return 0.053133097000639874;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.14629607330738223;  // std dev = 1.849, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return 0.04487089322742324;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.2039171946230052;  // std dev = 1.856, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.09916423245302185;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.08843995313367334;  // std dev = 0.382, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.037548760901877816;  // std dev = 0.428, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.02402888342287766;  // std dev = 0.407, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then if ( haswordtitle(F, D) )
%   | | | then return 0.055036066330662964;  // std dev = 2.604, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return -0.24240582095642993;  // std dev = 1.457, 20.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=3 */
%   | | else return 0.184776552945996;  // std dev = 0.296, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, A) )
%   | | | then return 0.0478230947480546;  // std dev = 2.676, 36.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | | | else return -0.1975243870699737;  // std dev = 1.563, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else return 0.07458503891653276;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return -0.012492834649165;  // std dev = 0.288, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.05124244014379426;  // std dev = 0.440, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else return 0.019046506599068414;  // std dev = 0.406, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return -0.5185585044642532;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.18273840941837619;  // std dev = 0.376, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | else if ( author(G, D), venue(G, B) )
%   | | then return -0.17555532434622986;  // std dev = 0.303, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else if ( haswordvenue(A, C) )
%   | | | then return 0.12488022602204348;  // std dev = 0.025, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.06396173943376;  // std dev = 3.077, 49.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=18 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordtitle(I, H) )
%   | | then return 0.048917373805803084;  // std dev = 0.486, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.153292250626003;  // std dev = 0.349, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then return -0.014211298203538721;  // std dev = 0.376, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | else return 0.0368900903112935;  // std dev = 0.426, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */


Results
   AUC ROC   = 0.554557
   AUC PR    = 0.402448
   CLL	      = -0.708634
   Precision = 0.375654 at threshold = 0.5
   Recall    = 0.931901
   F1        = 0.535461


Total learning time: 103.92768406867981 seconds
Total inference time: 25.824 seconds
AUC ROC: 0.554557


Results scoring model
   AUC ROC   = 0.668064
   AUC PR    = 0.659751
   CLL	      = -0.620111
   Precision = 0.633375 at threshold = 0.5
   Recall    = 0.910909
   F1        = 0.747204


Total scoring time: 2.527 seconds
Refined model CLL: -0.620111


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.556082
   AUC PR    = 0.402106
   CLL	      = -0.703143
   Precision = 0.376868 at threshold = 0.5
   Recall    = 0.940413
   F1        = 0.538096


Total learning time: 230.52777407836913 seconds
Total inference time: 29.152 seconds
AUC ROC: 0.556082
Total revision time: 230.52777407836913
Best scored revision CLL: -0.608046


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 01:53:38
{'AUC ROC': 0.556082, 'AUC PR': 0.402106, 'CLL': -0.703143, 'Precision': [0.376868, 0.5], 'Recall': 0.940413, 'F1': 0.538096, 'Learning time': 230.52777407836913, 'Inference time': 29.152, 'parameter': {'AUC ROC': 0.556082, 'AUC PR': 0.402106, 'CLL': -0.703143, 'Precision': [0.376868, 0.5], 'Recall': 0.940413, 'F1': 0.538096, 'Learning time': 121.51809000968933, 'Inference time': 29.152}}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.7291166770349955;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( author(H, F), venue(H, B) )
%   | | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.16249676118646889;  // std dev = 0.460, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.23314893509951226;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.14762261931003867;  // std dev = 2.796, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.04458961306561406;  // std dev = 2.992, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6157326050686436;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6258134041158593;  // std dev = 0.882, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16671450685702074;  // std dev = 0.054, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, A) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.129877843165277;  // std dev = 2.913, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.03208538409086366;  // std dev = 0.889, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.15483675235342567;  // std dev = 2.978, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.044790460982400505;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.6805851247859591;  // std dev = 0.056, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.2449182844345499;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.047462026339214675;  // std dev = 1.980, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.3226813064206765;  // std dev = 0.491, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.47549952672721435;  // std dev = 0.343, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.5173682729146571;  // std dev = 0.877, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14490392605306548;  // std dev = 0.048, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.09613911016437181;  // std dev = 0.443, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.06268137234715461;  // std dev = 0.416, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordvenue(A, D) )
%   | | | then return 0.5734270518416389;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.1792580649666844;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | else if ( haswordtitle(G, C) )
%   | | | then return -0.1955020234161484;  // std dev = 1.552, 20.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=3 */
%   | | | else return 0.3611200399893474;  // std dev = 0.922, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.2565951072431471;  // std dev = 0.489, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.3876766473547288;  // std dev = 0.342, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then return 0.06301789942529387;  // std dev = 0.431, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.1077828042598987;  // std dev = 0.452, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else return 0.05090880767909398;  // std dev = 0.410, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.420536371897885;  // std dev = 0.075, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return 0.13876671175117947;  // std dev = 2.578, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.09850798788752818;  // std dev = 1.934, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.19737047064289126;  // std dev = 0.488, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.2644736294063742;  // std dev = 0.343, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.5849997866276386;  // std dev = 0.905, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.20944322787888198;  // std dev = 0.028, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.061471377856545266;  // std dev = 0.436, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.04354652740083782;  // std dev = 0.410, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.3249044367407448;  // std dev = 0.071, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.09294783044953141;  // std dev = 2.570, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.15663331131906805;  // std dev = 1.776, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.15090176131551405;  // std dev = 0.487, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.250487905537326;  // std dev = 0.346, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then return 0.11749146314246739;  // std dev = 0.378, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.06430204395310662;  // std dev = 0.439, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0021579259248728664;  // std dev = 0.383, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | else return 0.058526788556352294;  // std dev = 0.430, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.1060452712576679;  // std dev = 0.484, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.23202101815601212;  // std dev = 0.290, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( haswordtitle(H, F) )
%   | | then return 0.014503552547709301;  // std dev = 0.317, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( author(I, G), venue(I, B) )
%   | | | then return 0.08220814598119312;  // std dev = 0.920, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.06667238485103635;  // std dev = 2.882, 42.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return -0.015507603087840539;  // std dev = 0.796, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.08107950813538935;  // std dev = 2.929, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.0046657899915777115;  // std dev = 2.986, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.022228141222620595;  // std dev = 2.970, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.07978783336873203;  // std dev = 0.484, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.18509063479560275;  // std dev = 0.289, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then return 0.009680253821941301;  // std dev = 0.289, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(I, G), venue(I, B) )
%   | | | then return 0.0657496179461691;  // std dev = 0.915, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.05659794610343582;  // std dev = 2.886, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | | then return -0.18259575305673972;  // std dev = 0.054, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.07641751800806648;  // std dev = 4.061, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.03950246572186097;  // std dev = 3.028, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | else return -0.21418801048826588;  // std dev = 0.093, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.43347268634671315;  // std dev = 0.268, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | else return -0.40171869358653123;  // std dev = 0.130, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return -0.01881927807749689;  // std dev = 0.397, 71.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=24 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.4251098989901966;  // std dev = 1.271, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return -0.4099694604425787;  // std dev = 0.596, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return -0.02547083726396245;  // std dev = 0.435, 57.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=16 */
%   | else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | | then return 0.07712670450914973;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return -0.0015660825955321333;  // std dev = 2.966, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.01703298588697316;  // std dev = 2.956, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.05110781729207673;  // std dev = 0.372, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | else return -0.10886019764505385;  // std dev = 0.337, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.048907021439271385;  // std dev = 0.483, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.11287675789212748;  // std dev = 0.343, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, B) )
%   | | then if ( title(K, I), venue(K, A) )
%   | | | then return 0.6330949367551887;  // std dev = 1.835, 29.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=26 */
%   | | | else return -0.19641544298137295;  // std dev = 0.271, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return -0.17326321858159968;  // std dev = 0.095, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.057755063159270495;  // std dev = 0.431, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | else return -0.2050544034102008;  // std dev = 0.151, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */


Results
   AUC ROC   = 0.570983
   AUC PR    = 0.42005
   CLL	      = -0.701961
   Precision = 0.376795 at threshold = 0.5
   Recall    = 0.946494
   F1        = 0.539012


Total learning time: 110.39504289627075 seconds
Total inference time: 12.534 seconds
AUC ROC: 0.570983


Dataset: 3_imdb_cora, Fold: 5, Type: Scratch (RDN-B), Time: 01:55:41
{'AUC ROC': 0.570983, 'AUC PR': 0.42005, 'CLL': -0.701961, 'Precision': [0.376795, 0.5], 'Recall': 0.946494, 'F1': 0.539012, 'Learning time': 110.39504289627075, 'Inference time': 12.534}


Starting fold 1

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos  examples: 2649
Target test neg examples: 4334

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.424815601766179;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3982164798305049;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.3639794304549286;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.3874028246526538;  // std dev = 0.802, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.32650617096328266;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.29632358279621157;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.14974330653669568;  // std dev = 2.784, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14149654570757056;  // std dev = 0.042, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.11669340332070102;  // std dev = 0.028, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.30343404142094477;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.26408411886806127;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.2329605461756211;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.10980429489397554;  // std dev = 0.045, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.003911681670084833;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.2028762322729293;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.230929510166299;  // std dev = 0.799, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.17935901779956;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.1511543121211144;  // std dev = 2.776, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14132683644421207;  // std dev = 0.072, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.11263456227343717;  // std dev = 0.046, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.0034335612113566578;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.17845080388152867;  // std dev = 0.796, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.1592557689226354;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.13461595420966996;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.09698967569353512;  // std dev = 0.040, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0029555940235538526;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.003012785333982893;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.1365017745376904;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.11998228801570768;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.1010629568227401;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.1327424621370666;  // std dev = 2.770, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.12502902053838363;  // std dev = 0.074, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.09493529139832425;  // std dev = 0.047, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.002642729972902494;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.10616436383145167;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.09445609163540207;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07479454674607162;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.040718832577268174;  // std dev = 0.326, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | | then return -0.08784996485462833;  // std dev = 0.059, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0023174771292880513;  // std dev = 2.996, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.006204292255518398;  // std dev = 2.791, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.08208360879247682;  // std dev = 0.792, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.07133021045236591;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.05586525429315821;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.08108353959441444;  // std dev = 0.055, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0011132500383212382;  // std dev = 0.340, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.00203175365233813;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return -0.14473418137539884;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.06484268691084143;  // std dev = 0.791, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return -0.25776946411157137;  // std dev = 0.769, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordtitle(I, C) )
%   | | | then return 0.03842121601487221;  // std dev = 14.115, 843.000 (wgt'ed) examples reached here.  /* #neg=520 #pos=323 */
%   | | | else return 0.05110055037541654;  // std dev = 2.838, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return -0.07526212198505246;  // std dev = 0.051, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 9.760135221669963E-4;  // std dev = 0.339, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.0017808717967980284;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.558488
   AUC PR    = 0.428167
   CLL	      = -0.654572
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 128.86950588226318 seconds
Total inference time: 17.487 seconds
AUC ROC: 0.558488


Results scoring model
   AUC ROC   = 0.595914
   AUC PR    = 0.422655
   CLL	      = -0.61702
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total scoring time: 2.131 seconds
Parameter learned model CLL: -0.61702


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.816, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.714, 13, 17], 'false,true,true': [0.0, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.816, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.714, 13, 17], 'false,true,true': [5.27e-09, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, A)', 'false,true,true': 'samebib(K, L), venue(L, B)', 'false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.802, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.716, 13, 17], 'false,true,true,true': [2.784, 27, 11], 'false,true,true,false': [0.042, 42, 0], 'false,true,false': [0.028, 7, 0], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.8, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.716, 13, 17], 'false,true,true': [0.045, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, B)', 'false,true,true': 'samebib(K, L), venue(L, A)', 'false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [1.095, 2, 3], 'true,false,false,true': [0.799, 1, 2], 'true,false,false,false': [2.716, 13, 17], 'false,true,true,true': [2.776, 27, 11], 'false,true,true,false': [0.072, 42, 0], 'false,true,false': [0.046, 7, 0], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.796, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true,true': [0.04, 12, 0], 'false,true,false': [0.346, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, B)', 'false,true,true': 'samebib(K, L), venue(L, A)', 'false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.794, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true,true,true': [2.77, 27, 11], 'false,true,true,false': [0.074, 42, 0], 'false,true,false': [0.047, 7, 0], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false,true': 'haswordtitle(L, M), haswordvenue(B, M)', 'false,false,false': 'haswordvenue(B, N), haswordtitle(P, N)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.793, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true': [0.326, 7, 1], 'false,false,true,true': [0.059, 12, 0], 'false,false,true,false': [2.996, 64, 11], 'false,false,false,true': [2.791, 57, 10], 'false,false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.792, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true,true': [0.055, 12, 0], 'false,true,false': [0.34, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, C)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'true,false,false': 'haswordtitle(I, C)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)', 'false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true,true': [0.894, 4, 1], 'true,true,false': [0.791, 1, 2], 'true,false,true': [0.769, 5, 1], 'true,false,false,true': [14.115, 520, 323], 'true,false,false,false': [2.838, 14, 19], 'false,true,true': [0.051, 12, 0], 'false,true,false': [0.339, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}]]
[{'': [0.23762656230272572, 0.11496588764697444], 'true': [0.2356675262844691, 0.24376731301939172], 'true,false': [0.22222222222222224, 0.2448979591836734], 'true,false,false': [0.23999999999999994, 0.2455555555555551], 'false': [0.1104505218655035, 0.11985258772632539], 'false,false': [0.12515555555555502, 0.0], 'false,true': [-1.1564823173178714e-17, 0.12515555555555502]}, {'': [0.23716066162823082, 0.11455688633284844], 'true': [0.2356675262844735, 0.24352902641532292], 'true,false': [0.2222222222222222, 0.24485729569956294], 'true,false,false': [0.23999999999999994, 0.24549939133283114], 'false': [0.10989213699570438, 0.1196268538653256], 'false,false': [0.125155555555556, 0.0], 'false,true': [2.3129646346357427e-18, 0.125155555555556]}, {'': [0.23670778123816977, 0.11426488031687218], 'true': [0.23566752628446727, 0.24327409495495106], 'true,false': [0.21418921718306527, 0.24517272216828254], 'true,false,false': [0.23999999999999994, 0.24590470129702532], 'false': [0.10949347876263746, 0.1194656914359021], 'false,false': [0.12515555555555488, 0.0], 'false,true': [0.11802694340978195, 0.00011495009377930632], 'false,true,true': [0.20389987794958447, 4.2574108807192344e-05]}, {'': [0.23636696868136625, 0.11173833815389334], 'true': [0.23566752628446358, 0.24295357235292378], 'true,false': [0.2130884730597966, 0.24516925902296924], 'true,false,false': [0.24, 0.24589241979672952], 'false': [0.109435906756026, 0.11421156581709418], 'false,false': [0.11973920677450375, 0.0], 'false,true': [0.00016862660761781065, 0.12515555555555585]}, {'': [0.2361611592202181, 0.11153795117024125], 'true': [0.235667526284474, 0.24273990005594345], 'true,false': [0.24, 0.2431083876405384], 'true,false,false': [0.21258059131790366, 0.24591939311980662], 'false': [0.10915897713879817, 0.11410714620620822], 'false,false': [0.11972501336090415, 0.0], 'false,true': [0.11770652256678063, 0.00029845812976917504], 'false,true,true': [0.20275552167638322, 0.00012344755788991292]}, {'': [0.2360542329480941, 0.10899611163932797], 'true': [0.23566752628446164, 0.24263309874428507], 'true,false': [0.21102325625054716, 0.24521420150689], 'true,false,false': [0.23999999999999994, 0.24599650359578737], 'false': [0.10438774155659221, 0.11402506882682781], 'false,false': [0.11971254226212044, 0.0], 'false,true': [0.0001330569773529249, 0.11969069013219165]}, {'': [0.23600224978845077, 0.10885320955716225], 'true': [0.23566752628447166, 0.24255971947249289], 'true,false': [0.21035291459565864, 0.24523569885001634], 'true,false,false': [0.24, 0.24605718088319212], 'false': [0.10418185469397291, 0.11395940712379737], 'false,false': [0.11970158989245235, 0.0], 'false,true': [0.11258431766778168, 0.00031177323858067637], 'false,true,true': [0.20198943969206476, 0.00013205396128798279]}, {'': [0.23597836050744359, 0.10686184056676362], 'true': [0.23566752628446394, 0.24252218216222649], 'true,false': [0.20952921421154527, 0.24528575093739735], 'true,false,false': [0.23999999999999994, 0.2461114842344729], 'false': [0.1059722026415445, 0.10684469337391261], 'false,false': [0.1041897554044258, 0.11002063705381993], 'false,false,false': [0.1162334059824044, 0.0], 'false,false,true': [0.0002921148849668563, 0.11969197546079118]}, {'': [0.23596713184201032, 0.10672386085613902], 'true': [0.23566752628446355, 0.2424930351597494], 'true,false': [0.20921277861979604, 0.24530012049709177], 'true,false,false': [0.24, 0.24614930750341557], 'false': [0.10020595045020435, 0.11386224912311366], 'false,false': [0.11968353872137077, 0.0], 'false,true': [0.00025237990718041, 0.11526661660247742]}, {'': [0.23596202454361873, 0.1066393171560151], 'true': [0.18855664250583482, 0.2362965998934015], 'true,false': [0.09845905743088824, 0.23664197090972142], 'true,false,false': [0.23634733884098366, 0.244013771744805], 'true,true': [0.16000000000000003, 0.20869950685680871], 'false': [0.10008335131505323, 0.11382580299645619], 'false,false': [0.1196761378712387, 0.0], 'false,true': [0.00022007382623348212, 0.11525978560214481]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
0;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
0;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
1;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
1;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
2;false,true;title(K, J), venue(K, A).;true;true
2;false,true,true;samebib(K, L), venue(L, B).;true;true
2;false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
3;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
4;false,true;title(K, J), venue(K, B).;true;true
4;false,true,true;samebib(K, L), venue(L, A).;true;true
4;false,false;haswordvenue(A, M), haswordtitle(N, M).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
5;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
6;false,true;title(K, J), venue(K, B).;true;true
6;false,true,true;samebib(K, L), venue(L, A).;true;true
6;false,false;haswordvenue(A, M), haswordtitle(N, M).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(A, I), haswordauthor(J, I).;true;true
7;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;true
7;false,false,true;haswordtitle(L, M), haswordvenue(B, M).;true;true
7;false,false,false;haswordvenue(B, N), haswordtitle(P, N).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
8;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
8;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(B, J), haswordtitle(K, J).;true;true
9;false,true;haswordtitle(K, L), haswordvenue(A, L).;true;true
9;false,false;haswordvenue(A, M), haswordtitle(N, M).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.424815601766179;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.45935396641210174;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3982164798305049;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.36287359443791467;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.37391135762433364;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.3269052770205085;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.2976445171077738;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.14974330653669568;  // std dev = 2.784, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14149654570757056;  // std dev = 0.042, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.11669340332070102;  // std dev = 0.028, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.3022417434729106;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.26358767085800217;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.23316088123073275;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.10980429489397554;  // std dev = 0.045, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.003911681670084833;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.2299388596657689;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.20246239867675433;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.1795217825800618;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.09953837016457324;  // std dev = 0.041, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0028554031467501392;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0034335612113566578;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.1806594475641056;  // std dev = 0.795, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.15956320296174878;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.13433781486879628;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.029299214164223333;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.09097804211946432;  // std dev = 0.038, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.002503460836945874;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.006870934527798597;  // std dev = 2.848, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return -0.10539005564974935;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.13565838545117492;  // std dev = 0.795, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.07595587115072004;  // std dev = 0.486, 847.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=323 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.11994599106787832;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10114699894606155;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then return -0.0019093416068778752;  // std dev = 0.343, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | else return -0.09822051799503702;  // std dev = 0.057, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.002666332662024598;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05876995206281021;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.10779397503097854;  // std dev = 0.792, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.08997142901951016;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07537317525637986;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.02586206570728004;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return -0.0016810295469099645;  // std dev = 3.066, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.0898974638540546;  // std dev = 0.052, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.005705390589899178;  // std dev = 2.847, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04581813968556683;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.07562317716649036;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.08150212828809611;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.05520362100023945;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.13422510388242273;  // std dev = 2.763, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.12550651098372148;  // std dev = 0.091, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.08458190033166971;  // std dev = 0.051, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.0029213863207190505;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03554341140187514;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.0659270051580495;  // std dev = 0.791, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.053808408177053346;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.0415403854194999;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.1158945621670646;  // std dev = 2.760, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.11238771939843208;  // std dev = 0.082, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.07828722342213078;  // std dev = 0.048, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.002561457686413367;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.557092
   AUC PR    = 0.428324
   CLL	      = -0.654225
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 132.13044786453247 seconds
Total inference time: 16.495 seconds
AUC ROC: 0.557092


Results scoring model
   AUC ROC   = 0.592458
   AUC PR    = 0.42035
   CLL	      = -0.618098
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total scoring time: 2.069 seconds
Refined model CLL: -0.618098


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.558488
   AUC PR    = 0.428167
   CLL	      = -0.654572
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 265.19995374679564 seconds
Total inference time: 17.487 seconds
AUC ROC: 0.558488
Total revision time: 265.19995374679564
Best scored revision CLL: -0.61702


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 02:00:44
{'AUC ROC': 0.558488, 'AUC PR': 0.428167, 'CLL': -0.654572, 'Precision': [0.637427, 0.5], 'Recall': 0.041148, 'F1': 0.077305, 'Learning time': 265.19995374679564, 'Inference time': 17.487, 'parameter': {'AUC ROC': 0.558488, 'AUC PR': 0.428167, 'CLL': -0.654572, 'Precision': [0.637427, 0.5], 'Recall': 0.041148, 'F1': 0.077305, 'Learning time': 128.86950588226318, 'Inference time': 17.487}}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.424815601766179;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.14762261931003867;  // std dev = 2.796, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14185106490048768;  // std dev = 4.47e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.3982164798305049;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.45935396641210174;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.36287359443791467;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.1488242116562869;  // std dev = 2.789, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14162905569876189;  // std dev = 0.023, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.14806844971629635;  // std dev = 0.041, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.005199750239144804;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.37391135762433364;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.3269052770205085;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.2976445171077738;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.12986161377332106;  // std dev = 2.788, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.12527046955465745;  // std dev = 0.021, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.13037700873059951;  // std dev = 0.037, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.004568660166365278;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.3022417434729106;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.26358767085800217;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.23316088123073275;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.03819253858496602;  // std dev = 0.326, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | | then return -0.128150702670338;  // std dev = 0.086, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.004012232942941105;  // std dev = 2.997, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.008375075101623356;  // std dev = 2.793, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.20322270711158522;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.2293423044508296;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1794547200290839;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.11336363169802445;  // std dev = 2.779, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.11224131175256985;  // std dev = 0.036, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.10564196170326075;  // std dev = 0.031, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.0035220811797056916;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.1587969602278804;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.13866513731436347;  // std dev = 0.493, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.09632428276439228;  // std dev = 2.778, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.10153740718108659;  // std dev = 0.032, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.09608114095768873;  // std dev = 0.028, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.0030906559935836766;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.14677217827113564;  // std dev = 0.795, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.11936132675527036;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10013327862659592;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.11246458193386943;  // std dev = 0.146, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return -0.0011242143398341575;  // std dev = 0.331, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.002711187991890718;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.09422280440311451;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.11040743241118;  // std dev = 0.795, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.07439057996606978;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.10189322831330033;  // std dev = 0.134, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return -9.866490761624952E-4;  // std dev = 0.331, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.002377625936246762;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.08819826806729647;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.07096573611520487;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.0552923959223524;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.08417202653072489;  // std dev = 2.767, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.0918480745572361;  // std dev = 0.048, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.07468008479701276;  // std dev = 0.030, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.002084575329099192;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03554750876544446;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.06754218927977156;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.056950597994186;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.04083979868579921;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.09338569380613333;  // std dev = 0.148, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return -0.003329183515342517;  // std dev = 0.328, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0018272385261187333;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.558315
   AUC PR    = 0.428696
   CLL	      = -0.650368
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 146.18746280670166 seconds
Total inference time: 21.018 seconds
AUC ROC: 0.558315


Dataset: 3_imdb_cora, Fold: 1, Type: Scratch (RDN-B), Time: 02:03:32
{'AUC ROC': 0.558315, 'AUC PR': 0.428696, 'CLL': -0.650368, 'Precision': [0.637427, 0.5], 'Recall': 0.041148, 'F1': 0.077305, 'Learning time': 146.18746280670166, 'Inference time': 21.018}


Starting fold 2

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos  examples: 2246
Target test neg examples: 4478

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.5791684237702857;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.22916842377028543;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.008145345695425868;  // std dev = 0.852, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.07083157622971455;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.3045453081923796;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.4047531668618019;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.4246457186582997;  // std dev = 1.908, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.4317030979309822;  // std dev = 0.348, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.5118627986468952;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.18162271221626702;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.06570188218847453;  // std dev = 0.846, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.13495415790755155;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.23990098036198;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.3098169854894562;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.32456036871644;  // std dev = 1.905, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.3516330930685386;  // std dev = 0.335, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.1316730160126654;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.18613079633684695;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.23288770051702257;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.20738703360610133;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.3712569085691976;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.36332570147106397;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.10395681007912147;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.10354034558269198;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14105921081951764;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.17498421379444495;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.15570970363466996;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.2894441187864921;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.2840857557415314;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.08081634704127262;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.08048520911847132;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.30842066410679425;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.06277364461816058;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1352012238434047;  // std dev = 1.222, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.10451937507768833;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.1468215107291236;  // std dev = 1.915, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.1315584418539539;  // std dev = 1.897, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.22998958852745188;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.06231133890180871;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.062053704514323335;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07967429447913073;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.10111827571434315;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.08250706164547324;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.210970082526564;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.19179950491220893;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.04776677755083309;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.047569338903151896;  // std dev = 0.489, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.059802721570391584;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.09226738392708912;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.04743863341688123;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.17798520183922117;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.16380856879608713;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.03646955440800169;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.03631983068294583;  // std dev = 0.489, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.2459847356603948;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.012541318366826926;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.16683671784260173;  // std dev = 0.833, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.23778613652495517;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.043259076418185334;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.07142505840345097;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.06334378349985;  // std dev = 1.893, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.10746704581416452;  // std dev = 0.316, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.027765379891893788;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.537405
   AUC PR    = 0.346126
   CLL	      = -0.755917
   Precision = 0.353871 at threshold = 0.5
   Recall    = 0.956367
   F1        = 0.516595


Total learning time: 125.29557514190674 seconds
Total inference time: 13.414 seconds
AUC ROC: 0.537405


Results scoring model
   AUC ROC   = 0.553514
   AUC PR    = 0.660736
   CLL	      = -0.665354
   Precision = 0.594317 at threshold = 0.5
   Recall    = 0.976654
   F1        = 0.73896


Total scoring time: 2.073 seconds
Parameter learned model CLL: -0.665354


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [7.3e-08, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'haswordvenue(B, C)', 'true,false,false': 'author(F, D), venue(F, B)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)'}, {'true,true': [0.357, 3, 17], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.852, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.494, 507, 687], 'false,true,false,true': [1.919, 5, 14], 'false,true,false,false': [1.908, 5, 17], 'false,false,true': [0.348, 7, 26], 'false,false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(F, D), venue(F, A)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)'}, {'true,true': [0.356, 3, 17], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.846, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.494, 507, 687], 'false,true,false,true': [1.919, 5, 14], 'false,true,false,false': [1.905, 5, 17], 'false,false,true': [0.335, 7, 26], 'false,false,false': [0.49, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)'}, {'true,true': [0.492, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [1.05e-08, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.49, 8, 6], 'false,false': [0.49, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)'}, {'true,true': [0.492, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.49, 8, 6], 'false,false': [0.49, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,false': 'haswordvenue(A, D)', 'true,false': 'haswordtitle(G, C)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true,true': [0.356, 3, 17], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.222, 6, 2], 'true,false,true': [0.493, 507, 687], 'true,false,false,true': [1.915, 5, 14], 'true,false,false,false': [1.897, 5, 17], 'false,true,true': [1.49e-08, 0, 20], 'false,true,false': [0.49, 8, 6], 'false,false': [0.49, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)'}, {'true,true': [0.492, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [7.45e-09, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.49, 8, 6], 'false,false': [0.489, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)'}, {'true,true': [0.492, 518, 708], 'true,false,true': [0.439, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [2.11e-08, 0, 20], 'false,true,false': [0.49, 8, 6], 'false,false': [0.489, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'haswordvenue(B, C)', 'true,false,false': 'author(F, D), venue(F, B)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)'}, {'true,true': [0.356, 3, 17], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.833, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.493, 507, 687], 'false,true,false,true': [1.914, 5, 14], 'false,true,false,false': [1.893, 5, 17], 'false,false,true': [0.316, 7, 26], 'false,false,false': [0.49, 8, 6]}]]
[{'': [0.24306651325713594, 0.22222222222222385], 'true': [0.24399564626142126, 0.1844140392623454], 'false': [0.17993079584775207, 0.24489795918367352], 'true,false': [0.19390581717451486, 0.17561983471074338], 'false,true': [-8.881784197001253e-17, 0.24489795918367352], 'true,false,false': [0.20761245674740453, 0.0]}, {'': [0.24265720194658638, 0.1968581969586747], 'true': [0.2439956462613994, 0.18151807630785097], 'false': [0.15465453537750243, 0.24489795918367324], 'true,false': [0.193905817174515, 0.17043669583228802], 'true,false,false': [0.20761245674740458, 0.0], 'false,true': [2.6645352591003756e-16, 0.24489795918367324]}, {'': [0.22952352137572604, 0.2399408807915938], 'false': [0.2425357552287179, 0.16862805083149535], 'false,true': [0.24431832529482975, 0.17873720595178558], 'true': [0.12749999999999978, 0.21079846857026777], 'true,false': [0.25, 0.17058790973374105], 'false,true,false': [0.1939058171745152, 0.1654536622329366], 'true,false,false': [0.18163970606836305, 0.16000000000000003], 'false,false': [0.12142920769740277, 0.2448979591836735]}, {'': [0.22681392071940695, 0.23867839580048356], 'false': [0.24158712821313155, 0.16041315924103167], 'false,true': [0.2435535975744991, 0.17846373208604321], 'true': [0.12673759051228348, 0.21175330992800884], 'true,false': [0.24999999999999997, 0.16962230622100344], 'false,true,false': [0.1939058171745152, 0.16502665466276994], 'true,false,false': [0.17898581250155157, 0.16], 'false,false': [0.11214733462026115, 0.2402119567889687]}, {'': [0.24036328540894694, 0.15641266086163155], 'true': [0.24234079763121583, 0.17850681904003898], 'true,false': [0.19390581717451524, 0.1651437859024073], 'true,false,false': [0.20761245674740478, 2.2204460492503132e-17], 'false': [0.11518654799147499, 0.23995479322607965], 'false,true': [-4.4408920985006264e-17, 0.24016686421852354]}, {'': [0.24025604220886856, 0.1499869740243984], 'true': [0.2422979511176551, 0.17765813695300836], 'true,false': [0.19390581717451524, 0.16356874957890366], 'true,false,false': [0.2076124567474049, -1.1102230246251566e-17], 'false': [0.10882578023121689, 0.23976663203009352], 'false,true': [-1.1102230246251566e-17, 0.23998620849484845]}, {'': [0.240209681379495, 0.14669453721450326], 'true': [0.19376516298844404, 0.24131863678235513], 'true,false': [0.2434801524270751, 0.17724607271101334], 'true,true': [0.12670711822006014, 0.21640068522205677], 'true,true,false': [0.25000000000000006, 0.18653634498562707], 'true,false,false': [0.19304177542057807, 0.16349637179944698], 'false': [0.10557429635841463, 0.23963075719913615], 'false,true': [1.1102230246251566e-17, 0.23985589890550804]}, {'': [0.23977311791545547, 0.14484367851686972], 'true': [0.24183402939925872, 0.17743494995380626], 'true,false': [0.19371148940815117, 0.16332601731593094], 'true,false,false': [0.20761245674740494, 1.1102230246251566e-17], 'false': [0.10375049219047827, 0.2395330277330338], 'false,true': [-3.3306690738754695e-17, 0.23976228894510318]}, {'': [0.23976238562424965, 0.14370012173967703], 'true': [0.24183794681257975, 0.1771252255821111], 'true,false': [0.19287021095869927, 0.16342079210394952], 'true,false,false': [0.20761245674740486, 0.0], 'false': [0.10262547427655448, 0.2394626133174593], 'false,true': [2.2204460492503132e-17, 0.23969492726849775]}, {'': [0.19190574523524428, 0.23733288459226518], 'false': [0.24087336537015128, 0.14278463394612945], 'false,true': [0.24305563261111635, 0.1767724830286447], 'true': [0.1264374701011175, 0.20283182116579684], 'true,false': [0.25, 0.16713865360979294], 'false,true,false': [0.19289980740899457, 0.1628140750242181], 'true,false,false': [0.17326540394905418, 0.16000000000000003], 'false,false': [0.09979964985017206, 0.23964621763665692]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
0;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
0;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
1;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
1;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
4;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
4;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
4;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
5;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
5;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(B, J), haswordtitle(K, J).;true;true
6;false,true;haswordtitle(K, L), haswordvenue(A, L).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
7;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
7;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
8;true,false,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
8;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
8;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.30665618885999163;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.4047531668618019;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.386198448632422;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24206322397592006;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.3261448737160187;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2788572331674748;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.18614898381430323;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.24558668125641062;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.20966773150020385;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.3207118471601496;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.4135394151203006;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.06353941512030048;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.18646058487969952;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.13891629954241463;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.18620428986064227;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.1780591823696338;  // std dev = 1.889, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.25517224256948945;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.10762034996184425;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.10762034996184425;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.31058191631929993;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.04785303348920687;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.1296592592627378;  // std dev = 0.853, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.19126456267758712;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.10449961029747841;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.14069831902044802;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.1370524169548924;  // std dev = 1.891, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.1730966901640679;  // std dev = 0.316, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.08372807955323866;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.34712684181837067;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.03597442006497721;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.21372625367446108;  // std dev = 0.835, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.29696921335424414;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.07749966332952178;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.10809142114220006;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.10603568943105794;  // std dev = 1.894, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.14903292701371912;  // std dev = 0.316, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.04855589785820539;  // std dev = 0.491, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.2615062636147569;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.02701674504348707;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.16185572016233032;  // std dev = 0.836, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.2233362627098598;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.05815959580525699;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.08291846669139255;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.08369542521132893;  // std dev = 1.896, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.12234209533307668;  // std dev = 0.317, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.0370667099492691;  // std dev = 0.491, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.20008713800161151;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.020277769513826316;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.12374918034246228;  // std dev = 0.837, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.169950594095789;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.04367642529287167;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.06440308220491192;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.0664292065240363;  // std dev = 1.898, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.10103324084007531;  // std dev = 0.318, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.028213836895231794;  // std dev = 0.491, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.536048
   AUC PR    = 0.344849
   CLL	      = -0.756909
   Precision = 0.353871 at threshold = 0.5
   Recall    = 0.956367
   F1        = 0.516595


Total learning time: 131.36008596420288 seconds
Total inference time: 13.042 seconds
AUC ROC: 0.536048


Results scoring model
   AUC ROC   = 0.553717
   AUC PR    = 0.662696
   CLL	      = -0.664942
   Precision = 0.594317 at threshold = 0.5
   Recall    = 0.976654
   F1        = 0.73896


Total scoring time: 2.126 seconds
Refined model CLL: -0.664942


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.536048
   AUC PR    = 0.344849
   CLL	      = -0.756909
   Precision = 0.353871 at threshold = 0.5
   Recall    = 0.956367
   F1        = 0.516595


Total learning time: 260.8546611061096 seconds
Total inference time: 13.042 seconds
AUC ROC: 0.536048
Total revision time: 260.8546611061096
Best scored revision CLL: -0.664942


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 02:08:24
{'AUC ROC': 0.536048, 'AUC PR': 0.344849, 'CLL': -0.756909, 'Precision': [0.353871, 0.5], 'Recall': 0.956367, 'F1': 0.516595, 'Learning time': 260.8546611061096, 'Inference time': 13.042, 'parameter': {'AUC ROC': 0.537405, 'AUC PR': 0.346126, 'CLL': -0.755917, 'Precision': [0.353871, 0.5], 'Recall': 0.956367, 'F1': 0.516595, 'Learning time': 125.29557514190674, 'Inference time': 13.414}}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.30665618885999163;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.4047531668618019;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.386198448632422;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24206322397592006;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.3261448737160187;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2788572331674748;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.4586612187245652;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.10866121872456526;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.11648547966105265;  // std dev = 0.841, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.19133878127543472;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.18403810314669028;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.24558668125641062;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.23490503051382786;  // std dev = 1.891, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.2611880142597033;  // std dev = 0.321, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.3457568443635729;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.08249570247950498;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.0900883934293364;  // std dev = 0.842, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.1468244987374847;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.1394354277206239;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.1843926491048414;  // std dev = 1.915, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.17858400017571843;  // std dev = 1.894, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.20606636791210747;  // std dev = 0.322, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.10762034996184425;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.3735582758035207;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.06230725960603323;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.22048070448753695;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.10397218897875772;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.1369486899938656;  // std dev = 1.915, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.13930855531252126;  // std dev = 1.895, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.2283314617491521;  // std dev = 2.58e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.08372807955323866;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.04217226805318768;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.2808740757417371;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( author(F, D), venue(F, A) )
%   | | then return -0.1530941615974546;  // std dev = 0.852, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(A, C) )
%   | | | then return 0.04691756632035203;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.2161264239182355;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.22750238057979139;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.09843484545237562;  // std dev = 1.219, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordtitle(K, G) )
%   | | | then return 0.07682533852190344;  // std dev = 16.896, 1,167.000 (wgt'ed) examples reached here.  /* #neg=498 #pos=669 */
%   | | | else return 0.10653677350264006;  // std dev = 2.696, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else return 0.11767538269836089;  // std dev = 0.379, 47.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05988698429743253;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.08017312000770332;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.05272583952248852;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.19625980996774472;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.17310725881165784;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.041371552868019856;  // std dev = 0.491, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.003896347370833299;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.166637172360606;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.020343627188602817;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.0897432991229901;  // std dev = 1.219, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.04396047768365089;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.06233283784778512;  // std dev = 1.916, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.06957313811715725;  // std dev = 1.895, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.14971083057095597;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.03152127903346827;  // std dev = 0.491, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.002950168181403312;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.53717
   AUC PR    = 0.345535
   CLL	      = -0.756599
   Precision = 0.353871 at threshold = 0.5
   Recall    = 0.956367
   F1        = 0.516595


Total learning time: 130.96679210662842 seconds
Total inference time: 14.271 seconds
AUC ROC: 0.53717


Dataset: 3_imdb_cora, Fold: 2, Type: Scratch (RDN-B), Time: 02:10:50
{'AUC ROC': 0.53717, 'AUC PR': 0.345535, 'CLL': -0.756599, 'Precision': [0.353871, 0.5], 'Recall': 0.956367, 'F1': 0.516595, 'Learning time': 130.96679210662842, 'Inference time': 14.271}


Starting fold 3

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos  examples: 2436
Target test neg examples: 2800

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.14075763075168626;  // std dev = 0.450, 46.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=13 */
%   | else return 0.23094667999027554;  // std dev = 0.484, 1,419.000 (wgt'ed) examples reached here.  /* #neg=890 #pos=529 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then return -0.05489454316135737;  // std dev = 0.282, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.05567979929704324;  // std dev = 3.583, 81.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=16 */
%   | | | else return -0.024204006076958388;  // std dev = 1.328, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.037924215998388786;  // std dev = 3.623, 89.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=16 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18373721058550826;  // std dev = 0.479, 1,531.000 (wgt'ed) examples reached here.  /* #neg=986 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.01029924511358062;  // std dev = 0.331, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 0.03305316209084818;  // std dev = 3.618, 88.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=16 */
%   | | | else return -0.033667031919635604;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else return 0.007721099118840711;  // std dev = 0.361, 104.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=16 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.15517253051585667;  // std dev = 0.475, 43.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=15 */
%   | | else return -0.0673491347029751;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.13317676712616394;  // std dev = 0.471, 39.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=13 */
%   | | else return 0.15743179138118782;  // std dev = 0.479, 1,443.000 (wgt'ed) examples reached here.  /* #neg=927 #pos=516 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.6156821626585317;  // std dev = 1.955, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.144986292952931;  // std dev = 0.042, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else return -0.05658969547860952;  // std dev = 0.287, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.014262028566798972;  // std dev = 0.369, 110.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=18 */
%   | | else return -0.12629415961848037;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13718703205365995;  // std dev = 0.481, 1,500.000 (wgt'ed) examples reached here.  /* #neg=955 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5724158943587009;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.1545585001319358;  // std dev = 0.019, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.13662502022785492;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.06337497977214505;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.012581704589926156;  // std dev = 3.281, 97.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
%   | | | else return -0.04961493664850115;  // std dev = 1.348, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else return -0.11536871890380589;  // std dev = 0.006, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10811218082783902;  // std dev = 0.480, 1,517.000 (wgt'ed) examples reached here.  /* #neg=972 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.516743719672642;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.13480692352512938;  // std dev = 0.029, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.12129389240593581;  // std dev = 6.45e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.0014170957176938043;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.01815041660208151;  // std dev = 3.263, 92.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=16 */
%   | | | else return -0.0513045389874869;  // std dev = 1.354, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | else return -0.10287213279261206;  // std dev = 0.006, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08437429221672589;  // std dev = 0.479, 1,529.000 (wgt'ed) examples reached here.  /* #neg=984 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.59596638699897;  // std dev = 1.594, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.13144304804289153;  // std dev = 0.037, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else return 0.15694268331997793;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.002154029876782459;  // std dev = 2.902, 89.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=16 */
%   | | | else return -0.04758442643891784;  // std dev = 1.337, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | else return -0.09390120562526227;  // std dev = 0.005, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07163267105208933;  // std dev = 0.480, 1,511.000 (wgt'ed) examples reached here.  /* #neg=966 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( title(G, E), venue(G, B) )
%   | | | then return 0.2897874026892256;  // std dev = 2.096, 28.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   | | | else return -0.11748136451203497;  // std dev = 0.029, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.11473043037813098;  // std dev = 9.13e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0.07479465342628354;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return 0.0071011498565968605;  // std dev = 0.286, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else return 0.004139330282351694;  // std dev = 0.306, 95.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=16 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04696359908780291;  // std dev = 0.477, 1,553.000 (wgt'ed) examples reached here.  /* #neg=1,008 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( title(G, E), venue(G, B) )
%   | | | then return 0.37076279115066635;  // std dev = 1.928, 24.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | | | else return -0.12141064165458931;  // std dev = 0.241, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | else return 0.08339873250590503;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.016056385892549815;  // std dev = 0.253, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return -0.02413641981092359;  // std dev = 2.779, 106.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=16 */
%   | | | else return -0.08567024555207707;  // std dev = 0.000201, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0449246716428538;  // std dev = 0.479, 1,519.000 (wgt'ed) examples reached here.  /* #neg=974 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.363002688569106;  // std dev = 1.793, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.10909778980804699;  // std dev = 0.132, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | else return 0.0960906795122316;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.01683274418474295;  // std dev = 2.638, 92.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=16 */
%   | | | else return 0.10090254979153679;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return -0.07921149077800908;  // std dev = 0.000176, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0357675595355067;  // std dev = 0.480, 1,516.000 (wgt'ed) examples reached here.  /* #neg=971 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.23300365961712718;  // std dev = 2.278, 24.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | | | else return -0.11207681347630732;  // std dev = 0.174, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else return 0.03764307591152542;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return -0.038404117602136224;  // std dev = 2.493, 96.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=16 */
%   | | | else return 0.05537969626393804;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return -0.07772585986880375;  // std dev = 0.010, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.564372
   AUC PR    = 0.510458
   CLL	      = -0.705684
   Precision = 0.598684 at threshold = 0.5
   Recall    = 0.037356
   F1        = 0.070325


Total learning time: 104.15590691566467 seconds
Total inference time: 12.278 seconds
AUC ROC: 0.564372


Results scoring model
   AUC ROC   = 0.594695
   AUC PR    = 0.2814
   CLL	      = -0.511746
   Precision = 0.64 at threshold = 0.5
   Recall    = 0.027539
   F1        = 0.052805


Total scoring time: 2.996 seconds
Parameter learned model CLL: -0.511746


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, B)', 'false,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true': [0.866, 1, 3], 'true,true,false': [0.45, 33, 13], 'true,false': [0.484, 890, 529], 'false,true': [0.282, 21, 2], 'false,false,true,true': [3.583, 65, 16], 'false,false,true,false': [1.328, 15, 2], 'false,false,false,true': [3.623, 73, 16], 'false,false,false,false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,false': 'haswordvenue(B, F), haswordtitle(G, F)', 'false,false,true': 'title(H, G), venue(H, B)'}, {'true': [0.479, 986, 545], 'false,true': [0.331, 14, 2], 'false,false,true,true': [3.618, 72, 16], 'false,false,true,false': [1.338, 17, 2], 'false,false,false': [0.361, 88, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, C)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, A)', 'false,true,true': 'samebib(K, L), venue(L, B)', 'false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true,true': [0.475, 28, 15], 'true,true,false': [0.894, 4, 1], 'true,false,true': [0.471, 26, 13], 'true,false,false': [0.479, 927, 516], 'false,true,true,true': [1.955, 5, 16], 'false,true,true,false': [0.042, 64, 0], 'false,true,false': [0.287, 20, 2], 'false,false,true': [0.369, 92, 18], 'false,false,false': [5.27e-09, 6, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,true,false': 'title(H, E), venue(H, A)', 'false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, A)'}, {'true': [0.481, 955, 545], 'false,true,true,true': [2.089, 6, 16], 'false,true,true,false': [0.019, 64, 0], 'false,true,false,true': [0.0, 9, 0], 'false,true,false,false': [1.265, 8, 2], 'false,false,true,true': [3.281, 81, 16], 'false,false,true,false': [1.348, 20, 2], 'false,false,false': [0.006, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,true,false': 'title(H, E), venue(H, A)', 'false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, A)'}, {'true': [0.48, 972, 545], 'false,true,true,true': [1.952, 5, 16], 'false,true,true,false': [0.029, 58, 0], 'false,true,false,true': [6.45e-09, 8, 0], 'false,true,false,false': [1.309, 12, 2], 'false,false,true,true': [3.263, 76, 16], 'false,false,true,false': [1.354, 22, 2], 'false,false,false': [0.006, 7, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false,false,true': 'title(J, I), venue(J, B)'}, {'true': [0.479, 984, 545], 'false,true,true,true': [1.594, 3, 16], 'false,true,true,false': [0.037, 72, 0], 'false,true,false': [0.452, 5, 2], 'false,false,true,true': [2.902, 73, 16], 'false,false,true,false': [1.337, 22, 2], 'false,false,false': [0.005, 6, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,true': 'title(G, E), venue(G, B)', 'false,true,false': 'title(H, E), venue(H, B)', 'false,false': 'haswordvenue(A, I), haswordauthor(J, I)'}, {'true': [0.48, 966, 545], 'false,true,true,true': [2.096, 12, 16], 'false,true,true,false': [0.029, 52, 0], 'false,true,false,true': [9.13e-09, 13, 0], 'false,true,false,false': [1.247, 7, 2], 'false,false,true': [0.286, 10, 2], 'false,false,false': [0.306, 79, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,true': 'title(G, E), venue(G, B)', 'false,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,false,false': 'haswordvenue(A, J), haswordtitle(K, J)'}, {'true': [0.477, 1, 545], 'false,true,true,true': [1.928, 8, 16], 'false,true,true,false': [0.241, 75, 0], 'false,true,false': [0.416, 7, 2], 'false,false,true': [0.253, 10, 2], 'false,false,false,true': [2.779, 90, 16], 'false,false,false,false': [0.000201, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false,false,true': 'title(J, I), venue(J, A)'}, {'true': [0.479, 974, 545], 'false,true,true,true': [1.793, 4, 16], 'false,true,true,false': [0.132, 77, 0], 'false,true,false': [0.433, 6, 2], 'false,false,true,true': [2.638, 76, 16], 'false,false,true,false': [1.225, 6, 2], 'false,false,false': [0.000176, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false,false,true': 'title(J, I), venue(J, B)'}, {'true': [0.48, 971, 545], 'false,true,true,true': [2.278, 8, 16], 'false,true,true,false': [0.174, 72, 0], 'false,true,false': [0.4, 8, 2], 'false,false,true,true': [2.493, 80, 16], 'false,false,true,false': [1.247, 7, 2], 'false,false,false': [0.01, 3, 0]}]]
[{'': [0.2333591756292035, 0.14044832374528973], 'true': [0.2175999999999995, 0.23381958629511265], 'true,true': [0.18750000000000006, 0.20274102079395034], 'false': [0.07939508506616262, 0.1469252077562338], 'false,false': [0.14993752603081995, 0.14366729678638887], 'false,false,true': [0.15851242188690695, 0.10380622837370246], 'false,false,false': [0.14745612927660595, 0.0]}, {'': [0.22916791863238206, 0.13323824528053194], 'false': [0.10937499999999994, 0.13500422493476114], 'false,false': [0.13971910261757975, 0.13006113194250532], 'false,false,true': [0.14876033057851268, 0.09418282548476456]}, {'': [0.22935747820642755, 0.13494350483807793], 'true': [0.22322772691290982, 0.2295367168049724], 'true,false': [0.22222222222222193, 0.22971892410560235], 'true,true': [0.22542188281812758, 0.15999999999999998], 'false': [0.13985635326747492, 0.13029674357677992], 'false,true': [0.15262716754170405, 0.08264462809917356], 'false,true,true': [0.18202907606360513, 2.735470079228558e-05], 'false,false': [0.13638197443766573, 4.625929269271485e-18]}, {'': [0.23116189478621155, 0.12152647095473917], 'false': [0.14159340301945797, 0.1040352585342829], 'false,true': [0.1513547865812436, 0.0941828254847645], 'false,true,true': [0.19834710743801642, 5.607154278823578e-06], 'false,false': [0.10632424580305112, 1.1190304429913034e-05], 'false,false,true': [0.11097971025889188, 0.08264462809917356], 'false,true,false': [-3.0839528461809902e-18, 0.15999999999999998]}, {'': [0.23009959914956585, 0.11134276376173834], 'false': [0.12141175667482389, 0.10284619544688055], 'false,true': [0.1310817210344123, 0.0812474704738015], 'false,true,true': [0.18140589569160967, 1.4278243112945236e-05], 'false,false': [0.10840477592713407, 5.152342194067064e-06], 'false,false,true': [0.11575867938520559, 0.07638888888888891], 'false,true,false': [5.204170427930421e-18, 0.12244897959183676]}, {'': [0.22933216068953483, 0.10341281421635086], 'false': [0.12290908293260869, 0.08652572967288347], 'false,true': [0.115333989435968, 0.2040816326530612], 'false,true,true': [0.13367032278302868, 1.8693730512254263e-05], 'false,false': [0.09075124377809733, 4.958147304206378e-06], 'false,false,true': [0.09461314524733097, 0.0744815448627557]}, {'': [0.23049972943270844, 0.09155531922700133], 'false': [0.09044487517946996, 0.09258883597886125], 'false,false': [0.08188318345732132, 0.09394014511117213], 'false,true': [0.09264885364662008, 0.0793901525557385], 'false,true,true': [0.1568668273970813, 1.6197645891575112e-05], 'false,true,false': [6.4051328343759035e-18, 0.17283950617283952]}, {'': [0.22767288476427563, 0.0798479199762823], 'false': [0.09068289344112959, 0.0699081543967407], 'false,true': [0.08260499987644973, 0.17283950617283955], 'false,true,true': [0.15482384786663614, 0.0007714078021817213], 'false,false': [0.06417063070789714, 0.07035698356791097], 'false,false,false': [0.07287427600004608, 1.0104545708836121e-08]}, {'': [0.22984809076943644, 0.08142088630155708], 'false': [0.0795840944307665, 0.08327538458573244], 'false,false': [0.0856235033534673, 1.0379136987370696e-08], 'false,false,true': [0.07565574960230216, 0.1875], 'false,true': [0.06979762486680495, 0.18749999999999992], 'false,true,true': [0.16071954875635247, 0.00022713626873477693]}, {'': [0.23013415494747483, 0.07876905452340564], 'false': [0.08491887041316083, 0.07266344921984592], 'false,true': [0.07671812003203393, 0.16000000000000003], 'false,true,true': [0.21630483108887855, 0.0004190831188217108], 'false,false': [0.07467624847426402, 3.477774535011353e-05], 'false,false,true': [0.06471955131559966, 0.1728395061728395]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(B, G), haswordauthor(H, G).;true;true
0;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
0;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
2;false,true;title(K, J), venue(K, A).;true;true
2;false,true,true;samebib(K, L), venue(L, B).;true;true
2;false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
3;false,true;title(F, E), venue(F, B).;true;true
3;false,true,true;samebib(F, G), venue(G, A).;true;true
3;false,true,false;title(H, E), venue(H, A).;true;true
3;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
4;false,true;title(F, E), venue(F, B).;true;true
4;false,true,true;samebib(F, G), venue(G, A).;true;true
4;false,true,false;title(H, E), venue(H, A).;true;true
4;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
5;false,true;title(F, E), venue(F, B).;true;true
5;false,true,true;samebib(F, G), venue(G, A).;true;true
5;false,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
6;false,true;title(F, E), venue(F, A).;true;true
6;false,true,true;title(G, E), venue(G, B).;true;true
6;false,true,false;title(H, E), venue(H, B).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
7;false,true;title(F, E), venue(F, A).;true;true
7;false,true,true;title(G, E), venue(G, B).;true;true
7;false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true
7;false,false,false;haswordvenue(A, J), haswordtitle(K, J).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
8;false,true;title(F, E), venue(F, B).;true;true
8;false,true,true;samebib(F, G), venue(G, A).;true;true
8;false,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,true;title(F, E), venue(F, A).;true;true
9;false,true,true;samebib(F, G), venue(G, B).;true;true
9;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then if ( haswordvenue(B, D) )
%   | | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.22957750652808379;  // std dev = 2.859, 35.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=13 */
%   | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.20801665996723223;  // std dev = 0.477, 1,512.000 (wgt'ed) examples reached here.  /* #neg=983 #pos=529 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.6200536970042743;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.14185106490048766;  // std dev = 6.32e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | else return -0.0418510649004878;  // std dev = 0.300, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.016043671941617644;  // std dev = 0.365, 114.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=18 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.20188869501386947;  // std dev = 0.483, 40.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=15 */
%   | | else return 0.044467437835755616;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.18978234343949776;  // std dev = 0.480, 1,474.000 (wgt'ed) examples reached here.  /* #neg=945 #pos=529 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.5268429106668969;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.1254446385283916;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else return -0.04159442220197976;  // std dev = 0.294, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return 0.022851371784743238;  // std dev = 3.651, 96.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=16 */
%   | | | else return -0.06381529488192372;  // std dev = 1.356, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.15833923135162872;  // std dev = 0.479, 1,531.000 (wgt'ed) examples reached here.  /* #neg=986 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6152527560679539;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.14665200583680812;  // std dev = 7.45e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.1361347463566841;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.04568343546149769;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return -0.011622533589945264;  // std dev = 2.966, 105.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=16 */
%   | | | else return 0.09022860340501739;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12886771424030738;  // std dev = 0.478, 1,545.000 (wgt'ed) examples reached here.  /* #neg=1,000 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5206572509980056;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.12923305555167625;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.12090303228576557;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.05840293872663253;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.010588978347221622;  // std dev = 2.902, 92.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=16 */
%   | | | else return -0.0468560619820519;  // std dev = 1.341, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.06042701072830896;  // std dev = 0.464, 51.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=16 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.07805898414036672;  // std dev = 0.468, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | | else return 0.10867580012932732;  // std dev = 0.479, 1,451.000 (wgt'ed) examples reached here.  /* #neg=935 #pos=516 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.35359428179394714;  // std dev = 2.207, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.11414848312749344;  // std dev = 0.042, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | else return 0.11295733435295637;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.024039638444492053;  // std dev = 0.296, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else if ( haswordvenue(A, N), haswordauthor(P, N) )
%   | | | then return -0.10781281402796139;  // std dev = 0.019, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.010350195639086646;  // std dev = 3.059, 103.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=16 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09227898975185998;  // std dev = 0.480, 1,515.000 (wgt'ed) examples reached here.  /* #neg=970 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.04149493246401169;  // std dev = 0.237, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -0.03310700274812269;  // std dev = 0.233, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return -0.0037371766489607302;  // std dev = 2.803, 94.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=16 */
%   | | | else return -0.006898651922663839;  // std dev = 3.070, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D), haswordtitle(F, C) )
%   | | then return 0.1899850532615092;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( haswordtitle(G, C) )
%   | | | then return 0.05012873592808216;  // std dev = 2.944, 39.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=13 */
%   | | | else return 0.019851109253801208;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.06409387184527575;  // std dev = 0.477, 1,511.000 (wgt'ed) examples reached here.  /* #neg=982 #pos=529 */
%   else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.3823260784362716;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.11283112202617601;  // std dev = 0.023, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | else return 0.10332661056927189;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return -0.011225194792760598;  // std dev = 0.289, 109.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=18 */
%   | | else return -0.08882705946994059;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.11869010824271767;  // std dev = 0.491, 36.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=15 */
%   | | else return 0.09964838956461884;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.04580159291669344;  // std dev = 0.475, 1,533.000 (wgt'ed) examples reached here.  /* #neg=1,004 #pos=529 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.2746788556975215;  // std dev = 2.209, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.09950360626391741;  // std dev = 0.009, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else return -0.04870935927512824;  // std dev = 0.272, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return -0.0042404562038369075;  // std dev = 2.659, 85.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=16 */
%   | | | else return -0.05694357625144069;  // std dev = 1.326, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else return -0.08414748428015767;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0474319560938647;  // std dev = 0.479, 1,528.000 (wgt'ed) examples reached here.  /* #neg=983 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.3273247836298695;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.1007786542389294;  // std dev = 0.036, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | | else return 0.047425646563976964;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return -0.0236227917031534;  // std dev = 2.576, 96.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=16 */
%   | | | else return -0.040681412666128784;  // std dev = 1.334, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else return -0.0764884055335075;  // std dev = 0.008, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.051537689331641254;  // std dev = 0.483, 1,469.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.03162062497510204;  // std dev = 0.176, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.029975993143915546;  // std dev = 0.238, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.002422409478457829;  // std dev = 2.523, 85.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=16 */
%   | | | else return -0.0042342852514825864;  // std dev = 2.657, 94.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=16 */


Results
   AUC ROC   = 0.562399
   AUC PR    = 0.50481
   CLL	      = -0.706726
   Precision = 0.546667 at threshold = 0.5
   Recall    = 0.033662
   F1        = 0.063418


Total learning time: 115.79339909553528 seconds
Total inference time: 13.403 seconds
AUC ROC: 0.562399


Results scoring model
   AUC ROC   = 0.59137
   AUC PR    = 0.275347
   CLL	      = -0.510837
   Precision = 0.592593 at threshold = 0.5
   Recall    = 0.027539
   F1        = 0.052632


Total scoring time: 3.309 seconds
Refined model CLL: -0.510837


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.562399
   AUC PR    = 0.50481
   CLL	      = -0.706726
   Precision = 0.546667 at threshold = 0.5
   Recall    = 0.033662
   F1        = 0.063418


Total learning time: 226.25430601119993 seconds
Total inference time: 13.403 seconds
AUC ROC: 0.562399
Total revision time: 226.25430601119993
Best scored revision CLL: -0.510837


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 02:15:05
{'AUC ROC': 0.562399, 'AUC PR': 0.50481, 'CLL': -0.706726, 'Precision': [0.546667, 0.5], 'Recall': 0.033662, 'F1': 0.063418, 'Learning time': 226.25430601119993, 'Inference time': 13.403, 'parameter': {'AUC ROC': 0.564372, 'AUC PR': 0.510458, 'CLL': -0.705684, 'Precision': [0.598684, 0.5], 'Recall': 0.037356, 'F1': 0.070325, 'Learning time': 104.15590691566467, 'Inference time': 12.278}}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21505790693971694;  // std dev = 0.479, 1,527.000 (wgt'ed) examples reached here.  /* #neg=982 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.001006077956655051;  // std dev = 0.350, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -0.0168510649004878;  // std dev = 0.331, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.024815601766179047;  // std dev = 3.651, 96.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=16 */
%   | | | else return 0.023097388707759806;  // std dev = 3.655, 97.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.4299033005564653;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.1469764712881725;  // std dev = 0.465, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | else return 0.19347718371796596;  // std dev = 0.481, 1,455.000 (wgt'ed) examples reached here.  /* #neg=926 #pos=529 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.5512020180730152;  // std dev = 2.207, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.14418965003113413;  // std dev = 0.009, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else return -0.06135268703995441;  // std dev = 0.276, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return 0.03782835929892345;  // std dev = 3.617, 88.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=16 */
%   | | | else return -0.04966068723616569;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else return -0.14468602037328773;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1550299100897126;  // std dev = 0.478, 1,539.000 (wgt'ed) examples reached here.  /* #neg=994 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.03930972877308352;  // std dev = 0.385, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.011605246372436163;  // std dev = 3.337, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
%   | | | else return 0.06274223394201063;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.009918552835001204;  // std dev = 3.667, 102.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=16 */
%   | | | else return -0.12768451796473354;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.13656000308906266;  // std dev = 0.480, 1,507.000 (wgt'ed) examples reached here.  /* #neg=962 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5159468011738683;  // std dev = 2.309, 24.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | | | else return -0.15057985373112145;  // std dev = 0.006, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.14004376317932116;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0.08217845904290105;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.021344939273688746;  // std dev = 3.321, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */
%   | | | else return -0.051121594772476596;  // std dev = 1.344, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else return -0.11638045759859242;  // std dev = 0.013, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10633824229804505;  // std dev = 0.479, 1,531.000 (wgt'ed) examples reached here.  /* #neg=986 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.04009257932352167;  // std dev = 0.280, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 0.02603353187699149;  // std dev = 3.294, 87.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=16 */
%   | | | else return -0.041117904445878845;  // std dev = 1.342, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.01076858759318928;  // std dev = 3.374, 98.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=16 */
%   | | | else return -0.10237221732149143;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09106022508238922;  // std dev = 0.480, 1,509.000 (wgt'ed) examples reached here.  /* #neg=964 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.023257147929105118;  // std dev = 0.300, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.04066698496389584;  // std dev = 3.262, 81.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=16 */
%   | | | else return -0.04379285066417608;  // std dev = 1.328, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.022204025078989973;  // std dev = 3.321, 92.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=16 */
%   | | | else return -0.09380589516625053;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08539067027781014;  // std dev = 0.484, 1,458.000 (wgt'ed) examples reached here.  /* #neg=913 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.028872274326617826;  // std dev = 0.283, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return -0.020902845770196594;  // std dev = 0.289, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.026007702692457363;  // std dev = 3.321, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
%   | | | else return 0.010399297291047792;  // std dev = 3.338, 98.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=16 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.056110143306406304;  // std dev = 0.477, 42.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
%   | | else return -0.10878080124884444;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.053971622283676766;  // std dev = 0.480, 1,468.000 (wgt'ed) examples reached here.  /* #neg=939 #pos=529 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.45379206001124356;  // std dev = 2.212, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.13669902355500285;  // std dev = 0.032, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else return -0.04730218818144671;  // std dev = 0.281, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then return -0.12617412069811232;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return -0.006440848680765583;  // std dev = 3.584, 119.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=18 */
%   | | | else return -0.08695198320544945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03971400037838137;  // std dev = 0.479, 1,524.000 (wgt'ed) examples reached here.  /* #neg=979 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.39305518162207775;  // std dev = 2.095, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.12053964279939902;  // std dev = 0.033, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.12635392834307066;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.04971063084739768;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return -0.10149673713625053;  // std dev = 0.028, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.002980011238609452;  // std dev = 3.560, 113.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=18 */
%   | | | else return -0.0842261044134726;  // std dev = 0.010, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.5485650241909833;  // std dev = 0.328, 450.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=396 */
%   | | else return -0.2888708549804468;  // std dev = 0.145, 880.000 (wgt'ed) examples reached here.  /* #neg=864 #pos=16 */
%   | else if ( title(G, D), venue(G, B) )
%   | | then return -0.2123589534427824;  // std dev = 0.318, 35.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=4 */
%   | | else if ( haswordvenue(A, C) )
%   | | | then return 0.1956225387492347;  // std dev = 7.850, 247.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=129 */
%   | | | else return 0.06382135983502085;  // std dev = 1.471, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, B) )
%   | | then return 0.020001690750196175;  // std dev = 0.354, 91.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=17 */
%   | | else return 0.23629375321849;  // std dev = 0.477, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | | then return 0.4722615659209813;  // std dev = 0.399, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | else return -0.0759564069623739;  // std dev = 0.011, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.845937
   AUC PR    = 0.741853
   CLL	      = -0.573948
   Precision = 0.593985 at threshold = 0.5
   Recall    = 0.03243
   F1        = 0.061503


Total learning time: 134.18884873390198 seconds
Total inference time: 20.907 seconds
AUC ROC: 0.845937


Dataset: 3_imdb_cora, Fold: 3, Type: Scratch (RDN-B), Time: 02:17:41
{'AUC ROC': 0.845937, 'AUC PR': 0.741853, 'CLL': -0.573948, 'Precision': [0.593985, 0.5], 'Recall': 0.03243, 'F1': 0.061503, 'Learning time': 134.18884873390198, 'Inference time': 20.907}


Starting fold 4

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos  examples: 2270
Target test neg examples: 3954

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.24811816884741328;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.16653882456488167;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.20848477447886868;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3912569620992536;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1420942428155646;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.17062637354018492;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3005711547884894;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.11914890490746433;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.7132053827676746;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.2867946172323253;  // std dev = 1.49e-08, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.5132053827676747;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.131341402918815;  // std dev = 0.493, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.1602106952275325;  // std dev = 3.494, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.19891512187188015;  // std dev = 2.599, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return 0.0984134027840187;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10541434031987182;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.10246307220535986;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.14163545619459858;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.15119201431602758;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.17664313168463983;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.3168434073805026;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return -0.18315659261949774;  // std dev = 0.169, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.055089405090842335;  // std dev = 0.454, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6450317924921181;  // std dev = 0.130, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.33754644146628177;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.4444787510261829;  // std dev = 0.878, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.13595484509295797;  // std dev = 1.448, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | else return 0.32257952099604137;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordtitle(K, C) )
%   | | | then return 0.07901406808786768;  // std dev = 19.534, 1,570.000 (wgt'ed) examples reached here.  /* #neg=916 #pos=654 */
%   | | | else return 0.10127960857009456;  // std dev = 4.353, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.03561468552649497;  // std dev = 0.414, 73.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=17 */
%   | else return 0.019979710273601847;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.4895467203025487;  // std dev = 0.133, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.2559012098538769;  // std dev = 0.080, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.3381624667590968;  // std dev = 0.877, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.06197573187712371;  // std dev = 0.492, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.06715381643882631;  // std dev = 3.490, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.09327723801962338;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return 0.06293016656927793;  // std dev = 1.921, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.02289667257970122;  // std dev = 2.960, 54.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
%   | | else return 0.017038797015620628;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.44702379154187855;  // std dev = 0.070, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.27288340254700344;  // std dev = 0.130, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.25754522880446623;  // std dev = 0.877, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.047571361421519076;  // std dev = 0.492, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.05091588764678105;  // std dev = 3.490, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.07028264057882062;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | | then return 0.05041659410518576;  // std dev = 1.919, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.017579965844601073;  // std dev = 2.814, 54.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
%   | | else return 0.016472814656498275;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then return 0.059982874210052155;  // std dev = 0.287, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   | else return 0.19502085551536272;  // std dev = 0.877, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.3756853513611003;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.21792624730310187;  // std dev = 0.075, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.21108754000365706;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( haswordvenue(A, J), haswordvenue(B, J) )
%   | | then if ( haswordtitle(K, J) )
%   | | | then return 0.03565019292990268;  // std dev = 19.534, 1,570.000 (wgt'ed) examples reached here.  /* #neg=916 #pos=654 */
%   | | | else return 0.043875362626420736;  // std dev = 4.351, 79.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=43 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.022779970090899007;  // std dev = 3.528, 72.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=17 */
%   | | | else return 0.01492732546784901;  // std dev = 2.813, 54.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */


Results
   AUC ROC   = 0.574241
   AUC PR    = 0.435718
   CLL	      = -0.638785
   Precision = 0.503797 at threshold = 0.5
   Recall    = 0.087665
   F1        = 0.149343


Total learning time: 184.3102889060974 seconds
Total inference time: 16.79 seconds
AUC ROC: 0.574241


Results scoring model
   AUC ROC   = 0.557794
   AUC PR    = 0.486122
   CLL	      = -0.660726
   Precision = 0.706667 at threshold = 0.5
   Recall    = 0.07095
   F1        = 0.128954


Total scoring time: 2.851 seconds
Parameter learned model CLL: -0.660726


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'samebib(F, G), venue(G, A)', 'true,false': 'haswordtitle(H, C)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,true': 'haswordtitle(L, M), haswordvenue(B, M)'}, {'true,true,true,true': [0.0, 0, 8], 'true,true,true,false': [1.49e-08, 7, 0], 'true,true,false': [0.894, 1, 4], 'true,false,true': [0.493, 924, 664], 'true,false,false,true': [3.494, 25, 25], 'true,false,false,false': [2.599, 11, 18], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'title(L, K), venue(L, B)', 'false,true,true': 'samebib(L, M), venue(M, A)'}, {'true,true': [0.492, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true,true': [2.619, 14, 14], 'false,true,true,false': [0.169, 35, 0], 'false,true,false': [0.454, 7, 3], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'samebib(F, G), venue(G, B)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'true,false,true': 'author(J, I), venue(J, B)', 'true,false,false': 'haswordtitle(K, C)', 'false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true,true': [0.13, 0, 8], 'true,true,true,false': [0.0, 7, 0], 'true,true,false': [0.878, 1, 4], 'true,false,true,true': [1.448, 7, 7], 'true,false,true,false': [0.866, 1, 3], 'true,false,false,true': [19.534, 916, 654], 'true,false,false,false': [4.353, 36, 43], 'false,true': [0.414, 56, 17], 'false,false': [0.381, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, A)', 'true,true': 'samebib(E, F), venue(F, B)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,false,true': 'haswordtitle(L, M), haswordvenue(A, M)'}, {'true,true,true': [0.133, 0, 8], 'true,true,false': [0.08, 8, 0], 'true,false': [0.877, 1, 4], 'false,true,true': [0.492, 924, 664], 'false,true,false,true': [3.49, 25, 25], 'false,true,false,false': [2.598, 11, 18], 'false,false,true,true': [1.921, 12, 6], 'false,false,true,false': [2.96, 43, 11], 'false,false,false': [0.38, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'true,true': 'samebib(E, F), venue(F, A)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false,true': 'haswordtitle(L, M), haswordvenue(B, M)'}, {'true,true,true': [0.07, 0, 8], 'true,true,false': [0.13, 8, 0], 'true,false': [0.877, 1, 4], 'false,true,true': [0.492, 924, 664], 'false,true,false,true': [3.49, 25, 25], 'false,true,false,false': [2.598, 11, 18], 'false,false,true,true': [1.919, 12, 6], 'false,false,true,false': [2.814, 43, 11], 'false,false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'author(E, D), venue(E, B)', 'false': 'haswordvenue(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, A)', 'false,true,true': 'samebib(H, I), venue(I, B)', 'false,false': 'haswordvenue(A, J), haswordvenue(B, J)', 'false,false,true': 'haswordtitle(K, J)', 'false,false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.287, 8, 8], 'true,false': [0.877, 1, 4], 'false,true,true,true': [0.0, 0, 7], 'false,true,true,false': [0.075, 8, 0], 'false,true,false': [0.866, 1, 3], 'false,false,true,true': [19.534, 916, 654], 'false,false,true,false': [4.351, 36, 43], 'false,false,false,true': [3.528, 55, 17], 'false,false,false,false': [2.813, 43, 11]}]]
[{'': [0.24455361249545102, 0.17089843750000108], 'true': [0.24366352318011741, 0.24803717352988336], 'true,false': [0.25000000000000133, 0.2354340071343634], 'true,false,true': [0.24489795918367302, 0.2417355371900822], 'true,false,false': [0.2417355371900822, 0.20408163265306106], 'false': [0.17864514918371124, 0.15999999999999948], 'false,true': [0.22222222222222232, 0.15999999999999948]}, {'': [0.2442396583862776, 0.17036542604714275], 'true': [0.24366352318012574, 0.2455497403386633], 'true,false': [0.24813620683257934, 0.23456996391329932], 'true,false,true': [0.244897959183673, 0.2417355371900833], 'true,false,false': [0.2417355371900833, 0.20408163265306115], 'false': [0.177825777852918, 0.1600000000000007], 'false,true': [0.22222222222222207, 0.1600000000000007]}, {'': [0.2439315722131506, 0.16990467702453838], 'true': [0.2436635231801326, 0.24310195846820265], 'true,false': [0.24631150685892014, 0.2337064665173658], 'true,false,true': [0.24489795918367316, 0.24173553719008264], 'true,false,false': [0.24173553719008264, 0.20408163265306115], 'false': [0.1771174918718374, 0.15999999999999953], 'false,true': [0.22222222222222218, 0.15999999999999953]}, {'': [0.24371075047936078, 0.1695374267579385], 'true': [0.24366352318009946, 0.24136967032829013], 'true,false': [0.244983430861878, 0.2331518261352126], 'true,false,true': [0.24489795918367355, 0.24173553719008264], 'true,false,false': [0.24173553719008264, 0.2040816326530612], 'false': [0.17655293676131073, 0.15999999999999967], 'false,true': [0.2222222222222222, 0.15999999999999967]}, {'': [0.24358519092549577, 0.16926465814576508], 'true': [0.24000000000000005, 0.24324484787296852], 'true,false': [0.24329828880329155, 0.24040290855188662], 'true,false,false': [0.2442132411930144, 0.2328852475902263], 'true,true': [0.24888888888888885, 0.16], 'true,true,true': [0.0, 3.172065784643304e-17], 'false': [0.17613362348097328, 0.15999999999999995], 'false,true': [0.22222222222222218, 0.15999999999999995]}, {'': [0.24243805756859266, 0.16907391107668154], 'true': [0.24251437894791986, 0.24013191904549544], 'true,false': [0.24388458831094095, 0.2327652783586706], 'true,false,true': [0.2448979591836735, 0.24173553719008264], 'true,false,false': [0.24173553719008253, 0.20408163265306123], 'false': [0.175840397736944, 0.1599999999999999], 'false,true': [0.17106481230338935, 0.20570499737934805], 'false,true,true': [0.24498872320132223, 0.0008145724739319071]}, {'': [0.24237696831986044, 0.1601375072430196], 'true': [0.23207381107488617, 0.24215852851401307], 'true,false': [0.16424846632183443, 0.2429066484267256], 'true,false,false': [0.2430378514341209, 0.2398271924703455], 'true,true': [0.24142539675742297, 0.1541024518167177], 'true,true,true': [0.0021246255240577883, -1.586032892321652e-17], 'true,false,true': [0.14986544439500885, 0.18749999999999994], 'false': [0.17156648043935313, 0.14482872853024473]}, {'': [0.152509059340129, 0.23639399634100738], 'false': [0.24204915007225627, 0.16091696600108604], 'false,true': [0.24215056617622502, 0.2398028083448335], 'false,true,false': [0.24365894111228328, 0.23272238385495816], 'false,false': [0.17323083560685332, 0.14465427371792391], 'false,false,true': [0.205095817543359, 0.16220850480109772], 'true': [0.14042949466329305, 0.15383698599949644], 'true,true': [0.0022070902280346694, 0.000805590811302076]}, {'': [0.14328146971841538, 0.23588879090709008], 'false': [0.2415692688847057, 0.16068360221347133], 'false,true': [0.2416557014533244, 0.239727761032141], 'false,true,false': [0.2436476306591912, 0.2327319783391743], 'false,false': [0.1613609009354659, 0.1597477507935981], 'false,false,true': [0.20465400652464033, 0.14666030470019345], 'true': [0.1330941664319596, 0.15373856418022985], 'true,true': [0.004958088651759118, 0.002097060161696418]}, {'': [0.10277669853191321, 0.23584349238468752], 'false': [0.11284603325981273, 0.23712660134840027], 'false,false': [0.24288053408173366, 0.16156623261773054], 'false,false,true': [0.24303785143413134, 0.2396896883340542], 'false,false,false': [0.1728348252699178, 0.14650620582762722], 'false,true': [0.08807462614972428, 0.1875], 'true': [0.08243187116059411, 0.1539866174382194], 'false,true,true': [-1.586032892321652e-17, 0.000698383332020526]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
4;true,true;author(F, E), venue(F, B).;true;true
4;true,true,true;samebib(F, G), venue(G, A).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(A, J), haswordtitle(K, J).;true;true
5;false,true;title(L, K), venue(L, B).;true;true
5;false,true,true;samebib(L, M), venue(M, A).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
6;true,true;author(F, E), venue(F, A).;true;true
6;true,true,true;samebib(F, G), venue(G, B).;true;true
7;;samevenue(A, B) :- haswordvenue(B, C), haswordauthor(D, C).;true;true
7;true;author(E, D), venue(E, A).;true;true
7;true,true;samebib(E, F), venue(F, B).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true
8;true;author(E, D), venue(E, B).;true;true
8;true,true;samebib(E, F), venue(F, A).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true
9;false;haswordvenue(B, F), haswordauthor(G, F).;true;true
9;false,true;author(H, G), venue(H, A).;true;true
9;false,true,true;samebib(H, I), venue(I, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.24811816884741328;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.34839109804469587;  // std dev = 2.639, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return -0.15160890195530374;  // std dev = 0.037, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.13497714535974895;  // std dev = 0.457, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.7825012972897073;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.21749870271029265;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.5825012972897073;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.2006373174408249;  // std dev = 0.493, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.25543090384670036;  // std dev = 3.509, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.33354380143522294;  // std dev = 2.603, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then return 0.15025964966533645;  // std dev = 0.457, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03881672043938624;  // std dev = 0.382, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.16627278814108717;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.1615388453693993;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.24389847404002757;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.2613806000007637;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3144965494660669;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.12682918322756975;  // std dev = 0.456, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03354458120122775;  // std dev = 0.382, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1335135558943241;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.12875910516214492;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.18678417359691227;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.20129574584424512;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.23723136491506377;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.10539077252424614;  // std dev = 0.455, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.028879077962674544;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6686151170919213;  // std dev = 0.128, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3143459578367836;  // std dev = 1.49e-08, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.46816536612754245;  // std dev = 0.878, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.10333267488992899;  // std dev = 0.492, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.11868275029892887;  // std dev = 3.492, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.1586599209634515;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then return 0.08642415956740122;  // std dev = 0.454, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.024780586028828787;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08219948295640916;  // std dev = 0.491, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.0743992728455829;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.11160727975760718;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.11313995593354796;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.1388548653760687;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.07010384327299457;  // std dev = 0.453, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.0212030008570247;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06359249926616657;  // std dev = 0.491, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.05720297213336667;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.08371779113337764;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.08486992704691784;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.10533611863681692;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.056370102054830805;  // std dev = 0.453, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.018097173779198093;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04889159259986761;  // std dev = 0.491, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.04375341770160603;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.06281746115874469;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.06367911991366712;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.0805596778609456;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.04501392176637558;  // std dev = 0.452, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.015413542658823205;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03742352201879725;  // std dev = 0.491, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.03334473989603622;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.04719537182818026;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.04783937418038012;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.06206957048405447;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, A) )
%   | | then if ( samebib(L, M), venue(M, B) )
%   | | | then return 0.29823051753265534;  // std dev = 2.610, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return -0.2017694824673447;  // std dev = 0.244, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.018542977789228178;  // std dev = 0.415, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0.013104022655938989;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.574526
   AUC PR    = 0.436393
   CLL	      = -0.633125
   Precision = 0.755869 at threshold = 0.5
   Recall    = 0.070925
   F1        = 0.129682


Total learning time: 206.84064602851868 seconds
Total inference time: 17.856 seconds
AUC ROC: 0.574526


Results scoring model
   AUC ROC   = 0.557507
   AUC PR    = 0.474522
   CLL	      = -0.662048
   Precision = 0.701493 at threshold = 0.5
   Recall    = 0.062918
   F1        = 0.115479


Total scoring time: 2.743 seconds
Refined model CLL: -0.662048


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.574241
   AUC PR    = 0.435718
   CLL	      = -0.638785
   Precision = 0.503797 at threshold = 0.5
   Recall    = 0.087665
   F1        = 0.149343


Total learning time: 396.7449349346161 seconds
Total inference time: 16.79 seconds
AUC ROC: 0.574241
Total revision time: 396.7449349346161
Best scored revision CLL: -0.660726


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 02:24:56
{'AUC ROC': 0.574241, 'AUC PR': 0.435718, 'CLL': -0.638785, 'Precision': [0.503797, 0.5], 'Recall': 0.087665, 'F1': 0.149343, 'Learning time': 396.7449349346161, 'Inference time': 16.79, 'parameter': {'AUC ROC': 0.574241, 'AUC PR': 0.435718, 'CLL': -0.638785, 'Precision': [0.503797, 0.5], 'Recall': 0.087665, 'F1': 0.149343, 'Learning time': 184.3102889060974, 'Inference time': 16.79}}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.24811816884741328;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.16653882456488167;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.20848477447886868;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3912569620992536;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1420942428155646;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.17062637354018492;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3005711547884894;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.3309125064279367;  // std dev = 2.628, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return -0.1690874935720631;  // std dev = 0.109, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.09107688064040842;  // std dev = 0.455, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.13360339271793026;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.13664585375352234;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.22629823971521876;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.10527529174949778;  // std dev = 0.455, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.02818420881593644;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10551742939082928;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.10762034996184403;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.14379027326522745;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.14379027326522745;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.16984358676510128;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.0863234357554252;  // std dev = 0.454, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.024172550677182256;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08232251291348108;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.08372807955323855;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.10803450809035726;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.10803450809035726;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.12813320688246752;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.070018007777685;  // std dev = 0.453, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.02067403628282406;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06366213733661014;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.06457405393631681;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.08103386685025628;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.08103386685025628;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.09743184803714998;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.05629827345407853;  // std dev = 0.453, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.017639294111430483;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.048923799915716965;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.049497783225195;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.0608105509549485;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.0608105509549485;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.07468131696953094;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.044954653331183425;  // std dev = 0.452, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.01501888990923989;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03743104240908369;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.03777940363354095;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.045695325992495844;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.045695325992495844;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.057651940521137104;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.035702398552615366;  // std dev = 0.452, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.012765108355844604;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.566212
   AUC PR    = 0.422741
   CLL	      = -0.638799
   Precision = 0.65625 at threshold = 0.5
   Recall    = 0.037004
   F1        = 0.070058


Total learning time: 198.48569798469543 seconds
Total inference time: 15.707 seconds
AUC ROC: 0.566212


Dataset: 3_imdb_cora, Fold: 4, Type: Scratch (RDN-B), Time: 02:28:31
{'AUC ROC': 0.566212, 'AUC PR': 0.422741, 'CLL': -0.638799, 'Precision': [0.65625, 0.5], 'Recall': 0.037004, 'F1': 0.070058, 'Learning time': 198.48569798469543, 'Inference time': 15.707}


Starting fold 5

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos  examples: 2467
Target test neg examples: 4522

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( haswordauthor(E, C) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.44064893509950764;  // std dev = 0.493, 800.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=466 */
%   | else return 0.7291166770349955;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13087620782678508;  // std dev = 0.445, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.051131391239862906;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3802742035706283;  // std dev = 0.492, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6157326050686436;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.6397480032138977;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15715819152444083;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.10855824646068733;  // std dev = 0.441, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.038009597489091836;  // std dev = 0.806, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.15404125523550588;  // std dev = 2.947, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.03825072160333175;  // std dev = 2.992, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05181004363723003;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.31145849966207595;  // std dev = 0.492, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.48283090502633463;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.5343528314941617;  // std dev = 0.902, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.13745030991066803;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, B) )
%   | | | then return -0.17786775009030112;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.11296608868948327;  // std dev = 2.885, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then return 0.02684802437316348;  // std dev = 0.383, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.12152077497189626;  // std dev = 4.086, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return -0.1663666233232594;  // std dev = 0.042, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.5444319413242017;  // std dev = 0.051, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.17948818410316977;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.12400726578205386;  // std dev = 1.920, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.19943120404618972;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.11465843671104103;  // std dev = 1.908, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.27411826393241673;  // std dev = 0.485, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.1012803706076415;  // std dev = 0.398, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else return 0.098987961800355;  // std dev = 0.442, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | else return 0.051008615871073915;  // std dev = 0.409, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.410849694457424;  // std dev = 0.051, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.13818436966296535;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.0960107872664857;  // std dev = 1.925, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.1534161297221788;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.08870759674009528;  // std dev = 1.912, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.2101771672971998;  // std dev = 0.485, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, A) )
%   | | then return 0.04501675300088974;  // std dev = 0.385, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.08997713674737738;  // std dev = 0.443, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else return 0.04363256649049669;  // std dev = 0.409, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1391323770218604;  // std dev = 0.485, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.28768918314436115;  // std dev = 0.332, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.3912567165831439;  // std dev = 0.898, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.13471556960382647;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.06194306890724494;  // std dev = 0.439, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.00493991468072103;  // std dev = 0.798, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.0877386922349866;  // std dev = 2.910, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.003824157849427144;  // std dev = 2.982, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.03309125075118896;  // std dev = 2.957, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.27746292945931517;  // std dev = 0.055, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, C) )
%   | | | then return -0.05382836937233475;  // std dev = 3.067, 46.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=16 */
%   | | | else return 0.2720284010693143;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.11277036351884549;  // std dev = 0.487, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.21147972326450404;  // std dev = 0.343, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.08738649143569888;  // std dev = 0.352, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.05148120776162463;  // std dev = 0.439, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then return 0.0646090270995141;  // std dev = 0.445, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.015404959048058805;  // std dev = 0.394, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.22607302417244873;  // std dev = 0.152, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.012244273939598626;  // std dev = 2.794, 38.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=16 */
%   | | | else return -0.20650989366798728;  // std dev = 1.518, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.08658468945769131;  // std dev = 0.487, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.16184659219990846;  // std dev = 0.342, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( title(L, J), venue(L, B) )
%   | | | then return 0.6525948143155761;  // std dev = 1.818, 29.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=26 */
%   | | | else return -0.19255739476764286;  // std dev = 0.233, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return -0.18362442093284345;  // std dev = 0.048, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.019809148637764014;  // std dev = 0.408, 109.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=26 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.05898166852978731;  // std dev = 0.483, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.1910651944297697;  // std dev = 0.293, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.38499422487081975;  // std dev = 0.857, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.17163046848716562;  // std dev = 0.079, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.022733132134433263;  // std dev = 0.426, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, A) )
%   | | | then return 0.0472200996284925;  // std dev = 3.496, 88.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=24 */
%   | | | else return -0.15772803982504754;  // std dev = 0.042, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.027816250040409753;  // std dev = 2.981, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | else return -0.19143972893889014;  // std dev = 0.135, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return -0.4790371300230532;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( author(G, D), title(G, E) )
%   | | | then return 0.23147739876870355;  // std dev = 2.003, 25.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=17 */
%   | | | else return 0.07761773515702268;  // std dev = 0.413, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return -0.031604727249854164;  // std dev = 0.368, 76.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=25 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordtitle(I, H) )
%   | | then return 0.050161026348780745;  // std dev = 0.486, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.1232039175882267;  // std dev = 0.345, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then return -0.007500618842046365;  // std dev = 0.326, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.05891385605160069;  // std dev = 4.041, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return -0.16900058244558716;  // std dev = 0.138, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.555955
   AUC PR    = 0.401135
   CLL	      = -0.70422
   Precision = 0.377057 at threshold = 0.5
   Recall    = 0.928658
   F1        = 0.536346


Total learning time: 109.79276275634766 seconds
Total inference time: 14.936 seconds
AUC ROC: 0.555955


Results scoring model
   AUC ROC   = 0.682253
   AUC PR    = 0.671125
   CLL	      = -0.608244
   Precision = 0.633714 at threshold = 0.5
   Recall    = 0.909091
   F1        = 0.746826


Total scoring time: 2.551 seconds
Parameter learned model CLL: -0.608244


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'haswordauthor(E, C)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, B)', 'false,true,true': 'samebib(H, I), venue(I, A)', 'false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,false,true': 'haswordtitle(L, J)'}, {'true,true,true': [0.0, 0, 5], 'true,true,false': [0.493, 334, 466], 'true,false': [0.335, 4, 27], 'false,true,true,true': [0.894, 1, 4], 'false,true,true,false': [0.0, 5, 0], 'false,true,false': [0.445, 32, 12], 'false,false,true,true': [0.894, 4, 1], 'false,false,true,false': [2.98, 28, 13], 'false,false,false': [0.395, 92, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(B, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, A)', 'false,true,true': 'samebib(G, H), venue(H, B)', 'false,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false,true': 'haswordtitle(K, I)', 'false,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.492, 334, 471], 'true,false': [0.335, 4, 27], 'false,true,true,true': [0.899, 1, 4], 'false,true,true,false': [0.016, 5, 0], 'false,true,false': [0.441, 32, 12], 'false,false,true,true': [0.806, 4, 1], 'false,false,true,false': [2.947, 28, 13], 'false,false,false,true': [2.992, 48, 11], 'false,false,false,false': [2.966, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(B, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, A)', 'false,true,true': 'samebib(G, H), venue(H, B)', 'false,true,false': 'author(I, F), venue(I, B)', 'false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.492, 334, 471], 'true,false': [0.335, 4, 27], 'false,true,true,true': [0.902, 1, 4], 'false,true,true,false': [0.014, 5, 0], 'false,true,false,true': [0.005, 3, 0], 'false,true,false,false': [2.885, 29, 12], 'false,false,true': [0.383, 54, 12], 'false,false,false,true': [4.086, 59, 24], 'false,false,false,false': [0.042, 11, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'haswordtitle(G, D)', 'true,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'true,false,true': 'haswordtitle(J, H)', 'false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,true': 'haswordtitle(M, K)'}, {'true,true,true': [0.051, 0, 10], 'true,true,false,true': [2.596, 13, 14], 'true,true,false,false': [1.92, 18, 6], 'true,false,true,true': [2.542, 12, 14], 'true,false,true,false': [1.908, 17, 6], 'true,false,false': [0.485, 278, 448], 'false,true,true': [0.398, 5, 2], 'false,true,false': [0.442, 33, 14], 'false,false': [0.409, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'haswordtitle(G, D)', 'true,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'true,false,true': 'haswordtitle(J, H)', 'false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,true': 'author(M, L), venue(M, A)'}, {'true,true,true': [0.051, 0, 10], 'true,true,false,true': [2.596, 13, 14], 'true,true,false,false': [1.925, 18, 6], 'true,false,true,true': [2.542, 12, 14], 'true,false,true,false': [1.912, 17, 6], 'true,false,false': [0.485, 278, 448], 'false,true,true': [0.385, 6, 2], 'false,true,false': [0.443, 32, 14], 'false,false': [0.409, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(B, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, A)', 'false,true,true': 'samebib(G, H), venue(H, B)', 'false,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false,true': 'haswordtitle(K, I)', 'false,false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 334, 471], 'true,false': [0.332, 4, 27], 'false,true,true,true': [0.898, 1, 4], 'false,true,true,false': [0.018, 5, 0], 'false,true,false': [0.439, 32, 12], 'false,false,true,true': [0.798, 4, 1], 'false,false,true,false': [2.91, 28, 13], 'false,false,false,true': [2.982, 48, 11], 'false,false,false,false': [2.957, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(A, D)', 'true,true,false': 'haswordtitle(F, C)', 'true,false': 'haswordtitle(G, C)', 'false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,true': 'author(J, I), venue(J, A)', 'false,false': 'haswordvenue(A, K), haswordauthor(L, K)'}, {'true,true,true': [0.055, 0, 10], 'true,true,false,true': [3.067, 30, 16], 'true,true,false,false': [0.894, 1, 4], 'true,false,true': [0.487, 304, 449], 'true,false,false': [0.343, 3, 19], 'false,true,true': [0.352, 6, 4], 'false,true,false': [0.439, 32, 12], 'false,false,true': [0.445, 32, 14], 'false,false,false': [0.394, 92, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,true,false': 'author(G, E), venue(G, A)', 'true,false': 'haswordtitle(H, C)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, A)', 'false,true,true': 'title(L, J), venue(L, B)'}, {'true,true,true': [0.152, 0, 10], 'true,true,false,true': [2.794, 22, 16], 'true,true,false,false': [1.518, 9, 4], 'true,false,true': [0.487, 304, 449], 'true,false,false': [0.342, 3, 19], 'false,true,true,true': [1.818, 3, 26], 'false,true,true,false': [0.233, 69, 0], 'false,true,false': [0.048, 7, 0], 'false,false': [0.408, 83, 26]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordtitle(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, B)', 'false,true,true': 'samebib(H, I), venue(I, A)', 'false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,false,true': 'title(L, K), venue(L, A)', 'false,false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true': [0.483, 336, 479], 'true,false': [0.293, 2, 19], 'false,true,true,true': [0.857, 1, 4], 'false,true,true,false': [0.079, 5, 0], 'false,true,false': [0.426, 32, 12], 'false,false,true,true': [3.496, 64, 24], 'false,false,true,false': [0.042, 7, 0], 'false,false,false,true': [2.981, 42, 12], 'false,false,false,false': [0.135, 11, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,true': 'author(F, D), venue(F, A)', 'true,true,false': 'author(G, D), title(G, E)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)', 'false,true': 'haswordtitle(I, H)', 'false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true': [2.11e-08, 8, 0], 'true,true,false,true': [2.003, 8, 17], 'true,true,false,false': [0.413, 2, 4], 'true,false': [0.368, 51, 25], 'false,true,true': [0.486, 304, 449], 'false,true,false': [0.345, 3, 19], 'false,false,true': [0.326, 54, 12], 'false,false,false,true': [4.041, 59, 24], 'false,false,false,false': [0.138, 11, 0]}]]
[{'': [0.24084270048762138, 0.18394619617433927], 'true': [0.2427591528104568, 0.11238293444328941], 'true,true': [0.0, 0.243193749999994], 'false': [0.20850480109739317, 0.17437500000000122], 'false,true': [0.23999999999999985, 0.19834710743801603], 'false,true,true': [0.15999999999999986, -2.7755575615628915e-18], 'false,false': [0.21172022684309966, 0.15574022776238935], 'false,false,true': [0.16000000000000003, 0.2165377751338484]}, {'': [0.2395606186358488, 0.18090031112654886], 'true': [0.24240233045831422, 0.11238293444328855], 'false': [0.20577225212445377, 0.17158047421380812], 'false,true': [0.2396663510462111, 0.19480626620471464], 'false,true,true': [0.16175462426720671, 4.833621904624663e-05], 'false,false': [0.20418295894968494, 0.15574022776238897], 'false,false,true': [0.12982257968417046, 0.21178789075413634], 'false,false,false': [0.1516805515656426, 0.16000000000000056]}, {'': [0.2385743237534946, 0.17768622521295208], 'true': [0.24234484456379238, 0.1123829344432882], 'false': [0.1961699560286622, 0.17081805234249495], 'false,true': [0.19413764157337454, 0.1945779203085472], 'false,true,false': [9.254635460938706e-06, 0.2030475390945688], 'false,true,true': [0.16257684465033004, 3.870809572011358e-05], 'false,false': [0.14671732828954218, 0.18620573998594978], 'false,false,false': [0.20116389070084506, 0.00015916400112017418]}, {'': [0.23799467195325533, 0.17378753971120342], 'true': [0.2259107066541136, 0.23751222391499038], 'true,false': [0.2307231810202731, 0.23485113464316565], 'true,false,true': [0.24852071005917167, 0.15825811549294524], 'true,true': [0.0025708487075215116, 0.22743636961645716], 'true,true,false': [0.24965706447187938, 0.1536742412623832], 'false': [0.19026615204895017, 0.16763790731479813], 'false,true': [0.15861503241401678, 0.19497946736871255]}, {'': [0.23410605678456387, 0.17331433025210866], 'true': [0.20316270066387015, 0.23568005853711066], 'true,false': [0.22104158338982757, 0.2348319842103171], 'true,false,true': [0.24852071005917173, 0.15887166419861315], 'true,true': [0.0025713813337998825, 0.21846267281568252], 'true,true,false': [0.2496570644718794, 0.15433213845170313], 'false': [0.1893797500611273, 0.16749487116984707], 'false,true': [0.14803855115999648, 0.19627005176726592]}, {'': [0.23183898360806007, 0.17293738058769995], 'true': [0.23570576857435116, 0.1101765375462354], 'false': [0.18571181591134345, 0.16824606759672672], 'false,true': [0.14991640706949147, 0.19303244390561247], 'false,false': [0.19860026242482515, 0.15493528924313446], 'false,false,true': [0.12724421403903532, 0.20655704154890447], 'false,false,false': [0.15071797968072786, 0.15901600344853853], 'false,true,true': [0.1614471984207562, 6.219279985267834e-05]}, {'': [0.23139991354968528, 0.1710764854893688], 'true': [0.18795577758236326, 0.23424942902962184], 'true,false': [0.237374823248404, 0.11780876176938017], 'true,true': [0.0030076826955401257, 0.2095304109647683], 'true,true,false': [0.2045040890475491, 0.16], 'false': [0.18025904045270222, 0.16777127209538328], 'false,true': [0.12370878958436113, 0.1928726314185229], 'false,false': [0.1980228334870937, 0.15486845261932147]}, {'': [0.2304740779004197, 0.17064652218978302], 'true': [0.1837130687893555, 0.23358902034064055], 'true,false': [0.23683077064995237, 0.11712918895101575], 'true,true': [0.002319304500808661, 0.2073659553031367], 'true,true,false': [0.20544856806882575, 0.1773151617169001], 'false': [0.1745285532476517, 0.1666769282693352], 'false,true': [0.18309438793398997, 0.0003245416095833041], 'false,true,true': [0.11394819342928655, 0.0007865928274175409]}, {'': [0.22966168466964348, 0.14714891660281637], 'true': [0.2329245490907511, 0.08602365071162113], 'false': [0.17705554815570781, 0.1369221485399568], 'false,true': [0.15158997612262182, 0.181538105577189], 'false,true,true': [0.14702208054331445, 0.0012423470739934606], 'false,false': [0.131547179915632, 0.14375985093192617], 'false,false,false': [0.16457348956689352, 0.001646084367270282], 'false,false,true': [0.1388957620286411, 0.00025627732633239287]}, {'': [0.15464824509227693, 0.21909245932555274], 'false': [0.2332334407606735, 0.14949971226824632], 'false,true': [0.2364185112289081, 0.1190333538825799], 'true': [0.18570202148048015, 0.13573752868939556], 'true,true': [5.551115123125783e-17, 0.13856861801367343], 'false,false': [0.10616261134371811, 0.17927632240324812], 'false,false,false': [0.19672782343537548, 0.0017304925317012563], 'true,true,false': [0.16043232336121657, 0.028378881146195658]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;haswordauthor(E, C).;true;true
0;false;haswordvenue(A, F), haswordauthor(G, F).;true;true
0;false,true;author(H, G), venue(H, B).;true;true
0;false,true,true;samebib(H, I), venue(I, A).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(B, E), haswordauthor(F, E).;true;true
1;false,true;author(G, F), venue(G, A).;true;true
1;false,true,true;samebib(G, H), venue(H, B).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(B, E), haswordauthor(F, E).;true;true
2;false,true;author(G, F), venue(G, A).;true;true
2;false,true,true;samebib(G, H), venue(H, B).;true;true
2;false,true,false;author(I, F), venue(I, B).;true;true
2;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;true
2;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(B, E), haswordauthor(F, E).;true;true
5;false,true;author(G, F), venue(G, A).;true;true
5;false,true,true;samebib(G, H), venue(H, B).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
7;true,true;haswordauthor(F, C).;true;true
7;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
7;false,true;title(K, J), venue(K, A).;true;true
7;false,true,true;title(L, J), venue(L, B).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(A, F), haswordauthor(G, F).;true;true
8;false,true;author(H, G), venue(H, B).;true;true
8;false,true,true;samebib(H, I), venue(I, A).;true;true
8;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;true
8;false,false,true;title(L, K), venue(L, A).;true;true
8;false,false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true
9;;samevenue(A, B) :- haswordvenue(B, C), haswordauthor(D, C).;true;true
9;true;haswordtitle(E, C).;true;true
9;true,true;author(F, D), venue(F, A).;true;true
9;false;haswordvenue(A, H), haswordvenue(B, H).;true;true
9;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;true
9;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.7291166770349955;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15083186192878065;  // std dev = 2.913, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.051131391239862906;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6157326050686436;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.6392119282680095;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15769426647032894;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, B) )
%   | | | then return -0.16343846579291768;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.12907154912175825;  // std dev = 2.884, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.03693744759731563;  // std dev = 0.807, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1534329638272584;  // std dev = 2.940, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.04479249977758044;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.6805851247859591;  // std dev = 0.056, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.2449182844345499;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.047462026339214695;  // std dev = 1.980, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.2648613043775699;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.03762993035031235;  // std dev = 1.967, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.3407976691556591;  // std dev = 0.485, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, B) )
%   | | then return 0.19851266446135338;  // std dev = 0.440, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.0933922162172073;  // std dev = 0.439, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.062471098592311;  // std dev = 0.413, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24325016813796133;  // std dev = 0.489, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.41871480800640914;  // std dev = 0.330, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.5200481531158161;  // std dev = 0.900, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14625031652760595;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.0826202524381097;  // std dev = 0.438, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.009147130310466123;  // std dev = 0.787, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.11466562937634452;  // std dev = 2.931, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.024193891118573393;  // std dev = 2.992, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.0377532131524717;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then if ( author(G, F), venue(G, B) )
%   | | | then return -0.380302607451442;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.3891659070421884;  // std dev = 1.945, 24.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | else return 0.18716734218967185;  // std dev = 0.488, 783.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | else return 0.34524501529331103;  // std dev = 0.289, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.13786668678361846;  // std dev = 0.390, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.06961492749046057;  // std dev = 0.438, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return 0.12705845449507333;  // std dev = 1.219, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.0774781832567089;  // std dev = 2.780, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.02651237950985305;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.36660861940611145;  // std dev = 0.073, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.09110064454520485;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.15005446954488857;  // std dev = 1.922, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.15062911360520528;  // std dev = 0.487, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.235898541920994;  // std dev = 0.340, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.1130412996017883;  // std dev = 0.385, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.05815238137225162;  // std dev = 0.438, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.05645215844041854;  // std dev = 0.426, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | else return 0.007787880689346332;  // std dev = 0.386, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then if ( author(G, F), venue(G, A) )
%   | | | then return -0.45262924964873325;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.2971346601056164;  // std dev = 1.894, 24.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=19 */
%   | | else return 0.10543776739877106;  // std dev = 0.485, 783.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | else return 0.24759922420264072;  // std dev = 0.285, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.011815147993399524;  // std dev = 0.312, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(K, I), venue(K, A) )
%   | | | then return 0.05643766294759496;  // std dev = 0.912, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.06495669588099034;  // std dev = 2.874, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0067382172882545725;  // std dev = 0.383, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | else return 0.04787166545813875;  // std dev = 0.428, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.24111277523601418;  // std dev = 0.057, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return 0.0377422515858009;  // std dev = 2.302, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.2169958512450624;  // std dev = 1.850, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.08896153054834631;  // std dev = 0.485, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.1648693887713912;  // std dev = 0.340, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | then return -0.18754750927327848;  // std dev = 0.057, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( haswordauthor(K, H) )
%   | | | then return 0.15114985806053985;  // std dev = 0.923, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.073700052825432;  // std dev = 4.067, 86.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=24 */
%   | else return 0.019826488601208038;  // std dev = 0.412, 109.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=26 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.05530898202646195;  // std dev = 0.397, 39.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=21 */
%   | else if ( author(F, D), venue(F, B) )
%   | | then return -0.21689101189825813;  // std dev = 0.308, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return 0.05057230833259293;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.0739390058228743;  // std dev = 2.988, 46.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=18 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.04790153319333668;  // std dev = 2.244, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.15552731385315186;  // std dev = 1.834, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.0766792724259584;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.040854698620236524;  // std dev = 0.423, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | else return -0.005649301494870612;  // std dev = 0.386, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.3741389165252414;  // std dev = 0.262, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | else return -0.36044842398187527;  // std dev = 0.130, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return -0.01698886347066959;  // std dev = 0.396, 71.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=24 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.4079204790893268;  // std dev = 1.218, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return -0.37400214257752373;  // std dev = 0.495, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( author(K, H), venue(K, A) )
%   | | | then return -0.26466009229225407;  // std dev = 0.749, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.07470861285654166;  // std dev = 2.904, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
%   | else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | | then return 0.05779718960355901;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | else return 0.00752744551454561;  // std dev = 0.393, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */


Results
   AUC ROC   = 0.548574
   AUC PR    = 0.397442
   CLL	      = -0.708309
   Precision = 0.372112 at threshold = 0.5
   Recall    = 0.927037
   F1        = 0.531058


Total learning time: 114.38940382003784 seconds
Total inference time: 39.972 seconds
AUC ROC: 0.548574


Results scoring model
   AUC ROC   = 0.70056
   AUC PR    = 0.704966
   CLL	      = -0.608926
   Precision = 0.638924 at threshold = 0.5
   Recall    = 0.907273
   F1        = 0.749812


Total scoring time: 2.654 seconds
Refined model CLL: -0.608926


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.555955
   AUC PR    = 0.401135
   CLL	      = -0.70422
   Precision = 0.377057 at threshold = 0.5
   Recall    = 0.928658
   F1        = 0.536346


Total learning time: 229.38716657638548 seconds
Total inference time: 14.936 seconds
AUC ROC: 0.555955
Total revision time: 229.38716657638548
Best scored revision CLL: -0.608244


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 02:33:20
{'AUC ROC': 0.555955, 'AUC PR': 0.401135, 'CLL': -0.70422, 'Precision': [0.377057, 0.5], 'Recall': 0.928658, 'F1': 0.536346, 'Learning time': 229.38716657638548, 'Inference time': 14.936, 'parameter': {'AUC ROC': 0.555955, 'AUC PR': 0.401135, 'CLL': -0.70422, 'Precision': [0.377057, 0.5], 'Recall': 0.928658, 'F1': 0.536346, 'Learning time': 109.79276275634766, 'Inference time': 14.936}}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( haswordauthor(E, C) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.44064893509950764;  // std dev = 0.493, 800.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=466 */
%   | else return 0.7291166770349955;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15083186192878065;  // std dev = 2.913, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then return 0.16249676118646889;  // std dev = 0.460, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | else return 0.051131391239862906;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3802742035706283;  // std dev = 0.492, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6157326050686436;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.6375116511109578;  // std dev = 0.895, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.16248834888904226;  // std dev = 0.001, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, B) )
%   | | | then return -0.1622771923724097;  // std dev = 0.001, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.12984644453860714;  // std dev = 2.888, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.03693744759731563;  // std dev = 0.807, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1534329638272584;  // std dev = 2.940, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.04479249977758044;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.6358464244432969;  // std dev = 0.103, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordtitle(E, C) )
%   | | then return 0.3089024788934938;  // std dev = 0.493, 799.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=465 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.38964094086862855;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.5007520519797396;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then return 0.1128277108025789;  // std dev = 0.441, 54.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=16 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.03190292667528684;  // std dev = 0.805, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.13144231703964496;  // std dev = 2.936, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.03250702666026084;  // std dev = 2.992, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.04606634869415913;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.4811975067486746;  // std dev = 0.116, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.18006072376655188;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.12448707883826321;  // std dev = 1.915, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.20000374370957183;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.11035444804028692;  // std dev = 1.924, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.2747637757151257;  // std dev = 0.485, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, A) )
%   | | then return 0.1764711931291481;  // std dev = 0.436, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.07704758421103045;  // std dev = 0.439, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.05341195197987553;  // std dev = 0.412, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.3649805362064925;  // std dev = 0.112, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return 0.13865172557412603;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.09640200400690635;  // std dev = 1.919, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.19659062375544034;  // std dev = 0.489, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.31718268233809405;  // std dev = 0.340, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.5003582978622692;  // std dev = 0.906, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1557687389004781;  // std dev = 0.030, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.06441382842309319;  // std dev = 0.438, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.044107017615752406;  // std dev = 0.412, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.14116545536290942;  // std dev = 0.486, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.2903076565332646;  // std dev = 0.290, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.38648075784069147;  // std dev = 0.908, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.13638756880527542;  // std dev = 0.027, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.05362870391027943;  // std dev = 0.437, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | | then return -0.17947130040309078;  // std dev = 0.061, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.09465907488444215;  // std dev = 4.069, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.04509159398083806;  // std dev = 3.019, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | else return -0.1940547136249954;  // std dev = 0.074, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.10613154605907436;  // std dev = 0.485, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.2331753376006006;  // std dev = 0.284, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.44296479941805245;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1981209429681049;  // std dev = 0.008, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, B) )
%   | | | then return -0.1802050019211254;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.06286538926712214;  // std dev = 2.811, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return 0.06661039981266467;  // std dev = 4.069, 88.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=24 */
%   | | | else return -0.16154880529081142;  // std dev = 0.058, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.002938864865413677;  // std dev = 0.380, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return -0.49342962484114705;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.19832473189552008;  // std dev = 0.381, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | else if ( author(G, D), venue(G, B) )
%   | | then return -0.24681777805783425;  // std dev = 0.318, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else return 0.07941969429207786;  // std dev = 0.426, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.035255489457953676;  // std dev = 2.736, 36.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | | | else return -0.19986866668583264;  // std dev = 1.533, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else return 0.0996343032866055;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.041302397602257124;  // std dev = 0.420, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | else return -0.002496455227099233;  // std dev = 0.380, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2141750498145997;  // std dev = 0.058, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.019552740806714663;  // std dev = 2.521, 31.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | | else return -0.19458168911185186;  // std dev = 1.474, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.06622227136066824;  // std dev = 0.486, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.16134043717778085;  // std dev = 0.344, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.16400801650530045;  // std dev = 0.121, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return 0.06130564891261788;  // std dev = 0.432, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.05641986850990875;  // std dev = 0.432, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | else return -0.2000211087456566;  // std dev = 0.169, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordauthor(F, D) )
%   | | then if ( haswordvenue(B, D) )
%   | | | then return 0.17076087333662016;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.04142932843209887;  // std dev = 2.480, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | else return 0.04366509004991311;  // std dev = 0.482, 783.000 (wgt'ed) examples reached here.  /* #neg=323 #pos=460 */
%   | else return 0.1661724850856212;  // std dev = 0.291, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, A) )
%   | | then return -0.0034802835644176036;  // std dev = 0.280, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(J, H), venue(J, B) )
%   | | | then return 0.0028833427294632672;  // std dev = 0.863, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.04291559346555046;  // std dev = 2.787, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return -0.014498869754222755;  // std dev = 0.372, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | else return 0.03211764555011565;  // std dev = 0.422, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */


Results
   AUC ROC   = 0.554756
   AUC PR    = 0.401371
   CLL	      = -0.706041
   Precision = 0.375715 at threshold = 0.5
   Recall    = 0.931901
   F1        = 0.535523


Total learning time: 120.69689798355103 seconds
Total inference time: 29.724 seconds
AUC ROC: 0.554756


Dataset: 3_imdb_cora, Fold: 5, Type: Scratch (RDN-B), Time: 02:35:51
{'AUC ROC': 0.554756, 'AUC PR': 0.401371, 'CLL': -0.706041, 'Precision': [0.375715, 0.5], 'Recall': 0.931901, 'F1': 0.535523, 'Learning time': 120.69689798355103, 'Inference time': 29.724}


Starting fold 1

Target train facts examples: 7463
Target train pos examples: 368
Target train neg examples: 688

Target test facts examples: 35095
Target test pos  examples: 2649
Target test neg examples: 4334

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.424815601766179;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.3982164798305049;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.45935396641210174;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3628735944379147;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.37391135762433364;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.3269052770205085;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.29764451710777373;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.29107789104287257;  // std dev = 0.807, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.26358767085800217;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.23427726647373656;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.24185760298278067;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.20295547503731384;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.1782464299201189;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.09269127618926097;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0028554031467501392;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0028554031467501392;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.15909483439814323;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.18213891260273649;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.13426751126146078;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.08518475138839687;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.002503460836945874;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.002503460836945874;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.12013209515454029;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.1367774456565101;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.10100458086538985;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.15191665241662;  // std dev = 2.771, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.1413439964226033;  // std dev = 0.091, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.08816184098481847;  // std dev = 0.061, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.0021943081594878503;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.09011125100759512;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.10299317949510756;  // std dev = 0.795, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.07583136476394588;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.07800134745978297;  // std dev = 0.031, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0019228798175884457;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0022127009427716313;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.08527188117310298;  // std dev = 0.791, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.06762749700849517;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.05615914494321991;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.030466661133782297;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return -0.0016731716725231732;  // std dev = 3.065, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.0872487136758366;  // std dev = 0.067, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.005809170799495563;  // std dev = 2.847, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03554750876544446;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.06142664291748647;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.06219995946537541;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.04064582759004401;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.13408733781601326;  // std dev = 2.763, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.125258372419793;  // std dev = 0.096, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.0770573332889976;  // std dev = 0.062, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.0020289897710250014;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.557039
   AUC PR    = 0.428454
   CLL	      = -0.655709
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 125.02366209030151 seconds
Total inference time: 16.306 seconds
AUC ROC: 0.557039


Results scoring model
   AUC ROC   = 0.590942
   AUC PR    = 0.419498
   CLL	      = -0.619138
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total scoring time: 2.149 seconds
Parameter learned model CLL: -0.619138


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.816, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.714, 13, 17], 'false,true,true': [0.0, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [1.095, 2, 3], 'true,false,false,true': [0.81, 1, 2], 'true,false,false,false': [2.715, 13, 17], 'false,true,true': [5.27e-09, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.808, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.715, 13, 17], 'false,true,true': [9.13e-09, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.807, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.715, 13, 17], 'false,true,true': [0.0, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.794, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.717, 13, 17], 'false,true,true': [5.27e-09, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [1.095, 2, 3], 'true,false,false,true': [0.794, 1, 2], 'true,false,false,false': [2.717, 13, 17], 'false,true,true': [5.27e-09, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, A)', 'false,true,true': 'samebib(K, L), venue(L, B)', 'false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [1.095, 2, 3], 'true,false,false,true': [0.794, 1, 2], 'true,false,false,false': [2.717, 13, 17], 'false,true,true,true': [2.771, 27, 11], 'false,true,true,false': [0.091, 42, 0], 'false,true,false': [0.061, 7, 0], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [1.095, 2, 3], 'true,false,false,true': [0.795, 1, 2], 'true,false,false,false': [2.717, 13, 17], 'false,true,true': [0.031, 12, 0], 'false,true,false': [0.354, 64, 11], 'false,false,true': [0.346, 64, 11], 'false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,false,true': 'title(M, L), venue(M, B)', 'false,false,false': 'haswordvenue(A, N), haswordtitle(P, N)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [0.791, 1, 2], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [2.718, 13, 17], 'false,true': [0.328, 7, 1], 'false,false,true,true': [3.065, 69, 11], 'false,false,true,false': [0.067, 7, 0], 'false,false,false,true': [2.847, 57, 10], 'false,false,false,false': [0.0, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, A)', 'false,true,true': 'samebib(K, L), venue(L, B)', 'false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true': [0.485, 528, 324], 'true,false,true': [1.095, 2, 3], 'true,false,false,true': [0.793, 1, 2], 'true,false,false,false': [2.717, 13, 17], 'false,true,true,true': [2.763, 27, 11], 'false,true,true,false': [0.096, 42, 0], 'false,true,false': [0.062, 7, 0], 'false,false,true': [0.354, 64, 11], 'false,false,false': [0.0, 4, 0]}]]
[{'': [0.23762656230272572, 0.11496588764697444], 'true': [0.2356675262844691, 0.24376731301939172], 'true,false': [0.22222222222222224, 0.2448979591836734], 'true,false,false': [0.23999999999999994, 0.2455555555555551], 'false': [0.1104505218655035, 0.11985258772632539], 'false,false': [0.12515555555555502, 0.0], 'false,true': [-1.1564823173178714e-17, 0.12515555555555502]}, {'': [0.2371606616282308, 0.11455688633284844], 'true': [0.2356675262844735, 0.24352902641532292], 'true,false': [0.23999999999999994, 0.24397082368635845], 'true,false,false': [0.21859724583033524, 0.24566195763775364], 'false': [0.10989213699570438, 0.1196268538653256], 'false,false': [0.125155555555556, 0.0], 'false,true': [2.3129646346357427e-18, 0.125155555555556]}, {'': [0.23670497169729698, 0.11426488031687218], 'true': [0.23566752628446727, 0.2432006312450957], 'true,false': [0.2176873624141201, 0.24497723310199554], 'true,false,false': [0.23999999999999994, 0.24568445879937523], 'false': [0.10949347876263746, 0.1194656914359021], 'false,false': [0.12515555555555488, 0.0], 'false,true': [6.938893903907228e-18, 0.12515555555555488]}, {'': [0.2363669286336169, 0.11404989376870131], 'true': [0.23566752628446358, 0.24295287544358235], 'true,false': [0.2171137183240305, 0.24494912041488714], 'true,false,false': [0.24000000000000005, 0.2456512452737729], 'false': [0.1091999705719235, 0.11934703718735738], 'false,false': [0.12515555555555585, 0.0], 'false,true': [0.0, 0.12515555555555585]}, {'': [0.23616359234674217, 0.11388747773154602], 'true': [0.235667526284474, 0.24279756660608168], 'true,false': [0.21040997107607098, 0.24528866487439993], 'true,false,false': [0.24000000000000005, 0.2460828894614755], 'false': [0.10897823373482877, 0.11925739737963524], 'false,false': [0.1251555555555548, 0.0], 'false,true': [2.3129646346357427e-18, 0.1251555555555548]}, {'': [0.23605472895497862, 0.11376206515768521], 'true': [0.23566752628446164, 0.2426451717431571], 'true,false': [0.24000000000000005, 0.24299079203978488], 'true,false,false': [0.21021536400516302, 0.24606000110993995], 'false': [0.10880701549834226, 0.11918818032937877], 'false,false': [0.12515555555555608, 0.0], 'false,true': [2.3129646346357427e-18, 0.12515555555555608]}, {'': [0.2360022662978132, 0.11366339398297505], 'true': [0.23566752628447166, 0.24256038386092071], 'true,false': [0.24, 0.24291515903878616], 'true,false,false': [0.21028400916139342, 0.246061937857856], 'false': [0.10867230568411562, 0.11913372225194024], 'false,false': [0.12515555555555608, 0.0], 'false,true': [0.11753819459178187, 0.0005284790639393423], 'false,true,true': [0.20208154497787642, 0.00019573298664419893]}, {'': [0.23597834057834274, 0.11116031378212246], 'true': [0.23566752628446394, 0.24252185688117914], 'true,false': [0.24, 0.2428856023310677], 'true,false,false': [0.21045544662985805, 0.246061548430326], 'false': [0.10866331669629706, 0.11388074475797728], 'false,false': [0.11966607816854766, 0.0], 'false,true': [8.002890706486239e-05, 0.1251555555555557]}, {'': [0.23596770941100598, 0.11108255922569926], 'true': [0.23566752628446355, 0.24250665652600692], 'true,false': [0.2084953934460573, 0.2453623148049761], 'true,false,false': [0.24, 0.24623724492498258], 'false': [0.10734483142564105, 0.11123800596469915], 'false,false': [0.10855817168407286, 0.1144646224549384], 'false,false,false': [0.12098785206016482, 0.0], 'false,false,true': [0.11741248104542049, 0.0006321121554864027]}, {'': [0.23596262226283632, 0.11100098012673247], 'true': [0.23566752628447613, 0.24249196348519408], 'true,false': [0.24, 0.2428229227667499], 'true,false,false': [0.20946121669264597, 0.24611685877407855], 'false': [0.10372242734881164, 0.11899251870989339], 'false,false': [0.1251167510171336, 0.0], 'false,true': [0.11229699400162245, 0.0005565972448480357], 'false,true,true': [0.20086121533000661, 0.0002188666453843175]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
0;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
0;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
1;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
1;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
2;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
2;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
3;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
3;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
4;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
4;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
5;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
5;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
6;false,true;title(K, J), venue(K, A).;true;true
6;false,true,true;samebib(K, L), venue(L, B).;true;true
6;false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
7;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
7;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(B, I), haswordauthor(J, I).;true;true
8;false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
8;false,false,true;title(M, L), venue(M, B).;true;true
8;false,false,false;haswordvenue(A, N), haswordtitle(P, N).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
9;false,true;title(K, J), venue(K, A).;true;true
9;false,true,true;samebib(K, L), venue(L, B).;true;true
9;false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.424815601766179;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3982164798305049;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.3639794304549287;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.1488242116562869;  // std dev = 2.789, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14162905569876183;  // std dev = 0.023, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.12787230110394693;  // std dev = 0.016, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.3874028246526538;  // std dev = 0.802, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.326685698020276;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.29629366162004606;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.12205676751791568;  // std dev = 0.051, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.004507924439813008;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.2891267840656207;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2638891679144505;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.2344239894274221;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.10959153340338802;  // std dev = 0.046, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0032558270569705674;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.003958717519531335;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.24326170791640442;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.20270815317569105;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.17815223500833471;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.028797338099162375;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.09936314977686865;  // std dev = 0.042, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0028554031467501392;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.007328377203989893;  // std dev = 2.848, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.18323985873041496;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.15937671013820712;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.13411674793840989;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.0908314846320462;  // std dev = 0.039, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.002503460836945874;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.00307273121677557;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.13761339991874844;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.11997362676156356;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10095379227309802;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.08361444281056885;  // std dev = 0.036, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0021943081594878503;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0026954071185220523;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.10411505802698644;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.0899921915610408;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07574525239135979;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.025829475184626013;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.07743495291601565;  // std dev = 0.034, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.0019228798175884457;  // std dev = 3.064, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.005730094639774908;  // std dev = 2.848, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.08291997893091323;  // std dev = 0.792, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.0756585321448561;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.055062076353182034;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.07208766412694817;  // std dev = 0.032, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0016846780662751325;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0020839329055962934;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return -0.14473418137539884;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.0629963187226329;  // std dev = 0.792, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.03661174542507164;  // std dev = 0.486, 847.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=323 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.05385894007867633;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.04183139014677352;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then return -0.022818686020760513;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return -0.00802678392949765;  // std dev = 0.329, 87.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=11 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.004769380128461722;  // std dev = 2.847, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.556772
   AUC PR    = 0.428208
   CLL	      = -0.657439
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 116.37505102157593 seconds
Total inference time: 14.421 seconds
AUC ROC: 0.556772


Results scoring model
   AUC ROC   = 0.592437
   AUC PR    = 0.420344
   CLL	      = -0.620212
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total scoring time: 2.094 seconds
Refined model CLL: -0.620212


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.557039
   AUC PR    = 0.428454
   CLL	      = -0.655709
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 245.64171311187744 seconds
Total inference time: 16.306 seconds
AUC ROC: 0.557039
Total revision time: 245.64171311187744
Best scored revision CLL: -0.619138


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 02:40:32
{'AUC ROC': 0.557039, 'AUC PR': 0.428454, 'CLL': -0.655709, 'Precision': [0.637427, 0.5], 'Recall': 0.041148, 'F1': 0.077305, 'Learning time': 245.64171311187744, 'Inference time': 16.306, 'parameter': {'AUC ROC': 0.557039, 'AUC PR': 0.428454, 'CLL': -0.655709, 'Precision': [0.637427, 0.5], 'Recall': 0.041148, 'F1': 0.077305, 'Learning time': 125.02366209030151, 'Inference time': 16.306}}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.23843062524035266;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.424815601766179;  // std dev = 2.714, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004815601766179008;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20686012285620575;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.45935396641210174;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3982164798305049;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.3628735944379147;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.004228390109386251;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1751801570305961;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.3734320413643335;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.3269052770205085;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.2976924487337738;  // std dev = 2.715, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.14974330653669568;  // std dev = 2.784, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.14149654570757056;  // std dev = 0.042, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.11669340332070102;  // std dev = 0.028, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.0037111125833978686;  // std dev = 0.354, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.14514481334590568;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.30280675254289585;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2635769705623022;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.2331056289341738;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.15050635248187114;  // std dev = 2.779, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.1414006812825585;  // std dev = 0.058, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.12198246998550877;  // std dev = 0.041, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.003911681670084844;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11804668707041945;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.23040446245548618;  // std dev = 0.799, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.20323593140109866;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.17934630824284567;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return -0.10655670760965545;  // std dev = 0.043, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.003413226901304579;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0034335612113566743;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09457696812283496;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.17325008790214502;  // std dev = 0.799, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.15881450919170095;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.1352036112652373;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.029299214164223333;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return -0.0028566352284536377;  // std dev = 3.003, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.10128282298599231;  // std dev = 0.041, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.0068709345277985934;  // std dev = 2.848, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07489163449109286;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.13007741480721377;  // std dev = 0.799, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.12012088364306131;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10167657783668928;  // std dev = 2.716, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return -0.09248305590938118;  // std dev = 0.041, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0026663326620246066;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.003487353047143477;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05877777591804268;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.11585013211194184;  // std dev = 0.790, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.09396556897118358;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.07390027686603486;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.13371816312760668;  // std dev = 2.766, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | | else return -0.12525231425885158;  // std dev = 0.084, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.09508059096077824;  // std dev = 0.047, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.0030601374345733258;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04582386394015474;  // std dev = 0.485, 852.000 (wgt'ed) examples reached here.  /* #neg=528 #pos=324 */
%   | else return 0.05996580147145928;  // std dev = 0.492, 38.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=22 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then return -0.03668704009966044;  // std dev = 0.326, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return -0.002118466488977989;  // std dev = 3.000, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
%   | | | else return -0.09077220943856608;  // std dev = 0.055, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.005413606151839297;  // std dev = 2.790, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return -0.14473418137539884;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.062304194492386555;  // std dev = 0.796, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.03661174542507164;  // std dev = 0.486, 847.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=323 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.05559969556907975;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.04157907819922787;  // std dev = 2.717, 30.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=17 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return -0.0803481074657275;  // std dev = 0.049, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 8.524183247087043E-4;  // std dev = 0.339, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.003064329658623235;  // std dev = 0.346, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
%   | | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.557239
   AUC PR    = 0.428186
   CLL	      = -0.653755
   Precision = 0.637427 at threshold = 0.5
   Recall    = 0.041148
   F1        = 0.077305


Total learning time: 130.19885897636414 seconds
Total inference time: 16.727 seconds
AUC ROC: 0.557239


Dataset: 3_imdb_cora, Fold: 1, Type: Scratch (RDN-B), Time: 02:42:59
{'AUC ROC': 0.557239, 'AUC PR': 0.428186, 'CLL': -0.653755, 'Precision': [0.637427, 0.5], 'Recall': 0.041148, 'F1': 0.077305, 'Learning time': 130.19885897636414, 'Inference time': 16.727}


Starting fold 2

Target train facts examples: 9016
Target train pos examples: 771
Target train neg examples: 544

Target test facts examples: 33542
Target test pos  examples: 2246
Target test neg examples: 4478

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.30665618885999163;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.4047531668618019;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.386198448632422;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24206322397592006;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.3261448737160187;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2788572331674748;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.4586612187245652;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.10866121872456526;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.14133878127543473;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.18403810314669028;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.24558668125641064;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.23490503051382786;  // std dev = 1.891, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.3207118471601496;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.4106434583517543;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.08249570247950498;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.15719386217852044;  // std dev = 0.838, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.23594145670149916;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.13886918675583182;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.1843926491048414;  // std dev = 1.915, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.17858400017571843;  // std dev = 1.894, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.2100327524080362;  // std dev = 0.318, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.10762034996184425;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.3084695664013876;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.06230725960603323;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.13606161265476963;  // std dev = 1.221, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.1044797977606636;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.1369486899938656;  // std dev = 1.915, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.13930855531252118;  // std dev = 1.895, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.21733803683340533;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.08372807955323866;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.06599748736808053;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.27971335436841377;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.04691756632035203;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.1529151189301714;  // std dev = 0.852, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.21588770036185792;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.2287440946122556;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.10436361911501614;  // std dev = 1.221, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordtitle(K, G) )
%   | | | then return 0.07683999582124909;  // std dev = 16.896, 1,167.000 (wgt'ed) examples reached here.  /* #neg=498 #pos=669 */
%   | | | else return 0.10653677350264007;  // std dev = 2.696, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | else return 0.11978140645601294;  // std dev = 0.379, 47.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05986998631494334;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.08017312000770332;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.05272583952248852;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.19625980996774472;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.16543028530124199;  // std dev = 1.83e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.040902681505362234;  // std dev = 0.491, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.022152762024445192;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0449987379410153;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.06233283784778512;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.040879571820912126;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.16713126352439056;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.14383495184088385;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.031160537024539702;  // std dev = 0.491, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.016808464138977453;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.537425
   AUC PR    = 0.345718
   CLL	      = -0.756257
   Precision = 0.354232 at threshold = 0.5
   Recall    = 0.955922
   F1        = 0.516913


Total learning time: 125.67314720153809 seconds
Total inference time: 14.772 seconds
AUC ROC: 0.537425


Results scoring model
   AUC ROC   = 0.553719
   AUC PR    = 0.662697
   CLL	      = -0.664972
   Precision = 0.594317 at threshold = 0.5
   Recall    = 0.976654
   F1        = 0.73896


Total scoring time: 2.211 seconds
Parameter learned model CLL: -0.664972


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [7.3e-08, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.44, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)'}, {'true,true': [0.494, 518, 708], 'true,false,true': [0.439, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [1.49e-08, 0, 5], 'false,true,true': [5.16e-08, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,false': 'haswordvenue(A, D)', 'true,false': 'haswordtitle(G, C)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true,true': [0.357, 3, 17], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.225, 6, 2], 'true,false,true': [0.494, 507, 687], 'true,false,false,true': [1.914, 5, 14], 'true,false,false,false': [1.891, 5, 17], 'false,true,true': [2.11e-08, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'haswordvenue(B, C)', 'true,false,false': 'author(F, D), venue(F, B)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)'}, {'true,true': [0.356, 3, 17], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.838, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true': [0.493, 507, 687], 'false,true,false,true': [1.915, 5, 14], 'false,true,false,false': [1.894, 5, 17], 'false,false,true': [0.318, 7, 26], 'false,false,false': [0.495, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,false': 'haswordvenue(B, D)', 'true,false': 'haswordtitle(G, C)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true,true': [0.356, 3, 17], 'true,true,false,true': [1.0, 2, 2], 'true,true,false,false': [1.221, 6, 2], 'true,false,true': [0.493, 507, 687], 'true,false,false,true': [1.915, 5, 14], 'true,false,false,false': [1.895, 5, 17], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.495, 8, 6], 'false,false': [0.49, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'haswordvenue(A, C)', 'true,false,false': 'author(F, D), venue(F, A)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordvenue(A, H), haswordauthor(I, H)', 'false,true,true': 'haswordtitle(J, H)', 'false,true,false': 'haswordtitle(K, G)'}, {'true,true': [0.356, 3, 17], 'true,false,true': [1.0, 2, 2], 'true,false,false,true': [0.852, 3, 1], 'true,false,false,false': [0.894, 4, 1], 'false,true,true,true': [1.589, 3, 16], 'false,true,true,false': [1.221, 6, 2], 'false,true,false,true': [16.896, 498, 669], 'false,true,false,false': [2.696, 10, 31], 'false,false': [0.379, 15, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)'}, {'true,true': [0.491, 518, 708], 'true,false,true': [0.439, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [1.83e-08, 0, 20], 'false,true,false': [0.491, 8, 6], 'false,false': [0.49, 8, 6]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)'}, {'true,true': [0.491, 518, 708], 'true,false,true': [0.439, 5, 14], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [0.0, 0, 5], 'false,true,true': [0.0, 0, 20], 'false,true,false': [0.491, 8, 6], 'false,false': [0.49, 8, 6]}]]
[{'': [0.24306651325713594, 0.22222222222222385], 'true': [0.24399564626142126, 0.1844140392623454], 'false': [0.17993079584775207, 0.24489795918367352], 'true,false': [0.19390581717451486, 0.17561983471074338], 'false,true': [-8.881784197001253e-17, 0.24489795918367352], 'true,false,false': [0.20761245674740453, 0.0]}, {'': [0.24265720194658652, 0.19685819695867487], 'true': [0.2439956462613994, 0.18151807630785105], 'false': [0.15465453537750243, 0.24489795918367324], 'true,false': [0.193905817174515, 0.17043669583228802], 'true,false,false': [0.20761245674740458, 0.0], 'false,true': [2.6645352591003756e-16, 0.24489795918367324]}, {'': [0.24225435465227532, 0.17210326137526186], 'true': [0.2439956462614137, 0.17873720595178566], 'true,false': [0.1939058171745152, 0.16545366223293648], 'false': [0.1299852570106418, 0.2448979591836735], 'true,false,false': [0.20761245674740486, -4.4408920985006264e-17], 'false,true': [-2.6645352591003756e-16, 0.2448979591836735]}, {'': [0.2420184202193411, 0.1576721797796284], 'true': [0.24399564626139422, 0.17736162471011827], 'true,false': [0.192926167121755, 0.16380420131299053], 'true,false,false': [0.20761245674740472, 4.4408920985006264e-17], 'false': [0.11560410995340124, 0.24489795918367352], 'false,true': [1.3322676295501878e-16, 0.24489795918367352]}, {'': [0.2419071891360443, 0.1510919355481629], 'true': [0.22558593749999994, 0.24217238192445256], 'true,false': [0.2443183252948197, 0.1766662213312558], 'true,true': [0.12749999999999995, 0.22222222222222218], 'true,true,false': [0.24999999999999994, 0.18749999999999994], 'true,false,false': [0.1928999136805661, 0.16259333977574142], 'false': [0.10904663473311735, 0.24489795918367335], 'false,true': [2.2204460492503132e-17, 0.24489795918367335]}, {'': [0.22542524524899837, 0.23792052015146825], 'false': [0.2413590856462169, 0.14608264811475954], 'false,true': [0.24351408753659778, 0.17686260513592436], 'true': [0.12669706781465248, 0.21066727973065133], 'true,false': [0.25000000000000006, 0.1684669232600261], 'false,true,false': [0.19291380837503871, 0.16298456654228186], 'true,false,false': [0.1756054753110834, 0.15999999999999998], 'false,false': [0.10103682647446094, 0.24489795918367338]}, {'': [0.2402312340886409, 0.14652265973258757], 'true': [0.193885188299803, 0.24133822629026844], 'true,false': [0.24350635065306298, 0.1770979350285703], 'true,true': [0.12670710184201256, 0.21635317685343095], 'true,true,false': [0.25, 0.18641302878613883], 'true,false,false': [0.19308401642112136, 0.16328919308634865], 'false': [0.10516425809953518, 0.24039226047779513], 'false,true': [-2.2204460492503132e-17, 0.24489795918367346]}, {'': [0.19537841077596071, 0.2373857518482458], 'false': [0.2408953918018995, 0.14356135273390933], 'false,true': [0.1719467792679769, 0.24237689586888875], 'false,true,false': [0.24463227179307648, 0.17732922916728264], 'true': [0.12641836736880743, 0.20673691424859725], 'true,false': [0.25000000000000006, 0.17054295733734856], 'false,true,true': [0.1329639889196675, 0.18644741634715256], 'true,false,false': [0.18151857289116194, 0.15999999999999995]}, {'': [0.23913029892645368, 0.14483929409749174], 'true': [0.24117301143495048, 0.17753278776768308], 'true,false': [0.19313478739566795, 0.16404592743931962], 'true,false,false': [0.2076124567474049, 0.0], 'false': [0.10312160316468748, 0.24015816389801842], 'false,true': [1.6653345369377347e-17, 0.24131634140415653]}, {'': [0.2391214323475016, 0.1439336449878391], 'true': [0.24118067962047554, 0.17710923457579397], 'true,false': [0.1931551585730824, 0.16322709802574084], 'true,false,false': [0.2076124567474048, 0.0], 'false': [0.10242547788120894, 0.24013404893766596], 'false,true': [-1.3877787807814457e-17, 0.24127963399054622]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
0;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
0;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
0;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
1;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
1;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
2;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
2;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
2;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
3;true,false,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
3;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
3;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(A, J), haswordtitle(K, J).;true;true
4;false,true;haswordtitle(K, L), haswordvenue(B, L).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(B, J), haswordtitle(K, J).;true;true
6;false,true;haswordtitle(K, L), haswordvenue(A, L).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
8;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
8;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
8;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
9;true,false,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
9;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
9;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.30665618885999163;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.4047531668618019;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.386198448632422;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24206322397592006;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.3261448737160187;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2788572331674748;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.4175135841583099;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.17062637354018512;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.18614898381430323;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.24558668125641064;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.20966773150020385;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.3207118471601496;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.13664585375352212;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.4135394151203006;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.06353941512030048;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.1575832083121707;  // std dev = 0.838, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.23646058487969954;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.13891629954241463;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.18620428986064227;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.17805918236963383;  // std dev = 1.889, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.2100327524080362;  // std dev = 0.318, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.10762034996184425;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.3756956853975629;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.04785303348920687;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.22087727412463362;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.1039746010160044;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.14069831902044802;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.1370524169548924;  // std dev = 1.891, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.21733803683340533;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.08372807955323866;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.06600318601199684;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07962504818511577;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.10809142114220012;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.07840060765351262;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.19999496747471224;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.18263666018985042;  // std dev = 1.83e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.06457405393631672;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.0506444303170146;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05974616680122109;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.08855266474447132;  // std dev = 0.439, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.054321272887547796;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.1699021669430536;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.15693376808783466;  // std dev = 1.29e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.04949778322519479;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.038689877141555744;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.2484924521369095;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.001193883058364889;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.2006291580316899;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.04324374505979;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.07026712735003929;  // std dev = 1.912, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.06459107074677944;  // std dev = 1.890, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.13726959235897412;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.03777940363354101;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.029466625246109435;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.537222
   AUC PR    = 0.344293
   CLL	      = -0.755584
   Precision = 0.35429 at threshold = 0.5
   Recall    = 0.955922
   F1        = 0.516976


Total learning time: 133.1881251335144 seconds
Total inference time: 14.95 seconds
AUC ROC: 0.537222


Results scoring model
   AUC ROC   = 0.553342
   AUC PR    = 0.660693
   CLL	      = -0.666314
   Precision = 0.594317 at threshold = 0.5
   Recall    = 0.976654
   F1        = 0.73896


Total scoring time: 2.18 seconds
Refined model CLL: -0.666314


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.537425
   AUC PR    = 0.345718
   CLL	      = -0.756257
   Precision = 0.354232 at threshold = 0.5
   Recall    = 0.955922
   F1        = 0.516913


Total learning time: 263.2522723350525 seconds
Total inference time: 14.772 seconds
AUC ROC: 0.537425
Total revision time: 263.2522723350525
Best scored revision CLL: -0.664972


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 02:47:56
{'AUC ROC': 0.537425, 'AUC PR': 0.345718, 'CLL': -0.756257, 'Precision': [0.354232, 0.5], 'Recall': 0.955922, 'F1': 0.516913, 'Learning time': 263.2522723350525, 'Inference time': 14.772, 'parameter': {'AUC ROC': 0.537425, 'AUC PR': 0.345718, 'CLL': -0.756257, 'Precision': [0.354232, 0.5], 'Recall': 0.955922, 'F1': 0.516913, 'Learning time': 125.67314720153809, 'Inference time': 14.772}}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.4356367001892301;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5949910403626703;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.37395569825543723;  // std dev = 0.494, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.5062567560764839;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.24811816884741297;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.5791684237702857;  // std dev = 0.357, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(B, C) )
%   | | then return 0.22916842377028543;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return -0.008145345695425868;  // std dev = 0.852, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.07083157622971455;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.3045453081923796;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.4047531668618019;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.42464571865829975;  // std dev = 1.908, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return 0.4317030979309822;  // std dev = 0.348, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.20848477447886868;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.5118627986468953;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.18162271221626702;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.06570188218847453;  // std dev = 0.846, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.13495415790755155;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.23990098036198004;  // std dev = 0.494, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.3098169854894562;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.32456036871644006;  // std dev = 1.905, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.35163309306853874;  // std dev = 0.335, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.1316730160126654;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.18613079633684704;  // std dev = 0.492, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.23288770051702257;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.20738703360610133;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.3712569085691976;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then return 0.36332570147106397;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.10395681007912147;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return 0.10354034558269198;  // std dev = 0.490, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.34355878242388427;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.09712152083658455;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.08805214519332864;  // std dev = 0.842, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.1464488403162268;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( haswordtitle(I, G) )
%   | | then return 0.3384071808640375;  // std dev = 0.365, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | else return -0.11945971677314511;  // std dev = 0.410, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(A, J), haswordvenue(B, J) )
%   | | then if ( haswordtitle(K, J) )
%   | | | then return 0.13785941007973937;  // std dev = 16.896, 1,167.000 (wgt'ed) examples reached here.  /* #neg=498 #pos=669 */
%   | | | else return 0.18095086872722657;  // std dev = 2.699, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else return 0.18406064930025606;  // std dev = 0.385, 46.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=32 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.25877508648178915;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.07355346301319576;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( author(F, D), venue(F, A) )
%   | | | then return -0.06878559581697541;  // std dev = 0.842, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.11407542788291998;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.10492524536971336;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.13105046013515007;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.14377693424014068;  // std dev = 1.899, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.17574606031286105;  // std dev = 0.326, 33.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=26 */
%   | | else return 0.04200485849598227;  // std dev = 0.487, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.19805414138600078;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | else if ( haswordvenue(A, C) )
%   | | then return 0.055473364917373424;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.07408489732931842;  // std dev = 0.410, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( haswordtitle(H, F) )
%   | | then return 0.2295359773117065;  // std dev = 0.365, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | else if ( author(I, G), venue(I, B) )
%   | | | then return -0.07969252359985265;  // std dev = 0.839, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.14304770812830148;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, J), haswordvenue(B, J) )
%   | | then if ( haswordtitle(K, J) )
%   | | | then return 0.07752614361289734;  // std dev = 16.896, 1,167.000 (wgt'ed) examples reached here.  /* #neg=498 #pos=669 */
%   | | | else return 0.10623845467404207;  // std dev = 2.702, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   | | else return 0.1155061508441612;  // std dev = 0.385, 46.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=32 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.180433754877174;  // std dev = 0.356, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.04173698305793948;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.0719407651076942;  // std dev = 1.220, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.05895515614719211;  // std dev = 0.493, 1,194.000 (wgt'ed) examples reached here.  /* #neg=507 #pos=687 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.07602325179922857;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.08842112661854966;  // std dev = 1.904, 22.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=17 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.19788005333284847;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.006951117990094989;  // std dev = 0.485, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return -0.022470455881526217;  // std dev = 0.484, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04519212900932811;  // std dev = 0.491, 1,226.000 (wgt'ed) examples reached here.  /* #neg=518 #pos=708 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.05919742083032769;  // std dev = 0.440, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.03310895234804848;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.1950580859448504;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then return 0.16833451286069692;  // std dev = 2.79e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.00527433924587979;  // std dev = 0.485, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else return -0.017002349379471354;  // std dev = 0.484, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */


Results
   AUC ROC   = 0.534336
   AUC PR    = 0.343449
   CLL	      = -0.757578
   Precision = 0.353454 at threshold = 0.5
   Recall    = 0.956812
   F1        = 0.516214


Total learning time: 110.59651207923889 seconds
Total inference time: 12.333 seconds
AUC ROC: 0.534336


Dataset: 3_imdb_cora, Fold: 2, Type: Scratch (RDN-B), Time: 02:50:00
{'AUC ROC': 0.534336, 'AUC PR': 0.343449, 'CLL': -0.757578, 'Precision': [0.353454, 0.5], 'Recall': 0.956812, 'F1': 0.516214, 'Learning time': 110.59651207923889, 'Inference time': 12.333}


Starting fold 3

Target train facts examples: 9306
Target train pos examples: 581
Target train neg examples: 2222

Target test facts examples: 33252
Target test pos  examples: 2436
Target test neg examples: 2800

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.35814893509951223;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.14703782398840126;  // std dev = 0.453, 45.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=13 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.20950028645086372;  // std dev = 0.477, 37.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=13 */
%   | | else return 0.222813246053571;  // std dev = 0.481, 1,415.000 (wgt'ed) examples reached here.  /* #neg=899 #pos=516 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.0168510649004878;  // std dev = 0.331, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return 0.06403128804068885;  // std dev = 3.334, 68.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=14 */
%   | | | else return -0.0168510649004878;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.02481560176617905;  // std dev = 3.873, 108.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=18 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.16404969695714458;  // std dev = 0.467, 46.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=15 */
%   | | else return 0.008741135785635002;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.14021020716929278;  // std dev = 0.462, 42.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=13 */
%   | | else return 0.18689038808989367;  // std dev = 0.479, 1,441.000 (wgt'ed) examples reached here.  /* #neg=925 #pos=516 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.4951012175257391;  // std dev = 2.400, 25.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=16 */
%   | | | else return -0.14457582164278762;  // std dev = 0.010, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | else return -0.04966068723616569;  // std dev = 0.294, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 2.5970499993073834E-4;  // std dev = 0.355, 122.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=18 */
%   | | else return -0.12831814069842443;  // std dev = 0.013, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.2989487069375048;  // std dev = 1.204, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.09251073020845975;  // std dev = 0.447, 47.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=13 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.14337631863233102;  // std dev = 0.471, 39.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=13 */
%   | | else return 0.1612265541536186;  // std dev = 0.480, 1,431.000 (wgt'ed) examples reached here.  /* #neg=915 #pos=516 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.5470997401785272;  // std dev = 2.206, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.14847735573376517;  // std dev = 0.026, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else return -0.014843385647392696;  // std dev = 0.331, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.01825327834196866;  // std dev = 0.342, 110.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=18 */
%   | | else return -0.11420534801346831;  // std dev = 0.012, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D), haswordtitle(F, C) )
%   | | then return 0.3935471665616183;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordtitle(G, C) )
%   | | | then return 0.07588505095855286;  // std dev = 3.040, 45.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=13 */
%   | | | else return 0.08993935345480016;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.13403524003188866;  // std dev = 0.480, 1,471.000 (wgt'ed) examples reached here.  /* #neg=942 #pos=529 */
%   else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.506613681708885;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.12969388722265662;  // std dev = 0.008, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else return -0.05771720804776209;  // std dev = 0.276, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.013383274816470477;  // std dev = 0.341, 109.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=18 */
%   | | else return -0.10116246120102665;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.11259150410474174;  // std dev = 0.489, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return 0.05660716724508272;  // std dev = 0.450, 46.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=13 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.06204191573219302;  // std dev = 0.450, 46.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=13 */
%   | | else return 0.09586988112781196;  // std dev = 0.476, 1,489.000 (wgt'ed) examples reached here.  /* #neg=973 #pos=516 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.6076954036450278;  // std dev = 1.592, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.13207319991527214;  // std dev = 0.026, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | else return -0.03966784532699283;  // std dev = 0.300, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return -0.11176206148832174;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.01069012146960284;  // std dev = 0.325, 102.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=18 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then if ( haswordvenue(B, D) )
%   | | | then return 0.2826925866852658;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.06626877827994923;  // std dev = 3.012, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | | else return -0.08259406596536456;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.10063849957392419;  // std dev = 0.482, 1,435.000 (wgt'ed) examples reached here.  /* #neg=906 #pos=529 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.6191612661730833;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.11681338477954824;  // std dev = 0.016, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | else return -0.04021046183484774;  // std dev = 0.294, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.0038779320624565796;  // std dev = 0.317, 100.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=18 */
%   | | else return -0.0932276653410436;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06989809095938415;  // std dev = 0.479, 1,525.000 (wgt'ed) examples reached here.  /* #neg=980 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.44006936435804533;  // std dev = 1.785, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.11978060720011746;  // std dev = 0.053, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | | else return 0.06457749492642688;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.01503139346821142;  // std dev = 2.560, 89.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=16 */
%   | | | else return -0.039899374079436584;  // std dev = 1.348, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else return -0.08563979206589893;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06331960124429355;  // std dev = 0.481, 1,492.000 (wgt'ed) examples reached here.  /* #neg=947 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then return 0.012577730910241097;  // std dev = 0.258, 83.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=16 */
%   | | else if ( title(G, E), venue(G, A) )
%   | | | then return -0.12200038108771914;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.038655185275027516;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.01516313879855458;  // std dev = 2.631, 83.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=16 */
%   | | | else return -0.04941536331528336;  // std dev = 1.359, 26.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | | else return -0.07920453681606755;  // std dev = 0.000166, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.042366995364925726;  // std dev = 0.479, 1,524.000 (wgt'ed) examples reached here.  /* #neg=979 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.30071636885091735;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.10438694707522045;  // std dev = 0.063, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | else return 0.03286207922910916;  // std dev = 0.361, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.035377725988755465;  // std dev = 2.591, 111.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=16 */
%   | | | else return 0.018696227526141827;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else return -0.07361140198983744;  // std dev = 0.000159, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.035125653019993826;  // std dev = 0.480, 1,514.000 (wgt'ed) examples reached here.  /* #neg=969 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.33953698943964805;  // std dev = 1.785, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.10424817055428727;  // std dev = 0.022, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else return 0.04965688349536899;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return -0.040861507661718977;  // std dev = 2.503, 100.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=16 */
%   | | | else return 0.05729557109855581;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else return -0.06871932269816712;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.563074
   AUC PR    = 0.505282
   CLL	      = -0.705045
   Precision = 0.570866 at threshold = 0.5
   Recall    = 0.059524
   F1        = 0.107807


Total learning time: 129.05611991882324 seconds
Total inference time: 14.3 seconds
AUC ROC: 0.563074


Results scoring model
   AUC ROC   = 0.594875
   AUC PR    = 0.278726
   CLL	      = -0.511273
   Precision = 0.586207 at threshold = 0.5
   Recall    = 0.05852
   F1        = 0.106416


Total scoring time: 3.551 seconds
Parameter learned model CLL: -0.511273


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,false,true': 'title(M, L), venue(M, B)', 'false,false,false': 'haswordvenue(A, N), haswordtitle(P, N)'}, {'true,true,true': [1.225, 3, 3], 'true,true,false': [0.453, 32, 13], 'true,false,true': [0.477, 24, 13], 'true,false,false': [0.481, 899, 516], 'false,true': [0.331, 14, 2], 'false,false,true,true': [3.334, 54, 14], 'false,false,true,false': [1.323, 14, 2], 'false,false,false,true': [3.873, 90, 18], 'false,false,false,false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, C)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, A)', 'false,true,true': 'samebib(K, L), venue(L, B)', 'false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true,true': [0.467, 31, 15], 'true,true,false': [0.894, 4, 1], 'true,false,true': [0.462, 29, 13], 'true,false,false': [0.479, 925, 516], 'false,true,true,true': [2.4, 9, 16], 'false,true,true,false': [0.01, 63, 0], 'false,true,false': [0.294, 19, 2], 'false,false,true': [0.355, 104, 18], 'false,false,false': [0.013, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, B)', 'false,true,true': 'samebib(K, L), venue(L, A)', 'false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true,true': [1.204, 3, 3], 'true,true,false': [0.447, 34, 13], 'true,false,true': [0.471, 26, 13], 'true,false,false': [0.48, 915, 516], 'false,true,true,true': [2.206, 7, 16], 'false,true,true,false': [0.026, 58, 0], 'false,true,false': [0.331, 14, 2], 'false,false,true': [0.342, 92, 18], 'false,false,false': [0.012, 6, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(B, D), haswordtitle(F, C)', 'true,true,false': 'haswordtitle(G, C)', 'false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false,true': 'title(J, I), venue(J, A)', 'false,true,true': 'samebib(J, K), venue(K, B)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true': [0.816, 1, 2], 'true,true,false,true': [3.04, 32, 13], 'true,true,false,false': [0.816, 2, 1], 'true,false': [0.48, 942, 529], 'false,true,true,true': [2.089, 6, 16], 'false,true,true,false': [0.008, 57, 0], 'false,true,false': [0.276, 22, 2], 'false,false,true': [0.341, 91, 18], 'false,false,false': [3.73e-09, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(F, C)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, B)', 'false,true,true': 'samebib(K, L), venue(L, A)', 'false,false': 'haswordvenue(A, M), haswordauthor(N, M)'}, {'true,true,true': [0.489, 4, 3], 'true,true,false': [0.45, 33, 13], 'true,false,true': [0.45, 33, 13], 'true,false,false': [0.476, 973, 516], 'false,true,true,true': [1.592, 3, 16], 'false,true,true,false': [0.026, 66, 0], 'false,true,false': [0.3, 18, 2], 'false,false,true': [0.0, 4, 0], 'false,false,false': [0.325, 84, 18]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, C)', 'true,true,true': 'haswordvenue(B, D)', 'false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false,true': 'title(I, H), venue(I, A)', 'false,true,true': 'samebib(I, J), venue(J, B)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)'}, {'true,true,true,true': [0.816, 1, 2], 'true,true,true,false': [3.012, 30, 13], 'true,true,false': [0.894, 4, 1], 'true,false': [0.482, 906, 529], 'false,true,true,true': [0.97, 1, 16], 'false,true,true,false': [0.016, 63, 0], 'false,true,false': [0.294, 19, 2], 'false,false,true': [0.317, 82, 18], 'false,false,false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false,false,true': 'title(J, I), venue(J, A)'}, {'true': [0.479, 980, 545], 'false,true,true,true': [1.785, 4, 16], 'false,true,true,false': [0.053, 81, 0], 'false,true,false': [0.4, 8, 2], 'false,false,true,true': [2.56, 73, 16], 'false,false,true,false': [1.348, 20, 2], 'false,false,false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, B)', 'false,true,false': 'title(G, E), venue(G, A)', 'false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false,false,true': 'title(J, I), venue(J, A)'}, {'true': [0.481, 947, 545], 'false,true,true': [0.258, 67, 16], 'false,true,false,true': [0.0, 9, 0], 'false,true,false,false': [1.279, 9, 2], 'false,false,true,true': [2.631, 67, 16], 'false,false,true,false': [1.359, 24, 2], 'false,false,false': [0.000166, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false,false,true': 'title(J, I), venue(J, A)'}, {'true': [0.479, 979, 545], 'false,true,true,true': [1.952, 5, 16], 'false,true,true,false': [0.063, 75, 0], 'false,true,false': [0.361, 11, 2], 'false,false,true,true': [2.591, 95, 16], 'false,false,true,false': [1.291, 10, 2], 'false,false,false': [0.000159, 6, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false,false,true': 'title(J, I), venue(J, B)'}, {'true': [0.48, 969, 545], 'false,true,true,true': [1.785, 4, 16], 'false,true,true,false': [0.022, 73, 0], 'false,true,false': [0.4, 8, 2], 'false,false,true,true': [2.503, 84, 16], 'false,false,true,false': [1.279, 9, 2], 'false,false,false': [0.0, 4, 0]}]]
[{'': [0.23112347051294152, 0.14150625547494552], 'true': [0.2153018069973082, 0.23159231306299818], 'true,false': [0.2279035792549301, 0.2316842512704479], 'true,true': [0.24999999999999992, 0.20543209876543156], 'false': [0.10937500000000004, 0.14395792241946198], 'false,false': [0.15419501133786792, 0.13586559532505424], 'false,false,true': [0.1634948096885808, 0.10937500000000004], 'false,false,false': [0.13888888888888834, 0.0]}, {'': [0.2290071131574718, 0.12912244325734942], 'true': [0.21444919879002963, 0.2294628670749144], 'true,false': [0.21371882086167746, 0.22986003724570117], 'true,true': [0.21800281063215654, 0.16000000000000003], 'false': [0.13780644658239533, 0.12137529107308719], 'false,true': [0.14867737662354427, 0.08616780045351471], 'false,true,true': [0.23039999999999966, 1.5384795553180772e-06], 'false,false': [0.1256974581666277, 3.302805888473481e-05]}, {'': [0.22967834117574326, 0.12992311803172668], 'true': [0.20908003544574996, 0.23035093231623924], 'true,false': [0.22222222222222213, 0.23056401601553914], 'true,true': [0.2417056467599715, 0.20009053870529667], 'false': [0.1509434119810877, 0.11201150066973047], 'false,true': [0.15848145192439556, 0.10937499999999999], 'false,true,true': [0.21165587311795636, 1.192727031237563e-05], 'false,false': [0.11721241366709648, 2.3656236209627462e-05]}, {'': [0.22973037896915396, 0.1179498099034736], 'true': [0.21297411623370638, 0.2302613001628775], 'true,true': [0.22222222222222224, 0.20649305511929272], 'true,true,false': [0.20543209876543142, 0.2222222222222223], 'false': [0.12454159829031851, 0.11189250003446173], 'false,true': [0.13659041908156688, 0.076388888888889], 'false,true,true': [0.19834710743801615, 1.0727564302504184e-06], 'false,false': [0.1164497130994833, 2.7755575615628915e-18]}, {'': [0.22520820882907913, 0.11061397942228976], 'true': [0.20792502163797227, 0.22577318334923818], 'true,false': [0.20274102079395084, 0.2264504282806387], 'true,true': [0.23927102394045047, 0.2027410207939511], 'false': [0.11901163059872236, 0.10220724169976529], 'false,true': [0.12482410876678116, 0.09000000000000005], 'false,true,true': [0.13345741300646904, 1.0597142663553766e-05], 'false,false': [0.0, 0.10564953723614584]}, {'': [0.23197297435762249, 0.09914747638075867], 'true': [0.21152108852527063, 0.23265477828586892], 'true,true': [0.2145171238928212, 0.15999999999999998], 'true,true,true': [0.2222222222222222, 0.2109248242293133], 'false': [0.10008225114318318, 0.09799250296225365], 'false,true': [0.1024110222617286, 0.0861678004535148], 'false,true,true': [0.05536332179930802, 3.962543089707456e-06], 'false,false': [0.10065763250606036, 0.0]}, {'': [0.2294336394675754, 0.0812450095163195], 'false': [0.08887719718275311, 0.07362817607033109], 'false,true': [0.0813486897439057, 0.16000000000000003], 'false,true,true': [0.15930432096471797, 3.4645015266719805e-05], 'false,false': [0.07550460542958, -2.3129646346357427e-18], 'false,false,true': [0.07361708697759067, 0.08264462809917356]}, {'': [0.23157063658613702, 0.07446110549576312], 'false': [0.0709236686141804, 0.07724729196952394], 'false,false': [0.08065383387153245, 5.531481027387653e-09], 'false,false,true': [0.08339622341953076, 0.07100591715976325], 'false,true': [0.06634443172597589, 0.0882062090415072], 'false,true,false': [0.0, 0.14876033057851235]}, {'': [0.22930242098788897, 0.07007840210079538], 'false': [0.07546102393123419, 0.06530548617313764], 'false,true': [0.06776941854718753, 0.13017751479289946], 'false,true,true': [0.18140589569160992, 5.242757110987798e-05], 'false,false': [0.06840307064656488, 4.198647735043082e-09], 'false,false,true': [0.06049771463196167, 0.13888888888888878]}, {'': [0.23027806649655877, 0.07318828424606942], 'false': [0.07677846816086183, 0.06956690424011962], 'false,true': [0.067498029443787, 0.16000000000000006], 'false,false': [0.0720246844308678, 0.0], 'false,false,true': [0.06262896215446241, 0.14876033057851246], 'false,true,true': [0.15924951672158266, 6.814544136293445e-06]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(A, I), haswordauthor(J, I).;true;true
0;false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
0;false,false,false;haswordvenue(A, N), haswordtitle(P, N).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
1;false,true;title(K, J), venue(K, A).;true;true
1;false,true,true;samebib(K, L), venue(L, B).;true;true
1;false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
2;false,true;title(K, J), venue(K, B).;true;true
2;false,true,true;samebib(K, L), venue(L, A).;true;true
2;false,false;haswordvenue(A, M), haswordtitle(N, M).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(A, H), haswordtitle(I, H).;true;true
3;false,true;title(J, I), venue(J, A).;true;true
3;false,true,true;samebib(J, K), venue(K, B).;true;true
3;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
4;false,true;title(K, J), venue(K, B).;true;true
4;false,true,true;samebib(K, L), venue(L, A).;true;true
4;false,false;haswordvenue(A, M), haswordauthor(N, M).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(A, G), haswordtitle(H, G).;true;true
5;false,true;title(I, H), venue(I, A).;true;true
5;false,true,true;samebib(I, J), venue(J, B).;true;true
5;false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
6;false,true;title(F, E), venue(F, A).;true;true
6;false,true,true;samebib(F, G), venue(G, B).;true;true
6;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
7;false,true;title(F, E), venue(F, B).;true;true
7;false,true,false;title(G, E), venue(G, A).;true;true
7;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
8;false,true;title(F, E), venue(F, B).;true;true
8;false,true,true;samebib(F, G), venue(G, A).;true;true
8;false,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
9;false,true;title(F, E), venue(F, A).;true;true
9;false,true,true;samebib(F, G), venue(G, B).;true;true
9;false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D), haswordtitle(F, C) )
%   | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( haswordauthor(G, C) )
%   | | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.1289822684328457;  // std dev = 3.079, 48.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=13 */
%   | else return 0.21703631637494836;  // std dev = 0.480, 1,474.000 (wgt'ed) examples reached here.  /* #neg=945 #pos=529 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then return -0.00851773156715447;  // std dev = 0.340, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, B) )
%   | | | then return 0.04862512557570285;  // std dev = 3.599, 84.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=16 */
%   | | | else return -0.05851773156715447;  // std dev = 1.354, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.01814893509951238;  // std dev = 3.666, 100.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=16 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19327952100383602;  // std dev = 0.481, 1,500.000 (wgt'ed) examples reached here.  /* #neg=955 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.0406304043090871;  // std dev = 0.306, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 0.026588534829446307;  // std dev = 3.644, 94.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=16 */
%   | | | else return 0.14163957017552478;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else return 0.006401364502570268;  // std dev = 0.357, 106.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=16 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D), haswordtitle(F, C) )
%   | | then return 0.4437191573078126;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordtitle(G, C) )
%   | | | then return 0.08315051237821677;  // std dev = 3.054, 46.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=13 */
%   | | | else return 0.15069466371174475;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.15737056790340942;  // std dev = 0.479, 1,484.000 (wgt'ed) examples reached here.  /* #neg=955 #pos=529 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.5477335960747002;  // std dev = 2.206, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.14760898268732128;  // std dev = 0.018, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else return -0.04038650747401332;  // std dev = 0.294, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.013823290690608872;  // std dev = 0.368, 111.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=18 */
%   | | else return -0.12512979742408606;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.14083013693470697;  // std dev = 0.482, 1,489.000 (wgt'ed) examples reached here.  /* #neg=944 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.546959198203243;  // std dev = 2.207, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.14849907785957042;  // std dev = 0.012, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.14913021663881673;  // std dev = 1.05e-08, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.05789648022256503;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.04241099091940291;  // std dev = 3.258, 80.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=16 */
%   | | | else return -0.05403627965911289;  // std dev = 1.359, 26.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | | else return -0.11650472954430124;  // std dev = 0.012, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10412925497442622;  // std dev = 0.478, 1,536.000 (wgt'ed) examples reached here.  /* #neg=991 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.01718392766908982;  // std dev = 0.297, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 0.03274407988253516;  // std dev = 3.040, 72.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=14 */
%   | | | else return -0.029693123550623673;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.010214301717304707;  // std dev = 3.564, 108.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=18 */
%   | | | else return -0.10182729063934437;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.08467349689030297;  // std dev = 0.479, 1,533.000 (wgt'ed) examples reached here.  /* #neg=988 #pos=545 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return -0.03440430437197987;  // std dev = 0.286, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 0.021710691313621973;  // std dev = 3.274, 85.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=16 */
%   | | | else return -0.03476453091066493;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.00586469887526735;  // std dev = 3.361, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
%   | | | else return -0.09395727056188496;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.4256244021653893;  // std dev = 0.804, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.054233025563388534;  // std dev = 0.468, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | else return 0.06668768063313185;  // std dev = 0.478, 1,491.000 (wgt'ed) examples reached here.  /* #neg=962 #pos=529 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.5529881979202442;  // std dev = 1.785, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return -0.1405003400590535;  // std dev = 0.035, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else if ( title(K, H), venue(K, A) )
%   | | | then return -0.11805315395402623;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.024803988903116643;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.0384489322943346;  // std dev = 0.348, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else return -0.0023608269054271338;  // std dev = 0.329, 105.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=16 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.055844938885571654;  // std dev = 0.479, 1,524.000 (wgt'ed) examples reached here.  /* #neg=979 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( title(G, E), venue(G, B) )
%   | | | then return 0.2721167719925358;  // std dev = 2.721, 34.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   | | | else return -0.13367760030507933;  // std dev = 0.103, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.132750960556711;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.00773122153910107;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | else return -0.011836509462545716;  // std dev = 0.285, 122.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=18 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.039433298619455555;  // std dev = 0.478, 1,543.000 (wgt'ed) examples reached here.  /* #neg=998 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5553880261856708;  // std dev = 1.591, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.12566926223910804;  // std dev = 0.159, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else if ( title(H, E), venue(H, B) )
%   | | | then return -0.11819842876705534;  // std dev = 3.73e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.008530659473491907;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return -0.1129144040425905;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return -0.003097056595283121;  // std dev = 3.179, 108.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=18 */
%   | | | else return -0.08416430123314915;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.0492002761037443;  // std dev = 0.475, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
%   | | else return -0.12816566413006447;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.05427120248759144;  // std dev = 0.480, 36.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=13 */
%   | | else return 0.03824381336503532;  // std dev = 0.480, 1,429.000 (wgt'ed) examples reached here.  /* #neg=913 #pos=516 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then return 0.012509876453080212;  // std dev = 0.293, 81.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=16 */
%   | | else return -0.0369228332171527;  // std dev = 0.307, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, A) )
%   | | | then return -0.013029709508002115;  // std dev = 2.905, 100.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=16 */
%   | | | else return 0.28091529054625514;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return -0.08165963983316435;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.567699
   AUC PR    = 0.516313
   CLL	      = -0.709839
   Precision = 0.875 at threshold = 0.5
   Recall    = 0.005747
   F1        = 0.011419


Total learning time: 93.19501614570618 seconds
Total inference time: 10.963 seconds
AUC ROC: 0.567699


Results scoring model
   AUC ROC   = 0.595427
   AUC PR    = 0.279685
   CLL	      = -0.514737
   Precision = 0.5 at threshold = 0.5
   Recall    = 0.003442
   F1        = 0.006838


Total scoring time: 3.048 seconds
Refined model CLL: -0.514737


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.563074
   AUC PR    = 0.505282
   CLL	      = -0.705045
   Precision = 0.570866 at threshold = 0.5
   Recall    = 0.059524
   F1        = 0.107807


Total learning time: 228.8501360645294 seconds
Total inference time: 14.3 seconds
AUC ROC: 0.563074
Total revision time: 228.8501360645294
Best scored revision CLL: -0.511273


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 02:54:18
{'AUC ROC': 0.563074, 'AUC PR': 0.505282, 'CLL': -0.705045, 'Precision': [0.570866, 0.5], 'Recall': 0.059524, 'F1': 0.107807, 'Learning time': 228.8501360645294, 'Inference time': 14.3, 'parameter': {'AUC ROC': 0.563074, 'AUC PR': 0.505282, 'CLL': -0.705045, 'Precision': [0.570866, 0.5], 'Recall': 0.059524, 'F1': 0.107807, 'Learning time': 129.05611991882324, 'Inference time': 14.3}}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.1604745164948612;  // std dev = 0.459, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | else return 0.2257653353774782;  // std dev = 0.482, 1,439.000 (wgt'ed) examples reached here.  /* #neg=910 #pos=529 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then return -0.024204006076958388;  // std dev = 0.322, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return -0.030739953789376686;  // std dev = 0.314, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.037924215998388786;  // std dev = 3.623, 89.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=16 */
%   | | | else return 0.02836170105695919;  // std dev = 3.644, 94.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.19331521226977064;  // std dev = 0.481, 1,494.000 (wgt'ed) examples reached here.  /* #neg=949 #pos=545 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6979015904278222;  // std dev = 1.587, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.14397884052025303;  // std dev = 0.023, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else if ( title(H, E), venue(H, A) )
%   | | | then return -0.14533870876387434;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.02033870876387435;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return -0.006183364308087607;  // std dev = 3.710, 115.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=16 */
%   | | | else return 0.13918373263013098;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else return -0.14307252868105536;  // std dev = 0.008, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.2592433828474973;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.15858928056175647;  // std dev = 0.480, 1,509.000 (wgt'ed) examples reached here.  /* #neg=967 #pos=542 */
%   else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | then if ( title(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.5508801961992561;  // std dev = 2.206, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return -0.14489417483353545;  // std dev = 0.020, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else if ( title(I, F), venue(I, B) )
%   | | | then return -0.14575895445021386;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.031473073716789764;  // std dev = 1.317, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then return -0.12258420095877626;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.005787641955454795;  // std dev = 3.501, 113.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=18 */
%   | | | else return -0.12629501898796594;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.10262178544260803;  // std dev = 0.465, 49.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=16 */
%   | else return 0.1316043815135039;  // std dev = 0.480, 1,473.000 (wgt'ed) examples reached here.  /* #neg=944 #pos=529 */
%   else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | then if ( title(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.5076953827395496;  // std dev = 1.950, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.1275004207267516;  // std dev = 0.030, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else if ( title(J, G), venue(J, A) )
%   | | | then return -0.12884729205116904;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.03827762771558721;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return 0.01969648574980945;  // std dev = 3.321, 93.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=16 */
%   | | | else return -0.05506997599408332;  // std dev = 1.329, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else return -0.11317166498779373;  // std dev = 0.006, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.11736480701070372;  // std dev = 0.476, 42.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
%   | | else return -0.06288398471036279;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.1166464125463013;  // std dev = 0.482, 1,437.000 (wgt'ed) examples reached here.  /* #neg=908 #pos=529 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then return -0.03125907139127902;  // std dev = 0.264, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.026583171147310094;  // std dev = 3.294, 88.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=16 */
%   | | | else return -0.02292812295303175;  // std dev = 1.311, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.010097877310216621;  // std dev = 2.936, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */
%   | | | else return -0.10245383308966804;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.05147184182125083;  // std dev = 0.460, 48.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=15 */
%   | | else return -0.04952628419885308;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.04300502787923509;  // std dev = 0.465, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.08130375797397484;  // std dev = 0.479, 1,452.000 (wgt'ed) examples reached here.  /* #neg=936 #pos=516 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.4916199614745213;  // std dev = 2.092, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return -0.13245319183400933;  // std dev = 0.027, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | else return -0.04700480016854516;  // std dev = 0.284, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return -0.0026567826820905567;  // std dev = 0.299, 110.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=18 */
%   | | else return -0.09426786761980456;  // std dev = 0.004, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.10445498562568524;  // std dev = 0.491, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return 0.05062653027868659;  // std dev = 0.471, 39.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=13 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.06755777161138547;  // std dev = 0.471, 39.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=13 */
%   | | else return 0.07909013793283133;  // std dev = 0.483, 1,396.000 (wgt'ed) examples reached here.  /* #neg=880 #pos=516 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.42748792840070643;  // std dev = 1.950, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.11796381179094018;  // std dev = 0.027, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | else return -0.03269529568560137;  // std dev = 0.296, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return -0.0956642749056211;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.006042142960781655;  // std dev = 0.303, 105.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=18 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.05125915328415591;  // std dev = 0.479, 1,525.000 (wgt'ed) examples reached here.  /* #neg=980 #pos=545 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.0652461875502207;  // std dev = 0.316, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 0.005563372076676192;  // std dev = 2.691, 72.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=14 */
%   | | | else return -0.045189921027564486;  // std dev = 1.333, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return 0.013756276695377817;  // std dev = 0.874, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | | else return -0.02782143198564278;  // std dev = 2.916, 101.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=16 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.04470689858052879;  // std dev = 0.470, 44.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=15 */
%   | | else return -0.07226835332577386;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.03584366199783744;  // std dev = 0.478, 1,496.000 (wgt'ed) examples reached here.  /* #neg=967 #pos=529 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.4756874375490223;  // std dev = 1.586, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | | else return -0.11591377218876578;  // std dev = 0.037, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else return -0.03720289116902411;  // std dev = 0.283, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then return 0.05051655241284712;  // std dev = 0.280, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then return -0.10169322977315752;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.008981258317748998;  // std dev = 2.829, 96.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=16 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.03408468276259936;  // std dev = 0.480, 1,518.000 (wgt'ed) examples reached here.  /* #neg=973 #pos=545 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.33269496868411746;  // std dev = 1.950, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return -0.10460167707693459;  // std dev = 0.026, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | else return 0.04581208643277839;  // std dev = 0.386, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return -0.0292302890149682;  // std dev = 2.578, 97.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
%   | | | else return 0.003041415293621936;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | else return -0.08458196545884619;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.563097
   AUC PR    = 0.506209
   CLL	      = -0.705985
   Precision = 0.52 at threshold = 0.5
   Recall    = 0.021346
   F1        = 0.041009


Total learning time: 113.43294787406921 seconds
Total inference time: 12.169 seconds
AUC ROC: 0.563097


Dataset: 3_imdb_cora, Fold: 3, Type: Scratch (RDN-B), Time: 02:56:24
{'AUC ROC': 0.563097, 'AUC PR': 0.506209, 'CLL': -0.705985, 'Precision': [0.52, 0.5], 'Recall': 0.021346, 'F1': 0.041009, 'Learning time': 113.43294787406921, 'Inference time': 12.169}


Starting fold 4

Target train facts examples: 8129
Target train pos examples: 747
Target train neg examples: 1068

Target test facts examples: 34429
Target test pos  examples: 2270
Target test neg examples: 3954

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.24811816884741328;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.16653882456488167;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.20848477447886868;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3912569620992536;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1420942428155646;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.7460022840154411;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.25399771598455895;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.546002284015441;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.16413830416657968;  // std dev = 0.493, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.20469176329622513;  // std dev = 3.500, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.2607257858346722;  // std dev = 2.600, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return 0.11914890490746433;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.13348748687046988;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.12955478951205684;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.18715399206068548;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.2005676010604394;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.23624775363596132;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.0984134027840187;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1054393318007587;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.1017133544421929;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.14140856956772122;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.15193074277694943;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.17726781428136912;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.31684340738050265;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return -0.1831565926194977;  // std dev = 0.169, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.05508940509084235;  // std dev = 0.454, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08227505633229097;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.09561885127017916;  // std dev = 2.959, 36.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=19 */
%   | | | else return 0.07895298131554293;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.11423680926111243;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.1335946671161097;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.06985663255523138;  // std dev = 0.453, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.019979710273601823;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06363742491621592;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.05885227220019769;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.08232532797736182;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.08569474417838378;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.10146002868489164;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.05616428500288389;  // std dev = 0.453, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.01703879701562067;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.048914799545670636;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.04503639134858999;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.06177618767572404;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.06429604363362008;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.07767919373325634;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.0448450531141868;  // std dev = 0.452, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.014501698437223043;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.037432174186824055;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.03433402086411454;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.04641709813300456;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.04830045102747285;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.05990652354731872;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, A) )
%   | | then if ( samebib(L, M), venue(M, B) )
%   | | | then return 0.29892776130912535;  // std dev = 2.611, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return -0.20107223869087465;  // std dev = 0.234, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.013903728142553506;  // std dev = 0.415, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0.012321244652488569;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.570926
   AUC PR    = 0.43089
   CLL	      = -0.634075
   Precision = 0.721212 at threshold = 0.5
   Recall    = 0.052423
   F1        = 0.097741


Total learning time: 204.07268404960632 seconds
Total inference time: 17.174 seconds
AUC ROC: 0.570926


Results scoring model
   AUC ROC   = 0.548964
   AUC PR    = 0.46175
   CLL	      = -0.664181
   Precision = 0.661017 at threshold = 0.5
   Recall    = 0.052209
   F1        = 0.096774


Total scoring time: 2.596 seconds
Parameter learned model CLL: -0.664181


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.494, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'samebib(F, G), venue(G, B)', 'true,false': 'haswordtitle(H, C)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,true': 'haswordtitle(L, M), haswordvenue(B, M)'}, {'true,true,true,true': [0.0, 0, 8], 'true,true,true,false': [0.0, 7, 0], 'true,true,false': [0.894, 1, 4], 'true,false,true': [0.493, 924, 664], 'true,false,false,true': [3.5, 25, 25], 'true,false,false,false': [2.6, 11, 18], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)'}, {'true,true': [0.493, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.471, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'title(L, K), venue(L, B)', 'false,true,true': 'samebib(L, M), venue(M, A)'}, {'true,true': [0.492, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true,true': [2.619, 14, 14], 'false,true,true,false': [0.169, 35, 0], 'false,true,false': [0.454, 7, 3], 'false,false': [0.4, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, A)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true': [0.492, 932, 676], 'true,false,true,true': [2.959, 17, 19], 'true,false,true,false': [1.852, 8, 6], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.453, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.381, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true': [0.492, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.453, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.38, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)'}, {'true,true': [0.492, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true': [0.452, 12, 6], 'false,true,false': [0.4, 44, 11], 'false,false': [0.38, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'title(L, K), venue(L, A)', 'false,true,true': 'samebib(L, M), venue(M, B)'}, {'true,true': [0.492, 932, 676], 'true,false,true,true': [2.619, 16, 12], 'true,false,true,false': [2.306, 9, 13], 'true,false,false,true': [2.306, 9, 13], 'true,false,false,false': [1.195, 2, 5], 'false,true,true,true': [2.611, 14, 14], 'false,true,true,false': [0.234, 35, 0], 'false,true,false': [0.415, 7, 3], 'false,false': [0.38, 44, 11]}]]
[{'': [0.24455361249545102, 0.17089843750000108], 'true': [0.24366352318011741, 0.24803717352988336], 'true,false': [0.25000000000000133, 0.2354340071343634], 'true,false,true': [0.24489795918367302, 0.2417355371900822], 'true,false,false': [0.2417355371900822, 0.20408163265306106], 'false': [0.17864514918371124, 0.15999999999999948], 'false,true': [0.22222222222222232, 0.15999999999999948]}, {'': [0.24423965838627731, 0.17036542604714275], 'true': [0.24366352318012574, 0.24554974033866314], 'true,false': [0.24813620683257936, 0.2345699639132994], 'true,false,true': [0.244897959183673, 0.2417355371900833], 'true,false,false': [0.2417355371900833, 0.20408163265306115], 'false': [0.17782577785291806, 0.1600000000000007], 'false,true': [0.22222222222222207, 0.1600000000000007]}, {'': [0.2439315722131504, 0.16990467702453838], 'true': [0.2436635231801326, 0.2431019584682027], 'true,false': [0.24631150685892023, 0.2337064665173658], 'true,false,true': [0.24489795918367316, 0.24173553719008264], 'true,false,false': [0.24173553719008264, 0.20408163265306115], 'false': [0.1771174918718374, 0.15999999999999953], 'false,true': [0.22222222222222218, 0.15999999999999953]}, {'': [0.24371075047936078, 0.16953742675793848], 'true': [0.24000000000000005, 0.24337555147781983], 'true,false': [0.24329828880328458, 0.24136967032829013], 'true,false,false': [0.24498343086187796, 0.2331518261352126], 'true,true': [0.24888888888888885, 0.16], 'true,true,true': [-1.1102230246251565e-16, -2.3790493384824782e-17], 'false': [0.17655293676131073, 0.15999999999999967], 'false,true': [0.2222222222222222, 0.15999999999999967]}, {'': [0.2425515392051815, 0.16926465814576508], 'true': [0.24255720339999237, 0.24080750964214298], 'true,false': [0.24432396693476988, 0.2328797829276663], 'true,false,true': [0.24489795918367321, 0.24173553719008248], 'true,false,false': [0.24173553719008278, 0.20408163265306126], 'false': [0.17613362348097328, 0.15999999999999995], 'false,true': [0.22222222222222218, 0.15999999999999995]}, {'': [0.24243916528391488, 0.16907391107668152], 'true': [0.24251441332349266, 0.24015983829282708], 'true,false': [0.24389474847608505, 0.23276421772113787], 'true,false,true': [0.2448979591836735, 0.24173553719008242], 'true,false,false': [0.2417355371900827, 0.20408163265306126], 'false': [0.17584039773694396, 0.1599999999999999], 'false,true': [0.17106481230338935, 0.20570499737934805], 'false,true,true': [0.2449887232013222, 0.0008145724739319135]}, {'': [0.242377574600188, 0.16013750724301956], 'true': [0.24248531084661104, 0.23984273807191053], 'true,false': [0.2436897487123144, 0.2327152818806151], 'true,false,true': [0.24314211874258737, 0.24489795918367346], 'true,false,false': [0.24173553719008264, 0.20408163265306123], 'false': [0.17156648043935313, 0.14482872853024473], 'false,true': [0.2053522622158378, 0.16000000000000006]}, {'': [0.2423447517371528, 0.15988420427285613], 'true': [0.24246579373835353, 0.23971987182904375], 'true,false': [0.24364436754485802, 0.23269217593574576], 'true,false,true': [0.24490172971070173, 0.2417355371900827], 'true,false,false': [0.24173553719008273, 0.20408163265306123], 'false': [0.17129149354646322, 0.14465427371792391], 'false,true': [0.20485351890478376, 0.16000000000000014]}, {'': [0.24232421833356438, 0.15969715112612687], 'true': [0.2424527457242737, 0.23963023638583994], 'true,false': [0.24357771363422134, 0.2326794612326504], 'true,false,true': [0.2449018408395149, 0.2417355371900827], 'true,false,false': [0.24173553719008273, 0.20408163265306123], 'false': [0.1711005267856774, 0.14450544313813607], 'false,true': [0.20446611807683165, 0.16000000000000014]}, {'': [0.24231187855425532, 0.15955832558367697], 'true': [0.24244398245935767, 0.23958366733554584], 'true,false': [0.24354468577281668, 0.23267132948563846], 'true,false,true': [0.24490191932648517, 0.24173553719008273], 'true,false,false': [0.24173553719008273, 0.20408163265306123], 'false': [0.17096859694592184, 0.14437876385054743], 'false,true': [0.17081495474282926, 0.17189122751470537], 'false,true,true': [0.24348347138275478, 0.0015690303197778326]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
3;true,true;author(F, E), venue(F, A).;true;true
3;true,true,true;samebib(F, G), venue(G, B).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(A, J), haswordtitle(K, J).;true;true
5;false,true;title(L, K), venue(L, B).;true;true
5;false,true,true;samebib(L, M), venue(M, A).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(B, J), haswordtitle(K, J).;true;true
9;false,true;title(L, K), venue(L, A).;true;true
9;false,true,true;samebib(L, M), venue(M, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.35814893509951234;  // std dev = 2.646, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return -0.1418510649004877;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.15814893509951225;  // std dev = 0.458, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.24811816884741328;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return 0.17487895797485534;  // std dev = 0.459, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.04516790468702696;  // std dev = 0.383, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.20289930723994204;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.20848477447886868;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.31518052304212246;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3912569620992536;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, A) )
%   | | then if ( samebib(L, M), venue(M, B) )
%   | | | then return 0.33981064436003033;  // std dev = 2.634, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return -0.1601893556399691;  // std dev = 0.066, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.12356458191049957;  // std dev = 0.430, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0.039214416516084004;  // std dev = 0.382, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.16640029396569495;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.17062637354018492;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.24804771389482108;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3005711547884894;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.13463166578593505;  // std dev = 0.441, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03389801444511922;  // std dev = 0.382, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.033066477404289335;  // std dev = 0.382, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.13360339271793026;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.13664585375352234;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.19020231164899937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.22629823971521876;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.11256434989630638;  // std dev = 0.438, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.029190705410313374;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.02845778941565869;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6851194194405705;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.3148805805594295;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.4851194194405705;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.103255439591714;  // std dev = 0.493, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.12353511621533307;  // std dev = 3.492, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.1500790041100246;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return 0.09282105537137296;  // std dev = 0.436, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.025053475591738924;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.024411867178741886;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08223166766472043;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.08012368931034408;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.1064640057748568;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.113090430276702;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.13293567594053649;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.07566727309458755;  // std dev = 0.435, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.021440557109547266;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.02088217388594204;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06360288476548137;  // std dev = 0.492, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.06171941813443866;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.07985482696276892;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.08483269039127353;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.10097419867196318;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.061112877700229155;  // std dev = 0.433, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.01830292124310697;  // std dev = 0.381, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.0178194182419217;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6112795219596492;  // std dev = 0.133, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.370911207924861;  // std dev = 1.49e-08, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.4105802617309668;  // std dev = 0.877, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.046766177143939;  // std dev = 0.492, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.0528397545167542;  // std dev = 3.490, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.06695010395894734;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return 0.04899395136192198;  // std dev = 0.432, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.015590964793219872;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.015174109535871706;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.45803011387357934;  // std dev = 0.127, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.2720576396041223;  // std dev = 0.128, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.3067889439772888;  // std dev = 0.878, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.03582134889046093;  // std dev = 0.492, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.040037425078039375;  // std dev = 3.490, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.050616582188286824;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | | then return 0.039049959800453546;  // std dev = 1.831, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.01632872937746932;  // std dev = 2.814, 54.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
%   | | else return 0.012898382181611137;  // std dev = 0.380, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.5745
   AUC PR    = 0.435192
   CLL	      = -0.633111
   Precision = 0.592105 at threshold = 0.5
   Recall    = 0.079295
   F1        = 0.13986


Total learning time: 209.44277501106262 seconds
Total inference time: 17.878 seconds
AUC ROC: 0.5745


Results scoring model
   AUC ROC   = 0.557656
   AUC PR    = 0.478596
   CLL	      = -0.66082
   Precision = 0.704225 at threshold = 0.5
   Recall    = 0.066934
   F1        = 0.122249


Total scoring time: 2.757 seconds
Refined model CLL: -0.66082


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.5745
   AUC PR    = 0.435192
   CLL	      = -0.633111
   Precision = 0.592105 at threshold = 0.5
   Recall    = 0.079295
   F1        = 0.13986


Total learning time: 418.86845906066895 seconds
Total inference time: 17.878 seconds
AUC ROC: 0.5745
Total revision time: 418.86845906066895
Best scored revision CLL: -0.66082


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 03:04:02
{'AUC ROC': 0.5745, 'AUC PR': 0.435192, 'CLL': -0.633111, 'Precision': [0.592105, 0.5], 'Recall': 0.079295, 'F1': 0.13986, 'Learning time': 418.86845906066895, 'Inference time': 17.878, 'parameter': {'AUC ROC': 0.570926, 'AUC PR': 0.43089, 'CLL': -0.634075, 'Precision': [0.721212, 0.5], 'Recall': 0.052423, 'F1': 0.097741, 'Learning time': 204.07268404960632, 'Inference time': 17.174}}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.27854694504975613;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2867203636709409;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.44905802600860323;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05814893509951237;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2411503606196619;  // std dev = 0.494, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.24811816884741328;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.3851926776601658;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.16653882456488167;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.05092203251355405;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.7825012972897073;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.21749870271029265;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.5825012972897073;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.2006373174408249;  // std dev = 0.493, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.2554309038467003;  // std dev = 3.509, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.33354380143522294;  // std dev = 2.603, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return 0.1420942428155646;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.04434629760466855;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.16627278814108717;  // std dev = 0.493, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.16153884536939936;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.24389847404002757;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.2613806000007637;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.3144965494660669;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.11914890490746433;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.03842866223690456;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6972485612536066;  // std dev = 0.123, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.2863061106221763;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.4969230245228201;  // std dev = 0.879, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.1313799351635921;  // std dev = 0.492, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.15429013527344201;  // std dev = 3.495, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.20996986079237362;  // std dev = 2.599, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return 0.0984134027840187;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.033154945921885746;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.10535277283685225;  // std dev = 0.491, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.09540571913908977;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.1491477731153559;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.15036838751283532;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.18478931695751694;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.08026654944252247;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.028495105925721097;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5062663854733053;  // std dev = 0.130, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.25071625521420987;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.3549999883503253;  // std dev = 0.878, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.08069611103711581;  // std dev = 0.492, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.09070478350292553;  // std dev = 3.492, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.11934135502606825;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return 0.06479591611329234;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.024408230135271918;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06349504683343564;  // std dev = 0.491, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.05285993812322197;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.08322424340716336;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.08945017729043506;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.11026336747013628;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then return 0.05187916934404051;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | else return 0.02084688910874009;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.46281808464580665;  // std dev = 0.076, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.2667769016444398;  // std dev = 0.090, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.3093222407005457;  // std dev = 0.870, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.04737549611947688;  // std dev = 0.492, 1,588.000 (wgt'ed) examples reached here.  /* #neg=924 #pos=664 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.05009145381682146;  // std dev = 3.490, 50.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=25 */
%   | | | else return 0.0712356742358114;  // std dev = 2.598, 29.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=18 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return 0.04126932998424623;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.021464375245302116;  // std dev = 2.960, 54.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
%   | | else return 0.017760671541598414;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03731894738697949;  // std dev = 0.490, 1,608.000 (wgt'ed) examples reached here.  /* #neg=932 #pos=676 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.028421318460590848;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.04937464311156072;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.04998645834180516;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | | else return 0.06777137463120174;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, A) )
%   | | then if ( samebib(L, M), venue(M, B) )
%   | | | then return 0.2980815157355327;  // std dev = 2.611, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return -0.2007849998041204;  // std dev = 0.244, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.010851377107134297;  // std dev = 0.452, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0.015098879183171418;  // std dev = 0.400, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */


Results
   AUC ROC   = 0.575034
   AUC PR    = 0.440396
   CLL	      = -0.636662
   Precision = 0.503797 at threshold = 0.5
   Recall    = 0.087665
   F1        = 0.149343


Total learning time: 203.71970915794373 seconds
Total inference time: 17.918 seconds
AUC ROC: 0.575034


Dataset: 3_imdb_cora, Fold: 4, Type: Scratch (RDN-B), Time: 03:07:44
{'AUC ROC': 0.575034, 'AUC PR': 0.440396, 'CLL': -0.636662, 'Precision': [0.503797, 0.5], 'Recall': 0.087665, 'F1': 0.149343, 'Learning time': 203.71970915794373, 'Inference time': 17.918}


Starting fold 5

Target train facts examples: 8644
Target train pos examples: 550
Target train neg examples: 500

Target test facts examples: 33914
Target test pos  examples: 2467
Target test neg examples: 4522

******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.7291166770349955;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15083186192878065;  // std dev = 2.913, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.051131391239862906;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6157326050686436;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.6392119282680095;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15769426647032891;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.10912768446848492;  // std dev = 0.441, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.03693744759731563;  // std dev = 0.807, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1534329638272584;  // std dev = 2.940, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.03825072160333175;  // std dev = 2.992, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05181004363723003;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.6805851247859591;  // std dev = 0.056, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return 0.2449182844345499;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.047462026339214695;  // std dev = 1.980, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.3226813064206765;  // std dev = 0.491, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.47549952672721435;  // std dev = 0.343, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.19790656117758298;  // std dev = 0.440, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(K, I), venue(K, B) )
%   | | | then return -0.17891175899361775;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.11361319919327115;  // std dev = 2.883, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.06249985935096406;  // std dev = 0.413, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D) )
%   | | then return 0.5216077804329589;  // std dev = 0.063, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return 0.1792580649666844;  // std dev = 2.582, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.12537094389750977;  // std dev = 1.924, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.25659510724314705;  // std dev = 0.489, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.38767664735472884;  // std dev = 0.342, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.1650916747215694;  // std dev = 0.435, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(K, I), venue(K, B) )
%   | | | then return -0.15411995053316288;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.0963323835397224;  // std dev = 2.881, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else return 0.05384236350750514;  // std dev = 0.413, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.1879289076858845;  // std dev = 0.487, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.32984619477149313;  // std dev = 0.289, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then return 0.061399489410453784;  // std dev = 0.376, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( author(I, G), venue(I, B) )
%   | | | then return 0.1598474342046871;  // std dev = 1.002, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.0904927427638673;  // std dev = 2.873, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.11072006943973377;  // std dev = 1.211, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.08132817032101644;  // std dev = 2.778, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.016070498707252204;  // std dev = 2.990, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.031008351169104057;  // std dev = 2.967, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.14189078937011806;  // std dev = 0.487, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.26849493502857436;  // std dev = 0.285, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.48216684219119427;  // std dev = 0.908, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1673131732701439;  // std dev = 0.030, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, A) )
%   | | | then return -0.16881280394473874;  // std dev = 0.006, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.07556267957184296;  // std dev = 2.871, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return 0.07410787278950329;  // std dev = 4.103, 88.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=24 */
%   | | | else return -0.18139895152473143;  // std dev = 0.043, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.00477424229420854;  // std dev = 0.385, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.10677404570939382;  // std dev = 0.487, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.21013027480132873;  // std dev = 0.285, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then return 0.112405780208879;  // std dev = 0.386, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( author(I, G), venue(I, A) )
%   | | | then return -0.1464318586080808;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.062499238437547365;  // std dev = 2.870, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.07932378104744936;  // std dev = 1.201, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.058847022631379066;  // std dev = 2.761, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.0057351856833237;  // std dev = 2.980, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.026099932376154725;  // std dev = 2.967, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordvenue(B, C) )
%   | then return 0.2795411882232234;  // std dev = 0.075, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( author(E, D), venue(E, B) )
%   | | then return 0.028647796982117946;  // std dev = 0.472, 41.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=19 */
%   | | else return -0.043517883493705965;  // std dev = 0.430, 64.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=17 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.43846198435050565;  // std dev = 1.283, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return -0.4230369060578095;  // std dev = 0.464, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( author(J, G), venue(J, B) )
%   | | | then return -0.3270795549603037;  // std dev = 0.931, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return 0.07366505039747419;  // std dev = 2.893, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
%   | else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | | then return 0.10157176161493106;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | else return 0.013295968610440844;  // std dev = 0.394, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.061828130598103465;  // std dev = 0.374, 39.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=21 */
%   | else if ( author(F, D), venue(F, B) )
%   | | then return -0.2089697540303607;  // std dev = 0.267, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else return 0.06014846612179895;  // std dev = 0.428, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( haswordtitle(I, G) )
%   | | then if ( author(J, H), title(J, I) )
%   | | | then return 0.2542781085307058;  // std dev = 1.886, 21.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | | | else return -0.44061857476296906;  // std dev = 0.361, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( author(K, H), venue(K, A) )
%   | | | then return -0.280822013387168;  // std dev = 1.336, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | | else return 0.09415632443291484;  // std dev = 3.016, 44.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=17 */
%   | else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | | then return 0.07639667051038446;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | else return 0.011328601804049017;  // std dev = 0.394, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return -0.38939164488183625;  // std dev = 2.58e-08, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.1644344352212145;  // std dev = 0.372, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | else if ( author(G, D), venue(G, A) )
%   | | then return -0.18458102292570225;  // std dev = 0.304, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else return 0.06784409447546393;  // std dev = 0.433, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( haswordtitle(J, H) )
%   | | then return 0.018294774363798064;  // std dev = 0.385, 31.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=15 */
%   | | else if ( author(K, I), venue(K, B) )
%   | | | then return -0.20081921904638977;  // std dev = 1.132, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | | else return 0.05449537657116419;  // std dev = 3.003, 44.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=17 */
%   | else if ( haswordvenue(A, L), haswordvenue(B, L) )
%   | | then return 0.05758574199526512;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | else return 0.009639157241298536;  // std dev = 0.394, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */


Results
   AUC ROC   = 0.562331
   AUC PR    = 0.412291
   CLL	      = -0.706427
   Precision = 0.375816 at threshold = 0.5
   Recall    = 0.933522
   F1        = 0.535893


Total learning time: 95.07770776748657 seconds
Total inference time: 9.747 seconds
AUC ROC: 0.562331


Results scoring model
   AUC ROC   = 0.692769
   AUC PR    = 0.692892
   CLL	      = -0.612946
   Precision = 0.635669 at threshold = 0.5
   Recall    = 0.907273
   F1        = 0.747566


Total scoring time: 2.006 seconds
Parameter learned model CLL: -0.612946


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(A, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, B)', 'false,true,true': 'samebib(G, H), venue(H, A)', 'false,true,false': 'author(I, F), venue(I, A)', 'false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,false,true': 'haswordtitle(L, J)'}, {'true,true': [0.493, 334, 471], 'true,false': [0.335, 4, 27], 'false,true,true,true': [0.894, 1, 4], 'false,true,true,false': [0.0, 5, 0], 'false,true,false,true': [0.0, 3, 0], 'false,true,false,false': [2.913, 29, 12], 'false,false,true,true': [0.894, 4, 1], 'false,false,true,false': [2.98, 28, 13], 'false,false,false': [0.395, 92, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(B, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, A)', 'false,true,true': 'samebib(G, H), venue(H, B)', 'false,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false,true': 'haswordtitle(K, I)', 'false,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.493, 334, 471], 'true,false': [0.335, 4, 27], 'false,true,true,true': [0.899, 1, 4], 'false,true,true,false': [0.016, 5, 0], 'false,true,false': [0.441, 32, 12], 'false,false,true,true': [0.807, 4, 1], 'false,false,true,false': [2.94, 28, 13], 'false,false,false,true': [2.992, 48, 11], 'false,false,false,false': [2.966, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(A, D)', 'true,true,false': 'haswordtitle(F, D)', 'true,false': 'haswordtitle(G, C)', 'false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,true': 'author(J, I), venue(J, A)', 'false,true,false': 'author(K, I), venue(K, B)'}, {'true,true,true': [0.056, 0, 10], 'true,true,false,true': [2.596, 13, 14], 'true,true,false,false': [1.98, 18, 6], 'true,false,true': [0.491, 304, 449], 'true,false,false': [0.343, 3, 19], 'false,true,true': [0.44, 6, 4], 'false,true,false,true': [0.003, 3, 0], 'false,true,false,false': [2.883, 29, 12], 'false,false': [0.413, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordvenue(B, D)', 'true,true,false': 'haswordtitle(F, D)', 'true,false': 'haswordtitle(G, C)', 'false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,true': 'author(J, I), venue(J, A)', 'false,true,false': 'author(K, I), venue(K, B)'}, {'true,true,true': [0.063, 0, 10], 'true,true,false,true': [2.582, 13, 14], 'true,true,false,false': [1.924, 18, 6], 'true,false,true': [0.489, 304, 449], 'true,false,false': [0.342, 3, 19], 'false,true,true': [0.435, 6, 4], 'false,true,false,true': [0.003, 3, 0], 'false,true,false,false': [2.881, 29, 12], 'false,false': [0.413, 124, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordtitle(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, A)', 'false,true,false': 'author(I, G), venue(I, B)', 'false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,false,true': 'author(L, K), venue(L, A)', 'false,false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true': [0.487, 336, 479], 'true,false': [0.289, 2, 19], 'false,true,true': [0.376, 6, 2], 'false,true,false,true': [1.002, 3, 2], 'false,true,false,false': [2.873, 29, 12], 'false,false,true,true': [1.211, 5, 3], 'false,false,true,false': [2.778, 27, 11], 'false,false,false,true': [2.99, 48, 11], 'false,false,false,false': [2.967, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordtitle(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, B)', 'false,true,true': 'samebib(H, I), venue(I, A)', 'false,true,false': 'author(J, G), venue(J, A)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false,true': 'title(M, L), venue(M, A)'}, {'true,true': [0.487, 336, 479], 'true,false': [0.285, 2, 19], 'false,true,true,true': [0.908, 1, 4], 'false,true,true,false': [0.03, 5, 0], 'false,true,false,true': [0.006, 3, 0], 'false,true,false,false': [2.871, 29, 12], 'false,false,true,true': [4.103, 64, 24], 'false,false,true,false': [0.043, 7, 0], 'false,false,false': [0.385, 53, 12]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordtitle(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, B)', 'false,true,false': 'author(I, G), venue(I, A)', 'false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,false,true': 'author(L, K), venue(L, A)', 'false,false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.487, 336, 479], 'true,false': [0.285, 2, 19], 'false,true,true': [0.386, 6, 4], 'false,true,false,true': [0.005, 3, 0], 'false,true,false,false': [2.87, 29, 12], 'false,false,true,true': [1.201, 5, 3], 'false,false,true,false': [2.761, 27, 11], 'false,false,false,true': [2.98, 48, 11], 'false,false,false,false': [2.967, 44, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'haswordvenue(B, C)', 'true,false': 'author(E, D), venue(E, B)', 'false': 'haswordvenue(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, A)', 'false,true,true': 'samebib(H, I), venue(I, B)', 'false,true,false': 'author(J, G), venue(J, B)', 'false,false': 'haswordvenue(A, K), haswordvenue(B, K)'}, {'true,true': [0.075, 0, 10], 'true,false,true': [0.472, 22, 19], 'true,false,false': [0.43, 47, 17], 'false,true,true,true': [1.283, 2, 18], 'false,true,true,false': [0.464, 18, 0], 'false,true,false,true': [0.931, 15, 1], 'false,true,false,false': [2.893, 26, 15], 'false,false,true': [0.484, 278, 448], 'false,false,false': [0.394, 92, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'author(F, D), venue(F, B)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false,true': 'haswordtitle(I, G)', 'false,true,true': 'author(J, H), title(J, I)', 'false,true,false': 'author(K, H), venue(K, A)', 'false,false': 'haswordvenue(A, L), haswordvenue(B, L)'}, {'true,true': [0.374, 18, 21], 'true,false,true': [0.267, 20, 4], 'true,false,false': [0.428, 31, 21], 'false,true,true,true': [1.886, 6, 15], 'false,true,true,false': [0.361, 10, 0], 'false,true,false,true': [1.336, 18, 2], 'false,true,false,false': [3.016, 27, 17], 'false,false,true': [0.484, 278, 448], 'false,false,false': [0.394, 92, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,true': 'author(F, D), venue(F, B)', 'true,false': 'author(G, D), venue(G, A)', 'false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,true': 'haswordtitle(J, H)', 'false,true,false': 'author(K, I), venue(K, B)', 'false,false': 'haswordvenue(A, L), haswordvenue(B, L)'}, {'true,true,true': [2.58e-08, 8, 0], 'true,true,false': [0.372, 10, 21], 'true,false,true': [0.304, 20, 4], 'true,false,false': [0.433, 31, 21], 'false,true,true': [0.385, 16, 15], 'false,true,false,true': [1.132, 18, 2], 'false,true,false,false': [3.003, 27, 17], 'false,false,true': [0.484, 278, 448], 'false,false,false': [0.394, 92, 22]}]]
[{'': [0.24084270048762138, 0.18394619617433927], 'true': [0.2427591528104568, 0.11238293444328941], 'false': [0.20850480109739317, 0.17437500000000122], 'false,true': [0.23999999999999985, 0.19834710743801603], 'false,true,true': [0.15999999999999986, -2.7755575615628915e-18], 'false,true,false': [0.0, 0.20701963117192096], 'false,false': [0.21172022684309966, 0.15574022776238935], 'false,false,true': [0.16000000000000003, 0.2165377751338484]}, {'': [0.23990334821509707, 0.180640861858608], 'true': [0.24275915281046145, 0.11238293444328855], 'false': [0.2054810365436294, 0.17131473287152157], 'false,true': [0.23956010966648247, 0.1945271336315961], 'false,true,true': [0.16153950938681216, 5.096833998347039e-05], 'false,false': [0.20334904129270392, 0.15574022776238897], 'false,false,true': [0.1302457674210878, 0.21078894368062936], 'false,false,false': [0.1516805515656426, 0.16000000000000056]}, {'': [0.23897284752961956, 0.1773997076559299], 'true': [0.23816220413684797, 0.237883468142118], 'true,true': [0.0031484720128159616, 0.23037050068870066], 'true,false': [0.2407298649580488, 0.11776859504132223], 'true,true,false': [0.24965706447187935, 0.16341569201183295], 'false': [0.1958464426357905, 0.17053113118149166], 'false,true': [0.19389603672247752, 0.19427756636916393], 'false,true,false': [2.8378312605242817e-06, 0.20265841419291536]}, {'': [0.2364290460810181, 0.17642875288568613], 'true': [0.22228318412191325, 0.23601279887198173], 'true,false': [0.23900375125104362, 0.1169460435260032], 'true,true': [0.004027855333989594, 0.22640475593211415], 'true,true,false': [0.246882266123149, 0.1542387630040101], 'false': [0.19301322104198781, 0.1704008952751827], 'false,true': [0.18897926009484844, 0.19256563258114295], 'false,true,false': [2.2340245081584977e-06, 0.2023788392870417]}, {'': [0.2339552560356688, 0.17568664935056616], 'true': [0.237320899726061, 0.08370163278729417], 'false': [0.19292488132924163, 0.16920809293935163], 'false,true': [0.14114689709868422, 0.20173094974197683], 'false,true,false': [0.20074723065125255, 0.20132808143856892], 'false,false': [0.19977226803159365, 0.1557282004316493], 'false,false,true': [0.18346339782165233, 0.2030554737422244], 'false,false,false': [0.15156029854515327, 0.16008373801030865]}, {'': [0.23361593360239535, 0.17497924431209946], 'true': [0.2371414537112731, 0.08116619983830156], 'false': [0.19205368276028487, 0.1687633311675193], 'false,true': [0.18795947608807442, 0.19118651830299302], 'false,true,false': [1.0746960861937604e-05, 0.20110321367608272], 'false,true,true': [0.16482146263601388, 0.00018534429830498466], 'false,false': [0.18167836565485587, 0.14837289206830587], 'false,false,true': [0.19129837401469374, 0.00026776107249524124]}, {'': [0.2334178736896731, 0.171796159497719], 'true': [0.23707185638899322, 0.08119437559322797], 'false': [0.18307503203566264, 0.16774540156641882], 'false,true': [0.14926487825364995, 0.18999703584550573], 'false,true,false': [8.533726563716981e-06, 0.20092234697202427], 'false,false': [0.1971396807634498, 0.155253568006796], 'false,false,true': [0.18043055538547434, 0.2005844700414733], 'false,false,false': [0.15054079656630953, 0.1600944491667149]}, {'': [0.1908620147167849, 0.22428220077032532], 'false': [0.21144321479607794, 0.22470323948996845], 'false,false': [0.2345555335894134, 0.15522463596391767], 'false,true': [0.23399716257841158, 0.19449133819134906], 'false,true,true': [0.08228340926643238, 0.011946768973427859], 'false,true,false': [0.05422221109723256, 0.20415086378283778], 'true': [0.0056125266611004474, 0.20094358236445417], 'true,false': [0.22272621433124337, 0.18495552849425279]}, {'': [0.1573490888455402, 0.22320865741223248], 'false': [0.20876273696388595, 0.22429726942603215], 'false,false': [0.23456943046674808, 0.15522056364555423], 'false,true': [0.22451416113648398, 0.2002115913373334], 'false,true,true': [0.16945400644298458, 0.013027279234653698], 'false,true,false': [0.08920351539730027, 0.20672957210048928], 'true': [0.13984935444968208, 0.16378210459201975], 'true,false': [0.07145550711296304, 0.18352344885120545]}, {'': [0.16815709473398574, 0.21859123367122563], 'false': [0.16658000011595953, 0.22408104050484046], 'false,false': [0.23458239786163212, 0.15521709042022308], 'true': [0.16018865154622808, 0.17091302132250674], 'true,false': [0.09231412707554064, 0.18706782145345696], 'false,true': [0.14815868304542726, 0.17488293311365102], 'false,true,false': [0.06401730162902061, 0.20490591986550288], 'true,true': [8.326672684688674e-17, 0.138610052857932]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(A, E), haswordauthor(F, E).;true;true
0;false,true;author(G, F), venue(G, B).;true;true
0;false,true,true;samebib(G, H), venue(H, A).;true;true
0;false,true,false;author(I, F), venue(I, A).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(B, E), haswordauthor(F, E).;true;true
1;false,true;author(G, F), venue(G, A).;true;true
1;false,true,true;samebib(G, H), venue(H, B).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(B, H), haswordauthor(I, H).;true;true
2;false,true;author(J, I), venue(J, A).;true;true
2;false,true,false;author(K, I), venue(K, B).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, H), haswordauthor(I, H).;true;true
3;false,true;author(J, I), venue(J, A).;true;true
3;false,true,false;author(K, I), venue(K, B).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(A, F), haswordauthor(G, F).;true;true
5;false,true;author(H, G), venue(H, B).;true;true
5;false,true,true;samebib(H, I), venue(I, A).;true;true
5;false,true,false;author(J, G), venue(J, A).;true;true
5;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;true
5;false,false,true;title(M, L), venue(M, A).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(A, F), haswordauthor(G, F).;true;true
6;false,true;author(H, G), venue(H, B).;true;true
6;false,true,false;author(I, G), venue(I, A).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true
9;true;haswordtitle(E, C).;true;true
9;true,true;author(F, D), venue(F, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.7291166770349955;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.15083186192878065;  // std dev = 2.913, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.051131391239862906;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6157326050686436;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.6392119282680095;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.15769426647032891;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(I, F), venue(I, B) )
%   | | | then return -0.16343846579291768;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.12907154912175828;  // std dev = 2.884, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.03693744759731563;  // std dev = 0.807, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1534329638272584;  // std dev = 2.940, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.04479249977758044;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.6805851247859591;  // std dev = 0.056, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.2449182844345499;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.047462026339214695;  // std dev = 1.980, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.3226813064206765;  // std dev = 0.491, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.47549952672721435;  // std dev = 0.343, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.08231225620233955;  // std dev = 0.381, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.1181714371424333;  // std dev = 0.451, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.027111511110770224;  // std dev = 0.383, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | else return 0.08729804299424417;  // std dev = 0.431, 94.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=24 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.2452899066654219;  // std dev = 0.490, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.42289861754592145;  // std dev = 0.287, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.5173370671356319;  // std dev = 0.902, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14653239961734138;  // std dev = 0.024, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( author(J, G), venue(J, B) )
%   | | | then return -0.14949916706052013;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.09757576834580164;  // std dev = 2.880, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( haswordtitle(M, K) )
%   | | | then return 0.018121696564662133;  // std dev = 0.803, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.11323537760761601;  // std dev = 2.933, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else return 0.031551712212167064;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then return 0.1882802721133011;  // std dev = 0.489, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.3196315509376425;  // std dev = 0.287, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.4021719624860324;  // std dev = 0.904, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1291536469221117;  // std dev = 0.022, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.06728596535526452;  // std dev = 0.437, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | | then return -0.16578186472497108;  // std dev = 0.031, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.10099441891453798;  // std dev = 4.065, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.05145540902782383;  // std dev = 3.027, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | else return -0.1928625364764157;  // std dev = 0.083, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.39605640827697375;  // std dev = 0.087, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.07662451466680008;  // std dev = 2.580, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.2319787579931312;  // std dev = 1.899, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.11240137234700327;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.1398501965628186;  // std dev = 1.871, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.16684376885823193;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, B) )
%   | | then return 0.15330570296072335;  // std dev = 0.434, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.04720935956563816;  // std dev = 0.427, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.03569676525857516;  // std dev = 0.406, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.30868323521337837;  // std dev = 0.076, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, C) )
%   | | | then return -0.05206735367678474;  // std dev = 3.066, 46.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=16 */
%   | | | else return 0.2750040475753007;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.07428914623412033;  // std dev = 2.542, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -0.16739042548955127;  // std dev = 1.887, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | else return 0.12547602113259165;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, A) )
%   | | then return 0.08722991971180263;  // std dev = 0.353, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.04887856338312536;  // std dev = 0.436, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.029902526022270566;  // std dev = 0.408, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.07843330179257597;  // std dev = 0.484, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.22373589702685884;  // std dev = 0.284, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then if ( samebib(H, I), venue(I, A) )
%   | | | then return 0.4337739603445601;  // std dev = 0.916, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.19714474764460727;  // std dev = 0.047, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.03292789123399993;  // std dev = 0.426, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | | then return -0.15852476116625017;  // std dev = 0.077, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.07252099912623268;  // std dev = 4.039, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.03493563085191596;  // std dev = 2.978, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | else return -0.1919379841087183;  // std dev = 0.142, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.059049154054106774;  // std dev = 0.484, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return 0.12676629086462202;  // std dev = 0.397, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.20521348963607308;  // std dev = 0.183, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.23517355285816235;  // std dev = 0.131, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then return -0.14416733527068396;  // std dev = 0.086, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return 0.05938394758006748;  // std dev = 0.431, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.055797101442481324;  // std dev = 0.434, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
%   | | else return -0.18524503364843112;  // std dev = 0.176, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.04450971480897578;  // std dev = 0.484, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then return 0.10047655407221238;  // std dev = 0.397, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.19041856015852154;  // std dev = 0.061, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.0038161041848507916;  // std dev = 0.264, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else return 0.04047496615464657;  // std dev = 0.431, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.12146230399154902;  // std dev = 0.056, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.05354577222723881;  // std dev = 4.039, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.01279569246510286;  // std dev = 2.998, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | else return -0.1408040672142948;  // std dev = 0.112, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.554796
   AUC PR    = 0.404249
   CLL	      = -0.705285
   Precision = 0.375265 at threshold = 0.5
   Recall    = 0.93109
   F1        = 0.534932


Total learning time: 112.61115193367004 seconds
Total inference time: 11.775 seconds
AUC ROC: 0.554796


Results scoring model
   AUC ROC   = 0.672735
   AUC PR    = 0.666018
   CLL	      = -0.622704
   Precision = 0.623077 at threshold = 0.5
   Recall    = 0.883636
   F1        = 0.730827


Total scoring time: 2.165 seconds
Refined model CLL: -0.622704


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.562331
   AUC PR    = 0.412291
   CLL	      = -0.706427
   Precision = 0.375816 at threshold = 0.5
   Recall    = 0.933522
   F1        = 0.535893


Total learning time: 211.8598597011566 seconds
Total inference time: 9.747 seconds
AUC ROC: 0.562331
Total revision time: 211.8598597011566
Best scored revision CLL: -0.612946


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 03:11:42
{'AUC ROC': 0.562331, 'AUC PR': 0.412291, 'CLL': -0.706427, 'Precision': [0.375816, 0.5], 'Recall': 0.933522, 'F1': 0.535893, 'Learning time': 211.8598597011566, 'Inference time': 9.747, 'parameter': {'AUC ROC': 0.562331, 'AUC PR': 0.412291, 'CLL': -0.706427, 'Precision': [0.375816, 0.5], 'Recall': 0.933522, 'F1': 0.535893, 'Learning time': 95.07770776748657, 'Inference time': 9.747}}


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.443242102801371;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.7291166770349955;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13087620782678508;  // std dev = 0.445, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.17522210583121967;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.04458961306561406;  // std dev = 2.992, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.05814893509951237;  // std dev = 2.966, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3803254334818479;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.6157326050686436;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then if ( author(H, F), venue(H, B) )
%   | | | then return 0.346190498726874;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1591782475339396;  // std dev = 0.013, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( author(I, F), venue(I, B) )
%   | | | then return 0.23545300620524684;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.1283950699248672;  // std dev = 2.887, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.1912873480467316;  // std dev = 1.246, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.13093264915071987;  // std dev = 2.796, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
%   | | else return 0.044790460982400505;  // std dev = 0.395, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.31149293361789177;  // std dev = 0.493, 805.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=471 */
%   | else return 0.48283090502633463;  // std dev = 0.335, 31.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=27 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.5985234058971287;  // std dev = 0.892, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1875718869731533;  // std dev = 0.065, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.09284239516261264;  // std dev = 0.440, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.01433590870373409;  // std dev = 0.791, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.1342193067724618;  // std dev = 2.943, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.03189048206920282;  // std dev = 2.990, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.046723994408730624;  // std dev = 2.967, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then return 0.24604654998442804;  // std dev = 0.492, 815.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=479 */
%   | else return 0.39784229978637214;  // std dev = 0.294, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( author(I, G), venue(I, B) )
%   | | | then return 0.25293425273655634;  // std dev = 0.857, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.14283977229461733;  // std dev = 0.038, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.10105487248648043;  // std dev = 0.450, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.004875690777128022;  // std dev = 0.799, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.11431284889447442;  // std dev = 2.936, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.027535872650164717;  // std dev = 2.990, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
%   | | | else return 0.04071325329933418;  // std dev = 2.967, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordvenue(B, D) )
%   | | | then return 0.6032183194062237;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.1217368379247422;  // std dev = 2.596, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | else if ( haswordtitle(G, C) )
%   | | | then return -0.24678168059377636;  // std dev = 1.597, 20.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=3 */
%   | | | else return 0.30452735377200746;  // std dev = 0.927, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.19949985991086203;  // std dev = 0.491, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.26719520533681035;  // std dev = 0.342, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( haswordtitle(K, I) )
%   | | then return 0.04737089019476034;  // std dev = 0.367, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else return 0.08212364141787722;  // std dev = 0.445, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | else return 0.04543327540475441;  // std dev = 0.412, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.42656632368925773;  // std dev = 0.097, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.07707024374815753;  // std dev = 2.577, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.24065754006119178;  // std dev = 1.863, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.15410256786312393;  // std dev = 0.488, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.20925148110708836;  // std dev = 0.340, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.4336749502900562;  // std dev = 0.880, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.18910755861228315;  // std dev = 0.102, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.05111079789218784;  // std dev = 0.437, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.03868848999150668;  // std dev = 0.412, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D) )
%   | | then return 0.3304615817795404;  // std dev = 0.091, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( haswordtitle(F, D) )
%   | | | then return 0.058021673051068104;  // std dev = 2.577, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return -0.18291123071694992;  // std dev = 1.860, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.11586992787615341;  // std dev = 0.488, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.1636149613628052;  // std dev = 0.341, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.46287272330364243;  // std dev = 0.910, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1794840536196753;  // std dev = 0.034, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.0405443703989528;  // std dev = 0.435, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | else return 0.029600365819754303;  // std dev = 0.408, 160.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then if ( author(F, D), venue(F, B) )
%   | | then return -0.49320450684340067;  // std dev = 3.33e-08, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.20257063343377238;  // std dev = 0.380, 31.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=21 */
%   | else if ( author(G, D), venue(G, A) )
%   | | then return -0.2258952252626607;  // std dev = 0.326, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   | | else return 0.07012184671175585;  // std dev = 0.432, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.03268720508280022;  // std dev = 2.727, 36.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=16 */
%   | | | else return -0.20507054963771024;  // std dev = 1.536, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else return 0.09923246265875946;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.046354202795613926;  // std dev = 0.424, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | else return -0.004053506055004682;  // std dev = 0.384, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordvenue(B, C) )
%   | then return 0.25074162604853745;  // std dev = 0.098, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( haswordauthor(D, E), haswordvenue(B, E) )
%   | | then return -0.2751601252050393;  // std dev = 0.156, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( author(F, D), venue(F, B) )
%   | | | then return 0.04560071838163219;  // std dev = 2.726, 39.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=19 */
%   | | | else return -0.04158125298532787;  // std dev = 3.278, 62.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=17 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then return 0.06569245277047871;  // std dev = 0.486, 753.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=449 */
%   | | else return 0.16388150353526215;  // std dev = 0.346, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then return -0.003550332591720974;  // std dev = 0.380, 66.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=12 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.07200513851230395;  // std dev = 4.044, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
%   | | | else return -0.20724824254541224;  // std dev = 0.090, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordvenue(B, C) )
%   | then return 0.20870108067025023;  // std dev = 0.090, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( author(E, D), venue(E, B) )
%   | | then return 0.021005075616919906;  // std dev = 0.430, 41.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=19 */
%   | | else return -0.038634721032153756;  // std dev = 0.411, 64.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=17 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then if ( samebib(H, I), venue(I, B) )
%   | | | then return 0.42385694685015896;  // std dev = 1.289, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return -0.3860786665661558;  // std dev = 0.536, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( haswordtitle(J, F) )
%   | | | then return 0.01489552149011944;  // std dev = 0.590, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.028360977998880123;  // std dev = 3.216, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | | then return 0.05804347132675334;  // std dev = 0.484, 726.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=448 */
%   | | else return 0.006853018650001582;  // std dev = 0.394, 114.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=22 */


Results
   AUC ROC   = 0.562315
   AUC PR    = 0.408454
   CLL	      = -0.707086
   Precision = 0.376268 at threshold = 0.5
   Recall    = 0.931901
   F1        = 0.536085


Total learning time: 87.79337811470032 seconds
Total inference time: 10.809 seconds
AUC ROC: 0.562315


Dataset: 3_imdb_cora, Fold: 5, Type: Scratch (RDN-B), Time: 03:13:21
{'AUC ROC': 0.562315, 'AUC PR': 0.408454, 'CLL': -0.707086, 'Precision': [0.376268, 0.5], 'Recall': 0.931901, 'F1': 0.536085, 'Learning time': 87.79337811470032, 'Inference time': 10.809}


