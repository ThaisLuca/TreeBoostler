Starting experiment #1 for 3_imdb_cora

Start learning from source dataset

Source train facts examples: 1078
Source train pos examples: 382
Source train neg examples: 14236

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1.43e-06, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048766;  // std dev = 6.66e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.14185106490048882;  // std dev = 0.000, 657.000 (wgt'ed) examples reached here.  /* #neg=657 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.12544463852839158;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.12544463852839235;  // std dev = 0.000, 679.000 (wgt'ed) examples reached here.  /* #neg=679 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360632;  // std dev = 2.98e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.11231637819360633;  // std dev = 0.000, 673.000 (wgt'ed) examples reached here.  /* #neg=673 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783624;  // std dev = 3.33e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.10159632948783519;  // std dev = 4.41e-07, 692.000 (wgt'ed) examples reached here.  /* #neg=692 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.09269127618926107;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.09269127618926198;  // std dev = 0.000, 722.000 (wgt'ed) examples reached here.  /* #neg=722 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4.42e-07, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1.83e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return -0.08518475138839675;  // std dev = 1.37e-07, 734.000 (wgt'ed) examples reached here.  /* #neg=734 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2.53e-07, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109179;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else return -0.07877675473109286;  // std dev = 0.000, 728.000 (wgt'ed) examples reached here.  /* #neg=728 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2.60e-07, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.07324622576333648;  // std dev = 2.56e-07, 714.000 (wgt'ed) examples reached here.  /* #neg=714 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420268;  // std dev = 1.83e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.06842697784420253;  // std dev = 1.86e-07, 699.000 (wgt'ed) examples reached here.  /* #neg=699 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.06419184008202534;  // std dev = 2.49e-07, 654.000 (wgt'ed) examples reached here.  /* #neg=654 */


Starting fold 1

Target train facts examples: 35095
Target train pos examples: 2649
Target train neg examples: 4334

Target test facts examples: 7463
Target test pos  examples: 368
Target test neg examples: 688

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.6746626965673979;  // std dev = 9.036, 545.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=445 */
%   | | | else return -0.12175056238792502;  // std dev = 3.429, 597.000 (wgt'ed) examples reached here.  /* #neg=585 #pos=12 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.124815601766179;  // std dev = 1.713, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return 0.2010060779566552;  // std dev = 2.808, 35.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.43709630352056494;  // std dev = 2.152, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.6359267128772901;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return 0.05446795350441935;  // std dev = 0.397, 163.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.5714911502937506;  // std dev = 9.036, 545.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=445 */
%   | | | else return -0.10756598050428937;  // std dev = 3.429, 597.000 (wgt'ed) examples reached here.  /* #neg=585 #pos=12 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.10893247925776749;  // std dev = 1.713, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return 0.17473486774709096;  // std dev = 2.808, 35.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.3751785876229692;  // std dev = 2.152, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.02176788419240575;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.5398498420741675;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.5851860008555361;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return 0.04770739423344172;  // std dev = 0.397, 163.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.1652740837412339;  // std dev = 0.396, 1,142.000 (wgt'ed) examples reached here.  /* #neg=685 #pos=457 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.09391529972732654;  // std dev = 1.713, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return 0.1488623764399909;  // std dev = 2.808, 35.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=12 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.30758572307646626;  // std dev = 2.152, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.01904987294481035;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.4289562725350853;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.46125983910675533;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return 0.13936805545483527;  // std dev = 0.456, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
%   | else return 0.030181915245327075;  // std dev = 0.388, 146.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=27 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1360816506815926;  // std dev = 0.392, 1,192.000 (wgt'ed) examples reached here.  /* #neg=719 #pos=473 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.24271717457728084;  // std dev = 2.152, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.01663677639228948;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.32644004768013724;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.3488463256948422;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordauthor(M, K) )
%   | | then if ( author(N, M), title(N, L) )
%   | | | then return 0.16450827663610185;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.2944313281858541;  // std dev = 1.647, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else return 0.02687009487040817;  // std dev = 0.390, 96.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=18 */
%   | else return -0.008366245007664322;  // std dev = 0.358, 53.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=8 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1116242322604597;  // std dev = 0.387, 1,192.000 (wgt'ed) examples reached here.  /* #neg=719 #pos=473 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.1865919925771221;  // std dev = 2.152, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.014502864105143046;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.24503149911444544;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.26212705508354184;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then if ( author(N, L), title(N, M) )
%   | | | then return 0.14016171615543735;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.2507912138197667;  // std dev = 1.646, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else return -0.1576246689756064;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.017068444612320457;  // std dev = 0.383, 145.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=26 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09068924752341449;  // std dev = 0.383, 1,192.000 (wgt'ed) examples reached here.  /* #neg=719 #pos=473 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.1413282038472298;  // std dev = 2.152, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.01262239661487466;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.18482045881522163;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.19945264276423433;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then if ( author(N, L), title(N, M) )
%   | | | then return 0.11738390867372896;  // std dev = 0.809, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.20709329086573589;  // std dev = 1.645, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else return -0.13780597069422224;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.014735607979784402;  // std dev = 0.383, 145.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=26 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.007201569377407885;  // std dev = 0.311, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
%   | else if ( haswordtitle(F, C) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.07379883738847252;  // std dev = 12.505, 1,106.000 (wgt'ed) examples reached here.  /* #neg=660 #pos=446 */
%   | | | else return 0.10844728527489667;  // std dev = 3.527, 54.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=19 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.06492038363213999;  // std dev = 2.302, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | | | else return 0.14645823295320776;  // std dev = 1.546, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return 0.09772393106373535;  // std dev = 0.442, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( haswordtitle(M, N), haswordauthor(P, N) )
%   | | | then return -0.023717221734207258;  // std dev = 3.235, 87.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=13 */
%   | | | else return 0.13216498451156802;  // std dev = 1.689, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else return 0.04694044767547413;  // std dev = 0.415, 46.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=10 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.058557101428771505;  // std dev = 0.378, 1,192.000 (wgt'ed) examples reached here.  /* #neg=719 #pos=473 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.09084931312505726;  // std dev = 2.155, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.0022442288157588455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.11414022674815634;  // std dev = 0.399, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( haswordtitle(K, I) )
%   | | then if ( author(L, J), title(L, K) )
%   | | | then return 0.08182474553202977;  // std dev = 0.805, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.16473404947415562;  // std dev = 1.649, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else return -0.1197123609371863;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return -0.010147581450403106;  // std dev = 0.363, 101.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=16 */
%   | | else return 0.05403035657883057;  // std dev = 0.419, 44.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=10 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.048018447417902906;  // std dev = 0.371, 1,142.000 (wgt'ed) examples reached here.  /* #neg=685 #pos=457 */
%   | | else return 0.018304935796067553;  // std dev = 0.465, 50.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=16 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, H), haswordauthor(I, H) )
%   | | | then return 0.06814185878236505;  // std dev = 2.155, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.0019356671287177607;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.0831969663529068;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.10051821361932717;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then if ( title(N, M), venue(N, A) )
%   | | then return 0.08613611374924654;  // std dev = 0.443, 70.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=19 */
%   | | else return -0.08595862450461397;  // std dev = 0.293, 40.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=5 */
%   | else return -0.004668714397006991;  // std dev = 0.358, 53.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=8 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03725292386111948;  // std dev = 0.375, 1,192.000 (wgt'ed) examples reached here.  /* #neg=719 #pos=473 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.05113415966107178;  // std dev = 2.155, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.001669156722184419;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.0720243884522198;  // std dev = 0.399, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( haswordtitle(K, I) )
%   | | then if ( author(L, J), title(L, K) )
%   | | | then return 0.048946426716040915;  // std dev = 0.804, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.14827726130225394;  // std dev = 1.649, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else return -0.10721229186657356;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return -0.008474195913065282;  // std dev = 0.361, 101.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=16 */
%   | | else return 0.03391470281290662;  // std dev = 0.419, 44.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=10 */


Results
   AUC ROC   = 0.819961
   AUC PR    = 0.647083
   CLL	      = -0.488663
   Precision = 0.705607 at threshold = 0.5
   Recall    = 0.820652
   F1        = 0.758794


Total learning time: 1124.6546108722687 seconds
Total inference time: 3.077 seconds
AUC ROC: 0.819961


Results scoring model
   AUC ROC   = 0.885569
   AUC PR    = 0.787071
   CLL	      = -0.45918
   Precision = 0.80829 at threshold = 0.5
   Recall    = 0.884688
   F1        = 0.844765


Total scoring time: 16.424 seconds
Parameter learned model CLL: -0.45918


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,true': 'samebib(E, F), venue(F, B)', 'true,true,false': 'title(G, D), venue(G, B)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'haswordtitle(I, J), haswordauthor(K, J)', 'true,false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true,true': [9.036, 100, 445], 'true,true,true,false': [3.429, 585, 12], 'true,true,false,true': [1.713, 11, 4], 'true,true,false,false': [2.808, 23, 12], 'true,false,true,true': [2.152, 8, 11], 'true,false,true,false': [0.913, 5, 1], 'true,false,false,true': [1.247, 2, 7], 'true,false,false,false': [0.913, 1, 5], 'false': [0.397, 131, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,true': 'samebib(E, F), venue(F, B)', 'true,true,false': 'title(G, D), venue(G, B)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'haswordtitle(I, J), haswordauthor(K, J)', 'true,false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true,true': [9.036, 100, 445], 'true,true,true,false': [3.429, 585, 12], 'true,true,false,true': [1.713, 11, 4], 'true,true,false,false': [2.808, 23, 12], 'true,false,true,true': [2.152, 8, 11], 'true,false,true,false': [0.913, 5, 1], 'true,false,false,true': [1.247, 2, 7], 'true,false,false,false': [0.913, 1, 5], 'false': [0.397, 131, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(A, M), haswordauthor(N, M)'}, {'true,true,true': [0.396, 685, 457], 'true,true,false,true': [1.713, 11, 4], 'true,true,false,false': [2.808, 23, 12], 'true,false,true,true': [2.152, 8, 11], 'true,false,true,false': [0.913, 5, 1], 'true,false,false,true': [1.247, 2, 7], 'true,false,false,false': [0.913, 1, 5], 'false,true': [0.456, 12, 5], 'false,false': [0.388, 119, 27]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,true': 'haswordauthor(M, K)', 'false,true,true': 'author(N, M), title(N, L)'}, {'true,true': [0.392, 719, 473], 'true,false,true,true': [2.152, 8, 11], 'true,false,true,false': [0.913, 5, 1], 'true,false,false,true': [1.247, 2, 7], 'true,false,false,false': [0.913, 1, 5], 'false,true,true,true': [0.81, 2, 1], 'false,true,true,false': [1.647, 6, 5], 'false,true,false': [0.39, 78, 18], 'false,false': [0.358, 45, 8]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false,true': 'haswordtitle(M, K)', 'false,true,true': 'author(N, L), title(N, M)'}, {'true,true': [0.387, 719, 473], 'true,false,true,true': [2.152, 8, 11], 'true,false,true,false': [0.913, 5, 1], 'true,false,false,true': [1.247, 2, 7], 'true,false,false,false': [0.913, 1, 5], 'false,true,true,true': [0.81, 2, 1], 'false,true,true,false': [1.646, 6, 5], 'false,true,false': [0.0, 4, 0], 'false,false': [0.383, 119, 26]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false,true': 'haswordtitle(M, K)', 'false,true,true': 'author(N, L), title(N, M)'}, {'true,true': [0.383, 719, 473], 'true,false,true,true': [2.152, 8, 11], 'true,false,true,false': [0.913, 5, 1], 'true,false,false,true': [1.247, 2, 7], 'true,false,false,false': [0.913, 1, 5], 'false,true,true,true': [0.809, 2, 1], 'false,true,true,false': [1.645, 6, 5], 'false,true,false': [0.0, 4, 0], 'false,false': [0.383, 119, 26]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,false': 'haswordtitle(F, C)', 'true,false,true': 'title(G, F), venue(G, B)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordauthor(K, J)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)', 'false,false,true': 'haswordtitle(M, N), haswordauthor(P, N)'}, {'true,true': [0.311, 24, 9], 'true,false,true,true': [12.505, 660, 446], 'true,false,true,false': [3.527, 35, 19], 'true,false,false,true': [2.302, 13, 11], 'true,false,false,false': [1.546, 3, 12], 'false,true': [0.442, 12, 5], 'false,false,true,true': [3.235, 74, 13], 'false,false,true,false': [1.689, 9, 4], 'false,false,false': [0.415, 36, 10]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,true': 'haswordtitle(K, I)', 'false,true,true': 'author(L, J), title(L, K)', 'false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.378, 719, 473], 'true,false,true,true': [2.155, 8, 11], 'true,false,true,false': [0.913, 5, 1], 'true,false,false': [0.399, 3, 12], 'false,true,true,true': [0.805, 2, 1], 'false,true,true,false': [1.649, 6, 5], 'false,true,false': [0.0, 4, 0], 'false,false,true': [0.363, 85, 16], 'false,false,false': [0.419, 34, 10]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,false': 'haswordvenue(A, F), haswordtitle(G, F)', 'true,false,true': 'haswordtitle(G, H), haswordauthor(I, H)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordtitle(M, L)', 'false,true': 'title(N, M), venue(N, A)'}, {'true,true,true': [0.371, 685, 457], 'true,true,false': [0.465, 34, 16], 'true,false,true,true': [2.155, 8, 11], 'true,false,true,false': [0.913, 5, 1], 'true,false,false,true': [1.247, 2, 7], 'true,false,false,false': [0.913, 1, 5], 'false,true,true': [0.443, 51, 19], 'false,true,false': [0.293, 35, 5], 'false,false': [0.358, 45, 8]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,true': 'haswordtitle(K, I)', 'false,true,true': 'author(L, J), title(L, K)', 'false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.375, 719, 473], 'true,false,true,true': [2.155, 8, 11], 'true,false,true,false': [0.913, 5, 1], 'true,false,false': [0.399, 3, 12], 'false,true,true,true': [0.804, 2, 1], 'false,true,true,false': [1.649, 6, 5], 'false,true,false': [0.0, 4, 0], 'false,false,true': [0.361, 85, 16], 'false,false,false': [0.419, 34, 10]}]]
[{'': [0.24067019628097933, 0.1577778614174425], 'true': [0.23935225327686646, 0.24000000000000118], 'true,false': [0.24959999999999954, 0.15999999999999973], 'true,false,true': [0.24376731301939022, 0.13888888888888892], 'true,true': [0.24003499559869995, 0.2175999999999995], 'true,true,true': [0.14981903880144976, 0.019696472311305335], 'true,true,false': [0.1955555555555554, 0.2253061224489791], 'true,false,false': [0.17283950617283939, 0.1388888888888887]}, {'': [0.19979237406668052, 0.15777786141744038], 'true': [0.1978458986756369, 0.22755509669235874], 'true,false': [0.24137809168265995, 0.15975254740959102], 'true,false,true': [0.2437673130193907, 0.13888888888888887], 'true,true': [0.1968358759296316, 0.21729024279044165], 'true,true,false': [0.19555555555555565, 0.22530612244898007], 'true,true,true': [0.14981903880144684, 0.019696472311304884], 'true,false,false': [0.1728395061728397, 0.13888888888888884]}, {'': [0.16173068105798852, 0.15777786141744107], 'true': [0.1591836105937756, 0.21563964831604393], 'true,false': [0.23378182690243265, 0.15950970415843954], 'true,false,true': [0.24376731301939072, 0.13888888888888892], 'true,false,false': [0.17283950617283944, 0.13888888888888887], 'true,true': [0.1566061975507203, 0.21701498044119835], 'true,true,false': [0.19555555555555554, 0.22530612244897938], 'false': [0.2076124567474049, 0.1507318446237565]}, {'': [0.15586287665352466, 0.15749060710794416], 'false': [0.17013032821952356, 0.12834015391669776], 'false,true': [0.24339267121051542, 0.1521323875632454], 'false,true,true': [0.2189109758898161, 0.24645235449478434], 'true': [0.15376247633217127, 0.2072778186405957], 'true,false': [0.2279193832193615, 0.1593797491699327], 'true,false,true': [0.2437673130193903, 0.13888888888888887], 'true,false,false': [0.17283950617283966, 0.13888888888888898]}, {'': [0.15154450044643822, 0.15595235010467234], 'false': [0.21403778295270043, 0.14702936115557258], 'false,true': [0.24230222478220456, 0.0], 'false,true,true': [0.2185473820243062, 0.24615819988588952], 'true': [0.14966157904469762, 0.20240969574817952], 'true,false': [0.22399820669648626, 0.15932940118739344], 'true,false,true': [0.24376731301939072, 0.1388888888888889], 'true,false,false': [0.1728395061728395, 0.13888888888888884]}, {'': [0.14838928934899406, 0.1545417373287034], 'false': [0.20603543800665286, 0.14702823140512464], 'false,true': [0.24133276348115243, 0.0], 'false,true,true': [0.2182325939730424, 0.24590828687065025], 'true': [0.14658474630744114, 0.19976153685777], 'true,false': [0.2216179809383867, 0.15931064345296753], 'true,false,true': [0.24376731301939045, 0.13888888888888892], 'true,false,false': [0.1728395061728395, 0.13888888888888887]}, {'': [0.14609126823847043, 0.15348528278020526], 'false': [0.19501355351578945, 0.14789095698026017], 'false,false': [0.13594793218154044, 0.1721147032077552], 'true': [0.0967009985493832, 0.14732351653144815], 'true,false': [0.14557973515739764, 0.19876847259018462], 'true,false,false': [0.22087761048256796, 0.15930251604119902], 'true,false,true': [0.1413835602685289, 0.2303789845362068], 'false,false,true': [0.1203120999248921, 0.21944737453341762]}, {'': [0.14440399213461635, 0.15272923492134577], 'false': [0.20024905387093317, 0.14615183537770218], 'false,true': [0.24165900431427234, 0.0], 'false,true,true': [0.21582048722323352, 0.24723288275179245], 'false,false': [0.13208666904253433, 0.1755688227488367], 'true': [0.14257930905825963, 0.19803526352178313], 'true,false': [0.22052172105752393, 0.15931705363035317], 'true,false,true': [0.24441630353169883, 0.13888888888888887]}, {'': [0.14316480367386353, 0.15180926049734014], 'false': [0.1630823975233301, 0.12787456958562302], 'false,true': [0.19651385948812536, 0.08573041249015124], 'true': [0.14132834058246835, 0.19751657304869358], 'true,false': [0.21988986845988706, 0.15933126540490677], 'true,false,true': [0.244417142811331, 0.1388888888888889], 'true,false,false': [0.1728395061728395, 0.13888888888888887], 'true,true': [0.13801008946815202, 0.2162713373534068]}, {'': [0.14221287792999934, 0.1506116767772674], 'false': [0.19774027433875002, 0.14421146438859064], 'false,true': [0.24204823136621445, 0.0], 'false,true,true': [0.21530661732547104, 0.2472271242533874], 'false,false': [0.13017415927968246, 0.17518188301879867], 'true': [0.14036086409536178, 0.19720516893703458], 'true,false': [0.21953577693072368, 0.15931665302757989], 'true,false,true': [0.24441598649594548, 0.13888888888888887]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(B, K), haswordauthor(L, K).;true;true
4;false,true;haswordtitle(M, K).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(B, K), haswordauthor(L, K).;true;true
5;false,true;haswordtitle(M, K).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(B, I), haswordauthor(J, I).;true;true
7;false,true;haswordtitle(K, I).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(B, I), haswordauthor(J, I).;true;true
9;false,true;haswordtitle(K, I).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.6746626965673979;  // std dev = 9.036, 545.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=445 */
%   | | | else return -0.12175056238792502;  // std dev = 3.429, 597.000 (wgt'ed) examples reached here.  /* #neg=585 #pos=12 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.124815601766179;  // std dev = 1.713, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return 0.2010060779566552;  // std dev = 2.808, 35.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.43709630352056494;  // std dev = 2.152, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.6359267128772901;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return 0.05446795350441935;  // std dev = 0.397, 163.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.5714911502937506;  // std dev = 9.036, 545.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=445 */
%   | | | else return -0.10756598050428937;  // std dev = 3.429, 597.000 (wgt'ed) examples reached here.  /* #neg=585 #pos=12 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.10893247925776749;  // std dev = 1.713, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return 0.17473486774709096;  // std dev = 2.808, 35.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.3751785876229692;  // std dev = 2.152, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.02176788419240575;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.5398498420741675;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.5851860008555361;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return 0.04770739423344172;  // std dev = 0.397, 163.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.1652740837412339;  // std dev = 0.396, 1,142.000 (wgt'ed) examples reached here.  /* #neg=685 #pos=457 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.09391529972732654;  // std dev = 1.713, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return 0.1488623764399909;  // std dev = 2.808, 35.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=12 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.30758572307646626;  // std dev = 2.152, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.01904987294481035;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.4289562725350853;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.46125983910675533;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return 0.13936805545483527;  // std dev = 0.456, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
%   | else return 0.030181915245327075;  // std dev = 0.388, 146.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=27 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1360816506815926;  // std dev = 0.392, 1,192.000 (wgt'ed) examples reached here.  /* #neg=719 #pos=473 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.24271717457728084;  // std dev = 2.152, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.01663677639228948;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.32644004768013724;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.3488463256948422;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then if ( author(N, L), title(N, M) )
%   | | | then return 0.16450827663610185;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.2944313281858541;  // std dev = 1.647, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else return -0.15873871630629025;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.019110848188815237;  // std dev = 0.384, 145.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=26 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1116242322604597;  // std dev = 0.387, 1,192.000 (wgt'ed) examples reached here.  /* #neg=719 #pos=473 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.1865919925771221;  // std dev = 2.152, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.014502864105143046;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.24503149911444544;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.26212705508354184;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then if ( author(N, L), title(N, M) )
%   | | | then return 0.14016171615543735;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.2507912138197667;  // std dev = 1.646, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else return -0.13866990960364994;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.016523421203095152;  // std dev = 0.384, 145.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=26 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09068924752341449;  // std dev = 0.383, 1,192.000 (wgt'ed) examples reached here.  /* #neg=719 #pos=473 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.1413282038472298;  // std dev = 2.152, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.01262239661487466;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.18482045881522163;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.19945264276423433;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then if ( author(N, L), title(N, M) )
%   | | | then return 0.11738390867372896;  // std dev = 0.809, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.20709329086573589;  // std dev = 1.645, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else return -0.12292141319913401;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.014259266019978291;  // std dev = 0.384, 145.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=26 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0731442711105389;  // std dev = 0.380, 1,192.000 (wgt'ed) examples reached here.  /* #neg=719 #pos=473 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.10629555060785686;  // std dev = 2.152, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.010970321301480393;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.14645823295320776;  // std dev = 0.399, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( haswordtitle(K, I) )
%   | | then if ( author(L, J), title(L, K) )
%   | | | then return 0.09685748282380154;  // std dev = 0.809, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.16656147787809725;  // std dev = 1.644, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else return -0.11027131135380112;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return -0.00926708700920686;  // std dev = 0.365, 101.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=16 */
%   | | else return 0.06175721051775695;  // std dev = 0.419, 44.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=10 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.022260736239376577;  // std dev = 0.320, 35.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=11 */
%   | else if ( haswordtitle(F, C) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.058049881496957154;  // std dev = 12.403, 1,103.000 (wgt'ed) examples reached here.  /* #neg=660 #pos=443 */
%   | | | else return 0.09491682263136762;  // std dev = 3.529, 54.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=19 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.06289469120014916;  // std dev = 2.343, 25.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=12 */
%   | | | else return 0.11414022674815634;  // std dev = 1.546, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return 0.09501442085948852;  // std dev = 0.438, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( haswordtitle(M, N), haswordauthor(P, N) )
%   | | | then return -0.02627953226498805;  // std dev = 3.210, 87.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=13 */
%   | | | else return 0.1313873472307068;  // std dev = 1.700, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else return 0.038530385888433084;  // std dev = 0.416, 46.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=10 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04686142615213596;  // std dev = 0.376, 1,192.000 (wgt'ed) examples reached here.  /* #neg=719 #pos=473 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.06402974030082513;  // std dev = 2.152, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.0010116553345696406;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.0831969663529068;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.10051821361932717;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( title(M, L), venue(M, A) )
%   | | then if ( samebib(M, N), venue(N, B) )
%   | | | then return 0.49509280932777194;  // std dev = 2.446, 28.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=19 */
%   | | | else return -0.1843771000485109;  // std dev = 0.129, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.08485219248765268;  // std dev = 0.293, 40.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=5 */
%   | else return -0.007009707376786981;  // std dev = 0.357, 53.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=8 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return -0.025054997848588136;  // std dev = 0.303, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
%   | else if ( haswordtitle(F, C) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.038098011696757014;  // std dev = 12.325, 1,106.000 (wgt'ed) examples reached here.  /* #neg=660 #pos=446 */
%   | | | else return 0.06734976078988042;  // std dev = 3.532, 54.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=19 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.018717036682038977;  // std dev = 2.298, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | | | else return 0.0720243884522198;  // std dev = 1.546, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( haswordtitle(L, J) )
%   | | then if ( author(M, K), title(M, L) )
%   | | | then return 0.050354655142000125;  // std dev = 0.686, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.1482795705355967;  // std dev = 1.649, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else return -0.0969543088107079;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.0016489042272883555;  // std dev = 0.359, 145.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=26 */


Results
   AUC ROC   = 0.836103
   AUC PR    = 0.655284
   CLL	      = -0.485616
   Precision = 0.705607 at threshold = 0.5
   Recall    = 0.820652
   F1        = 0.758794


Total learning time: 1136.923466205597 seconds
Total inference time: 3.086 seconds
AUC ROC: 0.836103


Results scoring model
   AUC ROC   = 0.908645
   AUC PR    = 0.796781
   CLL	      = -0.454049
   Precision = 0.80829 at threshold = 0.5
   Recall    = 0.884688
   F1        = 0.844765


Total scoring time: 16.39 seconds
Refined model CLL: -0.454049


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.836103
   AUC PR    = 0.655284
   CLL	      = -0.485616
   Precision = 0.705607 at threshold = 0.5
   Recall    = 0.820652
   F1        = 0.758794


Total learning time: 2294.3920770778655 seconds
Total inference time: 3.086 seconds
AUC ROC: 0.836103
Total revision time: 2294.3920770778655
Best scored revision CLL: -0.454049


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:38:33
{'AUC ROC': 0.836103, 'AUC PR': 0.655284, 'CLL': -0.485616, 'Precision': [0.705607, 0.5], 'Recall': 0.820652, 'F1': 0.758794, 'Learning time': 2294.3920770778655, 'Inference time': 3.086, 'parameter_0.2': {'AUC ROC': 0.819961, 'AUC PR': 0.647083, 'CLL': -0.488663, 'Precision': [0.705607, 0.5], 'Recall': 0.820652, 'F1': 0.758794, 'Learning time': 1124.6546108722687, 'Inference time': 3.077}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.6746626965673979;  // std dev = 9.036, 545.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=445 */
%   | | | else return -0.12175056238792502;  // std dev = 3.429, 597.000 (wgt'ed) examples reached here.  /* #neg=585 #pos=12 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.124815601766179;  // std dev = 1.713, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return 0.2010060779566552;  // std dev = 2.808, 35.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.43709630352056494;  // std dev = 2.152, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.6359267128772901;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return 0.05446795350441935;  // std dev = 0.397, 163.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.5714911502937506;  // std dev = 9.036, 545.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=445 */
%   | | | else return -0.10756598050428937;  // std dev = 3.429, 597.000 (wgt'ed) examples reached here.  /* #neg=585 #pos=12 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.10893247925776749;  // std dev = 1.713, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return 0.17473486774709096;  // std dev = 2.808, 35.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.3751785876229692;  // std dev = 2.152, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.02176788419240575;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.5398498420741675;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.5851860008555361;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return 0.04770739423344172;  // std dev = 0.397, 163.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.1652740837412339;  // std dev = 0.396, 1,142.000 (wgt'ed) examples reached here.  /* #neg=685 #pos=457 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.09391529972732654;  // std dev = 1.713, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return 0.1488623764399909;  // std dev = 2.808, 35.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=12 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.30758572307646626;  // std dev = 2.152, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.01904987294481035;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.4289562725350853;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.46125983910675533;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return 0.13936805545483527;  // std dev = 0.456, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
%   | else return 0.030181915245327075;  // std dev = 0.388, 146.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=27 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1360816506815926;  // std dev = 0.392, 1,192.000 (wgt'ed) examples reached here.  /* #neg=719 #pos=473 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.24271717457728084;  // std dev = 2.152, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.01663677639228948;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.32644004768013724;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.3488463256948422;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then if ( author(N, L), title(N, M) )
%   | | | then return 0.16450827663610185;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.2944313281858541;  // std dev = 1.647, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else return -0.15873871630629025;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.019110848188815237;  // std dev = 0.384, 145.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=26 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1116242322604597;  // std dev = 0.387, 1,192.000 (wgt'ed) examples reached here.  /* #neg=719 #pos=473 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.1865919925771221;  // std dev = 2.152, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.014502864105143046;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.24503149911444544;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.26212705508354184;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then if ( author(N, L), title(N, M) )
%   | | | then return 0.14016171615543735;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.2507912138197667;  // std dev = 1.646, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else return -0.13866990960364994;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.016523421203095152;  // std dev = 0.384, 145.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=26 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09068924752341449;  // std dev = 0.383, 1,192.000 (wgt'ed) examples reached here.  /* #neg=719 #pos=473 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.1413282038472298;  // std dev = 2.152, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.01262239661487466;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.18482045881522163;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.19945264276423433;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then if ( author(N, L), title(N, M) )
%   | | | then return 0.11738390867372896;  // std dev = 0.809, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.20709329086573589;  // std dev = 1.645, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else return -0.12292141319913401;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.014259266019978291;  // std dev = 0.384, 145.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=26 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.03565509764914895;  // std dev = 0.323, 35.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=11 */
%   | else if ( haswordtitle(F, C) )
%   | | then return 0.07427834290928455;  // std dev = 0.381, 1,157.000 (wgt'ed) examples reached here.  /* #neg=695 #pos=462 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.08341749557432657;  // std dev = 2.347, 25.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=12 */
%   | | | else return 0.14645823295320776;  // std dev = 1.546, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( haswordtitle(K, I) )
%   | | then if ( author(L, J), title(L, K) )
%   | | | then return 0.09685748282380154;  // std dev = 0.809, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.16656147787809725;  // std dev = 1.644, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else return -0.11027131135380112;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return -0.00926708700920686;  // std dev = 0.365, 101.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=16 */
%   | | else return 0.06175721051775695;  // std dev = 0.419, 44.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=10 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.0572449628877005;  // std dev = 0.372, 1,137.000 (wgt'ed) examples reached here.  /* #neg=683 #pos=454 */
%   | | else return 0.0877309605014477;  // std dev = 0.479, 55.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=19 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, H), haswordauthor(I, H) )
%   | | | then return 0.08546812849799484;  // std dev = 2.152, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return -3.128462564792693E-4;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.10793300669975557;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.12345105682075748;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.09501442085948852;  // std dev = 0.438, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
%   | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | then return -0.005782837930547617;  // std dev = 0.367, 100.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=17 */
%   | | else return 0.038530385888433084;  // std dev = 0.416, 46.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=10 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.048088212869621304;  // std dev = 0.372, 1,142.000 (wgt'ed) examples reached here.  /* #neg=685 #pos=457 */
%   | | else return 0.018845596533571315;  // std dev = 0.465, 50.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=16 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, H), haswordauthor(I, H) )
%   | | | then return 0.0641058272916112;  // std dev = 2.152, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return -2.693347031946329E-4;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.08451534362109357;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.09869913626518588;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.07963611376156023;  // std dev = 0.437, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
%   | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | then return -0.004959498613273815;  // std dev = 0.367, 100.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=17 */
%   | | else return 0.03282288268413763;  // std dev = 0.416, 46.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03732366507318055;  // std dev = 0.375, 1,192.000 (wgt'ed) examples reached here.  /* #neg=719 #pos=473 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.04811418223773381;  // std dev = 2.152, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return -2.3188212421428508E-4;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.0720688078895126;  // std dev = 0.399, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( haswordtitle(K, I) )
%   | | then if ( author(L, J), title(L, K) )
%   | | | then return 0.05112068142917795;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.12805139282239414;  // std dev = 1.635, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else return -0.09894640284371523;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return -0.010483577931077655;  // std dev = 0.365, 101.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=16 */
%   | | else return 0.04254493744324763;  // std dev = 0.419, 44.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=10 */


Results
   AUC ROC   = 0.819041
   AUC PR    = 0.644445
   CLL	      = -0.488655
   Precision = 0.705607 at threshold = 0.5
   Recall    = 0.820652
   F1        = 0.758794


Total learning time: 1067.1221323013306 seconds
Total inference time: 3.255 seconds
AUC ROC: 0.819041


Dataset: 3_imdb_cora, Fold: 1, Type: Scratch (RDN-B), Time: 00:56:25
{'AUC ROC': 0.819041, 'AUC PR': 0.644445, 'CLL': -0.488655, 'Precision': [0.705607, 0.5], 'Recall': 0.820652, 'F1': 0.758794, 'Learning time': 1067.1221323013306, 'Inference time': 3.255}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.6765009950246011;  // std dev = 12.600, 1,068.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=874 */
%   | | | else return -0.11800238068996369;  // std dev = 5.321, 1,216.000 (wgt'ed) examples reached here.  /* #neg=1,187 #pos=29 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.11396288858788445;  // std dev = 2.861, 43.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=11 */
%   | | | else return 0.26092671287728886;  // std dev = 4.162, 72.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=29 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.5052077586289233;  // std dev = 2.787, 34.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=22 */
%   | | | else return 0.22178529873587596;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else return 0.6816783468642175;  // std dev = 0.381, 34.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=28 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.07210242347160484;  // std dev = 0.410, 215.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=46 */
%   | else return 0.019765096715673995;  // std dev = 0.368, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.5729892289225045;  // std dev = 12.600, 1,068.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=874 */
%   | | | else return -0.10423580825020205;  // std dev = 5.321, 1,216.000 (wgt'ed) examples reached here.  /* #neg=1,187 #pos=29 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.09951624375445925;  // std dev = 2.861, 43.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=11 */
%   | | | else return 0.2261077458330185;  // std dev = 4.162, 72.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=29 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.4320160447055319;  // std dev = 2.787, 34.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=22 */
%   | | | else return 0.19258789115538322;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else return 0.5772066794120971;  // std dev = 0.381, 34.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=28 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.12065892093021124;  // std dev = 0.444, 37.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=10 */
%   | else return 0.03905520003200481;  // std dev = 0.390, 277.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=52 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.16088844745416833;  // std dev = 0.395, 2,293.000 (wgt'ed) examples reached here.  /* #neg=1,388 #pos=905 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.14781812673139608;  // std dev = 2.572, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
%   | | | else return 0.19078675290690225;  // std dev = 4.162, 72.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=29 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.3502991783942836;  // std dev = 2.787, 34.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=22 */
%   | | | else return 0.16352953408429413;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else return 0.4556011626653664;  // std dev = 0.381, 34.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=28 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.18055716058697513;  // std dev = 0.475, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
%   | | else return -0.07476263051606048;  // std dev = 0.287, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | else return 0.034044347198734455;  // std dev = 0.390, 277.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=52 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.13360962725850817;  // std dev = 0.388, 2,293.000 (wgt'ed) examples reached here.  /* #neg=1,388 #pos=905 */
%   | | else return 0.1489925655082752;  // std dev = 0.475, 106.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=38 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, H), haswordauthor(I, H) )
%   | | | then return 0.2724457891495313;  // std dev = 2.787, 34.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=22 */
%   | | | else return 0.13606878407651105;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else return 0.344894846354913;  // std dev = 0.381, 34.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=28 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordauthor(L, J) )
%   | | then return 0.12226805509164788;  // std dev = 0.447, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | else if ( title(M, K), venue(M, B) )
%   | | | then return 0.06480262458487891;  // std dev = 5.183, 153.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=35 */
%   | | | else return -0.04012762085165276;  // std dev = 2.100, 41.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=5 */
%   | else return 0.006533087155095133;  // std dev = 0.368, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11025226868893041;  // std dev = 0.387, 2,399.000 (wgt'ed) examples reached here.  /* #neg=1,456 #pos=943 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.1834331131578266;  // std dev = 0.480, 45.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=26 */
%   | | else return 0.25904528127845583;  // std dev = 0.381, 34.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=28 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, A) )
%   | | then return 0.3159497353780484;  // std dev = 1.214, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( haswordtitle(J, G) )
%   | | | then return 0.11689516555606318;  // std dev = 2.172, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
%   | | | else return -0.16321903813370078;  // std dev = 0.021, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.01159366438284885;  // std dev = 0.377, 175.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=30 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then return -0.1671316623379916;  // std dev = 0.024, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.06085251712994961;  // std dev = 4.112, 96.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( haswordauthor(E, C) )
%   | | then return 0.32809992824401374;  // std dev = 0.721, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.08925139327922585;  // std dev = 0.383, 2,395.000 (wgt'ed) examples reached here.  /* #neg=1,455 #pos=940 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, H), haswordauthor(I, H) )
%   | | | then return 0.16120457657599604;  // std dev = 2.787, 34.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=22 */
%   | | | else return 0.07511892525465275;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else return 0.19674969883689417;  // std dev = 0.381, 34.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=28 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordvenue(A, L) )
%   | | | then return 0.10311391073255372;  // std dev = 2.011, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | | else return 0.01843367070062665;  // std dev = 5.100, 168.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=33 */
%   | | else return 0.10742938626387828;  // std dev = 0.444, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
%   | else return 0.002872663084624783;  // std dev = 0.367, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07234556519715024;  // std dev = 0.381, 2,399.000 (wgt'ed) examples reached here.  /* #neg=1,456 #pos=943 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.15132634074261597;  // std dev = 2.319, 32.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=22 */
%   | | | else return -0.010037958097689686;  // std dev = 1.892, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.0929198248581699;  // std dev = 2.225, 21.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=13 */
%   | | | else return 0.25153306348391047;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, B) )
%   | | | then return 0.0638943235440573;  // std dev = 4.674, 120.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=30 */
%   | | | else return -0.0462633746660428;  // std dev = 2.783, 69.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=9 */
%   | | else return 0.09234652626965709;  // std dev = 0.444, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
%   | else return 0.002489453059546739;  // std dev = 0.367, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05807464389033774;  // std dev = 0.378, 2,399.000 (wgt'ed) examples reached here.  /* #neg=1,456 #pos=943 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.08198985331286227;  // std dev = 0.450, 45.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=29 */
%   | | else return 0.11906840663247997;  // std dev = 0.420, 34.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=25 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, A) )
%   | | then return 0.2529113671087713;  // std dev = 1.200, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( haswordtitle(J, G) )
%   | | | then return 0.08151509379190304;  // std dev = 2.168, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
%   | | | else return -0.15177762506161613;  // std dev = 0.037, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.003211672581953081;  // std dev = 0.375, 175.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=30 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.046061773570003794;  // std dev = 4.107, 96.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
%   | | | else return -0.15362906924765796;  // std dev = 0.033, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.04733739508252004;  // std dev = 0.371, 2,284.000 (wgt'ed) examples reached here.  /* #neg=1,381 #pos=903 */
%   | | else return 0.028277182018716852;  // std dev = 0.473, 115.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=40 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, H), haswordauthor(I, H) )
%   | | | then return 0.079410986453144;  // std dev = 2.785, 34.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=22 */
%   | | | else return 0.007955495669181967;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else return 0.09445680540282174;  // std dev = 0.375, 34.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=28 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordvenue(B, L) )
%   | | | then return 0.16059946935332048;  // std dev = 2.118, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
%   | | | else return -0.0016713753897897735;  // std dev = 4.976, 170.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=31 */
%   | | else return 0.07663860573592349;  // std dev = 0.445, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
%   | else return 0.0015007729047998865;  // std dev = 0.367, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.2227722443560922;  // std dev = 0.340, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.0030390951057364117;  // std dev = 0.310, 64.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=20 */
%   | | else if ( haswordtitle(G, C) )
%   | | | then return 0.037690524920256104;  // std dev = 18.201, 2,330.000 (wgt'ed) examples reached here.  /* #neg=1,410 #pos=920 */
%   | | | else return 0.05073937304241429;  // std dev = 3.858, 77.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=52 */
%   else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.4293980323640076;  // std dev = 3.518, 55.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=35 */
%   | | | else return -0.1831799572446583;  // std dev = 1.038, 103.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=1 */
%   | | else if ( haswordauthor(L, H) )
%   | | | then return 0.10517499751019357;  // std dev = 1.773, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
%   | | | else return -0.06229365399836533;  // std dev = 2.072, 41.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=5 */
%   | else return 0.0012998620523200822;  // std dev = 0.367, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */


Results
   AUC ROC   = 0.834591
   AUC PR    = 0.656859
   CLL	      = -0.48494
   Precision = 0.705607 at threshold = 0.5
   Recall    = 0.820652
   F1        = 0.758794


Total learning time: 3126.814901828766 seconds
Total inference time: 3.388 seconds
AUC ROC: 0.834591


Results scoring model
   AUC ROC   = 0.901385
   AUC PR    = 0.789874
   CLL	      = -0.4563
   Precision = 0.81338 at threshold = 0.5
   Recall    = 0.872521
   F1        = 0.841913


Total scoring time: 39.885 seconds
Parameter learned model CLL: -0.4563


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,true': 'samebib(E, F), venue(F, B)', 'true,true,false': 'title(G, D), venue(G, B)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'haswordtitle(I, J), haswordauthor(K, J)', 'false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true,true': [12.6, 194, 874], 'true,true,true,false': [5.321, 1, 29], 'true,true,false,true': [2.861, 32, 11], 'true,true,false,false': [4.162, 43, 29], 'true,false,true,true': [2.787, 12, 22], 'true,false,true,false': [1.595, 7, 4], 'true,false,false': [0.381, 6, 28], 'false,true': [0.41, 169, 46], 'false,false': [0.368, 83, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,true': 'samebib(E, F), venue(F, B)', 'true,true,false': 'title(G, D), venue(G, B)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'haswordtitle(I, J), haswordauthor(K, J)', 'false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true,true': [12.6, 194, 874], 'true,true,true,false': [5.321, 1, 29], 'true,true,false,true': [2.861, 32, 11], 'true,true,false,false': [4.162, 43, 29], 'true,false,true,true': [2.787, 12, 22], 'true,false,true,false': [1.595, 7, 4], 'true,false,false': [0.381, 6, 28], 'false,true': [0.444, 27, 10], 'false,false': [0.39, 225, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false,true': 'haswordtitle(M, K)'}, {'true,true,true': [0.395, 1, 905], 'true,true,false,true': [2.572, 25, 9], 'true,true,false,false': [4.162, 43, 29], 'true,false,true,true': [2.787, 12, 22], 'true,false,true,false': [1.595, 7, 4], 'true,false,false': [0.381, 6, 28], 'false,true,true': [0.475, 17, 9], 'false,true,false': [0.287, 10, 1], 'false,false': [0.39, 225, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,false': 'haswordvenue(A, F), haswordtitle(G, F)', 'true,false,true': 'haswordtitle(G, H), haswordauthor(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordauthor(L, J)', 'false,true,false': 'title(M, K), venue(M, B)'}, {'true,true,true': [0.388, 1, 905], 'true,true,false': [0.475, 68, 38], 'true,false,true,true': [2.787, 12, 22], 'true,false,true,false': [1.595, 7, 4], 'true,false,false': [0.381, 6, 28], 'false,true,true': [0.447, 15, 6], 'false,true,false,true': [5.183, 118, 35], 'false,true,false,false': [2.1, 36, 5], 'false,false': [0.368, 83, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false,true': 'author(I, H), venue(I, A)', 'false,true,false': 'haswordtitle(J, G)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,false,false': 'haswordvenue(A, M), haswordauthor(N, M)'}, {'true,true': [0.387, 1, 943], 'true,false,true': [0.48, 19, 26], 'true,false,false': [0.381, 6, 28], 'false,true,true': [1.214, 3, 3], 'false,true,false,true': [2.172, 15, 7], 'false,true,false,false': [0.021, 9, 0], 'false,false,true': [0.377, 145, 30], 'false,false,false,true': [0.024, 6, 0], 'false,false,false,false': [4.112, 74, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'haswordauthor(E, C)', 'true,false': 'haswordvenue(A, F), haswordtitle(G, F)', 'true,false,true': 'haswordtitle(G, H), haswordauthor(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordauthor(M, L)', 'false,true,true': 'haswordvenue(A, L)'}, {'true,true,true': [0.721, 1, 3], 'true,true,false': [0.383, 1, 940], 'true,false,true,true': [2.787, 12, 22], 'true,false,true,false': [1.595, 7, 4], 'true,false,false': [0.381, 6, 28], 'false,true,true,true': [2.011, 15, 6], 'false,true,true,false': [5.1, 135, 33], 'false,true,false': [0.444, 19, 7], 'false,false': [0.367, 83, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, B)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordauthor(M, L)', 'false,true,true': 'author(N, M), venue(N, B)'}, {'true,true': [0.381, 1, 943], 'true,false,true,true': [2.319, 10, 22], 'true,false,true,false': [1.892, 6, 7], 'true,false,false,true': [2.225, 8, 13], 'true,false,false,false': [0.961, 1, 12], 'false,true,true,true': [4.674, 90, 30], 'false,true,true,false': [2.783, 60, 9], 'false,true,false': [0.444, 19, 7], 'false,false': [0.367, 83, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false,true': 'author(I, H), venue(I, A)', 'false,true,false': 'haswordtitle(J, G)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.378, 1, 943], 'true,false,true': [0.45, 16, 29], 'true,false,false': [0.42, 9, 25], 'false,true,true': [1.2, 3, 3], 'false,true,false,true': [2.168, 15, 7], 'false,true,false,false': [0.037, 9, 0], 'false,false,true': [0.375, 145, 30], 'false,false,false,true': [4.107, 74, 22], 'false,false,false,false': [0.033, 6, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,false': 'haswordvenue(A, F), haswordtitle(G, F)', 'true,false,true': 'haswordtitle(G, H), haswordauthor(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordauthor(M, L)', 'false,true,true': 'haswordvenue(B, L)'}, {'true,true,true': [0.371, 1, 903], 'true,true,false': [0.473, 75, 40], 'true,false,true,true': [2.785, 12, 22], 'true,false,true,false': [1.595, 7, 4], 'true,false,false': [0.375, 6, 28], 'false,true,true,true': [2.118, 11, 8], 'false,true,true,false': [4.976, 139, 31], 'false,true,false': [0.445, 19, 7], 'false,false': [0.367, 83, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordauthor(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordtitle(G, C)', 'false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false,true': 'title(J, I), venue(J, B)', 'false,true,true': 'samebib(J, K), venue(K, A)', 'false,true,false': 'haswordauthor(L, H)'}, {'true,true': [0.34, 2, 5], 'true,false,true': [0.31, 44, 20], 'true,false,false,true': [18.201, 1, 920], 'true,false,false,false': [3.858, 25, 52], 'false,true,true,true': [3.518, 20, 35], 'false,true,true,false': [1.038, 102, 1], 'false,true,false,true': [1.773, 11, 5], 'false,true,false,false': [2.072, 36, 5], 'false,false': [0.367, 83, 16]}]]
[{'': [0.24046264105568102, 0.15846484644407569], 'true': [0.23856820986793376, 0.2163114885435024], 'true,true': [0.23905026515072644, 0.2268431001890372], 'true,true,true': [0.14865196594146968, 0.023279924471953522], 'true,true,false': [0.19037317468902057, 0.24054783950617425], 'true,false': [0.24395061728395195, 0.14532871972318476], 'true,false,true': [0.22837370242214636, 0.2314049586776858], 'false': [0.16817739318550678, 0.1354963779206198]}, {'': [0.1998525876852551, 0.15832545254017494], 'true': [0.1975447878394866, 0.20925985463585348], 'true,false': [0.23970226354458568, 0.14532871972318423], 'true,false,true': [0.22837370242214536, 0.23140495867768582], 'true,true': [0.19608098208535246, 0.22553845930813585], 'true,true,false': [0.19037317468902068, 0.2405478395061735], 'true,true,true': [0.14865196594142677, 0.023279924471951614], 'false': [0.19691354985461137, 0.15238640680571017]}, {'': [0.1620109990160412, 0.1581461958588605], 'true': [0.15930444906083482, 0.20231125099441205], 'true,false': [0.23555724635292888, 0.145328719723183], 'true,false,true': [0.22837370242214508, 0.23140495867768607], 'true,true': [0.1561994454775559, 0.2262238740376896], 'true,true,false': [0.19463667820069172, 0.24054783950617223], 'false': [0.19688723182825144, 0.1523839560950219], 'false,true': [0.22593719392602235, 0.08241576372869318]}, {'': [0.15619578629854597, 0.15756370002700204], 'false': [0.16716291616399037, 0.1353989845962445], 'false,true': [0.1995683930616102, 0.1630355819782419], 'false,true,false': [0.1755841456653893, 0.10752458963409646], 'true': [0.1541065832015804, 0.19775496336404627], 'true,false': [0.2325496930276947, 0.1453287197231837], 'true,false,true': [0.22837370242214533, 0.2314049586776861], 'true,true': [0.15077436312823875, 0.22596324025362297]}, {'': [0.15191179301731333, 0.1570208691082834], 'false': [0.19160138391803075, 0.15202905028329777], 'false,true': [0.24578418284722212, 0.1683665230132924], 'false,true,false': [0.21444349463007384, 4.982003774542079e-05], 'false,false': [0.1418430241051885, 0.16869320166348847], 'false,false,false': [9.253231559995985e-05, 0.17617328549257438], 'true': [0.15012283772785248, 0.19541618715625236], 'true,false': [0.23079948436422235, 0.14532871972318331]}, {'': [0.14880094568466157, 0.15576550686247406], 'false': [0.16494807905468156, 0.13500411226558268], 'false,true': [0.1597062609468412, 0.19748398499184963], 'false,true,true': [0.1926511328975933, 0.15479140272501227], 'true': [0.14711343155694934, 0.1946195736523399], 'true,false': [0.230483375690497, 0.14532871972318342], 'true,false,true': [0.2283737024221453, 0.23140495867768607], 'true,true': [0.13013611480329532, 0.14704666548558437]}, {'': [0.14649521194061604, 0.1553996686609169], 'false': [0.1645170509020459, 0.13500371750322263], 'false,true': [0.159403687555909, 0.19754213547750682], 'false,true,true': [0.18208644577939995, 0.11225082922592348], 'true': [0.14484086954612563, 0.1939730447088328], 'true,false': [0.2044484404274816, 0.17874891461950965], 'true,false,true': [0.168115956790361, 0.2753660244793122], 'true,false,false': [0.2358276643990929, 0.07100591715976326]}, {'': [0.1447745718254764, 0.1547242134620614], 'false': [0.18314243480759398, 0.15075904399787896], 'false,true': [0.23984749516668527, 0.1628945953138198], 'false,true,false': [0.2136705768037437, 0.00015098626435256564], 'false,false': [0.14057296532696795, 0.16762396539534494], 'false,false,false': [0.1757432680416814, 0.00018436286080596165], 'true': [0.14318180444841772, 0.19160310401742756], 'true,false': [0.2022529493973921, 0.17672459561322942]}, {'': [0.14356074688282355, 0.15377865692580506], 'false': [0.16252542028743425, 0.1344915196799916], 'false,true': [0.15711594258521352, 0.19846934060818763], 'false,true,true': [0.2360799055498233, 0.1456434436001784], 'true': [0.1419506877529775, 0.1916102955651525], 'true,false': [0.22991732110122273, 0.14030768826669515], 'true,false,true': [0.2281879208401917, 0.23140495867768596], 'true,true': [0.13782053054192442, 0.22363332466805133]}, {'': [0.14263264516148233, 0.1531399322502433], 'false': [0.16163870768009736, 0.13449116853020096], 'false,true': [0.17029484506855924, 0.13613351538756638], 'false,true,true': [0.2250003690324354, 0.010457533246585401], 'true': [0.11550606336787975, 0.14261221082001757], 'true,false': [0.09609114350408444, 0.14381731181394009], 'true,false,false': [0.14217495472227654, 0.19334978540432787], 'false,true,false': [0.1964675623632466, 0.10471603043163537]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(B, G), haswordauthor(H, G).;true;true
4;false,true;author(I, H), venue(I, A).;true;true
4;false,true,false;haswordtitle(J, G).;true;true
4;false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
4;false,false,false;haswordvenue(A, M), haswordauthor(N, M).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(B, G), haswordauthor(H, G).;true;true
7;false,true;author(I, H), venue(I, A).;true;true
7;false,true,false;haswordtitle(J, G).;true;true
7;false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
7;false,false,false;haswordvenue(A, M), haswordtitle(N, M).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.6765009950246011;  // std dev = 12.600, 1,068.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=874 */
%   | | | else return -0.11800238068996369;  // std dev = 5.321, 1,216.000 (wgt'ed) examples reached here.  /* #neg=1,187 #pos=29 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.2010060779566538;  // std dev = 4.864, 105.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=36 */
%   | | | else return 0.2581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.5052077586289233;  // std dev = 2.787, 34.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=22 */
%   | | | else return 0.22178529873587596;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else return 0.6816783468642175;  // std dev = 0.381, 34.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=28 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.12841920536978263;  // std dev = 0.444, 37.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=10 */
%   | else return 0.045874566868465284;  // std dev = 0.390, 277.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=52 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.5729892289225045;  // std dev = 12.600, 1,068.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=874 */
%   | | | else return -0.10423580825020205;  // std dev = 5.321, 1,216.000 (wgt'ed) examples reached here.  /* #neg=1,187 #pos=29 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.0876916783783204;  // std dev = 2.861, 43.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=11 */
%   | | | else return 0.23352438177802626;  // std dev = 4.162, 72.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=29 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.4320160447055319;  // std dev = 2.787, 34.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=22 */
%   | | | else return 0.19258789115538322;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else return 0.5772066794120971;  // std dev = 0.381, 34.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=28 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.06493481480512141;  // std dev = 0.410, 215.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=46 */
%   | else return 0.013332976289562697;  // std dev = 0.368, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.16068456911020473;  // std dev = 0.395, 2,293.000 (wgt'ed) examples reached here.  /* #neg=1,388 #pos=905 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.14781812673139608;  // std dev = 2.572, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
%   | | | else return 0.19811745498209257;  // std dev = 4.162, 72.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=29 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.3502991783942836;  // std dev = 2.787, 34.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=22 */
%   | | | else return 0.16352953408429413;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else return 0.4556011626653664;  // std dev = 0.381, 34.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=28 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.1804562519022728;  // std dev = 0.475, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
%   | | else return -0.07486253253109569;  // std dev = 0.287, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | else return 0.03405862913896125;  // std dev = 0.390, 277.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=52 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.13341989289415615;  // std dev = 0.388, 2,293.000 (wgt'ed) examples reached here.  /* #neg=1,388 #pos=905 */
%   | | else return 0.15362187746070624;  // std dev = 0.475, 106.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=38 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, H), haswordauthor(I, H) )
%   | | | then return 0.2724457891495313;  // std dev = 2.787, 34.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=22 */
%   | | | else return 0.13606878407651105;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else return 0.344894846354913;  // std dev = 0.381, 34.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=28 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordauthor(L, J) )
%   | | then return 0.12229619580865636;  // std dev = 0.447, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | else if ( title(M, K), venue(M, B) )
%   | | | then return 0.06482831810256844;  // std dev = 5.183, 153.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=35 */
%   | | | else return -0.040088577224124504;  // std dev = 2.100, 41.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=5 */
%   | else return 0.006472049404982312;  // std dev = 0.368, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.10945845811349121;  // std dev = 0.383, 2,293.000 (wgt'ed) examples reached here.  /* #neg=1,388 #pos=905 */
%   | | else return 0.12789363749723306;  // std dev = 0.475, 106.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=38 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, H), haswordauthor(I, H) )
%   | | | then return 0.20678016870838442;  // std dev = 2.787, 34.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=22 */
%   | | | else return 0.11126948691064746;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else return 0.25904528127845583;  // std dev = 0.381, 34.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=28 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordvenue(B, L) )
%   | | | then return 0.21603441607106202;  // std dev = 2.147, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
%   | | | else return 0.013711662749139876;  // std dev = 5.025, 170.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=31 */
%   | | else return 0.11055032100682485;  // std dev = 0.443, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
%   | else return 0.005622160959491222;  // std dev = 0.368, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.09060025837779885;  // std dev = 0.379, 2,284.000 (wgt'ed) examples reached here.  /* #neg=1,381 #pos=903 */
%   | | else return 0.07114852254421987;  // std dev = 0.474, 115.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=40 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, H), haswordauthor(I, H) )
%   | | | then return 0.15537082281178857;  // std dev = 2.787, 34.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=22 */
%   | | | else return 0.08970341513165919;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else return 0.19674969883689417;  // std dev = 0.381, 34.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=28 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordvenue(B, L) )
%   | | | then return 0.17858497283993724;  // std dev = 2.146, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
%   | | | else return 0.011780910453651794;  // std dev = 5.025, 170.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=31 */
%   | | else return 0.09523953626123845;  // std dev = 0.443, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
%   | else return 0.004880801170734393;  // std dev = 0.368, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07238484238530646;  // std dev = 0.381, 2,399.000 (wgt'ed) examples reached here.  /* #neg=1,456 #pos=943 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.0824111703938084;  // std dev = 2.712, 31.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=19 */
%   | | | else return 0.15679144793192856;  // std dev = 1.708, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.09036090231174931;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return 0.25153306348391047;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordauthor(L, J) )
%   | | then return 0.09448864813282984;  // std dev = 0.437, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | else if ( title(M, K), venue(M, B) )
%   | | | then return 0.04424215839465779;  // std dev = 5.160, 153.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=35 */
%   | | | else return -0.0532625716504476;  // std dev = 2.077, 41.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=5 */
%   | else return 0.004234876975567893;  // std dev = 0.368, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.05726110853336343;  // std dev = 0.373, 2,293.000 (wgt'ed) examples reached here.  /* #neg=1,388 #pos=905 */
%   | | else return 0.07630253843093081;  // std dev = 0.475, 106.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=38 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.0619480026228439;  // std dev = 2.712, 31.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=19 */
%   | | | else return 0.12220205480016177;  // std dev = 1.706, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | else return 0.11963734955408303;  // std dev = 0.378, 34.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=28 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordvenue(B, K) )
%   | | | then return 0.13424352542459336;  // std dev = 2.140, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
%   | | | else return 0.004136067747113859;  // std dev = 5.017, 170.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=31 */
%   | | else return 0.08792998148775617;  // std dev = 0.441, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
%   | else return 0.0036726823590257783;  // std dev = 0.368, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04644077963702691;  // std dev = 0.377, 2,399.000 (wgt'ed) examples reached here.  /* #neg=1,456 #pos=943 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.058956462595067115;  // std dev = 0.451, 45.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=29 */
%   | | else return 0.09871967082920774;  // std dev = 0.419, 34.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=25 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then if ( samebib(I, J), venue(J, B) )
%   | | | then return 0.4194695251046783;  // std dev = 3.378, 49.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=29 */
%   | | | else return -0.1661725239178644;  // std dev = 0.160, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | else return -0.06619239907390082;  // std dev = 0.336, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return 0.05760570732580378;  // std dev = 4.187, 97.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=23 */
%   | | | else return -0.18176380689334576;  // std dev = 0.037, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.15635666392423483;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.037002296200821475;  // std dev = 0.376, 2,399.000 (wgt'ed) examples reached here.  /* #neg=1,456 #pos=943 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.057600623784835686;  // std dev = 2.777, 34.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=22 */
%   | | | else return -0.002899822914096749;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.03397768782045007;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return 0.15721944413926017;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordauthor(M, K) )
%   | | then return 0.07222885449661885;  // std dev = 0.394, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | else if ( title(N, L), venue(N, B) )
%   | | | then return 0.030109184004530956;  // std dev = 5.114, 153.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=35 */
%   | | | else return -0.05136284763117298;  // std dev = 1.891, 41.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=5 */
%   | else return -0.0038023940205453087;  // std dev = 0.344, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */


Results
   AUC ROC   = 0.835539
   AUC PR    = 0.653146
   CLL	      = -0.486537
   Precision = 0.705607 at threshold = 0.5
   Recall    = 0.820652
   F1        = 0.758794


Total learning time: 2924.320145845413 seconds
Total inference time: 3.666 seconds
AUC ROC: 0.835539


Results scoring model
   AUC ROC   = 0.89931
   AUC PR    = 0.788144
   CLL	      = -0.457509
   Precision = 0.81338 at threshold = 0.5
   Recall    = 0.872521
   F1        = 0.841913


Total scoring time: 38.422 seconds
Refined model CLL: -0.457509


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.834591
   AUC PR    = 0.656859
   CLL	      = -0.48494
   Precision = 0.705607 at threshold = 0.5
   Recall    = 0.820652
   F1        = 0.758794


Total learning time: 6129.442047674179 seconds
Total inference time: 3.388 seconds
AUC ROC: 0.834591
Total revision time: 6129.442047674179
Best scored revision CLL: -0.4563


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 02:38:47
{'AUC ROC': 0.834591, 'AUC PR': 0.656859, 'CLL': -0.48494, 'Precision': [0.705607, 0.5], 'Recall': 0.820652, 'F1': 0.758794, 'Learning time': 6129.442047674179, 'Inference time': 3.388, 'parameter_0.4': {'AUC ROC': 0.834591, 'AUC PR': 0.656859, 'CLL': -0.48494, 'Precision': [0.705607, 0.5], 'Recall': 0.820652, 'F1': 0.758794, 'Learning time': 3126.814901828766, 'Inference time': 3.388}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.6765009950246011;  // std dev = 12.600, 1,068.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=874 */
%   | | | else return -0.11800238068996369;  // std dev = 5.321, 1,216.000 (wgt'ed) examples reached here.  /* #neg=1,187 #pos=29 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.11396288858788445;  // std dev = 2.861, 43.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=11 */
%   | | | else return 0.26092671287728886;  // std dev = 4.162, 72.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=29 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.5052077586289233;  // std dev = 2.787, 34.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=22 */
%   | | | else return 0.22178529873587596;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else return 0.6816783468642175;  // std dev = 0.381, 34.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=28 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.07210242347160484;  // std dev = 0.410, 215.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=46 */
%   | else return 0.019765096715673995;  // std dev = 0.368, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.5729892289225045;  // std dev = 12.600, 1,068.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=874 */
%   | | | else return -0.10423580825020205;  // std dev = 5.321, 1,216.000 (wgt'ed) examples reached here.  /* #neg=1,187 #pos=29 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.09951624375445925;  // std dev = 2.861, 43.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=11 */
%   | | | else return 0.2261077458330185;  // std dev = 4.162, 72.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=29 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.4320160447055319;  // std dev = 2.787, 34.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=22 */
%   | | | else return 0.19258789115538322;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else return 0.5772066794120971;  // std dev = 0.381, 34.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=28 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.12065892093021124;  // std dev = 0.444, 37.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=10 */
%   | else return 0.03905520003200481;  // std dev = 0.390, 277.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=52 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.16088844745416833;  // std dev = 0.395, 2,293.000 (wgt'ed) examples reached here.  /* #neg=1,388 #pos=905 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.14781812673139608;  // std dev = 2.572, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
%   | | | else return 0.19078675290690225;  // std dev = 4.162, 72.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=29 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.3502991783942836;  // std dev = 2.787, 34.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=22 */
%   | | | else return 0.16352953408429413;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else return 0.4556011626653664;  // std dev = 0.381, 34.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=28 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.18055716058697513;  // std dev = 0.475, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
%   | | else return -0.07476263051606048;  // std dev = 0.287, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | else return 0.034044347198734455;  // std dev = 0.390, 277.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=52 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.13360962725850817;  // std dev = 0.388, 2,293.000 (wgt'ed) examples reached here.  /* #neg=1,388 #pos=905 */
%   | | else return 0.1489925655082752;  // std dev = 0.475, 106.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=38 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, H), haswordauthor(I, H) )
%   | | | then return 0.2724457891495313;  // std dev = 2.787, 34.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=22 */
%   | | | else return 0.13606878407651105;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else return 0.344894846354913;  // std dev = 0.381, 34.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=28 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.47181443881914187;  // std dev = 3.544, 55.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=35 */
%   | | | else return -0.15404683594064303;  // std dev = 1.004, 103.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=1 */
%   | | else return 0.013232074216257357;  // std dev = 0.380, 57.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=10 */
%   | else return 0.006533087155095133;  // std dev = 0.368, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.3820076880733811;  // std dev = 12.600, 1,068.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=874 */
%   | | | else return -0.12703647874284243;  // std dev = 5.320, 1,216.000 (wgt'ed) examples reached here.  /* #neg=1,187 #pos=29 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.04030332456515098;  // std dev = 2.861, 43.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=11 */
%   | | | else return 0.1285319016296995;  // std dev = 4.162, 72.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=29 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.20678016870838442;  // std dev = 2.787, 34.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=22 */
%   | | | else return 0.11126948691064746;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.1974206314185115;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return 0.35859279259067267;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return 0.02934519388705792;  // std dev = 0.380, 314.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=62 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0748855064720563;  // std dev = 0.355, 2,399.000 (wgt'ed) examples reached here.  /* #neg=1,456 #pos=943 */
%   | else return 0.16411567546490913;  // std dev = 0.440, 79.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=54 */
%   else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then return 0.2927781807754299;  // std dev = 1.222, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( haswordtitle(H, E) )
%   | | | then return 0.10484492866580329;  // std dev = 1.959, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
%   | | | else return -0.14406583070050105;  // std dev = 0.017, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.04779559126935328;  // std dev = 4.599, 128.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=27 */
%   | | | else return -0.10203771520235544;  // std dev = 1.556, 47.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=3 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.04985147709892748;  // std dev = 3.807, 96.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=22 */
%   | | | else return -0.15825665007091624;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06132711864555783;  // std dev = 0.353, 2,399.000 (wgt'ed) examples reached here.  /* #neg=1,456 #pos=943 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.10008773046241956;  // std dev = 0.479, 45.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=26 */
%   | | else return 0.15945106386756613;  // std dev = 0.378, 34.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=28 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | then if ( haswordvenue(B, I) )
%   | | | then return 0.18491618054171569;  // std dev = 1.920, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
%   | | | else return 0.005691626265988532;  // std dev = 4.680, 170.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=31 */
%   | | else return 0.0946562193467965;  // std dev = 0.440, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then return -0.1679896424597333;  // std dev = 0.084, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.017221964376929057;  // std dev = 3.603, 87.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=16 */
%   | | | else return -0.13798753035903139;  // std dev = 0.001, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.050065812019607414;  // std dev = 0.351, 2,399.000 (wgt'ed) examples reached here.  /* #neg=1,456 #pos=943 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.07602994732552844;  // std dev = 0.479, 45.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=26 */
%   | | else return 0.1249032560555379;  // std dev = 0.378, 34.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=28 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( haswordauthor(I, G) )
%   | | then return 0.10639763814496699;  // std dev = 0.427, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | else if ( title(J, H), venue(J, B) )
%   | | | then return 0.0384254016113469;  // std dev = 4.732, 153.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=35 */
%   | | | else return -0.0567552383336054;  // std dev = 2.078, 41.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=5 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return 0.01759477379760757;  // std dev = 3.596, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
%   | | | else return -0.16775659221258601;  // std dev = 0.052, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.12154640168168145;  // std dev = 0.004, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04077392124360027;  // std dev = 0.349, 2,399.000 (wgt'ed) examples reached here.  /* #neg=1,456 #pos=943 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.05776922545624626;  // std dev = 0.479, 45.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=26 */
%   | | else return 0.09930515705288782;  // std dev = 0.378, 34.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=28 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | then if ( haswordauthor(J, G) )
%   | | | then return 0.0904763797703617;  // std dev = 1.951, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | | else return 0.004191283234587955;  // std dev = 4.656, 168.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=33 */
%   | | else return 0.08793671557420744;  // std dev = 0.438, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then return -0.14411561307647616;  // std dev = 0.087, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.014028428620568377;  // std dev = 3.596, 87.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=16 */
%   | | | else return -0.10991206824622173;  // std dev = 0.001, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03314488246623225;  // std dev = 0.348, 2,399.000 (wgt'ed) examples reached here.  /* #neg=1,456 #pos=943 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.04393472603413525;  // std dev = 0.479, 45.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=26 */
%   | | else return 0.07994140889065054;  // std dev = 0.378, 34.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=28 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | then if ( haswordvenue(B, I) )
%   | | | then return 0.13860961489628607;  // std dev = 1.875, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
%   | | | else return -0.0025766079527075147;  // std dev = 4.658, 170.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=31 */
%   | | else return 0.0745735969448072;  // std dev = 0.438, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then return -0.12736903032506103;  // std dev = 0.079, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.012044270715249277;  // std dev = 3.596, 87.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=16 */
%   | | | else return -0.0996112609921217;  // std dev = 0.001, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.844477
   AUC PR    = 0.657671
   CLL	      = -0.458813
   Precision = 0.705607 at threshold = 0.5
   Recall    = 0.820652
   F1        = 0.758794


Total learning time: 3638.913816690445 seconds
Total inference time: 3.572 seconds
AUC ROC: 0.844477


Dataset: 3_imdb_cora, Fold: 1, Type: Scratch (RDN-B), Time: 03:39:31
{'AUC ROC': 0.844477, 'AUC PR': 0.657671, 'CLL': -0.458813, 'Precision': [0.705607, 0.5], 'Recall': 0.820652, 'F1': 0.758794, 'Learning time': 3638.913816690445, 'Inference time': 3.572}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.25605773556421824;  // std dev = 0.489, 3,443.000 (wgt'ed) examples reached here.  /* #neg=2,073 #pos=1,370 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.08228686613399513;  // std dev = 3.176, 58.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=13 */
%   | | | else return 0.2652285811172119;  // std dev = 5.222, 113.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=46 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.49814893509951125;  // std dev = 3.394, 50.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=32 */
%   | | | else return 0.274815601766179;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.5248156017661785;  // std dev = 2.582, 30.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=20 */
%   | | | else return 0.7956489350995123;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.042523935099512515;  // std dev = 0.388, 320.000 (wgt'ed) examples reached here.  /* #neg=261 #pos=59 */
%   | else return 0.055427846664137366;  // std dev = 0.398, 147.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=29 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.22194588431620896;  // std dev = 0.489, 3,443.000 (wgt'ed) examples reached here.  /* #neg=2,073 #pos=1,370 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.07197197001528602;  // std dev = 3.176, 58.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=13 */
%   | | | else return 0.22978300347574032;  // std dev = 5.222, 113.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=46 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.4370540520242955;  // std dev = 3.181, 45.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=29 */
%   | | | else return 0.21439510584254734;  // std dev = 1.853, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.4528130160682329;  // std dev = 2.708, 33.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=22 */
%   | | | else return 0.6694131893798132;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.05629579363244074;  // std dev = 0.403, 54.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
%   | else return 0.038794446546783434;  // std dev = 0.389, 413.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=77 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1874224608617087;  // std dev = 0.489, 3,443.000 (wgt'ed) examples reached here.  /* #neg=2,073 #pos=1,370 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.062452556517152084;  // std dev = 3.176, 58.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=13 */
%   | | | else return 0.19375297410040573;  // std dev = 5.222, 113.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=46 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.35633487133307706;  // std dev = 3.174, 45.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=29 */
%   | | | else return 0.17611228744430005;  // std dev = 1.853, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.3670319790054772;  // std dev = 2.708, 33.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=22 */
%   | | | else return 0.5204603507259603;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.03202180097934548;  // std dev = 0.388, 320.000 (wgt'ed) examples reached here.  /* #neg=261 #pos=59 */
%   | else return 0.0434109275724571;  // std dev = 0.398, 147.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=29 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.1548306854979665;  // std dev = 0.489, 3,439.000 (wgt'ed) examples reached here.  /* #neg=2,074 #pos=1,365 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.047004592268100005;  // std dev = 3.574, 62.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=18 */
%   | | | else return 0.15943901015489118;  // std dev = 5.222, 113.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=46 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordauthor(I, G) )
%   | | | then return 0.6228897882874775;  // std dev = 0.005, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.22038790015349033;  // std dev = 3.721, 58.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=33 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.28782571737923585;  // std dev = 2.560, 30.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=20 */
%   | | | else return 0.3912519545392304;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.04456216516000731;  // std dev = 0.403, 54.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
%   | else return 0.029153968619196054;  // std dev = 0.389, 413.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=77 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.12534181980628964;  // std dev = 0.489, 3,443.000 (wgt'ed) examples reached here.  /* #neg=2,073 #pos=1,370 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.030798859442833518;  // std dev = 3.176, 58.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=13 */
%   | | | else return 0.12855595731101108;  // std dev = 5.222, 113.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=46 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.21561084020357218;  // std dev = 2.930, 40.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=26 */
%   | | | else return 0.10895566853662349;  // std dev = 2.163, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.22866443142687504;  // std dev = 2.697, 33.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=22 */
%   | | | else return 0.2971751345678791;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.0236626144815995;  // std dev = 0.388, 320.000 (wgt'ed) examples reached here.  /* #neg=261 #pos=59 */
%   | else return 0.03357877484712271;  // std dev = 0.398, 147.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=29 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.10009930867911528;  // std dev = 0.489, 3,439.000 (wgt'ed) examples reached here.  /* #neg=2,074 #pos=1,365 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.013890148087521873;  // std dev = 3.574, 62.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=18 */
%   | | | else return 0.10200341549830616;  // std dev = 5.222, 113.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=46 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.4158359962889693;  // std dev = 0.008, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.12119137820795342;  // std dev = 3.717, 58.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=33 */
%   | | | else return 0.1908750504924249;  // std dev = 2.731, 46.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=35 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then return 0.008777462661505529;  // std dev = 0.379, 46.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=8 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.017877736715810943;  // std dev = 0.386, 286.000 (wgt'ed) examples reached here.  /* #neg=234 #pos=52 */
%   | | else return 0.039099018627718064;  // std dev = 0.406, 135.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.07880916021479117;  // std dev = 0.489, 3,439.000 (wgt'ed) examples reached here.  /* #neg=2,074 #pos=1,365 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.011103265256850924;  // std dev = 3.574, 62.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=18 */
%   | | | else return 0.07995901357794806;  // std dev = 5.222, 113.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=46 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.31958083074125315;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.08309549275154213;  // std dev = 3.611, 56.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=32 */
%   | | | else return 0.154099442560829;  // std dev = 2.863, 48.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=36 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.08493942453717267;  // std dev = 0.437, 39.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=10 */
%   | | else return -0.10520661221030371;  // std dev = 0.250, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | else return 0.018284038900397537;  // std dev = 0.389, 413.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=77 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.061645804779405594;  // std dev = 0.489, 3,443.000 (wgt'ed) examples reached here.  /* #neg=2,073 #pos=1,370 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.004018466610649824;  // std dev = 3.176, 58.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=13 */
%   | | | else return 0.06212195322145736;  // std dev = 5.222, 113.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=46 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.10590477120998198;  // std dev = 3.275, 50.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=32 */
%   | | | else return -0.06047181884907941;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.10102157216007693;  // std dev = 2.546, 30.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=20 */
%   | | | else return 0.16562585191549942;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.027178622704612885;  // std dev = 0.401, 54.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
%   | else return 0.015711177242314276;  // std dev = 0.389, 413.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=77 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.04782239094538198;  // std dev = 0.489, 3,439.000 (wgt'ed) examples reached here.  /* #neg=2,074 #pos=1,365 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.003770246601247827;  // std dev = 3.574, 62.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=18 */
%   | | | else return 0.04795284591929039;  // std dev = 5.222, 113.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=46 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.23484372166215112;  // std dev = 0.006, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.043831195680736956;  // std dev = 3.697, 58.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=33 */
%   | | | else return 0.09777693497219797;  // std dev = 2.731, 46.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=35 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then return 0.001871131156915209;  // std dev = 0.378, 46.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=8 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.010069670887557555;  // std dev = 0.385, 286.000 (wgt'ed) examples reached here.  /* #neg=234 #pos=52 */
%   | | else return 0.028533489632169846;  // std dev = 0.405, 135.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.03699391183635705;  // std dev = 0.489, 3,443.000 (wgt'ed) examples reached here.  /* #neg=2,073 #pos=1,370 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.01182408372600247;  // std dev = 3.176, 58.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=13 */
%   | | | else return 0.03684335217333544;  // std dev = 5.222, 113.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=46 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.05965040548314793;  // std dev = 2.866, 40.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=26 */
%   | | | else return -0.009740434526873577;  // std dev = 2.174, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.06344392535902567;  // std dev = 2.690, 33.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=22 */
%   | | | else return 0.12257622043921002;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.0016045061585457931;  // std dev = 0.378, 46.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=8 */
%   | else return 0.013658168175955724;  // std dev = 0.392, 421.000 (wgt'ed) examples reached here.  /* #neg=341 #pos=80 */


Results
   AUC ROC   = 0.605068
   AUC PR    = 0.439071
   CLL	      = -0.626731
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total learning time: 9882.3791410923 seconds
Total inference time: 3.293 seconds
AUC ROC: 0.605068


Results scoring model
   AUC ROC   = 0.566073
   AUC PR    = 0.445266
   CLL	      = -0.648017
   Precision = 0.743902 at threshold = 0.5
   Recall    = 0.038389
   F1        = 0.07301


Total scoring time: 39.15 seconds
Parameter learned model CLL: -0.648017


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [3.176, 45, 13], 'true,true,false,false': [5.222, 67, 46], 'true,false,true,true': [3.394, 18, 32], 'true,false,true,false': [1.708, 7, 5], 'true,false,false,true': [2.582, 10, 20], 'true,false,false,false': [0.968, 1, 15], 'false,true': [0.388, 261, 59], 'false,false': [0.398, 118, 29]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false': 'haswordvenue(B, M), haswordauthor(N, M)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [3.176, 45, 13], 'true,true,false,false': [5.222, 67, 46], 'true,false,true,true': [3.181, 16, 29], 'true,false,true,false': [1.853, 8, 6], 'true,false,false,true': [2.708, 11, 22], 'true,false,false,false': [0.968, 1, 15], 'false,true': [0.403, 43, 11], 'false,false': [0.389, 336, 77]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [3.176, 45, 13], 'true,true,false,false': [5.222, 67, 46], 'true,false,true,true': [3.174, 16, 29], 'true,false,true,false': [1.853, 8, 6], 'true,false,false,true': [2.708, 11, 22], 'true,false,false,false': [0.968, 1, 15], 'false,true': [0.388, 261, 59], 'false,false': [0.398, 118, 29]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'haswordauthor(I, G)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [3.574, 44, 18], 'true,true,false,false': [5.222, 67, 46], 'true,false,true,true': [0.005, 0, 4], 'true,false,true,false': [3.721, 25, 33], 'true,false,false,true': [2.56, 10, 20], 'true,false,false,false': [0.968, 1, 15], 'false,true': [0.403, 43, 11], 'false,false': [0.389, 336, 77]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'title(I, H), venue(I, A)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [3.176, 45, 13], 'true,true,false,false': [5.222, 67, 46], 'true,false,true,true': [2.93, 14, 26], 'true,false,true,false': [2.163, 10, 9], 'true,false,false,true': [2.697, 11, 22], 'true,false,false,false': [0.968, 1, 15], 'false,true': [0.388, 261, 59], 'false,false': [0.398, 118, 29]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [3.574, 44, 18], 'true,true,false,false': [5.222, 67, 46], 'true,false,true': [0.008, 0, 4], 'true,false,false,true': [3.717, 25, 33], 'true,false,false,false': [2.731, 11, 35], 'false,true': [0.379, 38, 8], 'false,false,true': [0.386, 234, 52], 'false,false,false': [0.406, 107, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false,true': 'haswordtitle(M, K)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [3.574, 44, 18], 'true,true,false,false': [5.222, 67, 46], 'true,false,true': [0.007, 0, 4], 'true,false,false,true': [3.611, 24, 32], 'true,false,false,false': [2.863, 12, 36], 'false,true,true': [0.437, 29, 10], 'false,true,false': [0.25, 14, 1], 'false,false': [0.389, 336, 77]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(B, M), haswordauthor(N, M)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [3.176, 45, 13], 'true,true,false,false': [5.222, 67, 46], 'true,false,true,true': [3.275, 18, 32], 'true,false,true,false': [1.708, 7, 5], 'true,false,false,true': [2.546, 10, 20], 'true,false,false,false': [0.968, 1, 15], 'false,true': [0.401, 43, 11], 'false,false': [0.389, 336, 77]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [3.574, 44, 18], 'true,true,false,false': [5.222, 67, 46], 'true,false,true': [0.006, 0, 4], 'true,false,false,true': [3.697, 25, 33], 'true,false,false,false': [2.731, 11, 35], 'false,true': [0.378, 38, 8], 'false,false,true': [0.385, 234, 52], 'false,false,false': [0.405, 107, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'title(I, H), venue(I, A)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(A, L), haswordauthor(M, L)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [3.176, 45, 13], 'true,true,false,false': [5.222, 67, 46], 'true,false,true,true': [2.866, 14, 26], 'true,false,true,false': [2.174, 10, 9], 'true,false,false,true': [2.69, 11, 22], 'true,false,false,false': [0.968, 1, 15], 'false,true': [0.378, 38, 8], 'false,false': [0.392, 341, 80]}]]
[{'': [0.24064481750315464, 0.15292839161993585], 'true': [0.23906025237274584, 0.2222222222222213], 'true,true': [0.23957738697742786, 0.22598406347252165], 'true,true,false': [0.1739001189060637, 0.24136580781580452], 'true,false': [0.2406347554630611, 0.18194706994329102], 'true,false,true': [0.23040000000000166, 0.24305555555555536], 'true,false,false': [0.22222222222222232, 0.05859374999999978], 'false': [0.15038085937500092, 0.15835994261650346]}, {'': [0.23974555090608363, 0.15291990879904038], 'true': [0.23893748837054202, 0.21646690291410225], 'true,true': [0.23957738697747763, 0.22406469723916697], 'true,true,false': [0.1739001189060638, 0.24136580781580508], 'true,false': [0.23868600976381843, 0.17910965791538483], 'true,false,true': [0.22490290088281273, 0.245175888820435], 'true,false,false': [0.22222222222222257, 0.05859375], 'false': [0.16227137158777383, 0.1516617817211419]}, {'': [0.23885011267474257, 0.15291216979868658], 'true': [0.23882789690450515, 0.20987708638380353], 'true,true': [0.2395773869774345, 0.22234679151501852], 'true,true,false': [0.17390011890606488, 0.24136580781580527], 'true,false': [0.234832971154612, 0.1739692184026234], 'true,false,true': [0.2238975515544574, 0.24520951570664182], 'true,false,false': [0.22222222222222243, 0.05859375000000022], 'false': [0.15035469021671882, 0.15839059026550364]}, {'': [0.23823133627023024, 0.15290495267219653], 'true': [0.23874086799560598, 0.20571258383035268], 'true,true': [0.23903699951357235, 0.23174070392796697], 'true,true,false': [0.20603537981269568, 0.2413658078158048], 'true,false': [0.23313738559801478, 0.16530564293974667], 'true,false,true': [7.264408129314948e-06, 0.23876321080000643], 'true,false,false': [0.21849796153958595, 0.05859375000000003], 'false': [0.16233562438178695, 0.15164443422614868]}, {'': [0.23780817528716977, 0.1528985027798607], 'true': [0.23865134510270433, 0.2019029889925827], 'true,true': [0.23950423453936254, 0.22062466599085248], 'true,true,false': [0.17390011890606422, 0.24136580781580366], 'true,false': [0.22730281344465375, 0.16866015960649128], 'true,false,true': [0.21462524038548839, 0.24628035575573068], 'true,false,false': [0.22049304943246226, 0.058593750000000014], 'false': [0.1503304446975828, 0.15842145497866483]}, {'': [0.23760325656026413, 0.15289273934235395], 'true': [0.23859240830477862, 0.2006366993858563], 'true,true': [0.23895624316958908, 0.23062487965613837], 'true,true,false': [0.20603537981269449, 0.24136580781580413], 'true,false': [1.7211846345316362e-05, 0.20577496048279492], 'true,false,false': [0.23820770842290717, 0.16217344547127027], 'false': [0.14371037324844083, 0.15387111990969568], 'false,false': [0.14873969413951804, 0.16443620683755503]}, {'': [0.23745311844126107, 0.15286331130147382], 'true': [0.23853275179888306, 0.19929501837200084], 'true,true': [0.2389441846323425, 0.22993335398359854], 'true,true,false': [0.2060353798126955, 0.24136580781580466], 'true,false': [1.3739612017615865e-05, 0.20542266406561896], 'true,false,false': [0.2328465350191334, 0.17071346132090526], 'false': [0.1625133779203145, 0.15157941997417063], 'false,true': [0.1909621952242187, 0.06243413633127223]}, {'': [0.2373659969772391, 0.15263693078412097], 'true': [0.23849385667774414, 0.19848193486465437], 'true,true': [0.2394162201454699, 0.21946320981134826], 'true,true,false': [0.17390011890606477, 0.24136580781580463], 'true,false': [0.22435074830793028, 0.16219213115843925], 'true,false,true': [0.21450394881630397, 0.2430555555555555], 'true,false,false': [0.21599287486170543, 0.05859375000000002], 'false': [0.16061673343973404, 0.15157836092247393]}, {'': [0.23728993344312815, 0.15262933570594783], 'true': [0.23846462948206124, 0.19727635360803988], 'true,true': [0.2389067789310677, 0.22946075821369136], 'true,true,false': [0.2060353798126945, 0.241365807815803], 'true,false': [9.351064105989071e-06, 0.20382874004348878], 'true,false,false': [0.23561907541559207, 0.16212230945776224], 'false': [0.14306185931740598, 0.15365507669098852], 'false,false': [0.14851735904568883, 0.1643078328309064]}, {'': [0.23725052264796057, 0.1526045173054256], 'true': [0.23844261228138225, 0.19690166541768567], 'true,true': [0.23939444516767408, 0.21901358227621642], 'true,true,false': [0.17390011890606444, 0.24136580781580333], 'true,false': [0.22033000320609658, 0.16756363661526544], 'true,false,true': [0.2053236241429409, 0.24865791328129944], 'true,false,false': [0.21925576484819223, 0.05859375], 'false': [0.1430611687163818, 0.15363294718521794]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordauthor(I, G).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.25605773556421824;  // std dev = 0.489, 3,443.000 (wgt'ed) examples reached here.  /* #neg=2,073 #pos=1,370 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.08228686613399513;  // std dev = 3.176, 58.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=13 */
%   | | | else return 0.2652285811172119;  // std dev = 5.222, 113.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=46 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.49814893509951125;  // std dev = 3.394, 50.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=32 */
%   | | | else return 0.274815601766179;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.5248156017661785;  // std dev = 2.582, 30.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=20 */
%   | | | else return 0.7956489350995123;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.042523935099512515;  // std dev = 0.388, 320.000 (wgt'ed) examples reached here.  /* #neg=261 #pos=59 */
%   | else return 0.055427846664137366;  // std dev = 0.398, 147.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=29 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.22194588431620896;  // std dev = 0.489, 3,443.000 (wgt'ed) examples reached here.  /* #neg=2,073 #pos=1,370 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.07197197001528602;  // std dev = 3.176, 58.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=13 */
%   | | | else return 0.22978300347574032;  // std dev = 5.222, 113.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=46 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.4370540520242955;  // std dev = 3.181, 45.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=29 */
%   | | | else return 0.21439510584254734;  // std dev = 1.853, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.4528130160682329;  // std dev = 2.708, 33.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=22 */
%   | | | else return 0.6694131893798132;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.03726827327251553;  // std dev = 0.388, 320.000 (wgt'ed) examples reached here.  /* #neg=261 #pos=59 */
%   | else return 0.04854579478073746;  // std dev = 0.398, 147.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=29 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1874224608617087;  // std dev = 0.489, 3,443.000 (wgt'ed) examples reached here.  /* #neg=2,073 #pos=1,370 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.062452556517152084;  // std dev = 3.176, 58.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=13 */
%   | | | else return 0.19375297410040573;  // std dev = 5.222, 113.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=46 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.35633487133307706;  // std dev = 3.174, 45.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=29 */
%   | | | else return 0.17611228744430005;  // std dev = 1.853, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.3670319790054772;  // std dev = 2.708, 33.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=22 */
%   | | | else return 0.5204603507259603;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return 0.021249366851755793;  // std dev = 0.379, 46.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=8 */
%   | else return 0.037172285071702754;  // std dev = 0.392, 421.000 (wgt'ed) examples reached here.  /* #neg=341 #pos=80 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.1548306854979665;  // std dev = 0.489, 3,439.000 (wgt'ed) examples reached here.  /* #neg=2,074 #pos=1,365 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.047004592268100005;  // std dev = 3.574, 62.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=18 */
%   | | | else return 0.15943901015489118;  // std dev = 5.222, 113.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=46 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.6228897882874775;  // std dev = 0.005, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.22038790015349033;  // std dev = 3.721, 58.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=33 */
%   | | | else return 0.32380006073923445;  // std dev = 2.758, 46.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=35 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then return 0.02790340124889326;  // std dev = 0.388, 320.000 (wgt'ed) examples reached here.  /* #neg=261 #pos=59 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.051918244785337735;  // std dev = 0.408, 137.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=29 */
%   | | else return -0.15949037125821322;  // std dev = 0.003, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.12534181980628964;  // std dev = 0.489, 3,443.000 (wgt'ed) examples reached here.  /* #neg=2,073 #pos=1,370 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.030798859442833518;  // std dev = 3.176, 58.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=13 */
%   | | | else return 0.12855595731101108;  // std dev = 5.222, 113.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=46 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.21003329264416098;  // std dev = 2.926, 40.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=26 */
%   | | | else return 0.1066411169091244;  // std dev = 2.166, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.22866443142687504;  // std dev = 2.697, 33.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=22 */
%   | | | else return 0.31285235234388337;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.04331907743216069;  // std dev = 0.403, 54.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
%   | else return 0.024572709723872772;  // std dev = 0.389, 413.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=77 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.10009930867911528;  // std dev = 0.489, 3,439.000 (wgt'ed) examples reached here.  /* #neg=2,074 #pos=1,365 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.013890148087521873;  // std dev = 3.574, 62.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=18 */
%   | | | else return 0.10200341549830616;  // std dev = 5.222, 113.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=46 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.15394493473715956;  // std dev = 3.129, 45.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=29 */
%   | | | else return 0.06845862168194101;  // std dev = 1.859, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.1718865533385939;  // std dev = 2.698, 33.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=22 */
%   | | | else return 0.24280218660190603;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.03740049910310211;  // std dev = 0.403, 54.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
%   | else return 0.02121175689453155;  // std dev = 0.389, 413.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=77 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.07880916021479117;  // std dev = 0.489, 3,439.000 (wgt'ed) examples reached here.  /* #neg=2,074 #pos=1,365 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.011103265256850924;  // std dev = 3.574, 62.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=18 */
%   | | | else return 0.07995901357794806;  // std dev = 5.222, 113.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=46 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.3789349432973609;  // std dev = 0.013, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.08584481899129734;  // std dev = 3.714, 58.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=33 */
%   | | | else return 0.1480794938526826;  // std dev = 2.729, 46.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=35 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.08386516545312982;  // std dev = 0.437, 39.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=10 */
%   | | else return -0.10230568552372525;  // std dev = 0.249, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | else return 0.01826569273263194;  // std dev = 0.389, 413.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=77 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.061645804779405594;  // std dev = 0.489, 3,443.000 (wgt'ed) examples reached here.  /* #neg=2,073 #pos=1,370 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.004018466610649824;  // std dev = 3.176, 58.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=13 */
%   | | | else return 0.06212195322145736;  // std dev = 5.222, 113.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=46 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.08470806598176764;  // std dev = 2.903, 40.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=26 */
%   | | | else return 0.035346734010760626;  // std dev = 2.171, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.10588468812424723;  // std dev = 2.693, 33.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=22 */
%   | | | else return 0.16666067320562394;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.01435890224017262;  // std dev = 0.387, 320.000 (wgt'ed) examples reached here.  /* #neg=261 #pos=59 */
%   | else return 0.0228014285680717;  // std dev = 0.397, 147.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=29 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.04782239094538198;  // std dev = 0.489, 3,439.000 (wgt'ed) examples reached here.  /* #neg=2,074 #pos=1,365 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.003770246601247827;  // std dev = 3.574, 62.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=18 */
%   | | | else return 0.04795284591929039;  // std dev = 5.222, 113.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=46 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.06432356403027725;  // std dev = 2.905, 40.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=26 */
%   | | | else return 0.026799483349413854;  // std dev = 2.171, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.08007134066306297;  // std dev = 2.693, 33.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=22 */
%   | | | else return 0.1385544157718261;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.012323474555818352;  // std dev = 0.387, 320.000 (wgt'ed) examples reached here.  /* #neg=261 #pos=59 */
%   | else return 0.01949456653403611;  // std dev = 0.397, 147.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=29 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.03699391183635705;  // std dev = 0.489, 3,443.000 (wgt'ed) examples reached here.  /* #neg=2,073 #pos=1,370 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.01182408372600247;  // std dev = 3.176, 58.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=13 */
%   | | | else return 0.03684335217333544;  // std dev = 5.222, 113.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=46 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordvenue(A, I) )
%   | | | then return 0.023898839806716803;  // std dev = 2.595, 29.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=15 */
%   | | | else return 0.05512772519886597;  // std dev = 2.533, 30.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=20 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.06085198273498847;  // std dev = 2.694, 33.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=22 */
%   | | | else return 0.11721616760398534;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 6.535934303330277E-4;  // std dev = 0.378, 46.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=8 */
%   | else return 0.013762282767941218;  // std dev = 0.392, 421.000 (wgt'ed) examples reached here.  /* #neg=341 #pos=80 */


Results
   AUC ROC   = 0.605336
   AUC PR    = 0.439139
   CLL	      = -0.626845
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total learning time: 10146.103813886642 seconds
Total inference time: 3.279 seconds
AUC ROC: 0.605336


Results scoring model
   AUC ROC   = 0.566195
   AUC PR    = 0.445323
   CLL	      = -0.648055
   Precision = 0.702128 at threshold = 0.5
   Recall    = 0.041536
   F1        = 0.078431


Total scoring time: 38.092 seconds
Refined model CLL: -0.648055


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.605068
   AUC PR    = 0.439071
   CLL	      = -0.626731
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total learning time: 20105.724954978945 seconds
Total inference time: 3.293 seconds
AUC ROC: 0.605068
Total revision time: 20105.724954978945
Best scored revision CLL: -0.648017


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 09:14:50
{'AUC ROC': 0.605068, 'AUC PR': 0.439071, 'CLL': -0.626731, 'Precision': [0.578947, 0.5], 'Recall': 0.059783, 'F1': 0.108374, 'Learning time': 20105.724954978945, 'Inference time': 3.293, 'parameter_0.6': {'AUC ROC': 0.605068, 'AUC PR': 0.439071, 'CLL': -0.626731, 'Precision': [0.578947, 0.5], 'Recall': 0.059783, 'F1': 0.108374, 'Learning time': 9882.3791410923, 'Inference time': 3.293}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.25605773556421824;  // std dev = 0.489, 3,443.000 (wgt'ed) examples reached here.  /* #neg=2,073 #pos=1,370 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.08228686613399513;  // std dev = 3.176, 58.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=13 */
%   | | | else return 0.2652285811172119;  // std dev = 5.222, 113.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=46 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.49814893509951125;  // std dev = 3.394, 50.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=32 */
%   | | | else return 0.274815601766179;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.5248156017661785;  // std dev = 2.582, 30.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=20 */
%   | | | else return 0.7956489350995123;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.042523935099512515;  // std dev = 0.388, 320.000 (wgt'ed) examples reached here.  /* #neg=261 #pos=59 */
%   | else return 0.055427846664137366;  // std dev = 0.398, 147.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=29 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.22194588431620896;  // std dev = 0.489, 3,443.000 (wgt'ed) examples reached here.  /* #neg=2,073 #pos=1,370 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.07197197001528602;  // std dev = 3.176, 58.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=13 */
%   | | | else return 0.22978300347574032;  // std dev = 5.222, 113.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=46 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.4370540520242955;  // std dev = 3.181, 45.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=29 */
%   | | | else return 0.21439510584254734;  // std dev = 1.853, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.4528130160682329;  // std dev = 2.708, 33.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=22 */
%   | | | else return 0.6694131893798132;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.05629579363244074;  // std dev = 0.403, 54.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
%   | else return 0.038794446546783434;  // std dev = 0.389, 413.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=77 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1874224608617087;  // std dev = 0.489, 3,443.000 (wgt'ed) examples reached here.  /* #neg=2,073 #pos=1,370 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.062452556517152084;  // std dev = 3.176, 58.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=13 */
%   | | | else return 0.19375297410040573;  // std dev = 5.222, 113.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=46 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.35633487133307706;  // std dev = 3.174, 45.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=29 */
%   | | | else return 0.17611228744430005;  // std dev = 1.853, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.3670319790054772;  // std dev = 2.708, 33.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=22 */
%   | | | else return 0.5204603507259603;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.03202180097934548;  // std dev = 0.388, 320.000 (wgt'ed) examples reached here.  /* #neg=261 #pos=59 */
%   | else return 0.0434109275724571;  // std dev = 0.398, 147.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=29 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.1548306854979665;  // std dev = 0.489, 3,439.000 (wgt'ed) examples reached here.  /* #neg=2,074 #pos=1,365 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.047004592268100005;  // std dev = 3.574, 62.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=18 */
%   | | | else return 0.15943901015489118;  // std dev = 5.222, 113.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=46 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.6228897882874775;  // std dev = 0.005, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.22038790015349033;  // std dev = 3.721, 58.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=33 */
%   | | | else return 0.32380006073923445;  // std dev = 2.758, 46.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=35 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.09728733724163667;  // std dev = 0.437, 39.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=10 */
%   | | else return -0.09252328225222914;  // std dev = 0.250, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | else return 0.029153968619196054;  // std dev = 0.389, 413.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=77 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.12534181980628964;  // std dev = 0.489, 3,443.000 (wgt'ed) examples reached here.  /* #neg=2,073 #pos=1,370 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.030798859442833518;  // std dev = 3.176, 58.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=13 */
%   | | | else return 0.12855595731101108;  // std dev = 5.222, 113.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=46 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.4697774990079566;  // std dev = 0.006, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.1609507168226101;  // std dev = 3.622, 56.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=32 */
%   | | | else return 0.2518068054902255;  // std dev = 2.872, 48.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=36 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then return 0.023599533840324705;  // std dev = 0.387, 320.000 (wgt'ed) examples reached here.  /* #neg=261 #pos=59 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.04777298271865501;  // std dev = 0.409, 137.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=29 */
%   | | else return -0.16064155491258444;  // std dev = 0.017, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.10009930867911528;  // std dev = 0.489, 3,439.000 (wgt'ed) examples reached here.  /* #neg=2,074 #pos=1,365 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.013890148087521873;  // std dev = 3.574, 62.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=18 */
%   | | | else return 0.10200341549830616;  // std dev = 5.222, 113.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=46 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.3564512685771347;  // std dev = 0.005, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.11783214746146904;  // std dev = 3.709, 58.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=33 */
%   | | | else return 0.19938395638220233;  // std dev = 2.749, 46.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=35 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then return 0.00902683994567749;  // std dev = 0.378, 46.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=8 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.017829826764719253;  // std dev = 0.385, 286.000 (wgt'ed) examples reached here.  /* #neg=234 #pos=52 */
%   | | else return 0.03883283187418428;  // std dev = 0.405, 135.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.07880916021479117;  // std dev = 0.489, 3,439.000 (wgt'ed) examples reached here.  /* #neg=2,074 #pos=1,365 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.011103265256850924;  // std dev = 3.574, 62.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=18 */
%   | | | else return 0.07995901357794806;  // std dev = 5.222, 113.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=46 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.11941809809693678;  // std dev = 2.890, 40.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=26 */
%   | | | else return 0.03534492254494817;  // std dev = 2.173, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.1337008929186807;  // std dev = 2.691, 33.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=22 */
%   | | | else return 0.21427543587210837;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.03239608792988508;  // std dev = 0.400, 54.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
%   | else return 0.018167521544981448;  // std dev = 0.389, 413.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=77 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.061645804779405594;  // std dev = 0.489, 3,443.000 (wgt'ed) examples reached here.  /* #neg=2,073 #pos=1,370 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.004018466610649824;  // std dev = 3.176, 58.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=13 */
%   | | | else return 0.06212195322145736;  // std dev = 5.222, 113.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=46 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.09043328493806127;  // std dev = 2.891, 40.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=26 */
%   | | | else return 0.026764361712962762;  // std dev = 2.173, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.1007628843663905;  // std dev = 2.691, 33.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=22 */
%   | | | else return 0.17349048917792007;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.015245792956581433;  // std dev = 0.387, 320.000 (wgt'ed) examples reached here.  /* #neg=261 #pos=59 */
%   | else return 0.020864220572127872;  // std dev = 0.397, 147.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=29 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.04782239094538198;  // std dev = 0.489, 3,439.000 (wgt'ed) examples reached here.  /* #neg=2,074 #pos=1,365 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.003770246601247827;  // std dev = 3.574, 62.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=18 */
%   | | | else return 0.04795284591929039;  // std dev = 5.222, 113.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=46 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.0660680137472503;  // std dev = 3.100, 45.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=29 */
%   | | | else return 0.011484441273555144;  // std dev = 1.864, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.07629664541726222;  // std dev = 2.691, 33.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=22 */
%   | | | else return 0.14365184019358512;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.02538224927409108;  // std dev = 0.400, 54.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
%   | else return 0.013166480500801395;  // std dev = 0.389, 413.000 (wgt'ed) examples reached here.  /* #neg=336 #pos=77 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.03699391183635705;  // std dev = 0.489, 3,443.000 (wgt'ed) examples reached here.  /* #neg=2,073 #pos=1,370 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.01182408372600247;  // std dev = 3.176, 58.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=13 */
%   | | | else return 0.03684335217333544;  // std dev = 5.222, 113.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=46 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.07323408421545252;  // std dev = 3.275, 50.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=32 */
%   | | | else return -0.09415531455158287;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.05902464712719803;  // std dev = 2.539, 30.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=20 */
%   | | | else return 0.12113206231757573;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.010968231537520568;  // std dev = 0.387, 320.000 (wgt'ed) examples reached here.  /* #neg=261 #pos=59 */
%   | else return 0.01574326452496082;  // std dev = 0.397, 147.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=29 */


Results
   AUC ROC   = 0.605336
   AUC PR    = 0.439139
   CLL	      = -0.626803
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total learning time: 10160.849661827087 seconds
Total inference time: 3.344 seconds
AUC ROC: 0.605336


Dataset: 3_imdb_cora, Fold: 1, Type: Scratch (RDN-B), Time: 12:04:16
{'AUC ROC': 0.605336, 'AUC PR': 0.439139, 'CLL': -0.626803, 'Precision': [0.578947, 0.5], 'Recall': 0.059783, 'F1': 0.108374, 'Learning time': 10160.849661827087, 'Inference time': 3.344}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.25496741407096063;  // std dev = 0.489, 4,589.000 (wgt'ed) examples reached here.  /* #neg=2,768 #pos=1,821 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.10506251534642576;  // std dev = 3.881, 81.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
%   | | | else return 0.287636114586693;  // std dev = 6.183, 156.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=67 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.5194392576801578;  // std dev = 3.727, 62.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=41 */
%   | | | else return 0.24276431971489695;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.5410757643678041;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=28 */
%   | | | else return 0.762910839861417;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.059105872898555435;  // std dev = 0.401, 418.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=84 */
%   | else return 0.02400259363609683;  // std dev = 0.372, 205.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=34 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.22107077518568793;  // std dev = 0.489, 4,585.000 (wgt'ed) examples reached here.  /* #neg=2,767 #pos=1,818 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.09478335987541195;  // std dev = 4.096, 85.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=23 */
%   | | | else return 0.2488984498369615;  // std dev = 6.183, 156.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=67 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.7756935561178709;  // std dev = 0.041, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.3763215631209259;  // std dev = 4.096, 70.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=41 */
%   | | | else return 0.5153232326347565;  // std dev = 3.321, 60.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=45 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( title(M, L), venue(M, A) )
%   | | then return 0.07382218335211252;  // std dev = 0.416, 278.000 (wgt'ed) examples reached here.  /* #neg=216 #pos=62 */
%   | | else return 0.007943457761156968;  // std dev = 0.364, 140.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=22 */
%   | else return 0.021055581231398644;  // std dev = 0.372, 205.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=34 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1870326667439847;  // std dev = 0.489, 4,589.000 (wgt'ed) examples reached here.  /* #neg=2,768 #pos=1,821 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.06055797575939304;  // std dev = 3.881, 81.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
%   | | | else return 0.2091092658269433;  // std dev = 6.183, 156.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=67 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.6514191321360369;  // std dev = 0.132, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.29298945231415613;  // std dev = 4.004, 69.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=41 */
%   | | | else return 0.4251520884378569;  // std dev = 3.375, 62.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=46 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordauthor(M, K) )
%   | | then return 0.14676552708972854;  // std dev = 0.458, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | | else return 0.03604739669293831;  // std dev = 0.389, 386.000 (wgt'ed) examples reached here.  /* #neg=314 #pos=72 */
%   | else return 0.01223007097905629;  // std dev = 0.375, 194.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=33 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.1544590932817927;  // std dev = 0.489, 4,585.000 (wgt'ed) examples reached here.  /* #neg=2,767 #pos=1,818 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.050167558856269195;  // std dev = 4.096, 85.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=23 */
%   | | | else return 0.1710977050555898;  // std dev = 6.183, 156.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=67 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.4956601579201078;  // std dev = 0.144, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.22846493807579307;  // std dev = 3.998, 69.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=41 */
%   | | | else return 0.3277650895786482;  // std dev = 3.369, 62.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=46 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordauthor(M, K) )
%   | | then return 0.12650189517796623;  // std dev = 0.457, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | | else return 0.0313815962754345;  // std dev = 0.389, 386.000 (wgt'ed) examples reached here.  /* #neg=314 #pos=72 */
%   | else return 0.010597391697988024;  // std dev = 0.375, 194.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=33 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1252174463894109;  // std dev = 0.489, 4,589.000 (wgt'ed) examples reached here.  /* #neg=2,768 #pos=1,821 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.025741596470677988;  // std dev = 3.881, 81.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
%   | | | else return 0.13698417917627823;  // std dev = 6.183, 156.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=67 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.41464100501954476;  // std dev = 0.081, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.15456717218773666;  // std dev = 4.030, 70.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=41 */
%   | | | else return 0.2651150901265211;  // std dev = 3.268, 60.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=45 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( title(M, L), venue(M, A) )
%   | | then return 0.05566949342154072;  // std dev = 0.415, 278.000 (wgt'ed) examples reached here.  /* #neg=216 #pos=62 */
%   | | else return -0.0030183106802525515;  // std dev = 0.364, 140.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=22 */
%   | else return 0.009040006267234932;  // std dev = 0.372, 205.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=34 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.09987353070208357;  // std dev = 0.489, 4,585.000 (wgt'ed) examples reached here.  /* #neg=2,767 #pos=1,818 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.06154707480441375;  // std dev = 7.033, 219.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=78 */
%   | | | else return 0.2238208887323627;  // std dev = 2.335, 22.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.15994388809039783;  // std dev = 3.452, 58.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=38 */
%   | | | else return 0.018971487272092493;  // std dev = 1.950, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.16429729513866076;  // std dev = 3.043, 43.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=29 */
%   | | | else return 0.27535620171532516;  // std dev = 1.343, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | then return 0.032883018404043146;  // std dev = 0.397, 429.000 (wgt'ed) examples reached here.  /* #neg=344 #pos=85 */
%   | else return 0.0021459895546331307;  // std dev = 0.375, 194.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=33 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.07862925495847646;  // std dev = 0.489, 4,589.000 (wgt'ed) examples reached here.  /* #neg=2,768 #pos=1,821 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.0033489032358480857;  // std dev = 3.881, 81.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
%   | | | else return 0.08905206726461586;  // std dev = 6.169, 156.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=67 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordauthor(I, G) )
%   | | | then return 0.3433450385621763;  // std dev = 0.045, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.08566970726726732;  // std dev = 4.025, 71.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=42 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.12419762543587579;  // std dev = 2.944, 41.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=28 */
%   | | | else return 0.21399868997807514;  // std dev = 1.342, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.02830367442653825;  // std dev = 0.397, 429.000 (wgt'ed) examples reached here.  /* #neg=344 #pos=85 */
%   | else return 0.0018459348880542526;  // std dev = 0.375, 194.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=33 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.06160160018665735;  // std dev = 0.489, 4,585.000 (wgt'ed) examples reached here.  /* #neg=2,767 #pos=1,818 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.008768384411966527;  // std dev = 4.096, 85.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=23 */
%   | | | else return 0.06879715991620312;  // std dev = 6.169, 156.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=67 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.2545679295789523;  // std dev = 0.183, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.05781787492195539;  // std dev = 3.943, 69.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=41 */
%   | | | else return 0.12243073757768673;  // std dev = 3.333, 62.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=46 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then return 0.015360604239852811;  // std dev = 0.391, 360.000 (wgt'ed) examples reached here.  /* #neg=291 #pos=69 */
%   | | else return 0.08992990272900743;  // std dev = 0.438, 58.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=15 */
%   | else return -1.0184357070027738E-4;  // std dev = 0.372, 205.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=34 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), venue(E, A) )
%   | | then return 0.5305391489972514;  // std dev = 0.412, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordtitle(F, C) )
%   | | | then return 0.2764719412451738;  // std dev = 1.611, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return 0.24578709600532028;  // std dev = 0.840, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(G, C) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.04661117406340485;  // std dev = 33.040, 4,573.000 (wgt'ed) examples reached here.  /* #neg=2,765 #pos=1,808 */
%   | | | else return 0.03176775636053331;  // std dev = 7.337, 236.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=88 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.04976692518318517;  // std dev = 4.035, 74.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=45 */
%   | | | else return 0.10036422906678787;  // std dev = 3.243, 60.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=45 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then return 0.021978049449335364;  // std dev = 0.399, 418.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=84 */
%   | else return -8.775156856815502E-5;  // std dev = 0.372, 205.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=34 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.03695496485485505;  // std dev = 0.489, 4,589.000 (wgt'ed) examples reached here.  /* #neg=2,768 #pos=1,821 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.011718490576424262;  // std dev = 6.901, 215.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=75 */
%   | | | else return 0.1279039048596811;  // std dev = 2.335, 22.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.054456673766851475;  // std dev = 3.432, 58.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=38 */
%   | | | else return -0.03528466406984288;  // std dev = 1.956, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.05863067639090574;  // std dev = 3.041, 43.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=29 */
%   | | | else return 0.12817046596971113;  // std dev = 1.342, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | then return 0.019823769125318826;  // std dev = 0.397, 429.000 (wgt'ed) examples reached here.  /* #neg=344 #pos=85 */
%   | else return -0.0035606932478489516;  // std dev = 0.375, 194.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=33 */


Results
   AUC ROC   = 0.605597
   AUC PR    = 0.441569
   CLL	      = -0.625092
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total learning time: 12044.656435966492 seconds
Total inference time: 3.378 seconds
AUC ROC: 0.605597


Results scoring model
   AUC ROC   = 0.568934
   AUC PR    = 0.450577
   CLL	      = -0.6476
   Precision = 0.736364 at threshold = 0.5
   Recall    = 0.038226
   F1        = 0.072678


Total scoring time: 50.908 seconds
Parameter learned model CLL: -0.6476


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [3.881, 61, 20], 'true,true,false,false': [6.183, 89, 67], 'true,false,true,true': [3.727, 21, 41], 'true,false,true,false': [1.754, 8, 5], 'true,false,false,true': [2.98, 13, 28], 'true,false,false,false': [1.345, 2, 19], 'false,true': [0.401, 334, 84], 'false,false': [0.372, 171, 34]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,true': 'title(M, L), venue(M, A)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [4.096, 62, 23], 'true,true,false,false': [6.183, 89, 67], 'true,false,true': [0.041, 0, 7], 'true,false,false,true': [4.096, 29, 41], 'true,false,false,false': [3.321, 15, 45], 'false,true,true': [0.416, 216, 62], 'false,true,false': [0.364, 118, 22], 'false,false': [0.372, 171, 34]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,true': 'haswordauthor(M, K)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [3.881, 61, 20], 'true,true,false,false': [6.183, 89, 67], 'true,false,true': [0.132, 0, 6], 'true,false,false,true': [4.004, 28, 41], 'true,false,false,false': [3.375, 16, 46], 'false,true,true': [0.458, 30, 13], 'false,true,false': [0.389, 314, 72], 'false,false': [0.375, 161, 33]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,true': 'haswordauthor(M, K)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [4.096, 62, 23], 'true,true,false,false': [6.183, 89, 67], 'true,false,true': [0.144, 0, 6], 'true,false,false,true': [3.998, 28, 41], 'true,false,false,false': [3.369, 16, 46], 'false,true,true': [0.457, 30, 13], 'false,true,false': [0.389, 314, 72], 'false,false': [0.375, 161, 33]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,true': 'title(M, L), venue(M, A)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [3.881, 61, 20], 'true,true,false,false': [6.183, 89, 67], 'true,false,true': [0.081, 0, 7], 'true,false,false,true': [4.03, 29, 41], 'true,false,false,false': [3.268, 15, 45], 'false,true,true': [0.415, 216, 62], 'false,true,false': [0.364, 118, 22], 'false,false': [0.372, 171, 34]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'true,false,true': 'haswordtitle(I, J), haswordauthor(K, J)', 'true,false,false': 'haswordvenue(A, L), haswordtitle(M, L)', 'false': 'haswordvenue(A, N), haswordtitle(P, N)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [7.033, 141, 78], 'true,true,false,false': [2.335, 10, 12], 'true,false,true,true': [3.452, 20, 38], 'true,false,true,false': [1.95, 8, 7], 'true,false,false,true': [3.043, 14, 29], 'true,false,false,false': [1.343, 2, 19], 'false,true': [0.397, 344, 85], 'false,false': [0.375, 161, 33]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'haswordauthor(I, G)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [3.881, 61, 20], 'true,true,false,false': [6.169, 89, 67], 'true,false,true,true': [0.045, 0, 4], 'true,false,true,false': [4.025, 29, 42], 'true,false,false,true': [2.944, 13, 28], 'true,false,false,false': [1.342, 2, 19], 'false,true': [0.397, 344, 85], 'false,false': [0.375, 161, 33]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,true': 'haswordtitle(L, M), haswordauthor(N, M)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [4.096, 62, 23], 'true,true,false,false': [6.169, 89, 67], 'true,false,true': [0.183, 0, 6], 'true,false,false,true': [3.943, 28, 41], 'true,false,false,false': [3.333, 16, 46], 'false,true,true': [0.391, 291, 69], 'false,true,false': [0.438, 43, 15], 'false,false': [0.372, 171, 34]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordauthor(D, C)', 'true,true': 'author(E, D), venue(E, A)', 'true,true,false': 'haswordtitle(F, C)', 'true,false': 'haswordtitle(G, C)', 'true,false,true': 'title(H, G), venue(H, A)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordtitle(L, K)'}, {'true,true,true': [0.412, 0, 4], 'true,true,false,true': [1.611, 4, 7], 'true,true,false,false': [0.84, 1, 4], 'true,false,true,true': [33.04, 2, 1], 'true,false,true,false': [7.337, 148, 88], 'true,false,false,true': [4.035, 29, 45], 'true,false,false,false': [3.243, 15, 45], 'false,true': [0.399, 334, 84], 'false,false': [0.372, 171, 34]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'true,false,true': 'haswordtitle(I, J), haswordauthor(K, J)', 'true,false,false': 'haswordvenue(A, L), haswordtitle(M, L)', 'false': 'haswordvenue(A, N), haswordtitle(P, N)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [6.901, 140, 75], 'true,true,false,false': [2.335, 10, 12], 'true,false,true,true': [3.432, 20, 38], 'true,false,true,false': [1.956, 8, 7], 'true,false,false,true': [3.041, 14, 29], 'true,false,false,false': [1.342, 2, 19], 'false,true': [0.397, 344, 85], 'false,false': [0.375, 161, 33]}]]
[{'': [0.2406265766226244, 0.15353142898366393], 'true': [0.23905015123044185, 0.21801907400501064], 'true,true': [0.23935357371818272, 0.2323345617689483], 'true,true,false': [0.18594726413656407, 0.24502794214332654], 'true,false': [0.23715555555555579, 0.18340270551508875], 'true,false,true': [0.22398543184183187, 0.2366863905325442], 'true,false,false': [0.2165377751338503, 0.0861678004535146], 'false': [0.16057324694947536, 0.13834622248661618]}, {'': [0.23974661588593726, 0.153467485299672], 'true': [0.23894443955117306, 0.21298959519019103], 'true,true': [0.2391880215243364, 0.23364171238155945], 'true,true,false': [0.19737024221453264, 0.2450279421433249], 'true,false': [0.00023482994036377086, 0.21870405294121928], 'true,false,false': [0.23969550265629655, 0.18381016297413172], 'false': [0.16057324694947236, 0.13834622248661627], 'false,true': [0.17328295636871896, 0.1324489795918377]}, {'': [0.23889042380576486, 0.15325716406116846], 'true': [0.23884011081206946, 0.2081428873500908], 'true,true': [0.23926654519904308, 0.22980020041086946], 'true,true,false': [0.18594726413656462, 0.24502794214332782], 'true,false': [0.0028866882693466453, 0.2137098630796047], 'true,false,false': [0.2323743852161833, 0.18373790042448995], 'false': [0.1584452315571753, 0.14094513724493085], 'false,true': [0.2093795267301521, 0.1515424959564719]}, {'': [0.2382453077836659, 0.15297929762875634], 'true': [0.23873568599049635, 0.2040420435846979], 'true,true': [0.23907917683239396, 0.23155791901017403], 'true,true,false': [0.1973702422145328, 0.2450279421433256], 'true,false': [0.003448565322883882, 0.211106002030183], 'true,false,false': [0.2316105334439017, 0.18309273382196334], 'false': [0.1581359035811891, 0.1409433191954164], 'false,true': [0.20922162597278532, 0.1515381108581032]}, {'': [0.23786165381374988, 0.15275312044384354], 'true': [0.23864957188500327, 0.201814468996092], 'true,true': [0.23918536457487605, 0.22761972079261694], 'true,true,false': [0.1859472641365646, 0.2450279421433254], 'true,false': [0.0065516839590175225, 0.21009563835922554], 'true,false,false': [0.23200526219253956, 0.17795395708260042], 'false': [0.1594490178515986, 0.1386118693720614], 'false,true': [0.17185998603498015, 0.13251370203178994]}, {'': [0.2376169540433943, 0.15255434659386155], 'true': [0.23857735984861456, 0.1996938624216853], 'true,true': [0.2389985250653283, 0.23003947929594984], 'true,true,false': [0.22583804461838944, 0.2479338842975208], 'true,false': [0.21853650045563397, 0.1756082877959548], 'true,false,true': [0.20544279479362135, 0.2533758157921698], 'true,false,false': [0.21537129407095626, 0.08590183826619512], 'false': [0.15756939417526392, 0.14081380176552308]}, {'': [0.23745377926597566, 0.15248577012549397], 'true': [0.23851126615942325, 0.19808253335001094], 'true,true': [0.2391502792722542, 0.2257996151741971], 'true,true,false': [0.18594726413656423, 0.243981854555798], 'true,false': [0.2193927675831026, 0.17063583244326816], 'true,false,true': [0.0005086336519397189, 0.22818311734717656], 'true,false,false': [0.21135434612495033, 0.08580498387496287], 'false': [0.15754623793973055, 0.14081332346335473]}, {'': [0.23735470510405166, 0.1524322912418629], 'true': [0.23846726313971772, 0.1969667396530543], 'true,true': [0.2389497538714972, 0.22890173681284673], 'true,true,false': [0.19737024221453275, 0.2439603872443557], 'true,false': [0.005581370204351972, 0.20452317770504466], 'true,false,false': [0.22529456383457513, 0.17920768302038415], 'false': [0.15904031811788324, 0.13851142914882944], 'false,true': [0.15304696202791107, 0.1914514428593439]}, {'': [0.23728628466910615, 0.15226292053993914], 'true': [0.1848363019504426, 0.23719813906243845], 'true,false': [0.23819838578988456, 0.20061596373707738], 'true,false,true': [0.2387093421675818, 0.22808800886160535], 'true,false,false': [0.22003694470912008, 0.175249641061647], 'true,true': [0.04250480040404053, 0.20651625666883067], 'true,true,false': [0.23598502881641767, 0.14103763563155608], 'false': [0.15884686338145723, 0.13851141667841144]}, {'': [0.2371254165348687, 0.15221951853520316], 'true': [0.23827410969916304, 0.1962326106618074], 'true,true': [0.23894457131987062, 0.2250934640549191], 'true,true,false': [0.22150322835728603, 0.2479338842975208], 'true,false': [0.21505094045251008, 0.1736681343725912], 'true,false,true': [0.2030807696756386, 0.25493692342577784], 'true,false,false': [0.2150035660809947, 0.08577987580880517], 'false': [0.15723052825811237, 0.14076192007109306]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;true,false,true;haswordauthor(I, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.25496741407096063;  // std dev = 0.489, 4,589.000 (wgt'ed) examples reached here.  /* #neg=2,768 #pos=1,821 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.10506251534642576;  // std dev = 3.881, 81.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
%   | | | else return 0.287636114586693;  // std dev = 6.183, 156.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=67 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.4438632208137981;  // std dev = 4.121, 70.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=41 */
%   | | | else return 0.6081489350995125;  // std dev = 3.354, 60.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=45 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( title(M, L), venue(M, A) )
%   | | then return 0.0811705178333259;  // std dev = 0.416, 278.000 (wgt'ed) examples reached here.  /* #neg=216 #pos=62 */
%   | | else return 0.015291792242369238;  // std dev = 0.364, 140.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=22 */
%   | else return 0.02400259363609683;  // std dev = 0.372, 205.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=34 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.22107077518568793;  // std dev = 0.489, 4,585.000 (wgt'ed) examples reached here.  /* #neg=2,767 #pos=1,818 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.09478335987541195;  // std dev = 4.096, 85.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=23 */
%   | | | else return 0.2488984498369615;  // std dev = 6.183, 156.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=67 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.4262183924343824;  // std dev = 3.582, 58.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=38 */
%   | | | else return 0.25992716277869604;  // std dev = 1.939, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.4660307478390344;  // std dev = 3.058, 43.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=29 */
%   | | | else return 0.669567269378352;  // std dev = 1.343, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.05195041931031589;  // std dev = 0.398, 429.000 (wgt'ed) examples reached here.  /* #neg=344 #pos=85 */
%   | else return 0.01879570186958499;  // std dev = 0.376, 194.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=33 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1870326667439847;  // std dev = 0.489, 4,589.000 (wgt'ed) examples reached here.  /* #neg=2,768 #pos=1,821 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.06055797575939304;  // std dev = 3.881, 81.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
%   | | | else return 0.2091092658269433;  // std dev = 6.183, 156.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=67 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.6545387886037921;  // std dev = 0.136, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.29491537818742575;  // std dev = 4.020, 69.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=41 */
%   | | | else return 0.42315786093550317;  // std dev = 3.377, 62.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=46 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( title(M, L), venue(M, A) )
%   | | then return 0.06695372637499952;  // std dev = 0.416, 278.000 (wgt'ed) examples reached here.  /* #neg=216 #pos=62 */
%   | | else return 0.007146762250396315;  // std dev = 0.364, 140.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=22 */
%   | else return 0.01470837813618749;  // std dev = 0.372, 205.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=34 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.1544590932817927;  // std dev = 0.489, 4,585.000 (wgt'ed) examples reached here.  /* #neg=2,767 #pos=1,818 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.050167558856269195;  // std dev = 4.096, 85.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=23 */
%   | | | else return 0.1710977050555898;  // std dev = 6.183, 156.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=67 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.2844342385268708;  // std dev = 3.648, 62.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=41 */
%   | | | else return 0.03823839665409248;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.2936142605112149;  // std dev = 2.950, 41.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=28 */
%   | | | else return 0.4238479700347471;  // std dev = 1.342, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.04202651641513626;  // std dev = 0.398, 429.000 (wgt'ed) examples reached here.  /* #neg=344 #pos=85 */
%   | else return 0.008116058458713141;  // std dev = 0.375, 194.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=33 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1252174463894109;  // std dev = 0.489, 4,589.000 (wgt'ed) examples reached here.  /* #neg=2,768 #pos=1,821 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.025741596470677988;  // std dev = 3.881, 81.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
%   | | | else return 0.13698417917627823;  // std dev = 6.183, 156.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=67 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.4261468408147235;  // std dev = 0.062, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.16449649563814173;  // std dev = 4.042, 70.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=41 */
%   | | | else return 0.251801892856281;  // std dev = 3.257, 60.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=45 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then return 0.026514262327177074;  // std dev = 0.393, 360.000 (wgt'ed) examples reached here.  /* #neg=291 #pos=69 */
%   | | else return 0.10170029181021231;  // std dev = 0.437, 58.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=15 */
%   | else return 0.007497823743846115;  // std dev = 0.372, 205.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=34 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.09987353070208357;  // std dev = 0.489, 4,585.000 (wgt'ed) examples reached here.  /* #neg=2,767 #pos=1,818 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.06154707480441375;  // std dev = 7.033, 219.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=78 */
%   | | | else return 0.2238208887323627;  // std dev = 2.335, 22.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(J, H) )
%   | | | then return 0.4355120906087821;  // std dev = 0.052, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.11935761301824656;  // std dev = 3.961, 70.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=42 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.17016594049368738;  // std dev = 3.044, 43.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=29 */
%   | | | else return 0.2581164041101146;  // std dev = 1.342, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.032595879296496724;  // std dev = 0.397, 429.000 (wgt'ed) examples reached here.  /* #neg=344 #pos=85 */
%   | else return 0.0033849112730227207;  // std dev = 0.375, 194.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=33 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.07862925495847646;  // std dev = 0.489, 4,589.000 (wgt'ed) examples reached here.  /* #neg=2,768 #pos=1,821 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.0033489032358480857;  // std dev = 3.881, 81.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
%   | | | else return 0.08905206726461586;  // std dev = 6.169, 156.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=67 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordauthor(I, G) )
%   | | | then return 0.33327820192423063;  // std dev = 0.047, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.09008390403567199;  // std dev = 3.961, 70.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=42 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.1280218883247344;  // std dev = 3.045, 43.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=29 */
%   | | | else return 0.20176964726513275;  // std dev = 1.342, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.029025411737468275;  // std dev = 0.400, 418.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=84 */
%   | else return 0.002265799236033999;  // std dev = 0.372, 205.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=34 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.06160160018665735;  // std dev = 0.489, 4,585.000 (wgt'ed) examples reached here.  /* #neg=2,767 #pos=1,818 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.008768384411966527;  // std dev = 4.096, 85.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=23 */
%   | | | else return 0.06879715991620312;  // std dev = 6.169, 156.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=67 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.1002321032446576;  // std dev = 3.614, 62.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=41 */
%   | | | else return -0.059907320983244756;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.10429118791483274;  // std dev = 2.942, 41.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=28 */
%   | | | else return 0.16154099289146126;  // std dev = 1.342, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.02559840803773708;  // std dev = 0.397, 429.000 (wgt'ed) examples reached here.  /* #neg=344 #pos=85 */
%   | else return -9.86472548911173E-4;  // std dev = 0.375, 194.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=33 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.047753050191116586;  // std dev = 0.489, 4,585.000 (wgt'ed) examples reached here.  /* #neg=2,767 #pos=1,818 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.02126741761534382;  // std dev = 7.022, 219.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=78 */
%   | | | else return 0.1356090604482922;  // std dev = 2.335, 22.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.22038856296783327;  // std dev = 0.104, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.04719181237666386;  // std dev = 4.024, 72.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=43 */
%   | | | else return 0.09215420224373773;  // std dev = 3.234, 59.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=44 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then if ( title(N, M), venue(N, A) )
%   | | then return 0.043595427626503;  // std dev = 0.415, 278.000 (wgt'ed) examples reached here.  /* #neg=216 #pos=62 */
%   | | else return -0.01851552379150171;  // std dev = 0.363, 140.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=22 */
%   | else return -0.0014140500668937458;  // std dev = 0.372, 205.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=34 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.03691456055042982;  // std dev = 0.489, 4,589.000 (wgt'ed) examples reached here.  /* #neg=2,768 #pos=1,821 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.018010408689352265;  // std dev = 3.881, 81.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
%   | | | else return 0.043846834387573176;  // std dev = 6.162, 156.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=67 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.06036007062758082;  // std dev = 3.424, 58.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=38 */
%   | | | else return -0.039579325650530676;  // std dev = 1.952, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0607682945182778;  // std dev = 3.045, 43.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=29 */
%   | | | else return 0.11563539936405644;  // std dev = 1.342, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.021204980181211235;  // std dev = 0.397, 429.000 (wgt'ed) examples reached here.  /* #neg=344 #pos=85 */
%   | else return -0.006466484205712164;  // std dev = 0.375, 194.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=33 */


Results
   AUC ROC   = 0.604744
   AUC PR    = 0.439877
   CLL	      = -0.625493
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total learning time: 13188.02369093895 seconds
Total inference time: 3.404 seconds
AUC ROC: 0.604744


Results scoring model
   AUC ROC   = 0.56745
   AUC PR    = 0.44731
   CLL	      = -0.647869
   Precision = 0.736364 at threshold = 0.5
   Recall    = 0.038226
   F1        = 0.072678


Total scoring time: 49.952 seconds
Refined model CLL: -0.647869


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.605597
   AUC PR    = 0.441569
   CLL	      = -0.625092
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total learning time: 25333.540126905442 seconds
Total inference time: 3.378 seconds
AUC ROC: 0.605597
Total revision time: 25333.540126905442
Best scored revision CLL: -0.6476


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 19:06:42
{'AUC ROC': 0.605597, 'AUC PR': 0.441569, 'CLL': -0.625092, 'Precision': [0.578947, 0.5], 'Recall': 0.059783, 'F1': 0.108374, 'Learning time': 25333.540126905442, 'Inference time': 3.378, 'parameter_0.8': {'AUC ROC': 0.605597, 'AUC PR': 0.441569, 'CLL': -0.625092, 'Precision': [0.578947, 0.5], 'Recall': 0.059783, 'F1': 0.108374, 'Learning time': 12044.656435966492, 'Inference time': 3.378}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.25496741407096063;  // std dev = 0.489, 4,589.000 (wgt'ed) examples reached here.  /* #neg=2,768 #pos=1,821 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.10506251534642576;  // std dev = 3.881, 81.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
%   | | | else return 0.287636114586693;  // std dev = 6.183, 156.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=67 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.5194392576801578;  // std dev = 3.727, 62.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=41 */
%   | | | else return 0.24276431971489695;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.5410757643678041;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=28 */
%   | | | else return 0.762910839861417;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.059105872898555435;  // std dev = 0.401, 418.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=84 */
%   | else return 0.02400259363609683;  // std dev = 0.372, 205.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=34 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.22107077518568793;  // std dev = 0.489, 4,585.000 (wgt'ed) examples reached here.  /* #neg=2,767 #pos=1,818 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.09478335987541195;  // std dev = 4.096, 85.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=23 */
%   | | | else return 0.2488984498369615;  // std dev = 6.183, 156.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=67 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.7756935561178709;  // std dev = 0.041, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.3763215631209259;  // std dev = 4.096, 70.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=41 */
%   | | | else return 0.5153232326347565;  // std dev = 3.321, 60.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=45 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( title(M, L), venue(M, A) )
%   | | then return 0.07382218335211252;  // std dev = 0.416, 278.000 (wgt'ed) examples reached here.  /* #neg=216 #pos=62 */
%   | | else return 0.007943457761156968;  // std dev = 0.364, 140.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=22 */
%   | else return 0.021055581231398644;  // std dev = 0.372, 205.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=34 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1870326667439847;  // std dev = 0.489, 4,589.000 (wgt'ed) examples reached here.  /* #neg=2,768 #pos=1,821 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.06055797575939304;  // std dev = 3.881, 81.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
%   | | | else return 0.2091092658269433;  // std dev = 6.183, 156.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=67 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.34987834765889037;  // std dev = 3.533, 58.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=38 */
%   | | | else return 0.17621740351077578;  // std dev = 1.941, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.38213534439852515;  // std dev = 3.056, 43.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=29 */
%   | | | else return 0.5293424504583936;  // std dev = 1.342, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.04714501815462128;  // std dev = 0.398, 429.000 (wgt'ed) examples reached here.  /* #neg=344 #pos=85 */
%   | else return 0.01223007097905629;  // std dev = 0.375, 194.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=33 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.1544590932817927;  // std dev = 0.489, 4,585.000 (wgt'ed) examples reached here.  /* #neg=2,767 #pos=1,818 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.050167558856269195;  // std dev = 4.096, 85.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=23 */
%   | | | else return 0.1710977050555898;  // std dev = 6.183, 156.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=67 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.5205712112267122;  // std dev = 0.095, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.22746478608845627;  // std dev = 4.004, 69.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=41 */
%   | | | else return 0.322874432925464;  // std dev = 3.345, 61.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=45 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordauthor(M, K) )
%   | | then return 0.14047258067031246;  // std dev = 0.458, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | | else return 0.02992159625119035;  // std dev = 0.389, 386.000 (wgt'ed) examples reached here.  /* #neg=314 #pos=72 */
%   | else return 0.010597391697988024;  // std dev = 0.375, 194.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=33 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1252174463894109;  // std dev = 0.489, 4,589.000 (wgt'ed) examples reached here.  /* #neg=2,768 #pos=1,821 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.025741596470677988;  // std dev = 3.881, 81.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
%   | | | else return 0.13698417917627823;  // std dev = 6.183, 156.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=67 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.47036373045633245;  // std dev = 0.252, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.16680042567318365;  // std dev = 3.963, 69.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=41 */
%   | | | else return 0.2467713393672742;  // std dev = 3.348, 62.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=46 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( title(M, L), venue(M, A) )
%   | | then return 0.056701065818588504;  // std dev = 0.415, 278.000 (wgt'ed) examples reached here.  /* #neg=216 #pos=62 */
%   | | else return -0.003535158745588788;  // std dev = 0.364, 140.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=22 */
%   | else return 0.008301256663342856;  // std dev = 0.372, 205.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=34 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.09987353070208357;  // std dev = 0.489, 4,585.000 (wgt'ed) examples reached here.  /* #neg=2,767 #pos=1,818 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.06154707480441375;  // std dev = 7.033, 219.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=78 */
%   | | | else return 0.2238208887323627;  // std dev = 2.335, 22.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.3612637439702721;  // std dev = 0.231, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.11835638712518051;  // std dev = 4.037, 72.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=43 */
%   | | | else return 0.19880436297997647;  // std dev = 3.244, 59.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=44 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then if ( haswordauthor(N, L) )
%   | | then return 0.11451311588587586;  // std dev = 0.456, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | | else return 0.0240085293763405;  // std dev = 0.389, 386.000 (wgt'ed) examples reached here.  /* #neg=314 #pos=72 */
%   | else return 0.0020218027633867913;  // std dev = 0.375, 194.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=33 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.07862925495847646;  // std dev = 0.489, 4,589.000 (wgt'ed) examples reached here.  /* #neg=2,768 #pos=1,821 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.0033489032358480857;  // std dev = 3.881, 81.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=20 */
%   | | | else return 0.08905206726461586;  // std dev = 6.169, 156.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=67 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.2808672089239691;  // std dev = 0.068, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.08333542745059568;  // std dev = 4.027, 70.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=41 */
%   | | | else return 0.1541516916548908;  // std dev = 3.251, 60.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=45 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then return 0.01766000778473027;  // std dev = 0.388, 370.000 (wgt'ed) examples reached here.  /* #neg=301 #pos=69 */
%   | | else return 0.09505860171013421;  // std dev = 0.442, 59.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=16 */
%   | else return 0.0017389583069996892;  // std dev = 0.375, 194.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=33 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.06160160018665735;  // std dev = 0.489, 4,585.000 (wgt'ed) examples reached here.  /* #neg=2,767 #pos=1,818 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.008768384411966527;  // std dev = 4.096, 85.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=23 */
%   | | | else return 0.06879715991620312;  // std dev = 6.169, 156.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=67 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordauthor(I, G) )
%   | | | then return 0.34000744826612106;  // std dev = 0.042, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.055482738452810855;  // std dev = 3.944, 70.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=42 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.10232085006057216;  // std dev = 3.042, 43.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=29 */
%   | | | else return 0.1803697403176945;  // std dev = 1.343, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.024935336263598368;  // std dev = 0.399, 418.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=84 */
%   | else return 0.0012211934983615202;  // std dev = 0.372, 205.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=34 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.047753050191116586;  // std dev = 0.489, 4,585.000 (wgt'ed) examples reached here.  /* #neg=2,767 #pos=1,818 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.02126741761534382;  // std dev = 7.022, 219.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=78 */
%   | | | else return 0.1356090604482922;  // std dev = 2.335, 22.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.06972844242852888;  // std dev = 3.436, 58.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=38 */
%   | | | else return -0.01937693335375925;  // std dev = 1.952, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.07768923917666379;  // std dev = 3.042, 43.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=29 */
%   | | | else return 0.14601399964448147;  // std dev = 1.342, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | then return 0.022097563325488352;  // std dev = 0.397, 429.000 (wgt'ed) examples reached here.  /* #neg=344 #pos=85 */
%   | else return -0.001869409525090608;  // std dev = 0.375, 194.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=33 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.03691456055042982;  // std dev = 0.489, 4,589.000 (wgt'ed) examples reached here.  /* #neg=2,768 #pos=1,821 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.01454541869224834;  // std dev = 6.901, 215.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=75 */
%   | | | else return 0.10245445644502071;  // std dev = 2.335, 22.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.2026556273728226;  // std dev = 0.059, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.2550195850904243;  // std dev = 0.035, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.04546142663852677;  // std dev = 5.152, 127.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=83 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then if ( haswordtitle(M, N), haswordauthor(P, N) )
%   | | then return 0.009020724978148452;  // std dev = 0.391, 360.000 (wgt'ed) examples reached here.  /* #neg=291 #pos=69 */
%   | | else return 0.08482939624550662;  // std dev = 0.437, 58.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=15 */
%   | else return -0.0018582529634622448;  // std dev = 0.372, 205.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=34 */


Results
   AUC ROC   = 0.604744
   AUC PR    = 0.439877
   CLL	      = -0.625262
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total learning time: 13355.052792072296 seconds
Total inference time: 3.424 seconds
AUC ROC: 0.604744


Dataset: 3_imdb_cora, Fold: 1, Type: Scratch (RDN-B), Time: 22:49:22
{'AUC ROC': 0.604744, 'AUC PR': 0.439877, 'CLL': -0.625262, 'Precision': [0.578947, 0.5], 'Recall': 0.059783, 'F1': 0.108374, 'Learning time': 13355.052792072296, 'Inference time': 3.424}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.2559515161947286;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.10324697431519789;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.29692444530359235;  // std dev = 6.947, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.4765699877310918;  // std dev = 4.235, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return 0.24703782398840124;  // std dev = 2.068, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.48777856472914083;  // std dev = 3.549, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.7711924133603816;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.05551735615214257;  // std dev = 0.398, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.03153603187370529;  // std dev = 0.379, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.22222965384560173;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.06915052434230415;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.2568082465168603;  // std dev = 6.947, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.4143878208613061;  // std dev = 4.212, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return 0.17843323178848147;  // std dev = 2.069, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.4206995586697572;  // std dev = 3.536, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.6497281345945147;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.04994835668198878;  // std dev = 0.398, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.024812622309081683;  // std dev = 0.379, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.18771929258357153;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.05884198209418326;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.21542855580470746;  // std dev = 6.947, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.3390438318181077;  // std dev = 4.207, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return 0.1472560332512732;  // std dev = 2.069, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.3427971745112513;  // std dev = 3.533, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.5066945370494556;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.04362485237097879;  // std dev = 0.398, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.021505999002746797;  // std dev = 0.378, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1552522670020863;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.0287673056703666;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.17585398336442742;  // std dev = 6.947, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.2749297118443763;  // std dev = 4.184, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return 0.07852321241691129;  // std dev = 2.069, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.26921802659233324;  // std dev = 3.518, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.38118293431064965;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.03907855596307313;  // std dev = 0.398, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.01610734391500161;  // std dev = 0.378, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.12561094264210448;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.0826056765273909;  // std dev = 7.763, 270.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=95 */
%   | | | else return 0.27304033640502706;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.21102201849297653;  // std dev = 4.181, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return 0.061471076289645064;  // std dev = 2.069, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.20522921480262057;  // std dev = 3.516, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.28851881836643356;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | then return 0.033921120726085455;  // std dev = 0.398, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.01370629650096719;  // std dev = 0.378, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.10016792098007678;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.0018250199440457964;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.11673645072487956;  // std dev = 6.928, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.3690805014947054;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.12354817125222951;  // std dev = 4.561, 88.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=49 */
%   | | | else return 0.16878020561372242;  // std dev = 3.757, 75.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=53 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( title(M, L), venue(M, A) )
%   | | then return 0.04021427604233747;  // std dev = 0.404, 360.000 (wgt'ed) examples reached here.  /* #neg=286 #pos=74 */
%   | | else return 0.00962227496516729;  // std dev = 0.384, 172.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=31 */
%   | else return 0.009513165620828313;  // std dev = 0.378, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.07901111444727818;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.009234377456444577;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.09076611960288186;  // std dev = 6.927, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.12664202432595786;  // std dev = 4.158, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return -0.016459307528991277;  // std dev = 2.072, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.12020591670480492;  // std dev = 3.492, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.1870438087964611;  // std dev = 1.349, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.02676782418096048;  // std dev = 0.398, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.006722426547891904;  // std dev = 0.378, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.061725741276130924;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.013363132973430773;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.06992016399847402;  // std dev = 6.927, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordauthor(I, G) )
%   | | | then return 0.25633254007326994;  // std dev = 0.892, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.06464949951337934;  // std dev = 4.559, 89.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=50 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.09033941364160775;  // std dev = 3.492, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.15145466538645905;  // std dev = 1.350, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.023485427626511898;  // std dev = 0.398, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.00463259320665905;  // std dev = 0.378, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.0479759930202973;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.016309598525510578;  // std dev = 7.740, 270.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=95 */
%   | | | else return 0.14697608113692365;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(J, H) )
%   | | | then return 0.19378529675339531;  // std dev = 0.892, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.04887374183049062;  // std dev = 4.559, 89.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=50 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.3113755958814782;  // std dev = 0.159, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.07591677838998077;  // std dev = 3.726, 74.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=52 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.020717946794546187;  // std dev = 0.398, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.002627453284850444;  // std dev = 0.378, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.03699474740250872;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.022501310722410846;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.04504333806752579;  // std dev = 6.916, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.059172927104811604;  // std dev = 4.140, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return -0.03922786926562691;  // std dev = 2.074, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.05208145547492866;  // std dev = 3.491, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.11131608933364888;  // std dev = 1.349, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.038853946204701485;  // std dev = 0.410, 83.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=18 */
%   | else return 0.009674188776810573;  // std dev = 0.389, 697.000 (wgt'ed) examples reached here.  /* #neg=567 #pos=130 */


Results
   AUC ROC   = 0.604505
   AUC PR    = 0.438707
   CLL	      = -0.625557
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total learning time: 15913.359031915665 seconds
Total inference time: 3.484 seconds
AUC ROC: 0.604505


Results scoring model
   AUC ROC   = 0.566202
   AUC PR    = 0.442684
   CLL	      = -0.649036
   Precision = 0.703704 at threshold = 0.5
   Recall    = 0.035863
   F1        = 0.068247


Total scoring time: 60.482 seconds
Parameter learned model CLL: -0.649036


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true,true': [0.489, 3, 2], 'true,true,false,true': [4.344, 77, 25], 'true,true,false,false': [6.947, 110, 86], 'true,false,true,true': [4.235, 29, 47], 'true,false,true,false': [2.068, 11, 7], 'true,false,false,true': [3.549, 20, 34], 'true,false,false,false': [1.351, 2, 21], 'false,true': [0.398, 427, 105], 'false,false': [0.379, 205, 43]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true,true': [0.489, 3, 2], 'true,true,false,true': [4.344, 77, 25], 'true,true,false,false': [6.947, 110, 86], 'true,false,true,true': [4.212, 29, 47], 'true,false,true,false': [2.069, 11, 7], 'true,false,false,true': [3.536, 20, 34], 'true,false,false,false': [1.351, 2, 21], 'false,true': [0.398, 427, 105], 'false,false': [0.379, 205, 43]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true,true': [0.489, 3, 2], 'true,true,false,true': [4.344, 77, 25], 'true,true,false,false': [6.947, 110, 86], 'true,false,true,true': [4.207, 29, 47], 'true,false,true,false': [2.069, 11, 7], 'true,false,false,true': [3.533, 20, 34], 'true,false,false,false': [1.351, 2, 21], 'false,true': [0.398, 427, 105], 'false,false': [0.378, 205, 43]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true,true': [0.489, 3, 2], 'true,true,false,true': [4.344, 77, 25], 'true,true,false,false': [6.947, 110, 86], 'true,false,true,true': [4.184, 29, 47], 'true,false,true,false': [2.069, 11, 7], 'true,false,false,true': [3.518, 20, 34], 'true,false,false,false': [1.351, 2, 21], 'false,true': [0.398, 427, 105], 'false,false': [0.378, 205, 43]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'haswordtitle(I, J), haswordauthor(K, J)', 'true,false,false': 'haswordvenue(B, L), haswordtitle(M, L)', 'false': 'haswordvenue(A, N), haswordtitle(P, N)'}, {'true,true,true': [0.489, 3, 2], 'true,true,false,true': [7.763, 175, 95], 'true,true,false,false': [2.619, 12, 16], 'true,false,true,true': [4.181, 29, 47], 'true,false,true,false': [2.069, 11, 7], 'true,false,false,true': [3.516, 20, 34], 'true,false,false,false': [1.351, 2, 21], 'false,true': [0.398, 427, 105], 'false,false': [0.378, 205, 43]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,true': 'title(M, L), venue(M, A)'}, {'true,true,true': [0.489, 3, 2], 'true,true,false,true': [4.344, 77, 25], 'true,true,false,false': [6.928, 110, 86], 'true,false,true': [0.328, 1, 7], 'true,false,false,true': [4.561, 39, 49], 'true,false,false,false': [3.757, 22, 53], 'false,true,true': [0.404, 286, 74], 'false,true,false': [0.384, 141, 31], 'false,false': [0.378, 205, 43]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true,true': [0.489, 3, 2], 'true,true,false,true': [4.344, 77, 25], 'true,true,false,false': [6.927, 110, 86], 'true,false,true,true': [4.158, 29, 47], 'true,false,true,false': [2.072, 11, 7], 'true,false,false,true': [3.492, 20, 34], 'true,false,false,false': [1.349, 2, 21], 'false,true': [0.398, 427, 105], 'false,false': [0.378, 205, 43]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'haswordauthor(I, G)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true': [0.489, 3, 2], 'true,true,false,true': [4.344, 77, 25], 'true,true,false,false': [6.927, 110, 86], 'true,false,true,true': [0.892, 1, 4], 'true,false,true,false': [4.559, 39, 50], 'true,false,false,true': [3.492, 20, 34], 'true,false,false,false': [1.35, 2, 21], 'false,true': [0.398, 427, 105], 'false,false': [0.378, 205, 43]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'true,false,true': 'haswordauthor(J, H)', 'true,false,false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true,true': [0.489, 3, 2], 'true,true,false,true': [7.74, 175, 95], 'true,true,false,false': [2.619, 12, 16], 'true,false,true,true': [0.892, 1, 4], 'true,false,true,false': [4.559, 39, 50], 'true,false,false,true': [0.159, 0, 3], 'true,false,false,false': [3.726, 22, 52], 'false,true': [0.398, 427, 105], 'false,false': [0.378, 205, 43]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(B, M), haswordauthor(N, M)'}, {'true,true,true': [0.489, 3, 2], 'true,true,false,true': [4.344, 77, 25], 'true,true,false,false': [6.916, 110, 86], 'true,false,true,true': [4.14, 29, 47], 'true,false,true,false': [2.074, 11, 7], 'true,false,false,true': [3.491, 20, 34], 'true,false,false,false': [1.349, 2, 21], 'false,true': [0.41, 65, 18], 'false,false': [0.389, 567, 130]}]]
[{'': [0.24062821188505737, 0.1537409598948076], 'true': [0.23929845422110457, 0.23111384699566015], 'true,true': [0.23955568756914178, 0.23373947119499386], 'true,true,false': [0.18502499038831322, 0.2462515618492307], 'true,false': [0.24445450430058835, 0.20408163265306092], 'true,false,true': [0.23597645429362898, 0.23765432098765438], 'true,false,false': [0.23319615912208677, 0.07939508506616269], 'false': [0.15841412742382383, 0.14332401144641108]}, {'': [0.239912994893748, 0.15371160841346576], 'true': [0.23918272629623266, 0.2258236981245465], 'true,true': [0.23944903274422907, 0.2332226872978986], 'true,true,false': [0.18502499038831138, 0.24625156184923094], 'true,false': [0.2428694722095544, 0.19711122261596062], 'true,false,true': [0.23340525381542404, 0.23781602483406653], 'true,false,false': [0.23158147311422037, 0.07939508506616208], 'false': [0.15838031736159208, 0.14326555119473272]}, {'': [0.2391639706514995, 0.15367763995572667], 'true': [0.23903956932964804, 0.21984154008871234], 'true,true': [0.23943391157955712, 0.23081473558421567], 'true,true,false': [0.1850249903883126, 0.2462515618492287], 'true,false': [0.2394809939061803, 0.19146919911293606], 'true,false,true': [0.2328279248723784, 0.23783263902228916], 'true,false,false': [0.23118065243946012, 0.07939508506616277], 'false': [0.15837765091620665, 0.14326166910389893]}, {'': [0.23863317127124992, 0.15365005652320354], 'true': [0.23892345831564166, 0.2159850962600174], 'true,true': [0.23933492148457597, 0.23016528052236862], 'true,true,false': [0.18502499038831116, 0.24625156184922922], 'true,false': [0.23774196378790705, 0.1870777359806908], 'true,false,true': [0.23033165253716606, 0.2378412319720425], 'true,false,false': [0.22919800731153414, 0.07939508506616254], 'false': [0.15835000659700973, 0.1432080030685062]}, {'': [0.23827443114371305, 0.15361959683592472], 'true': [0.23880741891299606, 0.21332677139591774], 'true,true': [0.23931962975793447, 0.2283521952847268], 'true,true,false': [0.22322885482768137, 0.244897959183674], 'true,false': [0.23494423948497756, 0.18568464790252148], 'true,false,true': [0.22997408277568504, 0.23784661359240378], 'true,false,false': [0.22888399024749925, 0.07939508506616262], 'false': [0.15834616525163056, 0.14320163239985928]}, {'': [0.2380629751475231, 0.1535951682165399], 'true': [0.2387179044921562, 0.21192933863908558], 'true,true': [0.23928293833441563, 0.22735316284216964], 'true,true,false': [0.18502499038831152, 0.24486138138279578], 'true,false': [0.10745575344868222, 0.21469434564337933], 'true,false,false': [0.23635569621431526, 0.18817380606514886], 'false': [0.15832484541914235, 0.14315386814131628], 'false,true': [0.16305395598548217, 0.1477934111771628]}, {'': [0.23791601311189117, 0.15353123038577077], 'true': [0.23864158862638687, 0.21078342065721314], 'true,true': [0.2392422081331794, 0.2266046014404892], 'true,true,false': [0.18502499038831266, 0.24482011763852876], 'true,false': [0.23282953727221292, 0.18294903593266992], 'true,false,true': [0.22754034058425504, 0.23860502734689618], 'true,false,false': [0.22581804915129028, 0.0791671340091579], 'false': [0.15824934157948423, 0.14313606043053975]}, {'': [0.2378111983704128, 0.1535059818168848], 'true': [0.23858128569610268, 0.20981050798798], 'true,true': [0.2392201259916215, 0.225896776987013], 'true,true,false': [0.1850249903883116, 0.24479268445215938], 'true,false': [0.23144289049326938, 0.18277602282337138], 'true,false,true': [0.15912909519758228, 0.23355108092022805], 'true,false,false': [0.22578321541867558, 0.07918321157881829], 'false': [0.158243749259739, 0.14310028544139897]}, {'': [0.23774394510263655, 0.15348346585456824], 'true': [0.23853785467896726, 0.2092509321880115], 'true,true': [0.23919595546195782, 0.2255175743146391], 'true,true,false': [0.2219035135675205, 0.24489795918367332], 'true,false': [0.23064985458442733, 0.18268079988543573], 'true,false,true': [0.15916266492724995, 0.2335490016672681], 'true,false,false': [0.008408338415395048, 0.18758586637341773], 'false': [0.1582263031839904, 0.1430861026447263]}, {'': [0.23768135664061638, 0.15346263229572213], 'true': [0.2384952067843175, 0.20868056756976489], 'true,true': [0.2391923068338312, 0.22486597320026522], 'true,true,false': [0.18502499038831188, 0.24403796026001165], 'true,false': [0.22959680166612545, 0.18266987254258793], 'true,false,true': [0.22554654357665097, 0.23886931189637206], 'true,false,false': [0.2257398096665586, 0.0790884744978934], 'false': [0.1684161784572983, 0.15159133352563045]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;true;true
0;true,true,false;title(F, D), venue(F, B).;true;true
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;true;true
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
0;false;haswordvenue(A, M), haswordtitle(N, M).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;true;true
1;true,true,false;title(F, D), venue(F, A).;true;true
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;true;true
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;true;true
1;false;haswordvenue(B, M), haswordtitle(N, M).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;true;true
2;true,true,false;title(F, D), venue(F, B).;true;true
2;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
2;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;true;true
2;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;true;true
2;false;haswordvenue(A, M), haswordtitle(N, M).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;true;true
3;true,true,false;title(F, D), venue(F, A).;true;true
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;true;true
3;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
3;false;haswordvenue(B, M), haswordtitle(N, M).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;true;true
4;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;true;true
4;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
4;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;true;true
4;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
4;false;haswordvenue(A, N), haswordtitle(P, N).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;true;true
5;true,true,false;title(F, D), venue(F, B).;true;true
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;true
5;false,true;title(M, L), venue(M, A).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;true;true
6;true,true,false;title(F, D), venue(F, A).;true;true
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;true;true
6;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;true;true
6;false;haswordvenue(A, M), haswordtitle(N, M).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, A).;true;true
7;true,true,false;title(F, D), venue(F, B).;true;true
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;haswordauthor(I, G).;true;true
7;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;true;true
7;false;haswordvenue(B, L), haswordtitle(M, L).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;true;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;true;true
8;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
8;true,false,true;haswordauthor(J, H).;true;true
8;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;true;true
8;false;haswordvenue(A, M), haswordtitle(N, M).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;true;true
9;true,true,false;title(F, D), venue(F, A).;true;true
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;true;true
9;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
9;false;haswordvenue(B, M), haswordauthor(N, M).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.2559515161947286;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.10324697431519789;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.29692444530359235;  // std dev = 6.947, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.4765699877310918;  // std dev = 4.235, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return 0.24703782398840124;  // std dev = 2.068, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.48777856472914083;  // std dev = 3.549, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.7711924133603816;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.05551735615214257;  // std dev = 0.398, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.03153603187370529;  // std dev = 0.379, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.22222965384560173;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.06915052434230415;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.2568082465168603;  // std dev = 6.947, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.4143878208613061;  // std dev = 4.212, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return 0.17843323178848147;  // std dev = 2.069, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.4206995586697572;  // std dev = 3.536, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.6497281345945147;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.04994835668198878;  // std dev = 0.398, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.024812622309081683;  // std dev = 0.379, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.18771929258357153;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.05884198209418326;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.21542855580470746;  // std dev = 6.947, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.5721732577311862;  // std dev = 0.327, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.2857467625223055;  // std dev = 4.615, 88.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=49 */
%   | | | else return 0.3847981390484237;  // std dev = 3.821, 75.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=53 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordauthor(M, K) )
%   | | then return 0.13632258622435228;  // std dev = 0.454, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | else return 0.03293643442142864;  // std dev = 0.390, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | else return 0.021505999002746797;  // std dev = 0.378, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1552522670020863;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.0287673056703666;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.17585398336442742;  // std dev = 6.947, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.2594660400428425;  // std dev = 4.187, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return 0.08754507050906526;  // std dev = 2.077, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.27745468826609426;  // std dev = 3.518, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.40958362126735925;  // std dev = 1.349, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.03867000132834728;  // std dev = 0.398, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.016872303430865217;  // std dev = 0.379, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.12561094264210448;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.0826056765273909;  // std dev = 7.763, 270.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=95 */
%   | | | else return 0.27304033640502706;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.41345917726218084;  // std dev = 0.320, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.15748310130653553;  // std dev = 4.573, 88.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=49 */
%   | | | else return 0.23576344644520253;  // std dev = 3.774, 75.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=53 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then if ( haswordauthor(N, L) )
%   | | then return 0.11261817381670416;  // std dev = 0.454, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | else return 0.024767435406165345;  // std dev = 0.390, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | else return 0.01375249181737823;  // std dev = 0.378, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.10016792098007678;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.0018250199440457964;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.11673645072487956;  // std dev = 6.928, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.16219935091274365;  // std dev = 4.152, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return -0.0051789254277700945;  // std dev = 2.078, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.15525638881646328;  // std dev = 3.500, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.2524464214406121;  // std dev = 1.348, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.05002879461437306;  // std dev = 0.410, 83.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=18 */
%   | else return 0.020445419832007424;  // std dev = 0.389, 697.000 (wgt'ed) examples reached here.  /* #neg=567 #pos=130 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.07901111444727818;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.009234377456444577;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.09076611960288186;  // std dev = 6.927, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.12229636545162602;  // std dev = 4.152, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return -0.003943332776528141;  // std dev = 2.078, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.11656984030713098;  // std dev = 3.500, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.198380176226555;  // std dev = 1.349, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.02619122765635148;  // std dev = 0.397, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.00764759725042994;  // std dev = 0.379, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.061725741276130924;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.013363132973430773;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.06992016399847402;  // std dev = 6.927, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.09215662523933536;  // std dev = 4.152, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return -0.0030034469309382084;  // std dev = 2.078, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.31113126910632527;  // std dev = 0.155, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.10095835788949771;  // std dev = 3.742, 74.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=52 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.02301925836221071;  // std dev = 0.397, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.005357394063466083;  // std dev = 0.378, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.0479759930202973;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.016309598525510578;  // std dev = 7.740, 270.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=95 */
%   | | | else return 0.14697608113692365;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.0809043869205278;  // std dev = 4.136, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return -0.056376180703816434;  // std dev = 2.078, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.06308848411137588;  // std dev = 3.484, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.14025413613081827;  // std dev = 1.348, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | then return 0.020199474881727332;  // std dev = 0.397, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.0035002460688902106;  // std dev = 0.379, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.03699474740250872;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.022501310722410846;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.04504333806752579;  // std dev = 6.916, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.190974439036071;  // std dev = 0.320, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.03458490805711864;  // std dev = 4.543, 88.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=49 */
%   | | | else return 0.06118764288621122;  // std dev = 3.741, 75.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=53 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.10589974628647764;  // std dev = 0.452, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | else return -0.10501440131423823;  // std dev = 0.259, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | else return 0.010088965780679152;  // std dev = 0.389, 697.000 (wgt'ed) examples reached here.  /* #neg=567 #pos=130 */


Results
   AUC ROC   = 0.604515
   AUC PR    = 0.439815
   CLL	      = -0.624984
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total learning time: 15864.934799671173 seconds
Total inference time: 3.34 seconds
AUC ROC: 0.604515


Results scoring model
   AUC ROC   = 0.566245
   AUC PR    = 0.442697
   CLL	      = -0.648828
   Precision = 0.703704 at threshold = 0.5
   Recall    = 0.035863
   F1        = 0.068247


Total scoring time: 61.639 seconds
Refined model CLL: -0.648828


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.604515
   AUC PR    = 0.439815
   CLL	      = -0.624984
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total learning time: 31900.414831586837 seconds
Total inference time: 3.34 seconds
AUC ROC: 0.604515
Total revision time: 31900.414831586837
Best scored revision CLL: -0.648828


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 07:41:17
{'AUC ROC': 0.604515, 'AUC PR': 0.439815, 'CLL': -0.624984, 'Precision': [0.578947, 0.5], 'Recall': 0.059783, 'F1': 0.108374, 'Learning time': 31900.414831586837, 'Inference time': 3.34, 'parameter_1.0': {'AUC ROC': 0.604505, 'AUC PR': 0.438707, 'CLL': -0.625557, 'Precision': [0.578947, 0.5], 'Recall': 0.059783, 'F1': 0.108374, 'Learning time': 15913.359031915665, 'Inference time': 3.484}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.2559515161947286;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.10324697431519789;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.29692444530359235;  // std dev = 6.947, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.4765699877310918;  // std dev = 4.235, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return 0.24703782398840124;  // std dev = 2.068, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.48777856472914083;  // std dev = 3.549, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.7711924133603816;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.05551735615214257;  // std dev = 0.398, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.03153603187370529;  // std dev = 0.379, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.22222965384560173;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.06915052434230415;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.2568082465168603;  // std dev = 6.947, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.4143878208613061;  // std dev = 4.212, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return 0.17843323178848147;  // std dev = 2.069, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.4206995586697572;  // std dev = 3.536, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.6497281345945147;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.04994835668198878;  // std dev = 0.398, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.024812622309081683;  // std dev = 0.379, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.18771929258357153;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.05884198209418326;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.21542855580470746;  // std dev = 6.947, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.5722990304781013;  // std dev = 0.327, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.2863120680641545;  // std dev = 4.616, 88.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=49 */
%   | | | else return 0.3841214314529834;  // std dev = 3.821, 75.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=53 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordauthor(M, K) )
%   | | then return 0.13632258622435228;  // std dev = 0.454, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | else return 0.03293643442142864;  // std dev = 0.390, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | else return 0.021505999002746797;  // std dev = 0.378, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1552522670020863;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.0287673056703666;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.17585398336442742;  // std dev = 6.947, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.4412303404529447;  // std dev = 0.327, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.21714490278722964;  // std dev = 4.619, 89.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=50 */
%   | | | else return 0.3086740483982239;  // std dev = 3.783, 74.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=52 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordauthor(M, K) )
%   | | then return 0.13169242158263952;  // std dev = 0.453, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | else return 0.027944145743470684;  // std dev = 0.389, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | else return 0.016872303430865217;  // std dev = 0.379, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.12561094264210448;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.0826056765273909;  // std dev = 7.763, 270.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=95 */
%   | | | else return 0.27304033640502706;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.407957190722159;  // std dev = 0.317, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.15654446660848365;  // std dev = 4.584, 88.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=49 */
%   | | | else return 0.23786653525367962;  // std dev = 3.787, 75.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=53 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then if ( haswordauthor(N, L) )
%   | | then return 0.11333594114782909;  // std dev = 0.453, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | else return 0.024224574505900633;  // std dev = 0.389, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | else return 0.014529539046537998;  // std dev = 0.379, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.10016792098007678;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.0018250199440457964;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.11673645072487956;  // std dev = 6.928, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.14869556746693885;  // std dev = 4.155, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return 0.0015094377282972643;  // std dev = 2.085, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.16254473772243425;  // std dev = 3.509, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.27398377623583026;  // std dev = 1.348, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.029465664512872653;  // std dev = 0.397, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.010905734844555297;  // std dev = 0.379, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.07901111444727818;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.009234377456444577;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.09076611960288186;  // std dev = 6.927, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.2708158784551818;  // std dev = 0.317, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.08250277942829216;  // std dev = 4.573, 89.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=50 */
%   | | | else return 0.1422383084081038;  // std dev = 3.761, 74.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=52 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( title(M, L), venue(M, B) )
%   | | then return 0.036877806844269806;  // std dev = 0.403, 360.000 (wgt'ed) examples reached here.  /* #neg=286 #pos=74 */
%   | | else return 0.002133882083753489;  // std dev = 0.382, 172.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=31 */
%   | else return 0.008702294096677101;  // std dev = 0.379, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.061725741276130924;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.013363132973430773;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.06992016399847402;  // std dev = 6.927, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.095388460895017;  // std dev = 4.140, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return -0.05303579225006733;  // std dev = 2.086, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.08769173651882206;  // std dev = 3.494, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.18377303563450373;  // std dev = 1.348, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.023311867737168826;  // std dev = 0.397, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.004695637540432745;  // std dev = 0.379, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.0479759930202973;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.016309598525510578;  // std dev = 7.740, 270.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=95 */
%   | | | else return 0.14697608113692365;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.07211666992173398;  // std dev = 4.140, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return -0.04000959997756808;  // std dev = 2.086, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.06611130128780429;  // std dev = 3.495, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.14912361738630112;  // std dev = 1.348, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | then return 0.019937940379996404;  // std dev = 0.397, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.004036290574223507;  // std dev = 0.379, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( haswordauthor(E, C) )
%   | | then if ( author(F, E), title(F, D) )
%   | | | then return 0.6374597321673285;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2003033937608683;  // std dev = 1.867, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.036190079425501155;  // std dev = 36.986, 5,723.000 (wgt'ed) examples reached here.  /* #neg=3,451 #pos=2,272 */
%   | | | else return 0.023386270247382535;  // std dev = 8.102, 292.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=109 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.05464984971668988;  // std dev = 4.141, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return -0.03024653922480455;  // std dev = 2.086, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.049993297356365256;  // std dev = 3.495, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.12334279639842062;  // std dev = 1.348, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else return 0.012705556901453604;  // std dev = 0.391, 780.000 (wgt'ed) examples reached here.  /* #neg=632 #pos=148 */


Results
   AUC ROC   = 0.604527
   AUC PR    = 0.439818
   CLL	      = -0.625285
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total learning time: 14599.989830970764 seconds
Total inference time: 3.639 seconds
AUC ROC: 0.604527


Dataset: 3_imdb_cora, Fold: 1, Type: Scratch (RDN-B), Time: 11:44:43
{'AUC ROC': 0.604527, 'AUC PR': 0.439818, 'CLL': -0.625285, 'Precision': [0.578947, 0.5], 'Recall': 0.059783, 'F1': 0.108374, 'Learning time': 14599.989830970764, 'Inference time': 3.639}


Starting fold 2

Target train facts examples: 33542
Target train pos examples: 2246
Target train neg examples: 4478

Target test facts examples: 9016
Target test pos  examples: 771
Target test neg examples: 544

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.6906961049108289;  // std dev = 7.688, 424.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=353 */
%   | | | else return -0.11015534382283312;  // std dev = 4.401, 631.000 (wgt'ed) examples reached here.  /* #neg=611 #pos=20 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.001006077956655051;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | | else return 0.25100607795665447;  // std dev = 3.655, 56.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=22 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.3966104735610508;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.09624417319475045;  // std dev = 0.426, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
%   | else return 0.009664086614663427;  // std dev = 0.359, 165.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=25 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.5845464830026603;  // std dev = 7.688, 424.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=353 */
%   | | | else return -0.10353276198328651;  // std dev = 3.943, 622.000 (wgt'ed) examples reached here.  /* #neg=606 #pos=16 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.13190616413477227;  // std dev = 2.106, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | | else return 0.21762551827738782;  // std dev = 3.655, 56.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=22 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.3411827428099923;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.03611607202501375;  // std dev = 0.385, 116.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=21 */
%   | else return -0.014616456233314043;  // std dev = 0.335, 70.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=9 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.46080670358576203;  // std dev = 7.688, 424.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=353 */
%   | | | else return -0.09232097192526202;  // std dev = 3.943, 622.000 (wgt'ed) examples reached here.  /* #neg=606 #pos=16 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.11635010562680988;  // std dev = 2.106, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | | else return 0.18392403758779968;  // std dev = 3.655, 56.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=22 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.2815735770744797;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.386198448632422;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.03158367585562574;  // std dev = 0.385, 116.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=21 */
%   | else return -0.012832594211188422;  // std dev = 0.335, 70.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=9 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.09189621293399616;  // std dev = 0.341, 1,046.000 (wgt'ed) examples reached here.  /* #neg=677 #pos=369 */
%   | | else return 0.13718717739544203;  // std dev = 0.475, 79.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=28 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.2242781068616906;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.2971060494206917;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then return 0.0756913298988895;  // std dev = 0.426, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, A) )
%   | | | then return 0.040898990954774346;  // std dev = 3.254, 71.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=13 */
%   | | | else return -0.03779146523485856;  // std dev = 1.880, 36.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=4 */
%   | | else return -0.012580881773815463;  // std dev = 0.344, 58.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=8 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.07709543528726302;  // std dev = 0.337, 1,046.000 (wgt'ed) examples reached here.  /* #neg=677 #pos=369 */
%   | | else return 0.11316792809366391;  // std dev = 0.475, 79.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=28 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.174070300419119;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.22385468926999735;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordauthor(M, J) )
%   | | | then return 0.07640568586117161;  // std dev = 1.936, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | | else return -0.008022714800765992;  // std dev = 3.212, 85.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=12 */
%   | | else return 0.20677078829241793;  // std dev = 0.481, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | else return -0.014794671563120544;  // std dev = 0.334, 70.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=9 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.06437886102403781;  // std dev = 0.334, 1,046.000 (wgt'ed) examples reached here.  /* #neg=677 #pos=369 */
%   | | else return 0.0920489859452212;  // std dev = 0.475, 79.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=28 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.25517224256948945;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.1805663044161454;  // std dev = 1.799, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return 0.12844391626015722;  // std dev = 1.874, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordvenue(A, L) )
%   | | | then return 0.1875981838653645;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return -0.010214595889428447;  // std dev = 3.439, 96.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=14 */
%   | | else return 0.17744744254669473;  // std dev = 0.481, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | else return -0.012987492535635416;  // std dev = 0.334, 70.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=9 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.053560168039793105;  // std dev = 0.331, 1,046.000 (wgt'ed) examples reached here.  /* #neg=677 #pos=369 */
%   | | else return 0.07402704671125444;  // std dev = 0.475, 79.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=28 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.20975771563253554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.13627630866189314;  // std dev = 1.799, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return 0.0968487289325834;  // std dev = 1.874, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, A) )
%   | | then if ( samebib(L, M), venue(M, B) )
%   | | | then return 0.480598990617739;  // std dev = 2.490, 28.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=18 */
%   | | | else return -0.15728281896649002;  // std dev = 0.198, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else return -0.0483816314285077;  // std dev = 0.299, 39.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=4 */
%   | else return -0.013966477937328508;  // std dev = 0.340, 60.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=8 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.04442680733721428;  // std dev = 0.329, 1,046.000 (wgt'ed) examples reached here.  /* #neg=677 #pos=369 */
%   | | else return 0.05900474122831468;  // std dev = 0.475, 79.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=28 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.17709649774527736;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.06359044701247399;  // std dev = 1.789, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.10495231012296484;  // std dev = 1.882, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then return -0.007699627767212725;  // std dev = 0.345, 79.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=11 */
%   | | else if ( haswordtitle(K, M), haswordauthor(N, M) )
%   | | | then return 0.0464192211869407;  // std dev = 1.985, 26.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=6 */
%   | | | else return 0.13177117035752772;  // std dev = 1.409, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | else return -0.01733108820445123;  // std dev = 0.311, 70.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=9 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03746106795585992;  // std dev = 0.340, 1,125.000 (wgt'ed) examples reached here.  /* #neg=728 #pos=397 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.15274385809367097;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.083283144873996;  // std dev = 1.800, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return 0.05098633844657826;  // std dev = 1.871, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.37771250010588087;  // std dev = 2.274, 21.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=11 */
%   | | | else return -0.1459351324651262;  // std dev = 0.067, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else if ( haswordtitle(J, M), haswordauthor(N, M) )
%   | | | then return 0.0394628143300149;  // std dev = 1.981, 26.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=6 */
%   | | | else return 0.10794053281327026;  // std dev = 1.396, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | else return -0.015207471692385186;  // std dev = 0.311, 70.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=9 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.030240254294706063;  // std dev = 0.326, 1,046.000 (wgt'ed) examples reached here.  /* #neg=677 #pos=369 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.020198169342291582;  // std dev = 2.106, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | | else return 0.04637700217996131;  // std dev = 3.655, 56.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=22 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.009189716044557124;  // std dev = 1.534, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return 0.22965339065729737;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return -0.02556781093153623;  // std dev = 1.128, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.09705158016535641;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.010093222962812459;  // std dev = 0.351, 116.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=21 */
%   | else return -0.0133651045061007;  // std dev = 0.312, 70.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=9 */


Results
   AUC ROC   = 0.758354
   AUC PR    = 0.746293
   CLL	      = -0.546371
   Precision = 0.745851 at threshold = 0.5
   Recall    = 0.932555
   F1        = 0.828818


Total learning time: 1528.4210090637207 seconds
Total inference time: 5.855 seconds
AUC ROC: 0.758354


Results scoring model
   AUC ROC   = 0.927764
   AUC PR    = 0.804096
   CLL	      = -0.38893
   Precision = 0.825221 at threshold = 0.5
   Recall    = 0.830735
   F1        = 0.827969


Total scoring time: 23.436 seconds
Parameter learned model CLL: -0.38893


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,true': 'samebib(E, F), venue(F, B)', 'true,true,false': 'title(G, D), venue(G, B)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true,true': [7.688, 71, 353], 'true,true,true,false': [4.401, 611, 20], 'true,true,false,true': [1.309, 12, 2], 'true,true,false,false': [3.655, 34, 22], 'true,false,true': [2.11e-08, 0, 3], 'true,false,false,true': [1.797, 6, 7], 'true,false,false,false': [1.879, 5, 12], 'false,true': [0.426, 16, 5], 'false,false': [0.359, 140, 25]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,true': 'samebib(E, F), venue(F, A)', 'true,true,false': 'title(G, D), venue(G, A)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true,true': [7.688, 71, 353], 'true,true,true,false': [3.943, 606, 16], 'true,true,false,true': [2.106, 17, 6], 'true,true,false,false': [3.655, 34, 22], 'true,false,true': [0.0, 0, 3], 'true,false,false,true': [1.797, 6, 7], 'true,false,false,false': [1.879, 5, 12], 'false,true': [0.385, 95, 21], 'false,false': [0.335, 61, 9]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,true': 'samebib(E, F), venue(F, A)', 'true,true,false': 'title(G, D), venue(G, A)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true,true': [7.688, 71, 353], 'true,true,true,false': [3.943, 606, 16], 'true,true,false,true': [2.106, 17, 6], 'true,true,false,false': [3.655, 34, 22], 'true,false,true': [1.05e-08, 0, 3], 'true,false,false,true': [1.797, 6, 7], 'true,false,false,false': [1.879, 5, 12], 'false,true': [0.385, 95, 21], 'false,false': [0.335, 61, 9]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,false': 'haswordvenue(A, F), haswordauthor(G, F)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)', 'false,false,true': 'title(N, M), venue(N, A)'}, {'true,true,true': [0.341, 677, 369], 'true,true,false': [0.475, 51, 28], 'true,false,true': [0.0, 0, 3], 'true,false,false,true': [1.797, 6, 7], 'true,false,false,false': [1.879, 5, 12], 'false,true': [0.426, 16, 5], 'false,false,true,true': [3.254, 58, 13], 'false,false,true,false': [1.88, 32, 4], 'false,false,false': [0.344, 50, 8]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,false': 'haswordvenue(A, F), haswordauthor(G, F)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordauthor(M, L)', 'false,true,true': 'haswordauthor(M, J)'}, {'true,true,true': [0.337, 677, 369], 'true,true,false': [0.475, 51, 28], 'true,false,true': [0.0, 0, 3], 'true,false,false,true': [1.797, 6, 7], 'true,false,false,false': [1.879, 5, 12], 'false,true,true,true': [1.936, 15, 5], 'false,true,true,false': [3.212, 73, 12], 'false,true,false': [0.481, 7, 4], 'false,false': [0.334, 61, 9]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,false': 'haswordvenue(A, F), haswordauthor(G, F)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordauthor(M, L)', 'false,true,true': 'haswordvenue(A, L)'}, {'true,true,true': [0.334, 677, 369], 'true,true,false': [0.475, 51, 28], 'true,false,true': [0.0, 0, 3], 'true,false,false,true': [1.799, 5, 9], 'true,false,false,false': [1.874, 6, 10], 'false,true,true,true': [1.414, 6, 3], 'false,true,true,false': [3.439, 82, 14], 'false,true,false': [0.481, 7, 4], 'false,false': [0.334, 61, 9]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,false': 'haswordvenue(A, F), haswordauthor(G, F)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'title(L, K), venue(L, A)', 'false,true,true': 'samebib(L, M), venue(M, B)'}, {'true,true,true': [0.331, 677, 369], 'true,true,false': [0.475, 51, 28], 'true,false,true': [0.0, 0, 3], 'true,false,false,true': [1.799, 5, 9], 'true,false,false,false': [1.874, 6, 10], 'false,true,true,true': [2.49, 10, 18], 'false,true,true,false': [0.198, 59, 0], 'false,true,false': [0.299, 35, 4], 'false,false': [0.34, 52, 8]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,false': 'haswordvenue(A, F), haswordauthor(G, F)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'title(L, K), venue(L, B)', 'false,true,false': 'haswordtitle(K, M), haswordauthor(N, M)'}, {'true,true,true': [0.329, 677, 369], 'true,true,false': [0.475, 51, 28], 'true,false,true': [0.0, 0, 3], 'true,false,false,true': [1.789, 6, 7], 'true,false,false,false': [1.882, 5, 12], 'false,true,true': [0.345, 68, 11], 'false,true,false,true': [1.985, 20, 6], 'false,true,false,false': [1.409, 7, 4], 'false,false': [0.311, 61, 9]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, B)', 'false,true,true': 'samebib(K, L), venue(L, A)', 'false,true,false': 'haswordtitle(J, M), haswordauthor(N, M)'}, {'true,true': [0.34, 728, 397], 'true,false,true': [0.0, 0, 3], 'true,false,false,true': [1.8, 5, 9], 'true,false,false,false': [1.871, 6, 10], 'false,true,true,true': [2.274, 10, 11], 'false,true,true,false': [0.067, 58, 0], 'false,true,false,true': [1.981, 20, 6], 'false,true,false,false': [1.396, 7, 4], 'false,false': [0.311, 61, 9]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true,true': [0.326, 677, 369], 'true,true,false,true': [2.106, 17, 6], 'true,true,false,false': [3.655, 34, 22], 'true,false,true,true': [1.534, 4, 7], 'true,false,true,false': [0.866, 1, 3], 'true,false,false,true': [1.128, 3, 4], 'true,false,false,false': [1.477, 3, 8], 'false,true': [0.351, 95, 21], 'false,false': [0.312, 61, 9]}]]
[{'': [0.23090925632603088, 0.13527575442247763], 'true': [0.22835832098763845, 0.2222222222222232], 'true,true': [0.22855371622378817, 0.22530612244898068], 'true,true,true': [0.13941237985047905, 0.030691102343023018], 'true,true,false': [0.12244897959183677, 0.23852040816326628], 'true,false': [1.4802973661668753e-16, 0.2322222222222219], 'true,false,false': [0.24852071005917156, 0.20761245674740453], 'false': [0.1814058956916098, 0.1285583103764932]}, {'': [0.19124731523317487, 0.13509795060189836], 'true': [0.1884127268447839, 0.21660063304284158], 'true,false': [0.0, 0.2301221286999698], 'true,false,false': [0.24852071005917173, 0.20761245674740458], 'true,true': [0.1854977492511186, 0.22673066625319038], 'true,true,false': [0.19281663516068084, 0.23852040816326575], 'true,true,true': [0.139412379850491, 0.02499689834629065], 'false': [0.14801783066221957, 0.11208270464950508]}, {'': [0.15401633306742676, 0.13495313140657056], 'true': [0.150883789458669, 0.21110024437806363], 'true,false': [3.700743415417188e-17, 0.2280273069474171], 'true,false,false': [0.2485207100591716, 0.20761245674740486], 'true,true': [0.14512521722894786, 0.22615661338419202], 'true,true,false': [0.19281663516068054, 0.23852040816326547], 'true,true,true': [0.13941237985048296, 0.02500143405268902], 'false': [0.14801206688922947, 0.11208225821512424]}, {'': [0.12742653899644224, 0.13484024508435172], 'false': [0.18112805113068747, 0.1283837634290701], 'false,false': [0.13341141240880508, 0.11863571207908945], 'false,false,true': [0.14917903058557294, 0.09820533049048275], 'true': [0.12409681143955908, 0.20794654868776502], 'true,false': [-3.700743415417188e-17, 0.2266417708903264], 'true,false,false': [0.24852071005917173, 0.20761245674740486], 'true,true': [0.11627597908140874, 0.22574136515516757]}, {'': [0.12434108295639007, 0.13448654286752945], 'false': [0.1475731234709435, 0.11171590009379832], 'false,true': [0.1350463388023366, 0.2314049586776859], 'false,true,true': [0.18749999999999994, 0.12134655709474455], 'true': [0.12142186597120957, 0.20656640116154643], 'true,false': [0.0, 0.22594797236860314], 'true,false,false': [0.24852071005917167, 0.20761245674740483], 'true,true': [0.11346154828718687, 0.22561065280367612]}, {'': [0.12207082287283637, 0.13366138316570503], 'false': [0.14641688024757787, 0.11171921267730302], 'false,true': [0.13475001906775808, 0.2314049586776861], 'false,true,true': [0.22222222222222232, 0.12319550895051412], 'true': [0.1193477391117292, 0.2059954444919085], 'true,false': [0.0, 0.2256416534073314], 'true,false,false': [0.23117989922328966, 0.21952787475639543], 'true,true': [0.11127542146508795, 0.22551744083778932]}, {'': [0.1203763314666418, 0.1326955854742007], 'false': [0.1405467741736343, 0.11550821201205203], 'false,true': [0.16050624345968686, 0.08960602101676593], 'false,true,true': [0.2213807666194668, 0.0006625049499142628], 'true': [0.11774160694299002, 0.20559223509446034], 'true,false': [0.0, 0.2253394553272283], 'true,false,false': [0.2311928998918644, 0.21949224211295998], 'true,true': [0.10957727649530619, 0.22545199839193883]}, {'': [0.11909680923334365, 0.1203122868544347], 'false': [0.13400066786030748, 0.09686526309131568], 'false,true': [0.1190360280766978, 0.16164856430967509], 'false,true,false': [0.15156601146120968, 0.18036089513335837], 'true': [0.11649566201675746, 0.20536617670606222], 'true,false': [0.0, 0.22516532313369284], 'true,false,false': [0.24621411052843392, 0.20832784331788368], 'true,true': [0.10825517883864642, 0.22540623889171085]}, {'': [0.1181165253199813, 0.11965872718663627], 'false': [0.1329853881616009, 0.0970244348961103], 'false,true': [0.1190400592320829, 0.15974352453468785], 'false,true,false': [0.1509424332704605, 0.1772509918285122], 'false,true,true': [0.24628764569267816, 7.723059163342135e-05], 'true': [0.11552544186809915, 0.2051562174178831], 'true,false': [-4.625929269271485e-18, 0.22498871129277526], 'true,false,false': [0.23153884622224988, 0.21877057083362694]}, {'': [0.11734673669002178, 0.11335698152581411], 'true': [0.11475459173914257, 0.2050076732546139], 'true,false': [0.21633214039394633, 0.19541312987140314], 'true,false,true': [0.21385542659632026, 0.1875], 'true,false,false': [0.18161422337292416, 0.19834710743801656], 'true,true': [0.10639626288157725, 0.22535568314390986], 'true,true,false': [0.19281663516068046, 0.23852040816326503], 'false': [0.12292162926146856, 0.09716380028611386]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,false;haswordvenue(A, F), haswordauthor(G, F).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,false;haswordvenue(A, F), haswordauthor(G, F).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,false;haswordvenue(A, F), haswordauthor(G, F).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,false;haswordvenue(A, F), haswordauthor(G, F).;true;true
6;false;haswordvenue(A, J), haswordtitle(K, J).;true;true
6;false,true;title(L, K), venue(L, A).;true;true
6;false,true,true;samebib(L, M), venue(M, B).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,false;haswordvenue(A, F), haswordauthor(G, F).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,false;haswordvenue(A, E), haswordauthor(F, E).;true;true
8;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
8;false,true;title(K, J), venue(K, B).;true;true
8;false,true,true;samebib(K, L), venue(L, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.6906961049108289;  // std dev = 7.688, 424.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=353 */
%   | | | else return -0.11015534382283312;  // std dev = 4.401, 631.000 (wgt'ed) examples reached here.  /* #neg=611 #pos=20 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.001006077956655051;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | | else return 0.25100607795665447;  // std dev = 3.655, 56.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=22 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.5504566274072047;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.5248156017661789;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.5854216623722396;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   else return 0.019439257680156797;  // std dev = 0.368, 186.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=30 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.5845464830026603;  // std dev = 7.688, 424.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=353 */
%   | | | else return -0.10353276198328651;  // std dev = 3.943, 622.000 (wgt'ed) examples reached here.  /* #neg=606 #pos=16 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.13190616413477227;  // std dev = 2.106, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | | else return 0.21762551827738782;  // std dev = 3.655, 56.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=22 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.7772208067759229;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.3286018878041443;  // std dev = 1.780, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.4807036454491751;  // std dev = 1.877, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.09386133051100912;  // std dev = 0.426, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
%   | else return 0.007281243930921991;  // std dev = 0.359, 165.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=25 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.46080670358576203;  // std dev = 7.688, 424.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=353 */
%   | | | else return -0.09232097192526202;  // std dev = 3.943, 622.000 (wgt'ed) examples reached here.  /* #neg=606 #pos=16 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.11635010562680988;  // std dev = 2.106, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | | else return 0.18392403758779968;  // std dev = 3.655, 56.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=22 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.6159333290465234;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.26920348932314125;  // std dev = 1.777, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.38617414249815324;  // std dev = 1.877, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.03398996105190035;  // std dev = 0.385, 116.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=21 */
%   | else return -0.016721757032776362;  // std dev = 0.335, 70.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=9 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.09189621293399616;  // std dev = 0.341, 1,046.000 (wgt'ed) examples reached here.  /* #neg=677 #pos=369 */
%   | | else return 0.13718717739544203;  // std dev = 0.475, 79.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=28 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.4641588871085591;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.2133460534896776;  // std dev = 1.775, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.2971028840637636;  // std dev = 1.877, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then return 0.07767233889320557;  // std dev = 0.426, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then if ( haswordtitle(M, N), haswordauthor(P, N) )
%   | | | then return -0.008226728388299756;  // std dev = 3.210, 85.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=12 */
%   | | | else return 0.21423316465982845;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else return -0.01263778695308901;  // std dev = 0.337, 69.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=9 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07962852589322474;  // std dev = 0.348, 1,125.000 (wgt'ed) examples reached here.  /* #neg=728 #pos=397 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.1995736651259657;  // std dev = 1.511, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return 0.3578757960755232;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.10635932249634797;  // std dev = 1.170, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.23991944569497897;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( title(M, L), venue(M, B) )
%   | | then return -0.009706028332909731;  // std dev = 0.346, 79.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=11 */
%   | | else if ( haswordtitle(L, N), haswordauthor(P, N) )
%   | | | then return 0.06638935040061417;  // std dev = 2.140, 26.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=6 */
%   | | | else return 0.18491821439462874;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | else return -0.013285597289360632;  // std dev = 0.335, 70.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=9 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06637729005395343;  // std dev = 0.345, 1,125.000 (wgt'ed) examples reached here.  /* #neg=728 #pos=397 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.15189672802297285;  // std dev = 1.510, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return 0.2701181690602801;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.08123479605765345;  // std dev = 1.171, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.1800831484271958;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( title(M, L), venue(M, A) )
%   | | then if ( samebib(M, N), venue(N, B) )
%   | | | then return 0.48297765804529835;  // std dev = 2.493, 28.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=18 */
%   | | | else return -0.15538085822384343;  // std dev = 0.185, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else return -0.04514506708020896;  // std dev = 0.304, 39.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=4 */
%   | else return -0.014682148309552662;  // std dev = 0.340, 60.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=8 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.0527920256139198;  // std dev = 0.331, 1,046.000 (wgt'ed) examples reached here.  /* #neg=677 #pos=369 */
%   | | else return 0.08570514404318408;  // std dev = 0.475, 79.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=28 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.29968887630116153;  // std dev = 0.028, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.07488723020432325;  // std dev = 1.731, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.1256974606766741;  // std dev = 1.876, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordauthor(M, J) )
%   | | | then return 0.05191647389033771;  // std dev = 1.772, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | | else return -0.0029842081774825347;  // std dev = 3.208, 85.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=12 */
%   | | else return 0.13878224144784349;  // std dev = 0.426, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | else return -0.01775992295025379;  // std dev = 0.312, 70.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=9 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.04378064740997058;  // std dev = 0.329, 1,046.000 (wgt'ed) examples reached here.  /* #neg=677 #pos=369 */
%   | | else return 0.06870371737327119;  // std dev = 0.475, 79.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=28 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.24083146055925117;  // std dev = 0.024, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.10516128805541679;  // std dev = 1.742, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return 0.055308650973632294;  // std dev = 1.863, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordvenue(A, L) )
%   | | | then return 0.19213246368093553;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return -0.011231461997127897;  // std dev = 3.333, 96.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=14 */
%   | | else return 0.11414554351254108;  // std dev = 0.422, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | else return -0.01557779051547239;  // std dev = 0.312, 70.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=9 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.1808072882633387;  // std dev = 0.943, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordtitle(E, C) )
%   | | then return 0.03689911680894057;  // std dev = 0.339, 1,120.000 (wgt'ed) examples reached here.  /* #neg=726 #pos=394 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.0865344752920508;  // std dev = 1.745, 15.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=10 */
%   | | | else return 0.05189513230890614;  // std dev = 1.871, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.3777385242453451;  // std dev = 2.273, 21.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=11 */
%   | | | else return -0.14582290057057365;  // std dev = 0.066, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else if ( haswordtitle(I, L), haswordvenue(A, L) )
%   | | | then return 0.06740073990992738;  // std dev = 2.236, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
%   | | | else return 0.003641840372533641;  // std dev = 0.924, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else return -0.013685904483178808;  // std dev = 0.312, 70.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=9 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.029727033523941116;  // std dev = 0.326, 1,046.000 (wgt'ed) examples reached here.  /* #neg=677 #pos=369 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.02714495921850498;  // std dev = 2.106, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | | else return 0.05325635716058384;  // std dev = 3.657, 56.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=22 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.18320586477106185;  // std dev = 0.021, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.017441941565884873;  // std dev = 1.725, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.06332431405303897;  // std dev = 1.877, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( title(M, L), venue(M, B) )
%   | | then return -0.008248437358810763;  // std dev = 0.324, 79.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=11 */
%   | | else return 0.04729600554888796;  // std dev = 0.397, 37.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=10 */
%   | else return -0.012040758463646778;  // std dev = 0.313, 70.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=9 */


Results
   AUC ROC   = 0.759833
   AUC PR    = 0.752997
   CLL	      = -0.545936
   Precision = 0.745587 at threshold = 0.5
   Recall    = 0.931258
   F1        = 0.828143


Total learning time: 1435.7599411010742 seconds
Total inference time: 5.043 seconds
AUC ROC: 0.759833


Results scoring model
   AUC ROC   = 0.927547
   AUC PR    = 0.804258
   CLL	      = -0.388678
   Precision = 0.828508 at threshold = 0.5
   Recall    = 0.828508
   F1        = 0.828508


Total scoring time: 21.717 seconds
Refined model CLL: -0.388678


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.759833
   AUC PR    = 0.752997
   CLL	      = -0.545936
   Precision = 0.745587 at threshold = 0.5
   Recall    = 0.931258
   F1        = 0.828143


Total learning time: 3009.3339501647947 seconds
Total inference time: 5.043 seconds
AUC ROC: 0.759833
Total revision time: 3009.3339501647947
Best scored revision CLL: -0.388678


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 12:35:09
{'AUC ROC': 0.759833, 'AUC PR': 0.752997, 'CLL': -0.545936, 'Precision': [0.745587, 0.5], 'Recall': 0.931258, 'F1': 0.828143, 'Learning time': 3009.3339501647947, 'Inference time': 5.043, 'parameter_0.2': {'AUC ROC': 0.758354, 'AUC PR': 0.746293, 'CLL': -0.546371, 'Precision': [0.745851, 0.5], 'Recall': 0.932555, 'F1': 0.828818, 'Learning time': 1528.4210090637207, 'Inference time': 5.855}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.6906961049108289;  // std dev = 7.688, 424.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=353 */
%   | | | else return -0.11015534382283312;  // std dev = 4.401, 631.000 (wgt'ed) examples reached here.  /* #neg=611 #pos=20 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.001006077956655051;  // std dev = 1.309, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | | else return 0.25100607795665447;  // std dev = 3.655, 56.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=22 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.3966104735610508;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.09624417319475045;  // std dev = 0.426, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
%   | else return 0.009664086614663427;  // std dev = 0.359, 165.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=25 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.5845464830026603;  // std dev = 7.688, 424.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=353 */
%   | | | else return -0.10353276198328651;  // std dev = 3.943, 622.000 (wgt'ed) examples reached here.  /* #neg=606 #pos=16 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.13190616413477227;  // std dev = 2.106, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | | else return 0.21762551827738782;  // std dev = 3.655, 56.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=22 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.43151685960868114;  // std dev = 1.578, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return 0.36942208749345407;  // std dev = 1.037, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.4415281974812335;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.5021342580872942;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   else return 0.017023185046073145;  // std dev = 0.368, 186.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=30 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.46080670358576203;  // std dev = 7.688, 424.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=353 */
%   | | | else return -0.09232097192526202;  // std dev = 3.943, 622.000 (wgt'ed) examples reached here.  /* #neg=606 #pos=16 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.11635010562680988;  // std dev = 2.106, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | | else return 0.18392403758779968;  // std dev = 3.655, 56.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=22 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.6345105788328872;  // std dev = 0.012, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.26676761969731855;  // std dev = 1.793, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.38616539239548414;  // std dev = 1.877, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.033994128202555235;  // std dev = 0.385, 116.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=21 */
%   | else return -0.016717630541369908;  // std dev = 0.335, 70.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=9 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09507664510506535;  // std dev = 0.352, 1,125.000 (wgt'ed) examples reached here.  /* #neg=728 #pos=397 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.2874711154774418;  // std dev = 1.561, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return 0.20354274142502674;  // std dev = 0.964, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.26734088012196416;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.31332494577972964;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then return 0.07767625343996472;  // std dev = 0.426, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then if ( haswordtitle(M, N), haswordauthor(P, N) )
%   | | | then return -0.008223035070619628;  // std dev = 3.210, 85.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=12 */
%   | | | else return 0.21423685797750858;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else return -0.012634218824325683;  // std dev = 0.337, 69.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=9 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.07657614021417876;  // std dev = 0.337, 1,046.000 (wgt'ed) examples reached here.  /* #neg=677 #pos=369 */
%   | | else return 0.12072702058896836;  // std dev = 0.475, 79.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=28 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.42216013417100107;  // std dev = 0.029, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.14931263111825904;  // std dev = 1.786, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.22385230469339823;  // std dev = 1.876, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then return 0.06693673465529933;  // std dev = 0.426, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then if ( haswordtitle(M, N), haswordauthor(P, N) )
%   | | | then return -0.007181067448662441;  // std dev = 3.210, 85.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=12 */
%   | | | else return 0.18492193804540713;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else return -0.011092234441292226;  // std dev = 0.337, 69.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=9 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.0639352036734078;  // std dev = 0.333, 1,046.000 (wgt'ed) examples reached here.  /* #neg=677 #pos=369 */
%   | | else return 0.09861994594453576;  // std dev = 0.475, 79.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=28 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.3239642625460533;  // std dev = 0.026, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.17967751649452415;  // std dev = 1.778, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return 0.11336314254116692;  // std dev = 1.881, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then return 0.057231015273617236;  // std dev = 0.426, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then if ( haswordtitle(M, N), haswordauthor(P, N) )
%   | | | then return -0.006276046182396529;  // std dev = 3.210, 85.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=12 */
%   | | | else return 0.15615258357643605;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else return -0.009749911094996476;  // std dev = 0.337, 69.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=9 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.053184388220323085;  // std dev = 0.331, 1,046.000 (wgt'ed) examples reached here.  /* #neg=677 #pos=369 */
%   | | else return 0.07958360627316599;  // std dev = 0.475, 79.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=28 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.25744929968031877;  // std dev = 0.023, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.07532617037037145;  // std dev = 1.779, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.13422161348498385;  // std dev = 1.878, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, A) )
%   | | then if ( samebib(L, M), venue(M, B) )
%   | | | then return 0.47751396373401267;  // std dev = 2.478, 28.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=18 */
%   | | | else return -0.1585982238491386;  // std dev = 0.254, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else return -0.045854593745127036;  // std dev = 0.304, 39.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=4 */
%   | else return -0.014006315352453043;  // std dev = 0.340, 60.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=8 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04547951568349055;  // std dev = 0.341, 1,125.000 (wgt'ed) examples reached here.  /* #neg=728 #pos=397 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.06858554365409662;  // std dev = 1.525, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return 0.253329354210702;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.07394813917653191;  // std dev = 0.445, 18.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=12 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.38018923520015435;  // std dev = 2.289, 21.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=11 */
%   | | | else return -0.1448181538445956;  // std dev = 0.057, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else if ( haswordtitle(J, M), haswordauthor(N, M) )
%   | | | then return 0.043026086815899325;  // std dev = 1.978, 26.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=6 */
%   | | | else return 0.11172089964831322;  // std dev = 1.399, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | else return -0.0167057041875954;  // std dev = 0.312, 70.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=9 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.036260758114022316;  // std dev = 0.327, 1,046.000 (wgt'ed) examples reached here.  /* #neg=677 #pos=369 */
%   | | else return 0.05423295383705875;  // std dev = 0.475, 79.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=28 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.19963812353119145;  // std dev = 0.019, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.02480345278612037;  // std dev = 1.761, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.0846278888248378;  // std dev = 1.877, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then return -0.006942250069046191;  // std dev = 0.327, 79.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=11 */
%   | | else if ( haswordtitle(K, M), haswordauthor(N, M) )
%   | | | then return 0.03651060111520236;  // std dev = 1.975, 26.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=6 */
%   | | | else return 0.09051373187599214;  // std dev = 1.389, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | else return -0.014664520973644502;  // std dev = 0.313, 70.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=9 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.029944012367203263;  // std dev = 0.326, 1,046.000 (wgt'ed) examples reached here.  /* #neg=677 #pos=369 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.023685338875175054;  // std dev = 2.106, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | | else return 0.050706461829364606;  // std dev = 3.655, 56.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=22 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.16965800526293984;  // std dev = 0.017, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.0186355043780495;  // std dev = 1.761, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.0649312291194032;  // std dev = 1.877, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( title(M, L), venue(M, B) )
%   | | then return -0.0060845662251348106;  // std dev = 0.327, 79.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=11 */
%   | | else return 0.04324848853509302;  // std dev = 0.396, 37.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=10 */
%   | else return -0.012892292764079594;  // std dev = 0.313, 70.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=9 */


Results
   AUC ROC   = 0.758402
   AUC PR    = 0.749964
   CLL	      = -0.545642
   Precision = 0.744898 at threshold = 0.5
   Recall    = 0.946822
   F1        = 0.833809


Total learning time: 1397.4671988487244 seconds
Total inference time: 5.286 seconds
AUC ROC: 0.758402


Dataset: 3_imdb_cora, Fold: 2, Type: Scratch (RDN-B), Time: 12:58:33
{'AUC ROC': 0.758402, 'AUC PR': 0.749964, 'CLL': -0.545642, 'Precision': [0.744898, 0.5], 'Recall': 0.946822, 'F1': 0.833809, 'Learning time': 1397.4671988487244, 'Inference time': 5.286}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.6839245914240899;  // std dev = 10.980, 838.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=692 */
%   | | | else return -0.10712336166449915;  // std dev = 6.517, 1,267.000 (wgt'ed) examples reached here.  /* #neg=1,223 #pos=44 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.1402002171507944;  // std dev = 2.810, 39.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=11 */
%   | | | else return 0.28533340111893;  // std dev = 5.020, 103.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=44 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.4945125714631487;  // std dev = 2.256, 22.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=14 */
%   | | | else return 0.24276431971489695;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.6914822684328457;  // std dev = 1.581, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   else return 0.02212742972316848;  // std dev = 0.370, 372.000 (wgt'ed) examples reached here.  /* #neg=311 #pos=61 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.5793469696720592;  // std dev = 10.983, 839.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=693 */
%   | | | else return -0.09549096379790349;  // std dev = 6.479, 1,267.000 (wgt'ed) examples reached here.  /* #neg=1,223 #pos=44 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.1338535221890428;  // std dev = 2.714, 38.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
%   | | | else return 0.24693623312123794;  // std dev = 5.020, 103.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=44 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.7930767848787396;  // std dev = 0.065, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.30023180995306425;  // std dev = 2.796, 32.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=16 */
%   | | | else return 0.5205842376033487;  // std dev = 2.452, 33.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=25 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.15543397260379446;  // std dev = 0.458, 40.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=12 */
%   | else return 0.003024334049576739;  // std dev = 0.355, 332.000 (wgt'ed) examples reached here.  /* #neg=283 #pos=49 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.4568266979180165;  // std dev = 10.980, 838.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=692 */
%   | | | else return -0.0849870213550844;  // std dev = 6.484, 1,267.000 (wgt'ed) examples reached here.  /* #neg=1,223 #pos=44 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.17822280562523599;  // std dev = 5.586, 135.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=51 */
%   | | | else return 0.3517825478343542;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.34568097211127624;  // std dev = 2.461, 28.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=18 */
%   | | | else return -0.017909359705475802;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.4216243017293238;  // std dev = 1.788, 16.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=11 */
%   | | | else return 0.47263095973637814;  // std dev = 1.576, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   else return 0.016895217662809145;  // std dev = 0.370, 372.000 (wgt'ed) examples reached here.  /* #neg=311 #pos=61 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09571716732140437;  // std dev = 0.357, 2,247.000 (wgt'ed) examples reached here.  /* #neg=1,456 #pos=791 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.5427971573619523;  // std dev = 0.121, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.17309810932158767;  // std dev = 2.751, 33.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=17 */
%   | | | else return 0.33702492917403;  // std dev = 2.366, 32.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=24 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordauthor(K, I) )
%   | | then if ( author(L, K), title(L, J) )
%   | | | then return 0.4994583902979581;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.15537236879258157;  // std dev = 2.603, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   | | else if ( haswordtitle(J, M), haswordauthor(N, M) )
%   | | | then return -0.008749022829206221;  // std dev = 4.733, 188.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=26 */
%   | | | else return 0.20589428130095602;  // std dev = 1.970, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
%   | else return -0.020136882291395056;  // std dev = 0.334, 133.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=17 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08017224212529077;  // std dev = 0.353, 2,247.000 (wgt'ed) examples reached here.  /* #neg=1,456 #pos=791 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.2194416273473403;  // std dev = 2.420, 28.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=18 */
%   | | | else return -0.04941883042214921;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.24944956541907445;  // std dev = 1.766, 16.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=11 */
%   | | | else return 0.2718520247561442;  // std dev = 1.573, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then if ( author(N, L), title(N, M) )
%   | | | then return 0.4180651789385335;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.13260539654317882;  // std dev = 2.603, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   | | else return -0.16442298163908872;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 7.016850517417441E-4;  // std dev = 0.354, 332.000 (wgt'ed) examples reached here.  /* #neg=283 #pos=49 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0667953845101866;  // std dev = 0.350, 2,247.000 (wgt'ed) examples reached here.  /* #neg=1,456 #pos=791 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.20800337490188692;  // std dev = 1.996, 22.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=14 */
%   | | | else return -0.03612162704433609;  // std dev = 1.667, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.19107471277135576;  // std dev = 1.860, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.2065775643726823;  // std dev = 1.573, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordauthor(L, J) )
%   | | then return 0.13084256864759072;  // std dev = 0.472, 34.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=12 */
%   | | else if ( haswordtitle(K, M), haswordauthor(N, M) )
%   | | | then return -0.007742556814487267;  // std dev = 4.733, 188.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=26 */
%   | | | else return 0.1780508223918177;  // std dev = 1.970, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
%   | else return -0.016735746586724793;  // std dev = 0.334, 133.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=17 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.055413004962098146;  // std dev = 0.348, 2,247.000 (wgt'ed) examples reached here.  /* #neg=1,456 #pos=791 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.33359660118924833;  // std dev = 0.171, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.06287614349698319;  // std dev = 2.700, 33.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=17 */
%   | | | else return 0.14757383861692921;  // std dev = 2.313, 32.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=24 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( haswordtitle(K, I) )
%   | | then return 0.10759370839697532;  // std dev = 0.472, 34.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=12 */
%   | | else return -0.14102059646266132;  // std dev = 3.73e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return -0.010151212437874162;  // std dev = 0.342, 210.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=29 */
%   | | else if ( haswordvenue(A, N), haswordauthor(P, N) )
%   | | | then return -0.14457555423678567;  // std dev = 0.003, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.03358357947055775;  // std dev = 4.053, 112.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=20 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04581287106397982;  // std dev = 0.346, 2,247.000 (wgt'ed) examples reached here.  /* #neg=1,456 #pos=791 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.13074697144780803;  // std dev = 1.971, 22.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=14 */
%   | | | else return -0.057112630223851484;  // std dev = 1.650, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.12548111595202435;  // std dev = 1.857, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.1266173839003318;  // std dev = 1.573, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordauthor(M, J) )
%   | | | then return 0.08728897976151234;  // std dev = 2.749, 34.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=12 */
%   | | | else return -0.007996050979196484;  // std dev = 4.724, 188.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=26 */
%   | | else return 0.15248688311932473;  // std dev = 0.478, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
%   | else return -0.01269397747705814;  // std dev = 0.334, 133.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=17 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03777191357389805;  // std dev = 0.345, 2,247.000 (wgt'ed) examples reached here.  /* #neg=1,456 #pos=791 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.10023335858700945;  // std dev = 1.970, 22.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=14 */
%   | | | else return -0.04362115308137575;  // std dev = 1.649, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else return 0.09842339777648224;  // std dev = 0.412, 35.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=27 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( haswordtitle(J, H) )
%   | | then return 0.07005225886797284;  // std dev = 0.471, 34.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=12 */
%   | | else return -0.12340715167941639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return -0.009725290108761522;  // std dev = 0.342, 210.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=29 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.025590400667664905;  // std dev = 4.062, 116.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=20 */
%   | | | else return -0.13822754084391725;  // std dev = 0.024, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.031073633248586183;  // std dev = 0.344, 2,247.000 (wgt'ed) examples reached here.  /* #neg=1,456 #pos=791 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.2535649225769864;  // std dev = 0.212, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.04166956985686293;  // std dev = 0.437, 65.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=41 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( haswordtitle(I, G) )
%   | | then return 0.12267720406931286;  // std dev = 0.424, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
%   | | else return -0.14030482958269325;  // std dev = 0.153, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, A) )
%   | | | then return 0.021544019403541368;  // std dev = 4.965, 169.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=32 */
%   | | | else return -0.13814083219963783;  // std dev = 1.078, 50.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=1 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.03565014066003419;  // std dev = 4.085, 110.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=21 */
%   | | | else return -0.12276632170932848;  // std dev = 0.021, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 0.742456
   AUC PR    = 0.743234
   CLL	      = -0.555017
   Precision = 0.744637 at threshold = 0.5
   Recall    = 0.945525
   F1        = 0.833143


Total learning time: 2560.691841840744 seconds
Total inference time: 3.783 seconds
AUC ROC: 0.742456


Results scoring model
   AUC ROC   = 0.88928
   AUC PR    = 0.784367
   CLL	      = -0.402677
   Precision = 0.824522 at threshold = 0.5
   Recall    = 0.816258
   F1        = 0.820369


Total scoring time: 31.895 seconds
Parameter learned model CLL: -0.402677


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,true': 'samebib(E, F), venue(F, A)', 'true,true,false': 'title(G, D), venue(G, A)', 'true,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'true,false,true': 'title(J, I), venue(J, A)', 'true,false,false': 'haswordvenue(A, K), haswordtitle(L, K)'}, {'true,true,true,true': [10.98, 146, 692], 'true,true,true,false': [6.517, 1, 44], 'true,true,false,true': [2.81, 28, 11], 'true,true,false,false': [5.02, 59, 44], 'true,false,true,true': [2.256, 8, 14], 'true,false,true,false': [1.754, 8, 5], 'true,false,false,true': [1.879, 5, 12], 'true,false,false,false': [1.581, 3, 15], 'false': [0.37, 311, 61]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,true': 'samebib(E, F), venue(F, B)', 'true,true,false': 'title(G, D), venue(G, B)', 'true,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true,true': [10.983, 146, 693], 'true,true,true,false': [6.479, 1, 44], 'true,true,false,true': [2.714, 28, 10], 'true,true,false,false': [5.02, 59, 44], 'true,false,true': [0.065, 0, 5], 'true,false,false,true': [2.796, 16, 16], 'true,false,false,false': [2.452, 8, 25], 'false,true': [0.458, 28, 12], 'false,false': [0.355, 283, 49]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,true': 'samebib(E, F), venue(F, A)', 'true,true,false': 'haswordtitle(D, G), haswordauthor(H, G)', 'true,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'true,false,true': 'haswordtitle(J, K), haswordauthor(L, K)', 'true,false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true,true,true': [10.98, 146, 692], 'true,true,true,false': [6.484, 1, 44], 'true,true,false,true': [5.586, 84, 51], 'true,true,false,false': [1.309, 3, 4], 'true,false,true,true': [2.461, 10, 18], 'true,false,true,false': [1.225, 6, 2], 'true,false,false,true': [1.788, 5, 11], 'true,false,false,false': [1.576, 3, 15], 'false': [0.37, 311, 61]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordauthor(K, I)', 'false,true,true': 'author(L, K), title(L, J)', 'false,true,false': 'haswordtitle(J, M), haswordauthor(N, M)'}, {'true,true': [0.357, 1, 791], 'true,false,true': [0.121, 0, 5], 'true,false,false,true': [2.751, 16, 17], 'true,false,false,false': [2.366, 8, 24], 'false,true,true,true': [0.816, 1, 2], 'false,true,true,false': [2.603, 21, 10], 'false,true,false,true': [4.733, 162, 26], 'false,true,false,false': [1.97, 11, 6], 'false,false': [0.334, 116, 17]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false,true': 'haswordtitle(M, K)', 'false,true,true': 'author(N, L), title(N, M)'}, {'true,true': [0.353, 1, 791], 'true,false,true,true': [2.42, 10, 18], 'true,false,true,false': [1.225, 6, 2], 'true,false,false,true': [1.766, 5, 11], 'true,false,false,false': [1.573, 3, 15], 'false,true,true,true': [0.816, 1, 2], 'false,true,true,false': [2.603, 21, 10], 'false,true,false': [0.0, 6, 0], 'false,false': [0.354, 283, 49]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, A)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordauthor(L, J)', 'false,true,false': 'haswordtitle(K, M), haswordauthor(N, M)'}, {'true,true': [0.35, 1, 791], 'true,false,true,true': [1.996, 8, 14], 'true,false,true,false': [1.667, 8, 5], 'true,false,false,true': [1.86, 5, 12], 'true,false,false,false': [1.573, 3, 15], 'false,true,true': [0.472, 22, 12], 'false,true,false,true': [4.733, 162, 26], 'false,true,false,false': [1.97, 11, 6], 'false,false': [0.334, 116, 17]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,true': 'haswordtitle(K, I)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)', 'false,false,false': 'haswordvenue(A, N), haswordauthor(P, N)'}, {'true,true': [0.348, 1, 791], 'true,false,true': [0.171, 0, 5], 'true,false,false,true': [2.7, 16, 17], 'true,false,false,false': [2.313, 8, 24], 'false,true,true': [0.472, 22, 12], 'false,true,false': [3.73e-09, 6, 0], 'false,false,true': [0.342, 181, 29], 'false,false,false,true': [0.003, 10, 0], 'false,false,false,false': [4.053, 92, 20]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, A)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordauthor(M, L)', 'false,true,true': 'haswordauthor(M, J)'}, {'true,true': [0.346, 1, 791], 'true,false,true,true': [1.971, 8, 14], 'true,false,true,false': [1.65, 8, 5], 'true,false,false,true': [1.857, 5, 12], 'true,false,false,false': [1.573, 3, 15], 'false,true,true,true': [2.749, 22, 12], 'false,true,true,false': [4.724, 162, 26], 'false,true,false': [0.478, 11, 6], 'false,false': [0.334, 116, 17]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, A)', 'false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,true': 'haswordtitle(J, H)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true': [0.345, 1, 791], 'true,false,true,true': [1.97, 8, 14], 'true,false,true,false': [1.649, 8, 5], 'true,false,false': [0.412, 8, 27], 'false,true,true': [0.471, 22, 12], 'false,true,false': [0.0, 6, 0], 'false,false,true': [0.342, 181, 29], 'false,false,false,true': [4.062, 96, 20], 'false,false,false,false': [0.024, 6, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false,true': 'haswordtitle(I, G)', 'false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,false,true': 'title(L, K), venue(L, A)', 'false,false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true': [0.344, 1, 791], 'true,false,true': [0.212, 0, 5], 'true,false,false': [0.437, 24, 41], 'false,true,true': [0.424, 18, 7], 'false,true,false': [0.153, 12, 0], 'false,false,true,true': [4.965, 137, 32], 'false,false,true,false': [1.078, 49, 1], 'false,false,false,true': [4.085, 89, 21], 'false,false,false,false': [0.021, 6, 0]}]]
[{'': [0.23074649123806196, 0.1370895479246165], 'true': [0.22810337632595298, 0.22530612244897985], 'true,true': [0.22739298469318214, 0.23730410632810967], 'true,true,false': [0.2024983563445097, 0.2446978980111234], 'true,true,true': [0.14387022174629752, 0.03352168986394424], 'true,false': [0.24816326530612207, 0.1763265306122462], 'true,false,true': [0.23140495867768554, 0.2366863905325442], 'true,false,false': [0.20761245674740453, 0.1388888888888886]}, {'': [0.19233908315354012, 0.13708954792461342], 'true': [0.18943015443808595, 0.2185058169007845], 'true,false': [0.0008466583304810093, 0.22488161535433565], 'true,false,false': [0.24422174504268196, 0.18222345549609476], 'true,true': [0.18636122158426321, 0.23352678422240544], 'true,true,false': [0.19390581717451547, 0.24469789801112274], 'true,true,true': [0.14377994891063783, 0.033131020813442325], 'false': [0.20999999999999946, 0.12580744665408405]}, {'': [0.15630918279021327, 0.13654471538959626], 'true': [0.1531891000852538, 0.20957798333869126], 'true,false': [0.23273796648286402, 0.16769227380397997], 'true,false,true': [0.21628578212132332, 0.18749999999999997], 'true,false,false': [0.19981925404881298, 0.13791063842559564], 'true,true': [0.1475895767913431, 0.23325098351467402], 'true,true,false': [0.23116213042107375, 0.24489795918367344], 'true,true,true': [0.143870221746294, 0.03318257159342889]}, {'': [0.13042446452907727, 0.13653879639598607], 'false': [0.1492885338946102, 0.11173173500531415], 'false,true': [0.22837370242214536, 0.13173111243307695], 'false,true,true': [0.2222222222222222, 0.21852237252861614], 'false,true,false': [0.1191715708465383, 0.2283737024221452], 'true': [0.1272905237106626, 0.20004602942469846], 'true,false': [0.0029502280916752443, 0.209241599004567], 'true,false,false': [0.22929292156170267, 0.17492096377430766]}, {'': [0.1272076793127782, 0.13492318007924023], 'false': [0.20483125002614347, 0.12522863860955608], 'false,true': [0.2254044680249064, 0.0], 'false,true,true': [0.22222222222222213, 0.21852237252861598], 'true': [0.12462285545015572, 0.19407268709640255], 'true,false': [0.21683041017689492, 0.1646659791809507], 'true,false,true': [0.2091469838698447, 0.1875], 'true,false,false': [0.19499980313499857, 0.13746640590628637]}, {'': [0.12484287005608848, 0.13391499510843935], 'false': [0.14578039252911945, 0.11146375888108062], 'false,true': [0.22277224672964738, 0.13085253996120885], 'false,true,false': [0.11917157084653808, 0.22837370242214555], 'true': [0.12255808392542338, 0.19008424099255622], 'true,false': [0.20715751298815088, 0.1696719524185731], 'true,false,true': [0.1811545569710813, 0.21370153363128008], 'true,false,false': [0.20358482322693247, 0.13752639419039495]}, {'': [0.123056611854758, 0.13298593296509043], 'false': [0.19702592376533873, 0.12474717949197438], 'false,true': [0.22252384354268423, 2.3129646346357427e-18], 'false,false': [0.11730554290657617, 0.13701975776178169], 'false,false,false': [1.0077115393636316e-06, 0.14665187990077036], 'true': [0.12096120073171948, 0.18615622645955004], 'true,false': [0.005861236606211251, 0.19627852937068796], 'true,false,false': [0.22097472049403719, 0.1671685501911216]}, {'': [0.12173777238810146, 0.1323495948959137], 'false': [0.14375491993122175, 0.1112888044929973], 'false,true': [0.1357611918215818, 0.22837370242214552], 'false,true,true': [0.2223393596482912, 0.11871292427816163], 'true': [0.11972397947356943, 0.18417349887871326], 'true,false': [0.19698420542430833, 0.16924411709373358], 'true,false,true': [0.17657759145896496, 0.20933541639223624], 'true,false,false': [0.20293261115731606, 0.1374265789256132]}, {'': [0.12070951231911627, 0.13176303902089556], 'false': [0.19364562466393326, 0.12412882299471366], 'false,true': [0.22220440042816703, -2.3129646346357427e-18], 'false,false': [0.11668082826283578, 0.136479135902529], 'false,false,false': [0.14221363885260743, 9.557982270584862e-05], 'true': [0.11876216462656891, 0.18204217676676923], 'true,false': [0.19341793471224833, 0.1693340180939969], 'true,false,true': [0.17644232915347213, 0.209138149678041]}, {'': [0.11992971096440137, 0.13142771012011786], 'false': [0.1373804054996729, 0.13062942225098784], 'false,true': [0.17995324736328797, 0.0019575592587554543], 'false,false': [0.12234681297394122, 0.14509283361374212], 'false,false,false': [0.15170493731354995, 7.321425698921201e-05], 'false,false,true': [0.1458413331973969, 0.023257829780631612], 'true': [0.11801124366836657, 0.18087041343699053], 'true,false': [0.00897732033209655, 0.19088584188155927]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(B, K), haswordauthor(L, K).;true;true
4;false,true;haswordtitle(M, K).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(B, I), haswordauthor(J, I).;true;true
6;false,true;haswordtitle(K, I).;true;true
6;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
6;false,false,false;haswordvenue(A, N), haswordauthor(P, N).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(B, H), haswordauthor(I, H).;true;true
8;false,true;haswordtitle(J, H).;true;true
8;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;true
8;false,false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(A, G), haswordauthor(H, G).;true;true
9;false,true;haswordtitle(I, G).;true;true
9;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;true
9;false,false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.6839245914240899;  // std dev = 10.980, 838.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=692 */
%   | | | else return -0.10712336166449915;  // std dev = 6.517, 1,267.000 (wgt'ed) examples reached here.  /* #neg=1,223 #pos=44 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.1402002171507944;  // std dev = 2.810, 39.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=11 */
%   | | | else return 0.28533340111893;  // std dev = 5.020, 103.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=44 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.4945125714631487;  // std dev = 2.256, 22.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=14 */
%   | | | else return 0.24276431971489695;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.6914822684328457;  // std dev = 1.581, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   else return 0.02212742972316848;  // std dev = 0.370, 372.000 (wgt'ed) examples reached here.  /* #neg=311 #pos=61 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.5793469696720592;  // std dev = 10.983, 839.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=693 */
%   | | | else return -0.09549096379790349;  // std dev = 6.479, 1,267.000 (wgt'ed) examples reached here.  /* #neg=1,223 #pos=44 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.1338535221890428;  // std dev = 2.714, 38.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
%   | | | else return 0.24693623312123794;  // std dev = 5.020, 103.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=44 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.7930767848787396;  // std dev = 0.065, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.30023180995306425;  // std dev = 2.796, 32.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=16 */
%   | | | else return 0.5205842376033487;  // std dev = 2.452, 33.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=25 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.03953439101383564;  // std dev = 0.388, 239.000 (wgt'ed) examples reached here.  /* #neg=195 #pos=44 */
%   | else return -0.016746478524025204;  // std dev = 0.334, 133.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=17 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.4568266979180165;  // std dev = 10.980, 838.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=692 */
%   | | | else return -0.0849870213550844;  // std dev = 6.484, 1,267.000 (wgt'ed) examples reached here.  /* #neg=1,223 #pos=44 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.17822280562523599;  // std dev = 5.586, 135.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=51 */
%   | | | else return 0.3517825478343542;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.34568097211127624;  // std dev = 2.461, 28.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=18 */
%   | | | else return -0.017909359705475802;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.4216243017293238;  // std dev = 1.788, 16.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=11 */
%   | | | else return 0.47263095973637814;  // std dev = 1.576, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   else return 0.016963046686930914;  // std dev = 0.370, 372.000 (wgt'ed) examples reached here.  /* #neg=311 #pos=61 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.09134267063810343;  // std dev = 0.346, 2,106.000 (wgt'ed) examples reached here.  /* #neg=1,369 #pos=737 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.1545470188090747;  // std dev = 5.544, 134.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=50 */
%   | | | else return 0.2856442981336694;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.5427971573619523;  // std dev = 0.121, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.17309810932158767;  // std dev = 2.751, 33.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=17 */
%   | | | else return 0.33702492917403;  // std dev = 2.366, 32.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=24 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then if ( haswordtitle(N, L) )
%   | | then return 0.20124705378982005;  // std dev = 0.478, 34.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=12 */
%   | | else return -0.1445928117259516;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.0013872958998590848;  // std dev = 0.355, 332.000 (wgt'ed) examples reached here.  /* #neg=283 #pos=49 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0800847858073367;  // std dev = 0.353, 2,247.000 (wgt'ed) examples reached here.  /* #neg=1,456 #pos=791 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.4098057739458417;  // std dev = 0.118, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.13396011842750094;  // std dev = 2.746, 33.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=17 */
%   | | | else return 0.2551197386508558;  // std dev = 2.361, 32.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=24 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( haswordtitle(K, I) )
%   | | then if ( author(L, J), title(L, K) )
%   | | | then return 0.48722400673728344;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1431379852319072;  // std dev = 2.603, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   | | else return -0.12761100416599788;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return -0.009332735280350404;  // std dev = 0.345, 210.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=29 */
%   | | else return 0.012767642649499209;  // std dev = 0.370, 122.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06670970821715615;  // std dev = 0.350, 2,247.000 (wgt'ed) examples reached here.  /* #neg=1,456 #pos=791 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.10932384216588592;  // std dev = 0.456, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   | | else return 0.20879083228219197;  // std dev = 0.411, 35.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=27 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( haswordtitle(I, G) )
%   | | then if ( author(J, H), title(J, I) )
%   | | | then return 0.4041451899459693;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.12108780618832903;  // std dev = 2.603, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   | | else return -0.11406654665663395;  // std dev = 3.73e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return -0.008163645382962206;  // std dev = 0.345, 210.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=29 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.019249401034883387;  // std dev = 4.068, 116.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=20 */
%   | | | else return -0.14600609923742755;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05533167787900839;  // std dev = 0.348, 2,247.000 (wgt'ed) examples reached here.  /* #neg=1,456 #pos=791 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.28623057296409654;  // std dev = 0.116, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.10872363015741959;  // std dev = 0.450, 65.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=41 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( haswordtitle(I, G) )
%   | | then if ( author(J, H), title(J, I) )
%   | | | then return 0.31887465590968994;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1009005480661423;  // std dev = 2.603, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   | | else return -0.10303700932648342;  // std dev = 3.73e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return -0.00714731273790551;  // std dev = 0.345, 210.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=29 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.01673595318133532;  // std dev = 4.068, 116.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=20 */
%   | | | else return -0.12872472584144137;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.045737530500166906;  // std dev = 0.346, 2,247.000 (wgt'ed) examples reached here.  /* #neg=1,456 #pos=791 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.05434490351169186;  // std dev = 0.454, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   | | else return 0.1328599058488126;  // std dev = 0.411, 35.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=27 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( haswordtitle(I, G) )
%   | | then if ( author(J, H), title(J, I) )
%   | | | then return 0.24352366847425114;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.0830039640152838;  // std dev = 2.603, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   | | else return -0.09389624919446427;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return -0.0062623271842224;  // std dev = 0.345, 210.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=29 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.014523443762643095;  // std dev = 4.068, 116.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=20 */
%   | | | else return -0.11496428548555992;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.037703434875451074;  // std dev = 0.345, 2,247.000 (wgt'ed) examples reached here.  /* #neg=1,456 #pos=791 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.03467322586152807;  // std dev = 0.457, 36.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=20 */
%   | | else return 0.11241319973591243;  // std dev = 0.405, 34.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=26 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( haswordtitle(I, G) )
%   | | then if ( author(J, H), title(J, I) )
%   | | | then return 0.1832507205772365;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.06755729692280825;  // std dev = 2.603, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   | | else return -0.08620645367304565;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return -0.005490609435542059;  // std dev = 0.345, 210.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=29 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then return -0.14861972607693594;  // std dev = 0.071, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.02074243435710036;  // std dev = 4.045, 112.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=20 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.031012319139687862;  // std dev = 0.343, 2,247.000 (wgt'ed) examples reached here.  /* #neg=1,456 #pos=791 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.026491241254949192;  // std dev = 0.457, 36.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=20 */
%   | | else return 0.08822542487659564;  // std dev = 0.405, 34.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=26 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( haswordtitle(I, G) )
%   | | then return 0.11620841205803532;  // std dev = 0.421, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
%   | | else return -0.1430396650620961;  // std dev = 0.145, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, A) )
%   | | | then return 0.030816331737639504;  // std dev = 5.009, 169.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=32 */
%   | | | else return -0.14271442691503597;  // std dev = 1.098, 50.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=1 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.023982205659621423;  // std dev = 4.072, 110.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=21 */
%   | | | else return -0.09703090171964977;  // std dev = 0.030, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 0.739676
   AUC PR    = 0.742353
   CLL	      = -0.557658
   Precision = 0.744637 at threshold = 0.5
   Recall    = 0.945525
   F1        = 0.833143


Total learning time: 2326.9086151123047 seconds
Total inference time: 4.086 seconds
AUC ROC: 0.739676


Results scoring model
   AUC ROC   = 0.901081
   AUC PR    = 0.790483
   CLL	      = -0.40329
   Precision = 0.821948 at threshold = 0.5
   Recall    = 0.817372
   F1        = 0.819654


Total scoring time: 32.135 seconds
Refined model CLL: -0.40329


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.742456
   AUC PR    = 0.743234
   CLL	      = -0.555017
   Precision = 0.744637 at threshold = 0.5
   Recall    = 0.945525
   F1        = 0.833143


Total learning time: 4951.630456953049 seconds
Total inference time: 3.783 seconds
AUC ROC: 0.742456
Total revision time: 4951.630456953049
Best scored revision CLL: -0.402677


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 14:21:18
{'AUC ROC': 0.742456, 'AUC PR': 0.743234, 'CLL': -0.555017, 'Precision': [0.744637, 0.5], 'Recall': 0.945525, 'F1': 0.833143, 'Learning time': 4951.630456953049, 'Inference time': 3.783, 'parameter_0.4': {'AUC ROC': 0.742456, 'AUC PR': 0.743234, 'CLL': -0.555017, 'Precision': [0.744637, 0.5], 'Recall': 0.945525, 'F1': 0.833143, 'Learning time': 2560.691841840744, 'Inference time': 3.783}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.6839245914240899;  // std dev = 10.980, 838.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=692 */
%   | | | else return -0.10712336166449915;  // std dev = 6.517, 1,267.000 (wgt'ed) examples reached here.  /* #neg=1,223 #pos=44 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.1402002171507944;  // std dev = 2.810, 39.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=11 */
%   | | | else return 0.28533340111893;  // std dev = 5.020, 103.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=44 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.27920156667845974;  // std dev = 2.152, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
%   | | | else return 0.5456489350995123;  // std dev = 1.854, 16.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.5640312880406888;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.6914822684328457;  // std dev = 1.581, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   else return 0.02212742972316848;  // std dev = 0.370, 372.000 (wgt'ed) examples reached here.  /* #neg=311 #pos=61 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.5793469696720592;  // std dev = 10.983, 839.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=693 */
%   | | | else return -0.09549096379790349;  // std dev = 6.479, 1,267.000 (wgt'ed) examples reached here.  /* #neg=1,223 #pos=44 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.1338535221890428;  // std dev = 2.714, 38.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
%   | | | else return 0.24693623312123794;  // std dev = 5.020, 103.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=44 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.4114614769169119;  // std dev = 2.452, 26.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=16 */
%   | | | else return 0.14925559260362375;  // std dev = 1.425, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.48074388375574334;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.5851860008555358;  // std dev = 1.581, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   else return 0.01941246722744885;  // std dev = 0.370, 372.000 (wgt'ed) examples reached here.  /* #neg=311 #pos=61 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.4568266979180165;  // std dev = 10.980, 838.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=692 */
%   | | | else return -0.0849870213550844;  // std dev = 6.484, 1,267.000 (wgt'ed) examples reached here.  /* #neg=1,223 #pos=44 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.17822280562523599;  // std dev = 5.586, 135.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=51 */
%   | | | else return 0.3517825478343542;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.3643723046529758;  // std dev = 2.481, 28.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=18 */
%   | | | else return 0.002005478954509421;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.38983220853667133;  // std dev = 1.835, 16.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=11 */
%   | | | else return 0.46125983910675533;  // std dev = 1.581, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   else return 0.01699518868973196;  // std dev = 0.370, 372.000 (wgt'ed) examples reached here.  /* #neg=311 #pos=61 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09571716732140437;  // std dev = 0.357, 2,247.000 (wgt'ed) examples reached here.  /* #neg=1,456 #pos=791 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.6159055752946968;  // std dev = 0.135, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.18067328178544095;  // std dev = 2.708, 32.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=16 */
%   | | | else return 0.3123493161275444;  // std dev = 2.436, 33.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=25 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordauthor(K, I) )
%   | | then if ( author(L, K), title(L, J) )
%   | | | then return 0.5175397079067586;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.17345368640138248;  // std dev = 2.603, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   | | else if ( haswordtitle(J, M), haswordauthor(N, M) )
%   | | | then return -0.010829086419482298;  // std dev = 4.733, 188.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=26 */
%   | | | else return 0.2038142177106804;  // std dev = 1.970, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
%   | else return -0.021307409887727384;  // std dev = 0.334, 133.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=17 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08017224212529077;  // std dev = 0.353, 2,247.000 (wgt'ed) examples reached here.  /* #neg=1,456 #pos=791 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.4665532480579227;  // std dev = 0.140, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.12870852561542295;  // std dev = 2.722, 33.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=17 */
%   | | | else return 0.25062141087656803;  // std dev = 2.393, 32.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=24 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( haswordtitle(K, I) )
%   | | then if ( author(L, J), title(L, K) )
%   | | | then return 0.4394202417505247;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.15008055340251436;  // std dev = 2.603, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   | | else return -0.14644346565864394;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return -0.011262627694893982;  // std dev = 0.344, 210.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=29 */
%   | | else return 0.016240988899802352;  // std dev = 0.370, 122.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0667953845101866;  // std dev = 0.350, 2,247.000 (wgt'ed) examples reached here.  /* #neg=1,456 #pos=791 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.3558221499287579;  // std dev = 0.127, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.0972423653001469;  // std dev = 2.684, 32.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=16 */
%   | | | else return 0.18829762907729788;  // std dev = 2.432, 33.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=25 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordauthor(K, I) )
%   | | then if ( author(L, K), title(L, J) )
%   | | | then return 0.3533168905202397;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.12759445163705707;  // std dev = 2.603, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   | | else if ( haswordtitle(J, M), haswordauthor(N, M) )
%   | | | then return -0.010188347589144395;  // std dev = 4.730, 188.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=26 */
%   | | | else return 0.17769790316292375;  // std dev = 1.970, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
%   | else return -0.016656524849798158;  // std dev = 0.334, 133.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=17 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.055413004962098146;  // std dev = 0.348, 2,247.000 (wgt'ed) examples reached here.  /* #neg=1,456 #pos=791 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.13310119156860473;  // std dev = 2.390, 28.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=18 */
%   | | | else return -0.08165542792307091;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.15964683765528667;  // std dev = 1.807, 16.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=11 */
%   | | | else return 0.1601788853595898;  // std dev = 1.572, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then if ( haswordvenue(A, M) )
%   | | | then return 0.17304258086840407;  // std dev = 2.074, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
%   | | | else return -0.005866645385343123;  // std dev = 5.047, 201.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=31 */
%   | | else return 0.15051762864160376;  // std dev = 0.478, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
%   | else return -0.01461009158312006;  // std dev = 0.334, 133.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=17 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04581287106397982;  // std dev = 0.346, 2,247.000 (wgt'ed) examples reached here.  /* #neg=1,456 #pos=791 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.06480813956173975;  // std dev = 0.453, 36.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=20 */
%   | | else return 0.12349034683602093;  // std dev = 0.411, 34.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=26 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( haswordtitle(I, G) )
%   | | then if ( author(J, H), title(J, I) )
%   | | | then return 0.259764790181729;  // std dev = 0.799, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.10675301684894432;  // std dev = 2.595, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   | | else return -0.125594868697021;  // std dev = 3.73e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return -0.013329835473920554;  // std dev = 0.341, 210.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=29 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then return -0.1471402624741584;  // std dev = 0.004, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.03090442358614996;  // std dev = 4.053, 112.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03777191357389805;  // std dev = 0.345, 2,247.000 (wgt'ed) examples reached here.  /* #neg=1,456 #pos=791 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.23690769541287207;  // std dev = 0.111, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.02993042567475443;  // std dev = 2.688, 33.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=17 */
%   | | | else return 0.09054069907053473;  // std dev = 2.392, 32.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=24 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( haswordtitle(K, I) )
%   | | then return 0.09765924415770835;  // std dev = 0.467, 34.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=12 */
%   | | else return -0.1124379146160966;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return -0.01163245276265243;  // std dev = 0.341, 210.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=29 */
%   | | else if ( haswordvenue(A, N), haswordauthor(P, N) )
%   | | | then return -0.12961724396454682;  // std dev = 0.004, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.026972255842081985;  // std dev = 4.053, 112.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=20 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.031073633248586183;  // std dev = 0.344, 2,247.000 (wgt'ed) examples reached here.  /* #neg=1,456 #pos=791 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.03331173692507874;  // std dev = 0.452, 35.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=19 */
%   | | else return 0.08132801327146973;  // std dev = 0.411, 35.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=27 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( haswordtitle(I, G) )
%   | | then if ( author(J, H), title(J, I) )
%   | | | then return 0.17166501568033285;  // std dev = 0.799, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.07016619547975332;  // std dev = 2.594, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   | | else return -0.1016964915321485;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return -0.010163999948538229;  // std dev = 0.341, 210.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=29 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then return -0.11568288545500746;  // std dev = 0.003, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.02347048465743698;  // std dev = 4.053, 112.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=20 */


Results
   AUC ROC   = 0.746536
   AUC PR    = 0.744511
   CLL	      = -0.554611
   Precision = 0.744637 at threshold = 0.5
   Recall    = 0.945525
   F1        = 0.833143


Total learning time: 2382.6643998622894 seconds
Total inference time: 3.827 seconds
AUC ROC: 0.746536


Dataset: 3_imdb_cora, Fold: 2, Type: Scratch (RDN-B), Time: 15:01:06
{'AUC ROC': 0.746536, 'AUC PR': 0.744511, 'CLL': -0.554611, 'Precision': [0.744637, 0.5], 'Recall': 0.945525, 'F1': 0.833143, 'Learning time': 2382.6643998622894, 'Inference time': 3.827}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.6775933795439518;  // std dev = 13.847, 1,296.000 (wgt'ed) examples reached here.  /* #neg=234 #pos=1,062 */
%   | | | else return -0.10952462080934032;  // std dev = 7.683, 1,887.000 (wgt'ed) examples reached here.  /* #neg=1,826 #pos=61 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.21264628959686815;  // std dev = 6.576, 189.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=67 */
%   | | | else return 0.5581489350995124;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.4490580260086023;  // std dev = 3.261, 44.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=26 */
%   | | | else return 0.15814893509951225;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.5248156017661779;  // std dev = 3.266, 48.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
%   else return 0.0143989350995121;  // std dev = 0.363, 544.000 (wgt'ed) examples reached here.  /* #neg=459 #pos=85 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.573937785664498;  // std dev = 13.849, 1,296.000 (wgt'ed) examples reached here.  /* #neg=234 #pos=1,062 */
%   | | | else return -0.0968780248819943;  // std dev = 7.746, 1,887.000 (wgt'ed) examples reached here.  /* #neg=1,824 #pos=63 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.0930945098997293;  // std dev = 3.149, 58.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=13 */
%   | | | else return 0.2448280438271554;  // std dev = 5.834, 141.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=59 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.6410652289998694;  // std dev = 0.346, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.31437023911172113;  // std dev = 3.502, 50.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=26 */
%   | | | else return 0.44857323158030743;  // std dev = 3.339, 50.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=33 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.10638710698592;  // std dev = 0.433, 56.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=14 */
%   | else return 0.0018789102646087933;  // std dev = 0.353, 488.000 (wgt'ed) examples reached here.  /* #neg=417 #pos=71 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.45330419755154644;  // std dev = 13.849, 1,296.000 (wgt'ed) examples reached here.  /* #neg=234 #pos=1,062 */
%   | | | else return -0.0868502008218033;  // std dev = 7.656, 1,887.000 (wgt'ed) examples reached here.  /* #neg=1,826 #pos=61 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.16233699694538176;  // std dev = 6.531, 189.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=67 */
%   | | | else return 0.43047286659473966;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.3268825881479578;  // std dev = 2.985, 38.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=23 */
%   | | | else return 0.12409420105493925;  // std dev = 1.889, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.37009135503371365;  // std dev = 2.413, 26.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=17 */
%   | | | else return 0.39663812778315405;  // std dev = 2.365, 27.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=19 */
%   else return 0.011031042604886371;  // std dev = 0.363, 544.000 (wgt'ed) examples reached here.  /* #neg=459 #pos=85 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.09328408992705282;  // std dev = 0.349, 3,183.000 (wgt'ed) examples reached here.  /* #neg=2,058 #pos=1,125 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.13998787207785096;  // std dev = 6.430, 189.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=65 */
%   | | | else return 0.33796676083592053;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.4604033126397913;  // std dev = 0.337, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.18781853002060547;  // std dev = 3.417, 49.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=25 */
%   | | | else return 0.28916497084299886;  // std dev = 3.362, 51.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=34 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then if ( haswordtitle(N, L) )
%   | | then return 0.1537826220943768;  // std dev = 0.457, 40.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=12 */
%   | | else return -0.0879678187018555;  // std dev = 0.236, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | else return 0.0012265370729698567;  // std dev = 0.355, 487.000 (wgt'ed) examples reached here.  /* #neg=415 #pos=72 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.07810976497267978;  // std dev = 0.345, 3,183.000 (wgt'ed) examples reached here.  /* #neg=2,058 #pos=1,125 */
%   | | else return 0.12375450756579641;  // std dev = 0.468, 199.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=72 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.22611411377408783;  // std dev = 2.564, 31.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=19 */
%   | | | else return 0.06325921660440632;  // std dev = 2.325, 22.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=10 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.22397972898929736;  // std dev = 2.454, 27.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=17 */
%   | | | else return 0.23428183314965595;  // std dev = 2.360, 27.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=19 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.13862067409394951;  // std dev = 0.456, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | | else return -0.16121452692460175;  // std dev = 0.020, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return -0.0010545739046655775;  // std dev = 0.352, 488.000 (wgt'ed) examples reached here.  /* #neg=417 #pos=71 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06721160763534285;  // std dev = 0.351, 3,382.000 (wgt'ed) examples reached here.  /* #neg=2,185 #pos=1,197 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, C) )
%   | | | then return 0.38208134795383186;  // std dev = 0.053, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2899129431704894;  // std dev = 1.211, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.08949753555476284;  // std dev = 3.223, 45.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=23 */
%   | | | else return 0.16424879368788844;  // std dev = 3.389, 52.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=34 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordauthor(L, J) )
%   | | then return 0.11917719615027426;  // std dev = 0.455, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | | else if ( haswordtitle(K, M), haswordauthor(N, M) )
%   | | | then return -0.006670274783383877;  // std dev = 5.848, 285.000 (wgt'ed) examples reached here.  /* #neg=245 #pos=40 */
%   | | | else return 0.07993258711168064;  // std dev = 2.330, 31.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=7 */
%   | else return -0.012665838910275522;  // std dev = 0.339, 181.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=24 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0557010018037607;  // std dev = 0.348, 3,382.000 (wgt'ed) examples reached here.  /* #neg=2,185 #pos=1,197 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.24211527191274018;  // std dev = 0.385, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.06330017217925993;  // std dev = 3.355, 49.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=25 */
%   | | | else return 0.13288865314091305;  // std dev = 3.250, 48.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( haswordtitle(K, I) )
%   | | then return 0.13282799038596244;  // std dev = 0.454, 40.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=12 */
%   | | else return -0.08054095187837046;  // std dev = 0.237, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then if ( haswordtitle(N, L) )
%   | | | then return 0.08270295176842836;  // std dev = 2.941, 43.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=12 */
%   | | | else return -0.13695236238070974;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.007267971388988556;  // std dev = 0.344, 436.000 (wgt'ed) examples reached here.  /* #neg=376 #pos=60 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0460043351988578;  // std dev = 0.347, 3,382.000 (wgt'ed) examples reached here.  /* #neg=2,185 #pos=1,197 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.18588341677096998;  // std dev = 0.385, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.07378001292969473;  // std dev = 0.475, 97.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=57 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then return 0.3455917223569261;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( haswordtitle(J, G) )
%   | | | then return 0.07813438503951779;  // std dev = 2.699, 38.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
%   | | | else return -0.13164024198555788;  // std dev = 0.060, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( haswordtitle(M, K) )
%   | | | then return 0.06932350527007668;  // std dev = 2.941, 43.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=12 */
%   | | | else return -0.12155471780881713;  // std dev = 6.45e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.006369912514043741;  // std dev = 0.344, 436.000 (wgt'ed) examples reached here.  /* #neg=376 #pos=60 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.1987890752395306;  // std dev = 0.317, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | else if ( haswordtitle(E, C) )
%   | | then return 0.037430520968748826;  // std dev = 0.345, 3,372.000 (wgt'ed) examples reached here.  /* #neg=2,181 #pos=1,191 */
%   | | else return 0.059711095524935746;  // std dev = 0.474, 104.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=62 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then return 0.29591700531904536;  // std dev = 1.140, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( haswordtitle(I, F) )
%   | | | then return 0.06607033303407257;  // std dev = 2.698, 38.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
%   | | | else return -0.11734002910575596;  // std dev = 0.055, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then return -0.008583306359398055;  // std dev = 0.347, 313.000 (wgt'ed) examples reached here.  /* #neg=268 #pos=45 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.017420773762788073;  // std dev = 4.756, 166.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=27 */
%   | | | else return -0.12968174061972154;  // std dev = 0.045, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.15846587385775646;  // std dev = 0.313, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | else if ( haswordtitle(E, C) )
%   | | then return 0.030767397059672602;  // std dev = 0.344, 3,372.000 (wgt'ed) examples reached here.  /* #neg=2,181 #pos=1,191 */
%   | | else return 0.045251624852417294;  // std dev = 0.474, 104.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=62 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then return 0.4260167792419278;  // std dev = 0.797, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordtitle(I, F) )
%   | | | then return 0.05245818108138681;  // std dev = 2.907, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | | else return -0.11435591501475528;  // std dev = 0.088, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then return -0.007349153070491384;  // std dev = 0.347, 308.000 (wgt'ed) examples reached here.  /* #neg=264 #pos=44 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.011574650311357392;  // std dev = 4.761, 173.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=27 */
%   | | | else return -0.11905463905729881;  // std dev = 0.033, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */


Results
   AUC ROC   = 0.738377
   AUC PR    = 0.746793
   CLL	      = -0.559412
   Precision = 0.743693 at threshold = 0.5
   Recall    = 0.955901
   F1        = 0.836549


Total learning time: 3575.0862181186676 seconds
Total inference time: 4.397 seconds
AUC ROC: 0.738377


Results scoring model
   AUC ROC   = 0.888207
   AUC PR    = 0.771032
   CLL	      = -0.404555
   Precision = 0.810072 at threshold = 0.5
   Recall    = 0.835932
   F1        = 0.822799


Total scoring time: 49.355 seconds
Parameter learned model CLL: -0.404555


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,true': 'samebib(E, F), venue(F, B)', 'true,true,false': 'haswordtitle(D, G), haswordauthor(H, G)', 'true,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'true,false,true': 'haswordtitle(J, K), haswordauthor(L, K)', 'true,false,false': 'haswordvenue(A, M), haswordauthor(N, M)'}, {'true,true,true,true': [13.847, 234, 1], 'true,true,true,false': [7.683, 1, 61], 'true,true,false,true': [6.576, 122, 67], 'true,true,false,false': [1.449, 3, 7], 'true,false,true,true': [3.261, 18, 26], 'true,false,true,false': [1.449, 7, 3], 'true,false,false,true': [0.894, 1, 4], 'true,false,false,false': [3.266, 16, 32], 'false': [0.363, 459, 85]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,true': 'samebib(E, F), venue(F, A)', 'true,true,false': 'title(G, D), venue(G, A)', 'true,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true,true': [13.849, 234, 1], 'true,true,true,false': [7.746, 1, 63], 'true,true,false,true': [3.149, 45, 13], 'true,true,false,false': [5.834, 82, 59], 'true,false,true': [0.346, 1, 6], 'true,false,false,true': [3.502, 24, 26], 'true,false,false,false': [3.339, 17, 33], 'false,true': [0.433, 42, 14], 'false,false': [0.353, 417, 71]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,true': 'samebib(E, F), venue(F, B)', 'true,true,false': 'haswordtitle(D, G), haswordauthor(H, G)', 'true,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'true,false,true': 'title(K, J), venue(K, A)', 'true,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true,true': [13.849, 234, 1], 'true,true,true,false': [7.656, 1, 61], 'true,true,false,true': [6.531, 122, 67], 'true,true,false,false': [1.449, 3, 7], 'true,false,true,true': [2.985, 15, 23], 'true,false,true,false': [1.889, 10, 6], 'true,false,false,true': [2.413, 9, 17], 'true,false,false,false': [2.365, 8, 19], 'false': [0.363, 459, 85]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(A, L), haswordauthor(M, L)', 'false,true': 'haswordtitle(N, L)'}, {'true,true,true': [0.349, 2, 1], 'true,true,false,true': [6.43, 124, 65], 'true,true,false,false': [1.449, 3, 7], 'true,false,true': [0.337, 1, 6], 'true,false,false,true': [3.417, 24, 25], 'true,false,false,false': [3.362, 17, 34], 'false,true,true': [0.457, 28, 12], 'false,true,false': [0.236, 16, 1], 'false,false': [0.355, 415, 72]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,false': 'haswordvenue(A, F), haswordtitle(G, F)', 'true,false,true': 'title(H, G), venue(H, A)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false,true': 'haswordtitle(M, K)'}, {'true,true,true': [0.345, 2, 1], 'true,true,false': [0.468, 127, 72], 'true,false,true,true': [2.564, 12, 19], 'true,false,true,false': [2.325, 12, 10], 'true,false,false,true': [2.454, 10, 17], 'true,false,false,false': [2.36, 8, 19], 'false,true,true': [0.456, 33, 14], 'false,true,false': [0.02, 9, 0], 'false,false': [0.352, 417, 71]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,true': 'haswordauthor(G, C)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordauthor(L, J)', 'false,true,false': 'haswordtitle(K, M), haswordauthor(N, M)'}, {'true,true': [0.351, 2, 1], 'true,false,true,true': [0.053, 0, 3], 'true,false,true,false': [1.211, 2, 5], 'true,false,false,true': [3.223, 22, 23], 'true,false,false,false': [3.389, 18, 34], 'false,true,true': [0.455, 33, 14], 'false,true,false,true': [5.848, 245, 40], 'false,true,false,false': [2.33, 24, 7], 'false,false': [0.339, 157, 24]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,true': 'haswordtitle(K, I)', 'false,false': 'haswordvenue(B, L), haswordauthor(M, L)', 'false,false,true': 'haswordtitle(N, L)'}, {'true,true': [0.348, 2, 1], 'true,false,true': [0.385, 2, 8], 'true,false,false,true': [3.355, 24, 25], 'true,false,false,false': [3.25, 16, 32], 'false,true,true': [0.454, 28, 12], 'false,true,false': [0.237, 16, 1], 'false,false,true,true': [2.941, 31, 12], 'false,false,true,false': [0.0, 8, 0], 'false,false,false': [0.344, 376, 60]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false,true': 'author(I, H), venue(I, B)', 'false,true,false': 'haswordtitle(J, G)', 'false,false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false,false,true': 'haswordtitle(M, K)'}, {'true,true': [0.347, 2, 1], 'true,false,true': [0.385, 2, 8], 'true,false,false': [0.475, 40, 57], 'false,true,true': [1.155, 3, 3], 'false,true,false,true': [2.699, 28, 10], 'false,true,false,false': [0.06, 13, 0], 'false,false,true,true': [2.941, 31, 12], 'false,false,true,false': [6.45e-09, 8, 0], 'false,false,false': [0.344, 376, 60]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordauthor(D, C)', 'true,false': 'haswordtitle(E, C)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, B)', 'false,true,false': 'haswordtitle(I, F)', 'false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.317, 4, 9], 'true,false,true': [0.345, 2, 1], 'true,false,false': [0.474, 42, 62], 'false,true,true': [1.14, 3, 3], 'false,true,false,true': [2.698, 28, 10], 'false,true,false,false': [0.055, 13, 0], 'false,false,true': [0.347, 268, 45], 'false,false,false,true': [4.756, 139, 27], 'false,false,false,false': [0.045, 8, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordauthor(D, C)', 'true,false': 'haswordtitle(E, C)', 'false': 'haswordvenue(B, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, B)', 'false,true,false': 'haswordtitle(I, F)', 'false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.313, 4, 9], 'true,false,true': [0.344, 2, 1], 'true,false,false': [0.474, 42, 62], 'false,true,true': [0.797, 1, 2], 'false,true,false,true': [2.907, 32, 12], 'false,true,false,false': [0.088, 9, 0], 'false,false,true': [0.347, 264, 44], 'false,false,false,true': [4.761, 146, 27], 'false,false,false,false': [0.033, 7, 0]}]]
[{'': [0.23087538520321238, 0.1318359375000009], 'true': [0.2286643100618866, 0.23844877281858615], 'true,false': [0.24862825788751866, 0.2178711285154877], 'true,false,true': [0.24173553719008398, 0.20999999999999988], 'true,true': [0.22833563753563363, 0.23357996010201754], 'true,true,false': [0.22882898015173153, 0.20999999999999988], 'true,true,true': [0.14795524691360173, 0.0312814451035723], 'true,false,false': [0.15999999999999986, 0.22222222222222385]}, {'': [0.19281319173132225, 0.13183593749999653], 'true': [0.1899862024897751, 0.2349232645177264], 'true,false': [0.11975701941444962, 0.23857628977185436], 'true,false,false': [0.2452325200592373, 0.22291483789071428], 'true,true': [0.18772353049789314, 0.22561951259520213], 'true,true,false': [0.17101255910444108, 0.24137170722148504], 'true,true,true': [0.14798080080661158, 0.03179814335881287], 'false': [0.18749999999999975, 0.12432393845740534]}, {'': [0.15729575597364875, 0.13159462894124585], 'true': [0.15386265861714254, 0.23115786577762096], 'true,false': [0.23970575065516508, 0.21556170404024202], 'true,false,true': [0.23452921908009677, 0.22306151429943613], 'true,false,false': [0.22399735384845934, 0.20709276854171124], 'true,true': [0.1491005311211447, 0.22831431422000095], 'true,true,false': [0.22567041879094443, 0.2099999999999998], 'true,true,true': [0.14799212694935654, 0.03106513733022798]}, {'': [0.13166238814648953, 0.13159289321275902], 'true': [0.1278696884958683, 0.22754371652102653], 'true,false': [0.11371827095149853, 0.23231923801667956], 'true,false,false': [0.23826334919577183, 0.2215753897137581], 'false': [0.17566271189479904, 0.12575658492978697], 'false,true': [0.20927234253971222, 0.055568403024294555], 'true,true': [0.12190903960808222, 0.2201894654104304], 'true,true,false': [0.2187589603938747, 0.20999999999999996]}, {'': [0.1285647396285887, 0.1311264531195588], 'false': [0.18636460175270178, 0.12392603635776518], 'false,true': [0.2075943341002745, 4.5472694266283455e-05], 'true': [0.12512649062485162, 0.2247834212677154], 'true,false': [0.23251691360706955, 0.21472307708663757], 'true,false,true': [0.21211829633788715, 0.2457477170516168], 'true,false,false': [0.22305195022881982, 0.20634113726938988], 'true,true': [0.1191399255289904, 0.21892059807087158]}, {'': [0.1262816964540163, 0.13059685225831116], 'false': [0.13817211576440386, 0.11481643907134559], 'false,true': [0.20745142551876009, 0.12608484043215987], 'true': [0.12304049857892133, 0.22253518493895666], 'true,false': [0.1486756190533573, 0.2268466384314008], 'true,false,false': [0.2308020407384051, 0.220831438697759], 'true,false,true': [0.0009410596435001269, 0.2094419257769186], 'false,true,false': [0.12001526969965559, 0.1751214419187005]}, {'': [0.12454197370608329, 0.130154019964667], 'false': [0.17101687246712438, 0.12484836647993706], 'false,true': [0.206203522534755, 0.05627647008339037], 'false,false': [0.17601183065946283, 0.11854090038937673], 'false,false,true': [0.2011898323418067, 0.0], 'true': [0.1214085986207967, 0.22059124119699397], 'true,false': [0.1482272047496504, 0.2261032774817417], 'true,false,false': [0.22966566077109873, 0.2200204379001963]}, {'': [0.12323265729491291, 0.12952091047517686], 'false': [0.16840223373521113, 0.12459262245882513], 'false,true': [0.22236027386990034, 0.15121258519405406], 'false,true,false': [0.19162999348750706, 0.00028105882964120474], 'false,false': [0.17444935369677828, 0.1185415491251542], 'false,false,true': [0.20118983234180599, 5.204170427930421e-18], 'true': [0.120145251208788, 0.21939938432137904], 'true,false': [0.14853206278045109, 0.22553079159477488]}, {'': [0.12224618152334556, 0.12873404123481927], 'false': [0.1634615111342261, 0.12440597995841017], 'false,true': [0.2165761808075725, 0.14915939615714102], 'false,true,false': [0.1915333351520748, 0.00023249106412192493], 'false,false': [0.12064154213437726, 0.13093970562830434], 'false,false,false': [0.1362429725850836, 0.000252669973692176], 'true': [0.10018448215303001, 0.1222324784713527], 'true,false': [0.11905976004901005, 0.2246202006636318]}, {'': [0.12146303699101174, 0.12814800375933139], 'false': [0.17428781146624467, 0.12261704614052685], 'false,true': [0.21196898794877883, 0.16350248765041944], 'false,true,false': [0.19204495915805894, 0.0008599030639642427], 'false,false': [0.12024308586086858, 0.12655819645102728], 'false,false,false': [0.1310091960464661, 0.00015450993137058094], 'true': [0.09779057795567528, 0.1214912225949346], 'true,false': [0.11830435555187284, 0.2246157419073191]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(B, K), haswordauthor(L, K).;true;true
4;false,true;haswordtitle(M, K).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,false;haswordvenue(A, E), haswordauthor(F, E).;true;true
5;true,false,true;haswordauthor(G, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(A, I), haswordauthor(J, I).;true;true
6;false,false;haswordvenue(B, L), haswordauthor(M, L).;true;true
6;false,false,true;haswordtitle(N, L).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(A, G), haswordauthor(H, G).;true;true
7;false,true;author(I, H), venue(I, B).;true;true
7;false,true,false;haswordtitle(J, G).;true;true
7;false,false;haswordvenue(B, K), haswordauthor(L, K).;true;true
7;false,false,true;haswordtitle(M, K).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(A, F), haswordauthor(G, F).;true;true
8;false,true;author(H, G), venue(H, B).;true;true
8;false,true,false;haswordtitle(I, F).;true;true
8;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;true
8;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(B, F), haswordauthor(G, F).;true;true
9;false,true;author(H, G), venue(H, B).;true;true
9;false,true,false;haswordtitle(I, F).;true;true
9;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;true
9;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.6775933795439518;  // std dev = 13.847, 1,296.000 (wgt'ed) examples reached here.  /* #neg=234 #pos=1,062 */
%   | | | else return -0.10952462080934032;  // std dev = 7.683, 1,887.000 (wgt'ed) examples reached here.  /* #neg=1,826 #pos=61 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.21264628959686815;  // std dev = 6.576, 189.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=67 */
%   | | | else return 0.5581489350995124;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.4490580260086023;  // std dev = 3.261, 44.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=26 */
%   | | | else return 0.15814893509951225;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.5248156017661779;  // std dev = 3.266, 48.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
%   else return 0.0143989350995121;  // std dev = 0.363, 544.000 (wgt'ed) examples reached here.  /* #neg=459 #pos=85 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.573937785664498;  // std dev = 13.849, 1,296.000 (wgt'ed) examples reached here.  /* #neg=234 #pos=1,062 */
%   | | | else return -0.0968780248819943;  // std dev = 7.746, 1,887.000 (wgt'ed) examples reached here.  /* #neg=1,824 #pos=63 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.0930945098997293;  // std dev = 3.149, 58.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=13 */
%   | | | else return 0.2448280438271554;  // std dev = 5.834, 141.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=59 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.3851926776601656;  // std dev = 3.261, 44.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=26 */
%   | | | else return 0.1377866547829789;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return 0.5580193346218546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.4482956062419621;  // std dev = 3.266, 48.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
%   else return 0.012637106985920315;  // std dev = 0.363, 544.000 (wgt'ed) examples reached here.  /* #neg=459 #pos=85 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.45330419755154644;  // std dev = 13.849, 1,296.000 (wgt'ed) examples reached here.  /* #neg=234 #pos=1,062 */
%   | | | else return -0.0868502008218033;  // std dev = 7.656, 1,887.000 (wgt'ed) examples reached here.  /* #neg=1,826 #pos=61 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.16233699694538176;  // std dev = 6.531, 189.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=67 */
%   | | | else return 0.43047286659473966;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.5578934829591488;  // std dev = 0.342, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.2436626934620106;  // std dev = 3.473, 50.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=26 */
%   | | | else return 0.37129072992777595;  // std dev = 3.327, 50.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=33 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.10482588104614124;  // std dev = 0.433, 56.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=14 */
%   | else return 3.176843248291232E-4;  // std dev = 0.353, 488.000 (wgt'ed) examples reached here.  /* #neg=417 #pos=71 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.09328408992705282;  // std dev = 0.349, 3,183.000 (wgt'ed) examples reached here.  /* #neg=2,058 #pos=1,125 */
%   | | else return 0.14993655995514116;  // std dev = 0.469, 199.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=72 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.26057295654007206;  // std dev = 2.983, 38.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=23 */
%   | | | else return 0.09120482507714665;  // std dev = 1.880, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.35313262936503;  // std dev = 0.863, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.2923127280882695;  // std dev = 3.262, 48.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.13919976098657189;  // std dev = 0.457, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | | else return -0.15867257943895988;  // std dev = 1.05e-08, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 2.782557025707921E-4;  // std dev = 0.353, 488.000 (wgt'ed) examples reached here.  /* #neg=417 #pos=71 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08083463899074321;  // std dev = 0.354, 3,382.000 (wgt'ed) examples reached here.  /* #neg=2,185 #pos=1,197 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, C) )
%   | | | then return 0.458200385589421;  // std dev = 0.096, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2776814594718257;  // std dev = 1.219, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.1327405864924671;  // std dev = 3.272, 45.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=23 */
%   | | | else return 0.21996948110194142;  // std dev = 3.382, 52.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=34 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, B) )
%   | | then return 0.48851759071573236;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordtitle(M, J) )
%   | | | then return 0.09457819677633882;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | | else return -0.13861865330619116;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 2.437133659032562E-4;  // std dev = 0.353, 488.000 (wgt'ed) examples reached here.  /* #neg=417 #pos=71 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06728352865309029;  // std dev = 0.351, 3,382.000 (wgt'ed) examples reached here.  /* #neg=2,185 #pos=1,197 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.3127439334518168;  // std dev = 0.335, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.09667406028129677;  // std dev = 3.380, 49.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=25 */
%   | | | else return 0.17222216906749246;  // std dev = 3.364, 51.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=34 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( haswordtitle(K, I) )
%   | | then return 0.15120828315640078;  // std dev = 0.452, 40.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=12 */
%   | | else return -0.09200092466500026;  // std dev = 0.237, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then if ( haswordauthor(N, L) )
%   | | | then return 0.08345657381760362;  // std dev = 2.932, 43.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=12 */
%   | | | else return -0.008746984493332452;  // std dev = 5.652, 271.000 (wgt'ed) examples reached here.  /* #neg=234 #pos=37 */
%   | | else return -0.011294642158855919;  // std dev = 0.339, 173.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=23 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0557647837403046;  // std dev = 0.348, 3,382.000 (wgt'ed) examples reached here.  /* #neg=2,185 #pos=1,197 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, C) )
%   | | | then return 0.2830422613605635;  // std dev = 0.081, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.17800293911567638;  // std dev = 1.224, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.06836720089190733;  // std dev = 3.370, 49.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=25 */
%   | | | else return 0.1341937838241616;  // std dev = 3.260, 48.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, B) )
%   | | then return 0.3845849179132497;  // std dev = 0.811, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordtitle(M, J) )
%   | | | then return 0.06798413534142027;  // std dev = 2.947, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | | else return -0.12371963887667065;  // std dev = 0.017, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 1.256195233587915E-4;  // std dev = 0.352, 488.000 (wgt'ed) examples reached here.  /* #neg=417 #pos=71 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04606009922172726;  // std dev = 0.347, 3,382.000 (wgt'ed) examples reached here.  /* #neg=2,185 #pos=1,197 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.11166871886386837;  // std dev = 2.980, 41.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=25 */
%   | | | else return -0.1258249170756282;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else return 0.11040488880708545;  // std dev = 0.461, 54.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=36 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordauthor(K, I) )
%   | | then if ( author(L, K), title(L, J) )
%   | | | then return 0.17127912307028714;  // std dev = 0.926, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.06306123794519058;  // std dev = 2.933, 43.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=12 */
%   | | else if ( haswordtitle(J, M), haswordauthor(N, M) )
%   | | | then return -0.005785228877934698;  // std dev = 5.848, 285.000 (wgt'ed) examples reached here.  /* #neg=245 #pos=40 */
%   | | | else return 0.08092166464481906;  // std dev = 2.330, 31.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=7 */
%   | else return -0.009969044869378232;  // std dev = 0.338, 181.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=24 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03794038328799723;  // std dev = 0.345, 3,382.000 (wgt'ed) examples reached here.  /* #neg=2,185 #pos=1,197 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.11078341041037229;  // std dev = 2.528, 31.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=19 */
%   | | | else return -0.04873690134632041;  // std dev = 2.264, 22.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=10 */
%   | | else return 0.0837743138530883;  // std dev = 0.461, 54.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=36 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( haswordauthor(J, H) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.2601592533704979;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.04538074609766056;  // std dev = 2.948, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordtitle(I, L), haswordauthor(M, L) )
%   | | | then return -0.005065107225358956;  // std dev = 5.848, 285.000 (wgt'ed) examples reached here.  /* #neg=245 #pos=40 */
%   | | | else return 0.07060638931823393;  // std dev = 2.330, 31.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=7 */
%   | else return -0.008755400844552414;  // std dev = 0.338, 181.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=24 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.031183728686116668;  // std dev = 0.344, 3,382.000 (wgt'ed) examples reached here.  /* #neg=2,185 #pos=1,197 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.06859492438189081;  // std dev = 2.971, 41.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=25 */
%   | | | else return -0.08289070399812697;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else return 0.0638703143652025;  // std dev = 0.461, 54.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=36 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( haswordtitle(K, I) )
%   | | then return 0.12683541805427045;  // std dev = 0.445, 40.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=12 */
%   | | else return -0.08257467011409443;  // std dev = 0.239, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return -0.011147466000133345;  // std dev = 0.347, 313.000 (wgt'ed) examples reached here.  /* #neg=268 #pos=45 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.013957051599771796;  // std dev = 4.744, 166.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=27 */
%   | | | else return -0.12872140062810442;  // std dev = 0.047, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.744092
   AUC PR    = 0.745492
   CLL	      = -0.558834
   Precision = 0.744637 at threshold = 0.5
   Recall    = 0.945525
   F1        = 0.833143


Total learning time: 3428.7831797599792 seconds
Total inference time: 4.111 seconds
AUC ROC: 0.744092


Results scoring model
   AUC ROC   = 0.890683
   AUC PR    = 0.769898
   CLL	      = -0.404957
   Precision = 0.811007 at threshold = 0.5
   Recall    = 0.831477
   F1        = 0.821114


Total scoring time: 46.892 seconds
Refined model CLL: -0.404957


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.738377
   AUC PR    = 0.746793
   CLL	      = -0.559412
   Precision = 0.743693 at threshold = 0.5
   Recall    = 0.955901
   F1        = 0.836549


Total learning time: 7100.116397878646 seconds
Total inference time: 4.397 seconds
AUC ROC: 0.738377
Total revision time: 7100.116397878646
Best scored revision CLL: -0.404555


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 16:59:41
{'AUC ROC': 0.738377, 'AUC PR': 0.746793, 'CLL': -0.559412, 'Precision': [0.743693, 0.5], 'Recall': 0.955901, 'F1': 0.836549, 'Learning time': 7100.116397878646, 'Inference time': 4.397, 'parameter_0.6': {'AUC ROC': 0.738377, 'AUC PR': 0.746793, 'CLL': -0.559412, 'Precision': [0.743693, 0.5], 'Recall': 0.955901, 'F1': 0.836549, 'Learning time': 3575.0862181186676, 'Inference time': 4.397}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.6775933795439518;  // std dev = 13.847, 1,296.000 (wgt'ed) examples reached here.  /* #neg=234 #pos=1,062 */
%   | | | else return -0.10952462080934032;  // std dev = 7.683, 1,887.000 (wgt'ed) examples reached here.  /* #neg=1,826 #pos=61 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.21264628959686815;  // std dev = 6.576, 189.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=67 */
%   | | | else return 0.5581489350995124;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.4490580260086023;  // std dev = 3.261, 44.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=26 */
%   | | | else return 0.15814893509951225;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.5248156017661779;  // std dev = 3.266, 48.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
%   else return 0.0143989350995121;  // std dev = 0.363, 544.000 (wgt'ed) examples reached here.  /* #neg=459 #pos=85 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.17625338902574783;  // std dev = 0.433, 3,183.000 (wgt'ed) examples reached here.  /* #neg=2,058 #pos=1,125 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.0930945098997293;  // std dev = 3.149, 58.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=13 */
%   | | | else return 0.2448280438271554;  // std dev = 5.834, 141.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=59 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.3851926776601656;  // std dev = 3.261, 44.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=26 */
%   | | | else return 0.1377866547829789;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.4318428465055352;  // std dev = 2.422, 26.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=17 */
%   | | | else return 0.4844582134659087;  // std dev = 2.370, 27.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=19 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.10638710698592;  // std dev = 0.433, 56.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=14 */
%   | else return 0.0018789102646087933;  // std dev = 0.353, 488.000 (wgt'ed) examples reached here.  /* #neg=417 #pos=71 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.5398498536466905;  // std dev = 13.849, 1,296.000 (wgt'ed) examples reached here.  /* #neg=234 #pos=1,062 */
%   | | | else return -0.11816951654720025;  // std dev = 7.740, 1,887.000 (wgt'ed) examples reached here.  /* #neg=1,824 #pos=63 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.15679976828567277;  // std dev = 6.460, 189.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=65 */
%   | | | else return 0.43047286659473966;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.5643478031690173;  // std dev = 0.344, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.24689756443068514;  // std dev = 3.477, 50.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=26 */
%   | | | else return 0.36728181884284283;  // std dev = 3.326, 50.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=33 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.09280041812948345;  // std dev = 0.433, 56.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=14 */
%   | else return 0.0016476716430478553;  // std dev = 0.353, 488.000 (wgt'ed) examples reached here.  /* #neg=417 #pos=71 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.4197266825285654;  // std dev = 13.849, 1,296.000 (wgt'ed) examples reached here.  /* #neg=234 #pos=1,062 */
%   | | | else return -0.1041055978214553;  // std dev = 7.653, 1,887.000 (wgt'ed) examples reached here.  /* #neg=1,826 #pos=61 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.07850473991132306;  // std dev = 3.311, 58.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=15 */
%   | | | else return 0.17533683616255274;  // std dev = 5.809, 141.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=59 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(J, C) )
%   | | | then return 0.5528732291259671;  // std dev = 0.057, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.361524570203616;  // std dev = 1.205, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.1851082908651938;  // std dev = 3.413, 49.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=25 */
%   | | | else return 0.28955244535656094;  // std dev = 3.261, 48.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
%   else return 0.009542636038941656;  // std dev = 0.362, 544.000 (wgt'ed) examples reached here.  /* #neg=459 #pos=85 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07671890746538551;  // std dev = 0.354, 3,382.000 (wgt'ed) examples reached here.  /* #neg=2,185 #pos=1,197 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.3520379153920525;  // std dev = 0.333, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.13747279763004366;  // std dev = 3.444, 50.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=26 */
%   | | | else return 0.22867984279143122;  // std dev = 3.321, 50.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=33 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( haswordtitle(K, I) )
%   | | then return 0.15282139770409184;  // std dev = 0.457, 40.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=12 */
%   | | else return -0.08946438017732868;  // std dev = 0.236, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then if ( haswordtitle(N, L) )
%   | | | then return 0.1078306724765218;  // std dev = 2.941, 43.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=12 */
%   | | | else return -0.17123909496533904;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.007613072639843589;  // std dev = 0.344, 436.000 (wgt'ed) examples reached here.  /* #neg=376 #pos=60 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06371468677438155;  // std dev = 0.351, 3,382.000 (wgt'ed) examples reached here.  /* #neg=2,185 #pos=1,197 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, C) )
%   | | | then return 0.33433939682923763;  // std dev = 0.053, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.24172298631552788;  // std dev = 1.206, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.09657481421266687;  // std dev = 3.385, 49.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=25 */
%   | | | else return 0.1732066687304262;  // std dev = 3.260, 48.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=32 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then if ( haswordtitle(L, J) )
%   | | then return 0.13259648882604666;  // std dev = 0.457, 40.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=12 */
%   | | else return -0.0785226447514766;  // std dev = 0.236, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return 0.05429229296397956;  // std dev = 0.421, 51.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=12 */
%   | | else return -0.006670561480148595;  // std dev = 0.344, 436.000 (wgt'ed) examples reached here.  /* #neg=376 #pos=60 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.052698882650305194;  // std dev = 0.349, 3,382.000 (wgt'ed) examples reached here.  /* #neg=2,185 #pos=1,197 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.20653655878566787;  // std dev = 0.383, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.06751909802642611;  // std dev = 3.234, 45.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=23 */
%   | | | else return 0.13097494812961694;  // std dev = 3.406, 52.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=34 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( haswordtitle(K, I) )
%   | | then return 0.11330082317143156;  // std dev = 0.456, 40.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=12 */
%   | | else return -0.06948569629694896;  // std dev = 0.236, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then if ( haswordtitle(N, L) )
%   | | | then return 0.08358350566684568;  // std dev = 2.941, 43.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=12 */
%   | | | else return -0.15527443421008255;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.005848919852623948;  // std dev = 0.344, 436.000 (wgt'ed) examples reached here.  /* #neg=376 #pos=60 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04344557094282889;  // std dev = 0.347, 3,382.000 (wgt'ed) examples reached here.  /* #neg=2,185 #pos=1,197 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.10529658200895202;  // std dev = 2.917, 38.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=23 */
%   | | | else return -0.03599248226957931;  // std dev = 1.878, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.11407468253714076;  // std dev = 2.404, 26.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=17 */
%   | | | else return 0.09799929609716707;  // std dev = 2.356, 27.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=19 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, B) )
%   | | then return 0.4488939204772316;  // std dev = 0.806, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordtitle(M, J) )
%   | | | then return 0.06628972361556607;  // std dev = 2.937, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | | else return -0.14702453362697554;  // std dev = 0.094, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return -9.916613507219973E-4;  // std dev = 0.351, 488.000 (wgt'ed) examples reached here.  /* #neg=417 #pos=71 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03572375421334878;  // std dev = 0.346, 3,382.000 (wgt'ed) examples reached here.  /* #neg=2,185 #pos=1,197 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.04497551249369053;  // std dev = 0.476, 53.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=29 */
%   | | else return 0.08245808480927402;  // std dev = 0.461, 54.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=36 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then return 0.3464031075638459;  // std dev = 1.141, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( haswordtitle(J, G) )
%   | | | then return 0.057849371713528816;  // std dev = 2.684, 38.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
%   | | | else return -0.12270546222887331;  // std dev = 0.039, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return -0.00789772211783473;  // std dev = 0.348, 313.000 (wgt'ed) examples reached here.  /* #neg=268 #pos=45 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.016816518251279278;  // std dev = 4.748, 166.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=27 */
%   | | | else return -0.13399488378578775;  // std dev = 0.032, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.029313183595570932;  // std dev = 0.345, 3,382.000 (wgt'ed) examples reached here.  /* #neg=2,185 #pos=1,197 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.06294010596376187;  // std dev = 2.911, 38.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=23 */
%   | | | else return -0.04089792245152933;  // std dev = 1.885, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | else return 0.06554673257527437;  // std dev = 0.463, 53.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=36 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( haswordtitle(J, H) )
%   | | then return 0.07451451122820456;  // std dev = 0.448, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | | else return -0.1258043014891516;  // std dev = 0.101, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return 0.2200040721181007;  // std dev = 1.041, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.0048464902245257515;  // std dev = 2.632, 47.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=9 */
%   | | else return -0.004998870998243466;  // std dev = 0.344, 436.000 (wgt'ed) examples reached here.  /* #neg=376 #pos=60 */


Results
   AUC ROC   = 0.738637
   AUC PR    = 0.746147
   CLL	      = -0.561269
   Precision = 0.744637 at threshold = 0.5
   Recall    = 0.945525
   F1        = 0.833143


Total learning time: 4102.604093790054 seconds
Total inference time: 3.964 seconds
AUC ROC: 0.738637


Dataset: 3_imdb_cora, Fold: 2, Type: Scratch (RDN-B), Time: 18:08:09
{'AUC ROC': 0.738637, 'AUC PR': 0.746147, 'CLL': -0.561269, 'Precision': [0.744637, 0.5], 'Recall': 0.945525, 'F1': 0.833143, 'Learning time': 4102.604093790054, 'Inference time': 3.964}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.21298764477692653;  // std dev = 0.478, 4,278.000 (wgt'ed) examples reached here.  /* #neg=2,760 #pos=1,518 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.11951257146314814;  // std dev = 4.122, 88.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=23 */
%   | | | else return 0.25226658215833714;  // std dev = 6.371, 170.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=67 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.4430545954768697;  // std dev = 3.587, 53.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=31 */
%   | | | else return 0.13087620782678497;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.5191658842520542;  // std dev = 3.636, 59.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=39 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.08350104777556872;  // std dev = 0.418, 71.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=16 */
%   | else return 0.005893880667163204;  // std dev = 0.355, 643.000 (wgt'ed) examples reached here.  /* #neg=548 #pos=95 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.18503405676514956;  // std dev = 0.478, 4,278.000 (wgt'ed) examples reached here.  /* #neg=2,760 #pos=1,518 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.10433270026314258;  // std dev = 4.122, 88.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=23 */
%   | | | else return 0.21870377289240708;  // std dev = 6.371, 170.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=67 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.3909268630884653;  // std dev = 3.317, 47.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=28 */
%   | | | else return 0.10198040743158678;  // std dev = 1.666, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.5878141048366918;  // std dev = 0.887, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.44015249382243826;  // std dev = 3.771, 63.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=41 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return 0.09604241494869882;  // std dev = 0.427, 71.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=17 */
%   | else return 0.002633816558295365;  // std dev = 0.353, 643.000 (wgt'ed) examples reached here.  /* #neg=549 #pos=94 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.15733633666569785;  // std dev = 0.478, 4,278.000 (wgt'ed) examples reached here.  /* #neg=2,760 #pos=1,518 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.14166449733482991;  // std dev = 7.387, 246.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=83 */
%   | | | else return 0.37401341471874106;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.3280532420422396;  // std dev = 3.121, 42.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=25 */
%   | | | else return 0.15454171989229568;  // std dev = 2.265, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.34013458746481984;  // std dev = 2.622, 30.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=19 */
%   | | | else return 0.4026223697527134;  // std dev = 2.651, 34.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=24 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return 0.08383742712916221;  // std dev = 0.427, 71.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=17 */
%   | else return 0.0023097138117043046;  // std dev = 0.353, 643.000 (wgt'ed) examples reached here.  /* #neg=549 #pos=94 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.13124121008253692;  // std dev = 0.478, 4,291.000 (wgt'ed) examples reached here.  /* #neg=2,771 #pos=1,520 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.056370981219991796;  // std dev = 3.888, 75.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=21 */
%   | | | else return 0.1572709062270248;  // std dev = 6.357, 170.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=67 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.2593768253730511;  // std dev = 3.284, 47.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=28 */
%   | | | else return 0.02273656249158501;  // std dev = 1.668, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.26779948273858717;  // std dev = 2.789, 34.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=21 */
%   | | | else return 0.3116195805899681;  // std dev = 2.650, 34.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=24 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return 0.07250228485295082;  // std dev = 0.427, 71.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=17 */
%   | else return 0.0020249925907481012;  // std dev = 0.353, 643.000 (wgt'ed) examples reached here.  /* #neg=549 #pos=94 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( haswordauthor(E, C) )
%   | | then return 0.3899667133364191;  // std dev = 0.482, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.10694977920383307;  // std dev = 31.242, 4,269.000 (wgt'ed) examples reached here.  /* #neg=2,758 #pos=1,511 */
%   | | | else return 0.09970902684656788;  // std dev = 7.520, 253.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=88 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.5136756055617444;  // std dev = 0.066, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.32800108359687924;  // std dev = 1.203, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.13600343572134957;  // std dev = 3.607, 56.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=28 */
%   | | | else return 0.21210954481966235;  // std dev = 3.698, 62.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=41 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.06920236795333853;  // std dev = 0.417, 71.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=16 */
%   | else return 9.99073035711918E-4;  // std dev = 0.354, 643.000 (wgt'ed) examples reached here.  /* #neg=548 #pos=95 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.08729247617083113;  // std dev = 0.478, 4,278.000 (wgt'ed) examples reached here.  /* #neg=2,760 #pos=1,518 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.07188590313393282;  // std dev = 7.379, 246.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=83 */
%   | | | else return 0.25108558360165;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.15027185330835854;  // std dev = 3.257, 47.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=28 */
%   | | | else return -0.011996523478989373;  // std dev = 1.671, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return 0.25348656762791694;  // std dev = 0.849, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.16607189766988148;  // std dev = 3.733, 63.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=41 */
%   else if ( haswordvenue(B, N), haswordauthor(P, N) )
%   | then return 0.05987219810730659;  // std dev = 0.417, 71.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=16 */
%   | else return 8.740315604193993E-4;  // std dev = 0.354, 643.000 (wgt'ed) examples reached here.  /* #neg=548 #pos=95 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.06984420188943227;  // std dev = 0.478, 4,278.000 (wgt'ed) examples reached here.  /* #neg=2,760 #pos=1,518 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.017507662876669328;  // std dev = 4.122, 88.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=23 */
%   | | | else return 0.08805793546270534;  // std dev = 6.347, 170.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=67 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.33793432218719793;  // std dev = 0.068, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.204943640962347;  // std dev = 1.208, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.06553905787945556;  // std dev = 3.446, 52.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=26 */
%   | | | else return 0.12412160930707695;  // std dev = 3.821, 66.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=43 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.06019491352399199;  // std dev = 0.426, 71.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=17 */
%   | else return -2.0169758304619507E-4;  // std dev = 0.353, 643.000 (wgt'ed) examples reached here.  /* #neg=549 #pos=94 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.05559816583180727;  // std dev = 0.478, 4,291.000 (wgt'ed) examples reached here.  /* #neg=2,771 #pos=1,520 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.004106036618045058;  // std dev = 3.888, 75.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=21 */
%   | | | else return 0.06910310928413263;  // std dev = 6.346, 170.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=67 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.26731771651825514;  // std dev = 0.059, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.15428206212509257;  // std dev = 1.208, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.05182881739311908;  // std dev = 3.676, 59.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=30 */
%   | | | else return 0.09679932319662236;  // std dev = 3.598, 59.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=39 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.050616535430103075;  // std dev = 0.417, 71.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=16 */
%   | else return -1.1508672652401685E-4;  // std dev = 0.354, 643.000 (wgt'ed) examples reached here.  /* #neg=548 #pos=95 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.043827974420947546;  // std dev = 0.478, 4,291.000 (wgt'ed) examples reached here.  /* #neg=2,771 #pos=1,520 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.03021234591840571;  // std dev = 7.243, 233.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=81 */
%   | | | else return 0.15527797292716083;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(J, C) )
%   | | | then return 0.21855395436591843;  // std dev = 0.051, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.16467661920736262;  // std dev = 1.212, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.027675890708605464;  // std dev = 3.526, 55.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=28 */
%   | | | else return 0.07602570419113604;  // std dev = 3.732, 63.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=41 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return 0.050448074784043354;  // std dev = 0.426, 71.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=17 */
%   | else return -9.002462243545901E-4;  // std dev = 0.353, 643.000 (wgt'ed) examples reached here.  /* #neg=549 #pos=94 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.03440781194233828;  // std dev = 0.478, 4,278.000 (wgt'ed) examples reached here.  /* #neg=2,760 #pos=1,518 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.004693463153502836;  // std dev = 4.122, 88.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=23 */
%   | | | else return 0.04483464566039263;  // std dev = 6.341, 170.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=67 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.18367860247066517;  // std dev = 0.045, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.11028814465848369;  // std dev = 1.207, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.02262731680577484;  // std dev = 3.665, 59.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=30 */
%   | | | else return 0.060343337110461456;  // std dev = 3.598, 59.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=39 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.04260135162240486;  // std dev = 0.426, 71.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=17 */
%   | else return -7.874387048425022E-4;  // std dev = 0.353, 643.000 (wgt'ed) examples reached here.  /* #neg=549 #pos=94 */


Results
   AUC ROC   = 0.506774
   AUC PR    = 0.609344
   CLL	      = -0.823725
   Precision = 0.74359 at threshold = 0.5
   Recall    = 0.037613
   F1        = 0.071605


Total learning time: 10355.347920894623 seconds
Total inference time: 5.104 seconds
AUC ROC: 0.506774


Results scoring model
   AUC ROC   = 0.573426
   AUC PR    = 0.401442
   CLL	      = -0.620735
   Precision = 0.673077 at threshold = 0.5
   Recall    = 0.038976
   F1        = 0.073684


Total scoring time: 43.312 seconds
Parameter learned model CLL: -0.620735


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false': 'haswordvenue(B, M), haswordauthor(N, M)'}, {'true,true,true': [0.478, 2, 1], 'true,true,false,true': [4.122, 65, 23], 'true,true,false,false': [6.371, 103, 67], 'true,false,true,true': [3.587, 22, 31], 'true,false,true,false': [1.477, 8, 3], 'true,false,false,true': [0.894, 1, 4], 'true,false,false,false': [3.636, 20, 39], 'false,true': [0.418, 55, 16], 'false,false': [0.355, 548, 95]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false': 'haswordvenue(A, M), haswordauthor(N, M)'}, {'true,true,true': [0.478, 2, 1], 'true,true,false,true': [4.122, 65, 23], 'true,true,false,false': [6.371, 103, 67], 'true,false,true,true': [3.317, 19, 28], 'true,false,true,false': [1.666, 9, 4], 'true,false,false,true': [0.887, 1, 4], 'true,false,false,false': [3.771, 22, 41], 'false,true': [0.427, 54, 17], 'false,false': [0.353, 549, 94]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'true,false,true': 'title(J, I), venue(J, B)', 'true,false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false': 'haswordvenue(A, M), haswordauthor(N, M)'}, {'true,true,true': [0.478, 2, 1], 'true,true,false,true': [7.387, 163, 83], 'true,true,false,false': [1.708, 5, 7], 'true,false,true,true': [3.121, 17, 25], 'true,false,true,false': [2.265, 13, 9], 'true,false,false,true': [2.622, 11, 19], 'true,false,false,false': [2.651, 10, 24], 'false,true': [0.427, 54, 17], 'false,false': [0.353, 549, 94]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(A, M), haswordauthor(N, M)'}, {'true,true,true': [0.478, 2, 1], 'true,true,false,true': [3.888, 54, 21], 'true,true,false,false': [6.357, 103, 67], 'true,false,true,true': [3.284, 19, 28], 'true,false,true,false': [1.668, 9, 4], 'true,false,false,true': [2.789, 13, 21], 'true,false,false,false': [2.65, 10, 24], 'false,true': [0.427, 54, 17], 'false,false': [0.353, 549, 94]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'haswordauthor(E, C)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'true,false,true': 'haswordauthor(I, C)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true': [0.482, 5, 9], 'true,true,false,true': [31.242, 2, 1], 'true,true,false,false': [7.52, 165, 88], 'true,false,true,true': [0.066, 0, 3], 'true,false,true,false': [1.203, 2, 5], 'true,false,false,true': [3.607, 28, 28], 'true,false,false,false': [3.698, 21, 41], 'false,true': [0.417, 55, 16], 'false,false': [0.354, 548, 95]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'haswordtitle(I, J), haswordauthor(K, J)', 'true,false,false': 'haswordvenue(B, L), haswordauthor(M, L)', 'false': 'haswordvenue(B, N), haswordauthor(P, N)'}, {'true,true,true': [0.478, 2, 1], 'true,true,false,true': [7.379, 163, 83], 'true,true,false,false': [1.708, 5, 7], 'true,false,true,true': [3.257, 19, 28], 'true,false,true,false': [1.671, 9, 4], 'true,false,false,true': [0.849, 1, 4], 'true,false,false,false': [3.733, 22, 41], 'false,true': [0.417, 55, 16], 'false,false': [0.354, 548, 95]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'true,false,true': 'haswordauthor(I, C)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(A, L), haswordauthor(M, L)'}, {'true,true,true': [0.478, 2, 1], 'true,true,false,true': [4.122, 65, 23], 'true,true,false,false': [6.347, 103, 67], 'true,false,true,true': [0.068, 0, 3], 'true,false,true,false': [1.208, 2, 5], 'true,false,false,true': [3.446, 26, 26], 'true,false,false,false': [3.821, 23, 43], 'false,true': [0.426, 54, 17], 'false,false': [0.353, 549, 94]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'true,false,true': 'haswordauthor(I, C)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true': [0.478, 2, 1], 'true,true,false,true': [3.888, 54, 21], 'true,true,false,false': [6.346, 103, 67], 'true,false,true,true': [0.059, 0, 3], 'true,false,true,false': [1.208, 2, 5], 'true,false,false,true': [3.676, 29, 30], 'true,false,false,false': [3.598, 20, 39], 'false,true': [0.417, 55, 16], 'false,false': [0.354, 548, 95]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'true,false,true': 'haswordauthor(J, C)', 'true,false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false': 'haswordvenue(A, M), haswordauthor(N, M)'}, {'true,true,true': [0.478, 2, 1], 'true,true,false,true': [7.243, 152, 81], 'true,true,false,false': [1.708, 5, 7], 'true,false,true,true': [0.051, 0, 3], 'true,false,true,false': [1.212, 2, 5], 'true,false,false,true': [3.526, 27, 28], 'true,false,false,false': [3.732, 22, 41], 'false,true': [0.426, 54, 17], 'false,false': [0.353, 549, 94]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'true,false,true': 'haswordauthor(I, C)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(A, L), haswordauthor(M, L)'}, {'true,true,true': [0.478, 2, 1], 'true,true,false,true': [4.122, 65, 23], 'true,true,false,false': [6.341, 103, 67], 'true,false,true,true': [0.045, 0, 3], 'true,false,true,false': [1.207, 2, 5], 'true,false,false,true': [3.665, 29, 30], 'true,false,false,false': [3.598, 20, 39], 'false,true': [0.426, 54, 17], 'false,false': [0.353, 549, 94]}]]
[{'': [0.23075617150005395, 0.13129369394816862], 'true': [0.22882898015167893, 0.23968505859374997], 'true,false': [0.24902343750000167, 0.2204589843750004], 'true,false,true': [0.24279102883588624, 0.1983471074380164], 'true,true': [0.22892819979183293, 0.22714981070849224], 'true,true,false': [0.1930526859504142, 0.23878892733564006], 'true,false,false': [0.15999999999999986, 0.22407354208560873], 'false': [0.1745685379884938, 0.12591637662686428]}, {'': [0.230135057268171, 0.13116665309701755], 'true': [0.22877050551710834, 0.23610276788411597], 'true,false': [0.24383652924129903, 0.2222230546555759], 'true,false,true': [0.23410230098273088, 0.21362896584457536], 'true,true': [0.22892819979185802, 0.22612881495830653], 'true,true,false': [0.1930526859504144, 0.2387889273356398], 'true,false,false': [0.15724245506155515, 0.22577701338136016], 'false': [0.18195931042338537, 0.12469050403762985]}, {'': [0.22950852486338022, 0.1309793753750914], 'true': [0.22871785363735572, 0.2314305527499258], 'true,false': [0.23919356555245824, 0.21816316757162657], 'true,false,true': [0.23193496159440782, 0.23329367492225714], 'true,true': [0.22892819979189993, 0.22520769967073168], 'true,true,false': [0.2218260949074462, 0.24305555555555558], 'true,false,false': [0.22916147310792473, 0.20662844145781328], 'false': [0.18194970970615662, 0.12469028269012594]}, {'': [0.22903235984173617, 0.1308279297634353], 'true': [0.2286629263234567, 0.2280074504678058], 'true,true': [0.2286516827895306, 0.22883752299390167], 'true,true,false': [0.20159999999999928, 0.23773750739884805], 'true,false': [0.23562176914577496, 0.2181673695880681], 'true,false,true': [0.22949537662961964, 0.2139054534168132], 'true,false,false': [0.2288335752727672, 0.20654106341551762], 'false': [0.18194116883079078, 0.12469008846301528]}, {'': [0.2287020044485036, 0.13070892995077232], 'true': [0.22861367871201074, 0.224838448343675], 'true,true': [0.23239510236371605, 0.228354045420922], 'true,true,false': [0.22863624749696515, 0.22354280848256866], 'true,false': [0.1523317775602145, 0.22761243339591036], 'true,false,false': [0.23238067224331868, 0.2205568248891592], 'true,false,true': [0.001443615583757052, 0.20665562426091746], 'false': [0.17402951645790576, 0.125462911875729]}, {'': [0.22843557010946586, 0.1306018366977966], 'true': [0.22851227480189817, 0.22236512224719973], 'true,true': [0.2287963795751206, 0.2237542566638992], 'true,true,false': [0.22131912405242984, 0.24305555555555558], 'true,false': [0.22776799677426782, 0.21605422843468974], 'true,false,true': [0.22563751434660245, 0.21484453971752238], 'true,false,false': [0.14405928142864224, 0.22120625102036573], 'false': [0.17400920878723777, 0.125462670375401]}, {'': [0.22830520351363745, 0.13051820684696414], 'true': [0.22846989907160356, 0.22089381653710224], 'true,true': [0.22879203039639834, 0.22309623706330514], 'true,true,false': [0.1930526859504128, 0.23695049524105555], 'true,false': [0.15017450368791146, 0.22520943278316932], 'true,false,false': [0.2283917241077534, 0.2211898034834416], 'true,false,true': [0.0015430248065254986, 0.2085677525349962], 'false': [0.18168063134847368, 0.12450612520206264]}, {'': [0.22822343768906014, 0.1304264266264184], 'true': [0.2284400077597467, 0.21978113971632912], 'true,true': [0.22850386560913855, 0.22724655006299643], 'true,true,false': [0.20160000000000047, 0.23692051704018924], 'true,false': [0.14896273569469143, 0.2247695465968088], 'true,false,false': [0.22908031631262424, 0.2194476036848816], 'true,false,true': [0.001163441370551808, 0.20847217265580983], 'false': [0.173873740658249, 0.1253730503638725]}, {'': [0.22816698664744384, 0.1303623462246602], 'true': [0.2284102568906123, 0.21915646905967548], 'true,true': [0.22849996104080691, 0.22678608326625985], 'true,true,false': [0.22518206060090554, 0.24305555555555547], 'true,false': [0.14771051917725606, 0.22394417666041425], 'true,false,false': [0.22603968756689924, 0.22102515436418893], 'true,false,true': [0.0008746437560030462, 0.20976934989894255], 'false': [0.1815791920399014, 0.12444479899676529]}, {'': [0.22812266847845808, 0.130293819107579], 'true': [0.22838852347936367, 0.21849580460894583], 'true,true': [0.22875687130020309, 0.22224136572416767], 'true,true,false': [0.19305268595041294, 0.2365141063417152], 'true,false': [0.14713730743850886, 0.22389873923433024], 'true,false,false': [0.22771884604606468, 0.21936738332878394], 'true,false,true': [0.0006686308224202372, 0.2082937496274681], 'false': [0.18156766710972813, 0.1244449615537299]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;true;true
4;true,false,true;haswordauthor(I, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;true
6;true,false,true;haswordauthor(I, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;true
7;true,false,true;haswordauthor(I, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;true
8;true,false,true;haswordauthor(J, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;true
9;true,false,true;haswordauthor(I, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.21298764477692653;  // std dev = 0.478, 4,278.000 (wgt'ed) examples reached here.  /* #neg=2,760 #pos=1,518 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.11951257146314814;  // std dev = 4.122, 88.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=23 */
%   | | | else return 0.25226658215833714;  // std dev = 6.371, 170.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=67 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.4430545954768697;  // std dev = 3.587, 53.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=31 */
%   | | | else return 0.13087620782678497;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.5191658842520542;  // std dev = 3.636, 59.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=39 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return 0.09758555481782223;  // std dev = 0.427, 71.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=17 */
%   | else return 0.004338670713819561;  // std dev = 0.353, 643.000 (wgt'ed) examples reached here.  /* #neg=549 #pos=94 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.18503405676514956;  // std dev = 0.478, 4,278.000 (wgt'ed) examples reached here.  /* #neg=2,760 #pos=1,518 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.10433270026314258;  // std dev = 4.122, 88.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=23 */
%   | | | else return 0.21870377289240708;  // std dev = 6.371, 170.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=67 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.39380211318792624;  // std dev = 2.931, 37.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=22 */
%   | | | else return 0.2229838988615318;  // std dev = 2.371, 23.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=10 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.4142685670242188;  // std dev = 2.824, 34.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=21 */
%   | | | else return 0.4877513634168724;  // std dev = 2.654, 34.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=24 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.08528643203714188;  // std dev = 0.427, 71.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=17 */
%   | else return 0.0038097060668444292;  // std dev = 0.353, 643.000 (wgt'ed) examples reached here.  /* #neg=549 #pos=94 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.15733633666569785;  // std dev = 0.478, 4,278.000 (wgt'ed) examples reached here.  /* #neg=2,760 #pos=1,518 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.14166449733482991;  // std dev = 7.387, 246.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=83 */
%   | | | else return 0.37401341471874106;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(J, C) )
%   | | | then return 0.6854424004281837;  // std dev = 0.044, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.4529586627638026;  // std dev = 1.201, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.2373380013105065;  // std dev = 3.538, 52.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=26 */
%   | | | else return 0.35646796345336607;  // std dev = 3.852, 66.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=43 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.08058325579442481;  // std dev = 0.417, 71.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=16 */
%   | else return 0.002598766408626231;  // std dev = 0.354, 643.000 (wgt'ed) examples reached here.  /* #neg=548 #pos=95 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.13124121008253692;  // std dev = 0.478, 4,291.000 (wgt'ed) examples reached here.  /* #neg=2,771 #pos=1,520 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.056370981219991796;  // std dev = 3.888, 75.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=21 */
%   | | | else return 0.1572709062270248;  // std dev = 6.357, 170.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=67 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.24524978014303736;  // std dev = 3.537, 53.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=31 */
%   | | | else return 0.008656877432574433;  // std dev = 1.482, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.28629948421422546;  // std dev = 2.602, 30.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=19 */
%   | | | else return 0.30994366242382826;  // std dev = 2.646, 34.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=24 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return 0.07253976574843599;  // std dev = 0.427, 71.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=17 */
%   | else return 0.002031186486193775;  // std dev = 0.353, 643.000 (wgt'ed) examples reached here.  /* #neg=549 #pos=94 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), venue(E, B) )
%   | | then return 0.6695070914041269;  // std dev = 0.204, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordtitle(F, C) )
%   | | | then return 0.3620593395222193;  // std dev = 1.764, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | | else return 0.5375228033719951;  // std dev = 0.264, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( haswordtitle(G, C) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.10664707810530145;  // std dev = 31.228, 4,267.000 (wgt'ed) examples reached here.  /* #neg=2,758 #pos=1,509 */
%   | | | else return 0.09970902684656788;  // std dev = 7.520, 253.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=88 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.1518505018588219;  // std dev = 3.856, 63.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=33 */
%   | | | else return 0.22059370693203018;  // std dev = 3.699, 62.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=41 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then return 0.06916608988535079;  // std dev = 0.417, 71.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=16 */
%   | else return 0.0010122541725314203;  // std dev = 0.354, 643.000 (wgt'ed) examples reached here.  /* #neg=548 #pos=95 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.08729770290377693;  // std dev = 0.478, 4,278.000 (wgt'ed) examples reached here.  /* #neg=2,760 #pos=1,518 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.07201355990988213;  // std dev = 7.379, 246.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=83 */
%   | | | else return 0.25108558360165;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(J, C) )
%   | | | then return 0.3177011221967056;  // std dev = 0.034, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.28102675374758956;  // std dev = 1.200, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.09565475040230254;  // std dev = 3.632, 56.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=28 */
%   | | | else return 0.16596967135286583;  // std dev = 3.698, 62.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=41 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.015011281398771227;  // std dev = 0.369, 473.000 (wgt'ed) examples reached here.  /* #neg=395 #pos=78 */
%   | else return -0.00947025771419879;  // std dev = 0.344, 241.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=33 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.06984921430902306;  // std dev = 0.478, 4,278.000 (wgt'ed) examples reached here.  /* #neg=2,760 #pos=1,518 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.017484123443737863;  // std dev = 4.122, 88.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=23 */
%   | | | else return 0.0882218039993891;  // std dev = 6.347, 170.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=67 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.25321606879391084;  // std dev = 0.030, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2112541571999306;  // std dev = 1.200, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.06562027278114699;  // std dev = 3.575, 55.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=28 */
%   | | | else return 0.13016159352995266;  // std dev = 3.745, 63.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=41 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.05951619406250006;  // std dev = 0.426, 71.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=17 */
%   | else return -4.9770654570759486E-5;  // std dev = 0.353, 643.000 (wgt'ed) examples reached here.  /* #neg=549 #pos=94 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.05560135974293478;  // std dev = 0.478, 4,291.000 (wgt'ed) examples reached here.  /* #neg=2,771 #pos=1,520 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.004046556598381533;  // std dev = 3.888, 75.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=21 */
%   | | | else return 0.06923471249067745;  // std dev = 6.346, 170.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=67 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.11011214706680107;  // std dev = 3.086, 42.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=25 */
%   | | | else return -0.02648088809684368;  // std dev = 2.206, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.10331985420120636;  // std dev = 2.591, 30.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=19 */
%   | | | else return 0.10330255462862059;  // std dev = 2.641, 34.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=24 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.057759926470971286;  // std dev = 0.417, 71.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=16 */
%   | else return -8.375604650529697E-4;  // std dev = 0.354, 643.000 (wgt'ed) examples reached here.  /* #neg=548 #pos=95 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.043830989040159744;  // std dev = 0.478, 4,291.000 (wgt'ed) examples reached here.  /* #neg=2,771 #pos=1,520 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.030306980153496803;  // std dev = 7.243, 233.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=81 */
%   | | | else return 0.15520563282505398;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(J, C) )
%   | | | then return 0.1915493496663577;  // std dev = 0.023, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.17626680851844254;  // std dev = 1.213, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.16527351619814154;  // std dev = 1.200, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.045930607690222766;  // std dev = 5.012, 111.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=64 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return 0.049864030486005594;  // std dev = 0.426, 71.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=17 */
%   | else return -7.657114223656975E-4;  // std dev = 0.353, 643.000 (wgt'ed) examples reached here.  /* #neg=549 #pos=94 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), venue(E, B) )
%   | | then return 0.4237877340347231;  // std dev = 0.301, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordtitle(F, C) )
%   | | | then return 0.22870549060661033;  // std dev = 1.767, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | | else return 0.2973757076508196;  // std dev = 0.345, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return 0.055458533806948034;  // std dev = 4.716, 96.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=38 */
%   | | | else return -0.23382677772835553;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | else if ( haswordtitle(J, C) )
%   | | | then return 0.03419147239943153;  // std dev = 31.733, 4,408.000 (wgt'ed) examples reached here.  /* #neg=2,846 #pos=1,562 */
%   | | | else return 0.04069055549470863;  // std dev = 5.162, 118.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=69 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then return 0.04892526986745595;  // std dev = 0.417, 71.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=16 */
%   | else return -0.0014246994128058986;  // std dev = 0.354, 643.000 (wgt'ed) examples reached here.  /* #neg=548 #pos=95 */


Results
   AUC ROC   = 0.517423
   AUC PR    = 0.619354
   CLL	      = -0.823043
   Precision = 0.75 at threshold = 0.5
   Recall    = 0.038911
   F1        = 0.073983


Total learning time: 9053.507214069366 seconds
Total inference time: 4.826 seconds
AUC ROC: 0.517423


Results scoring model
   AUC ROC   = 0.576406
   AUC PR    = 0.404541
   CLL	      = -0.620268
   Precision = 0.672897 at threshold = 0.5
   Recall    = 0.040089
   F1        = 0.07567


Total scoring time: 38.63 seconds
Refined model CLL: -0.620268


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.517423
   AUC PR    = 0.619354
   CLL	      = -0.823043
   Precision = 0.75 at threshold = 0.5
   Recall    = 0.038911
   F1        = 0.073983


Total learning time: 19490.79713496399 seconds
Total inference time: 4.826 seconds
AUC ROC: 0.517423
Total revision time: 19490.79713496399
Best scored revision CLL: -0.620268


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 23:33:17
{'AUC ROC': 0.517423, 'AUC PR': 0.619354, 'CLL': -0.823043, 'Precision': [0.75, 0.5], 'Recall': 0.038911, 'F1': 0.073983, 'Learning time': 19490.79713496399, 'Inference time': 4.826, 'parameter_0.8': {'AUC ROC': 0.506774, 'AUC PR': 0.609344, 'CLL': -0.823725, 'Precision': [0.74359, 0.5], 'Recall': 0.037613, 'F1': 0.071605, 'Learning time': 10355.347920894623, 'Inference time': 5.104}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.21298764477692653;  // std dev = 0.478, 4,278.000 (wgt'ed) examples reached here.  /* #neg=2,760 #pos=1,518 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.11951257146314814;  // std dev = 4.122, 88.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=23 */
%   | | | else return 0.25226658215833714;  // std dev = 6.371, 170.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=67 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.4430545954768697;  // std dev = 3.587, 53.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=31 */
%   | | | else return 0.13087620782678497;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.5191658842520542;  // std dev = 3.636, 59.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=39 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return 0.09758555481782223;  // std dev = 0.427, 71.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=17 */
%   | else return 0.004338670713819561;  // std dev = 0.353, 643.000 (wgt'ed) examples reached here.  /* #neg=549 #pos=94 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.18503405676514956;  // std dev = 0.478, 4,278.000 (wgt'ed) examples reached here.  /* #neg=2,760 #pos=1,518 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.10433270026314258;  // std dev = 4.122, 88.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=23 */
%   | | | else return 0.21870377289240708;  // std dev = 6.371, 170.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=67 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.3909268630884653;  // std dev = 3.317, 47.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=28 */
%   | | | else return 0.10198040743158678;  // std dev = 1.666, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.4142685670242188;  // std dev = 2.824, 34.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=21 */
%   | | | else return 0.4877513634168724;  // std dev = 2.654, 34.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=24 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.02103178971676096;  // std dev = 0.371, 473.000 (wgt'ed) examples reached here.  /* #neg=395 #pos=78 */
%   | else return -0.005987796101284676;  // std dev = 0.344, 241.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=33 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.15733633666569785;  // std dev = 0.478, 4,278.000 (wgt'ed) examples reached here.  /* #neg=2,760 #pos=1,518 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.14166449733482991;  // std dev = 7.387, 246.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=83 */
%   | | | else return 0.37401341471874106;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.3203260541854853;  // std dev = 3.307, 47.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=28 */
%   | | | else return 0.08481841114410311;  // std dev = 1.667, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.33900767072144666;  // std dev = 2.821, 34.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=21 */
%   | | | else return 0.3934764281673814;  // std dev = 2.654, 34.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=24 */
%   else if ( haswordvenue(B, N), haswordauthor(P, N) )
%   | then return 0.08017569300843187;  // std dev = 0.417, 71.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=16 */
%   | else return 0.0027286151237022366;  // std dev = 0.355, 643.000 (wgt'ed) examples reached here.  /* #neg=548 #pos=95 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.13124121008253692;  // std dev = 0.478, 4,291.000 (wgt'ed) examples reached here.  /* #neg=2,771 #pos=1,520 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.056370981219991796;  // std dev = 3.888, 75.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=21 */
%   | | | else return 0.1572709062270248;  // std dev = 6.357, 170.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=67 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.6057670986507403;  // std dev = 0.058, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.34888656440714266;  // std dev = 1.203, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.1870186910341391;  // std dev = 3.498, 52.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=26 */
%   | | | else return 0.2750850964456333;  // std dev = 3.847, 66.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=43 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.06994124429292414;  // std dev = 0.417, 71.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=16 */
%   | else return 0.002390022397364685;  // std dev = 0.355, 643.000 (wgt'ed) examples reached here.  /* #neg=548 #pos=95 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.10784092346364012;  // std dev = 0.478, 4,278.000 (wgt'ed) examples reached here.  /* #neg=2,760 #pos=1,518 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.09202093858280579;  // std dev = 7.381, 246.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=83 */
%   | | | else return 0.2728253109360134;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(J, C) )
%   | | | then return 0.4567851460995238;  // std dev = 0.060, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.31357750357560177;  // std dev = 1.200, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.13179276290446687;  // std dev = 3.625, 56.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=28 */
%   | | | else return 0.2203530429460764;  // std dev = 3.697, 62.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=41 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return 0.0806980665899446;  // std dev = 0.426, 71.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=17 */
%   | else return -1.3304298302171545E-4;  // std dev = 0.353, 643.000 (wgt'ed) examples reached here.  /* #neg=549 #pos=94 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.08724190530519949;  // std dev = 0.478, 4,278.000 (wgt'ed) examples reached here.  /* #neg=2,760 #pos=1,518 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.03187980828446129;  // std dev = 4.122, 88.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=23 */
%   | | | else return 0.10644587631343294;  // std dev = 6.346, 170.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=67 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.161137803320412;  // std dev = 3.470, 53.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=31 */
%   | | | else return -0.07545699810699123;  // std dev = 1.483, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.21057315402934096;  // std dev = 0.845, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.1675730235891454;  // std dev = 3.604, 59.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=39 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.05953858979013866;  // std dev = 0.417, 71.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=16 */
%   | else return 9.973426193946116E-4;  // std dev = 0.354, 643.000 (wgt'ed) examples reached here.  /* #neg=548 #pos=95 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.06995712606351316;  // std dev = 0.478, 4,291.000 (wgt'ed) examples reached here.  /* #neg=2,771 #pos=1,520 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.009717181901444515;  // std dev = 3.888, 75.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=21 */
%   | | | else return 0.08421086960722449;  // std dev = 6.346, 170.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=67 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.12148972362128986;  // std dev = 3.229, 47.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=28 */
%   | | | else return -0.029302696597225505;  // std dev = 1.672, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.1217917285357671;  // std dev = 2.789, 34.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=21 */
%   | | | else return 0.13546701301445957;  // std dev = 2.643, 34.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=24 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return 0.06871351502056887;  // std dev = 0.426, 71.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=17 */
%   | else return -0.0010677991897617362;  // std dev = 0.353, 643.000 (wgt'ed) examples reached here.  /* #neg=549 #pos=94 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), venue(E, B) )
%   | | then return 0.5743514138429381;  // std dev = 0.308, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordtitle(F, C) )
%   | | | then return 0.3072971500733021;  // std dev = 1.768, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | | else return 0.40571934791838454;  // std dev = 0.362, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( haswordtitle(G, C) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.054352063391736566;  // std dev = 31.227, 4,267.000 (wgt'ed) examples reached here.  /* #neg=2,758 #pos=1,509 */
%   | | | else return 0.0474272804856367;  // std dev = 7.497, 253.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=88 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return 0.1661337661568097;  // std dev = 1.200, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.07313722466112853;  // std dev = 5.150, 118.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=69 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then return 0.050340359723742505;  // std dev = 0.417, 71.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=16 */
%   | else return -3.128868643123289E-6;  // std dev = 0.354, 643.000 (wgt'ed) examples reached here.  /* #neg=548 #pos=95 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.04385592938388044;  // std dev = 0.478, 4,291.000 (wgt'ed) examples reached here.  /* #neg=2,771 #pos=1,520 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.030219055914462438;  // std dev = 7.243, 233.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=81 */
%   | | | else return 0.15455468756774557;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(J, C) )
%   | | | then return 0.19622461105597788;  // std dev = 0.027, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.13024398229090323;  // std dev = 1.211, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.03334702721529036;  // std dev = 3.672, 59.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=30 */
%   | | | else return 0.07707598824921319;  // std dev = 3.598, 59.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=39 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return 0.05805616801690756;  // std dev = 0.426, 71.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=17 */
%   | else return -0.0016698139008132669;  // std dev = 0.353, 643.000 (wgt'ed) examples reached here.  /* #neg=549 #pos=94 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.03441989715640381;  // std dev = 0.478, 4,278.000 (wgt'ed) examples reached here.  /* #neg=2,760 #pos=1,518 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.004032478714121798;  // std dev = 4.122, 88.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=23 */
%   | | | else return 0.04472763026572032;  // std dev = 6.341, 170.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=67 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.16714539393147998;  // std dev = 0.024, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.11740495175408935;  // std dev = 1.200, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.01906391845040639;  // std dev = 3.521, 55.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=28 */
%   | | | else return 0.059943312363498244;  // std dev = 3.745, 63.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=41 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.042334880146349764;  // std dev = 0.417, 71.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=16 */
%   | else return -6.924787791554088E-4;  // std dev = 0.354, 643.000 (wgt'ed) examples reached here.  /* #neg=548 #pos=95 */


Results
   AUC ROC   = 0.50649
   AUC PR    = 0.608746
   CLL	      = -0.823386
   Precision = 0.74359 at threshold = 0.5
   Recall    = 0.037613
   F1        = 0.071605


Total learning time: 9829.869635105133 seconds
Total inference time: 5.028 seconds
AUC ROC: 0.50649


Dataset: 3_imdb_cora, Fold: 2, Type: Scratch (RDN-B), Time: 02:17:14
{'AUC ROC': 0.50649, 'AUC PR': 0.608746, 'CLL': -0.823386, 'Precision': [0.74359, 0.5], 'Recall': 0.037613, 'F1': 0.071605, 'Learning time': 9829.869635105133, 'Inference time': 5.028}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.21330135701834016;  // std dev = 0.479, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.12028485742960847;  // std dev = 4.463, 103.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=27 */
%   | | | else return 0.2648474996928126;  // std dev = 7.101, 209.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=85 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.3649982501680042;  // std dev = 4.272, 73.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=37 */
%   | | | else return 0.477196554147132;  // std dev = 4.451, 84.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=52 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.06926004621062345;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 0.005426162822282901;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.18530354008666333;  // std dev = 0.479, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.10500272994125538;  // std dev = 4.463, 103.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=27 */
%   | | | else return 0.2294575007214978;  // std dev = 7.101, 209.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=85 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5142372924435396;  // std dev = 1.198, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.3030166354222459;  // std dev = 4.255, 73.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=37 */
%   | | | else return 0.41648667279104884;  // std dev = 4.443, 84.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=52 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.06788889772888439;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 0.003954495138488186;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.15805938797414926;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.06454109932242497;  // std dev = 4.463, 103.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=27 */
%   | | | else return 0.1934904464853735;  // std dev = 7.101, 209.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=85 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.3018167292354747;  // std dev = 3.955, 65.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=37 */
%   | | | else return 0.12985994601597747;  // std dev = 1.941, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.3091416237269521;  // std dev = 3.214, 43.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=25 */
%   | | | else return 0.3830161154304319;  // std dev = 3.060, 43.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=29 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.05936696710321016;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 0.003466987039467598;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1318487881456303;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.11301637624248485;  // std dev = 8.167, 297.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=103 */
%   | | | else return 0.3525398797982056;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.24617498666877805;  // std dev = 3.934, 65.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=37 */
%   | | | else return 0.06977510618140927;  // std dev = 1.942, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.24637410964904172;  // std dev = 3.206, 43.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=25 */
%   | | | else return 0.2984310430847082;  // std dev = 3.059, 43.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=29 */
%   else if ( haswordvenue(A, N), haswordauthor(P, N) )
%   | then return 0.058228367572555936;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 0.0022975822596661075;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1081531035526926;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.0348741176720448;  // std dev = 4.463, 103.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=27 */
%   | | | else return 0.13403639809688797;  // std dev = 7.084, 209.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=85 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.19060095577818373;  // std dev = 3.931, 65.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=37 */
%   | | | else return 0.054783550585693244;  // std dev = 1.942, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.18972245616424144;  // std dev = 3.205, 43.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=25 */
%   | | | else return 0.2264753049705644;  // std dev = 3.059, 43.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=29 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.050551180575546126;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 0.002010806879271067;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.08753713292991826;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.07155660019542309;  // std dev = 8.153, 297.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=103 */
%   | | | else return 0.25149752718275165;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.1562265510946885;  // std dev = 3.570, 54.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | | else return 0.06239751202994568;  // std dev = 2.538, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.25275423919181284;  // std dev = 0.838, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.15114506466051347;  // std dev = 4.347, 81.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=50 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.043621620814734426;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 0.0017610022574419773;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.07005058720455859;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.012663192547185185;  // std dev = 4.463, 103.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=27 */
%   | | | else return 0.08840089526014432;  // std dev = 7.071, 209.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=85 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.13643549464934893;  // std dev = 3.549, 54.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | | else return 0.004171228179898446;  // std dev = 2.539, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.1086979086710908;  // std dev = 3.188, 43.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=25 */
%   | | | else return 0.13210401060091229;  // std dev = 3.059, 43.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=29 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.009653937171067639;  // std dev = 0.364, 585.000 (wgt'ed) examples reached here.  /* #neg=492 #pos=93 */
%   | else return -0.003293964932332722;  // std dev = 0.351, 313.000 (wgt'ed) examples reached here.  /* #neg=268 #pos=45 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.055760227011643;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 2.8522993726151607E-5;  // std dev = 4.463, 103.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=27 */
%   | | | else return 0.06897562919081386;  // std dev = 7.071, 209.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=85 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.28530177800169454;  // std dev = 0.041, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.19830333249630508;  // std dev = 1.203, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.054545465882643335;  // std dev = 4.194, 73.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=37 */
%   | | | else return 0.08605748671762624;  // std dev = 4.410, 84.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=52 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.036558458476393586;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 9.110973639267478E-4;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.04394500913012473;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.029691943401517;  // std dev = 8.142, 297.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=103 */
%   | | | else return 0.15397738894588417;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(J, C) )
%   | | | then return 0.23096029034893872;  // std dev = 0.035, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.18334333089432858;  // std dev = 1.200, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.14922445614439522;  // std dev = 1.203, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.047794199456634226;  // std dev = 5.958, 150.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=84 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return 0.04718515848887128;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return -9.800317099270413E-4;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6288551265384142;  // std dev = 1.077, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else return -0.3216845873778435;  // std dev = 2.98e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.3187365212308744;  // std dev = 2.036, 20.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=14 */
%   | | | else return -0.0904403550995034;  // std dev = 3.988, 91.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=23 */
%   | else if ( haswordtitle(H, C) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.03433072469458319;  // std dev = 34.478, 5,195.000 (wgt'ed) examples reached here.  /* #neg=3,351 #pos=1,844 */
%   | | | else return 0.025802808306142355;  // std dev = 8.264, 305.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=109 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.027206385769452935;  // std dev = 4.267, 76.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=39 */
%   | | | else return 0.05320913602226977;  // std dev = 4.333, 81.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=50 */
%   else return 0.003300501923833636;  // std dev = 0.360, 898.000 (wgt'ed) examples reached here.  /* #neg=760 #pos=138 */


Results
   AUC ROC   = 0.520781
   AUC PR    = 0.622645
   CLL	      = -0.818315
   Precision = 0.74359 at threshold = 0.5
   Recall    = 0.037613
   F1        = 0.071605


Total learning time: 12384.971112012863 seconds
Total inference time: 5.27 seconds
AUC ROC: 0.520781


Results scoring model
   AUC ROC   = 0.585433
   AUC PR    = 0.413534
   CLL	      = -0.619216
   Precision = 0.62963 at threshold = 0.5
   Recall    = 0.037845
   F1        = 0.071399


Total scoring time: 52.239 seconds
Parameter learned model CLL: -0.619216


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'true,false,true': 'haswordauthor(I, C)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true': [0.479, 3, 1], 'true,true,false,true': [4.463, 76, 27], 'true,true,false,false': [7.101, 124, 85], 'true,false,true,true': [2.11e-08, 0, 3], 'true,false,true,false': [1.195, 2, 5], 'true,false,false,true': [4.272, 36, 37], 'true,false,false,false': [4.451, 32, 52], 'false,true': [0.408, 71, 19], 'false,false': [0.354, 689, 119]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'true,false,true': 'haswordauthor(I, C)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(A, L), haswordauthor(M, L)'}, {'true,true,true': [0.479, 3, 1], 'true,true,false,true': [4.463, 76, 27], 'true,true,false,false': [7.101, 124, 85], 'true,false,true,true': [0.0, 0, 3], 'true,false,true,false': [1.198, 2, 5], 'true,false,false,true': [4.255, 36, 37], 'true,false,false,false': [4.443, 32, 52], 'false,true': [0.408, 71, 19], 'false,false': [0.354, 689, 119]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false': 'haswordvenue(B, M), haswordauthor(N, M)'}, {'true,true,true': [0.478, 3, 1], 'true,true,false,true': [4.463, 76, 27], 'true,true,false,false': [7.101, 124, 85], 'true,false,true,true': [3.955, 28, 37], 'true,false,true,false': [1.941, 10, 6], 'true,false,false,true': [3.214, 18, 25], 'true,false,false,false': [3.06, 14, 29], 'false,true': [0.408, 71, 19], 'false,false': [0.354, 689, 119]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'haswordtitle(I, J), haswordauthor(K, J)', 'true,false,false': 'haswordvenue(B, L), haswordtitle(M, L)', 'false': 'haswordvenue(A, N), haswordauthor(P, N)'}, {'true,true,true': [0.478, 3, 1], 'true,true,false,true': [8.167, 194, 103], 'true,true,false,false': [1.897, 6, 9], 'true,false,true,true': [3.934, 28, 37], 'true,false,true,false': [1.942, 10, 6], 'true,false,false,true': [3.206, 18, 25], 'true,false,false,false': [3.059, 14, 29], 'false,true': [0.408, 71, 19], 'false,false': [0.354, 689, 119]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(B, M), haswordauthor(N, M)'}, {'true,true,true': [0.478, 3, 1], 'true,true,false,true': [4.463, 76, 27], 'true,true,false,false': [7.084, 124, 85], 'true,false,true,true': [3.931, 28, 37], 'true,false,true,false': [1.942, 10, 6], 'true,false,false,true': [3.205, 18, 25], 'true,false,false,false': [3.059, 14, 29], 'false,true': [0.408, 71, 19], 'false,false': [0.354, 689, 119]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'title(J, I), venue(J, A)', 'true,false,false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false': 'haswordvenue(B, M), haswordauthor(N, M)'}, {'true,true,true': [0.478, 3, 1], 'true,true,false,true': [8.153, 194, 103], 'true,true,false,false': [1.897, 6, 9], 'true,false,true,true': [3.57, 23, 31], 'true,false,true,false': [2.538, 15, 12], 'true,false,false,true': [0.838, 1, 4], 'true,false,false,false': [4.347, 31, 50], 'false,true': [0.408, 71, 19], 'false,false': [0.354, 689, 119]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'title(I, H), venue(I, B)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true': [0.478, 3, 1], 'true,true,false,true': [4.463, 76, 27], 'true,true,false,false': [7.071, 124, 85], 'true,false,true,true': [3.549, 23, 31], 'true,false,true,false': [2.539, 15, 12], 'true,false,false,true': [3.188, 18, 25], 'true,false,false,false': [3.059, 14, 29], 'false,true': [0.364, 492, 93], 'false,false': [0.351, 268, 45]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'true,false,true': 'haswordauthor(I, C)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true': [0.478, 3, 1], 'true,true,false,true': [4.463, 76, 27], 'true,true,false,false': [7.071, 124, 85], 'true,false,true,true': [0.041, 0, 3], 'true,false,true,false': [1.203, 2, 5], 'true,false,false,true': [4.194, 36, 37], 'true,false,false,false': [4.41, 32, 52], 'false,true': [0.408, 71, 19], 'false,false': [0.354, 689, 119]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'true,false,true': 'haswordauthor(J, C)', 'true,false,false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false': 'haswordvenue(A, M), haswordauthor(N, M)'}, {'true,true,true': [0.478, 3, 1], 'true,true,false,true': [8.142, 194, 103], 'true,true,false,false': [1.897, 6, 9], 'true,false,true,true': [0.035, 0, 3], 'true,false,true,false': [1.2, 2, 5], 'true,false,false,true': [1.203, 2, 5], 'true,false,false,false': [5.958, 66, 84], 'false,true': [0.408, 71, 19], 'false,false': [0.354, 689, 119]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'samebib(F, G), venue(G, A)', 'true,true,false': 'haswordvenue(A, D)', 'true,false': 'haswordtitle(H, C)', 'true,false,true': 'title(I, H), venue(I, A)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)'}, {'true,true,true,true': [1.077, 1, 29], 'true,true,true,false': [2.98e-08, 28, 0], 'true,true,false,true': [2.036, 6, 14], 'true,true,false,false': [3.988, 68, 23], 'true,false,true,true': [34.478, 3, 1], 'true,false,true,false': [8.264, 196, 109], 'true,false,false,true': [4.267, 37, 39], 'true,false,false,false': [4.333, 31, 50], 'false': [0.36, 760, 138]}]]
[{'': [0.23090802749933353, 0.1300588786761983], 'true': [0.22908017825593363, 0.2434651654774311], 'true,false': [0.15999999999999986, 0.24552720191488728], 'true,false,false': [0.24995308688309423, 0.23582766439909286], 'true,true': [0.2290191791239627, 0.23011176857330964], 'true,true,false': [0.1934206805542475, 0.24129484215105063], 'true,false,true': [1.4802973661668753e-16, 0.20408163265306106], 'false': [0.16654320987654267, 0.12558664591706808]}, {'': [0.23038041332348722, 0.1299727479543531], 'true': [0.22901395445256723, 0.24126650771808114], 'true,false': [0.15227366462162556, 0.2442415168735501], 'true,false,false': [0.2480419561010607, 0.23495208029578127], 'true,true': [0.22901917912401135, 0.22891552169995366], 'true,true,false': [0.19342068055424694, 0.24129484215105207], 'true,false,true': [0.0, 0.20489724714516724], 'false': [0.1664931963637298, 0.12549520506176262]}, {'': [0.22986193264368748, 0.12988536031674247], 'true': [0.2289539153624022, 0.2386390810361088], 'true,false': [0.2442969586826832, 0.23034188161605584], 'true,false,true': [0.24064346100533968, 0.23541097455012905], 'true,false,false': [0.240193526231194, 0.21776151673869248], 'true,true': [0.22893864920391638, 0.229167391882132], 'true,true,false': [0.19342068055424647, 0.2412948421510494], 'false': [0.1664909589891796, 0.12549482730357925]}, {'': [0.22944429167343244, 0.1298155489614014], 'true': [0.22887975841010685, 0.23653392895152953], 'true,false': [0.2425532900765461, 0.22905547063390647], 'true,false,true': [0.23811198789698965, 0.23562571401633586], 'true,false,false': [0.23908074436664647, 0.2176752347418035], 'true,true': [0.22893196892239995, 0.2279343992440491], 'true,true,false': [0.22456677985524567, 0.2400000000000002], 'false': [0.16645316091145276, 0.12542110484814648]}, {'': [0.2291581572024348, 0.12974528625845105], 'true': [0.2288146710285256, 0.2347624628311236], 'true,false': [0.2402493551624929, 0.22864158948685215], 'true,false,true': [0.23773586090020649, 0.23565778497390236], 'true,true': [0.2289265809567515, 0.2268524047942951], 'true,false,false': [0.23893842125186102, 0.21766937177415435], 'true,true,false': [0.19342068055424771, 0.24008212355497344], 'false': [0.16645035331508554, 0.1254207090245989]}, {'': [0.22898814419255104, 0.12969041386326116], 'true': [0.22876272248922752, 0.23375769850049036], 'true,false': [0.23884201804153016, 0.2284691254280833], 'true,false,true': [0.23601491967305058, 0.2386269557306137], 'true,true': [0.22891725414781228, 0.22606362657546342], 'true,false,false': [0.14038058682703208, 0.23330643230967027], 'true,true,false': [0.22380309927386519, 0.23999999999999996], 'false': [0.16644800206750252, 0.1254205066400354]}, {'': [0.22888347219535624, 0.12964831894219617], 'true': [0.22872017485826932, 0.23307930089866352], 'true,false': [0.23901148254450694, 0.22711029405916544], 'true,false,true': [0.23331169432457213, 0.2387485015279098], 'true,true': [0.22891238750171572, 0.22538424896708187], 'true,false,false': [0.23636281239829976, 0.21758385291625604], 'true,true,false': [0.19342068055424594, 0.2392429482902061], 'false': [0.13285448789159834, 0.12354674443814939]}, {'': [0.2288049350133082, 0.12963566690290482], 'true': [0.22868812616257728, 0.23213978119027093], 'true,false': [0.14656972894031411, 0.23618841290190454], 'true,false,false': [0.24099175244945445, 0.23155236526151693], 'true,true': [0.22888985867437117, 0.2251447688825516], 'true,true,false': [0.19342068055424586, 0.23920979661360886], 'true,false,true': [0.0005486343025376169, 0.20687957921468353], 'false': [0.16631887251853478, 0.1254223098276401]}, {'': [0.2287508768684592, 0.12960404155049263], 'true': [0.22866086868414967, 0.2315024479657044], 'true,false': [0.14449572478828018, 0.2357798742289979], 'true,false,false': [0.20681944415351847, 0.23667265600533], 'true,true': [0.22888713078917275, 0.2247184851558533], 'true,true,false': [0.2232040534011747, 0.23999999999999994], 'true,false,true': [0.0004151123119347418, 0.20556434625840336], 'false': [0.16631167615657594, 0.12528281464108798]}, {'': [0.22870824493598724, 0.1295497071097218], 'true': [0.22702989232078377, 0.22875324567721744], 'true,false': [0.22855295071967852, 0.23572546601387406], 'true,false,false': [0.23960122081796786, 0.23176165043174438], 'true,false,true': [0.2288213166459008, 0.2239132386847999], 'true,true': [0.24562459412945944, 0.20535247315239213], 'true,true,true': [0.038689371584265685, 3.172065784643304e-17], 'true,true,false': [0.20724529254714774, 0.1747696731918822]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,false;haswordvenue(B, G), haswordauthor(H, G).;true;true
0;true,false,true;haswordauthor(I, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;true
1;true,false,true;haswordauthor(I, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;true;true
7;true,false,true;haswordauthor(I, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
8;true,false,true;haswordauthor(J, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, B).;true;true
9;true,true,true;samebib(F, G), venue(G, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.21330135701834016;  // std dev = 0.479, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.12028485742960847;  // std dev = 4.463, 103.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=27 */
%   | | | else return 0.2648474996928126;  // std dev = 7.101, 209.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=85 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.3649982501680042;  // std dev = 4.272, 73.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=37 */
%   | | | else return 0.477196554147132;  // std dev = 4.451, 84.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=52 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.06926004621062345;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 0.005426162822282901;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.18530354008666333;  // std dev = 0.479, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.10500272994125538;  // std dev = 4.463, 103.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=27 */
%   | | | else return 0.2294575007214978;  // std dev = 7.101, 209.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=85 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5142372924435396;  // std dev = 1.198, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.3030166354222459;  // std dev = 4.255, 73.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=37 */
%   | | | else return 0.41648667279104873;  // std dev = 4.443, 84.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=52 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.06788889772888439;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 0.003954495138488163;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.15805938797414926;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.06454109932242497;  // std dev = 4.463, 103.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=27 */
%   | | | else return 0.1934904464853735;  // std dev = 7.101, 209.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=85 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.30181672923547476;  // std dev = 3.955, 65.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=37 */
%   | | | else return 0.12985994601597747;  // std dev = 1.941, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.30914162372695214;  // std dev = 3.214, 43.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=25 */
%   | | | else return 0.3830161154304324;  // std dev = 3.060, 43.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=29 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return 0.05936696710321016;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 0.003466987039467603;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1318487881456303;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.11301637624248485;  // std dev = 8.167, 297.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=103 */
%   | | | else return 0.3525398797982056;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(J, C) )
%   | | | then return 0.4727999312037021;  // std dev = 0.016, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.35241271483828884;  // std dev = 1.199, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.19414471539783043;  // std dev = 4.240, 73.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=37 */
%   | | | else return 0.2676969568857571;  // std dev = 4.429, 84.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=52 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.012783543254201533;  // std dev = 0.365, 585.000 (wgt'ed) examples reached here.  /* #neg=492 #pos=93 */
%   | else return -0.0012184449085242718;  // std dev = 0.351, 313.000 (wgt'ed) examples reached here.  /* #neg=268 #pos=45 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1081531035526926;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.0348741176720448;  // std dev = 4.463, 103.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=27 */
%   | | | else return 0.13403639809688797;  // std dev = 7.084, 209.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=85 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.3585749234478608;  // std dev = 0.015, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.30034898962457096;  // std dev = 1.202, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.14100914875641868;  // std dev = 4.221, 73.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=37 */
%   | | | else return 0.21078829947788713;  // std dev = 4.430, 84.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=52 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.05687022171030827;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 0.0013471348681379977;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.08753713292991826;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.07155660019542309;  // std dev = 8.153, 297.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=103 */
%   | | | else return 0.25149752718275165;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(J, C) )
%   | | | then return 0.28089505899508366;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2253635919279339;  // std dev = 1.202, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.10708810652994075;  // std dev = 4.225, 73.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=37 */
%   | | | else return 0.16008521264366396;  // std dev = 4.424, 84.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=52 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.04930601384496288;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 0.001179186312805154;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.07005058720455859;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.012663192547185185;  // std dev = 4.463, 103.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=27 */
%   | | | else return 0.08840089526014432;  // std dev = 7.071, 209.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=85 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.11712727306641761;  // std dev = 3.565, 54.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | | else return 0.02336894056173619;  // std dev = 2.536, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.11503565641505953;  // std dev = 3.205, 43.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=25 */
%   | | | else return 0.13976198021144634;  // std dev = 3.056, 43.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=29 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.04866704137744212;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 3.460247822089107E-4;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.055760227011643;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 2.8522993726151607E-5;  // std dev = 4.463, 103.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=27 */
%   | | | else return 0.06897562919081386;  // std dev = 7.071, 209.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=85 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.20676717220798901;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.18814083389584813;  // std dev = 1.205, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.05092884999659938;  // std dev = 4.199, 73.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=37 */
%   | | | else return 0.09347652135917268;  // std dev = 4.427, 84.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=52 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.04193875452109959;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 3.0266400653636337E-4;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.04394500913012473;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.029691943401517;  // std dev = 8.142, 297.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=103 */
%   | | | else return 0.15397738894588417;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(J, C) )
%   | | | then return 0.17491021570646004;  // std dev = 0.012, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.14176009580565635;  // std dev = 1.205, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.03787846008020936;  // std dev = 4.292, 76.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=39 */
%   | | | else return 0.0721068602889018;  // std dev = 4.336, 81.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=50 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.041180717505659444;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return -3.1631164743405624E-4;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D), haswordtitle(F, C) )
%   | | then if ( haswordauthor(E, C) )
%   | | | then return 0.332861454333351;  // std dev = 2.027, 18.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=12 */
%   | | | else return 0.6783154126221564;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.14152825161586355;  // std dev = 3.664, 55.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=26 */
%   | | | else return -0.0851503755782485;  // std dev = 4.003, 93.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=25 */
%   | else if ( haswordtitle(H, C) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.03433072469458319;  // std dev = 34.478, 5,195.000 (wgt'ed) examples reached here.  /* #neg=3,351 #pos=1,844 */
%   | | | else return 0.025802808306142355;  // std dev = 8.264, 305.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=109 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.024293017288992767;  // std dev = 4.275, 76.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=39 */
%   | | | else return 0.05780105821060199;  // std dev = 4.350, 81.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=50 */
%   else return 0.0032886510252636515;  // std dev = 0.360, 898.000 (wgt'ed) examples reached here.  /* #neg=760 #pos=138 */


Results
   AUC ROC   = 0.517416
   AUC PR    = 0.61923
   CLL	      = -0.822102
   Precision = 0.74359 at threshold = 0.5
   Recall    = 0.037613
   F1        = 0.071605


Total learning time: 12343.786558151245 seconds
Total inference time: 5.224 seconds
AUC ROC: 0.517416


Results scoring model
   AUC ROC   = 0.579824
   AUC PR    = 0.405345
   CLL	      = -0.620897
   Precision = 0.625 at threshold = 0.5
   Recall    = 0.037845
   F1        = 0.071369


Total scoring time: 52.534 seconds
Refined model CLL: -0.620897


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.520781
   AUC PR    = 0.622645
   CLL	      = -0.818315
   Precision = 0.74359 at threshold = 0.5
   Recall    = 0.037613
   F1        = 0.071605


Total learning time: 24833.53067016411 seconds
Total inference time: 5.27 seconds
AUC ROC: 0.520781
Total revision time: 24833.53067016411
Best scored revision CLL: -0.619216


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 09:11:25
{'AUC ROC': 0.520781, 'AUC PR': 0.622645, 'CLL': -0.818315, 'Precision': [0.74359, 0.5], 'Recall': 0.037613, 'F1': 0.071605, 'Learning time': 24833.53067016411, 'Inference time': 5.27, 'parameter_1.0': {'AUC ROC': 0.520781, 'AUC PR': 0.622645, 'CLL': -0.818315, 'Precision': [0.74359, 0.5], 'Recall': 0.037613, 'F1': 0.071605, 'Learning time': 12384.971112012863, 'Inference time': 5.27}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.21330135701834016;  // std dev = 0.479, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.12028485742960847;  // std dev = 4.463, 103.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=27 */
%   | | | else return 0.2648474996928126;  // std dev = 7.101, 209.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=85 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.3649982501680042;  // std dev = 4.272, 73.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=37 */
%   | | | else return 0.477196554147132;  // std dev = 4.451, 84.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=52 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.06926004621062345;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 0.005426162822282901;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.18530354008666333;  // std dev = 0.479, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.10500272994125538;  // std dev = 4.463, 103.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=27 */
%   | | | else return 0.2294575007214978;  // std dev = 7.101, 209.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=85 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.3620693745070568;  // std dev = 3.975, 65.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=37 */
%   | | | else return 0.18155246888631185;  // std dev = 1.940, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.3846313600019396;  // std dev = 3.222, 43.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=25 */
%   | | | else return 0.46243439206480663;  // std dev = 3.066, 43.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=29 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return 0.06788889772888439;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 0.003954495138488186;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.15805938797414926;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.06454109932242497;  // std dev = 4.463, 103.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=27 */
%   | | | else return 0.1934904464853735;  // std dev = 7.101, 209.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=85 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.2964337836972405;  // std dev = 3.972, 65.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=37 */
%   | | | else return 0.15164718136609484;  // std dev = 1.940, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.4701334951715694;  // std dev = 0.865, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.33837012820808776;  // std dev = 4.360, 81.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=50 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.05936696710321016;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 0.003466987039467598;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1318487881456303;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.11301637624248485;  // std dev = 8.167, 297.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=103 */
%   | | | else return 0.3525398797982056;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(J, C) )
%   | | | then return 0.5314817990045668;  // std dev = 0.050, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.33294193151488727;  // std dev = 1.202, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.19830004492843897;  // std dev = 4.320, 76.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=39 */
%   | | | else return 0.26571246178571917;  // std dev = 4.358, 81.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=50 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return 0.058228367572555936;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 0.0022975822596661075;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1081531035526926;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.0348741176720448;  // std dev = 4.463, 103.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=27 */
%   | | | else return 0.13403639809688797;  // std dev = 7.084, 209.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=85 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.2103712565121426;  // std dev = 3.563, 54.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | | else return 0.05272194061028384;  // std dev = 2.534, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
%   | | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return 0.3307862052566293;  // std dev = 0.829, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.20633429361349398;  // std dev = 4.347, 81.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=50 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.050551180575546126;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 0.002010806879271067;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( haswordauthor(E, C) )
%   | | then if ( author(F, E), title(F, D) )
%   | | | then return 0.7317135429277077;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.31865730190279773;  // std dev = 1.916, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.08658399565293595;  // std dev = 34.929, 5,336.000 (wgt'ed) examples reached here.  /* #neg=3,446 #pos=1,890 */
%   | | | else return 0.07901187534643181;  // std dev = 8.294, 305.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=109 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(J, C) )
%   | | | then return 0.33330145302560926;  // std dev = 0.044, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.23903408494074346;  // std dev = 1.203, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.28071311258069964;  // std dev = 1.204, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.1268517372416821;  // std dev = 5.984, 150.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=84 */
%   else return 0.005956387190800421;  // std dev = 0.360, 898.000 (wgt'ed) examples reached here.  /* #neg=760 #pos=138 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.0700749581407687;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.054322595954348823;  // std dev = 8.150, 297.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=103 */
%   | | | else return 0.23335021421366473;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.1269082980614711;  // std dev = 3.552, 54.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | | else return 0.002342103037350397;  // std dev = 2.519, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.10581545059037768;  // std dev = 3.195, 43.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=25 */
%   | | | else return 0.1494622326874122;  // std dev = 3.056, 43.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=29 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.009791002662278211;  // std dev = 0.365, 585.000 (wgt'ed) examples reached here.  /* #neg=492 #pos=93 */
%   | else return -0.0033653954846702095;  // std dev = 0.351, 313.000 (wgt'ed) examples reached here.  /* #neg=268 #pos=45 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.055624700245651464;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -5.016396164545312E-4;  // std dev = 4.463, 103.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=27 */
%   | | | else return 0.07307510576316875;  // std dev = 7.071, 209.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=85 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.08757458639273774;  // std dev = 3.894, 65.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=37 */
%   | | | else return -0.029210990966678268;  // std dev = 1.943, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.07957112297600834;  // std dev = 3.195, 43.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=25 */
%   | | | else return 0.11259321667092295;  // std dev = 3.057, 43.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=29 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return 0.04778545294332501;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return -2.7651824732962717E-4;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.043998209662807146;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.009232277126485762;  // std dev = 4.463, 103.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=27 */
%   | | | else return 0.0566896005498769;  // std dev = 7.070, 209.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=85 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.22382230698850858;  // std dev = 0.043, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.16098266347351226;  // std dev = 1.203, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.1572586523117358;  // std dev = 1.203, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.0484989367546944;  // std dev = 5.958, 150.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=84 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.04129142973779953;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return -2.5723941866341257E-4;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.03452398210332551;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.020285112351864046;  // std dev = 8.141, 297.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=103 */
%   | | | else return 0.14574707250959726;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(J, C) )
%   | | | then return 0.18746021359429144;  // std dev = 0.038, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.11896535441511366;  // std dev = 1.202, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.022232161613677737;  // std dev = 4.175, 73.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=37 */
%   | | | else return 0.05615118191362629;  // std dev = 4.419, 84.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=52 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return 0.040607549888634756;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return -8.057662083675769E-4;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */


Results
   AUC ROC   = 0.50694
   AUC PR    = 0.609385
   CLL	      = -0.822981
   Precision = 0.74359 at threshold = 0.5
   Recall    = 0.037613
   F1        = 0.071605


Total learning time: 12558.924086809158 seconds
Total inference time: 5.138 seconds
AUC ROC: 0.50694


Dataset: 3_imdb_cora, Fold: 2, Type: Scratch (RDN-B), Time: 12:40:51
{'AUC ROC': 0.50694, 'AUC PR': 0.609385, 'CLL': -0.822981, 'Precision': [0.74359, 0.5], 'Recall': 0.037613, 'F1': 0.071605, 'Learning time': 12558.924086809158, 'Inference time': 5.138}


Starting fold 3

Target train facts examples: 33252
Target train pos examples: 2436
Target train neg examples: 2800

Target test facts examples: 9306
Target test pos  examples: 581
Target test neg examples: 2222

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3391332751442503;  // std dev = 0.500, 894.000 (wgt'ed) examples reached here.  /* #neg=464 #pos=430 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.6081489350995123;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return -0.016851064900487787;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.6581489350995123;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.6763307532813305;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then if ( haswordauthor(M, L) )
%   | | | then return 0.5854216623722396;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.32689893509951234;  // std dev = 2.823, 32.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=15 */
%   | | else return 0.0052077586289240585;  // std dev = 0.354, 34.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=5 */
%   | else return -0.013645936695359509;  // std dev = 0.334, 39.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.7364047831805546;  // std dev = 0.257, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0.13756632895649915;  // std dev = 1.129, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.2876925995607222;  // std dev = 0.499, 876.000 (wgt'ed) examples reached here.  /* #neg=459 #pos=417 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.21673376937523994;  // std dev = 1.795, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | | else return 0.556176479847261;  // std dev = 1.788, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then if ( haswordauthor(M, L) )
%   | | | then return 0.498380757744019;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.282278275096264;  // std dev = 2.823, 32.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=15 */
%   | | else return 0.0045726384456145856;  // std dev = 0.354, 34.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=5 */
%   | else return -0.011992930176393335;  // std dev = 0.334, 39.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2435374881326351;  // std dev = 0.499, 894.000 (wgt'ed) examples reached here.  /* #neg=464 #pos=430 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.4780706236190466;  // std dev = 1.228, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return -0.042965221837123466;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.43813442051666407;  // std dev = 1.259, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.4563662613265041;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then if ( haswordauthor(M, L) )
%   | | | then return 0.3990418766037683;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.2356381872329708;  // std dev = 2.823, 32.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=15 */
%   | | else return 0.0040130218987700795;  // std dev = 0.354, 34.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=5 */
%   | else return -0.010553500145240535;  // std dev = 0.334, 39.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.19671048447790027;  // std dev = 0.498, 894.000 (wgt'ed) examples reached here.  /* #neg=464 #pos=430 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.3740688839961467;  // std dev = 1.229, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return -0.03704606021728131;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.3323193183107304;  // std dev = 1.259, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.3459348899891181;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then if ( haswordauthor(M, L) )
%   | | | then return 0.30590364655137575;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.19090664721414535;  // std dev = 2.823, 32.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=15 */
%   | | else return 0.003520385802326694;  // std dev = 0.354, 34.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=5 */
%   | else return -0.009297109055399043;  // std dev = 0.334, 39.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.15508549292434734;  // std dev = 0.498, 894.000 (wgt'ed) examples reached here.  /* #neg=464 #pos=430 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.2831631536101359;  // std dev = 1.229, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return -0.03207844384527614;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.24951737566452764;  // std dev = 1.259, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.2597479548289633;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then if ( haswordauthor(M, L) )
%   | | | then return 0.23008571177589437;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.1510318027655978;  // std dev = 2.823, 32.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=15 */
%   | | else return 0.0030870633082120662;  // std dev = 0.354, 34.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=5 */
%   | else return -0.008198226297676579;  // std dev = 0.334, 39.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.12016839231434677;  // std dev = 0.498, 894.000 (wgt'ed) examples reached here.  /* #neg=464 #pos=430 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.21250375978042513;  // std dev = 1.229, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return -0.027877674025706844;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.1888935167347528;  // std dev = 1.259, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.1970026176672575;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordauthor(M, J) )
%   | | | then return 0.07779441653515416;  // std dev = 1.178, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.048651441554054306;  // std dev = 3.337, 62.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=20 */
%   | | else return 0.2736809372804804;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else return -0.007235371420884473;  // std dev = 0.334, 39.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( haswordauthor(E, C) )
%   | | then return 0.5022400059702924;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.09065786067159727;  // std dev = 0.499, 891.000 (wgt'ed) examples reached here.  /* #neg=464 #pos=427 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.16029770989464165;  // std dev = 1.229, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return -0.024302176954316256;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return 0.1486357740179352;  // std dev = 0.392, 21.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordauthor(L, I) )
%   | | | then return 0.1148028486598131;  // std dev = 1.525, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | | else return -0.02011858644114543;  // std dev = 2.979, 57.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=12 */
%   | | else return 0.4375149997684852;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else return -0.010800330427075545;  // std dev = 0.346, 36.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.3722646152988812;  // std dev = 0.255, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return -0.0798587254867081;  // std dev = 1.031, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.06676475460249535;  // std dev = 0.499, 876.000 (wgt'ed) examples reached here.  /* #neg=459 #pos=417 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.027920636950756736;  // std dev = 1.531, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | | else return 0.1080594998399285;  // std dev = 1.788, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordauthor(M, J) )
%   | | | then return 0.0890189643197625;  // std dev = 1.520, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | | else return -0.016863466467675392;  // std dev = 2.979, 57.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=12 */
%   | | else return 0.3317272417005884;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else return -0.00943098083687035;  // std dev = 0.346, 36.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.052866544486217276;  // std dev = 0.497, 894.000 (wgt'ed) examples reached here.  /* #neg=464 #pos=430 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.11886836637460718;  // std dev = 1.234, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return -0.024762344754910827;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.0848914561036981;  // std dev = 1.254, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.09741786393664388;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( title(N, K), venue(N, A) )
%   | | | then return -0.18689185348922593;  // std dev = 1.148, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | else return 0.03270191247836596;  // std dev = 3.085, 60.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=19 */
%   | | else return 0.24901593031613273;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else return -0.008243722790818676;  // std dev = 0.346, 36.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03991204671551042;  // std dev = 0.497, 894.000 (wgt'ed) examples reached here.  /* #neg=464 #pos=430 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.09167583628803394;  // std dev = 1.234, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return -0.02163653557109113;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.06796640821299627;  // std dev = 1.255, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.07823886123018835;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordauthor(M, J) )
%   | | | then return 0.06204418809754422;  // std dev = 1.516, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | | else return -0.012168570349774368;  // std dev = 2.948, 57.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=12 */
%   | | else return 0.18849009930829425;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else return -0.007212378165989208;  // std dev = 0.346, 36.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=5 */


Results
   AUC ROC   = 0.556914
   AUC PR    = 0.249675
   CLL	      = -0.596463
   Precision = 0.472222 at threshold = 0.5
   Recall    = 0.02926
   F1        = 0.055105


Total learning time: 665.6412918567657 seconds
Total inference time: 4.03 seconds
AUC ROC: 0.556914


Results scoring model
   AUC ROC   = 0.594461
   AUC PR    = 0.568196
   CLL	      = -0.658008
   Precision = 0.809524 at threshold = 0.5
   Recall    = 0.104723
   F1        = 0.185455


Total scoring time: 8.207 seconds
Parameter learned model CLL: -0.658008


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, A)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)', 'false,true,true': 'haswordauthor(M, L)'}, {'true,true': [0.5, 464, 430], 'true,false,true,true': [1.225, 2, 6], 'true,false,true,false': [0.935, 7, 1], 'true,false,false,true': [1.265, 2, 8], 'true,false,false,false': [1.279, 2, 9], 'false,true,true,true': [1.477, 3, 8], 'false,true,true,false': [2.823, 17, 15], 'false,true,false': [0.354, 29, 5], 'false,false': [0.334, 34, 5]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,false': 'haswordtitle(G, C)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)', 'false,true,true': 'haswordauthor(M, L)'}, {'true,true,true': [0.257, 1, 13], 'true,true,false': [1.129, 4, 2], 'true,false,true': [0.499, 459, 417], 'true,false,false,true': [1.795, 9, 6], 'true,false,false,false': [1.788, 4, 16], 'false,true,true,true': [1.477, 3, 8], 'false,true,true,false': [2.823, 17, 15], 'false,true,false': [0.354, 29, 5], 'false,false': [0.334, 34, 5]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, A)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)', 'false,true,true': 'haswordauthor(M, L)'}, {'true,true': [0.499, 464, 430], 'true,false,true,true': [1.228, 2, 6], 'true,false,true,false': [0.935, 7, 1], 'true,false,false,true': [1.259, 2, 8], 'true,false,false,false': [1.279, 2, 9], 'false,true,true,true': [1.477, 3, 8], 'false,true,true,false': [2.823, 17, 15], 'false,true,false': [0.354, 29, 5], 'false,false': [0.334, 34, 5]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, A)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)', 'false,true,true': 'haswordauthor(M, L)'}, {'true,true': [0.498, 464, 430], 'true,false,true,true': [1.229, 2, 6], 'true,false,true,false': [0.935, 7, 1], 'true,false,false,true': [1.259, 2, 8], 'true,false,false,false': [1.279, 2, 9], 'false,true,true,true': [1.477, 3, 8], 'false,true,true,false': [2.823, 17, 15], 'false,true,false': [0.354, 29, 5], 'false,false': [0.334, 34, 5]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, A)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)', 'false,true,true': 'haswordauthor(M, L)'}, {'true,true': [0.498, 464, 430], 'true,false,true,true': [1.229, 2, 6], 'true,false,true,false': [0.935, 7, 1], 'true,false,false,true': [1.259, 2, 8], 'true,false,false,false': [1.279, 2, 9], 'false,true,true,true': [1.477, 3, 8], 'false,true,true,false': [2.823, 17, 15], 'false,true,false': [0.354, 29, 5], 'false,false': [0.334, 34, 5]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, A)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordauthor(M, L)', 'false,true,true': 'haswordauthor(M, J)'}, {'true,true': [0.498, 464, 430], 'true,false,true,true': [1.229, 2, 6], 'true,false,true,false': [0.935, 7, 1], 'true,false,false,true': [1.259, 2, 8], 'true,false,false,false': [1.279, 2, 9], 'false,true,true,true': [1.178, 4, 3], 'false,true,true,false': [3.337, 42, 20], 'false,true,false': [0.484, 3, 5], 'false,false': [0.334, 34, 5]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'haswordauthor(E, C)', 'true,false': 'haswordvenue(A, F), haswordtitle(G, F)', 'true,false,true': 'title(H, G), venue(H, A)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordauthor(L, K)', 'false,true,true': 'haswordauthor(L, I)'}, {'true,true,true': [0.0, 0, 3], 'true,true,false': [0.499, 464, 427], 'true,false,true,true': [1.229, 2, 6], 'true,false,true,false': [0.935, 7, 1], 'true,false,false': [0.392, 4, 17], 'false,true,true,true': [1.525, 5, 8], 'false,true,true,false': [2.979, 45, 12], 'false,true,false': [0.4, 2, 8], 'false,false': [0.346, 31, 5]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,false': 'haswordtitle(G, C)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordauthor(M, L)', 'false,true,true': 'haswordauthor(M, J)'}, {'true,true,true': [0.255, 1, 13], 'true,true,false': [1.031, 4, 2], 'true,false,true': [0.499, 459, 417], 'true,false,false,true': [1.531, 9, 6], 'true,false,false,false': [1.788, 4, 16], 'false,true,true,true': [1.52, 5, 8], 'false,true,true,false': [2.979, 45, 12], 'false,true,false': [0.4, 2, 8], 'false,false': [0.346, 31, 5]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, A)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordauthor(M, L)', 'false,true,true': 'title(N, K), venue(N, A)'}, {'true,true': [0.497, 464, 430], 'true,false,true,true': [1.234, 2, 6], 'true,false,true,false': [0.935, 7, 1], 'true,false,false,true': [1.254, 2, 8], 'true,false,false,false': [1.279, 2, 9], 'false,true,true,true': [1.148, 9, 1], 'false,true,true,false': [3.085, 41, 19], 'false,true,false': [0.4, 2, 8], 'false,false': [0.346, 31, 5]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, A)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordauthor(M, L)', 'false,true,true': 'haswordauthor(M, J)'}, {'true,true': [0.497, 464, 430], 'true,false,true,true': [1.234, 2, 6], 'true,false,true,false': [0.935, 7, 1], 'true,false,false,true': [1.255, 2, 8], 'true,false,false,false': [1.279, 2, 9], 'false,true,true,true': [1.516, 5, 8], 'false,true,true,false': [2.948, 45, 12], 'false,true,false': [0.4, 2, 8], 'false,false': [0.346, 31, 5]}]]
[{'': [0.24984742045384076, 0.2035523186682534], 'true': [0.24963840467645548, 0.2279035792549318], 'true,false': [0.24609375000000003, 0.15419501133786812], 'true,false,true': [0.1874999999999999, 0.10937500000000004], 'false': [0.23140495867768732, 0.11176857330703491], 'false,true': [0.24878312601406283, 0.12543252595155713], 'false,true,true': [0.19834710743801634, 0.24902343749999953], 'true,false,false': [0.15999999999999986, 0.14876033057851218]}, {'': [0.24864393623330808, 0.19244489471201648], 'true': [0.18526321680963537, 0.2485343618979032], 'true,false': [0.24942531431787995, 0.21168534662777516], 'true,false,false': [0.21484401427604552, 0.159935765737604], 'false': [0.21951765824767067, 0.11176857330703467], 'false,true': [0.24495020629339032, 0.12543252595155696], 'false,true,true': [0.1983471074380164, 0.24902343750000067], 'true,true': [0.06597000353668195, 0.21258880179964013]}, {'': [0.2467636466015728, 0.1822116898717165], 'true': [0.24851838032300677, 0.193853019885022], 'true,false': [0.2168032355677854, 0.15346525420654272], 'true,false,true': [0.18849229501045803, 0.10937499999999996], 'false': [0.20848508762375023, 0.11176857330703492], 'false,true': [0.2411428346914967, 0.12543252595155704], 'false,true,true': [0.19834710743801642, 0.24902343750000014], 'true,false,false': [0.15846655590154463, 0.14876033057851232]}, {'': [0.24575874363390077, 0.174474563351769], 'true': [0.24841837036236317, 0.17694833268059437], 'true,false': [0.19128591293238237, 0.1533885960564591], 'true,false,true': [0.18868907718695946, 0.10937500000000001], 'false': [0.20020772419432667, 0.11176857330703474], 'false,true': [0.238577279009028, 0.12543252595155718], 'false,true,true': [0.19834710743801648, 0.24902343749999956], 'true,false,false': [0.1583825822863233, 0.14876033057851232]}, {'': [0.24516841970099829, 0.1693866852081596], 'true': [0.24835332239090951, 0.1663668190399587], 'false': [0.19484926791344184, 0.1117685733070347], 'false,true': [0.2372494662221062, 0.1254325259515571], 'false,true,true': [0.1983471074380166, 0.2490234375000001], 'true,false': [0.1739173007569838, 0.1533806628287367], 'true,false,true': [0.18877096913084768, 0.10937500000000004], 'true,false,false': [0.15840820391110558, 0.14876033057851243]}, {'': [0.24484844599446912, 0.16627963265677276], 'true': [0.24831446053885994, 0.16027364564999247], 'false': [0.19163311188098076, 0.11176857330703477], 'false,true': [0.18155374878319552, 0.2343749999999999], 'false,true,true': [0.19840017245439864, 0.1795655710199472], 'true,false': [0.16352074239409656, 0.1534034270149948], 'true,false,true': [0.18877486792884732, 0.10937499999999997], 'true,false,false': [0.1584763886809697, 0.14876033057851237]}, {'': [0.24467562195363807, 0.16423567444858506], 'true': [0.2482928435112343, 0.15682245661546013], 'true,true': [-3.700743415417188e-17, 0.24856039043748482], 'false': [0.18290075375819265, 0.11939666497273592], 'false,true': [0.16278195961721384, 0.15999999999999984], 'false,true,true': [0.17884505144044618, 0.15573774291205825], 'true,false': [0.15757862472065542, 0.1534344417196251], 'true,false,true': [0.1887436903289869, 0.10937500000000004]}, {'': [0.24434754744763273, 0.15706235385378672], 'true': [0.14155992715931137, 0.24598624674846928], 'true,false': [0.24942531431788362, 0.15986485812724144], 'true,false,false': [0.15633364783421713, 0.15976087841336561], 'false': [0.1731280383301707, 0.11939812323806834], 'false,true': [0.16147936509151165, 0.15999999999999986], 'false,true,true': [0.1778021716204134, 0.15567456032934424], 'true,true': [0.06496244786456627, 0.17719651814886436]}, {'': [0.2436870983176001, 0.15278159257531504], 'true': [0.24737127225854216, 0.15430859374019512], 'true,false': [0.1550847244949635, 0.1528647799768624], 'true,false,true': [0.19047955840014139, 0.10937499999999999], 'true,false,false': [0.15729748289480128, 0.14876033057851237], 'false': [0.16729364231247582, 0.1193993929669161], 'false,true': [0.16066713631447568, 0.16], 'false,true,true': [0.13181208248063953, 0.1585875373746154]}, {'': [0.2436490979046885, 0.1489266939774029], 'true': [0.24737545038219383, 0.15333936736503986], 'true,false': [0.15308927131083563, 0.1528946724759843], 'true,false,true': [0.190383695813501, 0.10937500000000003], 'true,false,false': [0.15738717445839884, 0.14876033057851237], 'false': [0.16189198877389305, 0.11940050001447632], 'false,true': [0.15779692893589256, 0.16], 'false,true,true': [0.17688887345889592, 0.15241979814602885]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.7867203636709409;  // std dev = 0.258, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.33417633235978156;  // std dev = 0.499, 876.000 (wgt'ed) examples reached here.  /* #neg=459 #pos=417 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.25814893509951237;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | | else return 0.6581489350995123;  // std dev = 1.789, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then if ( haswordauthor(M, L) )
%   | | | then return 0.5854216623722396;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.32689893509951234;  // std dev = 2.823, 32.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=15 */
%   | | else return 0.0052077586289240585;  // std dev = 0.354, 34.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=5 */
%   | else return -0.013645936695359509;  // std dev = 0.334, 39.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2923770702770081;  // std dev = 0.499, 894.000 (wgt'ed) examples reached here.  /* #neg=464 #pos=430 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.5749176340775362;  // std dev = 1.227, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return -0.051266345515894166;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.5555835500245397;  // std dev = 1.261, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.5762011528036728;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then if ( haswordauthor(M, L) )
%   | | | then return 0.498380757744019;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.282278275096264;  // std dev = 2.823, 32.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=15 */
%   | | else return 0.0045726384456145856;  // std dev = 0.354, 34.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=5 */
%   | else return -0.011992930176393335;  // std dev = 0.334, 39.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2435676128329922;  // std dev = 0.499, 894.000 (wgt'ed) examples reached here.  /* #neg=464 #pos=430 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.47614602005124607;  // std dev = 1.227, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return -0.04394575107093422;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.43950420265915147;  // std dev = 1.260, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.4559406285662406;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then if ( haswordauthor(M, L) )
%   | | | then return 0.3990418766037683;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.2356381872329708;  // std dev = 2.823, 32.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=15 */
%   | | else return 0.0040130218987700795;  // std dev = 0.354, 34.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=5 */
%   | else return -0.010553500145240535;  // std dev = 0.334, 39.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1967387146446882;  // std dev = 0.498, 894.000 (wgt'ed) examples reached here.  /* #neg=464 #pos=430 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.37223832738310114;  // std dev = 1.228, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return -0.0378650749236622;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.3334173846161801;  // std dev = 1.260, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.34558166224256665;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then if ( haswordauthor(M, L) )
%   | | | then return 0.30590364655137575;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.19090664721414535;  // std dev = 2.823, 32.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=15 */
%   | | else return 0.003520385802326694;  // std dev = 0.354, 34.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=5 */
%   | else return -0.009297109055399043;  // std dev = 0.334, 39.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.15511022411483874;  // std dev = 0.498, 894.000 (wgt'ed) examples reached here.  /* #neg=464 #pos=430 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.28167378584435676;  // std dev = 1.228, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return -0.0327682225446528;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.25030831812035126;  // std dev = 1.260, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.25948560562374584;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then if ( haswordauthor(M, L) )
%   | | | then return 0.23008571177589437;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.1510318027655978;  // std dev = 2.823, 32.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=15 */
%   | | else return 0.0030870633082120662;  // std dev = 0.354, 34.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=5 */
%   | else return -0.008198226297676579;  // std dev = 0.334, 39.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.12018902265647419;  // std dev = 0.498, 894.000 (wgt'ed) examples reached here.  /* #neg=464 #pos=430 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.21138340993277605;  // std dev = 1.228, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return -0.028462734385445235;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.18944530851040528;  // std dev = 1.260, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.1968139964105623;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), title(N, K) )
%   | | | then return 0.10325081605617077;  // std dev = 3.106, 55.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=20 */
%   | | | else return -0.15127461364228192;  // std dev = 1.469, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | else return 0.2736809372804804;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else return -0.007235371420884473;  // std dev = 0.334, 39.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D), haswordtitle(F, C) )
%   | | then if ( haswordvenue(B, D) )
%   | | | then return 0.5013242448544473;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.22788649739752878;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | else return -0.1598496185454309;  // std dev = 0.372, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.09132462345857305;  // std dev = 0.499, 871.000 (wgt'ed) examples reached here.  /* #neg=453 #pos=418 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.0573967824411691;  // std dev = 1.531, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return 0.1487484742521217;  // std dev = 1.796, 21.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then return 0.01172120852044481;  // std dev = 0.400, 70.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=20 */
%   | | else return 0.4248053812428128;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else return -0.01655478556037621;  // std dev = 0.345, 36.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06980272062622808;  // std dev = 0.498, 894.000 (wgt'ed) examples reached here.  /* #neg=464 #pos=430 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.15234628583577436;  // std dev = 1.241, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return -0.02892209684748476;  // std dev = 0.932, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.11265680910221879;  // std dev = 1.261, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.11952277913890673;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, A) )
%   | | | then return 0.03207588954776535;  // std dev = 3.268, 65.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=20 */
%   | | | else return -0.28115445821728463;  // std dev = 0.265, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.3212846179245307;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else return -0.014394668684611598;  // std dev = 0.345, 36.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05282801330588855;  // std dev = 0.498, 894.000 (wgt'ed) examples reached here.  /* #neg=464 #pos=430 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.11639496553921959;  // std dev = 1.240, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return -0.025195340397617085;  // std dev = 0.932, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.08897844862790696;  // std dev = 1.261, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.09497127897564721;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordauthor(M, J) )
%   | | | then return 0.10389616859943032;  // std dev = 1.507, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | | else return -0.013696670248610905;  // std dev = 2.935, 57.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=12 */
%   | | else return 0.24124898299984218;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else return -0.012536438415299174;  // std dev = 0.345, 36.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.3413739369761464;  // std dev = 0.255, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return -0.10423431641988024;  // std dev = 1.050, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.0366802702710689;  // std dev = 0.499, 876.000 (wgt'ed) examples reached here.  /* #neg=459 #pos=417 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.009707079705079735;  // std dev = 1.522, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | | else return 0.06509070097952284;  // std dev = 1.787, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordauthor(M, J) )
%   | | | then return 0.08071666330274035;  // std dev = 1.504, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | | else return -0.011497257719580977;  // std dev = 2.935, 57.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=12 */
%   | | else return 0.18287958051948575;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else return -0.010933197345980507;  // std dev = 0.345, 36.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=5 */


Results
   AUC ROC   = 0.558322
   AUC PR    = 0.250299
   CLL	      = -0.594261
   Precision = 0.472222 at threshold = 0.5
   Recall    = 0.02926
   F1        = 0.055105


Total learning time: 654.0033049583435 seconds
Total inference time: 3.972 seconds
AUC ROC: 0.558322


Results scoring model
   AUC ROC   = 0.601252
   AUC PR    = 0.574547
   CLL	      = -0.657014
   Precision = 0.809524 at threshold = 0.5
   Recall    = 0.104723
   F1        = 0.185455


Total scoring time: 5.989 seconds
Refined model CLL: -0.657014


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.558322
   AUC PR    = 0.250299
   CLL	      = -0.594261
   Precision = 0.472222 at threshold = 0.5
   Recall    = 0.02926
   F1        = 0.055105


Total learning time: 1333.8405968151092 seconds
Total inference time: 3.972 seconds
AUC ROC: 0.558322
Total revision time: 1333.8405968151092
Best scored revision CLL: -0.657014


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 13:03:18
{'AUC ROC': 0.558322, 'AUC PR': 0.250299, 'CLL': -0.594261, 'Precision': [0.472222, 0.5], 'Recall': 0.02926, 'F1': 0.055105, 'Learning time': 1333.8405968151092, 'Inference time': 3.972, 'parameter_0.2': {'AUC ROC': 0.556914, 'AUC PR': 0.249675, 'CLL': -0.596463, 'Precision': [0.472222, 0.5], 'Recall': 0.02926, 'F1': 0.055105, 'Learning time': 665.6412918567657, 'Inference time': 4.03}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3391332751442503;  // std dev = 0.500, 894.000 (wgt'ed) examples reached here.  /* #neg=464 #pos=430 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.6081489350995123;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return -0.016851064900487787;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.6581489350995123;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.6763307532813305;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then if ( haswordauthor(M, L) )
%   | | | then return 0.5854216623722396;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.32689893509951234;  // std dev = 2.823, 32.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=15 */
%   | | else return 0.0052077586289240585;  // std dev = 0.354, 34.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=5 */
%   | else return -0.013645936695359509;  // std dev = 0.334, 39.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2926495423451909;  // std dev = 0.500, 894.000 (wgt'ed) examples reached here.  /* #neg=464 #pos=430 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.5170719622367218;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return -0.014812149378556561;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.5580193346218546;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.5728505077589573;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then if ( haswordauthor(M, L) )
%   | | | then return 0.498380757744019;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.282278275096264;  // std dev = 2.823, 32.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=15 */
%   | | else return 0.0045726384456145856;  // std dev = 0.354, 34.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=5 */
%   | else return -0.011992930176393335;  // std dev = 0.334, 39.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.6827601832114788;  // std dev = 0.257, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0.07944758541225484;  // std dev = 1.099, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.2388500091784537;  // std dev = 0.499, 876.000 (wgt'ed) examples reached here.  /* #neg=459 #pos=417 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.16891234136212266;  // std dev = 1.694, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | | else return 0.43775591262181024;  // std dev = 1.788, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then if ( haswordauthor(M, L) )
%   | | | then return 0.3990418766037683;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.2356381872329708;  // std dev = 2.823, 32.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=15 */
%   | | else return 0.0040130218987700795;  // std dev = 0.354, 34.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=5 */
%   | else return -0.010553500145240535;  // std dev = 0.334, 39.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.19668196962198448;  // std dev = 0.498, 894.000 (wgt'ed) examples reached here.  /* #neg=464 #pos=430 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.3764308553759116;  // std dev = 1.229, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return -0.03439307051634333;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.33033754368847046;  // std dev = 1.257, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.34641745268606555;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then if ( haswordauthor(M, L) )
%   | | | then return 0.30590364655137575;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.19090664721414535;  // std dev = 2.823, 32.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=15 */
%   | | else return 0.003520385802326694;  // std dev = 0.354, 34.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=5 */
%   | else return -0.009297109055399043;  // std dev = 0.334, 39.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1550604178932391;  // std dev = 0.498, 894.000 (wgt'ed) examples reached here.  /* #neg=464 #pos=430 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.2850881005333845;  // std dev = 1.229, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return -0.02983865071286218;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.24808817891861906;  // std dev = 1.257, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.26010646086361816;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then if ( haswordauthor(M, L) )
%   | | | then return 0.23008571177589437;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.1510318027655978;  // std dev = 2.823, 32.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=15 */
%   | | else return 0.0030870633082120662;  // std dev = 0.354, 34.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=5 */
%   | else return -0.008198226297676579;  // std dev = 0.334, 39.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.3067982319012389;  // std dev = 0.386, 20.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then if ( haswordtitle(H, F), haswordtitle(H, C) )
%   | | | then return 0.2559053020373199;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | | else return -0.20841614243979711;  // std dev = 0.928, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordtitle(I, C) )
%   | | | then return 0.11715620067139733;  // std dev = 14.613, 856.000 (wgt'ed) examples reached here.  /* #neg=448 #pos=408 */
%   | | | else return 0.14362623171331054;  // std dev = 2.384, 34.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=22 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordvenue(B, L) )
%   | | | then return 0.1727815968518197;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.02862677115047297;  // std dev = 3.186, 58.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=15 */
%   | | else return 0.2736809372804804;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else return -0.007235371420884473;  // std dev = 0.334, 39.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09188963140640131;  // std dev = 0.498, 894.000 (wgt'ed) examples reached here.  /* #neg=464 #pos=430 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.17349462339515825;  // std dev = 1.221, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return -0.03979985940041751;  // std dev = 0.930, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return 0.15789321335766657;  // std dev = 0.391, 21.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=17 */
%   else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.3791937645900834;  // std dev = 2.104, 28.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   | | | else return -0.2044924144993835;  // std dev = 0.670, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( haswordtitle(I, L), haswordauthor(M, L) )
%   | | | then return -0.16270297156636324;  // std dev = 1.465, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | | else return 0.20908490467177035;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else return -0.0063903682578990645;  // std dev = 0.334, 39.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06987650892845579;  // std dev = 0.498, 894.000 (wgt'ed) examples reached here.  /* #neg=464 #pos=430 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.13180027057509552;  // std dev = 1.221, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return -0.03440274260864743;  // std dev = 0.931, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.11610607821514982;  // std dev = 1.254, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.12928207245005796;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordvenue(A, L) )
%   | | | then return 0.14084016761733342;  // std dev = 1.141, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return -0.015666558464264624;  // std dev = 2.985, 64.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=17 */
%   | | else return 0.35117656110418505;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else return -0.009695132000032346;  // std dev = 0.325, 36.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.3316490117009599;  // std dev = 0.259, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return -0.13829622576877776;  // std dev = 1.035, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.05026063985398662;  // std dev = 0.499, 876.000 (wgt'ed) examples reached here.  /* #neg=459 #pos=417 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.015617230169096222;  // std dev = 1.526, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | | else return 0.09099669117419565;  // std dev = 1.787, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordauthor(M, J) )
%   | | | then return 0.057214660846184526;  // std dev = 1.330, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | | else return -0.016292787612097615;  // std dev = 2.909, 57.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=12 */
%   | | else return 0.263626632128464;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else return -0.008485059086027952;  // std dev = 0.326, 36.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03986681350586443;  // std dev = 0.497, 894.000 (wgt'ed) examples reached here.  /* #neg=464 #pos=430 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.07478171645358;  // std dev = 1.522, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return -0.14011992351233601;  // std dev = 0.708, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.07003096992668573;  // std dev = 1.040, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.08413367846063592;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then if ( haswordauthor(N, K) )
%   | | | then return 0.04523361871823273;  // std dev = 1.331, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | | else return -0.01370569020303612;  // std dev = 2.909, 57.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=12 */
%   | | else return 0.19906137604532145;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else return -0.0074326544224828355;  // std dev = 0.326, 36.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=5 */


Results
   AUC ROC   = 0.561625
   AUC PR    = 0.250981
   CLL	      = -0.592319
   Precision = 0.472222 at threshold = 0.5
   Recall    = 0.02926
   F1        = 0.055105


Total learning time: 539.0956528186798 seconds
Total inference time: 4.015 seconds
AUC ROC: 0.561625


Dataset: 3_imdb_cora, Fold: 3, Type: Scratch (RDN-B), Time: 13:12:22
{'AUC ROC': 0.561625, 'AUC PR': 0.250981, 'CLL': -0.592319, 'Precision': [0.472222, 0.5], 'Recall': 0.02926, 'F1': 0.055105, 'Learning time': 539.0956528186798, 'Inference time': 4.015}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.33489312114601893;  // std dev = 0.499, 1,806.000 (wgt'ed) examples reached here.  /* #neg=945 #pos=861 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.5781489350995124;  // std dev = 2.245, 25.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | | else return 0.24276431971489695;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.6200536970042743;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return 0.7081489350995123;  // std dev = 1.597, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then if ( haswordtitle(K, M), haswordauthor(N, M) )
%   | | | then return 0.25208832903890627;  // std dev = 2.807, 33.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=13 */
%   | | | else return 0.4387940963898349;  // std dev = 2.747, 31.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=18 */
%   | | else return 0.0714822684328457;  // std dev = 0.410, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | else return 0.0010060779566551904;  // std dev = 0.350, 70.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=10 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2890567022463772;  // std dev = 0.499, 1,806.000 (wgt'ed) examples reached here.  /* #neg=945 #pos=861 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.49238913840392534;  // std dev = 2.245, 25.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | | else return 0.2105717177991725;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.5268429106668969;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return 0.5987301289105089;  // std dev = 1.597, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then if ( haswordauthor(M, J) )
%   | | | then return 0.4674690504158856;  // std dev = 1.793, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return 0.24684500849620972;  // std dev = 3.476, 50.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=22 */
%   | | else return 0.06255605699492194;  // std dev = 0.410, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | else return 8.835646163369436E-4;  // std dev = 0.350, 70.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=10 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2409810579889569;  // std dev = 0.499, 1,806.000 (wgt'ed) examples reached here.  /* #neg=945 #pos=861 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.39468718495146987;  // std dev = 2.245, 25.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | | else return 0.17819907632636584;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else return 0.4446030761461525;  // std dev = 0.395, 41.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=33 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | then if ( haswordauthor(K, H) )
%   | | | then return 0.38943487888471295;  // std dev = 1.793, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return 0.20550904760978475;  // std dev = 3.471, 50.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=22 */
%   | | else if ( haswordauthor(L, H) )
%   | | | then return -0.15896333542976918;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.0663887772462871;  // std dev = 3.521, 71.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=16 */
%   | else return 7.758973011973242E-4;  // std dev = 0.350, 70.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=10 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.19484675321055636;  // std dev = 0.499, 1,806.000 (wgt'ed) examples reached here.  /* #neg=945 #pos=861 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.3029206894518932;  // std dev = 2.245, 25.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | | else return 0.14748280921895676;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.31384182481406675;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return 0.362127086141678;  // std dev = 1.597, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordauthor(M, J) )
%   | | | then return 0.20951661617804462;  // std dev = 1.959, 18.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=9 */
%   | | | else return 0.06666336465562865;  // std dev = 4.471, 105.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=28 */
%   | | else return 0.3377651577922984;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | else return 6.812936799185709E-4;  // std dev = 0.350, 70.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=10 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1537886655634729;  // std dev = 0.499, 1,806.000 (wgt'ed) examples reached here.  /* #neg=945 #pos=861 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.42836359893098863;  // std dev = 0.822, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.1630219609810838;  // std dev = 2.700, 34.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=20 */
%   | | | else return 0.2534670290743253;  // std dev = 2.525, 41.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=33 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then if ( haswordauthor(L, I) )
%   | | | then return 0.2609570633189785;  // std dev = 1.793, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return 0.1341087814106281;  // std dev = 3.423, 50.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=22 */
%   | | else return 0.03639051094273717;  // std dev = 0.409, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return -0.14225896129140858;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.019031361289236683;  // std dev = 0.368, 62.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=10 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1192906391681167;  // std dev = 0.499, 1,806.000 (wgt'ed) examples reached here.  /* #neg=945 #pos=861 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.33351210197799863;  // std dev = 0.820, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.12460181946711286;  // std dev = 2.696, 34.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=20 */
%   | | | else return 0.19205958718570804;  // std dev = 2.525, 41.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=33 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordauthor(L, I) )
%   | | | then return 0.11583430798641525;  // std dev = 1.907, 18.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=9 */
%   | | | else return 0.04331613499640092;  // std dev = 4.467, 105.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=28 */
%   | | else return 0.23253869166596797;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return -0.12576741935618288;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.01669328112764493;  // std dev = 0.368, 62.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0914515206963597;  // std dev = 0.499, 1,806.000 (wgt'ed) examples reached here.  /* #neg=945 #pos=861 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.15195532917931354;  // std dev = 2.234, 25.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | | else return 0.034512905026508875;  // std dev = 1.708, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.1275677827474595;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return 0.16883391354071203;  // std dev = 1.597, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordvenue(A, L) )
%   | | | then return 0.23701703078725675;  // std dev = 1.447, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.02848653316051888;  // std dev = 4.599, 114.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=32 */
%   | | else return 0.1759325321733541;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | else return 7.981137044647456E-5;  // std dev = 0.349, 70.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=10 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0695777219691587;  // std dev = 0.499, 1,806.000 (wgt'ed) examples reached here.  /* #neg=945 #pos=861 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.2492806141469349;  // std dev = 0.644, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.0626587456342528;  // std dev = 2.728, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | | | else return 0.1099736348025439;  // std dev = 2.514, 40.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=32 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return 0.053177605887919935;  // std dev = 4.771, 116.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=37 */
%   | | | else return -0.2640295199220169;  // std dev = 0.165, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.13212618854183783;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | else if ( haswordvenue(B, N), haswordauthor(P, N) )
%   | | then return -0.11258545104079397;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.014606246183060622;  // std dev = 0.368, 62.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=10 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.052680591923076156;  // std dev = 0.499, 1,806.000 (wgt'ed) examples reached here.  /* #neg=945 #pos=861 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.21627885752945566;  // std dev = 0.817, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.04690663047878594;  // std dev = 2.674, 34.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=20 */
%   | | | else return 0.09181790097604713;  // std dev = 2.522, 41.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=33 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then if ( haswordtitle(J, L), haswordauthor(M, L) )
%   | | | then return -0.002919791341460412;  // std dev = 2.563, 33.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=13 */
%   | | | else return 0.13589021046484193;  // std dev = 2.744, 31.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=18 */
%   | | else if ( haswordauthor(N, I) )
%   | | | then return -0.20076508255371994;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.024942612909412222;  // std dev = 3.513, 71.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=16 */
%   | else return -3.2705101040350545E-4;  // std dev = 0.348, 70.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03976553970909147;  // std dev = 0.499, 1,806.000 (wgt'ed) examples reached here.  /* #neg=945 #pos=861 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.17725897308590324;  // std dev = 0.643, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.02751657123948548;  // std dev = 2.735, 34.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=22 */
%   | | | else return 0.07442079004730312;  // std dev = 2.497, 39.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=29 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then if ( haswordauthor(L, K) )
%   | | | then return 0.18039474811698109;  // std dev = 1.421, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.02724518121746945;  // std dev = 3.475, 55.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=26 */
%   | | else return 0.010710538900943551;  // std dev = 0.408, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return -0.1017881521228883;  // std dev = 6.45e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.012809917832377777;  // std dev = 0.368, 62.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=10 */


Results
   AUC ROC   = 0.556525
   AUC PR    = 0.245013
   CLL	      = -0.598318
   Precision = 0.472222 at threshold = 0.5
   Recall    = 0.02926
   F1        = 0.055105


Total learning time: 1179.1529080867767 seconds
Total inference time: 3.75 seconds
AUC ROC: 0.556525


Results scoring model
   AUC ROC   = 0.56661
   AUC PR    = 0.537853
   CLL	      = -0.670507
   Precision = 0.727273 at threshold = 0.5
   Recall    = 0.073922
   F1        = 0.134203


Total scoring time: 10.522 seconds
Parameter learned model CLL: -0.670507


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, A)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)', 'false,true,true': 'haswordtitle(K, M), haswordauthor(N, M)'}, {'true,true': [0.499, 945, 861], 'true,false,true,true': [2.245, 7, 18], 'true,false,true,false': [1.754, 8, 5], 'true,false,false,true': [1.952, 5, 16], 'true,false,false,false': [1.597, 3, 17], 'false,true,true,true': [2.807, 20, 13], 'false,true,true,false': [2.747, 13, 18], 'false,true,false': [0.41, 59, 16], 'false,false': [0.35, 60, 10]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, A)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)', 'false,true,true': 'haswordauthor(M, J)'}, {'true,true': [0.499, 945, 861], 'true,false,true,true': [2.245, 7, 18], 'true,false,true,false': [1.754, 8, 5], 'true,false,false,true': [1.952, 5, 16], 'true,false,false,false': [1.597, 3, 17], 'false,true,true,true': [1.793, 5, 9], 'false,true,true,false': [3.476, 28, 22], 'false,true,false': [0.41, 59, 16], 'false,false': [0.35, 60, 10]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, A)', 'false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false,true': 'haswordtitle(I, J), haswordvenue(A, J)', 'false,true,true': 'haswordauthor(K, H)', 'false,true,false': 'haswordauthor(L, H)'}, {'true,true': [0.499, 945, 861], 'true,false,true,true': [2.245, 7, 18], 'true,false,true,false': [1.754, 8, 5], 'true,false,false': [0.395, 8, 33], 'false,true,true,true': [1.793, 5, 9], 'false,true,true,false': [3.471, 28, 22], 'false,true,false,true': [0.0, 4, 0], 'false,true,false,false': [3.521, 55, 16], 'false,false': [0.35, 60, 10]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, A)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordauthor(M, L)', 'false,true,true': 'haswordauthor(M, J)'}, {'true,true': [0.499, 945, 861], 'true,false,true,true': [2.245, 7, 18], 'true,false,true,false': [1.754, 8, 5], 'true,false,false,true': [1.952, 5, 16], 'true,false,false,false': [1.597, 3, 17], 'false,true,true,true': [1.959, 9, 9], 'false,true,true,false': [4.471, 77, 28], 'false,true,false': [0.484, 6, 10], 'false,false': [0.35, 60, 10]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,true,true': 'haswordauthor(L, I)', 'false,false': 'haswordvenue(B, M), haswordauthor(N, M)'}, {'true,true': [0.499, 945, 861], 'true,false,true': [0.822, 1, 3], 'true,false,false,true': [2.7, 14, 20], 'true,false,false,false': [2.525, 8, 33], 'false,true,true,true': [1.793, 5, 9], 'false,true,true,false': [3.423, 28, 22], 'false,true,false': [0.409, 59, 16], 'false,false,true': [5.27e-09, 8, 0], 'false,false,false': [0.368, 52, 10]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordauthor(L, K)', 'false,true,true': 'haswordauthor(L, I)', 'false,false': 'haswordvenue(B, M), haswordauthor(N, M)'}, {'true,true': [0.499, 945, 861], 'true,false,true': [0.82, 1, 3], 'true,false,false,true': [2.696, 14, 20], 'true,false,false,false': [2.525, 8, 33], 'false,true,true,true': [1.907, 9, 9], 'false,true,true,false': [4.467, 77, 28], 'false,true,false': [0.484, 6, 10], 'false,false,true': [0.0, 8, 0], 'false,false,false': [0.368, 52, 10]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, A)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordauthor(M, L)', 'false,true,true': 'haswordvenue(A, L)'}, {'true,true': [0.499, 945, 861], 'true,false,true,true': [2.234, 7, 18], 'true,false,true,false': [1.708, 8, 5], 'true,false,false,true': [1.952, 5, 16], 'true,false,false,false': [1.597, 3, 17], 'false,true,true,true': [1.447, 4, 5], 'false,true,true,false': [4.599, 82, 32], 'false,true,false': [0.484, 6, 10], 'false,false': [0.349, 60, 10]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordauthor(L, K)', 'false,true,true': 'author(M, L), venue(M, A)', 'false,false': 'haswordvenue(B, N), haswordauthor(P, N)'}, {'true,true': [0.499, 945, 861], 'true,false,true': [0.644, 1, 5], 'true,false,false,true': [2.728, 14, 19], 'true,false,false,false': [2.514, 8, 32], 'false,true,true,true': [4.771, 79, 37], 'false,true,true,false': [0.165, 7, 0], 'false,true,false': [0.484, 6, 10], 'false,false,true': [0.0, 8, 0], 'false,false,false': [0.368, 52, 10]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,true,true': 'haswordtitle(J, L), haswordauthor(M, L)', 'false,true,false': 'haswordauthor(N, I)'}, {'true,true': [0.499, 945, 861], 'true,false,true': [0.817, 1, 3], 'true,false,false,true': [2.674, 14, 20], 'true,false,false,false': [2.522, 8, 33], 'false,true,true,true': [2.563, 20, 13], 'false,true,true,false': [2.744, 13, 18], 'false,true,false,true': [0.0, 4, 0], 'false,true,false,false': [3.513, 55, 16], 'false,false': [0.348, 60, 10]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false,true,true': 'haswordauthor(L, K)', 'false,false': 'haswordvenue(B, M), haswordauthor(N, M)'}, {'true,true': [0.499, 945, 861], 'true,false,true': [0.643, 1, 5], 'true,false,false,true': [2.735, 12, 22], 'true,false,false,false': [2.497, 10, 29], 'false,true,true,true': [1.421, 4, 5], 'false,true,true,false': [3.475, 29, 26], 'false,true,false': [0.408, 59, 16], 'false,false,true': [6.45e-09, 8, 0], 'false,false,false': [0.368, 52, 10]}]]
[{'': [0.24981699723493006, 0.19834710743801717], 'true': [0.24945916711738428, 0.20637718314372658], 'true,false': [0.23891966759002883, 0.1570493753718042], 'true,false,true': [0.2015999999999996, 0.2366863905325442], 'false': [0.22379794006521483, 0.12244897959183658], 'false,true': [0.24975585937500153, 0.16782222222222168], 'false,true,true': [0.23875114784205645, 0.24349635796045738], 'true,false,false': [0.1814058956916096, 0.12749999999999959]}, {'': [0.24885694892845028, 0.19223789793085005], 'true': [0.24945916711734323, 0.19938790729462041], 'true,false': [0.23147847711487501, 0.1564015112981168], 'true,false,true': [0.2016000000000001, 0.23668639053254428], 'false': [0.2178462341613106, 0.1224489795918365], 'false,true': [0.24728841986552685, 0.16782222222222265], 'false,true,true': [0.2295918367346938, 0.24159581391994767], 'true,false,false': [0.18140589569161, 0.12749999999999959]}, {'': [0.2479043828390213, 0.18653803491560617], 'true': [0.2494591671173827, 0.1924974023043233], 'true,false': [0.22415158227513957, 0.15576600159202808], 'true,false,true': [0.20160000000000053, 0.23668639053254442], 'false': [0.21208733262604237, 0.12244897959183676], 'false,true': [0.24419959614901351, 0.16782222222222282], 'false,true,true': [0.22959183673469388, 0.2408897381640476], 'false,true,false': [0.0, 0.17456853798849495]}, {'': [0.2472915173524837, 0.18169312560364273], 'true': [0.24945916711735827, 0.18808208071785903], 'true,false': [0.21904112234885909, 0.15569285669500044], 'true,false,true': [0.2016000000000004, 0.23668639053254445], 'false': [0.20704579996439518, 0.12244897959183663], 'false,true': [0.1962852271710178, 0.23437499999999972], 'false,true,true': [0.21324431164113702, 0.19039155777139413], 'true,false,false': [0.18140589569160973, 0.1274999999999999]}, {'': [0.24698003259942983, 0.17798710091639527], 'true': [0.24945916711735283, 0.18566290407705116], 'true,false': [0.16877867971155913, 0.18420329018754383], 'true,false,false': [0.21440957922907972, 0.15544576509056454], 'false': [0.2030240908870721, 0.12244897959183645], 'false,true': [0.2360871449374362, 0.1675622615125294], 'false,true,true': [0.22959183673469394, 0.23438603728540067], 'false,false': [3.469446951953614e-18, 0.1352757544224763]}, {'': [0.2468088236292259, 0.17541972978907738], 'true': [0.2494591671173475, 0.1837378612234233], 'true,false': [0.16823711073805472, 0.18306606258845431], 'true,false,false': [0.2138371278652506, 0.15548567762940277], 'false': [0.2005493744505447, 0.1218700244040798], 'false,true': [0.1924771684730948, 0.23437499999999997], 'false,true,true': [0.20206754780856112, 0.19006351045677092], 'false,false': [0.0, 0.13527575442247666]}, {'': [0.24671911137434596, 0.17353691927344417], 'true': [0.24945916711735172, 0.18262448128480366], 'true,false': [0.2111821156785569, 0.15553580694928457], 'true,false,true': [0.19958376012998558, 0.22441248571723016], 'false': [0.19860489605492254, 0.12145330235743279], 'false,true': [0.19194052705637601, 0.23437500000000006], 'false,true,true': [0.23267203263276898, 0.1855430549202347], 'true,false,false': [0.18140589569160992, 0.12749999999999995]}, {'': [0.24666411258169105, 0.17194245675685213], 'true': [0.24945916711736207, 0.18183369761190818], 'true,false': [0.0691906180962368, 0.1891307792788837], 'true,false,false': [0.22558281301606703, 0.1580458369481558], 'false': [0.19665315077308426, 0.12145325044969782], 'false,true': [0.19066317040337527, 0.23437500000000008], 'false,true,true': [0.19620627404607918, 0.003912025648723457], 'false,false': [-3.469446951953614e-18, 0.1352757544224764]}, {'': [0.2466159524217132, 0.1701957480273378], 'true': [0.2494591671173485, 0.1809647328138498], 'true,false': [0.16692151181117365, 0.1806517782935524], 'true,false,false': [0.21028620501387266, 0.1551625044372075], 'false': [0.1944415618763748, 0.12114475521969995], 'false,true': [0.2250846019251878, 0.1670758510888527], 'false,true,true': [0.19907208692071182, 0.24284016951901538], 'false,true,false': [0.0, 0.17377156369165703]}, {'': [0.24658663636756445, 0.16900252918623396], 'true': [0.2494591671173618, 0.18044284491576804], 'true,false': [0.06890432816072845, 0.18842967810433914], 'true,false,false': [0.22002654572430697, 0.15985903073988025], 'false': [0.19283087581206101, 0.1211450208452519], 'false,true': [0.2230899845508273, 0.16634240904554898], 'false,true,true': [0.2243415785395188, 0.21958684844030665], 'false,false': [5.204170427930421e-18, 0.13527575442247658]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
2;false,true;haswordtitle(I, J), haswordvenue(A, J).;true;true
2;false,true,false;haswordauthor(L, H).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
4;false,false;haswordvenue(B, M), haswordauthor(N, M).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false,false;haswordvenue(B, M), haswordauthor(N, M).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
7;false,false;haswordvenue(B, N), haswordauthor(P, N).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
8;false,true;haswordtitle(J, K), haswordvenue(A, K).;true;true
8;false,true,false;haswordauthor(N, I).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
9;false,false;haswordvenue(B, M), haswordauthor(N, M).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.33489312114601893;  // std dev = 0.499, 1,806.000 (wgt'ed) examples reached here.  /* #neg=945 #pos=861 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.5781489350995124;  // std dev = 2.245, 25.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | | else return 0.24276431971489695;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else return 0.6630269838799993;  // std dev = 0.396, 41.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=33 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | then if ( haswordauthor(K, H) )
%   | | | then return 0.5010060779566552;  // std dev = 1.793, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return 0.29814893509951157;  // std dev = 3.510, 50.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=22 */
%   | | else if ( haswordauthor(L, H) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.08350104777556872;  // std dev = 3.521, 71.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=16 */
%   | else return 0.0010060779566551904;  // std dev = 0.350, 70.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=10 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2890567022463772;  // std dev = 0.499, 1,806.000 (wgt'ed) examples reached here.  /* #neg=945 #pos=861 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.49238913840392534;  // std dev = 2.245, 25.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | | else return 0.2105717177991725;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.5190282096245573;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return 0.6071234477197954;  // std dev = 1.597, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then if ( haswordauthor(M, J) )
%   | | | then return 0.4285227559352605;  // std dev = 1.793, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return 0.2578503936789584;  // std dev = 3.510, 50.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=22 */
%   | | else return 0.06244415781895554;  // std dev = 0.409, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | else return 8.835646163369436E-4;  // std dev = 0.350, 70.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=10 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2409810579889569;  // std dev = 0.499, 1,806.000 (wgt'ed) examples reached here.  /* #neg=945 #pos=861 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.39468718495146987;  // std dev = 2.245, 25.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | | else return 0.17819907632636584;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.4116557446161647;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return 0.4794480255016773;  // std dev = 1.597, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then if ( haswordtitle(K, M), haswordauthor(N, M) )
%   | | | then return 0.1399013636553456;  // std dev = 2.724, 33.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=13 */
%   | | | else return 0.3569047824979674;  // std dev = 2.747, 31.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=18 */
%   | | else return 0.0542705639316176;  // std dev = 0.409, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | else return 7.758973011973242E-4;  // std dev = 0.350, 70.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=10 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.19484675321055636;  // std dev = 0.499, 1,806.000 (wgt'ed) examples reached here.  /* #neg=945 #pos=861 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.3029206894518932;  // std dev = 2.245, 25.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | | else return 0.14748280921895676;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.3132949134171759;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return 0.3625977189891068;  // std dev = 1.597, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordvenue(A, L) )
%   | | | then return 0.2981277258117425;  // std dev = 1.470, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.07171615932923577;  // std dev = 4.646, 114.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=32 */
%   | | else return 0.3332905025826298;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | else return 6.812936799185709E-4;  // std dev = 0.350, 70.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=10 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.4676779612733557;  // std dev = 0.377, 27.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=22 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.24322815155817948;  // std dev = 1.043, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return -0.2229555204830458;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.1516207507034001;  // std dev = 0.499, 1,770.000 (wgt'ed) examples reached here.  /* #neg=930 #pos=840 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.166338965399642;  // std dev = 2.755, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | | | else return 0.24792640087520307;  // std dev = 2.515, 40.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=32 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then return 0.16208999713664363;  // std dev = 0.486, 64.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=31 */
%   | | else return 0.03669201777858767;  // std dev = 0.409, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | else return 5.981815657343665E-4;  // std dev = 0.350, 70.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=10 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11927057164510921;  // std dev = 0.499, 1,806.000 (wgt'ed) examples reached here.  /* #neg=945 #pos=861 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.27010340569439034;  // std dev = 0.699, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.1276817945957927;  // std dev = 2.754, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | | | else return 0.18785298707664;  // std dev = 2.515, 40.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=32 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordauthor(L, I) )
%   | | | then return 0.16889373375298464;  // std dev = 1.926, 18.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=9 */
%   | | | else return 0.03638479007634728;  // std dev = 4.451, 105.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=28 */
%   | | else return 0.22169557598446615;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return -0.1423319678339323;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.018958354746712775;  // std dev = 0.368, 62.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09144878624129013;  // std dev = 0.499, 1,806.000 (wgt'ed) examples reached here.  /* #neg=945 #pos=861 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.15412878562254806;  // std dev = 2.451, 32.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=23 */
%   | | | else return -0.10241070717301769;  // std dev = 1.248, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.13004615350342416;  // std dev = 1.984, 20.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=13 */
%   | | | else return 0.1712625752002615;  // std dev = 1.597, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then if ( author(P, N), venue(P, A) )
%   | | | then return 0.0634799443462485;  // std dev = 4.786, 116.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=37 */
%   | | | else return -0.26125601628991907;  // std dev = 0.171, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.1674028584095808;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | else return 3.479125438463912E-4;  // std dev = 0.349, 70.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=10 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06958612941825541;  // std dev = 0.499, 1,806.000 (wgt'ed) examples reached here.  /* #neg=945 #pos=861 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.3330751444265531;  // std dev = 0.773, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.05894708623656085;  // std dev = 2.661, 34.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=20 */
%   | | | else return 0.11271593518044465;  // std dev = 2.520, 41.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=33 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then if ( haswordauthor(L, I) )
%   | | | then return 0.20455644414845797;  // std dev = 1.782, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return 0.047701869452443896;  // std dev = 3.336, 50.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=22 */
%   | | else if ( haswordauthor(M, I) )
%   | | | then return -0.18477060036791915;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.028163467154788537;  // std dev = 3.512, 71.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=16 */
%   | else return 3.05404722049607E-4;  // std dev = 0.349, 70.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=10 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05269525691587299;  // std dev = 0.499, 1,806.000 (wgt'ed) examples reached here.  /* #neg=945 #pos=861 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.2566987277959148;  // std dev = 0.769, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.04502497590580318;  // std dev = 2.662, 34.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=20 */
%   | | | else return 0.08929421195954168;  // std dev = 2.521, 41.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=33 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordvenue(A, K) )
%   | | | then return 0.16711794844431596;  // std dev = 1.424, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.014950397152664314;  // std dev = 4.573, 114.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=32 */
%   | | else return 0.11373068010628191;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return -0.12589705171137852;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.016547453843404645;  // std dev = 0.368, 62.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.039783015272047424;  // std dev = 0.499, 1,806.000 (wgt'ed) examples reached here.  /* #neg=945 #pos=861 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.19710229310736904;  // std dev = 0.768, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.034436001518755206;  // std dev = 2.663, 34.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=20 */
%   | | | else return 0.07152047226827986;  // std dev = 2.522, 41.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=33 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( haswordtitle(K, I) )
%   | | then return 0.0806090953533578;  // std dev = 0.440, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else return -0.12473806311152087;  // std dev = 0.304, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, B) )
%   | | | then return 0.012760888982136407;  // std dev = 4.075, 89.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=23 */
%   | | | else return 0.07728799406402415;  // std dev = 2.616, 33.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=18 */
%   | | else return 0.010717348295524976;  // std dev = 0.359, 65.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=10 */


Results
   AUC ROC   = 0.556615
   AUC PR    = 0.250688
   CLL	      = -0.595577
   Precision = 0.472222 at threshold = 0.5
   Recall    = 0.02926
   F1        = 0.055105


Total learning time: 1146.8575279712677 seconds
Total inference time: 3.704 seconds
AUC ROC: 0.556615


Results scoring model
   AUC ROC   = 0.57541
   AUC PR    = 0.549499
   CLL	      = -0.668882
   Precision = 0.756303 at threshold = 0.5
   Recall    = 0.092402
   F1        = 0.164684


Total scoring time: 9.947 seconds
Refined model CLL: -0.668882


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.556615
   AUC PR    = 0.250688
   CLL	      = -0.595577
   Precision = 0.472222 at threshold = 0.5
   Recall    = 0.02926
   F1        = 0.055105


Total learning time: 2346.4794360580445 seconds
Total inference time: 3.704 seconds
AUC ROC: 0.556615
Total revision time: 2346.4794360580445
Best scored revision CLL: -0.668882


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 13:51:41
{'AUC ROC': 0.556615, 'AUC PR': 0.250688, 'CLL': -0.595577, 'Precision': [0.472222, 0.5], 'Recall': 0.02926, 'F1': 0.055105, 'Learning time': 2346.4794360580445, 'Inference time': 3.704, 'parameter_0.4': {'AUC ROC': 0.556525, 'AUC PR': 0.245013, 'CLL': -0.598318, 'Precision': [0.472222, 0.5], 'Recall': 0.02926, 'F1': 0.055105, 'Learning time': 1179.1529080867767, 'Inference time': 3.75}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.33489312114601893;  // std dev = 0.499, 1,806.000 (wgt'ed) examples reached here.  /* #neg=945 #pos=861 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.5781489350995124;  // std dev = 2.245, 25.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | | else return 0.24276431971489695;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else return 0.6630269838799993;  // std dev = 0.396, 41.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=33 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | then if ( haswordauthor(K, H) )
%   | | | then return 0.5010060779566552;  // std dev = 1.793, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return 0.29814893509951157;  // std dev = 3.510, 50.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=22 */
%   | | else if ( haswordauthor(L, H) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.08350104777556872;  // std dev = 3.521, 71.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=16 */
%   | else return 0.0010060779566551904;  // std dev = 0.350, 70.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=10 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2890567022463772;  // std dev = 0.499, 1,806.000 (wgt'ed) examples reached here.  /* #neg=945 #pos=861 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.4208247861201152;  // std dev = 1.929, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | | | else return 0.3779074642529788;  // std dev = 2.249, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   | | else return 0.5620014965002833;  // std dev = 0.396, 41.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=33 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | then if ( haswordauthor(K, H) )
%   | | | then return 0.4285227559352605;  // std dev = 1.793, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return 0.2578503936789584;  // std dev = 3.510, 50.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=22 */
%   | | else if ( haswordauthor(L, H) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.0730294421202145;  // std dev = 3.521, 71.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=16 */
%   | else return 8.835646163369436E-4;  // std dev = 0.350, 70.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=10 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2409810579889569;  // std dev = 0.499, 1,806.000 (wgt'ed) examples reached here.  /* #neg=945 #pos=861 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.41601871423000253;  // std dev = 2.247, 25.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | | else return 0.1452386477883293;  // std dev = 1.748, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.40181429606784147;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return 0.4899095341630796;  // std dev = 1.597, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then if ( haswordauthor(M, J) )
%   | | | then return 0.34770087126293936;  // std dev = 1.793, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return 0.2162596212076447;  // std dev = 3.510, 50.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=22 */
%   | | else return 0.0539892623597658;  // std dev = 0.408, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | else return 7.758973011973242E-4;  // std dev = 0.350, 70.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=10 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.19484675321055636;  // std dev = 0.499, 1,806.000 (wgt'ed) examples reached here.  /* #neg=945 #pos=861 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.3216708535080788;  // std dev = 2.247, 25.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | | else return 0.11780643521455933;  // std dev = 1.748, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.30508622765484705;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return 0.37125268335342876;  // std dev = 1.597, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, A) )
%   | | | then return 0.1024925526213032;  // std dev = 4.834, 116.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=37 */
%   | | | else return -0.22320860531904924;  // std dev = 0.123, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.3614777169419953;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | else return 6.812936799185709E-4;  // std dev = 0.350, 70.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=10 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1537886655634729;  // std dev = 0.499, 1,806.000 (wgt'ed) examples reached here.  /* #neg=945 #pos=861 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.24268306781831867;  // std dev = 2.247, 25.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | | else return 0.0941403056340817;  // std dev = 1.748, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.22897026648789615;  // std dev = 1.952, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | | else return 0.27893670200001364;  // std dev = 1.597, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, A) )
%   | | | then return 0.08517237926453014;  // std dev = 4.828, 116.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=37 */
%   | | | else return -0.18729765303090384;  // std dev = 0.108, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.2856659526987411;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | else return 5.981815657343665E-4;  // std dev = 0.350, 70.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=10 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.4299001665736595;  // std dev = 0.377, 27.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=22 */
%   | | else if ( author(G, E), venue(G, A) )
%   | | | then return 0.20722627166815796;  // std dev = 1.041, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return -0.2574535468783897;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.11712272430804753;  // std dev = 0.499, 1,770.000 (wgt'ed) examples reached here.  /* #neg=930 #pos=840 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.12099786896133753;  // std dev = 2.755, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | | | else return 0.18655190285801065;  // std dev = 2.515, 40.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=32 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then return 0.13833530557650453;  // std dev = 0.482, 64.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=31 */
%   | | else return 0.02207247611689753;  // std dev = 0.407, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | else return 5.251750232104811E-4;  // std dev = 0.350, 70.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09145476775747222;  // std dev = 0.499, 1,806.000 (wgt'ed) examples reached here.  /* #neg=945 #pos=861 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.35266678085289116;  // std dev = 0.816, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.07955289353471841;  // std dev = 2.683, 34.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=20 */
%   | | | else return 0.14756649243702574;  // std dev = 2.521, 41.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=33 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordauthor(L, I) )
%   | | | then return 0.11782294521556398;  // std dev = 1.887, 18.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=9 */
%   | | | else return 0.03013756640158208;  // std dev = 4.448, 105.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=28 */
%   | | else return 0.18527102651484023;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return -0.14239608987159616;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.018894232709049028;  // std dev = 0.368, 62.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=10 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.3044251757145151;  // std dev = 0.376, 27.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=22 */
%   | | else return -0.10563356434010508;  // std dev = 0.396, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.06793221362665111;  // std dev = 0.499, 1,770.000 (wgt'ed) examples reached here.  /* #neg=930 #pos=840 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.06182031012303065;  // std dev = 2.726, 34.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=22 */
%   | | | else return 0.11718589672638643;  // std dev = 2.526, 39.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=29 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then if ( haswordauthor(M, L) )
%   | | | then return 0.2148294538786763;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.0645324949017224;  // std dev = 3.537, 55.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=26 */
%   | | else return 0.013289247461329933;  // std dev = 0.407, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | else return 2.915789890812759E-4;  // std dev = 0.349, 70.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=10 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05268819090079453;  // std dev = 0.498, 1,806.000 (wgt'ed) examples reached here.  /* #neg=945 #pos=861 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.2614641312737792;  // std dev = 0.814, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.03280588620308657;  // std dev = 2.679, 34.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=20 */
%   | | | else return 0.0957335325604843;  // std dev = 2.518, 41.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=33 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return 0.0379449917892069;  // std dev = 4.782, 116.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=37 */
%   | | | else return -0.18981042063277223;  // std dev = 0.148, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.12311464728054969;  // std dev = 0.484, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | else if ( haswordvenue(B, N), haswordauthor(P, N) )
%   | | then return -0.12590798140162132;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.016535159006387027;  // std dev = 0.368, 62.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03978799081977484;  // std dev = 0.498, 1,806.000 (wgt'ed) examples reached here.  /* #neg=945 #pos=861 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.08371390004941774;  // std dev = 2.431, 32.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=23 */
%   | | | else return -0.17034638920795292;  // std dev = 1.274, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.0673917561739548;  // std dev = 1.952, 20.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=13 */
%   | | | else return 0.09746744419239206;  // std dev = 1.597, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then if ( haswordvenue(B, M) )
%   | | | then return 0.13429871944171393;  // std dev = 1.786, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return -0.0031445299967760285;  // std dev = 3.928, 100.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=24 */
%   | | else return 0.15197544254393464;  // std dev = 0.489, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   | else return -0.0013687559625669768;  // std dev = 0.398, 79.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=16 */


Results
   AUC ROC   = 0.556908
   AUC PR    = 0.249771
   CLL	      = -0.593108
   Precision = 0.472222 at threshold = 0.5
   Recall    = 0.02926
   F1        = 0.055105


Total learning time: 1415.4177589416504 seconds
Total inference time: 3.999 seconds
AUC ROC: 0.556908


Dataset: 3_imdb_cora, Fold: 3, Type: Scratch (RDN-B), Time: 14:15:21
{'AUC ROC': 0.556908, 'AUC PR': 0.249771, 'CLL': -0.593108, 'Precision': [0.472222, 0.5], 'Recall': 0.02926, 'F1': 0.055105, 'Learning time': 1415.4177589416504, 'Inference time': 3.999}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3392740276235635;  // std dev = 0.500, 2,702.000 (wgt'ed) examples reached here.  /* #neg=1,402 #pos=1,300 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.4945125714631477;  // std dev = 3.191, 44.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=28 */
%   | | | else return 0.26991364098186527;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.6248156017661783;  // std dev = 2.317, 30.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=23 */
%   | | | else return 0.6581489350995119;  // std dev = 2.000, 25.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then if ( haswordauthor(M, L) )
%   | | | then return 0.5052077586289241;  // std dev = 1.970, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return 0.28497820339219393;  // std dev = 4.479, 82.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=35 */
%   | | else return 0.03246086170501694;  // std dev = 0.379, 109.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=19 */
%   | else return 0.014670674229947162;  // std dev = 0.363, 115.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=18 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.29276877778079746;  // std dev = 0.500, 2,702.000 (wgt'ed) examples reached here.  /* #neg=1,402 #pos=1,300 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.4190479072716225;  // std dev = 3.450, 51.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=32 */
%   | | | else return 0.1220189492173173;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return 0.762060339062722;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5305139920548627;  // std dev = 3.037, 52.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=40 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then if ( haswordauthor(N, M) )
%   | | | then return 0.43201604470553195;  // std dev = 1.970, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return 0.24663351302630535;  // std dev = 4.479, 82.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=35 */
%   | | else return 0.028463298477504645;  // std dev = 0.379, 109.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=19 */
%   | else return 0.012875422164973756;  // std dev = 0.363, 115.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=18 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24390066310320704;  // std dev = 0.500, 2,702.000 (wgt'ed) examples reached here.  /* #neg=1,402 #pos=1,300 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.3416680949381165;  // std dev = 3.449, 51.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=32 */
%   | | | else return 0.10346094447005949;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.41887700019292173;  // std dev = 2.307, 30.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=23 */
%   | | | else return 0.4460688213651424;  // std dev = 1.995, 25.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then if ( haswordvenue(A, M) )
%   | | | then return 0.3502991783942835;  // std dev = 1.970, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return 0.05376743082847614;  // std dev = 5.360, 167.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=38 */
%   | | else return 0.447133390470964;  // std dev = 0.471, 24.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | else return 0.011284311697608018;  // std dev = 0.363, 115.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=18 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.19699302295736099;  // std dev = 0.500, 2,702.000 (wgt'ed) examples reached here.  /* #neg=1,402 #pos=1,300 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordauthor(G, E) )
%   | | | then return 0.4833846735336434;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.21573955719281374;  // std dev = 3.625, 56.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=31 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.4935200254694336;  // std dev = 0.012, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.3185236817849527;  // std dev = 3.036, 52.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=40 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordauthor(M, J) )
%   | | | then return 0.23240703668249654;  // std dev = 2.319, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | | | else return 0.042072396231605774;  // std dev = 5.220, 160.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=38 */
%   | | else return 0.3611693208035925;  // std dev = 0.471, 24.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | else return 0.009877821947888873;  // std dev = 0.363, 115.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=18 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.15528564178487414;  // std dev = 0.500, 2,702.000 (wgt'ed) examples reached here.  /* #neg=1,402 #pos=1,300 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.4000261948067969;  // std dev = 0.346, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.1592211147263468;  // std dev = 3.596, 55.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=30 */
%   | | | else return 0.2442414603723354;  // std dev = 3.042, 54.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=42 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then if ( haswordtitle(J, L), haswordauthor(M, L) )
%   | | | then return 0.07429129848864073;  // std dev = 3.335, 54.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=20 */
%   | | | else return 0.261078662740505;  // std dev = 3.254, 45.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=26 */
%   | | else return 0.015752021485016997;  // std dev = 0.370, 110.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=18 */
%   | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | then return 0.011023853650636862;  // std dev = 0.380, 109.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=19 */
%   | | else return -0.1478843421513464;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.12029839985859712;  // std dev = 0.500, 2,702.000 (wgt'ed) examples reached here.  /* #neg=1,402 #pos=1,300 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.17496035052929088;  // std dev = 2.901, 45.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=31 */
%   | | | else return -0.06473205469347776;  // std dev = 1.569, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.1835422334125146;  // std dev = 2.801, 36.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=23 */
%   | | | else return 0.1969138664468649;  // std dev = 1.991, 25.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then if ( haswordauthor(N, M) )
%   | | | then return 0.27454212531869754;  // std dev = 2.099, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.08918005315174067;  // std dev = 4.153, 80.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=35 */
%   | | else return 0.013756007687936085;  // std dev = 0.370, 110.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=18 */
%   | else return 0.0033846747444783404;  // std dev = 0.373, 114.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=19 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordvenue(B, D) )
%   | | | then return 0.6109909328258779;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.24218894942239722;  // std dev = 3.090, 43.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=28 */
%   | | else if ( haswordauthor(G, C) )
%   | | | then return 0.3017880984265265;  // std dev = 0.831, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.2150960236958614;  // std dev = 1.818, 23.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.09123409392009614;  // std dev = 0.500, 2,632.000 (wgt'ed) examples reached here.  /* #neg=1,368 #pos=1,264 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.08767898488654181;  // std dev = 3.573, 55.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=30 */
%   | | | else return 0.1407081573241902;  // std dev = 3.043, 54.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=42 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then return 0.052328751461386123;  // std dev = 0.423, 209.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=64 */
%   | else return 0.0029220097430261976;  // std dev = 0.373, 114.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=19 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordtitle(F, C) )
%   | | | then return 0.3036919270809877;  // std dev = 2.761, 41.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=30 */
%   | | | else return 0.1547145440732384;  // std dev = 1.018, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return -0.20359281073178928;  // std dev = 0.384, 25.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=6 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.06908777680642644;  // std dev = 0.499, 2,638.000 (wgt'ed) examples reached here.  /* #neg=1,372 #pos=1,266 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.0598267098639207;  // std dev = 3.167, 48.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=30 */
%   | | | else return 0.10974093365769773;  // std dev = 3.415, 59.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=41 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then return 0.0273731718023889;  // std dev = 0.418, 184.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=49 */
%   | | else return 0.18103723399341987;  // std dev = 0.471, 24.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | else return -7.760211713851743E-4;  // std dev = 0.363, 115.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=18 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordvenue(B, D) )
%   | | | then return 0.3862261656637378;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.16764180482898872;  // std dev = 3.076, 43.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=28 */
%   | | else if ( haswordauthor(G, C) )
%   | | | then return 0.27936173646975326;  // std dev = 0.830, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.1834118510572058;  // std dev = 1.824, 23.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.05224121971178304;  // std dev = 0.499, 2,632.000 (wgt'ed) examples reached here.  /* #neg=1,368 #pos=1,264 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.04210764445530853;  // std dev = 3.568, 55.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=30 */
%   | | | else return 0.09044127515312307;  // std dev = 3.041, 54.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=42 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then return 0.035757776232825556;  // std dev = 0.421, 209.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=64 */
%   | else return -0.0011243094735183356;  // std dev = 0.373, 114.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=19 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordtitle(F, C) )
%   | | | then return 0.1501028345193426;  // std dev = 2.986, 44.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=30 */
%   | | | else return 0.12474107651346858;  // std dev = 0.840, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.07848851978244911;  // std dev = 0.403, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.03941027510674788;  // std dev = 0.499, 2,632.000 (wgt'ed) examples reached here.  /* #neg=1,368 #pos=1,264 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.03182147394026884;  // std dev = 3.568, 55.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=30 */
%   | | | else return 0.07138126155687675;  // std dev = 3.042, 54.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=42 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then return 0.01943954861274021;  // std dev = 0.417, 184.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=49 */
%   | | else return 0.12692644051815705;  // std dev = 0.471, 24.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | else return -0.005282976122974004;  // std dev = 0.363, 115.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=18 */


Results
   AUC ROC   = 0.561621
   AUC PR    = 0.25141
   CLL	      = -0.596726
   Precision = 0.473684 at threshold = 0.5
   Recall    = 0.030981
   F1        = 0.058158


Total learning time: 1265.374099969864 seconds
Total inference time: 3.749 seconds
AUC ROC: 0.561621


Results scoring model
   AUC ROC   = 0.584388
   AUC PR    = 0.552412
   CLL	      = -0.667227
   Precision = 0.715 at threshold = 0.5
   Recall    = 0.097878
   F1        = 0.172185


Total scoring time: 10.608 seconds
Parameter learned model CLL: -0.667227


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, A)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)', 'false,true,true': 'haswordauthor(M, L)'}, {'true,true': [0.5, 1, 1], 'true,false,true,true': [3.191, 16, 28], 'true,false,true,false': [2.029, 10, 7], 'true,false,false,true': [2.317, 7, 23], 'true,false,false,false': [2.0, 5, 20], 'false,true,true,true': [1.97, 6, 11], 'false,true,true,false': [4.479, 47, 35], 'false,true,false': [0.379, 90, 19], 'false,false': [0.363, 97, 18]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,true': 'haswordtitle(L, M), haswordvenue(A, M)', 'false,true,true': 'haswordauthor(N, M)'}, {'true,true': [0.5, 1, 1], 'true,false,true,true': [3.45, 19, 32], 'true,false,true,false': [1.449, 7, 3], 'true,false,false,true': [0.005, 0, 3], 'true,false,false,false': [3.037, 12, 40], 'false,true,true,true': [1.97, 6, 11], 'false,true,true,false': [4.479, 47, 35], 'false,true,false': [0.379, 90, 19], 'false,false': [0.363, 97, 18]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,true': 'haswordtitle(L, M), haswordauthor(N, M)', 'false,true,true': 'haswordvenue(A, M)'}, {'true,true': [0.5, 1, 1], 'true,false,true,true': [3.449, 19, 32], 'true,false,true,false': [1.449, 7, 3], 'true,false,false,true': [2.307, 7, 23], 'true,false,false,false': [1.995, 5, 20], 'false,true,true,true': [1.97, 6, 11], 'false,true,true,false': [5.36, 129, 38], 'false,true,false': [0.471, 8, 16], 'false,false': [0.363, 97, 18]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordauthor(G, E)', 'true,false,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordauthor(M, L)', 'false,true,true': 'haswordauthor(M, J)'}, {'true,true': [0.5, 1, 1], 'true,false,true,true': [0.894, 1, 4], 'true,false,true,false': [3.625, 25, 31], 'true,false,false,true': [0.012, 0, 3], 'true,false,false,false': [3.036, 12, 40], 'false,true,true,true': [2.319, 13, 11], 'false,true,true,false': [5.22, 122, 38], 'false,true,false': [0.471, 8, 16], 'false,false': [0.363, 97, 18]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,true,true': 'haswordtitle(J, L), haswordauthor(M, L)', 'false,false': 'haswordvenue(B, N), haswordtitle(P, N)'}, {'true,true': [0.5, 1, 1], 'true,false,true': [0.346, 1, 6], 'true,false,false,true': [3.596, 25, 30], 'true,false,false,false': [3.042, 12, 42], 'false,true,true,true': [3.335, 34, 20], 'false,true,true,false': [3.254, 19, 26], 'false,true,false': [0.37, 92, 18], 'false,false,true': [0.38, 90, 19], 'false,false,false': [3.73e-09, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,true': 'haswordtitle(L, M), haswordvenue(B, M)', 'false,true,true': 'haswordauthor(N, M)'}, {'true,true': [0.5, 1, 1], 'true,false,true,true': [2.901, 14, 31], 'true,false,true,false': [1.569, 6, 4], 'true,false,false,true': [2.801, 13, 23], 'true,false,false,false': [1.991, 5, 20], 'false,true,true,true': [2.099, 8, 11], 'false,true,true,false': [4.153, 45, 35], 'false,true,false': [0.37, 92, 18], 'false,false': [0.373, 95, 19]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,true': 'haswordvenue(B, D)', 'true,true,false': 'haswordauthor(G, C)', 'true,false': 'haswordtitle(H, C)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)'}, {'true,true,true,true': [0.0, 0, 6], 'true,true,true,false': [3.09, 15, 28], 'true,true,false,true': [0.831, 1, 4], 'true,true,false,false': [1.818, 19, 4], 'true,false,true': [0.5, 1, 1], 'true,false,false,true': [3.573, 25, 30], 'true,false,false,false': [3.043, 12, 42], 'false,true': [0.423, 145, 64], 'false,false': [0.373, 95, 19]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,true': 'haswordtitle(F, C)', 'true,false': 'haswordtitle(G, C)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordauthor(M, L)'}, {'true,true,true,true': [2.761, 11, 30], 'true,true,true,false': [1.018, 2, 5], 'true,true,false': [0.384, 19, 6], 'true,false,true': [0.499, 1, 1], 'true,false,false,true': [3.167, 18, 30], 'true,false,false,false': [3.415, 18, 41], 'false,true,true': [0.418, 135, 49], 'false,true,false': [0.471, 8, 16], 'false,false': [0.363, 97, 18]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,true': 'haswordvenue(B, D)', 'true,true,false': 'haswordauthor(G, C)', 'true,false': 'haswordtitle(H, C)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)'}, {'true,true,true,true': [0.0, 0, 6], 'true,true,true,false': [3.076, 15, 28], 'true,true,false,true': [0.83, 1, 4], 'true,true,false,false': [1.824, 19, 4], 'true,false,true': [0.499, 1, 1], 'true,false,false,true': [3.568, 25, 30], 'true,false,false,false': [3.041, 12, 42], 'false,true': [0.421, 145, 64], 'false,false': [0.373, 95, 19]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,true': 'haswordtitle(F, C)', 'true,false': 'haswordtitle(G, C)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordauthor(M, L)'}, {'true,true,true,true': [2.986, 14, 30], 'true,true,true,false': [0.84, 1, 4], 'true,true,false': [0.403, 20, 8], 'true,false,true': [0.499, 1, 1], 'true,false,false,true': [3.568, 25, 30], 'true,false,false,false': [3.042, 12, 42], 'false,true,true': [0.417, 135, 49], 'false,true,false': [0.471, 8, 16], 'false,false': [0.363, 97, 18]}]]
[{'': [0.24987898438557127, 0.19093444775661672], 'true': [0.24964373786779961, 0.22027348394768181], 'true,false': [0.2445579145391041, 0.1705785123966948], 'true,false,true': [0.2314049586776874, 0.24221453287197234], 'false': [0.21484375000000025, 0.13202268431001835], 'false,true': [0.24875012753800665, 0.14392727884858122], 'false,true,true': [0.228373702422145, 0.2446460440214174], 'true,false,false': [0.1788888888888898, 0.16000000000000014]}, {'': [0.2492358968639178, 0.18539251450049385], 'true': [0.24964373786777505, 0.21533939077874026], 'true,false': [0.2416237755863228, 0.17048743175675704], 'true,false,true': [0.23336120410673925, 0.21000000000000005], 'false': [0.20845141068830236, 0.13202268431001926], 'false,true': [0.2467397900945336, 0.14392727884858106], 'false,true,true': [0.2283737024221455, 0.24464604402141532], 'true,false,false': [8.164858445569578e-06, 0.17739838985166698]}, {'': [0.24854346753038, 0.18035622938871299], 'true': [0.24964373786779082, 0.20917639641064611], 'true,false': [0.23726416754420054, 0.16932522507895525], 'true,false,true': [0.2333080095466324, 0.21000000000000002], 'false': [0.20260441395622547, 0.13202268431001885], 'false,true': [0.1845917256608347, 0.22222222222222254], 'false,true,true': [0.22837370242214539, 0.1720108108012573], 'true,false,false': [0.17739101883268915, 0.1592429661352046]}, {'': [0.24809256599192772, 0.17446452751368016], 'true': [0.24964373786773822, 0.2052688942418758], 'true,false': [0.2339399005911824, 0.16917354413888866], 'true,false,true': [0.16000000000000006, 0.23467004560172233], 'false': [0.1949832367272484, 0.13202268431001854], 'false,true': [0.1814385687839972, 0.22222222222222224], 'false,true,true': [0.2241198923606238, 0.17031107346199365], 'true,false,false': [5.0838349832216245e-05, 0.17726023857523002]}, {'': [0.24783165095894533, 0.17035064157871688], 'true': [0.24964373786776836, 0.2023919636721402], 'true,false': [0.11978249662555553, 0.20531500491552385], 'true,false,false': [0.23505281759415825, 0.17137910434561315], 'false': [0.1851433134656204, 0.1391263069118314], 'false,true': [0.2279626291910701, 0.13685950413223172], 'false,true,true': [0.20597513597866166, 0.23531697407641902], 'false,false': [0.14440071186370942, 2.7755575615628915e-18]}, {'': [0.2476881636767469, 0.16719841596213045], 'true': [0.24964373786777344, 0.20049387980126865], 'true,false': [0.206316467555375, 0.19366860762634053], 'true,false,true': [0.18702579558343926, 0.24611794214787808], 'true,false,false': [0.21794853073772094, 0.1585999966980806], 'false': [0.18124110925658438, 0.13888940842187542], 'false,true': [0.22406943237826382, 0.13685950413223183], 'false,true,true': [0.23191903334809355, 0.2156109818634595]}, {'': [0.24756673164668605, 0.16520795417848272], 'true': [0.23836353494992502, 0.2477672784293909], 'true,false': [0.24960966731647094, 0.20278399648227632], 'true,true': [0.2094791866147115, 0.18186343786992162], 'true,true,true': [-7.401486830834377e-17, 0.22205395448392887], 'true,false,false': [0.23215500096244537, 0.171450138437255], 'true,true,false': [0.1381052760987651, 0.14366729678638934], 'false': [0.17870193111767688, 0.13888950896254104]}, {'': [0.24680437593625928, 0.16480035579086424], 'true': [0.22403476049828047, 0.247355379553139], 'true,false': [0.2491271581161132, 0.203353095269207], 'true,true': [0.1831313524765802, 0.14754415384482622], 'true,false,false': [0.20895190370457417, 0.19768048175122113], 'true,true,true': [0.1858969753342352, 0.1479751066736206], 'false': [0.1823632349054082, 0.13167894737729893], 'false,true': [0.1744397007125396, 0.22222222222222235]}, {'': [0.24615531261593776, 0.16385139803539878], 'true': [0.20992489674524772, 0.24714098911588736], 'true,false': [0.24899262909036182, 0.20224665689937812], 'true,true': [0.19828367326937585, 0.17484953409075787], 'true,false,false': [0.23146892335943728, 0.17130445119063553], 'true,true,true': [0.0, 0.22010065772993595], 'true,true,false': [0.1379352935820771, 0.144631620178133], 'false': [0.17700668214446078, 0.13885319065663387]}, {'': [0.24574310493715615, 0.16362927837158955], 'true': [0.19580047935243944, 0.24712840036404043], 'true,false': [0.2489886527151417, 0.20207078382991425], 'true,false,false': [0.23145917744768787, 0.1713484935099214], 'true,true': [0.19643468849395207, 0.1621867205943273], 'true,true,true': [0.20263721109254798, 0.14127490542544066], 'false': [0.18083374847181694, 0.13162408301543493], 'false,true': [0.17410216359589004, 0.22222222222222224]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
1;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
3;true,false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
4;false,false;haswordvenue(B, N), haswordtitle(P, N).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
6;true,true;haswordtitle(F, D).;true;true
6;true,true,true;haswordvenue(B, D).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
8;true,true;haswordtitle(F, D).;true;true
8;true,true,true;haswordvenue(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3392740276235635;  // std dev = 0.500, 2,702.000 (wgt'ed) examples reached here.  /* #neg=1,402 #pos=1,300 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.4855999154916681;  // std dev = 3.453, 51.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=32 */
%   | | | else return 0.15814893509951225;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.6248156017661783;  // std dev = 2.317, 30.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=23 */
%   | | | else return 0.6581489350995119;  // std dev = 2.000, 25.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then if ( haswordauthor(N, M) )
%   | | | then return 0.5052077586289241;  // std dev = 1.970, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return 0.28497820339219393;  // std dev = 4.479, 82.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=35 */
%   | | else return 0.03246086170501694;  // std dev = 0.379, 109.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=19 */
%   | else return 0.014670674229947162;  // std dev = 0.363, 115.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=18 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.29276877778079746;  // std dev = 0.500, 2,702.000 (wgt'ed) examples reached here.  /* #neg=1,402 #pos=1,300 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.4156994981461517;  // std dev = 3.453, 51.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=32 */
%   | | | else return 0.1377866547829789;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.5307475079498224;  // std dev = 2.317, 30.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=23 */
%   | | | else return 0.5580193346218546;  // std dev = 2.000, 25.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then if ( haswordauthor(N, M) )
%   | | | then return 0.43201604470553195;  // std dev = 1.970, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return 0.24663351302630535;  // std dev = 4.479, 82.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=35 */
%   | | else return 0.028463298477504645;  // std dev = 0.379, 109.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=19 */
%   | else return 0.012875422164973756;  // std dev = 0.363, 115.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=18 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24390066310320704;  // std dev = 0.500, 2,702.000 (wgt'ed) examples reached here.  /* #neg=1,402 #pos=1,300 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.3381333799370048;  // std dev = 3.453, 51.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=32 */
%   | | | else return 0.11817988627418433;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.422422402553765;  // std dev = 2.317, 30.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=23 */
%   | | | else return 0.4419486100244409;  // std dev = 2.000, 25.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then if ( haswordvenue(A, M) )
%   | | | then return 0.3502991783942835;  // std dev = 1.970, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return 0.05376743082847614;  // std dev = 5.360, 167.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=38 */
%   | | else return 0.447133390470964;  // std dev = 0.471, 24.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | else return 0.011284311697608018;  // std dev = 0.363, 115.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=18 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.19699302295736099;  // std dev = 0.500, 2,702.000 (wgt'ed) examples reached here.  /* #neg=1,402 #pos=1,300 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.4792734313444334;  // std dev = 0.346, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2117384338760634;  // std dev = 3.613, 55.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=30 */
%   | | | else return 0.32422548495901693;  // std dev = 3.054, 54.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=42 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordvenue(A, K) )
%   | | | then return 0.27244578914953055;  // std dev = 1.970, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return 0.04597469378380131;  // std dev = 5.358, 167.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=38 */
%   | | else return 0.3611693208035925;  // std dev = 0.471, 24.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return -0.14664391718254574;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return 0.031573904599632274;  // std dev = 0.383, 101.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=18 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.15528564178487414;  // std dev = 0.500, 2,702.000 (wgt'ed) examples reached here.  /* #neg=1,402 #pos=1,300 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.2211966834376664;  // std dev = 3.184, 44.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=28 */
%   | | | else return 0.08312732855807173;  // std dev = 1.918, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.24113614012839482;  // std dev = 2.317, 30.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=23 */
%   | | | else return 0.2530164253677117;  // std dev = 1.997, 25.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then if ( haswordauthor(M, L) )
%   | | | then return 0.32046033434399346;  // std dev = 2.089, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.11734445544678455;  // std dev = 4.202, 80.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=35 */
%   | | else return 0.01552764182737182;  // std dev = 0.369, 110.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=18 */
%   | else return 0.004821403069093042;  // std dev = 0.372, 114.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=19 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordauthor(G, C) )
%   | | | then return 0.6391733073345209;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.3113593255816398;  // std dev = 2.940, 42.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=29 */
%   | | else return -0.13909564746012534;  // std dev = 0.398, 25.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.11908232932089408;  // std dev = 0.500, 2,638.000 (wgt'ed) examples reached here.  /* #neg=1,372 #pos=1,266 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.2995416117590895;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.14372751985851404;  // std dev = 4.604, 102.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=67 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then return 0.12364688024093584;  // std dev = 0.475, 99.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=46 */
%   | | else return 0.013558510417896224;  // std dev = 0.369, 110.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=18 */
%   | else return 0.004166375242493336;  // std dev = 0.372, 114.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=19 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09202255317242401;  // std dev = 0.499, 2,702.000 (wgt'ed) examples reached here.  /* #neg=1,402 #pos=1,300 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.28785057261945746;  // std dev = 0.354, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.07984563351986346;  // std dev = 3.584, 55.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=30 */
%   | | | else return 0.14740019618629205;  // std dev = 3.048, 54.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=42 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( title(M, J), venue(M, B) )
%   | | | then return -0.17145873656068425;  // std dev = 1.078, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | | | else return 0.05798172375040151;  // std dev = 5.471, 170.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=53 */
%   | | else return 0.17700844029522642;  // std dev = 0.493, 22.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=10 */
%   | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | then return 0.01052894975722862;  // std dev = 0.379, 109.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=19 */
%   | | else return -0.14748258940710018;  // std dev = 0.019, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0699477361692722;  // std dev = 0.499, 2,702.000 (wgt'ed) examples reached here.  /* #neg=1,402 #pos=1,300 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.11276620897915185;  // std dev = 2.882, 45.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=31 */
%   | | | else return -0.13588894385003894;  // std dev = 1.584, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.3662862568110702;  // std dev = 0.077, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1022711839906146;  // std dev = 3.397, 57.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=39 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then if ( haswordauthor(N, K) )
%   | | | then return 0.1365002721414582;  // std dev = 2.218, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | | | else return 0.0056782941192780306;  // std dev = 5.149, 160.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=38 */
%   | | else return 0.20685789468638904;  // std dev = 0.471, 24.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | else return -1.6561559497155812E-5;  // std dev = 0.362, 115.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=18 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.052920652273387415;  // std dev = 0.499, 2,702.000 (wgt'ed) examples reached here.  /* #neg=1,402 #pos=1,300 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.08770875383744799;  // std dev = 2.882, 45.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=31 */
%   | | | else return -0.10215615152873192;  // std dev = 1.584, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.2865380275736422;  // std dev = 0.068, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.07832381509622098;  // std dev = 3.397, 57.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=39 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then if ( haswordauthor(N, K) )
%   | | | then return 0.10750506425836841;  // std dev = 2.209, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | | | else return 0.004732205366736857;  // std dev = 5.148, 160.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=38 */
%   | | else return 0.15523231514114097;  // std dev = 0.471, 24.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | else return -1.437700518937039E-5;  // std dev = 0.362, 115.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=18 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordtitle(F, C) )
%   | | | then return 0.2311623822101474;  // std dev = 2.797, 41.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=30 */
%   | | | else return 0.10046803710942234;  // std dev = 1.020, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return -0.16901874477580786;  // std dev = 0.383, 25.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=6 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.039081577685867834;  // std dev = 0.500, 2,638.000 (wgt'ed) examples reached here.  /* #neg=1,372 #pos=1,266 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.03366959361272809;  // std dev = 3.150, 48.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=30 */
%   | | | else return 0.06585993495194382;  // std dev = 3.405, 59.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=41 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then return 0.014370089137379964;  // std dev = 0.414, 184.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=49 */
%   | | else return 0.11659068496319049;  // std dev = 0.471, 24.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | else return -1.2480624866121867E-5;  // std dev = 0.362, 115.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=18 */


Results
   AUC ROC   = 0.558071
   AUC PR    = 0.252578
   CLL	      = -0.598064
   Precision = 0.473684 at threshold = 0.5
   Recall    = 0.030981
   F1        = 0.058158


Total learning time: 1867.9082741737366 seconds
Total inference time: 3.806 seconds
AUC ROC: 0.558071


Results scoring model
   AUC ROC   = 0.576935
   AUC PR    = 0.545297
   CLL	      = -0.668017
   Precision = 0.715084 at threshold = 0.5
   Recall    = 0.087611
   F1        = 0.156098


Total scoring time: 18.224 seconds
Refined model CLL: -0.668017


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.561621
   AUC PR    = 0.25141
   CLL	      = -0.596726
   Precision = 0.473684 at threshold = 0.5
   Recall    = 0.030981
   F1        = 0.058158


Total learning time: 3162.114374143601 seconds
Total inference time: 3.749 seconds
AUC ROC: 0.561621
Total revision time: 3162.114374143601
Best scored revision CLL: -0.667227


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 15:08:15
{'AUC ROC': 0.561621, 'AUC PR': 0.25141, 'CLL': -0.596726, 'Precision': [0.473684, 0.5], 'Recall': 0.030981, 'F1': 0.058158, 'Learning time': 3162.114374143601, 'Inference time': 3.749, 'parameter_0.6': {'AUC ROC': 0.561621, 'AUC PR': 0.25141, 'CLL': -0.596726, 'Precision': [0.473684, 0.5], 'Recall': 0.030981, 'F1': 0.058158, 'Learning time': 1265.374099969864, 'Inference time': 3.749}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3392740276235635;  // std dev = 0.500, 2,702.000 (wgt'ed) examples reached here.  /* #neg=1,402 #pos=1,300 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.4855999154916681;  // std dev = 3.453, 51.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=32 */
%   | | | else return 0.15814893509951225;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.6273797043302815;  // std dev = 3.038, 52.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=40 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then if ( haswordauthor(N, M) )
%   | | | then return 0.5052077586289241;  // std dev = 1.970, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return 0.28497820339219393;  // std dev = 4.479, 82.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=35 */
%   | | else return 0.03246086170501694;  // std dev = 0.379, 109.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=19 */
%   | else return 0.014670674229947162;  // std dev = 0.363, 115.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=18 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.29276877778079746;  // std dev = 0.500, 2,702.000 (wgt'ed) examples reached here.  /* #neg=1,402 #pos=1,300 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.4156994981461517;  // std dev = 3.453, 51.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=32 */
%   | | | else return 0.1377866547829789;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5328490890947377;  // std dev = 3.038, 52.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=40 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then if ( haswordauthor(N, M) )
%   | | | then return 0.43201604470553195;  // std dev = 1.970, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return 0.24663351302630535;  // std dev = 4.479, 82.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=35 */
%   | | else return 0.028463298477504645;  // std dev = 0.379, 109.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=19 */
%   | else return 0.012875422164973756;  // std dev = 0.363, 115.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=18 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24390066310320704;  // std dev = 0.500, 2,702.000 (wgt'ed) examples reached here.  /* #neg=1,402 #pos=1,300 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.3381333799370048;  // std dev = 3.453, 51.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=32 */
%   | | | else return 0.11817988627418433;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.41474605284475324;  // std dev = 2.301, 30.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=23 */
%   | | | else return 0.45072832759042364;  // std dev = 1.992, 25.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then if ( haswordauthor(N, K) )
%   | | | then return 0.2469693009971089;  // std dev = 2.346, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | | | else return 0.05629364848204815;  // std dev = 5.263, 160.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=38 */
%   | | else return 0.447133390470964;  // std dev = 0.471, 24.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | else return 0.011284311697608018;  // std dev = 0.363, 115.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=18 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.19699302295736099;  // std dev = 0.500, 2,702.000 (wgt'ed) examples reached here.  /* #neg=1,402 #pos=1,300 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.46609453344411494;  // std dev = 0.345, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2117384338760634;  // std dev = 3.613, 55.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=30 */
%   | | | else return 0.3259919535223915;  // std dev = 3.042, 54.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=42 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then if ( haswordtitle(J, L), haswordauthor(M, L) )
%   | | | then return 0.10336183320886637;  // std dev = 3.408, 54.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=20 */
%   | | | else return 0.3078248949957216;  // std dev = 3.274, 45.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=26 */
%   | | else return 0.01699244645381772;  // std dev = 0.370, 110.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=18 */
%   | else if ( haswordvenue(B, N), haswordauthor(P, N) )
%   | | then return -0.1744857313313299;  // std dev = 0.039, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.021219634277191424;  // std dev = 0.382, 107.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=19 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.15528564178487414;  // std dev = 0.500, 2,702.000 (wgt'ed) examples reached here.  /* #neg=1,402 #pos=1,300 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.3535212359297268;  // std dev = 0.345, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.164071729187612;  // std dev = 3.609, 55.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=30 */
%   | | | else return 0.2448127969233709;  // std dev = 3.042, 54.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=42 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordvenue(A, K) )
%   | | | then return 0.31082050752731666;  // std dev = 1.956, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return 0.028574123247612562;  // std dev = 5.294, 167.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=38 */
%   | | else return 0.2922768679107098;  // std dev = 0.471, 24.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.01485322734196097;  // std dev = 0.370, 110.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=18 */
%   | | else return -0.14468062107901447;  // std dev = 0.021, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( haswordauthor(E, C) )
%   | | then return 0.6391733073345209;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.11914363374403641;  // std dev = 0.500, 2,696.000 (wgt'ed) examples reached here.  /* #neg=1,402 #pos=1,294 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, H), haswordauthor(I, H) )
%   | | | then return 0.17537846071483368;  // std dev = 2.889, 45.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=31 */
%   | | | else return -0.06498775314865886;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.18093593602377764;  // std dev = 2.810, 36.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=23 */
%   | | | else return 0.1998585760739921;  // std dev = 1.990, 25.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=20 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then if ( haswordtitle(M, N), haswordvenue(B, N) )
%   | | then return 0.12301890384501066;  // std dev = 0.474, 99.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=46 */
%   | | else return 0.012962285176342516;  // std dev = 0.370, 110.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=18 */
%   | else return 0.005062054529299213;  // std dev = 0.372, 114.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=19 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09210598273753386;  // std dev = 0.499, 2,702.000 (wgt'ed) examples reached here.  /* #neg=1,402 #pos=1,300 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.20932588722787804;  // std dev = 0.344, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.08974700013768379;  // std dev = 3.168, 48.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=30 */
%   | | | else return 0.13755366791128432;  // std dev = 3.434, 59.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=41 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then if ( haswordauthor(L, K) )
%   | | | then return 0.24453296745648012;  // std dev = 2.099, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.06022563173582374;  // std dev = 4.151, 80.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=35 */
%   | | else return 0.011295961502217842;  // std dev = 0.370, 110.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=18 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.01045932081100621;  // std dev = 0.379, 109.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=19 */
%   | | else return -0.12825543301810735;  // std dev = 0.019, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordauthor(G, C) )
%   | | | then return 0.46020896774477205;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2158294873054675;  // std dev = 3.091, 43.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=28 */
%   | | else if ( haswordauthor(H, C) )
%   | | | then return 0.25991066758858505;  // std dev = 0.824, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.23691865398646292;  // std dev = 1.818, 23.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
%   | else if ( haswordtitle(I, C) )
%   | | then return 0.0694114636295077;  // std dev = 0.500, 2,632.000 (wgt'ed) examples reached here.  /* #neg=1,368 #pos=1,264 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.06061911616332932;  // std dev = 3.582, 55.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=30 */
%   | | | else return 0.11473015730135248;  // std dev = 3.041, 54.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=42 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.040093174795580735;  // std dev = 0.422, 209.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=64 */
%   | else return 0.0035996373314883226;  // std dev = 0.372, 114.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=19 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordtitle(F, C) )
%   | | | then return 0.27320291579696854;  // std dev = 2.737, 41.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=30 */
%   | | | else return 0.11707137726403723;  // std dev = 1.010, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return -0.2230383421387236;  // std dev = 0.380, 25.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=6 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.052278546472349856;  // std dev = 0.499, 2,638.000 (wgt'ed) examples reached here.  /* #neg=1,372 #pos=1,266 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.045770367922136616;  // std dev = 3.166, 48.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=30 */
%   | | | else return 0.08463299481745554;  // std dev = 3.428, 59.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=41 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then return 0.018021605707086278;  // std dev = 0.417, 184.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=49 */
%   | | else return 0.16612052184079082;  // std dev = 0.471, 24.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | else return -6.54923731104198E-4;  // std dev = 0.363, 115.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=18 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordtitle(F, C) )
%   | | | then return 0.1747328415084877;  // std dev = 2.976, 44.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=30 */
%   | | | else return 0.11605373767759089;  // std dev = 0.838, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.2517692648955163;  // std dev = 0.824, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.19536244619095663;  // std dev = 1.824, 23.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.039439655603749686;  // std dev = 0.499, 2,632.000 (wgt'ed) examples reached here.  /* #neg=1,368 #pos=1,264 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.027430133899171445;  // std dev = 3.579, 55.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=30 */
%   | | | else return 0.07594758209816321;  // std dev = 3.040, 54.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=42 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then return 0.02752673903571435;  // std dev = 0.425, 208.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=65 */
%   | else return -5.68238712747732E-4;  // std dev = 0.363, 115.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=18 */


Results
   AUC ROC   = 0.561722
   AUC PR    = 0.251205
   CLL	      = -0.597233
   Precision = 0.473684 at threshold = 0.5
   Recall    = 0.030981
   F1        = 0.058158


Total learning time: 1385.1595599651337 seconds
Total inference time: 3.832 seconds
AUC ROC: 0.561722


Dataset: 3_imdb_cora, Fold: 3, Type: Scratch (RDN-B), Time: 15:31:25
{'AUC ROC': 0.561722, 'AUC PR': 0.251205, 'CLL': -0.597233, 'Precision': [0.473684, 0.5], 'Recall': 0.030981, 'F1': 0.058158, 'Learning time': 1385.1595599651337, 'Inference time': 3.832}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.343005839795256;  // std dev = 0.500, 3,599.000 (wgt'ed) examples reached here.  /* #neg=1,854 #pos=1,745 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.47353355048412754;  // std dev = 3.922, 65.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=40 */
%   | | | else return 0.1914822684328457;  // std dev = 1.826, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.5558233537041626;  // std dev = 3.012, 43.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=30 */
%   | | | else return 0.6167696247546841;  // std dev = 2.304, 29.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=22 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then if ( haswordauthor(N, M) )
%   | | | then return 0.47719655414713136;  // std dev = 2.225, 21.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=13 */
%   | | | else return 0.2638093124580028;  // std dev = 5.055, 106.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=43 */
%   | | else return 0.02706785401843078;  // std dev = 0.375, 148.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=25 */
%   | else return 0.012469922753832893;  // std dev = 0.361, 162.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=25 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2959294135620548;  // std dev = 0.500, 3,599.000 (wgt'ed) examples reached here.  /* #neg=1,854 #pos=1,745 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.40564015880039006;  // std dev = 3.922, 65.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=40 */
%   | | | else return 0.1665388245648817;  // std dev = 1.826, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.4739646017867602;  // std dev = 3.012, 43.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=30 */
%   | | | else return 0.5241488262845443;  // std dev = 2.304, 29.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=22 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then if ( haswordauthor(N, M) )
%   | | | then return 0.40869536777561244;  // std dev = 2.225, 21.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=13 */
%   | | | else return 0.2285706581462954;  // std dev = 5.055, 106.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=43 */
%   | | else return 0.023740852104336286;  // std dev = 0.375, 148.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=25 */
%   | else return 0.010945177392221317;  // std dev = 0.361, 162.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=25 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24638303571636366;  // std dev = 0.500, 3,599.000 (wgt'ed) examples reached here.  /* #neg=1,854 #pos=1,745 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.3305950535941963;  // std dev = 3.922, 65.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=40 */
%   | | | else return 0.14209424281556463;  // std dev = 1.826, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.38124118004137014;  // std dev = 3.012, 43.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=30 */
%   | | | else return 0.4176747306522034;  // std dev = 2.304, 29.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=22 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then if ( haswordauthor(N, M) )
%   | | | then return 0.3328876855252501;  // std dev = 2.225, 21.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=13 */
%   | | | else return 0.1927750055205601;  // std dev = 5.055, 106.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=43 */
%   | | else return 0.020769690375545657;  // std dev = 0.375, 148.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=25 */
%   | else return 0.009595645424175502;  // std dev = 0.361, 162.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=25 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.19881413417196253;  // std dev = 0.500, 3,599.000 (wgt'ed) examples reached here.  /* #neg=1,854 #pos=1,745 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordauthor(G, E) )
%   | | | then return 0.4767515338017805;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.2128230729898688;  // std dev = 4.211, 74.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=40 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.5870412755912213;  // std dev = 0.031, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.28710420422451477;  // std dev = 3.748, 68.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=48 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordvenue(A, L) )
%   | | | then return 0.2603957893221332;  // std dev = 2.225, 21.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=13 */
%   | | | else return 0.04481326735365826;  // std dev = 6.233, 227.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=52 */
%   | | else return 0.3456238624319811;  // std dev = 0.491, 27.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=16 */
%   | else return 0.008403843409583455;  // std dev = 0.361, 162.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=25 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.15655328574403635;  // std dev = 0.500, 3,599.000 (wgt'ed) examples reached here.  /* #neg=1,854 #pos=1,745 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.34804395692975915;  // std dev = 0.347, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.16321702986182535;  // std dev = 4.076, 72.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=42 */
%   | | | else return 0.2231620918882887;  // std dev = 3.861, 70.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=47 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordauthor(L, I) )
%   | | | then return 0.17058427867046091;  // std dev = 2.416, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return 0.03653953217523358;  // std dev = 6.082, 224.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=51 */
%   | | else return 0.2642297114248802;  // std dev = 0.496, 31.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=16 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return -0.1024628891469849;  // std dev = 0.223, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | | else return 0.018916438975091862;  // std dev = 0.380, 137.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=24 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.456189905189185;  // std dev = 0.336, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | else if ( haswordtitle(E, C) )
%   | | then return 0.11998497238662653;  // std dev = 0.500, 3,587.000 (wgt'ed) examples reached here.  /* #neg=1,852 #pos=1,735 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.12546723507607574;  // std dev = 4.300, 79.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=44 */
%   | | | else return 0.17499229388505774;  // std dev = 3.756, 70.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=50 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | then if ( title(L, I), venue(L, A) )
%   | | | then return -0.13054916599421035;  // std dev = 1.456, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | | else return 0.05718180262474463;  // std dev = 6.368, 225.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=63 */
%   | | else return 0.2679860541855477;  // std dev = 0.491, 27.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=16 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return -0.15236070664366186;  // std dev = 0.018, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return 0.021683478667825426;  // std dev = 0.379, 144.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=25 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09268156784750795;  // std dev = 0.500, 3,599.000 (wgt'ed) examples reached here.  /* #neg=1,854 #pos=1,745 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.15214023093211992;  // std dev = 3.356, 55.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=36 */
%   | | | else return -0.024871896553937272;  // std dev = 2.435, 25.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=12 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.1333738559419542;  // std dev = 3.115, 43.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=27 */
%   | | | else return 0.14426112467886187;  // std dev = 2.293, 29.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=22 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordvenue(B, L) )
%   | | | then return 0.23012529789035713;  // std dev = 2.434, 25.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=13 */
%   | | | else return 0.011109263720159714;  // std dev = 5.916, 225.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=52 */
%   | | else return 0.19934847384967555;  // std dev = 0.496, 31.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=16 */
%   | else return -0.0021269675297217318;  // std dev = 0.366, 156.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=25 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07038394700563436;  // std dev = 0.500, 3,599.000 (wgt'ed) examples reached here.  /* #neg=1,854 #pos=1,745 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.26169753133452417;  // std dev = 0.292, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.17835583093819;  // std dev = 1.041, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.07228875063124522;  // std dev = 5.503, 136.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=84 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordvenue(B, K) )
%   | | | then return 0.18134208634203286;  // std dev = 2.432, 25.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=13 */
%   | | | else return 0.009333122847733594;  // std dev = 5.916, 225.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=52 */
%   | | else return 0.15484870211840945;  // std dev = 0.495, 31.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=16 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.005682442421204236;  // std dev = 0.374, 148.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=25 */
%   | | else return -0.14096717759529256;  // std dev = 0.025, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordvenue(B, D) )
%   | | | then return 0.48501920289754247;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2039108296000981;  // std dev = 3.673, 61.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=40 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.17610996611674293;  // std dev = 1.164, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return -0.2461848061596475;  // std dev = 2.018, 27.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=5 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.052224873134501394;  // std dev = 0.500, 3,505.000 (wgt'ed) examples reached here.  /* #neg=1,810 #pos=1,695 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.03760771599738814;  // std dev = 4.163, 73.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=39 */
%   | | | else return 0.08120504900251263;  // std dev = 3.744, 70.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=50 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then return 0.031825348745080945;  // std dev = 0.418, 281.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=81 */
%   | else return -0.0017440627023267167;  // std dev = 0.366, 156.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=25 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.040091609450336727;  // std dev = 0.499, 3,599.000 (wgt'ed) examples reached here.  /* #neg=1,854 #pos=1,745 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.1643994333159802;  // std dev = 0.294, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.12489659527832178;  // std dev = 1.039, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.04104286779186221;  // std dev = 5.502, 136.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=84 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return 0.019427241671568302;  // std dev = 6.327, 236.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=64 */
%   | | | else return -0.16921219080010266;  // std dev = 1.089, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | else return 0.19426247874808636;  // std dev = 0.491, 27.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=16 */
%   | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | then return 0.0020840477562945755;  // std dev = 0.368, 154.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=25 */
%   | | else return -0.12456367630837126;  // std dev = 0.022, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.560088
   AUC PR    = 0.248685
   CLL	      = -0.601229
   Precision = 0.47619 at threshold = 0.5
   Recall    = 0.034423
   F1        = 0.064205


Total learning time: 2562.097831964493 seconds
Total inference time: 3.827 seconds
AUC ROC: 0.560088


Results scoring model
   AUC ROC   = 0.571425
   AUC PR    = 0.534609
   CLL	      = -0.669394
   Precision = 0.688742 at threshold = 0.5
   Recall    = 0.053388
   F1        = 0.099095


Total scoring time: 26.113 seconds
Parameter learned model CLL: -0.669394


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,true': 'haswordtitle(L, M), haswordvenue(A, M)', 'false,true,true': 'haswordauthor(N, M)'}, {'true,true': [0.5, 1, 1], 'true,false,true,true': [3.922, 25, 40], 'true,false,true,false': [1.826, 10, 5], 'true,false,false,true': [3.012, 13, 30], 'true,false,false,false': [2.304, 7, 22], 'false,true,true,true': [2.225, 8, 13], 'false,true,true,false': [5.055, 63, 43], 'false,true,false': [0.375, 123, 25], 'false,false': [0.361, 137, 25]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,true': 'haswordtitle(L, M), haswordvenue(A, M)', 'false,true,true': 'haswordauthor(N, M)'}, {'true,true': [0.5, 1, 1], 'true,false,true,true': [3.922, 25, 40], 'true,false,true,false': [1.826, 10, 5], 'true,false,false,true': [3.012, 13, 30], 'true,false,false,false': [2.304, 7, 22], 'false,true,true,true': [2.225, 8, 13], 'false,true,true,false': [5.055, 63, 43], 'false,true,false': [0.375, 123, 25], 'false,false': [0.361, 137, 25]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,true': 'haswordtitle(L, M), haswordvenue(A, M)', 'false,true,true': 'haswordauthor(N, M)'}, {'true,true': [0.5, 1, 1], 'true,false,true,true': [3.922, 25, 40], 'true,false,true,false': [1.826, 10, 5], 'true,false,false,true': [3.012, 13, 30], 'true,false,false,false': [2.304, 7, 22], 'false,true,true,true': [2.225, 8, 13], 'false,true,true,false': [5.055, 63, 43], 'false,true,false': [0.375, 123, 25], 'false,false': [0.361, 137, 25]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordauthor(G, E)', 'true,false,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordauthor(M, L)', 'false,true,true': 'haswordvenue(A, L)'}, {'true,true': [0.5, 1, 1], 'true,false,true,true': [0.913, 1, 5], 'true,false,true,false': [4.211, 34, 40], 'true,false,false,true': [0.031, 0, 4], 'true,false,false,false': [3.748, 20, 48], 'false,true,true,true': [2.225, 8, 13], 'false,true,true,false': [6.233, 175, 52], 'false,true,false': [0.491, 11, 16], 'false,false': [0.361, 137, 25]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordauthor(L, K)', 'false,true,true': 'haswordauthor(L, I)', 'false,false': 'haswordvenue(A, M), haswordauthor(N, M)'}, {'true,true': [0.5, 1, 1], 'true,false,true': [0.347, 2, 8], 'true,false,false,true': [4.076, 30, 42], 'true,false,false,false': [3.861, 23, 47], 'false,true,true,true': [2.416, 12, 14], 'false,true,true,false': [6.082, 173, 51], 'false,true,false': [0.496, 15, 16], 'false,false,true': [0.223, 18, 1], 'false,false,false': [0.38, 113, 24]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordauthor(D, C)', 'true,false': 'haswordtitle(E, C)', 'true,false,false': 'haswordvenue(A, F), haswordtitle(G, F)', 'false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false,true': 'haswordtitle(I, J), haswordauthor(K, J)', 'false,true,true': 'title(L, I), venue(L, A)', 'false,false': 'haswordvenue(B, M), haswordauthor(N, M)'}, {'true,true': [0.336, 2, 13], 'true,false,true': [0.5, 1, 1], 'true,false,false,true': [4.3, 35, 44], 'true,false,false,false': [3.756, 20, 50], 'false,true,true,true': [1.456, 21, 2], 'false,true,true,false': [6.368, 162, 63], 'false,true,false': [0.491, 11, 16], 'false,false,true': [0.018, 18, 0], 'false,false,false': [0.379, 119, 25]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, B)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordauthor(M, L)', 'false,true,true': 'haswordvenue(B, L)'}, {'true,true': [0.5, 1, 1], 'true,false,true,true': [3.356, 19, 36], 'true,false,true,false': [2.435, 13, 12], 'true,false,false,true': [3.115, 16, 27], 'true,false,false,false': [2.293, 7, 22], 'false,true,true,true': [2.434, 12, 13], 'false,true,true,false': [5.916, 173, 52], 'false,true,false': [0.496, 15, 16], 'false,false': [0.366, 131, 25]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordauthor(L, K)', 'false,true,true': 'haswordvenue(B, K)', 'false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true': [0.5, 1, 1], 'true,false,true': [0.292, 1, 8], 'true,false,false,true': [1.041, 2, 5], 'true,false,false,false': [5.503, 52, 84], 'false,true,true,true': [2.432, 12, 13], 'false,true,true,false': [5.916, 173, 52], 'false,true,false': [0.495, 15, 16], 'false,false,true': [0.374, 123, 25], 'false,false,false': [0.025, 8, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,true': 'haswordvenue(B, D)', 'true,true,false': 'haswordvenue(B, D)', 'true,false': 'haswordtitle(G, C)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)'}, {'true,true,true,true': [0.0, 0, 6], 'true,true,true,false': [3.673, 21, 40], 'true,true,false,true': [1.164, 2, 7], 'true,true,false,false': [2.018, 22, 5], 'true,false,true': [0.5, 1, 1], 'true,false,false,true': [4.163, 34, 39], 'true,false,false,false': [3.744, 20, 50], 'false,true': [0.418, 200, 81], 'false,false': [0.366, 131, 25]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordauthor(L, K)', 'false,true,true': 'author(M, L), venue(M, A)', 'false,false': 'haswordvenue(A, N), haswordtitle(P, N)'}, {'true,true': [0.499, 1, 1], 'true,false,true': [0.294, 1, 8], 'true,false,false,true': [1.039, 2, 5], 'true,false,false,false': [5.502, 52, 84], 'false,true,true,true': [6.327, 172, 64], 'false,true,true,false': [1.089, 11, 1], 'false,true,false': [0.491, 11, 16], 'false,false,true': [0.368, 129, 25], 'false,false,false': [0.022, 8, 0]}]]
[{'': [0.2499202381008614, 0.18372615450675375], 'true': [0.24977068666456242, 0.23091239612188635], 'true,false': [0.24609375000000028, 0.20061728395061718], 'true,false,true': [0.23668639053254525, 0.22222222222222202], 'true,false,false': [0.21092482422931472, 0.18311533888228385], 'false': [0.20778842975206666, 0.1305060204237169], 'false,true': [0.24651249302498607, 0.14038531775018362], 'false,true,true': [0.23582766439909256, 0.24110003559985851]}, {'': [0.24948777622774695, 0.17907325980475988], 'true': [0.2497706866646084, 0.22705576921051684], 'true,false': [0.24268376707316647, 0.2003295907632234], 'true,false,true': [0.23668639053254362, 0.22222222222222238], 'true,false,false': [0.2109248242293137, 0.1831153388822831], 'false': [0.2022432266105111, 0.13050602042371653], 'false,true': [0.24470602220386242, 0.140385317750184], 'false,true,true': [0.23582766439909295, 0.2411000355998577]}, {'': [0.24905954597979896, 0.17487870091231014], 'true': [0.2497706866646344, 0.2232770090909612], 'true,false': [0.2393875217513263, 0.2000430855906576], 'true,false,true': [0.23668639053254348, 0.22222222222222215], 'true,false,false': [0.21092482422931344, 0.18311533888228324], 'false': [0.19721348234298947, 0.13050602042371504], 'false,true': [0.2429376228937937, 0.14038531775018254], 'false,true,true': [0.23582766439909278, 0.24110003559985826]}, {'': [0.24876771437384915, 0.17161205167109891], 'true': [0.24977068666462549, 0.22064730340732053], 'true,false': [0.23694555186050623, 0.19987378311320414], 'true,false,true': [0.13888888888888884, 0.23967172466945727], 'true,false,false': [0.00024265753117008737, 0.20661888790149166], 'false': [0.1933098332158381, 0.1305060204237162], 'false,true': [0.1802327043510123, 0.24142661179698238], 'false,true,true': [0.23582766439909295, 0.1711541054473334]}, {'': [0.24855299824443475, 0.1684511157231613], 'true': [0.2497706866645896, 0.2176526595004221], 'true,false': [0.12064648716560382, 0.22289784290091838], 'true,false,false': [0.2307789924830571, 0.2129695066782804], 'false': [0.18559811893883915, 0.1344202008431383], 'false,true': [0.17300633367964346, 0.24649632256429893], 'false,true,true': [0.22453552675680286, 0.16515659524349577], 'false,false': [0.04971348068148038, 0.1443734514685976]}, {'': [0.24846027957527353, 0.16631890893774254], 'true': [0.11297127375160725, 0.24855532979200448], 'true,false': [0.2497340200017725, 0.21938620141817122], 'true,false,false': [0.23402131453745204, 0.20156898939077555], 'false': [0.18614052280044066, 0.1304182867728395], 'false,true': [0.17500796850591915, 0.24142661179698205], 'false,true,true': [0.09216786622932131, 0.1802075715541525], 'false,false': [1.811224212104766e-05, 0.14335259987354174]}, {'': [0.2482426144101443, 0.16382130575141618], 'true': [0.2496018720137693, 0.21552726805617153], 'true,false': [0.2216604995291521, 0.20783062982654088], 'true,false,true': [0.20477635620611095, 0.23726397571180904], 'true,false,false': [0.22563156059334155, 0.18136535596071726], 'false': [0.1793366230800197, 0.13403416599882925], 'false,true': [0.16803984996956914, 0.24582379626405637], 'false,true,true': [0.23703659426301113, 0.1555767427257117]}, {'': [0.24816282147896176, 0.16185991337519343], 'true': [0.24960035935347144, 0.2138143043452898], 'true,false': [0.08546812425703591, 0.21988268012927936], 'true,false,false': [0.15482023982496243, 0.2226807718633895], 'false': [0.17666164999329667, 0.13403483593218365], 'false,true': [0.16630791704852066, 0.24551122421076435], 'false,true,true': [0.23660076744706182, 0.15553889198533413], 'false,false': [0.1401729367624661, 7.673701076904918e-05]}, {'': [0.24812183848077338, 0.16051957492240246], 'true': [0.2305980365820618, 0.24855496870255364], 'true,false': [0.24973087152854062, 0.21968957242679948], 'true,true': [0.2077493180857934, 0.18421694049895498], 'true,false,false': [0.2373883257449545, 0.20026199968624134], 'true,true,true': [-7.401486830834377e-17, 0.22110708761151002], 'true,true,false': [0.15044320885750162, 0.1508916323731139], 'false': [0.17494808610575482, 0.1338051333300221]}, {'': [0.24754378319554549, 0.1603237625949063], 'true': [0.2490205430434231, 0.2124367366387542], 'true,false': [0.08628550288582468, 0.21953429183659023], 'true,false,false': [0.15422064893143356, 0.2225518267203896], 'false': [0.17805902626990916, 0.12955162760112118], 'false,true': [0.1678374307331245, 0.24142661179698208], 'false,true,true': [0.16962386900322166, 0.09884115614953509], 'false,false': [0.13548626660050847, 6.226213663766689e-05]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
3;true,false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;false,false;haswordvenue(B, M), haswordauthor(N, M).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
7;false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
8;true,true;haswordtitle(F, D).;true;true
8;true,true,true;haswordvenue(B, D).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
9;false,false;haswordvenue(A, N), haswordtitle(P, N).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.343005839795256;  // std dev = 0.500, 3,599.000 (wgt'ed) examples reached here.  /* #neg=1,854 #pos=1,745 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.47353355048412754;  // std dev = 3.922, 65.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=40 */
%   | | | else return 0.1914822684328457;  // std dev = 1.826, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5640312880406891;  // std dev = 3.757, 68.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=48 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then if ( haswordtitle(L, N), haswordauthor(P, N) )
%   | | | then return 0.2010060779566543;  // std dev = 3.971, 70.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=24 */
%   | | | else return 0.419552443871441;  // std dev = 3.746, 57.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=32 */
%   | | else return 0.02706785401843078;  // std dev = 0.375, 148.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=25 */
%   | else return 0.012469922753832893;  // std dev = 0.361, 162.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=25 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2959294135620548;  // std dev = 0.500, 3,599.000 (wgt'ed) examples reached here.  /* #neg=1,854 #pos=1,745 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.40564015880039006;  // std dev = 3.922, 65.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=40 */
%   | | | else return 0.1665388245648817;  // std dev = 1.826, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.4686716620747793;  // std dev = 2.996, 43.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=30 */
%   | | | else return 0.5315722853454765;  // std dev = 2.299, 29.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=22 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then if ( haswordauthor(N, M) )
%   | | | then return 0.450925343937567;  // std dev = 2.225, 21.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=13 */
%   | | | else return 0.21989237844969708;  // std dev = 5.000, 106.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=43 */
%   | | else return 0.023740852104336286;  // std dev = 0.375, 148.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=25 */
%   | else return 0.010945177392221317;  // std dev = 0.361, 162.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=25 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24638303571636366;  // std dev = 0.500, 3,599.000 (wgt'ed) examples reached here.  /* #neg=1,854 #pos=1,745 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.5804181991492383;  // std dev = 0.309, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2686797131286186;  // std dev = 4.208, 73.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=39 */
%   | | | else return 0.3898034045374831;  // std dev = 3.767, 70.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=50 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then if ( haswordauthor(L, K) )
%   | | | then return 0.3782055770977294;  // std dev = 2.225, 21.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=13 */
%   | | | else return 0.18438868493859908;  // std dev = 4.993, 106.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=43 */
%   | | else if ( title(M, J), venue(M, A) )
%   | | | then return 0.026675946281801546;  // std dev = 4.542, 143.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=25 */
%   | | | else return -0.14814922854337287;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.009595645424175502;  // std dev = 0.361, 162.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=25 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.19881413417196253;  // std dev = 0.500, 3,599.000 (wgt'ed) examples reached here.  /* #neg=1,854 #pos=1,745 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.4467567742758414;  // std dev = 0.309, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.21357213891424853;  // std dev = 4.202, 73.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=39 */
%   | | | else return 0.29937956169793833;  // std dev = 3.766, 70.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=50 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then if ( haswordauthor(L, K) )
%   | | | then return 0.3025388764057451;  // std dev = 2.225, 21.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=13 */
%   | | | else return 0.15106920128644738;  // std dev = 4.987, 106.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=43 */
%   | | else if ( title(M, J), venue(M, A) )
%   | | | then return 0.023277720187623367;  // std dev = 4.542, 143.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=25 */
%   | | | else return -0.13040977093828077;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.008403843409583455;  // std dev = 0.361, 162.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=25 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.15655328574403635;  // std dev = 0.500, 3,599.000 (wgt'ed) examples reached here.  /* #neg=1,854 #pos=1,745 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.216851475759846;  // std dev = 3.358, 55.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=36 */
%   | | | else return 0.06713700069952927;  // std dev = 2.486, 25.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=12 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.22912170377565771;  // std dev = 3.109, 43.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=27 */
%   | | | else return 0.2571372365891296;  // std dev = 2.293, 29.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=22 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordauthor(M, J) )
%   | | | then return 0.19599960013665021;  // std dev = 2.680, 32.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=14 */
%   | | | else return 0.028013797730910877;  // std dev = 5.992, 216.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=51 */
%   | | else return 0.28790987363914156;  // std dev = 0.491, 27.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=16 */
%   | else return 0.00735339204026809;  // std dev = 0.361, 162.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=25 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordauthor(G, C) )
%   | | | then return 0.6362938656121715;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.27125259271995966;  // std dev = 3.674, 61.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=40 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.31615389002103966;  // std dev = 1.160, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return -0.17852094920264333;  // std dev = 2.018, 27.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=5 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.11988873009148177;  // std dev = 0.500, 3,505.000 (wgt'ed) examples reached here.  /* #neg=1,810 #pos=1,695 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.12291135562348293;  // std dev = 4.188, 73.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=39 */
%   | | | else return 0.16948151801125325;  // std dev = 3.755, 70.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=50 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then return 0.05987139649839332;  // std dev = 0.426, 281.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=81 */
%   | else return 0.002809307878420926;  // std dev = 0.366, 156.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=25 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09264113539048849;  // std dev = 0.499, 3,599.000 (wgt'ed) examples reached here.  /* #neg=1,854 #pos=1,745 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.11712089665629175;  // std dev = 3.644, 64.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=41 */
%   | | | else return -0.011386386946020378;  // std dev = 2.028, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.14043964200004785;  // std dev = 3.099, 43.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=27 */
%   | | | else return 0.1514941793058073;  // std dev = 2.293, 29.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=22 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then if ( haswordvenue(A, M) )
%   | | | then return 0.2088739074598403;  // std dev = 2.212, 21.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=13 */
%   | | | else return 0.019585061847181583;  // std dev = 6.149, 227.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=52 */
%   | | else return 0.20970648490115684;  // std dev = 0.491, 27.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=16 */
%   | else return -9.130017587705912E-4;  // std dev = 0.361, 162.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=25 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07035866378475958;  // std dev = 0.499, 3,599.000 (wgt'ed) examples reached here.  /* #neg=1,854 #pos=1,745 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordauthor(G, E) )
%   | | | then return 0.21591361704591921;  // std dev = 1.059, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.05566932154281167;  // std dev = 4.029, 73.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=43 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.290459770389617;  // std dev = 0.096, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.09926330035796166;  // std dev = 3.837, 68.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=45 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordauthor(M, J) )
%   | | | then return 0.14218443463085578;  // std dev = 2.649, 32.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=14 */
%   | | | else return 0.011517976487625158;  // std dev = 5.965, 216.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=51 */
%   | | else return 0.15909854837575316;  // std dev = 0.491, 27.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=16 */
%   | else return -7.933139938753639E-4;  // std dev = 0.361, 162.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=25 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05319350375472453;  // std dev = 0.499, 3,599.000 (wgt'ed) examples reached here.  /* #neg=1,854 #pos=1,745 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.16579393833325534;  // std dev = 0.282, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.045430061353329006;  // std dev = 4.172, 73.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=39 */
%   | | | else return 0.07865275044722911;  // std dev = 3.750, 70.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=50 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordauthor(L, I) )
%   | | | then return 0.13105118562732357;  // std dev = 2.386, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return -7.202193562610029E-4;  // std dev = 5.937, 224.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=51 */
%   | | else return 0.19131780994555073;  // std dev = 0.495, 31.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=16 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return -0.10765066846830139;  // std dev = 0.223, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | | else return 0.012223152655575196;  // std dev = 0.379, 137.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=24 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04010389621937189;  // std dev = 0.499, 3,599.000 (wgt'ed) examples reached here.  /* #neg=1,854 #pos=1,745 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.16185801448939974;  // std dev = 0.335, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.023432561392368687;  // std dev = 4.024, 72.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=42 */
%   | | | else return 0.0664411150965827;  // std dev = 3.844, 70.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=47 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordvenue(B, K) )
%   | | | then return 0.15422611489932245;  // std dev = 2.431, 25.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=13 */
%   | | | else return -0.0060395862911698205;  // std dev = 5.889, 225.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=52 */
%   | | else return 0.14824853735842713;  // std dev = 0.494, 31.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=16 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return -0.09368873521661318;  // std dev = 0.223, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | | else return 0.010550113372845131;  // std dev = 0.379, 137.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=24 */


Results
   AUC ROC   = 0.560064
   AUC PR    = 0.248537
   CLL	      = -0.602141
   Precision = 0.47619 at threshold = 0.5
   Recall    = 0.034423
   F1        = 0.064205


Total learning time: 2020.3458931446075 seconds
Total inference time: 3.743 seconds
AUC ROC: 0.560064


Results scoring model
   AUC ROC   = 0.57348
   AUC PR    = 0.536402
   CLL	      = -0.669706
   Precision = 0.713235 at threshold = 0.5
   Recall    = 0.049795
   F1        = 0.09309


Total scoring time: 15.481 seconds
Refined model CLL: -0.669706


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.560088
   AUC PR    = 0.248685
   CLL	      = -0.601229
   Precision = 0.47619 at threshold = 0.5
   Recall    = 0.034423
   F1        = 0.064205


Total learning time: 4624.0377251090995 seconds
Total inference time: 3.827 seconds
AUC ROC: 0.560088
Total revision time: 4624.0377251090995
Best scored revision CLL: -0.669394


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 16:48:43
{'AUC ROC': 0.560088, 'AUC PR': 0.248685, 'CLL': -0.601229, 'Precision': [0.47619, 0.5], 'Recall': 0.034423, 'F1': 0.064205, 'Learning time': 4624.0377251090995, 'Inference time': 3.827, 'parameter_0.8': {'AUC ROC': 0.560088, 'AUC PR': 0.248685, 'CLL': -0.601229, 'Precision': [0.47619, 0.5], 'Recall': 0.034423, 'F1': 0.064205, 'Learning time': 2562.097831964493, 'Inference time': 3.827}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.343005839795256;  // std dev = 0.500, 3,599.000 (wgt'ed) examples reached here.  /* #neg=1,854 #pos=1,745 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.47353355048412754;  // std dev = 3.922, 65.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=40 */
%   | | | else return 0.1914822684328457;  // std dev = 1.826, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.5558233537041626;  // std dev = 3.012, 43.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=30 */
%   | | | else return 0.6167696247546841;  // std dev = 2.304, 29.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=22 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then if ( haswordtitle(L, N), haswordauthor(P, N) )
%   | | | then return 0.2010060779566543;  // std dev = 3.971, 70.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=24 */
%   | | | else return 0.419552443871441;  // std dev = 3.746, 57.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=32 */
%   | | else return 0.02706785401843078;  // std dev = 0.375, 148.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=25 */
%   | else return 0.012469922753832893;  // std dev = 0.361, 162.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=25 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2959294135620548;  // std dev = 0.500, 3,599.000 (wgt'ed) examples reached here.  /* #neg=1,854 #pos=1,745 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.40564015880039006;  // std dev = 3.922, 65.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=40 */
%   | | | else return 0.1665388245648817;  // std dev = 1.826, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.4739646017867602;  // std dev = 3.012, 43.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=30 */
%   | | | else return 0.5241488262845443;  // std dev = 2.304, 29.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=22 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then if ( haswordauthor(N, M) )
%   | | | then return 0.450925343937567;  // std dev = 2.225, 21.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=13 */
%   | | | else return 0.21989237844969708;  // std dev = 5.000, 106.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=43 */
%   | | else return 0.023740852104336286;  // std dev = 0.375, 148.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=25 */
%   | else return 0.010945177392221317;  // std dev = 0.361, 162.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=25 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24638303571636366;  // std dev = 0.500, 3,599.000 (wgt'ed) examples reached here.  /* #neg=1,854 #pos=1,745 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.5943437633223122;  // std dev = 0.311, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2686797131286186;  // std dev = 4.208, 73.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=39 */
%   | | | else return 0.38804738754655843;  // std dev = 3.774, 70.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=50 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then if ( haswordauthor(L, K) )
%   | | | then return 0.3782055770977294;  // std dev = 2.225, 21.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=13 */
%   | | | else return 0.18438868493859908;  // std dev = 4.993, 106.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=43 */
%   | | else if ( title(M, J), venue(M, A) )
%   | | | then return 0.026675946281801546;  // std dev = 4.542, 143.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=25 */
%   | | | else return -0.14814922854337287;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.009595645424175502;  // std dev = 0.361, 162.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=25 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.19881413417196253;  // std dev = 0.500, 3,599.000 (wgt'ed) examples reached here.  /* #neg=1,854 #pos=1,745 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.4223443285862369;  // std dev = 0.360, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2207008037806237;  // std dev = 4.085, 72.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=42 */
%   | | | else return 0.2921932004632463;  // std dev = 3.868, 70.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=47 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then if ( haswordtitle(J, L), haswordauthor(M, L) )
%   | | | then return 0.08521254685550939;  // std dev = 3.860, 70.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=24 */
%   | | | else return 0.28775041159646453;  // std dev = 3.746, 57.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=32 */
%   | | else if ( title(N, J), venue(N, A) )
%   | | | then return 0.023277720187623367;  // std dev = 4.542, 143.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=25 */
%   | | | else return -0.13040977093828077;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.008403843409583455;  // std dev = 0.361, 162.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=25 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordvenue(B, D) )
%   | | | then return 0.6716963810482829;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.3125594612441497;  // std dev = 3.682, 61.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=40 */
%   | | else if ( haswordauthor(G, C) )
%   | | | then return 0.3729401447139062;  // std dev = 1.165, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return -0.14311843376653186;  // std dev = 2.018, 27.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=5 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.15529124552759846;  // std dev = 0.500, 3,505.000 (wgt'ed) examples reached here.  /* #neg=1,810 #pos=1,695 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.1515334322834626;  // std dev = 4.188, 73.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=39 */
%   | | | else return 0.23489921274496547;  // std dev = 3.765, 70.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=50 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then return 0.07296619748660405;  // std dev = 0.433, 275.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=81 */
%   | else return 0.00735339204026809;  // std dev = 0.361, 162.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=25 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.12107441184816335;  // std dev = 0.499, 3,599.000 (wgt'ed) examples reached here.  /* #neg=1,854 #pos=1,745 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.26469629996458244;  // std dev = 0.349, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.11910322569351339;  // std dev = 4.068, 72.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=42 */
%   | | | else return 0.1754079920876475;  // std dev = 3.856, 70.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=47 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then if ( haswordauthor(L, I) )
%   | | | then return 0.2673725270447896;  // std dev = 2.225, 21.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=13 */
%   | | | else return 0.09598382156681003;  // std dev = 4.918, 106.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=43 */
%   | | else if ( title(M, J), venue(M, B) )
%   | | | then return 0.01877479486328317;  // std dev = 4.564, 150.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=25 */
%   | | | else return -0.14789187180338328;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.0019498235244264832;  // std dev = 0.366, 156.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=25 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordtitle(F, C) )
%   | | | then return 0.23344030887731898;  // std dev = 3.624, 61.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=41 */
%   | | | else return 0.24232432805129137;  // std dev = 0.902, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( haswordauthor(G, C) )
%   | | | then return 0.24645031766890194;  // std dev = 1.160, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return -0.1382758031475961;  // std dev = 2.018, 27.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=5 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.09173520618675182;  // std dev = 0.500, 3,505.000 (wgt'ed) examples reached here.  /* #neg=1,810 #pos=1,695 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.07657519104452808;  // std dev = 4.179, 73.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=39 */
%   | | | else return 0.14061078931281154;  // std dev = 3.760, 70.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=50 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then return 0.05056854226670243;  // std dev = 0.425, 281.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=81 */
%   | else return -0.0016851454859021593;  // std dev = 0.366, 156.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=25 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07027812636239039;  // std dev = 0.499, 3,599.000 (wgt'ed) examples reached here.  /* #neg=1,854 #pos=1,745 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.12004695508380496;  // std dev = 3.345, 55.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=36 */
%   | | | else return -0.04050698496499449;  // std dev = 2.466, 25.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=12 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.2906104073465884;  // std dev = 0.091, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.09990764153860401;  // std dev = 3.836, 68.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=45 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordauthor(M, J) )
%   | | | then return 0.1694976388418576;  // std dev = 2.666, 32.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=14 */
%   | | | else return 0.003465667756923982;  // std dev = 5.941, 216.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=51 */
%   | | else return 0.20771537353985567;  // std dev = 0.491, 27.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=16 */
%   | else return -0.0015461493113475113;  // std dev = 0.361, 162.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=25 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordauthor(G, C) )
%   | | | then return 0.405976971065472;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.13314884216247388;  // std dev = 3.670, 61.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=40 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.16413406423950125;  // std dev = 1.159, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return -0.12357770348477784;  // std dev = 2.018, 27.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=5 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.05252527478696389;  // std dev = 0.500, 3,505.000 (wgt'ed) examples reached here.  /* #neg=1,810 #pos=1,695 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.041968153448663136;  // std dev = 4.172, 73.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=39 */
%   | | | else return 0.08253678949749096;  // std dev = 3.751, 70.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=50 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then return 0.0336604113053831;  // std dev = 0.422, 281.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=81 */
%   | else return -0.0028811500643856672;  // std dev = 0.366, 156.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=25 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04001784364982126;  // std dev = 0.499, 3,599.000 (wgt'ed) examples reached here.  /* #neg=1,854 #pos=1,745 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.14973979749076824;  // std dev = 0.341, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.025394777029865034;  // std dev = 4.030, 72.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=42 */
%   | | | else return 0.06754036867598975;  // std dev = 3.844, 70.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=47 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordauthor(L, I) )
%   | | | then return 0.1301820853472101;  // std dev = 2.654, 32.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=14 */
%   | | | else return 4.5720718420382396E-4;  // std dev = 5.940, 216.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=51 */
%   | | else return 0.14922891654735182;  // std dev = 0.491, 27.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=16 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return -0.15955491833569493;  // std dev = 0.019, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return 0.013656921837592047;  // std dev = 0.378, 144.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=25 */


Results
   AUC ROC   = 0.560053
   AUC PR    = 0.248679
   CLL	      = -0.600707
   Precision = 0.47619 at threshold = 0.5
   Recall    = 0.034423
   F1        = 0.064205


Total learning time: 1688.6389269828796 seconds
Total inference time: 3.842 seconds
AUC ROC: 0.560053


Dataset: 3_imdb_cora, Fold: 3, Type: Scratch (RDN-B), Time: 17:16:57
{'AUC ROC': 0.560053, 'AUC PR': 0.248679, 'CLL': -0.600707, 'Precision': [0.47619, 0.5], 'Recall': 0.034423, 'F1': 0.064205, 'Learning time': 1688.6389269828796, 'Inference time': 3.842}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3441551545575258;  // std dev = 0.500, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.493284070234648;  // std dev = 4.141, 74.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=47 */
%   | | | else return 0.26991364098186527;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.5248156017661779;  // std dev = 3.367, 51.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=34 */
%   | | | else return 0.5803711573217337;  // std dev = 2.687, 36.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=26 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then if ( haswordauthor(N, K) )
%   | | | then return 0.35814893509951234;  // std dev = 2.646, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return 0.24524570929306141;  // std dev = 5.424, 124.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=48 */
%   | | else return 0.0427643197148959;  // std dev = 0.388, 195.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=36 */
%   | else return 0.03039773892726256;  // std dev = 0.378, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.29690255138011334;  // std dev = 0.500, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.42607371502600505;  // std dev = 4.114, 74.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=47 */
%   | | | else return 0.1984140253494258;  // std dev = 2.030, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.7832218764169515;  // std dev = 0.013, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.45577376194448965;  // std dev = 4.258, 83.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=56 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then if ( haswordtitle(L, N), haswordauthor(P, N) )
%   | | | then return 0.12950374728102365;  // std dev = 4.216, 84.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=26 */
%   | | | else return 0.35501110344888615;  // std dev = 4.116, 68.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=36 */
%   | | else return 0.03902358598744723;  // std dev = 0.388, 195.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=36 */
%   | else return 0.02521541327201523;  // std dev = 0.378, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.247146690498353;  // std dev = 0.500, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.35795977129459083;  // std dev = 3.818, 65.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=42 */
%   | | | else return 0.19225720246893238;  // std dev = 2.495, 26.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=12 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.6771360536593782;  // std dev = 0.081, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.3679569019622188;  // std dev = 4.256, 83.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=56 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then if ( haswordauthor(M, L) )
%   | | | then return 0.3048563212490514;  // std dev = 2.639, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return 0.16876558608137693;  // std dev = 5.353, 124.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=48 */
%   | | else return 0.03428603678840569;  // std dev = 0.388, 195.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=36 */
%   | else return 0.021852921493614806;  // std dev = 0.378, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.19937367766283512;  // std dev = 0.500, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.2879479978197181;  // std dev = 3.801, 65.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=42 */
%   | | | else return 0.11997877331057022;  // std dev = 2.481, 26.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=12 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.5363791499160184;  // std dev = 0.116, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.28772449776299747;  // std dev = 4.238, 83.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=56 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then if ( haswordtitle(K, M), haswordauthor(N, M) )
%   | | | then return 0.07309560278423642;  // std dev = 4.182, 84.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=26 */
%   | | | else return 0.26651714501705;  // std dev = 4.116, 68.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=36 */
%   | | else return 0.031286320185600965;  // std dev = 0.388, 195.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=36 */
%   | else return 0.01770283397947551;  // std dev = 0.377, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.15694231532784036;  // std dev = 0.500, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.33058725093162783;  // std dev = 0.354, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.170213456500228;  // std dev = 4.411, 83.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=48 */
%   | | | else return 0.22320239239598053;  // std dev = 4.248, 85.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=58 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then if ( haswordauthor(L, I) )
%   | | | then return 0.24278055386917327;  // std dev = 2.636, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return 0.10170325966281249;  // std dev = 5.280, 124.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=48 */
%   | | else if ( title(M, J), venue(M, B) )
%   | | | then return 0.03338487892633493;  // std dev = 5.398, 189.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=36 */
%   | | | else return -0.15709131154985514;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.01505508932954752;  // std dev = 0.377, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordauthor(G, C) )
%   | | | then return 0.6354059656279372;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.260031154299565;  // std dev = 3.962, 69.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=44 */
%   | | else if ( haswordauthor(H, C) )
%   | | | then return 0.341781613508215;  // std dev = 1.200, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return -0.2130788828569113;  // std dev = 2.060, 33.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=5 */
%   | else if ( haswordtitle(I, C) )
%   | | then return 0.1204890902009401;  // std dev = 0.500, 4,391.000 (wgt'ed) examples reached here.  /* #neg=2,261 #pos=2,130 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.12943008503162015;  // std dev = 4.423, 85.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=50 */
%   | | | else return 0.16809161866993522;  // std dev = 4.233, 83.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=56 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.05860567229244536;  // std dev = 0.432, 347.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=98 */
%   | else return 0.01176566656636385;  // std dev = 0.377, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09282682271385911;  // std dev = 0.499, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.13303407089834818;  // std dev = 3.780, 65.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=42 */
%   | | | else return 0.010574936102821893;  // std dev = 2.472, 26.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=12 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.3099057324563541;  // std dev = 0.146, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.12630536820430477;  // std dev = 4.233, 83.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=56 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordauthor(M, J) )
%   | | | then return 0.13446199486421362;  // std dev = 2.842, 36.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=15 */
%   | | | else return 0.025968083848084574;  // std dev = 6.867, 276.000 (wgt'ed) examples reached here.  /* #neg=211 #pos=65 */
%   | | else return 0.16702273859623254;  // std dev = 0.495, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | else return 0.005470871050694131;  // std dev = 0.377, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07048276555166079;  // std dev = 0.499, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.11495298814115126;  // std dev = 3.784, 65.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=42 */
%   | | | else return -0.03207105382908173;  // std dev = 2.425, 26.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=12 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.09580933638162131;  // std dev = 3.290, 51.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=34 */
%   | | | else return 0.11426699749240285;  // std dev = 2.673, 36.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=26 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, A) )
%   | | | then return 0.04044967772185844;  // std dev = 7.024, 274.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=73 */
%   | | | else return -0.032056359634996284;  // std dev = 2.430, 38.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=7 */
%   | | else return 0.12850151159730203;  // std dev = 0.494, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | else return 0.004709270566420394;  // std dev = 0.377, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05327671155600128;  // std dev = 0.499, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.0869784099609966;  // std dev = 3.785, 65.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=42 */
%   | | | else return -0.02425431425866379;  // std dev = 2.424, 26.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=12 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.2579092988976851;  // std dev = 0.175, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.07019482955895354;  // std dev = 4.221, 83.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=56 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordvenue(A, L) )
%   | | | then return 0.1420567713566388;  // std dev = 2.634, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return 0.009753683106676368;  // std dev = 6.894, 284.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=66 */
%   | | else return 0.15223529200227512;  // std dev = 0.495, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | else return 0.0017870499118098904;  // std dev = 0.377, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04016007727875673;  // std dev = 0.499, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.06604664707060952;  // std dev = 3.785, 65.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=42 */
%   | | | else return -0.018347986972026754;  // std dev = 2.424, 26.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=12 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.053804208376272415;  // std dev = 3.285, 51.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=34 */
%   | | | else return 0.07103014277910678;  // std dev = 2.673, 36.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=26 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, B) )
%   | | | then return 0.02605155697866086;  // std dev = 6.976, 274.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=73 */
%   | | | else return -0.046865207682849824;  // std dev = 2.422, 38.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=7 */
%   | | else return 0.11657433099692346;  // std dev = 0.495, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | else return 0.001534268368869893;  // std dev = 0.377, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */


Results
   AUC ROC   = 0.560009
   AUC PR    = 0.248409
   CLL	      = -0.603451
   Precision = 0.47619 at threshold = 0.5
   Recall    = 0.034423
   F1        = 0.064205


Total learning time: 2898.2119948863983 seconds
Total inference time: 3.895 seconds
AUC ROC: 0.560009


Results scoring model
   AUC ROC   = 0.568247
   AUC PR    = 0.52841
   CLL	      = -0.671798
   Precision = 0.7125 at threshold = 0.5
   Recall    = 0.046798
   F1        = 0.087827


Total scoring time: 24.125 seconds
Parameter learned model CLL: -0.671798


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,true': 'haswordtitle(L, M), haswordvenue(B, M)', 'false,true,true': 'haswordauthor(N, K)'}, {'true,true': [0.5, 2, 2], 'true,false,true,true': [4.141, 27, 47], 'true,false,true,false': [2.029, 10, 7], 'true,false,false,true': [3.367, 17, 34], 'true,false,false,false': [2.687, 10, 26], 'false,true,true,true': [2.646, 14, 14], 'false,true,true,false': [5.424, 76, 48], 'false,true,false': [0.388, 159, 36], 'false,false': [0.378, 173, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,true': 'haswordtitle(L, M), haswordvenue(A, M)', 'false,true,true': 'haswordtitle(L, N), haswordauthor(P, N)'}, {'true,true': [0.5, 2, 2], 'true,false,true,true': [4.114, 27, 47], 'true,false,true,false': [2.03, 10, 7], 'true,false,false,true': [0.013, 0, 4], 'true,false,false,false': [4.258, 27, 56], 'false,true,true,true': [4.216, 58, 26], 'false,true,true,false': [4.116, 32, 36], 'false,true,false': [0.388, 159, 36], 'false,false': [0.378, 173, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, A)', 'true,false,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)', 'false,true,true': 'haswordauthor(M, L)'}, {'true,true': [0.5, 2, 2], 'true,false,true,true': [3.818, 23, 42], 'true,false,true,false': [2.495, 14, 12], 'true,false,false,true': [0.081, 0, 4], 'true,false,false,false': [4.256, 27, 56], 'false,true,true,true': [2.639, 14, 14], 'false,true,true,false': [5.353, 76, 48], 'false,true,false': [0.388, 159, 36], 'false,false': [0.378, 173, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, B)', 'true,false,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)', 'false,true,true': 'haswordtitle(K, M), haswordauthor(N, M)'}, {'true,true': [0.5, 2, 2], 'true,false,true,true': [3.801, 23, 42], 'true,false,true,false': [2.481, 14, 12], 'true,false,false,true': [0.116, 0, 4], 'true,false,false,false': [4.238, 27, 56], 'false,true,true,true': [4.182, 58, 26], 'false,true,true,false': [4.116, 32, 36], 'false,true,false': [0.388, 159, 36], 'false,false': [0.377, 173, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,true,true': 'haswordauthor(L, I)', 'false,true,false': 'title(M, J), venue(M, B)'}, {'true,true': [0.5, 2, 2], 'true,false,true': [0.354, 2, 8], 'true,false,false,true': [4.411, 35, 48], 'true,false,false,false': [4.248, 27, 58], 'false,true,true,true': [2.636, 14, 14], 'false,true,true,false': [5.28, 76, 48], 'false,true,false,true': [5.398, 153, 36], 'false,true,false,false': [0.0, 6, 0], 'false,false': [0.377, 173, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,true': 'haswordauthor(G, C)', 'true,true,false': 'haswordauthor(H, C)', 'true,false': 'haswordtitle(I, C)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true,true': [0.0, 0, 9], 'true,true,true,false': [3.962, 25, 44], 'true,true,false,true': [1.2, 2, 8], 'true,true,false,false': [2.06, 28, 5], 'true,false,true': [0.5, 2, 2], 'true,false,false,true': [4.423, 35, 50], 'true,false,false,false': [4.233, 27, 56], 'false,true': [0.432, 249, 98], 'false,false': [0.377, 173, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, A)', 'true,false,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordauthor(M, L)', 'false,true,true': 'haswordauthor(M, J)'}, {'true,true': [0.499, 2, 2], 'true,false,true,true': [3.78, 23, 42], 'true,false,true,false': [2.472, 14, 12], 'true,false,false,true': [0.146, 0, 4], 'true,false,false,false': [4.233, 27, 56], 'false,true,true,true': [2.842, 21, 15], 'false,true,true,false': [6.867, 211, 65], 'false,true,false': [0.495, 17, 18], 'false,false': [0.377, 173, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, B)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordauthor(M, L)', 'false,true,true': 'author(N, M), venue(N, A)'}, {'true,true': [0.499, 2, 2], 'true,false,true,true': [3.784, 23, 42], 'true,false,true,false': [2.425, 14, 12], 'true,false,false,true': [3.29, 17, 34], 'true,false,false,false': [2.673, 10, 26], 'false,true,true,true': [7.024, 201, 73], 'false,true,true,false': [2.43, 31, 7], 'false,true,false': [0.494, 17, 18], 'false,false': [0.377, 173, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, B)', 'true,false,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordauthor(M, L)', 'false,true,true': 'haswordvenue(A, L)'}, {'true,true': [0.499, 2, 2], 'true,false,true,true': [3.785, 23, 42], 'true,false,true,false': [2.424, 14, 12], 'true,false,false,true': [0.175, 0, 4], 'true,false,false,false': [4.221, 27, 56], 'false,true,true,true': [2.634, 14, 14], 'false,true,true,false': [6.894, 218, 66], 'false,true,false': [0.495, 17, 18], 'false,false': [0.377, 173, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, B)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordauthor(M, L)', 'false,true,true': 'author(N, M), venue(N, B)'}, {'true,true': [0.499, 2, 2], 'true,false,true,true': [3.785, 23, 42], 'true,false,true,false': [2.424, 14, 12], 'true,false,false,true': [3.285, 17, 34], 'true,false,false,false': [2.673, 10, 26], 'false,true,true,true': [6.976, 201, 73], 'false,true,true,false': [2.422, 31, 7], 'false,true,false': [0.495, 17, 18], 'false,false': [0.377, 173, 36]}]]
[{'': [0.2499340711519663, 0.1829227265669498], 'true': [0.24980417410609057, 0.23027395530867678], 'true,false': [0.24127520830817514, 0.2140309155766939], 'true,false,true': [0.2317384952520089, 0.24221453287197234], 'true,false,false': [0.22222222222222393, 0.20061728395061854], 'false': [0.202659269655924, 0.1425791534076612], 'false,true': [0.24151662049861491, 0.15053254437869934], 'false,true,true': [0.24999999999999956, 0.2372528616024979]}, {'': [0.24959940219109739, 0.18012042678213355], 'true': [0.249804174106148, 0.22833690031063653], 'true,false': [0.23913722137040966, 0.21314507724875675], 'true,false,true': [0.22868821855956353, 0.24247451004155807], 'true,false,false': [4.199010928462865e-05, 0.2184853461114594], 'false': [0.19916992152892743, 0.14254364748477327], 'false,true': [0.24098727094154773, 0.15053254437869718], 'false,true,true': [0.21164125201149422, 0.24913494809688638]}, {'': [0.2492099550716472, 0.1766909661871545], 'true': [0.24980417410615238, 0.22485837377906856], 'true,false': [0.23418992236483827, 0.21248013748089273], 'true,false,true': [0.22426009688323237, 0.23940209941497897], 'true,false,false': [0.001620920487619526, 0.21824700456708454], 'false': [0.19471356786946234, 0.14253880121674675], 'false,true': [0.23708800972592342, 0.15053254437869956], 'false,true,true': [0.24871820652972465, 0.23105013053332482]}, {'': [0.24891762507421136, 0.17448376586855024], 'true': [0.2498041741061843, 0.2218459654697857], 'true,false': [0.23215416487891516, 0.20927212154009256], 'true,false,true': [0.22228994428106613, 0.23666210181482053], 'true,false,false': [0.003366507611704317, 0.21635256475885506], 'false': [0.1919129246227124, 0.14250557810598655], 'false,true': [0.2357434757016136, 0.15053254437869784], 'false,true,true': [0.20816586045318625, 0.2491349480968854]}, {'': [0.24872844121163512, 0.17209645916225974], 'true': [0.24980417410610006, 0.21934268529679546], 'true,false': [0.12566136907724473, 0.22391674514761578], 'true,false,false': [0.23438617548544088, 0.21230645394137102], 'false': [0.1887309943503291, 0.1424969001681292], 'false,true': [0.232097190812426, 0.15053254437869942], 'false,true,true': [0.24813856647551885, 0.22480863889010952], 'false,true,false': [0.15419501133786967, 0.0]}, {'': [0.24865272796713037, 0.17070487947713875], 'true': [0.23985688203325659, 0.24883576883197653], 'true,false': [0.24977748682751677, 0.22346481858727227], 'true,true': [0.2156105306626523, 0.18710104640159098], 'true,false,false': [0.23012287387365155, 0.21589007403388405], 'true,true,true': [-4.9343245538895844e-17, 0.22747523001395675], 'true,true,false': [0.14401961891054885, 0.12855831037649226], 'false': [0.18703370417687398, 0.14222507444856056]}, {'': [0.24793062525256848, 0.17036976027491027], 'true': [0.24909348317714644, 0.21800361213938055], 'true,false': [0.22721960153217807, 0.20767528231549434], 'true,false,true': [0.21980023103513513, 0.23505642799273693], 'true,false,false': [0.005308260315484148, 0.21587806649079502], 'false': [0.18644994216894045, 0.14235256543667676], 'false,true': [0.17824147350409048, 0.24476747862617973], 'false,true,true': [0.22428132926695085, 0.17087809084237507]}, {'': [0.2478726860219158, 0.16942863851959475], 'true': [0.24908317399898317, 0.21696658338546143], 'true,false': [0.2263997671902878, 0.20662408559380147], 'true,false,true': [0.22033654127830124, 0.2261177827436357], 'true,false,false': [0.21225795101350114, 0.19844306420396665], 'false': [0.1852314091457832, 0.14235175146320295], 'false,true': [0.17763991983188795, 0.24446459745654248], 'false,true,true': [0.1800785411811619, 0.15543934188609124]}, {'': [0.2478229576741186, 0.16887341455877708], 'true': [0.2490769752012627, 0.2159316551348492], 'true,false': [0.22451368817444148, 0.2066696379175009], 'true,false,true': [0.22036162661212355, 0.22605618569643016], 'true,false,false': [0.007626953363668684, 0.21464197727784232], 'false': [0.1844901277963282, 0.14226497594610577], 'false,true': [0.17598061760570302, 0.24500841631606915], 'false,true,true': [0.2477981444556337, 0.1673291349551396]}, {'': [0.24778582766111362, 0.1680047905111287], 'true': [0.24907325392170498, 0.2151064086810184], 'true,false': [0.2234554813680015, 0.20618894768519863], 'true,false,true': [0.22039681626719068, 0.22601467679489246], 'true,false,false': [0.21153052078488244, 0.19844777230411112], 'false': [0.18326066632778537, 0.14226464015354406], 'false,true': [0.1753646975251247, 0.24476315173215865], 'false,true,true': [0.1776265048314525, 0.15438658747344902]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
1;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
2;true,false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
4;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
4;false,true,false;title(M, J), venue(M, B).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
5;true,true;haswordtitle(F, D).;true;true
5;true,true,true;haswordauthor(G, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3441551545575258;  // std dev = 0.500, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.493284070234648;  // std dev = 4.141, 74.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=47 */
%   | | | else return 0.26991364098186527;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.5248156017661779;  // std dev = 3.367, 51.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=34 */
%   | | | else return 0.5803711573217337;  // std dev = 2.687, 36.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=26 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then if ( haswordtitle(L, N), haswordauthor(P, N) )
%   | | | then return 0.16767274462332082;  // std dev = 4.237, 84.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=26 */
%   | | | else return 0.3875606998053934;  // std dev = 4.116, 68.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=36 */
%   | | else return 0.0427643197148959;  // std dev = 0.388, 195.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=36 */
%   | else return 0.03039773892726256;  // std dev = 0.378, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.29690255138011334;  // std dev = 0.500, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.42607371502600505;  // std dev = 4.114, 74.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=47 */
%   | | | else return 0.1984140253494258;  // std dev = 2.030, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.4543171296026042;  // std dev = 3.360, 51.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=34 */
%   | | | else return 0.4942204482591005;  // std dev = 2.687, 36.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=26 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then if ( haswordauthor(N, K) )
%   | | | then return 0.33648820005907426;  // std dev = 2.646, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return 0.20585134209722453;  // std dev = 5.369, 124.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=48 */
%   | | else return 0.03902358598744723;  // std dev = 0.388, 195.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=36 */
%   | else return 0.02521541327201523;  // std dev = 0.378, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.247146690498353;  // std dev = 0.500, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.3586229945458668;  // std dev = 3.824, 65.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=42 */
%   | | | else return 0.1982782791047669;  // std dev = 2.522, 26.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=12 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.6942517946776944;  // std dev = 0.024, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.36480575634488716;  // std dev = 4.254, 83.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=56 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then if ( haswordauthor(M, J) )
%   | | | then return 0.3048360741316101;  // std dev = 2.638, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return 0.16889731520269344;  // std dev = 5.353, 124.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=48 */
%   | | else return 0.03428603678840569;  // std dev = 0.388, 195.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=36 */
%   | else return 0.021852921493614806;  // std dev = 0.378, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.19937367766283512;  // std dev = 0.500, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.3969857716995343;  // std dev = 0.366, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.22922679689614547;  // std dev = 4.444, 83.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=48 */
%   | | | else return 0.29255037136792555;  // std dev = 4.269, 85.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=58 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | then if ( haswordtitle(J, L), haswordauthor(M, L) )
%   | | | then return 0.07220927855610067;  // std dev = 4.178, 84.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=26 */
%   | | | else return 0.26781593305730905;  // std dev = 4.116, 68.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=36 */
%   | | else if ( title(N, J), venue(N, A) )
%   | | | then return 0.037147126046406846;  // std dev = 5.398, 189.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=36 */
%   | | | else return -0.15332906442978422;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.01770283397947551;  // std dev = 0.377, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.15694231532784036;  // std dev = 0.500, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.20573688483810446;  // std dev = 4.085, 74.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=47 */
%   | | | else return 0.07215879800013723;  // std dev = 2.042, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.22468438089260448;  // std dev = 3.326, 51.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=34 */
%   | | | else return 0.23624380170638876;  // std dev = 2.678, 36.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=26 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then if ( haswordauthor(N, M) )
%   | | | then return 0.23976217032047967;  // std dev = 2.636, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return 0.10251804130857005;  // std dev = 5.281, 124.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=48 */
%   | | else return 0.02752407306552907;  // std dev = 0.388, 195.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=36 */
%   | else return 0.015010099130822302;  // std dev = 0.377, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1214121850859716;  // std dev = 0.500, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.31498278264284557;  // std dev = 0.370, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.12061652173237852;  // std dev = 4.403, 83.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=48 */
%   | | | else return 0.16780847479727076;  // std dev = 4.261, 85.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=58 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordvenue(A, K) )
%   | | | then return 0.2164244566040605;  // std dev = 2.625, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return 0.027961437736368222;  // std dev = 6.920, 284.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=66 */
%   | | else return 0.18099298419273646;  // std dev = 0.495, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.023845019051909635;  // std dev = 0.388, 195.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=36 */
%   | | else return -0.15579938271029686;  // std dev = 1.49e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordauthor(G, C) )
%   | | | then return 0.6068445126646084;  // std dev = 4.21e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.23209609656449798;  // std dev = 3.975, 69.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=44 */
%   | | else if ( haswordauthor(H, C) )
%   | | | then return 0.32429026566185265;  // std dev = 1.198, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return -0.2416403358202401;  // std dev = 2.060, 33.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=5 */
%   | else if ( haswordtitle(I, C) )
%   | | then return 0.09192763723756966;  // std dev = 0.500, 4,391.000 (wgt'ed) examples reached here.  /* #neg=2,261 #pos=2,130 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.09100378181886416;  // std dev = 4.402, 83.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=48 */
%   | | | else return 0.12624041104796765;  // std dev = 4.261, 85.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=58 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.04711249640329948;  // std dev = 0.430, 347.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=98 */
%   | else return 0.010085638576105858;  // std dev = 0.377, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.34726547376324;  // std dev = 0.294, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | else if ( haswordtitle(E, C) )
%   | | then return 0.06942804885956508;  // std dev = 0.499, 4,486.000 (wgt'ed) examples reached here.  /* #neg=2,312 #pos=2,174 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.06530020882440524;  // std dev = 4.561, 90.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=53 */
%   | | | else return 0.10491745880100768;  // std dev = 4.249, 85.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=58 */
%   else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | then if ( haswordvenue(B, J) )
%   | | | then return 0.17164686691871278;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return 0.013525449546179558;  // std dev = 6.891, 284.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=66 */
%   | | else return 0.1636233108570888;  // std dev = 0.495, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.014706675646803316;  // std dev = 0.388, 195.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=36 */
%   | | else return -0.13758024769182153;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.053281871766209014;  // std dev = 0.499, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.1468556898988992;  // std dev = 0.365, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.046934056931983124;  // std dev = 4.400, 83.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=48 */
%   | | | else return 0.07597509800923245;  // std dev = 4.262, 85.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=58 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordvenue(B, K) )
%   | | | then return 0.13280933342279308;  // std dev = 2.618, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return 0.011300355635815017;  // std dev = 6.890, 284.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=66 */
%   | | else return 0.12570225101320034;  // std dev = 0.495, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.012622609171359505;  // std dev = 0.388, 195.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=36 */
%   | | else return -0.12205470011602622;  // std dev = 1.29e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordvenue(A, D) )
%   | | | then return 0.3604700837641608;  // std dev = 1.49e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.14265199648267862;  // std dev = 3.976, 69.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=44 */
%   | | else return -0.12823523457922614;  // std dev = 0.395, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.03972153302485522;  // std dev = 0.500, 4,391.000 (wgt'ed) examples reached here.  /* #neg=2,261 #pos=2,130 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.035503265220807795;  // std dev = 4.433, 85.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=50 */
%   | | | else return 0.05857601920077141;  // std dev = 4.228, 83.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=56 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then return 0.017691860212135018;  // std dev = 0.418, 312.000 (wgt'ed) examples reached here.  /* #neg=232 #pos=80 */
%   | | else return 0.09560959026699097;  // std dev = 0.495, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | else return 0.0027537035960066266;  // std dev = 0.376, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */


Results
   AUC ROC   = 0.560091
   AUC PR    = 0.24856
   CLL	      = -0.602753
   Precision = 0.47619 at threshold = 0.5
   Recall    = 0.034423
   F1        = 0.064205


Total learning time: 2326.960955142975 seconds
Total inference time: 3.786 seconds
AUC ROC: 0.560091


Results scoring model
   AUC ROC   = 0.568126
   AUC PR    = 0.53011
   CLL	      = -0.671105
   Precision = 0.669456 at threshold = 0.5
   Recall    = 0.065681
   F1        = 0.119626


Total scoring time: 17.657 seconds
Refined model CLL: -0.671105


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.560091
   AUC PR    = 0.24856
   CLL	      = -0.602753
   Precision = 0.47619 at threshold = 0.5
   Recall    = 0.034423
   F1        = 0.064205


Total learning time: 5266.954950029373 seconds
Total inference time: 3.786 seconds
AUC ROC: 0.560091
Total revision time: 5266.954950029373
Best scored revision CLL: -0.671105


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 18:44:57
{'AUC ROC': 0.560091, 'AUC PR': 0.24856, 'CLL': -0.602753, 'Precision': [0.47619, 0.5], 'Recall': 0.034423, 'F1': 0.064205, 'Learning time': 5266.954950029373, 'Inference time': 3.786, 'parameter_1.0': {'AUC ROC': 0.560009, 'AUC PR': 0.248409, 'CLL': -0.603451, 'Precision': [0.47619, 0.5], 'Recall': 0.034423, 'F1': 0.064205, 'Learning time': 2898.2119948863983, 'Inference time': 3.895}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3441551545575258;  // std dev = 0.500, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.493284070234648;  // std dev = 4.141, 74.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=47 */
%   | | | else return 0.26991364098186527;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.5248156017661779;  // std dev = 3.367, 51.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=34 */
%   | | | else return 0.5803711573217337;  // std dev = 2.687, 36.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=26 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then if ( haswordauthor(N, K) )
%   | | | then return 0.35814893509951234;  // std dev = 2.646, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return 0.24524570929306141;  // std dev = 5.424, 124.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=48 */
%   | | else return 0.0427643197148959;  // std dev = 0.388, 195.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=36 */
%   | else return 0.03039773892726256;  // std dev = 0.378, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.29690255138011334;  // std dev = 0.500, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.42607371502600505;  // std dev = 4.114, 74.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=47 */
%   | | | else return 0.1984140253494258;  // std dev = 2.030, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.4543171296026042;  // std dev = 3.360, 51.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=34 */
%   | | | else return 0.4942204482591005;  // std dev = 2.687, 36.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=26 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then if ( haswordauthor(N, K) )
%   | | | then return 0.32439518138890605;  // std dev = 2.639, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return 0.20916132844549118;  // std dev = 5.418, 124.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=48 */
%   | | else return 0.03902358598744723;  // std dev = 0.388, 195.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=36 */
%   | else return 0.02521541327201523;  // std dev = 0.378, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.247146690498353;  // std dev = 0.500, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordauthor(E, C) )
%   | | then return 0.6917491755903863;  // std dev = 0.022, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.30850388163880893;  // std dev = 4.616, 90.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=53 */
%   | | | else return 0.3727178586267966;  // std dev = 4.280, 85.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=58 */
%   else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | then if ( haswordauthor(K, H) )
%   | | | then return 0.2728052450080595;  // std dev = 2.638, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return 0.17641064749528546;  // std dev = 5.418, 124.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=48 */
%   | | else if ( title(L, I), venue(L, B) )
%   | | | then return 0.04014684264921155;  // std dev = 5.398, 189.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=36 */
%   | | | else return -0.15032934782697896;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.021852921493614806;  // std dev = 0.378, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.19937367766283512;  // std dev = 0.500, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.40976954804888255;  // std dev = 0.376, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.23272389852918132;  // std dev = 4.450, 83.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=48 */
%   | | | else return 0.2881089832158364;  // std dev = 4.279, 85.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=58 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return 0.07609582705034545;  // std dev = 7.137, 274.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=73 */
%   | | | else return -0.007499473654940023;  // std dev = 2.432, 38.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=7 */
%   | | else return 0.279673576393317;  // std dev = 0.498, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | then return 0.0298060791838211;  // std dev = 0.388, 195.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=36 */
%   | | else return -0.15154506578696703;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.15694231532784036;  // std dev = 0.500, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.21261518594293824;  // std dev = 3.795, 65.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=42 */
%   | | | else return 0.07381722790468839;  // std dev = 2.532, 26.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=12 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.4774054329032096;  // std dev = 0.113, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.22632509402463616;  // std dev = 4.249, 83.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=56 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordvenue(B, L) )
%   | | | then return 0.22357665749201258;  // std dev = 2.630, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return 0.036497303651425034;  // std dev = 6.961, 284.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=66 */
%   | | else return 0.26742646264656883;  // std dev = 0.497, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | else return 0.011842014349682472;  // std dev = 0.377, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordauthor(G, C) )
%   | | | then return 0.6354059656279372;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.26578115217148734;  // std dev = 3.973, 69.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=44 */
%   | | else if ( haswordauthor(H, C) )
%   | | | then return 0.3458347575251663;  // std dev = 1.197, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return -0.2130788828569113;  // std dev = 2.060, 33.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=5 */
%   | else if ( haswordtitle(I, C) )
%   | | then return 0.1204890902009401;  // std dev = 0.500, 4,391.000 (wgt'ed) examples reached here.  /* #neg=2,261 #pos=2,130 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.11502516650613079;  // std dev = 4.411, 83.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=48 */
%   | | | else return 0.1758908088263007;  // std dev = 4.263, 85.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=58 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.06111264723234219;  // std dev = 0.434, 347.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=98 */
%   | else return 0.010241589455893822;  // std dev = 0.377, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09280588564668889;  // std dev = 0.499, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.1309032582424579;  // std dev = 3.791, 65.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=42 */
%   | | | else return 0.01828645241812673;  // std dev = 2.510, 26.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=12 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.3076190118051016;  // std dev = 0.130, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.12649565199672463;  // std dev = 4.249, 83.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=56 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordvenue(A, L) )
%   | | | then return 0.184023284784905;  // std dev = 2.618, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return 0.023225583956438936;  // std dev = 6.947, 284.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=66 */
%   | | else return 0.20581170520121794;  // std dev = 0.497, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | else return 0.0023279808840596726;  // std dev = 0.376, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07046667783900401;  // std dev = 0.499, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.12350102159930214;  // std dev = 3.777, 65.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=42 */
%   | | | else return -0.04968459268322472;  // std dev = 2.450, 26.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=12 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.10306890248478903;  // std dev = 3.315, 51.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=34 */
%   | | | else return 0.10254491466006543;  // std dev = 2.674, 36.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=26 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordvenue(A, L) )
%   | | | then return 0.1430465816916713;  // std dev = 2.617, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return 0.01946291953475401;  // std dev = 6.946, 284.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=66 */
%   | | else return 0.1603600859517118;  // std dev = 0.497, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | else return 0.0019996050497720465;  // std dev = 0.376, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordtitle(F, C) )
%   | | | then return 0.19595040896884386;  // std dev = 3.883, 71.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=48 */
%   | | | else return 0.18410625144878184;  // std dev = 1.123, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return -0.10380001745246488;  // std dev = 0.404, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.05259773673871056;  // std dev = 0.500, 4,391.000 (wgt'ed) examples reached here.  /* #neg=2,261 #pos=2,130 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.04362849890012504;  // std dev = 4.389, 83.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=48 */
%   | | | else return 0.07519414569615215;  // std dev = 4.245, 85.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=58 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then return 0.024652304184969748;  // std dev = 0.421, 312.000 (wgt'ed) examples reached here.  /* #neg=232 #pos=80 */
%   | | else return 0.12297145041194406;  // std dev = 0.496, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | else return 0.0017171464172090257;  // std dev = 0.376, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.040073426783357256;  // std dev = 0.499, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.15147361482316257;  // std dev = 0.344, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.13893256055222525;  // std dev = 1.124, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.042049197523542255;  // std dev = 6.009, 161.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=101 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordvenue(B, K) )
%   | | | then return 0.14307350199365557;  // std dev = 2.606, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return -0.0018502029708719453;  // std dev = 6.858, 284.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=66 */
%   | | else return 0.18726069157800046;  // std dev = 0.496, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.009316299232743203;  // std dev = 0.388, 195.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=36 */
%   | | else return -0.13634903778613514;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */


Results
   AUC ROC   = 0.560159
   AUC PR    = 0.248437
   CLL	      = -0.602771
   Precision = 0.473684 at threshold = 0.5
   Recall    = 0.030981
   F1        = 0.058158


Total learning time: 2986.2964799404144 seconds
Total inference time: 3.85 seconds
AUC ROC: 0.560159


Dataset: 3_imdb_cora, Fold: 3, Type: Scratch (RDN-B), Time: 19:34:48
{'AUC ROC': 0.560159, 'AUC PR': 0.248437, 'CLL': -0.602771, 'Precision': [0.473684, 0.5], 'Recall': 0.030981, 'F1': 0.058158, 'Learning time': 2986.2964799404144, 'Inference time': 3.85}


Starting fold 4

Target train facts examples: 34429
Target train pos examples: 2270
Target train neg examples: 3954

Target test facts examples: 8129
Target test pos  examples: 747
Target test neg examples: 1068

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.252370743114419;  // std dev = 0.489, 1,073.000 (wgt'ed) examples reached here.  /* #neg=650 #pos=423 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return -0.11685106490048772;  // std dev = 0.987, 40.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=1 */
%   | | | else return 0.06569610491083312;  // std dev = 2.952, 53.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=11 */
%   | | else return 0.10814893509951236;  // std dev = 0.433, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | | then return 0.31968739663797385;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.04733812428870155;  // std dev = 2.382, 37.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=7 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordauthor(G, C) )
%   | | | then return 0.8245710590828158;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5745710590828158;  // std dev = 1.500, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return 0.04679328130503802;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return 0.8245710590828158;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2141564014164688;  // std dev = 0.488, 1,037.000 (wgt'ed) examples reached here.  /* #neg=633 #pos=404 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then return 0.007157659123186217;  // std dev = 0.355, 113.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( haswordauthor(L, M), haswordtitle(N, M) )
%   | | | then return 0.27615825449321707;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | | else return 0.050922032513554226;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.028958262867902995;  // std dev = 0.379, 40.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=7 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.5716855340049641;  // std dev = 0.312, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.47572864163563516;  // std dev = 1.500, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | | else return 0.04449800655432476;  // std dev = 1.690, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | else return 0.180999847921411;  // std dev = 0.488, 1,037.000 (wgt'ed) examples reached here.  /* #neg=633 #pos=404 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( haswordauthor(I, J), haswordtitle(K, J) )
%   | | then return 0.24803004377302915;  // std dev = 0.499, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
%   | | else return 0.011796419413273909;  // std dev = 0.912, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0012754731964840164;  // std dev = 0.350, 110.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=16 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.03779445942159125;  // std dev = 2.382, 37.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=7 */
%   | | | else return -0.12865620956419033;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( haswordtitle(E, C) )
%   | | then return 0.5377710706151324;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3773369836703029;  // std dev = 0.777, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.15026443268422288;  // std dev = 0.487, 1,066.000 (wgt'ed) examples reached here.  /* #neg=649 #pos=417 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( haswordtitle(H, F) )
%   | | then return 0.46979572104079637;  // std dev = 0.772, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.03532145187318858;  // std dev = 0.376, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.1777027248113857;  // std dev = 0.815, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.07961215427117668;  // std dev = 1.769, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return -0.002282500001135938;  // std dev = 3.315, 88.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=13 */
%   | | | else return 0.015238122236412148;  // std dev = 2.569, 51.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=8 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12318529103267974;  // std dev = 0.486, 1,073.000 (wgt'ed) examples reached here.  /* #neg=650 #pos=423 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.38718641754846805;  // std dev = 0.762, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.030862323552006722;  // std dev = 0.375, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(H, I), haswordtitle(J, I) )
%   | | | then return 0.10020630824897231;  // std dev = 1.731, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | | else return 0.024520081870992354;  // std dev = 0.887, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return -0.0019919452679392773;  // std dev = 3.315, 88.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=13 */
%   | | | else return 0.013377725097900845;  // std dev = 2.569, 51.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=8 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09827128222269364;  // std dev = 0.486, 1,073.000 (wgt'ed) examples reached here.  /* #neg=650 #pos=423 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return -0.10747172141805286;  // std dev = 0.993, 40.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=1 */
%   | | | else return 0.05270998647812574;  // std dev = 2.939, 53.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=11 */
%   | | else return 0.08581003306847054;  // std dev = 0.439, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then return 0.05755820665153361;  // std dev = 0.417, 54.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=14 */
%   | | else return -0.13092419383222223;  // std dev = 0.041, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordauthor(G, C) )
%   | | | then return 0.15987304828507626;  // std dev = 0.667, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.35250883153366974;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return -0.16173656960809576;  // std dev = 1.537, 19.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
%   | | | else return 0.4885968192933685;  // std dev = 0.242, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.0771666953534478;  // std dev = 0.487, 1,035.000 (wgt'ed) examples reached here.  /* #neg=629 #pos=406 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then return 0.3044664475885366;  // std dev = 0.992, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( haswordauthor(J, L), haswordtitle(M, L) )
%   | | | then return 0.10063489766122137;  // std dev = 1.777, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return -0.16949953962405853;  // std dev = 0.025, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 7.048600110986594E-4;  // std dev = 0.355, 150.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=23 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06047263984646983;  // std dev = 0.485, 1,073.000 (wgt'ed) examples reached here.  /* #neg=650 #pos=423 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return -0.0960466608745947;  // std dev = 0.993, 40.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=1 */
%   | | | else return 0.04361795622643572;  // std dev = 2.930, 53.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=11 */
%   | | else return 0.07368692609906889;  // std dev = 0.439, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then return 0.04188518081291627;  // std dev = 0.414, 54.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=14 */
%   | | else return -0.11177582844197348;  // std dev = 0.020, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then if ( haswordvenue(B, C) )
%   | | | then return 0.44490406642513386;  // std dev = 8.608, 459.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=365 */
%   | | | else return 0.3254721593927172;  // std dev = 2.667, 32.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=17 */
%   | | else return -0.2908844073207373;  // std dev = 0.194, 572.000 (wgt'ed) examples reached here.  /* #neg=551 #pos=21 */
%   | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | then return -0.09986898170704733;  // std dev = 0.374, 82.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=15 */
%   | | else return 0.14134598995307357;  // std dev = 0.460, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.3912757887550335;  // std dev = 2.378, 29.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=20 */
%   | | | else return -0.20094739889741414;  // std dev = 0.389, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else return -0.22776703429435483;  // std dev = 0.143, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.2877657347294573;  // std dev = 0.389, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then if ( haswordvenue(B, C) )
%   | | | then return 0.3389423489808807;  // std dev = 8.607, 459.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=365 */
%   | | | else return 0.27042924067969526;  // std dev = 2.650, 32.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=17 */
%   | | else return -0.2310745846961994;  // std dev = 0.192, 572.000 (wgt'ed) examples reached here.  /* #neg=551 #pos=21 */
%   | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, B) )
%   | | | then return -0.1531175448553082;  // std dev = 1.335, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | | | else return -0.04920427932160047;  // std dev = 3.086, 57.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=13 */
%   | | else return 0.11701515776732556;  // std dev = 0.459, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
%   else if ( haswordvenue(A, J), haswordvenue(B, J) )
%   | then if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.27031802954617223;  // std dev = 0.387, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else return 0.41652772032138335;  // std dev = 0.336, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.01068939008907824;  // std dev = 0.368, 58.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=14 */


Results
   AUC ROC   = 0.8832
   AUC PR    = 0.808663
   CLL	      = -0.480279
   Precision = 0.81288 at threshold = 0.5
   Recall    = 0.895582
   F1        = 0.852229


Total learning time: 2003.507886171341 seconds
Total inference time: 5.689 seconds
AUC ROC: 0.8832


Results scoring model
   AUC ROC   = 0.89116
   AUC PR    = 0.802007
   CLL	      = -0.464393
   Precision = 0.799574 at threshold = 0.5
   Recall    = 0.825991
   F1        = 0.812568


Total scoring time: 24.12 seconds
Parameter learned model CLL: -0.464393


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'haswordtitle(E, F), haswordauthor(G, F)', 'false,true,true': 'author(H, G), venue(H, B)', 'false,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false,true': 'haswordauthor(J, K), haswordtitle(L, K)', 'false,false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true': [0.489, 650, 423], 'false,true,true,true': [0.987, 39, 1], 'false,true,true,false': [2.952, 42, 11], 'false,true,false': [0.433, 15, 5], 'false,false,true,true': [1.797, 7, 6], 'false,false,true,false': [0.894, 4, 1], 'false,false,false,true': [2.382, 30, 7], 'false,false,false,false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,true': 'haswordauthor(G, C)', 'true,true,false': 'haswordtitle(H, C)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,false,true': 'haswordauthor(L, M), haswordtitle(N, M)'}, {'true,true,true,true': [0.0, 0, 3], 'true,true,true,false': [1.5, 3, 9], 'true,true,false,true': [1.764, 14, 4], 'true,true,false,false': [0.0, 0, 3], 'true,false': [0.488, 633, 404], 'false,true': [0.355, 96, 17], 'false,false,true,true': [1.797, 7, 6], 'false,false,true,false': [0.894, 4, 1], 'false,false,false': [0.379, 33, 7]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordauthor(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,true': 'haswordtitle(G, E)', 'false': 'haswordvenue(A, H), haswordauthor(I, H)', 'false,true': 'haswordauthor(I, J), haswordtitle(K, J)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)', 'false,false,false': 'haswordvenue(B, N), haswordtitle(P, N)'}, {'true,true': [0.312, 1, 6], 'true,false,true,true': [1.5, 3, 9], 'true,false,true,false': [1.69, 13, 4], 'true,false,false': [0.488, 633, 404], 'false,true,true': [0.499, 8, 7], 'false,true,false': [0.912, 5, 1], 'false,false,true': [0.35, 94, 16], 'false,false,false,true': [2.382, 30, 7], 'false,false,false,false': [2.63e-09, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordauthor(D, C)', 'true,true': 'haswordtitle(E, C)', 'false': 'haswordvenue(B, F), haswordauthor(G, F)', 'false,true': 'haswordtitle(H, F)', 'false,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false,true': 'author(K, J), venue(K, B)', 'false,false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true': [1.05e-08, 0, 3], 'true,true,false': [0.777, 1, 3], 'true,false': [0.487, 649, 417], 'false,true,true': [0.772, 1, 2], 'false,true,false': [0.376, 9, 2], 'false,false,true,true': [0.815, 2, 1], 'false,false,true,false': [1.769, 10, 5], 'false,false,false,true': [3.315, 75, 13], 'false,false,false,false': [2.569, 43, 8]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,true': 'haswordtitle(F, D)', 'false,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false,false,true': 'haswordauthor(H, I), haswordtitle(J, I)', 'false,false,false': 'haswordvenue(B, K), haswordtitle(L, K)'}, {'true': [0.486, 650, 423], 'false,true,true': [0.762, 1, 2], 'false,true,false': [0.375, 9, 2], 'false,false,true,true': [1.731, 8, 5], 'false,false,true,false': [0.887, 4, 1], 'false,false,false,true': [3.315, 75, 13], 'false,false,false,false': [2.569, 43, 8]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'haswordtitle(E, F), haswordauthor(G, F)', 'false,true,true': 'author(H, G), venue(H, B)', 'false,false': 'haswordvenue(B, I), haswordtitle(J, I)'}, {'true': [0.486, 650, 423], 'false,true,true,true': [0.993, 39, 1], 'false,true,true,false': [2.939, 42, 11], 'false,true,false': [0.439, 15, 5], 'false,false,true': [0.417, 40, 14], 'false,false,false': [0.041, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,true': 'haswordauthor(G, C)', 'true,true,false': 'haswordtitle(H, C)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, B)', 'false,true,false': 'haswordauthor(J, L), haswordtitle(M, L)'}, {'true,true,true,true': [0.667, 1, 3], 'true,true,true,false': [1.633, 4, 8], 'true,true,false,true': [1.537, 16, 3], 'true,true,false,false': [0.242, 0, 3], 'true,false': [0.487, 629, 406], 'false,true,true': [0.992, 2, 2], 'false,true,false,true': [1.777, 8, 6], 'false,true,false,false': [0.025, 3, 0], 'false,false': [0.355, 127, 23]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'haswordtitle(E, F), haswordauthor(G, F)', 'false,true,true': 'author(H, G), venue(H, B)', 'false,false': 'haswordvenue(B, I), haswordtitle(J, I)'}, {'true': [0.485, 650, 423], 'false,true,true,true': [0.993, 39, 1], 'false,true,true,false': [2.93, 42, 11], 'false,true,false': [0.439, 15, 5], 'false,false,true': [0.414, 40, 14], 'false,false,false': [0.02, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordtitle(D, C)', 'true': 'title(E, D), venue(E, A)', 'true,true': 'samebib(E, F), venue(F, B)', 'true,true,true': 'haswordvenue(B, C)', 'true,false': 'haswordtitle(D, G), haswordauthor(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, B)', 'false,true,true': 'samebib(K, L), venue(L, A)'}, {'true,true,true,true': [8.608, 94, 365], 'true,true,true,false': [2.667, 15, 17], 'true,true,false': [0.194, 551, 21], 'true,false,true': [0.374, 67, 15], 'true,false,false': [0.46, 16, 9], 'false,true,true,true': [2.378, 9, 20], 'false,true,true,false': [0.389, 30, 0], 'false,true,false': [0.143, 3, 0], 'false,false': [0.389, 5, 7]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordtitle(D, C)', 'true': 'title(E, D), venue(E, A)', 'true,true': 'samebib(E, F), venue(F, B)', 'true,true,true': 'haswordvenue(B, C)', 'true,false': 'haswordtitle(D, G), haswordauthor(H, G)', 'true,false,true': 'author(I, H), venue(I, B)', 'false': 'haswordvenue(A, J), haswordvenue(B, J)', 'false,true': 'haswordvenue(B, K), haswordtitle(L, K)'}, {'true,true,true,true': [8.607, 94, 365], 'true,true,true,false': [2.65, 15, 17], 'true,true,false': [0.192, 551, 21], 'true,false,true,true': [1.335, 23, 2], 'true,false,true,false': [3.086, 44, 13], 'true,false,false': [0.459, 16, 9], 'false,true,true': [0.387, 2, 6], 'false,true,false': [0.336, 1, 7], 'false,false': [0.368, 44, 14]}]]
[{'': [0.23881097410035187, 0.14842173660271646], 'false': [0.12780953872660294, 0.18311533888228246], 'false,false': [0.23765432098765438, 0.1443750000000002], 'false,false,true': [0.24852071005917165, 0.16000000000000003], 'false,false,false': [0.15339663988312655, 0.0], 'false,true': [0.1123829344432877, 0.18749999999999983], 'false,true,true': [0.024375000000000063, 0.16447134211463102]}, {'': [0.23881097410036442, 0.14529847145135222], 'true': [0.24922839506172886, 0.2378086033724225], 'true,true': [0.1600000000000002, 0.22222222222222207], 'true,true,false': [0.17283950617283966, 0.0], 'true,true,true': [0.0, 0.18750000000000003], 'false': [0.1258060142878708, 0.1791404412073466], 'false,false': [0.23410921072161983, 0.14382488561834517], 'false,false,true': [0.24852071005917153, 0.16]}, {'': [0.23747321595193854, 0.1437882385932906], 'true': [0.09723220963230604, 0.23740417353600687], 'true,false': [0.22123133735681627, 0.23780860337241522], 'true,false,true': [0.18749999999999975, 0.16809278529011354], 'false': [0.22899844551438844, 0.1281896949899057], 'false,true': [0.24920083688107664, 0.13863080618470644], 'false,false': [0.12235408481443344, 0.14381398351554536], 'false,false,false': [0.15339663988312652, 2.3129646346357427e-18]}, {'': [0.23650729861652037, 0.1421480130657667], 'true': [0.09244007857454777, 0.2368824011096666], 'false': [0.1852680699694022, 0.13724356225595344], 'false,true': [0.19866690132142073, 0.1411635809723063], 'false,false': [0.21199700304318247, 0.12659677172448244], 'false,false,true': [0.22117404620294626, 0.20855796773974572], 'false,false,false': [0.12484765579286856, 0.12942051200178234], 'true,true': [3.700743415417188e-17, 0.1507390962538211]}, {'': [0.2361568532310874, 0.14055457481305447], 'false': [0.17366800224465215, 0.13686429355663196], 'false,true': [0.19373794480424275, 0.14098719726892497], 'false,false': [0.21130458407895755, 0.12657040457828167], 'false,false,true': [0.2304660333850005, 0.15734763459305684], 'false,false,false': [0.12484918913568575, 0.12939079131305944]}, {'': [0.23609933973557617, 0.13929340054996422], 'false': [0.125932451410911, 0.1641197738584557], 'false,false': [0.17379586792496157, 0.0004169311024468242], 'false,true': [0.10975520339749012, 0.19259484208651587], 'false,true,true': [0.02464153733813567, 0.16295615635070201]}, {'': [0.23606205336033048, 0.137912277740972], 'true': [0.21206372424183043, 0.23694047965329185], 'true,true': [0.20146743768210162, 0.1597977968160914], 'true,true,true': [0.1113716753208896, 0.2222222222222224], 'true,true,false': [0.1242847709004292, 0.019452863175231316], 'false': [0.21567764718614488, 0.1257930131315355], 'false,true': [0.24608164998098558, 0.19647549303403128], 'false,true,false': [0.2256540526484657, 0.00021378744682231757]}, {'': [0.23511859478250932, 0.1367882895928959], 'false': [0.1239420867775319, 0.1611485458662182], 'false,false': [0.17144993227064148, 9.65171423229546e-05], 'false,true': [0.10767727452713133, 0.19288636979776091], 'false,true,true': [0.024675479993173044, 0.16193037261882834]}, {'': [0.2237460023369411, 0.18325899523175693], 'true': [0.22872261238458155, 0.16712640586789212], 'true,true': [0.16627164455445148, 0.03752706276954666], 'false': [0.18206948559625677, 0.1513917744775818], 'false,true': [0.1860901596662956, 0.006818343005401063], 'false,true,true': [0.195032367485637, 0.005054147206973917], 'true,false': [0.1401026050161373, 0.21117435743411966], 'true,true,true': [0.1614378063632929, 0.2222726587431214]}, {'': [0.17495099649479312, 0.1544957712230201], 'true': [0.17571472362335452, 0.16354858367175526], 'true,true': [0.16544471642537872, 0.03679218417496367], 'true,true,true': [0.16137782733800496, 0.21939103636877683], 'true,false': [0.14015300288237162, 0.2102721474941375], 'false': [0.1366181642794806, 0.13548988768707196], 'true,false,true': [0.07126745532374537, 0.16707389930319005], 'false,true': [0.14970761576117628, 0.11284007595949333]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
0;false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true
0;false,false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
1;true,true;haswordtitle(F, D).;true;true
1;true,true,true;haswordauthor(G, C).;true;true
1;true,true,false;haswordtitle(H, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(A, H), haswordauthor(I, H).;true;true
2;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
2;false,false,false;haswordvenue(B, N), haswordtitle(P, N).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordauthor(D, C).;true;true
3;true,true;haswordtitle(E, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
5;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(A, I), haswordauthor(J, I).;true;true
6;false,true;author(K, J), venue(K, B).;true;true
6;false,true,false;haswordauthor(J, L), haswordtitle(M, L).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
7;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.6581489350995123;  // std dev = 0.400, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | else if ( haswordtitle(G, C) )
%   | | | then return 0.08037115732173453;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2477342774331623;  // std dev = 0.488, 1,037.000 (wgt'ed) examples reached here.  /* #neg=633 #pos=404 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( haswordauthor(I, J), haswordtitle(K, J) )
%   | | then return 0.324815601766179;  // std dev = 0.499, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
%   | | else return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.0036034805540578144;  // std dev = 0.353, 110.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=16 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.04733812428870155;  // std dev = 2.382, 37.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=7 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordauthor(G, C) )
%   | | | then return 0.7580193346218546;  // std dev = 1.49e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5080193346218546;  // std dev = 1.500, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return 0.07030324498182232;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2148260740316314;  // std dev = 0.488, 1,037.000 (wgt'ed) examples reached here.  /* #neg=633 #pos=404 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | then return 0.2805107770599873;  // std dev = 0.499, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
%   | | else return 0.02176788419240575;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.003164264874578046;  // std dev = 0.353, 110.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=16 */
%   | | else return 0.028958262867902995;  // std dev = 0.379, 40.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=7 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordauthor(G, C), sameauthor(E, G) )
%   | | | then return 0.5947969362557473;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.41104790840767147;  // std dev = 1.738, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | else if ( haswordauthor(H, C) )
%   | | | then return 0.6498442518952199;  // std dev = 0.231, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.050036685899008025;  // std dev = 1.589, 19.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
%   | else return 0.18322458620095244;  // std dev = 0.487, 1,035.000 (wgt'ed) examples reached here.  /* #neg=629 #pos=406 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | then return 0.23424256206591026;  // std dev = 0.499, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
%   | | else return 0.01904987294481035;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.0027776488186990714;  // std dev = 0.353, 110.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=16 */
%   | | else return 0.025310659247657623;  // std dev = 0.379, 40.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=7 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( haswordauthor(G, C) )
%   | | | then return 0.42987944336571604;  // std dev = 0.043, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.40164186896104254;  // std dev = 1.337, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | else if ( haswordauthor(H, C) )
%   | | | then return 0.3371013899677218;  // std dev = 0.697, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.008405781874147924;  // std dev = 1.935, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
%   | else return 0.1513819007582032;  // std dev = 0.487, 1,035.000 (wgt'ed) examples reached here.  /* #neg=629 #pos=406 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then return 0.004995722968101277;  // std dev = 0.356, 113.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=17 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( haswordauthor(L, M), haswordtitle(N, M) )
%   | | | then return 0.18474656357647598;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | | else return 0.04997010972562281;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.022061344348654043;  // std dev = 0.379, 40.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=7 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.2918513989743031;  // std dev = 0.263, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.33091351448844847;  // std dev = 1.568, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return -0.05069276918172547;  // std dev = 1.606, 19.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
%   | | else return 0.1226867405122063;  // std dev = 0.487, 1,035.000 (wgt'ed) examples reached here.  /* #neg=629 #pos=406 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return 0.3146276358469654;  // std dev = 0.940, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( haswordauthor(I, K), haswordtitle(L, K) )
%   | | | then return 0.11599625617878437;  // std dev = 1.843, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return -0.15651417295850495;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.0018241648275933104;  // std dev = 0.353, 110.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=16 */
%   | | else return 0.019182238016819758;  // std dev = 0.379, 40.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=7 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.098029933220757;  // std dev = 0.484, 1,073.000 (wgt'ed) examples reached here.  /* #neg=650 #pos=423 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then return 0.26353366267317907;  // std dev = 0.931, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( haswordauthor(E, G), haswordtitle(H, G) )
%   | | | then return 0.09055868900824894;  // std dev = 1.843, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return -0.13694362077826058;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return -0.021632677837846094;  // std dev = 3.107, 90.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=11 */
%   | | | else return 0.10614509993993164;  // std dev = 1.936, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.029044158009474675;  // std dev = 2.382, 37.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=7 */
%   | | | else return -0.13630336538200785;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.47126153522355824;  // std dev = 0.494, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.36562413773550473;  // std dev = 0.230, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.1784521447457534;  // std dev = 0.687, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.0502807009009424;  // std dev = 1.565, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.23057811211975246;  // std dev = 1.561, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return -0.05859185998834152;  // std dev = 1.607, 19.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
%   | | else return 0.07679214978172227;  // std dev = 0.488, 1,006.000 (wgt'ed) examples reached here.  /* #neg=613 #pos=393 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then return 0.10706353793008432;  // std dev = 0.400, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | else return 0.004334432584224174;  // std dev = 0.370, 157.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=27 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06028854892882458;  // std dev = 0.483, 1,073.000 (wgt'ed) examples reached here.  /* #neg=650 #pos=423 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then return 0.20682911341956384;  // std dev = 0.913, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( haswordauthor(E, G), haswordtitle(H, G) )
%   | | | then return 0.06730207380414388;  // std dev = 1.835, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return -0.12582429475439047;  // std dev = 0.009, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.027634779543491157;  // std dev = 3.241, 70.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=13 */
%   | | | else return -0.0995442268580302;  // std dev = 0.981, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.02018898960414973;  // std dev = 2.745, 55.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=9 */
%   | | | else return -0.12529877552304192;  // std dev = 0.009, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then if ( haswordvenue(B, C) )
%   | | | then return 0.4410360450828865;  // std dev = 8.604, 459.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=365 */
%   | | | else return 0.33396651353285156;  // std dev = 2.693, 32.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=17 */
%   | | else return -0.28863168633589553;  // std dev = 0.194, 572.000 (wgt'ed) examples reached here.  /* #neg=551 #pos=21 */
%   | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | then return -0.0998996483222222;  // std dev = 0.375, 82.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=15 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.6558909187892827;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.06872798469835428;  // std dev = 1.980, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then return 0.39281420818171764;  // std dev = 0.389, 16.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=13 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then return 0.03728504996175394;  // std dev = 0.419, 54.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=14 */
%   | | else return -0.1140408102089553;  // std dev = 0.011, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then if ( haswordvenue(B, C) )
%   | | | then return 0.3365632918783657;  // std dev = 8.600, 459.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=365 */
%   | | | else return 0.27954500056009185;  // std dev = 2.682, 32.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=17 */
%   | | else return -0.2295336977583974;  // std dev = 0.192, 572.000 (wgt'ed) examples reached here.  /* #neg=551 #pos=21 */
%   | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | then return -0.08087691700773988;  // std dev = 0.375, 82.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=15 */
%   | | else return 0.12908678282031308;  // std dev = 0.428, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.35941928311862875;  // std dev = 2.416, 29.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=20 */
%   | | | else return -0.20577592175038764;  // std dev = 0.452, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else return -0.25579567035458123;  // std dev = 0.223, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.22254594510672185;  // std dev = 0.361, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */


Results
   AUC ROC   = 0.882138
   AUC PR    = 0.804339
   CLL	      = -0.479301
   Precision = 0.812424 at threshold = 0.5
   Recall    = 0.892905
   F1        = 0.850765


Total learning time: 1245.2745399475098 seconds
Total inference time: 6.084 seconds
AUC ROC: 0.882138


Results scoring model
   AUC ROC   = 0.883129
   AUC PR    = 0.801532
   CLL	      = -0.462986
   Precision = 0.800857 at threshold = 0.5
   Recall    = 0.823789
   F1        = 0.812161


Total scoring time: 16.188 seconds
Refined model CLL: -0.462986


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.882138
   AUC PR    = 0.804339
   CLL	      = -0.479301
   Precision = 0.812424 at threshold = 0.5
   Recall    = 0.892905
   F1        = 0.850765


Total learning time: 3289.0904261188507 seconds
Total inference time: 6.084 seconds
AUC ROC: 0.882138
Total revision time: 3289.0904261188507
Best scored revision CLL: -0.462986


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 20:29:55
{'AUC ROC': 0.882138, 'AUC PR': 0.804339, 'CLL': -0.479301, 'Precision': [0.812424, 0.5], 'Recall': 0.892905, 'F1': 0.850765, 'Learning time': 3289.0904261188507, 'Inference time': 6.084, 'parameter_0.2': {'AUC ROC': 0.8832, 'AUC PR': 0.808663, 'CLL': -0.480279, 'Precision': [0.81288, 0.5], 'Recall': 0.895582, 'F1': 0.852229, 'Learning time': 2003.507886171341, 'Inference time': 5.689}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.252370743114419;  // std dev = 0.489, 1,073.000 (wgt'ed) examples reached here.  /* #neg=650 #pos=423 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then return 0.324815601766179;  // std dev = 0.499, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
%   | | else return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return -0.019628842678265458;  // std dev = 3.107, 90.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=11 */
%   | | | else return 0.10814893509951236;  // std dev = 1.936, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.04733812428870155;  // std dev = 2.382, 37.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=7 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( haswordtitle(E, C) )
%   | | then return 0.8245710590828158;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5745710590828158;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.21575304782577837;  // std dev = 0.488, 1,066.000 (wgt'ed) examples reached here.  /* #neg=649 #pos=417 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( haswordauthor(G, H), haswordtitle(I, H) )
%   | | then return 0.2805107770599873;  // std dev = 0.499, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
%   | | else return 0.02176788419240575;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | | then return -0.01725619263441433;  // std dev = 3.107, 90.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=11 */
%   | | | else return 0.09446743783575551;  // std dev = 1.936, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.04147741703517009;  // std dev = 2.382, 37.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=7 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( haswordauthor(G, C) )
%   | | | then return 0.6907629453803308;  // std dev = 0.043, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.4578174790828935;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | else if ( haswordauthor(H, C) )
%   | | | then return 0.462616505539896;  // std dev = 0.852, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.018423539688954063;  // std dev = 1.966, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
%   | else return 0.18342134381718753;  // std dev = 0.488, 1,035.000 (wgt'ed) examples reached here.  /* #neg=629 #pos=406 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | then return 0.23424256206591026;  // std dev = 0.499, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
%   | | else return 0.01904987294481035;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.0024112537036523707;  // std dev = 0.351, 110.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=16 */
%   | | else return 0.025041883680065147;  // std dev = 0.379, 40.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=7 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1523910550722349;  // std dev = 0.487, 1,073.000 (wgt'ed) examples reached here.  /* #neg=650 #pos=423 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return -0.11618332347495305;  // std dev = 1.000, 40.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=1 */
%   | | | else return 0.0669842076274498;  // std dev = 2.919, 53.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=11 */
%   | | else return 0.08131453153524554;  // std dev = 0.433, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | | then return 0.18474656357647598;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | | else return 0.04997010972562281;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | | then return 0.1908649871505043;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.008118703604271388;  // std dev = 2.237, 37.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=6 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12341042722074264;  // std dev = 0.487, 1,073.000 (wgt'ed) examples reached here.  /* #neg=650 #pos=423 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then return 0.30944978569680603;  // std dev = 0.939, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( haswordauthor(E, G), haswordtitle(H, G) )
%   | | | then return 0.11768524181809499;  // std dev = 1.838, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return -0.15651417295850495;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.02806004664788161;  // std dev = 3.225, 70.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=13 */
%   | | | else return -0.09786141587879543;  // std dev = 0.978, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.02570274584238899;  // std dev = 2.719, 55.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=9 */
%   | | | else return -0.12234682586542488;  // std dev = 0.016, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordauthor(G, C) )
%   | | | then return 0.45833502749691557;  // std dev = 0.046, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.45529751169041077;  // std dev = 1.500, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return -0.08880305699059673;  // std dev = 1.728, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return 0.5884377806930744;  // std dev = 0.149, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.09506397127180184;  // std dev = 0.487, 1,037.000 (wgt'ed) examples reached here.  /* #neg=633 #pos=404 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then return 0.2584416258143838;  // std dev = 0.930, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( haswordauthor(J, L), haswordtitle(M, L) )
%   | | | then return 0.09196055863176092;  // std dev = 1.838, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return -0.13694362077826058;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.004785512679271508;  // std dev = 0.356, 150.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=23 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07741761026793312;  // std dev = 0.486, 1,073.000 (wgt'ed) examples reached here.  /* #neg=650 #pos=423 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then return 0.20938050885961568;  // std dev = 0.923, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( haswordauthor(E, G), haswordtitle(H, G) )
%   | | | then return 0.0711533309469395;  // std dev = 1.837, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return -0.12154775398690633;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.023659035637225545;  // std dev = 3.224, 70.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=13 */
%   | | | else return -0.08683646301792934;  // std dev = 0.978, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.022041735096784015;  // std dev = 2.718, 55.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=9 */
%   | | | else return -0.11028243512816532;  // std dev = 0.015, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordauthor(G, C) )
%   | | | then return 0.13894091821865256;  // std dev = 0.668, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.3127291173484368;  // std dev = 1.559, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return -0.15627575698293397;  // std dev = 1.544, 19.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
%   | | | else return 0.47948627479713396;  // std dev = 0.277, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.06001871944489881;  // std dev = 0.487, 1,035.000 (wgt'ed) examples reached here.  /* #neg=629 #pos=406 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | then return 0.08629505400703359;  // std dev = 0.489, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
%   | | else return -0.03228817540450249;  // std dev = 0.839, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return -0.002919096238853657;  // std dev = 0.354, 92.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=14 */
%   | | else return 0.013175664936458064;  // std dev = 0.358, 58.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=9 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then if ( haswordvenue(B, C) )
%   | | | then return 0.4449121279645669;  // std dev = 8.615, 459.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=365 */
%   | | | else return 0.3267331224956863;  // std dev = 2.653, 32.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=17 */
%   | | else return -0.2913044656882526;  // std dev = 0.193, 572.000 (wgt'ed) examples reached here.  /* #neg=551 #pos=21 */
%   | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | then return -0.09994878419979479;  // std dev = 0.374, 82.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=15 */
%   | | else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | | | then return 0.4547880641738594;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.06648049424568012;  // std dev = 1.924, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   else if ( haswordvenue(A, J), haswordvenue(B, J) )
%   | then return 0.4111413865500093;  // std dev = 0.385, 16.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=13 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then return 0.19993766380548011;  // std dev = 0.936, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.009682203001270153;  // std dev = 0.401, 53.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then if ( haswordvenue(B, C) )
%   | | | then return 0.3388600379841419;  // std dev = 8.613, 459.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=365 */
%   | | | else return 0.27282923098406064;  // std dev = 2.638, 32.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=17 */
%   | | else return -0.23132929670275698;  // std dev = 0.191, 572.000 (wgt'ed) examples reached here.  /* #neg=551 #pos=21 */
%   | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | then return -0.08094543782987489;  // std dev = 0.375, 82.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=15 */
%   | | else return 0.11429702231234129;  // std dev = 0.440, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.36275997268769006;  // std dev = 2.401, 29.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=20 */
%   | | | else return -0.20321338959563667;  // std dev = 0.496, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else return -0.248220180620763;  // std dev = 0.240, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.22136731274034463;  // std dev = 0.361, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */


Results
   AUC ROC   = 0.883191
   AUC PR    = 0.808658
   CLL	      = -0.479619
   Precision = 0.813725 at threshold = 0.5
   Recall    = 0.888889
   F1        = 0.849648


Total learning time: 1435.211622953415 seconds
Total inference time: 5.892 seconds
AUC ROC: 0.883191


Dataset: 3_imdb_cora, Fold: 4, Type: Scratch (RDN-B), Time: 20:53:57
{'AUC ROC': 0.883191, 'AUC PR': 0.808658, 'CLL': -0.479619, 'Precision': [0.813725, 0.5], 'Recall': 0.888889, 'F1': 0.849648, 'Learning time': 1435.211622953415, 'Inference time': 5.892}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.25396288858787935;  // std dev = 0.489, 2,150.000 (wgt'ed) examples reached here.  /* #neg=1,299 #pos=851 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(H, D) )
%   | | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.13814893509951237;  // std dev = 2.245, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | | then return 0.1914822684328457;  // std dev = 2.449, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
%   | | | else return -0.06492798797741087;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return -0.009982933032356133;  // std dev = 4.565, 182.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=24 */
%   | | | else return 0.0353641249729301;  // std dev = 3.394, 79.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=14 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.8243406304357722;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.1756593695642281;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return 0.08749852517261433;  // std dev = 2.714, 38.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
%   | | | else return 0.6576739637691053;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.21752353970127275;  // std dev = 0.488, 2,083.000 (wgt'ed) examples reached here.  /* #neg=1,264 #pos=819 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then return 0.014218760828958664;  // std dev = 0.365, 214.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=34 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then if ( haswordauthor(L, M), haswordtitle(N, M) )
%   | | | then return 0.23222691701371181;  // std dev = 2.444, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
%   | | | else return -0.059159225221206674;  // std dev = 0.963, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | else return -0.004087269193695316;  // std dev = 0.344, 87.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=12 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18577696619071982;  // std dev = 0.488, 2,150.000 (wgt'ed) examples reached here.  /* #neg=1,299 #pos=851 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.16700365008288065;  // std dev = 0.822, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.18318936896398874;  // std dev = 2.469, 26.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=10 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return 0.12049772687598387;  // std dev = 0.868, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.1298399413797089;  // std dev = 0.023, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.02413403598536211;  // std dev = 4.278, 132.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=22 */
%   | | | else return -0.08770089672880724;  // std dev = 1.684, 55.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=3 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.04915982136863293;  // std dev = 3.990, 101.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=20 */
%   | | | else return -0.14642947257843794;  // std dev = 0.028, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.15332705641331934;  // std dev = 0.487, 2,150.000 (wgt'ed) examples reached here.  /* #neg=1,299 #pos=851 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then return 0.15113374957854725;  // std dev = 0.483, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return 0.10629885743704942;  // std dev = 0.869, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.11586785878519579;  // std dev = 0.021, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.02116052492849008;  // std dev = 4.278, 132.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=22 */
%   | | | else return -0.0773322904208597;  // std dev = 1.684, 55.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=3 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.04282665478680637;  // std dev = 3.989, 101.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=20 */
%   | | | else return -0.1290700855216686;  // std dev = 0.025, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12409370162187762;  // std dev = 0.487, 2,150.000 (wgt'ed) examples reached here.  /* #neg=1,299 #pos=851 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.11811614629898455;  // std dev = 0.824, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.12409143790138265;  // std dev = 2.467, 26.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=10 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return 0.09271891419824985;  // std dev = 0.869, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.10452048318719913;  // std dev = 0.019, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.018511211265301336;  // std dev = 4.278, 132.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=22 */
%   | | | else return -0.06872807191754779;  // std dev = 1.684, 55.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=3 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.03713171921277357;  // std dev = 3.989, 101.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=20 */
%   | | | else return -0.11525112472460104;  // std dev = 0.023, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C), haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.29622991058935166;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.42498550275100866;  // std dev = 2.534, 33.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=24 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return -0.13923035864286729;  // std dev = 2.204, 38.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=6 */
%   | | | else return 0.5118064992917827;  // std dev = 0.981, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.09721753010806;  // std dev = 0.487, 2,067.000 (wgt'ed) examples reached here.  /* #neg=1,253 #pos=814 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, I) )
%   | | | then return 0.267884324458192;  // std dev = 0.947, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.10719985287982821;  // std dev = 2.204, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
%   | | else return -0.1360428815603578;  // std dev = 0.051, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0.002917501531067434;  // std dev = 0.359, 301.000 (wgt'ed) examples reached here.  /* #neg=253 #pos=48 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07769921099986307;  // std dev = 0.486, 2,150.000 (wgt'ed) examples reached here.  /* #neg=1,299 #pos=851 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.09064496663785981;  // std dev = 0.809, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.0965865429734498;  // std dev = 2.452, 26.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=10 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return 0.07962558437004028;  // std dev = 0.869, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.09647073144582927;  // std dev = 0.028, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.01450662129534136;  // std dev = 4.276, 132.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=22 */
%   | | | else return -0.06178998167580154;  // std dev = 1.684, 55.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=3 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.029938868683225026;  // std dev = 3.976, 101.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=20 */
%   | | | else return -0.10570136193799805;  // std dev = 0.039, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.060649089254931204;  // std dev = 0.486, 2,150.000 (wgt'ed) examples reached here.  /* #neg=1,299 #pos=851 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then return 0.10497988189031333;  // std dev = 0.444, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
%   | | else return -0.1230258749064779;  // std dev = 0.056, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(I, J), haswordtitle(K, J) )
%   | | | then return 0.03254149423841609;  // std dev = 2.431, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
%   | | | else return -0.03835396037028034;  // std dev = 0.906, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return -0.006925599250249171;  // std dev = 4.533, 182.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=24 */
%   | | | else return 0.012378244857077903;  // std dev = 3.378, 79.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=14 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D), haswordtitle(F, C) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.26440504262847675;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.29593229138227894;  // std dev = 2.533, 33.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=24 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return -0.1390466963471772;  // std dev = 2.204, 38.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=6 */
%   | | | else return 0.3550030929193846;  // std dev = 0.987, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.0458900842524393;  // std dev = 0.487, 2,067.000 (wgt'ed) examples reached here.  /* #neg=1,253 #pos=814 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | then return 0.06812166162537057;  // std dev = 0.478, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | | else return -0.04095667196688622;  // std dev = 0.244, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return -0.007134918722242343;  // std dev = 0.338, 187.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=25 */
%   | | else return 0.01335151874824626;  // std dev = 0.381, 109.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=20 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then if ( haswordvenue(B, C) )
%   | | | then return 0.4224472359134919;  // std dev = 12.444, 928.000 (wgt'ed) examples reached here.  /* #neg=199 #pos=729 */
%   | | | else return 0.31639657542600913;  // std dev = 3.824, 65.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=35 */
%   | | else return -0.2998458455537236;  // std dev = 0.198, 1,141.000 (wgt'ed) examples reached here.  /* #neg=1,097 #pos=44 */
%   | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | then return -0.08194369375810769;  // std dev = 0.404, 150.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=34 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.5169550923807309;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.07300124035988977;  // std dev = 2.703, 37.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=9 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then if ( haswordauthor(J, I) )
%   | | then return 0.10893432653878143;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.4035990413648413;  // std dev = 0.413, 31.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=24 */
%   | else return 0.006165984005286331;  // std dev = 0.367, 125.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=23 */


Results
   AUC ROC   = 0.880033
   AUC PR    = 0.795544
   CLL	      = -0.558848
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.014726
   F1        = 0.029024


Total learning time: 1353.0855729579926 seconds
Total inference time: 4.1 seconds
AUC ROC: 0.880033


Results scoring model
   AUC ROC   = 0.871126
   AUC PR    = 0.779327
   CLL	      = -0.531998
   Precision = 0.979167 at threshold = 0.5
   Recall    = 0.051762
   F1        = 0.098326


Total scoring time: 18.876 seconds
Parameter learned model CLL: -0.531998


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,true': 'haswordauthor(E, F), haswordtitle(G, F)', 'false,true,true': 'haswordtitle(H, D)', 'false,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false,true': 'haswordauthor(J, K), haswordtitle(L, K)', 'false,false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true': [0.489, 1, 851], 'false,true,true,true': [1.0, 2, 2], 'false,true,true,false': [2.245, 18, 7], 'false,true,false': [0.0, 9, 0], 'false,false,true,true': [2.449, 18, 9], 'false,false,true,false': [0.961, 12, 1], 'false,false,false,true': [4.565, 158, 24], 'false,false,false,false': [3.394, 65, 14]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'samebib(F, G), venue(G, B)', 'true,true,false': 'haswordtitle(H, C)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,false,true': 'haswordauthor(L, M), haswordtitle(N, M)'}, {'true,true,true,true': [0.0, 0, 17], 'true,true,true,false': [0.0, 6, 0], 'true,true,false,true': [2.714, 28, 10], 'true,true,false,false': [0.913, 1, 5], 'true,false': [0.488, 1, 819], 'false,true': [0.365, 180, 34], 'false,false,true,true': [2.444, 15, 10], 'false,false,true,false': [0.963, 12, 1], 'false,false,false': [0.344, 75, 12]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'haswordauthor(E, F), haswordtitle(G, F)', 'false,true,true': 'haswordtitle(G, D)', 'false,true,false': 'author(H, E), venue(H, B)', 'false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, A)', 'false,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true': [0.488, 1, 851], 'false,true,true,true': [0.822, 2, 1], 'false,true,true,false': [2.469, 16, 10], 'false,true,false,true': [0.868, 3, 1], 'false,true,false,false': [0.023, 10, 0], 'false,false,true,true': [4.278, 110, 22], 'false,false,true,false': [1.684, 52, 3], 'false,false,false,true': [3.99, 81, 20], 'false,false,false,false': [0.028, 8, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'haswordauthor(E, F), haswordtitle(G, F)', 'false,true,false': 'author(H, E), venue(H, B)', 'false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, A)', 'false,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true': [0.487, 1, 851], 'false,true,true': [0.483, 18, 11], 'false,true,false,true': [0.869, 3, 1], 'false,true,false,false': [0.021, 10, 0], 'false,false,true,true': [4.278, 110, 22], 'false,false,true,false': [1.684, 52, 3], 'false,false,false,true': [3.989, 81, 20], 'false,false,false,false': [0.025, 8, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'haswordauthor(E, F), haswordtitle(G, F)', 'false,true,true': 'haswordtitle(G, D)', 'false,true,false': 'author(H, E), venue(H, B)', 'false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, A)', 'false,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true': [0.487, 1, 851], 'false,true,true,true': [0.824, 2, 1], 'false,true,true,false': [2.467, 16, 10], 'false,true,false,true': [0.869, 3, 1], 'false,true,false,false': [0.019, 10, 0], 'false,false,true,true': [4.278, 110, 22], 'false,false,true,false': [1.684, 52, 3], 'false,false,false,true': [3.989, 81, 20], 'false,false,false,false': [0.023, 8, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, C), haswordtitle(F, D)', 'true,true,true': 'author(G, E), venue(G, A)', 'true,true,false': 'haswordtitle(H, C)', 'false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,true': 'haswordauthor(J, K), haswordtitle(L, K)', 'false,true,true': 'haswordtitle(L, I)'}, {'true,true,true,true': [0.0, 4, 0], 'true,true,true,false': [2.534, 9, 24], 'true,true,false,true': [2.204, 32, 6], 'true,true,false,false': [0.981, 1, 7], 'true,false': [0.487, 1, 814], 'false,true,true,true': [0.947, 2, 2], 'false,true,true,false': [2.204, 18, 7], 'false,true,false': [0.051, 9, 0], 'false,false': [0.359, 253, 48]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'haswordauthor(E, F), haswordtitle(G, F)', 'false,true,true': 'haswordtitle(G, D)', 'false,true,false': 'author(H, E), venue(H, B)', 'false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, A)', 'false,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true': [0.486, 1, 851], 'false,true,true,true': [0.809, 2, 1], 'false,true,true,false': [2.452, 16, 10], 'false,true,false,true': [0.869, 3, 1], 'false,true,false,false': [0.028, 10, 0], 'false,false,true,true': [4.276, 110, 22], 'false,false,true,false': [1.684, 52, 3], 'false,false,false,true': [3.976, 81, 20], 'false,false,false,false': [0.039, 8, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,true': 'haswordauthor(E, F), haswordtitle(G, F)', 'false,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'false,false,true': 'haswordauthor(I, J), haswordtitle(K, J)', 'false,false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true': [0.486, 1, 851], 'false,true,true': [0.444, 20, 9], 'false,true,false': [0.056, 9, 0], 'false,false,true,true': [2.431, 18, 9], 'false,false,true,false': [0.906, 12, 1], 'false,false,false,true': [4.533, 158, 24], 'false,false,false,false': [3.378, 65, 14]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D), haswordtitle(F, C)', 'true,true,true': 'author(G, E), venue(G, A)', 'true,true,false': 'haswordtitle(H, C)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,true': 'haswordauthor(J, K), haswordtitle(L, K)', 'false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true,true,true': [0.0, 4, 0], 'true,true,true,false': [2.533, 9, 24], 'true,true,false,true': [2.204, 32, 6], 'true,true,false,false': [0.987, 1, 7], 'true,false': [0.487, 1, 814], 'false,true,true': [0.478, 18, 11], 'false,true,false': [0.244, 13, 1], 'false,false,true': [0.338, 162, 25], 'false,false,false': [0.381, 89, 20]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordtitle(D, C)', 'true': 'title(E, D), venue(E, A)', 'true,true': 'samebib(E, F), venue(F, B)', 'true,true,true': 'haswordvenue(B, C)', 'true,false': 'haswordtitle(D, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(B, C)', 'false': 'haswordvenue(A, I), haswordvenue(B, I)', 'false,true': 'haswordauthor(J, I)'}, {'true,true,true,true': [12.444, 199, 729], 'true,true,true,false': [3.824, 30, 35], 'true,true,false': [0.198, 1, 44], 'true,false,true': [0.404, 116, 34], 'true,false,false,true': [0.935, 1, 7], 'true,false,false,false': [2.703, 28, 9], 'false,true,true': [0.866, 1, 3], 'false,true,false': [0.413, 7, 24], 'false,false': [0.367, 102, 23]}]]
[{'': [0.23914526771230127, 0.13986999765056093], 'false': [0.18074792243767326, 0.13403825564839347], 'false,true': [0.2140309155766945, -9.25185853854297e-18], 'false,true,true': [0.25, 0.2016000000000001], 'false,false': [0.18750000000000014, 0.12439629482832129], 'false,false,true': [0.2222222222222223, 0.07100591715976336], 'false,false,false': [0.11447892766574187, 0.14580996635154567]}, {'': [0.23914526771227196, 0.13837292986550992], 'true': [0.24949877478280244, 0.23859010912701087], 'true,true': [0.19281663516067984, 0.2246900826446274], 'true,true,false': [0.19390581717451516, 0.13888888888888876], 'true,true,true': [-6.269494727295002e-16, -4.625929269271485e-18], 'false': [0.13302169837322156, 0.14719360479524013], 'false,false': [0.20065692142617783, 0.1181668586383816], 'false,false,true': [0.2388486935185915, 0.07135207172795682]}, {'': [0.23774110342862054, 0.13732929538549604], 'false': [0.19185870961604937, 0.12823520499880414], 'false,true': [0.23355216222546143, 0.06670224168763629], 'false,true,true': [0.22550121354457398, 0.23445401672224223], 'false,false': [0.11562942729436079, 0.14866271113828758], 'false,false,false': [0.15762256963194995, 9.704478811208353e-05], 'false,false,true': [0.1386476068094535, 0.05155728904036379], 'false,true,false': [0.18856107269023636, 5.329553011128585e-05]}, {'': [0.23763060232649183, 0.13579871203331945], 'false': [0.18732101795015815, 0.1275288691601122], 'false,true': [0.23336546745005088, 0.0640070643765116], 'false,false': [0.11504505523588306, 0.1480329174383541], 'false,false,false': [0.15758339700648016, 7.832002657421136e-05], 'false,false,true': [0.138644776706138, 0.05155807570107714], 'false,true,false': [0.1886589147218513, 4.402429638269423e-05]}, {'': [0.23754851109622077, 0.13465394229857405], 'false': [0.1839136822666184, 0.1270016747310882], 'false,true': [0.2332280018264125, 0.06189409983373373], 'false,true,true': [0.22622290866160547, 0.23403258827837398], 'false,false': [0.1146095721394531, 0.14756956808218158], 'false,false,false': [0.15754889217781837, 6.43294135683134e-05], 'false,false,true': [0.1386423103663561, 0.05155874684411722], 'false,true,false': [0.18874899382027485, 3.689084455293507e-05]}, {'': [0.2374899019446621, 0.1338138127082621], 'true': [0.23801092343723404, 0.23739739045688502], 'true,true': [0.2237609153604664, 0.18744393384857447], 'true,true,true': [0.0, 0.1946508373189493], 'true,true,false': [0.12787693137221437, 0.12025107311567573], 'false': [0.16660292294091544, 0.12922110047199034], 'false,true': [0.20153496843092047, 0.0002869599342273901], 'false,true,true': [0.22411220771172147, 0.1943612998830381]}, {'': [0.2360508626567831, 0.13314716498074305], 'false': [0.1791690510352442, 0.12617716136749263], 'false,true': [0.22995939545595548, 0.060336708661097735], 'false,true,true': [0.21806231064186762, 0.2313284840463218], 'false,false': [0.11416569624017181, 0.1462916153225711], 'false,false,false': [0.1565137523548351, 0.00018919502912903563], 'false,false,true': [0.13853958528451063, 0.05155930021027511], 'false,true,false': [0.18883259057854124, 7.838091014246013e-05]}, {'': [0.23599601424974007, 0.13254404873192643], 'false': [0.16024819564571702, 0.1287588913146668], 'false,true': [0.19756090407563018, 0.00034435398097733424], 'false,false': [0.16938944907583484, 0.12251710179733827], 'false,false,true': [0.21890416843401428, 0.06315852409164505], 'false,false,false': [0.11288099637976645, 0.14445688959833997]}, {'': [0.23595771727495968, 0.13207843264779448], 'true': [0.2010872102788365, 0.23732414740753896], 'true,true': [0.2037006667942207, 0.16188662220893837], 'true,true,true': [0.0, 0.19444809693718187], 'true,true,false': [0.12787789966432533, 0.12179245902574909], 'false': [0.17600578145240872, 0.12556558875667478], 'false,true': [0.22845739217011965, 0.05933172795432475], 'false,false': [0.1139465575747988, 0.14523401141742287]}, {'': [0.2246215268777018, 0.16765607568400603], 'true': [0.2280315047347434, 0.18389496237861436], 'true,true': [0.17136855602317572, 0.03922598837930501], 'true,false': [0.1632576555060614, 0.21061274948798203], 'true,false,false': [0.10937499999999994, 0.1974628774695599], 'true,true,true': [0.1668770154656988, 0.22498338407892057], 'false': [0.1814338235741504, 0.1348534767926833], 'false,true': [0.1875, 0.17072797179913118]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
0;false,true;haswordauthor(E, F), haswordtitle(G, F).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
1;true,true;author(F, E), venue(F, A).;true;true
1;true,true,true;samebib(F, G), venue(G, B).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
2;false,true;haswordauthor(E, F), haswordtitle(G, F).;true;true
2;false,true,false;author(H, E), venue(H, B).;true;true
2;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
2;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
3;false,true;haswordauthor(E, F), haswordtitle(G, F).;true;true
3;false,true,false;author(H, E), venue(H, B).;true;true
3;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
4;false,true;haswordauthor(E, F), haswordtitle(G, F).;true;true
4;false,true,false;author(H, E), venue(H, B).;true;true
4;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
4;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
5;true,true;haswordtitle(F, C), haswordtitle(F, D).;true;true
5;true,true,true;author(G, E), venue(G, A).;true;true
5;false;haswordvenue(B, I), haswordauthor(J, I).;true;true
5;false,true;haswordauthor(J, K), haswordtitle(L, K).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
6;false,true;haswordauthor(E, F), haswordtitle(G, F).;true;true
6;false,true,false;author(H, E), venue(H, B).;true;true
6;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
6;false,false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
7;false,true;haswordauthor(E, F), haswordtitle(G, F).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
8;true,true;haswordtitle(F, D), haswordtitle(F, C).;true;true
8;true,true,true;author(G, E), venue(G, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.25396288858787935;  // std dev = 0.489, 2,150.000 (wgt'ed) examples reached here.  /* #neg=1,299 #pos=851 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.13814893509951237;  // std dev = 2.245, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(I, J), haswordtitle(K, J) )
%   | | | then return 0.1914822684328457;  // std dev = 2.449, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
%   | | | else return -0.06492798797741087;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return -0.009982933032356133;  // std dev = 4.565, 182.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=24 */
%   | | | else return 0.0353641249729301;  // std dev = 3.394, 79.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=14 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22015458392416612;  // std dev = 0.489, 2,150.000 (wgt'ed) examples reached here.  /* #neg=1,299 #pos=851 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return -0.10200155947576263;  // std dev = 1.690, 68.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=3 */
%   | | | else return 0.052273423202084834;  // std dev = 4.180, 112.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=22 */
%   | | else return 0.12130286656222002;  // std dev = 0.443, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | | then return 0.23222691701371181;  // std dev = 2.444, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
%   | | | else return -0.059159225221206674;  // std dev = 0.963, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.010378898172288643;  // std dev = 3.178, 79.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=12 */
%   | | | else return -0.14694067193278715;  // std dev = 0.028, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1859726944199641;  // std dev = 0.489, 2,150.000 (wgt'ed) examples reached here.  /* #neg=1,299 #pos=851 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.2917901844570271;  // std dev = 0.994, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.12278481053432973;  // std dev = 2.225, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
%   | | else return -0.1289480065763798;  // std dev = 0.020, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(I, J), haswordtitle(K, J) )
%   | | | then return 0.1363367445466333;  // std dev = 2.434, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
%   | | | else return -0.05147656807861204;  // std dev = 0.962, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return -0.011461296216228944;  // std dev = 4.545, 182.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=24 */
%   | | | else return 0.032232621637103456;  // std dev = 3.368, 79.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=14 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D), haswordtitle(F, C) )
%   | | then if ( haswordauthor(G, C) )
%   | | | then return 0.7576630838618251;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.36372368992243115;  // std dev = 2.807, 33.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=20 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return -0.08444217929606967;  // std dev = 2.248, 38.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=6 */
%   | | | else return 0.6326630838618251;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.15147053427305512;  // std dev = 0.489, 2,067.000 (wgt'ed) examples reached here.  /* #neg=1,253 #pos=814 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, I) )
%   | | | then return 0.14976645903211624;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.15985861795273873;  // std dev = 2.459, 26.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=10 */
%   | | else return -0.054568748008382864;  // std dev = 0.259, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | else return 0.0054149314476896575;  // std dev = 0.356, 296.000 (wgt'ed) examples reached here.  /* #neg=251 #pos=45 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6404180487146561;  // std dev = 0.908, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.26235986692262736;  // std dev = 0.136, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return -0.03399988683289704;  // std dev = 2.666, 44.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=10 */
%   | | | else return 0.48130368390162875;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.12258699485604711;  // std dev = 0.489, 2,067.000 (wgt'ed) examples reached here.  /* #neg=1,253 #pos=814 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | then return 0.13036025334630164;  // std dev = 0.481, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | | else return -0.04868872567401145;  // std dev = 0.259, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return -0.011149557740282602;  // std dev = 0.339, 187.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=25 */
%   | | else return 0.031993964817815225;  // std dev = 0.382, 109.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=20 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6570911186299175;  // std dev = 0.386, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.2961180835814176;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return -0.030720338755447656;  // std dev = 2.667, 38.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
%   | | | else return 0.3989960552511176;  // std dev = 1.005, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.09663458037795754;  // std dev = 0.486, 2,083.000 (wgt'ed) examples reached here.  /* #neg=1,264 #pos=819 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, I) )
%   | | | then return 0.2248316644494569;  // std dev = 0.964, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.10009284328711963;  // std dev = 2.207, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
%   | | else return -0.11901438642647467;  // std dev = 0.019, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0.004378966035424356;  // std dev = 0.360, 301.000 (wgt'ed) examples reached here.  /* #neg=253 #pos=48 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0774951891932581;  // std dev = 0.484, 2,150.000 (wgt'ed) examples reached here.  /* #neg=1,299 #pos=851 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.09747220755424364;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.10254088449147807;  // std dev = 2.445, 26.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=10 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return 0.13551020497806004;  // std dev = 0.869, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.1172239844642748;  // std dev = 0.053, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.01986772450950713;  // std dev = 4.264, 132.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=22 */
%   | | | else return -0.08568109765835438;  // std dev = 1.676, 55.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=3 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.038697988494684483;  // std dev = 3.941, 101.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=20 */
%   | | | else return -0.14106058622681694;  // std dev = 0.070, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.060521445161209324;  // std dev = 0.484, 2,150.000 (wgt'ed) examples reached here.  /* #neg=1,299 #pos=851 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.16895005883118397;  // std dev = 0.953, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.08139437738894294;  // std dev = 2.191, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
%   | | else return -0.1092622992050662;  // std dev = 0.031, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(I, J), haswordtitle(K, J) )
%   | | | then return 0.038792193944931413;  // std dev = 2.428, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
%   | | | else return -0.03233418103315632;  // std dev = 0.945, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return -0.008575566544188047;  // std dev = 4.534, 182.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=24 */
%   | | | else return 0.019004735214039527;  // std dev = 3.361, 79.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=14 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C), haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.35996067849273256;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.2675033373330313;  // std dev = 2.168, 33.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=24 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return -0.1127009848965244;  // std dev = 2.107, 38.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=6 */
%   | | | else return 0.2654973168490288;  // std dev = 0.962, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.04631563242020505;  // std dev = 0.487, 2,067.000 (wgt'ed) examples reached here.  /* #neg=1,253 #pos=814 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then return 0.0012698825780296853;  // std dev = 0.355, 223.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=36 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return 0.03867870527370142;  // std dev = 3.886, 96.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=20 */
%   | | | else return -0.04766650011043476;  // std dev = 0.941, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return -0.15853917460255448;  // std dev = 0.072, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then if ( haswordvenue(B, C) )
%   | | | then return 0.4209517708634082;  // std dev = 12.452, 928.000 (wgt'ed) examples reached here.  /* #neg=199 #pos=729 */
%   | | | else return 0.310969216744063;  // std dev = 3.806, 65.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=35 */
%   | | else return -0.29830426184989856;  // std dev = 0.197, 1,141.000 (wgt'ed) examples reached here.  /* #neg=1,097 #pos=44 */
%   | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | then return -0.08044092996937585;  // std dev = 0.404, 150.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=34 */
%   | | else if ( haswordtitle(D, I), haswordvenue(B, I) )
%   | | | then return 0.1848328144614499;  // std dev = 2.970, 41.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=16 */
%   | | | else return -0.2798632947668482;  // std dev = 0.161, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( haswordvenue(A, J), haswordvenue(B, J) )
%   | then if ( haswordauthor(K, J) )
%   | | then return 0.05673857593279291;  // std dev = 0.857, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.403396542334223;  // std dev = 0.414, 31.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=24 */
%   | else return 0.011875483787616638;  // std dev = 0.367, 125.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=23 */


Results
   AUC ROC   = 0.882876
   AUC PR    = 0.807593
   CLL	      = -0.557011
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.025435
   F1        = 0.049608


Total learning time: 1765.5727660655975 seconds
Total inference time: 4.237 seconds
AUC ROC: 0.882876


Results scoring model
   AUC ROC   = 0.874458
   AUC PR    = 0.778753
   CLL	      = -0.530804
   Precision = 0.979167 at threshold = 0.5
   Recall    = 0.051762
   F1        = 0.098326


Total scoring time: 23.974 seconds
Refined model CLL: -0.530804


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.882876
   AUC PR    = 0.807593
   CLL	      = -0.557011
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.025435
   F1        = 0.049608


Total learning time: 3161.5083390235905 seconds
Total inference time: 4.237 seconds
AUC ROC: 0.882876
Total revision time: 3161.5083390235905
Best scored revision CLL: -0.530804


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 21:46:53
{'AUC ROC': 0.882876, 'AUC PR': 0.807593, 'CLL': -0.557011, 'Precision': [1.0, 0.5], 'Recall': 0.025435, 'F1': 0.049608, 'Learning time': 3161.5083390235905, 'Inference time': 4.237, 'parameter_0.4': {'AUC ROC': 0.880033, 'AUC PR': 0.795544, 'CLL': -0.558848, 'Precision': [1.0, 0.5], 'Recall': 0.014726, 'F1': 0.029024, 'Learning time': 1353.0855729579926, 'Inference time': 4.1}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D), haswordtitle(F, C) )
%   | | then if ( haswordauthor(G, C) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.4642095411601179;  // std dev = 2.807, 33.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=20 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return 0.01604367194161758;  // std dev = 2.248, 38.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=6 */
%   | | | else return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.4981489350995123;  // std dev = 2.400, 25.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=16 */
%   | | | else return 0.0803711573217346;  // std dev = 2.160, 27.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=6 */
%   | | else return 0.2512010442806487;  // std dev = 0.488, 2,015.000 (wgt'ed) examples reached here.  /* #neg=1,223 #pos=792 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.13721870254137283;  // std dev = 0.449, 43.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=12 */
%   | else return 0.010175962126538958;  // std dev = 0.359, 296.000 (wgt'ed) examples reached here.  /* #neg=251 #pos=45 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return -0.2138536505984336;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.5478135265921069;  // std dev = 2.099, 26.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return 0.04728537403439928;  // std dev = 2.201, 30.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=6 */
%   | | | else return 0.6308785881776149;  // std dev = 0.965, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.21779888704889985;  // std dev = 0.488, 2,083.000 (wgt'ed) examples reached here.  /* #neg=1,264 #pos=819 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(M, I) )
%   | | | then return 0.1739443392653692;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.22522639054742075;  // std dev = 2.481, 26.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=10 */
%   | | else return -0.0879604226393927;  // std dev = 0.258, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | else return 0.008932728721584808;  // std dev = 0.359, 296.000 (wgt'ed) examples reached here.  /* #neg=251 #pos=45 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C), haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.24638401637358304;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.4628532937897116;  // std dev = 2.500, 33.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=24 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return -0.013823523561124151;  // std dev = 2.266, 38.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=6 */
%   | | | else return 0.5171999385420666;  // std dev = 0.980, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.18431612838422326;  // std dev = 0.488, 2,067.000 (wgt'ed) examples reached here.  /* #neg=1,253 #pos=814 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | then return 0.18819585810701384;  // std dev = 0.485, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
%   | | else return -0.07652509844170748;  // std dev = 0.258, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return -0.010503270785119187;  // std dev = 0.340, 187.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=25 */
%   | | else return 0.03929312817479805;  // std dev = 0.387, 109.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6130185275044894;  // std dev = 0.896, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.2392119363773549;  // std dev = 0.265, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return 0.003991922810527982;  // std dev = 2.539, 44.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=10 */
%   | | | else return 0.3807781614452349;  // std dev = 0.981, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.15219555196136977;  // std dev = 0.487, 2,067.000 (wgt'ed) examples reached here.  /* #neg=1,253 #pos=814 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(M, I) )
%   | | | then return 0.11927619269868057;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.16180427435006767;  // std dev = 2.481, 26.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=10 */
%   | | else return -0.06713562347868633;  // std dev = 0.258, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | else return 0.006839062737069702;  // std dev = 0.359, 296.000 (wgt'ed) examples reached here.  /* #neg=251 #pos=45 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1233993149680941;  // std dev = 0.484, 2,150.000 (wgt'ed) examples reached here.  /* #neg=1,299 #pos=851 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.40138966203448284;  // std dev = 3.712, 58.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=33 */
%   | | | else return -0.15268959481113947;  // std dev = 0.332, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | else if ( haswordtitle(E, H), haswordauthor(I, H) )
%   | | | then return -0.15171764375325256;  // std dev = 0.136, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.0499915309964563;  // std dev = 1.649, 32.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=3 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, A) )
%   | | | then return 0.05678663608698781;  // std dev = 3.967, 96.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=20 */
%   | | | else return -0.024979848101267733;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return -0.16379028708632745;  // std dev = 0.139, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09844296169005347;  // std dev = 0.484, 2,150.000 (wgt'ed) examples reached here.  /* #neg=1,299 #pos=851 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.30317765493266446;  // std dev = 0.864, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.12599140964091526;  // std dev = 2.198, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
%   | | else return -0.15435397778339222;  // std dev = 0.026, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(I, J), haswordtitle(K, J) )
%   | | | then return 0.05978202197201302;  // std dev = 2.231, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
%   | | | else return -0.049739960877886055;  // std dev = 0.904, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return -0.01336545793771877;  // std dev = 4.328, 182.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=24 */
%   | | | else return 0.022499723771036255;  // std dev = 3.387, 79.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=14 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07761896751866477;  // std dev = 0.484, 2,150.000 (wgt'ed) examples reached here.  /* #neg=1,299 #pos=851 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then return 0.12888500168778927;  // std dev = 0.439, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
%   | | else return -0.13527224548930505;  // std dev = 0.023, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return -0.03286948989935765;  // std dev = 3.964, 152.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=18 */
%   | | | else return 0.13641111052739852;  // std dev = 2.372, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.019385146893358865;  // std dev = 3.715, 110.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=21 */
%   | | | else return -0.15481294672403867;  // std dev = 0.130, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then return 0.1972687331765872;  // std dev = 0.343, 32.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=21 */
%   | | else if ( haswordtitle(G, C) )
%   | | | then return -0.0498450213681245;  // std dev = 2.525, 44.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=10 */
%   | | | else return 0.21637603764385757;  // std dev = 0.977, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.06037609490049154;  // std dev = 0.487, 2,067.000 (wgt'ed) examples reached here.  /* #neg=1,253 #pos=814 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( haswordauthor(I, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, H) )
%   | | | then return 0.08045923107032332;  // std dev = 0.765, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.08858951744392721;  // std dev = 2.228, 26.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=10 */
%   | | else return -0.051660482977151735;  // std dev = 0.243, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return -0.013544461292228109;  // std dev = 0.320, 187.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=25 */
%   | | else return 0.026096840982038322;  // std dev = 0.383, 109.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=20 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04704720900869067;  // std dev = 0.483, 2,150.000 (wgt'ed) examples reached here.  /* #neg=1,299 #pos=851 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.22650932045239675;  // std dev = 0.823, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.08625671081559873;  // std dev = 2.184, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
%   | | else return -0.12300794646164032;  // std dev = 0.021, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.021418018980855866;  // std dev = 4.553, 160.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=31 */
%   | | | else return -0.07896182809044766;  // std dev = 1.695, 57.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=3 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.02452631755480187;  // std dev = 3.386, 76.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=14 */
%   | | | else return -0.14077055878043757;  // std dev = 0.134, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then if ( haswordvenue(B, C) )
%   | | | then return 0.42075925670902414;  // std dev = 12.453, 928.000 (wgt'ed) examples reached here.  /* #neg=199 #pos=729 */
%   | | | else return 0.314014897398867;  // std dev = 3.822, 65.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=35 */
%   | | else return -0.2971228537538824;  // std dev = 0.198, 1,141.000 (wgt'ed) examples reached here.  /* #neg=1,097 #pos=44 */
%   | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, B) )
%   | | | then return -0.13245403482671583;  // std dev = 2.627, 51.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=9 */
%   | | | else return -0.05257761448814463;  // std dev = 4.171, 99.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=25 */
%   | | else if ( haswordtitle(D, J), haswordvenue(B, J) )
%   | | | then return 0.17664591567418267;  // std dev = 2.807, 41.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=16 */
%   | | | else return -0.2721084607551617;  // std dev = 0.171, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( haswordvenue(A, K), haswordvenue(B, K) )
%   | then return 0.35824171796234416;  // std dev = 0.435, 35.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=27 */
%   | else return 0.005787135356377664;  // std dev = 0.342, 125.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=23 */


Results
   AUC ROC   = 0.88079
   AUC PR    = 0.800979
   CLL	      = -0.5566
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.016064
   F1        = 0.031621


Total learning time: 1643.655399799347 seconds
Total inference time: 4.493 seconds
AUC ROC: 0.88079


Dataset: 3_imdb_cora, Fold: 4, Type: Scratch (RDN-B), Time: 22:14:22
{'AUC ROC': 0.88079, 'AUC PR': 0.800979, 'CLL': -0.5566, 'Precision': [1.0, 0.5], 'Recall': 0.016064, 'F1': 0.031621, 'Learning time': 1643.655399799347, 'Inference time': 4.493}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.25137970433027645;  // std dev = 0.488, 3,250.000 (wgt'ed) examples reached here.  /* #neg=1,972 #pos=1,278 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then return 0.2152917922423695;  // std dev = 0.479, 42.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | | then return 0.15226658215833588;  // std dev = 2.657, 34.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=10 */
%   | | | else return -0.0168510649004878;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return -0.0040557893099372406;  // std dev = 5.493, 254.000 (wgt'ed) examples reached here.  /* #neg=219 #pos=35 */
%   | | | else return 0.02343819129785936;  // std dev = 4.086, 121.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21794513955923855;  // std dev = 0.488, 3,250.000 (wgt'ed) examples reached here.  /* #neg=1,972 #pos=1,278 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then return 0.18701313901080782;  // std dev = 0.479, 42.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return 0.308741135785635;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | | then return 0.13270212707734708;  // std dev = 2.657, 34.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=10 */
%   | | | else return -0.01481214937855653;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.012178498016265856;  // std dev = 5.812, 258.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=40 */
%   | | | else return -0.013325771965858626;  // std dev = 3.617, 117.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=15 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18418306082518007;  // std dev = 0.488, 3,250.000 (wgt'ed) examples reached here.  /* #neg=1,972 #pos=1,278 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.3018178760084481;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.14392313916634256;  // std dev = 2.924, 38.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=13 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return 0.2564123687585864;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.11231637819360636;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | | then return 0.11392329431478498;  // std dev = 2.657, 34.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=10 */
%   | | | else return -0.013040256218347375;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return -0.0036951833139695555;  // std dev = 5.493, 254.000 (wgt'ed) examples reached here.  /* #neg=219 #pos=35 */
%   | | | else return 0.019203526762083364;  // std dev = 4.085, 121.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D), haswordtitle(F, C) )
%   | | then if ( haswordauthor(G, C) )
%   | | | then return 0.7588696006687956;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.2815968733960682;  // std dev = 3.313, 44.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=23 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return -0.09298225118305638;  // std dev = 2.611, 54.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=8 */
%   | | | else return 0.5088696006687955;  // std dev = 1.500, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | else return 0.15217103607552943;  // std dev = 0.488, 3,135.000 (wgt'ed) examples reached here.  /* #neg=1,902 #pos=1,233 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.38725387787410254;  // std dev = 1.181, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( haswordauthor(J, L), haswordtitle(M, L) )
%   | | | then return 0.10152885232190154;  // std dev = 2.969, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | | | else return -0.1015963294878363;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0.010125566963377613;  // std dev = 0.363, 425.000 (wgt'ed) examples reached here.  /* #neg=358 #pos=67 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6248346775494666;  // std dev = 1.318, 26.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=24 */
%   | | | else return -0.25144878881218546;  // std dev = 0.139, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return -0.04439054238654911;  // std dev = 3.086, 62.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=13 */
%   | | | else return 0.38148855198080034;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | else return 0.12324200249489344;  // std dev = 0.488, 3,135.000 (wgt'ed) examples reached here.  /* #neg=1,902 #pos=1,233 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.30334921006218285;  // std dev = 1.185, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( haswordauthor(J, L), haswordtitle(M, L) )
%   | | | then return 0.0834216636104094;  // std dev = 2.969, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | | | else return -0.09269127618926096;  // std dev = 5.27e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0.008850014450618664;  // std dev = 0.363, 425.000 (wgt'ed) examples reached here.  /* #neg=358 #pos=67 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0979226483152165;  // std dev = 0.486, 3,250.000 (wgt'ed) examples reached here.  /* #neg=1,972 #pos=1,278 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then return 0.371574521757928;  // std dev = 0.559, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordauthor(E, G), haswordtitle(H, G) )
%   | | | then return 0.06781356845524014;  // std dev = 2.969, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | | | else return -0.05229110914734933;  // std dev = 1.026, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | | then return 0.09345090416336367;  // std dev = 2.657, 34.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=10 */
%   | | | else return -0.013747990122334894;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.007484524498522674;  // std dev = 5.811, 258.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=40 */
%   | | | else return -0.013710168998754593;  // std dev = 3.618, 117.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=15 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6173963949413195;  // std dev = 1.025, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return -0.30058496005736307;  // std dev = 0.117, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return -0.0024703810521099034;  // std dev = 3.577, 61.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=19 */
%   | | | else return 0.35874351630987356;  // std dev = 1.331, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | else return 0.07477751529832581;  // std dev = 0.486, 3,143.000 (wgt'ed) examples reached here.  /* #neg=1,916 #pos=1,227 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then return 0.005814780279017635;  // std dev = 0.361, 306.000 (wgt'ed) examples reached here.  /* #neg=257 #pos=49 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return 0.030052779300389736;  // std dev = 4.939, 158.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=33 */
%   | | | else return 0.16184598887282;  // std dev = 1.193, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return -0.17246912119905292;  // std dev = 0.062, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06018177452787065;  // std dev = 0.485, 3,250.000 (wgt'ed) examples reached here.  /* #neg=1,972 #pos=1,278 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4342387658997211;  // std dev = 1.053, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return -0.14749347157061662;  // std dev = 0.098, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordauthor(E, H), haswordtitle(I, H) )
%   | | | then return 0.09376789652634807;  // std dev = 2.675, 35.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=11 */
%   | | | else return -0.1543768324393494;  // std dev = 0.159, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | | then return -0.022069927206009844;  // std dev = 4.833, 215.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=27 */
%   | | | else return 0.05829807169620677;  // std dev = 2.675, 44.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=9 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.030747435915147742;  // std dev = 5.020, 159.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=34 */
%   | | | else return -0.13661841426297563;  // std dev = 0.172, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D), haswordtitle(F, C) )
%   | | then if ( author(G, E), title(G, F) )
%   | | | then return 0.15861538857731053;  // std dev = 2.461, 37.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=22 */
%   | | | else return 0.13936626340612301;  // std dev = 1.654, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return -0.1121194395615882;  // std dev = 2.486, 54.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=8 */
%   | | | else return 0.20454933239813433;  // std dev = 1.501, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | else return 0.04718193802115601;  // std dev = 0.487, 3,135.000 (wgt'ed) examples reached here.  /* #neg=1,902 #pos=1,233 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( haswordauthor(J, K), haswordvenue(B, K) )
%   | | then return -0.16429802314474962;  // std dev = 0.135, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( author(L, J), venue(L, B) )
%   | | | then return 0.2167855829050666;  // std dev = 1.220, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.034088061595077254;  // std dev = 2.728, 45.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | else return 0.002425307460426232;  // std dev = 0.362, 428.000 (wgt'ed) examples reached here.  /* #neg=358 #pos=70 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then if ( haswordvenue(B, C) )
%   | | | then return 0.4209734717252613;  // std dev = 15.506, 1,418.000 (wgt'ed) examples reached here.  /* #neg=309 #pos=1,109 */
%   | | | else return 0.35630711073197;  // std dev = 4.715, 98.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=59 */
%   | | else return -0.30374393150755424;  // std dev = 0.184, 1,723.000 (wgt'ed) examples reached here.  /* #neg=1,666 #pos=57 */
%   | else if ( title(G, D), venue(G, B) )
%   | | then return -0.13926329612929844;  // std dev = 0.397, 72.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=14 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.05801245575144045;  // std dev = 5.190, 111.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=46 */
%   | | | else return -0.0339740741460474;  // std dev = 3.327, 92.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=12 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, B) )
%   | | then return 0.0760992754988097;  // std dev = 0.408, 173.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=47 */
%   | | else return -0.21180949233491234;  // std dev = 0.102, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.21060561310282752;  // std dev = 0.389, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */


Results
   AUC ROC   = 0.882111
   AUC PR    = 0.804329
   CLL	      = -0.557049
   Precision = 0.95 at threshold = 0.5
   Recall    = 0.025435
   F1        = 0.049544


Total learning time: 1939.2102649211884 seconds
Total inference time: 4.137 seconds
AUC ROC: 0.882111


Results scoring model
   AUC ROC   = 0.871165
   AUC PR    = 0.768921
   CLL	      = -0.533409
   Precision = 0.923077 at threshold = 0.5
   Recall    = 0.044053
   F1        = 0.084093


Total scoring time: 24.413 seconds
Parameter learned model CLL: -0.533409


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,true': 'haswordauthor(E, F), haswordtitle(G, F)', 'false,true,false': 'author(H, E), venue(H, A)', 'false,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false,true': 'haswordauthor(J, K), haswordtitle(L, K)', 'false,false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true': [0.488, 1, 1], 'false,true,true': [0.479, 27, 15], 'false,true,false,true': [1.0, 2, 2], 'false,true,false,false': [0.0, 13, 0], 'false,false,true,true': [2.657, 24, 10], 'false,false,true,false': [1.323, 14, 2], 'false,false,false,true': [5.493, 219, 35], 'false,false,false,false': [4.086, 101, 20]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,true': 'haswordauthor(E, F), haswordtitle(G, F)', 'false,true,false': 'author(H, E), venue(H, A)', 'false,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false,true': 'haswordauthor(J, K), haswordtitle(L, K)', 'false,false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true': [0.488, 1, 1], 'false,true,true': [0.479, 27, 15], 'false,true,false,true': [1.0, 2, 2], 'false,true,false,false': [7.45e-09, 13, 0], 'false,false,true,true': [2.657, 24, 10], 'false,false,true,false': [1.323, 14, 2], 'false,false,false,true': [5.812, 218, 40], 'false,false,false,false': [3.617, 102, 15]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,true': 'haswordauthor(E, F), haswordtitle(G, F)', 'false,true,true': 'haswordtitle(G, D)', 'false,true,false': 'author(H, E), venue(H, A)', 'false,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false,true': 'haswordauthor(J, K), haswordtitle(L, K)', 'false,false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true': [0.488, 1, 1], 'false,true,true,true': [1.0, 2, 2], 'false,true,true,false': [2.924, 25, 13], 'false,true,false,true': [1.0, 2, 2], 'false,true,false,false': [1.05e-08, 13, 0], 'false,false,true,true': [2.657, 24, 10], 'false,false,true,false': [1.323, 14, 2], 'false,false,false,true': [5.493, 219, 35], 'false,false,false,false': [4.085, 101, 20]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D), haswordtitle(F, C)', 'true,true,true': 'haswordauthor(G, C)', 'true,true,false': 'haswordtitle(H, C)', 'false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, A)', 'false,true,false': 'haswordauthor(J, L), haswordtitle(M, L)'}, {'true,true,true,true': [0.0, 0, 5], 'true,true,true,false': [3.313, 21, 23], 'true,true,false,true': [2.611, 46, 8], 'true,true,false,false': [1.5, 3, 9], 'true,false': [0.488, 1, 1], 'false,true,true': [1.181, 2, 4], 'false,true,false,true': [2.969, 27, 13], 'false,true,false,false': [0.0, 13, 0], 'false,false': [0.363, 358, 67]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'samebib(F, G), venue(G, A)', 'true,true,false': 'haswordtitle(H, C)', 'false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, A)', 'false,true,false': 'haswordauthor(J, L), haswordtitle(M, L)'}, {'true,true,true,true': [1.318, 2, 24], 'true,true,true,false': [0.139, 16, 0], 'true,true,false,true': [3.086, 49, 13], 'true,true,false,false': [1.477, 3, 8], 'true,false': [0.488, 1, 1], 'false,true,true': [1.185, 2, 4], 'false,true,false,true': [2.969, 27, 13], 'false,true,false,false': [5.27e-09, 13, 0], 'false,false': [0.363, 358, 67]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, B)', 'false,true,false': 'haswordauthor(E, G), haswordtitle(H, G)', 'false,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false,true': 'haswordauthor(J, K), haswordtitle(L, K)', 'false,false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true': [0.486, 1, 1], 'false,true,true': [0.559, 1, 2], 'false,true,false,true': [2.969, 27, 13], 'false,true,false,false': [1.026, 14, 2], 'false,false,true,true': [2.657, 24, 10], 'false,false,true,false': [1.323, 14, 2], 'false,false,false,true': [5.811, 218, 40], 'false,false,false,false': [3.618, 102, 15]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'samebib(F, G), venue(G, B)', 'true,true,false': 'haswordtitle(H, C)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false,true': 'title(M, L), venue(M, B)'}, {'true,true,true,true': [1.025, 1, 25], 'true,true,true,false': [0.117, 11, 0], 'true,true,false,true': [3.577, 42, 19], 'true,true,false,false': [1.331, 2, 7], 'true,false': [0.486, 1, 1], 'false,true': [0.361, 257, 49], 'false,false,true,true': [4.939, 125, 33], 'false,false,true,false': [1.193, 4, 2], 'false,false,false': [0.062, 14, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,true,false': 'haswordauthor(E, H), haswordtitle(I, H)', 'false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,false,true': 'haswordtitle(K, L), haswordauthor(M, L)', 'false,false,false': 'haswordvenue(A, N), haswordtitle(P, N)'}, {'true': [0.485, 1, 1], 'false,true,true,true': [1.053, 2, 3], 'false,true,true,false': [0.098, 3, 0], 'false,true,false,true': [2.675, 24, 11], 'false,true,false,false': [0.159, 13, 0], 'false,false,true,true': [4.833, 188, 27], 'false,false,true,false': [2.675, 35, 9], 'false,false,false,true': [5.02, 125, 34], 'false,false,false,false': [0.172, 10, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D), haswordtitle(F, C)', 'true,true,true': 'author(G, E), title(G, F)', 'true,true,false': 'haswordtitle(H, C)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,true': 'haswordauthor(J, K), haswordvenue(B, K)', 'false,true,false': 'author(L, J), venue(L, B)'}, {'true,true,true,true': [2.461, 15, 22], 'true,true,true,false': [1.654, 6, 6], 'true,true,false,true': [2.486, 46, 8], 'true,true,false,false': [1.501, 3, 9], 'true,false': [0.487, 1, 1], 'false,true,true': [0.135, 4, 0], 'false,true,false,true': [1.22, 4, 3], 'false,true,false,false': [2.728, 34, 11], 'false,false': [0.362, 358, 70]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordtitle(D, C)', 'true': 'title(E, D), venue(E, A)', 'true,true': 'samebib(E, F), venue(F, B)', 'true,true,true': 'haswordvenue(B, C)', 'true,false': 'title(G, D), venue(G, B)', 'true,false,false': 'haswordvenue(B, C)', 'false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false,true': 'title(J, I), venue(J, B)'}, {'true,true,true,true': [15.506, 309, 1], 'true,true,true,false': [4.715, 39, 59], 'true,true,false': [0.184, 1, 57], 'true,false,true': [0.397, 58, 14], 'true,false,false,true': [5.19, 65, 46], 'true,false,false,false': [3.327, 80, 12], 'false,true,true': [0.408, 126, 47], 'false,true,false': [0.102, 12, 0], 'false,false': [0.389, 17, 18]}]]
[{'': [0.23860033136097236, 0.14343282562666568], 'false': [0.2051134731399018, 0.132794463667821], 'false,true': [0.22959183673469336, 0.10380622837370246], 'false,false': [0.18239999999999948, 0.12515555555555657], 'false,false,true': [0.20761245674740494, 0.10937500000000004], 'false,false,false': [0.1188077376154763, 0.13796871798374427], 'false,true,false': [0.25, -1.2810265668751807e-17]}, {'': [0.23860033136096542, 0.1418761572304347], 'false': [0.1992320453503772, 0.13236726622618428], 'false,true': [0.22959183673469358, 0.09274359482376075], 'false,false': [0.18091154706684281, 0.12511753638491294], 'false,false,true': [0.20761245674740472, 0.10937499999999994], 'false,false,false': [0.13094784321415864, 0.11181344051351441], 'false,true,false': [0.25, 4.270088556250602e-18]}, {'': [0.2386003313609305, 0.1405630930405063], 'false': [0.19441966034627575, 0.13201141552208354], 'false,true': [0.22959183673469416, 0.08328708034292247], 'false,true,true': [0.24999999999999994, 0.22506925207756265], 'false,false': [0.17968412670071715, 0.12508512843743524], 'false,false,true': [0.20761245674740514, 0.109375], 'false,false,false': [0.11880289899036324, 0.137917457992507], 'false,true,false': [0.25, 8.540177112501205e-18]}, {'': [0.2386003313609735, 0.13946334100544241], 'true': [0.23818525519848727, 0.23861541631375588], 'true,true': [0.24489795918367313, 0.1912304866850318], 'true,true,true': [0.0, 0.2494834710743799], 'true,true,false': [0.12620027434842285, 0.18750000000000025], 'false': [0.1901500165748103, 0.1317282185774254], 'false,true': [0.2322730184608385, 0.17393128162956895], 'false,true,false': [0.2203386101722334, -2.135044278125301e-18]}, {'': [0.2377799911707875, 0.1385410012571378], 'true': [0.21498688937550106, 0.23861541631371128], 'true,true': [0.22287919921942156, 0.18357875248119937], 'true,true,true': [0.06676935160158223, 0.0012079266248727627], 'true,true,false': [0.15362838193559916, 0.1983471074380165], 'false': [0.1846890663032179, 0.13172261220761924], 'false,true': [0.23391859754599098, 0.17207508498967203], 'false,true,false': [0.22039184651049548, 2.135044278125301e-18]}, {'': [0.23641765779264745, 0.13790955137410235], 'false': [0.1808911111343163, 0.13171771817873695], 'false,true': [0.10431451680257946, 0.17918177932077814], 'false,true,false': [0.22043463427151036, 0.06574597509964611], 'false,false': [0.17867704338712564, 0.12505694172110773], 'false,false,true': [0.20761245674740464, 0.10937499999999994], 'false,false,false': [0.13090486153782727, 0.11185246884961494]}, {'': [0.23636157891676107, 0.1372218505530841], 'true': [0.2369595583675624, 0.236165249370282], 'true,true': [0.20482367883846023, 0.22271793245785076], 'true,true,false': [0.20974397961911903, 0.19695244086252311], 'true,true,true': [0.040425112744527494, 0.0012417301862525099], 'false': [0.13029414121648022, 0.14902847767377897], 'false,false': [0.15804170934636755, 0.00383488052137496], 'false,false,true': [0.15440473330371693, 0.2370814293996301]}, {'': [0.2350336803409539, 0.13682359381023035], 'false': [0.17432233963113525, 0.13162214445703357], 'false,true': [0.21912062790678105, 0.16172445275603073], 'false,true,true': [0.22176288673520075, 0.0032091156225948166], 'false,true,false': [0.20439537231641358, 0.0019421822030383058], 'false,false': [0.11873394125292869, 0.15085576991060734], 'false,false,false': [0.15849979322753557, 0.002961946383699643], 'false,false,true': [0.10864836937682514, 0.1626539821163038]}, {'': [0.2349928904020744, 0.13551732563370555], 'true': [0.16903501286415315, 0.2374065006544163], 'true,true': [0.17954649320338897, 0.1427179155112754], 'true,true,true': [0.16370957394529997, 0.22809720718110948], 'true,true,false': [0.11448451555227573, 0.1877216698531097], 'false': [0.16668834058424659, 0.13125068854300104], 'false,true': [0.004528279826215741, 0.17561075767599948], 'false,true,false': [0.21275353734096183, 0.16533974791092085]}, {'': [0.2254378987728479, 0.16286365427341254], 'true': [0.228544478396808, 0.18575670616333204], 'true,true': [0.17351636651749341, 0.03396451561450418], 'true,false': [0.15783970495187216, 0.1893203651378589], 'true,false,false': [0.2426751075399714, 0.12031996516091971], 'true,true,true': [0.16956227949050465, 0.2268181701327786], 'false': [0.16131334207169318, 0.1513265895270517], 'false,true': [0.16640037445619452, 0.010460576526517293]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
0;false,true;haswordauthor(E, F), haswordtitle(G, F).;true;true
0;false,true,false;author(H, E), venue(H, A).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
1;false,true;haswordauthor(E, F), haswordtitle(G, F).;true;true
1;false,true,false;author(H, E), venue(H, A).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
2;false,true;haswordauthor(E, F), haswordtitle(G, F).;true;true
2;false,true,false;author(H, E), venue(H, A).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
3;true,true;haswordtitle(F, D), haswordtitle(F, C).;true;true
3;true,true,true;haswordauthor(G, C).;true;true
3;false;haswordvenue(B, I), haswordauthor(J, I).;true;true
3;false,true;author(K, J), venue(K, A).;true;true
3;false,true,false;haswordauthor(J, L), haswordtitle(M, L).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
4;true,true;author(F, E), venue(F, B).;true;true
4;true,true,true;samebib(F, G), venue(G, A).;true;true
4;false;haswordvenue(B, I), haswordauthor(J, I).;true;true
4;false,true;author(K, J), venue(K, A).;true;true
4;false,true,false;haswordauthor(J, L), haswordtitle(M, L).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
6;true,true;author(F, E), venue(F, A).;true;true
6;true,true,true;samebib(F, G), venue(G, B).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
7;false,true;author(F, E), venue(F, B).;true;true
7;false,true,false;haswordauthor(E, H), haswordtitle(I, H).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( haswordtitle(E, C) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordauthor(D, F), haswordtitle(G, F) )
%   | | | then return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.6081489350995123;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.3930326560297439;  // std dev = 3.271, 43.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=23 */
%   | | | else return 0.027960255854229347;  // std dev = 2.733, 53.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=9 */
%   | | else return 0.2514503705062058;  // std dev = 0.488, 3,135.000 (wgt'ed) examples reached here.  /* #neg=1,902 #pos=1,233 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then return 0.018279654053760475;  // std dev = 0.367, 306.000 (wgt'ed) examples reached here.  /* #neg=257 #pos=49 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return 0.14661047356105084;  // std dev = 0.453, 52.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=15 */
%   | | else return 0.01687909382967099;  // std dev = 0.365, 126.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D), haswordtitle(F, C) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.1967128265179661;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.47672252741847543;  // std dev = 2.933, 41.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=28 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return -0.0056536945770272115;  // std dev = 2.542, 54.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=8 */
%   | | | else return 0.5756328000532501;  // std dev = 1.475, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | else return 0.21800558995748254;  // std dev = 0.488, 3,135.000 (wgt'ed) examples reached here.  /* #neg=1,902 #pos=1,233 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.5115354736409009;  // std dev = 1.164, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( haswordauthor(J, L), haswordtitle(M, L) )
%   | | | then return 0.16600468207931274;  // std dev = 2.955, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | | | else return -0.15937748411908587;  // std dev = 0.016, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0.013607406253553321;  // std dev = 0.364, 425.000 (wgt'ed) examples reached here.  /* #neg=358 #pos=67 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18388491522714892;  // std dev = 0.487, 3,250.000 (wgt'ed) examples reached here.  /* #neg=1,972 #pos=1,278 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.4322713862396079;  // std dev = 1.168, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( haswordauthor(E, G), haswordtitle(H, G) )
%   | | | then return 0.1425372267491201;  // std dev = 2.954, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | | | else return -0.13916736744124214;  // std dev = 0.014, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | | then return 0.14835586791898878;  // std dev = 2.657, 34.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=10 */
%   | | | else return -0.02075537031983777;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return -0.007981884717277843;  // std dev = 5.493, 254.000 (wgt'ed) examples reached here.  /* #neg=219 #pos=35 */
%   | | | else return 0.019686415794445307;  // std dev = 4.086, 121.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6990640171104737;  // std dev = 1.001, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return -0.2418511131880852;  // std dev = 0.108, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return 0.05958875875954153;  // std dev = 3.516, 61.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=19 */
%   | | | else return 0.4767768044523477;  // std dev = 1.256, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | else return 0.14957868786147735;  // std dev = 0.487, 3,143.000 (wgt'ed) examples reached here.  /* #neg=1,916 #pos=1,227 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | then return 0.1478216007846965;  // std dev = 0.472, 42.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
%   | | else return -0.05422971072752532;  // std dev = 0.273, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return 0.0818286719037911;  // std dev = 0.425, 50.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=12 */
%   | | else return 8.213393826700713E-4;  // std dev = 0.354, 375.000 (wgt'ed) examples reached here.  /* #neg=320 #pos=55 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return -0.25217034899130386;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.3567766674028362;  // std dev = 2.720, 46.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=32 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return -0.008096662137748194;  // std dev = 2.815, 45.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | | | else return 0.3763906542265317;  // std dev = 1.263, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else return 0.12121038166719192;  // std dev = 0.487, 3,143.000 (wgt'ed) examples reached here.  /* #neg=1,916 #pos=1,227 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | then return 0.13678427478511085;  // std dev = 0.455, 38.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=12 */
%   | | else return -0.05113415681888302;  // std dev = 0.318, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return -0.0076263070628042875;  // std dev = 0.345, 259.000 (wgt'ed) examples reached here.  /* #neg=223 #pos=36 */
%   | | else return 0.03455354196286483;  // std dev = 0.392, 169.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=34 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5200251898056426;  // std dev = 1.305, 26.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=24 */
%   | | | else return -0.2665377701171208;  // std dev = 0.321, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return -0.05176514445446036;  // std dev = 2.910, 62.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=13 */
%   | | | else return 0.28396040816498025;  // std dev = 1.526, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | else return 0.09853598844115516;  // std dev = 0.487, 3,135.000 (wgt'ed) examples reached here.  /* #neg=1,902 #pos=1,233 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.3335257908423192;  // std dev = 1.142, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( haswordauthor(J, L), haswordtitle(M, L) )
%   | | | then return 0.09002073567007213;  // std dev = 2.942, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | | | else return -0.12287946443100564;  // std dev = 0.011, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0.0068328191230695385;  // std dev = 0.363, 425.000 (wgt'ed) examples reached here.  /* #neg=358 #pos=67 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07695592838818364;  // std dev = 0.484, 3,250.000 (wgt'ed) examples reached here.  /* #neg=1,972 #pos=1,278 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.17423468665341318;  // std dev = 0.797, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.08911542970567274;  // std dev = 2.909, 38.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=13 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return 0.09766204787239641;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.11023833546106497;  // std dev = 0.010, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return -0.016468617570056476;  // std dev = 5.010, 217.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=29 */
%   | | | else return 0.0994620195880003;  // std dev = 2.884, 45.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then return 0.07874170734106588;  // std dev = 2.950, 46.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=12 */
%   | | | else return -0.017029631419763512;  // std dev = 3.618, 117.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=15 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06018009542434873;  // std dev = 0.484, 3,250.000 (wgt'ed) examples reached here.  /* #neg=1,972 #pos=1,278 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(H, D) )
%   | | | then return 0.05154888309299345;  // std dev = 0.760, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.10766112245199896;  // std dev = 2.659, 34.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=11 */
%   | | else if ( author(I, E), venue(I, B) )
%   | | | then return 0.24440953449749264;  // std dev = 1.091, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.17306526625423804;  // std dev = 0.127, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | | then return -0.02356504676065538;  // std dev = 4.812, 215.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=27 */
%   | | | else return 0.06178488069564297;  // std dev = 2.676, 44.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=9 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.03485905456235711;  // std dev = 5.027, 159.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=34 */
%   | | | else return -0.16507538063350666;  // std dev = 0.181, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.046757194199842256;  // std dev = 0.484, 3,250.000 (wgt'ed) examples reached here.  /* #neg=1,972 #pos=1,278 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then return 0.3102633013092235;  // std dev = 0.513, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordauthor(E, G), haswordtitle(H, G) )
%   | | | then return 0.053455556496520784;  // std dev = 2.922, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | | | else return -0.059104015766254264;  // std dev = 1.041, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | | then return 0.06606297527391251;  // std dev = 2.650, 34.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=10 */
%   | | | else return -0.028270281070854865;  // std dev = 1.265, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return -0.0064308297248005675;  // std dev = 5.475, 254.000 (wgt'ed) examples reached here.  /* #neg=219 #pos=35 */
%   | | | else return 0.010500738519452501;  // std dev = 4.081, 121.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=20 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then if ( haswordvenue(B, C) )
%   | | | then return 0.41976765554358797;  // std dev = 15.497, 1,418.000 (wgt'ed) examples reached here.  /* #neg=309 #pos=1,109 */
%   | | | else return 0.3613299646909157;  // std dev = 4.715, 98.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=59 */
%   | | else return -0.3023424581644447;  // std dev = 0.184, 1,723.000 (wgt'ed) examples reached here.  /* #neg=1,666 #pos=57 */
%   | else if ( title(G, D), venue(G, B) )
%   | | then return -0.13853028269502343;  // std dev = 0.397, 72.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=14 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.0585686604508716;  // std dev = 5.190, 111.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=46 */
%   | | | else return -0.034423046739253914;  // std dev = 3.308, 92.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=12 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordauthor(I, H) )
%   | | then return 0.012177248976918595;  // std dev = 1.094, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.3923355694358167;  // std dev = 0.420, 42.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=32 */
%   | else return 0.003716251651760955;  // std dev = 0.360, 172.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=29 */


Results
   AUC ROC   = 0.882149
   AUC PR    = 0.802536
   CLL	      = -0.557648
   Precision = 0.923077 at threshold = 0.5
   Recall    = 0.016064
   F1        = 0.031579


Total learning time: 1925.459035873413 seconds
Total inference time: 4.246 seconds
AUC ROC: 0.882149


Results scoring model
   AUC ROC   = 0.87282
   AUC PR    = 0.775441
   CLL	      = -0.531613
   Precision = 0.929577 at threshold = 0.5
   Recall    = 0.048458
   F1        = 0.092114


Total scoring time: 26.515 seconds
Refined model CLL: -0.531613


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.882149
   AUC PR    = 0.802536
   CLL	      = -0.557648
   Precision = 0.923077 at threshold = 0.5
   Recall    = 0.016064
   F1        = 0.031579


Total learning time: 3915.5973007946013 seconds
Total inference time: 4.246 seconds
AUC ROC: 0.882149
Total revision time: 3915.5973007946013
Best scored revision CLL: -0.531613


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 23:19:52
{'AUC ROC': 0.882149, 'AUC PR': 0.802536, 'CLL': -0.557648, 'Precision': [0.923077, 0.5], 'Recall': 0.016064, 'F1': 0.031579, 'Learning time': 3915.5973007946013, 'Inference time': 4.246, 'parameter_0.6': {'AUC ROC': 0.882111, 'AUC PR': 0.804329, 'CLL': -0.557049, 'Precision': [0.95, 0.5], 'Recall': 0.025435, 'F1': 0.049544, 'Learning time': 1939.2102649211884, 'Inference time': 4.137}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.25137970433027645;  // std dev = 0.488, 3,250.000 (wgt'ed) examples reached here.  /* #neg=1,972 #pos=1,278 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.18167834686421824;  // std dev = 2.728, 34.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=11 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return -0.016269669551650906;  // std dev = 4.859, 215.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=27 */
%   | | | else return 0.06269438964496693;  // std dev = 2.676, 44.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=9 */
%   | | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | | then return 0.14981560176617903;  // std dev = 3.149, 48.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=14 */
%   | | | else return 0.02343819129785936;  // std dev = 4.086, 121.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( haswordtitle(E, C) )
%   | | then return 0.8247143703284558;  // std dev = 2.11e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordauthor(D, F), haswordtitle(G, F) )
%   | | | then return 0.1580477036617893;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.574714370328456;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.35959809125868775;  // std dev = 3.271, 43.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=23 */
%   | | | else return -0.005474308916826982;  // std dev = 2.733, 53.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=9 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.26657483544473376;  // std dev = 4.605, 86.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=38 */
%   | | | else return 0.21664615124025074;  // std dev = 26.956, 3,049.000 (wgt'ed) examples reached here.  /* #neg=1,854 #pos=1,195 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return 0.09358781998631027;  // std dev = 0.428, 56.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=14 */
%   | else return 0.018916738746178493;  // std dev = 0.369, 428.000 (wgt'ed) examples reached here.  /* #neg=358 #pos=70 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1840866026891358;  // std dev = 0.488, 3,250.000 (wgt'ed) examples reached here.  /* #neg=1,972 #pos=1,278 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.5040722988945806;  // std dev = 1.157, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( haswordauthor(E, G), haswordtitle(H, G) )
%   | | | then return 0.16475633872053563;  // std dev = 2.946, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | | | else return -0.165170350041528;  // std dev = 0.015, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return -0.013706650302134986;  // std dev = 5.006, 217.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=29 */
%   | | | else return 0.10216169403612972;  // std dev = 2.883, 45.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then return 0.09131189751355868;  // std dev = 2.936, 46.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=12 */
%   | | | else return -0.014305021854104542;  // std dev = 3.618, 117.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=15 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.15202425090919577;  // std dev = 0.488, 3,250.000 (wgt'ed) examples reached here.  /* #neg=1,972 #pos=1,278 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.4235145261447559;  // std dev = 1.158, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( haswordauthor(E, G), haswordtitle(H, G) )
%   | | | then return 0.14134149882743702;  // std dev = 2.944, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
%   | | | else return -0.1436374351184538;  // std dev = 0.013, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | | then return 0.10356056561425807;  // std dev = 2.650, 34.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=10 */
%   | | | else return -0.0391255916280524;  // std dev = 1.264, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return -0.0069089590164747835;  // std dev = 5.476, 254.000 (wgt'ed) examples reached here.  /* #neg=219 #pos=35 */
%   | | | else return 0.019794706962654136;  // std dev = 4.086, 121.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12313067770031953;  // std dev = 0.488, 3,250.000 (wgt'ed) examples reached here.  /* #neg=1,972 #pos=1,278 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.24555837595845895;  // std dev = 0.860, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.13515639963316464;  // std dev = 2.910, 38.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=13 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return 0.1690033547251959;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1268586478754864;  // std dev = 0.012, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return -0.01308667620690613;  // std dev = 5.004, 217.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=29 */
%   | | | else return 0.09005635812903882;  // std dev = 2.884, 45.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=11 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.02084836545431025;  // std dev = 4.644, 154.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=27 */
%   | | | else return -0.16081635169874547;  // std dev = 0.078, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09819235429456882;  // std dev = 0.488, 3,250.000 (wgt'ed) examples reached here.  /* #neg=1,972 #pos=1,278 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.19782144928443815;  // std dev = 0.844, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.11210948595587482;  // std dev = 2.909, 38.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=13 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return 0.13057339752746633;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.11346052560804698;  // std dev = 0.011, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | | then return 0.08578391465973421;  // std dev = 2.641, 34.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=10 */
%   | | | else return -0.035010137073713164;  // std dev = 1.263, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return -0.008632471672009898;  // std dev = 5.465, 254.000 (wgt'ed) examples reached here.  /* #neg=219 #pos=35 */
%   | | | else return 0.01970654212034772;  // std dev = 4.083, 121.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.619538436946746;  // std dev = 0.984, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return -0.32310487081772155;  // std dev = 0.059, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return -0.0252871051173489;  // std dev = 3.531, 61.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=19 */
%   | | | else return 0.446023924693884;  // std dev = 1.205, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | else return 0.07522998377662453;  // std dev = 0.487, 3,143.000 (wgt'ed) examples reached here.  /* #neg=1,916 #pos=1,227 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, I) )
%   | | | then return 0.06269961153978101;  // std dev = 0.785, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.0951483401341379;  // std dev = 2.658, 34.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=11 */
%   | | else return -0.05089924125733798;  // std dev = 0.303, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | else return 0.006326208055228949;  // std dev = 0.363, 428.000 (wgt'ed) examples reached here.  /* #neg=358 #pos=70 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06031781645009899;  // std dev = 0.486, 3,250.000 (wgt'ed) examples reached here.  /* #neg=1,972 #pos=1,278 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.3796129442439715;  // std dev = 4.152, 74.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=41 */
%   | | | else return -0.1572533051902697;  // std dev = 0.435, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   | | else if ( haswordtitle(E, H), haswordauthor(I, H) )
%   | | | then return -0.1488155720041723;  // std dev = 0.112, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return 0.038454467030821025;  // std dev = 2.552, 43.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=8 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, B) )
%   | | | then return 0.03428505605706866;  // std dev = 4.950, 158.000 (wgt'ed) examples reached here.  /* #neg=125 #pos=33 */
%   | | | else return 0.16123641976322997;  // std dev = 1.197, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | | then return -0.1841942558139456;  // std dev = 0.155, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.14771153378603;  // std dev = 0.105, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04681083939508362;  // std dev = 0.486, 3,250.000 (wgt'ed) examples reached here.  /* #neg=1,972 #pos=1,278 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.11679180634001489;  // std dev = 0.700, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.08822901679388724;  // std dev = 2.887, 38.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=13 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return 0.08988568308953249;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.1030840037856223;  // std dev = 0.027, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.11573101775764057;  // std dev = 1.095, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.007568301161141568;  // std dev = 2.440, 44.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=10 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return -0.010034332116956491;  // std dev = 5.210, 254.000 (wgt'ed) examples reached here.  /* #neg=219 #pos=35 */
%   | | | else return 0.01229771832786853;  // std dev = 4.074, 121.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=20 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then if ( haswordvenue(B, C) )
%   | | | then return 0.4226498732071247;  // std dev = 15.505, 1,418.000 (wgt'ed) examples reached here.  /* #neg=309 #pos=1,109 */
%   | | | else return 0.3669437962824103;  // std dev = 4.731, 98.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=59 */
%   | | else return -0.3054436115667808;  // std dev = 0.184, 1,723.000 (wgt'ed) examples reached here.  /* #neg=1,666 #pos=57 */
%   | else if ( title(G, D), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.02004931804982369;  // std dev = 0.720, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.15120755672552347;  // std dev = 3.254, 68.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=13 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.058279968149924144;  // std dev = 5.190, 111.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=46 */
%   | | | else return -0.04325327098631671;  // std dev = 3.126, 92.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=12 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then return 0.05440618196070246;  // std dev = 0.379, 185.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=47 */
%   | else return 0.2338880276241784;  // std dev = 0.410, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */


Results
   AUC ROC   = 0.883205
   AUC PR    = 0.807819
   CLL	      = -0.555462
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.013387
   F1        = 0.02642


Total learning time: 2009.6595611572266 seconds
Total inference time: 3.898 seconds
AUC ROC: 0.883205


Dataset: 3_imdb_cora, Fold: 4, Type: Scratch (RDN-B), Time: 23:53:27
{'AUC ROC': 0.883205, 'AUC PR': 0.807819, 'CLL': -0.555462, 'Precision': [1.0, 0.5], 'Recall': 0.013387, 'F1': 0.02642, 'Learning time': 2009.6595611572266, 'Inference time': 3.898}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2523618980624701;  // std dev = 0.489, 4,320.000 (wgt'ed) examples reached here.  /* #neg=2,617 #pos=1,703 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4181489350995132;  // std dev = 4.964, 100.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=56 */
%   | | | else return -0.1418510649004884;  // std dev = 0.000, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | | else if ( haswordtitle(E, H), haswordauthor(I, H) )
%   | | | then return -0.106136779186202;  // std dev = 1.389, 56.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=2 */
%   | | | else return 0.054870246574922205;  // std dev = 3.105, 61.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, B) )
%   | | | then return 0.04622232959492438;  // std dev = 5.770, 218.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=41 */
%   | | | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21878530151098005;  // std dev = 0.489, 4,320.000 (wgt'ed) examples reached here.  /* #neg=2,617 #pos=1,703 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then return 0.15612228473549258;  // std dev = 0.454, 53.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=16 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return 0.1769052236283383;  // std dev = 1.171, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.1417485360672818;  // std dev = 0.042, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | | then return 0.12503378082081762;  // std dev = 2.773, 43.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=12 */
%   | | | else return -0.03894739582981338;  // std dev = 1.252, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.006476803720153836;  // std dev = 6.693, 356.000 (wgt'ed) examples reached here.  /* #neg=301 #pos=55 */
%   | | | else return 0.015734195800535367;  // std dev = 4.402, 162.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=26 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1848637741750867;  // std dev = 0.489, 4,320.000 (wgt'ed) examples reached here.  /* #neg=2,617 #pos=1,703 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(H, D) )
%   | | | then return 0.16195858806756377;  // std dev = 1.058, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.13226385566835477;  // std dev = 3.124, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | | else if ( author(I, E), venue(I, A) )
%   | | | then return 0.15220151208492025;  // std dev = 1.173, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.12537498535885302;  // std dev = 0.038, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( haswordauthor(K, L), haswordtitle(M, L) )
%   | | | then return 0.1081980130379987;  // std dev = 2.759, 43.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=12 */
%   | | | else return -0.034379671261378045;  // std dev = 1.254, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.005660916285890968;  // std dev = 6.692, 356.000 (wgt'ed) examples reached here.  /* #neg=301 #pos=55 */
%   | | | else return 0.01379234856163682;  // std dev = 4.399, 162.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=26 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.152624238974622;  // std dev = 0.489, 4,320.000 (wgt'ed) examples reached here.  /* #neg=2,617 #pos=1,703 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then return 0.11599379728887815;  // std dev = 0.453, 53.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=16 */
%   | | else if ( haswordauthor(E, H), haswordvenue(A, H) )
%   | | | then return -0.1049735847893838;  // std dev = 0.015, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.04756948148006101;  // std dev = 1.279, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.20475459079312594;  // std dev = 1.336, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.03145351460281391;  // std dev = 2.708, 55.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=11 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.004944780280507021;  // std dev = 6.692, 356.000 (wgt'ed) examples reached here.  /* #neg=301 #pos=55 */
%   | | | else return 0.012072602028802034;  // std dev = 4.397, 162.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=26 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12357037205497294;  // std dev = 0.489, 4,320.000 (wgt'ed) examples reached here.  /* #neg=2,617 #pos=1,703 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then return 0.09783675553981185;  // std dev = 0.452, 53.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=16 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return 0.1362178828029802;  // std dev = 1.174, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.10681611036773035;  // std dev = 0.037, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | | then return 0.08580526363078034;  // std dev = 2.742, 43.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=12 */
%   | | | else return -0.04043213138767345;  // std dev = 1.224, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.004316924972684556;  // std dev = 6.691, 356.000 (wgt'ed) examples reached here.  /* #neg=301 #pos=55 */
%   | | | else return 0.01055376669080661;  // std dev = 4.394, 162.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=26 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6730365545280843;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return -0.29571344547191597;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( haswordauthor(H, C) )
%   | | | then return 0.3513453780574956;  // std dev = 1.970, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return -0.02810781166909928;  // std dev = 3.730, 71.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=19 */
%   | else return 0.09654646852711515;  // std dev = 0.488, 4,186.000 (wgt'ed) examples reached here.  /* #neg=2,544 #pos=1,642 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, I) )
%   | | | then return 0.0933743973628517;  // std dev = 1.147, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.08952270329379118;  // std dev = 2.665, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | | else return -0.05124957099562102;  // std dev = 0.266, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | else return 0.008811297936405726;  // std dev = 0.358, 589.000 (wgt'ed) examples reached here.  /* #neg=492 #pos=97 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C), haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.31620921218021886;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.37571208155248925;  // std dev = 3.091, 47.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=33 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return -0.1309433045507578;  // std dev = 3.177, 68.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=13 */
%   | | | else return 0.3391679400997268;  // std dev = 1.650, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | else return 0.07743788230530327;  // std dev = 0.487, 4,184.000 (wgt'ed) examples reached here.  /* #neg=2,536 #pos=1,648 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | then return 0.0797672380919425;  // std dev = 0.451, 53.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=16 */
%   | | else return -0.048197407800351665;  // std dev = 0.252, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 4.1372507593561146E-4;  // std dev = 0.354, 365.000 (wgt'ed) examples reached here.  /* #neg=309 #pos=56 */
%   | | else return 0.01835699713663634;  // std dev = 0.356, 216.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=39 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.060396146433622906;  // std dev = 0.486, 4,320.000 (wgt'ed) examples reached here.  /* #neg=2,617 #pos=1,703 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.45331575552558045;  // std dev = 1.101, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return -0.17971863180751818;  // std dev = 0.128, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordauthor(E, H), haswordtitle(I, H) )
%   | | | then return 0.05980934262887767;  // std dev = 2.670, 43.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=12 */
%   | | | else return -0.12599080933222573;  // std dev = 0.132, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | | then return -0.012187420928726904;  // std dev = 5.708, 300.000 (wgt'ed) examples reached here.  /* #neg=257 #pos=43 */
%   | | | else return 0.05613758230442598;  // std dev = 3.193, 62.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=13 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.024965580087277686;  // std dev = 5.668, 215.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=41 */
%   | | | else return -0.13771585382795545;  // std dev = 0.124, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.046852658558206715;  // std dev = 0.486, 4,320.000 (wgt'ed) examples reached here.  /* #neg=2,617 #pos=1,703 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.08340094109944918;  // std dev = 1.012, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.05950331460904281;  // std dev = 3.086, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return 0.11752307923594289;  // std dev = 1.173, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.09482782286573115;  // std dev = 0.041, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return -0.023213691893748806;  // std dev = 5.850, 302.000 (wgt'ed) examples reached here.  /* #neg=262 #pos=40 */
%   | | | else return 0.09944185168014437;  // std dev = 3.231, 63.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=16 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.0239577468128958;  // std dev = 5.172, 204.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=39 */
%   | | | else return -0.12867983829518106;  // std dev = 0.104, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then if ( haswordvenue(B, C) )
%   | | | then return 0.42974700537876487;  // std dev = 17.558, 1,870.000 (wgt'ed) examples reached here.  /* #neg=392 #pos=1,478 */
%   | | | else return 0.3532995032009368;  // std dev = 5.499, 131.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=75 */
%   | | else return -0.3063338964200443;  // std dev = 0.180, 2,309.000 (wgt'ed) examples reached here.  /* #neg=2,237 #pos=72 */
%   | else if ( title(G, D), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.24257575053187433;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return -0.14018523404297586;  // std dev = 3.854, 93.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=19 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.059242417198541834;  // std dev = 6.158, 156.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=65 */
%   | | | else return -0.03676181843384947;  // std dev = 3.598, 117.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=16 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then return 0.3331111481000312;  // std dev = 0.459, 67.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=47 */
%   | else return 0.00876719342808289;  // std dev = 0.349, 231.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=41 */


Results
   AUC ROC   = 0.882322
   AUC PR    = 0.802689
   CLL	      = -0.553757
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.016064
   F1        = 0.031621


Total learning time: 2605.448157310486 seconds
Total inference time: 3.733 seconds
AUC ROC: 0.882322


Results scoring model
   AUC ROC   = 0.879108
   AUC PR    = 0.779129
   CLL	      = -0.529647
   Precision = 0.945946 at threshold = 0.5
   Recall    = 0.038546
   F1        = 0.074074


Total scoring time: 33.1 seconds
Parameter learned model CLL: -0.529647


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,true,false': 'haswordtitle(E, H), haswordauthor(I, H)', 'false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,false,true': 'title(L, K), venue(L, B)'}, {'true': [0.489, 2, 1], 'false,true,true,true': [4.964, 44, 56], 'false,true,true,false': [0.0, 200, 0], 'false,true,false,true': [1.389, 54, 2], 'false,true,false,false': [3.105, 49, 12], 'false,false,true,true': [5.77, 177, 41], 'false,false,true,false': [1.155, 4, 2], 'false,false,false': [0.0, 18, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,true': 'haswordauthor(E, F), haswordtitle(G, F)', 'false,true,false': 'author(H, E), venue(H, A)', 'false,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false,true': 'haswordauthor(J, K), haswordtitle(L, K)', 'false,false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true': [0.489, 2, 1], 'false,true,true': [0.454, 37, 16], 'false,true,false,true': [1.171, 4, 2], 'false,true,false,false': [0.042, 19, 0], 'false,false,true,true': [2.773, 31, 12], 'false,false,true,false': [1.252, 18, 2], 'false,false,false,true': [6.693, 301, 55], 'false,false,false,false': [4.402, 136, 26]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,true': 'haswordauthor(E, F), haswordtitle(G, F)', 'false,true,true': 'haswordtitle(H, D)', 'false,true,false': 'author(I, E), venue(I, A)', 'false,false': 'haswordvenue(A, J), haswordauthor(K, J)', 'false,false,true': 'haswordauthor(K, L), haswordtitle(M, L)', 'false,false,false': 'haswordvenue(A, N), haswordtitle(P, N)'}, {'true': [0.489, 2, 1], 'false,true,true,true': [1.058, 4, 2], 'false,true,true,false': [3.124, 33, 14], 'false,true,false,true': [1.173, 4, 2], 'false,true,false,false': [0.038, 19, 0], 'false,false,true,true': [2.759, 31, 12], 'false,false,true,false': [1.254, 18, 2], 'false,false,false,true': [6.692, 301, 55], 'false,false,false,false': [4.399, 136, 26]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,true': 'haswordauthor(E, F), haswordtitle(G, F)', 'false,true,false': 'haswordauthor(E, H), haswordvenue(A, H)', 'false,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false,true': 'author(K, J), venue(K, B)', 'false,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true': [0.489, 2, 1], 'false,true,true': [0.453, 37, 16], 'false,true,false,true': [0.015, 3, 0], 'false,true,false,false': [1.279, 20, 2], 'false,false,true,true': [1.336, 5, 3], 'false,false,true,false': [2.708, 44, 11], 'false,false,false,true': [6.692, 301, 55], 'false,false,false,false': [4.397, 136, 26]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,true': 'haswordauthor(E, F), haswordtitle(G, F)', 'false,true,false': 'author(H, E), venue(H, A)', 'false,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false,true': 'haswordauthor(J, K), haswordtitle(L, K)', 'false,false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true': [0.489, 2, 1], 'false,true,true': [0.452, 37, 16], 'false,true,false,true': [1.174, 4, 2], 'false,true,false,false': [0.037, 19, 0], 'false,false,true,true': [2.742, 31, 12], 'false,false,true,false': [1.224, 18, 2], 'false,false,false,true': [6.691, 301, 55], 'false,false,false,false': [4.394, 136, 26]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'samebib(F, G), venue(G, B)', 'true,true,false': 'haswordauthor(H, C)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,true': 'haswordauthor(J, K), haswordtitle(L, K)', 'false,true,true': 'haswordtitle(L, I)'}, {'true,true,true,true': [0.984, 1, 31], 'true,true,true,false': [0.0, 14, 0], 'true,true,false,true': [1.97, 6, 11], 'true,true,false,false': [3.73, 52, 19], 'true,false': [0.488, 2, 1], 'false,true,true,true': [1.147, 5, 2], 'false,true,true,false': [2.665, 29, 12], 'false,true,false': [0.266, 20, 2], 'false,false': [0.358, 492, 97]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, C), haswordtitle(F, D)', 'true,true,true': 'author(G, E), venue(G, A)', 'true,true,false': 'haswordtitle(H, C)', 'false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,true': 'haswordauthor(J, K), haswordtitle(L, K)', 'false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true,true,true': [0.0, 8, 0], 'true,true,true,false': [3.091, 14, 33], 'true,true,false,true': [3.177, 55, 13], 'true,true,false,false': [1.65, 4, 9], 'true,false': [0.487, 2, 1], 'false,true,true': [0.451, 37, 16], 'false,true,false': [0.252, 23, 2], 'false,false,true': [0.354, 309, 56], 'false,false,false': [0.356, 177, 39]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'author(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,true,false': 'haswordauthor(E, H), haswordtitle(I, H)', 'false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,false,true': 'haswordtitle(K, L), haswordauthor(M, L)', 'false,false,false': 'haswordvenue(A, N), haswordtitle(P, N)'}, {'true': [0.486, 2, 1], 'false,true,true,true': [1.101, 2, 4], 'false,true,true,false': [0.128, 4, 0], 'false,true,false,true': [2.67, 31, 12], 'false,true,false,false': [0.132, 17, 0], 'false,false,true,true': [5.708, 257, 43], 'false,false,true,false': [3.193, 49, 13], 'false,false,false,true': [5.668, 174, 41], 'false,false,false,false': [0.124, 12, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,true': 'haswordauthor(E, F), haswordtitle(G, F)', 'false,true,true': 'haswordtitle(G, D)', 'false,true,false': 'author(H, E), venue(H, A)', 'false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false,true': 'haswordtitle(J, K), haswordauthor(L, K)', 'false,false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true': [0.486, 2, 1], 'false,true,true,true': [1.012, 4, 2], 'false,true,true,false': [3.086, 33, 14], 'false,true,false,true': [1.173, 4, 2], 'false,true,false,false': [0.041, 19, 0], 'false,false,true,true': [5.85, 262, 40], 'false,false,true,false': [3.231, 47, 16], 'false,false,false,true': [5.172, 165, 39], 'false,false,false,false': [0.104, 12, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordtitle(D, C)', 'true': 'title(E, D), venue(E, B)', 'true,true': 'samebib(E, F), venue(F, A)', 'true,true,true': 'haswordvenue(B, C)', 'true,false': 'title(G, D), venue(G, A)', 'true,false,true': 'samebib(G, H), venue(H, B)', 'true,false,false': 'haswordvenue(B, C)', 'false': 'haswordvenue(A, I), haswordvenue(B, I)'}, {'true,true,true,true': [17.558, 392, 1], 'true,true,true,false': [5.499, 56, 75], 'true,true,false': [0.18, 2, 72], 'true,false,true,true': [1.095, 2, 3], 'true,false,true,false': [3.854, 74, 19], 'true,false,false,true': [6.158, 91, 65], 'true,false,false,false': [3.598, 101, 16], 'false,true': [0.459, 20, 47], 'false,false': [0.349, 190, 41]}]]
[{'': [0.23880910279487366, 0.1420693053575922], 'false': [0.13968681170171865, 0.14611365343897384], 'false,false': [0.15511399872449091, -3.0839528461809902e-18], 'false,false,true': [0.15270179277838677, 0.22222222222222224], 'false,true': [0.15182222222222316, 0.10534005405800222], 'false,true,true': [0.24639999999999979, -2.3980817331903383e-16], 'false,true,false': [0.03443877551020404, 0.1580220370868041]}, {'': [0.2388091027948914, 0.13343407975048655], 'false': [0.1740864388712017, 0.12741466275688332], 'false,true': [0.20585227034207013, 0.07343763053349595], 'false,false': [0.15275225779483567, 0.1238943940427469], 'false,false,true': [0.17881522147286247, 0.07836351238364717], 'false,false,false': [0.12582155382926277, 0.11960050333763385], 'false,true,false': [0.22851893465728054, 9.493466962808663e-05]}, {'': [0.23880910279489065, 0.13242609795713367], 'false': [0.16991656356919288, 0.12697835316262676], 'false,true': [0.20533956155557181, 0.06914577884435295], 'false,true,true': [0.18672866244334285, 0.20761559719041375], 'false,false': [0.15019228364267628, 0.1238302223325869], 'false,false,true': [0.1770152025982206, 0.07864807089480384], 'false,false,false': [0.1258022933538531, 0.119451093721397], 'false,true,false': [0.22930687089495194, 7.690101704921056e-05]}, {'': [0.2388091027949104, 0.13159865194175083], 'false': [0.16658577444984868, 0.1266154378817689], 'false,true': [0.20479920669489243, 0.06583160919851964], 'false,false': [0.14806586462676097, 0.12377429387486368], 'false,false,true': [0.2232484258258579, 0.1333164716777906], 'false,false,false': [0.12578544369929442, 0.11931981330627428], 'false,true,false': [7.262840212349936e-05, 0.07440331521427307]}, {'': [0.23880910279492112, 0.13105819580216777], 'false': [0.1647022768398913, 0.12634833328782827], 'false,true': [0.20440845001964333, 0.06597674403157067], 'false,false': [0.1465245709899175, 0.12372560425498585], 'false,false,true': [0.17479281494358698, 0.07487097608087791], 'false,false,false': [0.12577071415351543, 0.11920467901012462], 'false,true,false': [0.22978360504059345, 7.253636690852719e-05]}, {'': [0.23880910279494344, 0.13050403074477224], 'true': [0.24799509913121082, 0.2383920738685152], 'true,true': [0.21975425330812795, 0.22469008264462753], 'true,true,false': [0.2283737024221454, 0.19599285855981], 'true,true,true': [0.03027343749999961, -3.172065784643304e-17], 'false': [0.14678298637698303, 0.12842507926001892], 'false,true': [0.17531095710107303, 0.07084279683349987], 'false,true,true': [0.18783077659372038, 0.17317126342649158]}, {'': [0.2374136223959657, 0.1301986950135721], 'true': [0.23264853064482277, 0.2375684928496544], 'true,true': [0.23327022696570798, 0.18803572801652094], 'true,true,true': [-2.7755575615628914e-17, 0.20333869544459077], 'true,true,false': [0.1484540941752374, 0.209543409311102], 'false': [0.16188735106277183, 0.1258257492333948], 'false,true': [0.20305648863545767, 0.06348221041236965], 'false,false': [0.12505606910435585, 0.12692410145466143]}, {'': [0.23653622854997625, 0.1299383322520422], 'false': [0.14394276436854705, 0.12818635755299965], 'false,true': [0.21902051294067296, 0.12611204722295744], 'false,true,true': [0.20198936789184574, 0.004127709186198827], 'false,false': [0.11884486811149449, 0.14290883796428075], 'false,false,false': [0.14941481636304893, 0.0012771867091698381], 'false,true,false': [0.16578299280955625, 0.0010273416032559796], 'false,false,true': [0.10862071188182691, 0.16444782986961806]}, {'': [0.23650655391812475, 0.12881062406937105], 'false': [0.15803471142569658, 0.12482054355387678], 'false,true': [0.19909189310450157, 0.06334834803506338], 'false,true,true': [0.1705932139027453, 0.20266536992446538], 'false,false': [0.12452779094552666, 0.12512238706767656], 'false,false,false': [0.13113534008191932, 0.0008982996816819013], 'false,false,true': [0.11333349661156905, 0.1657416481088987], 'false,true,false': [0.22939832597815035, 8.921554552639959e-05]}, {'': [0.2260059407564764, 0.16032732021300677], 'true': [0.22909696242475566, 0.18764176088469522], 'true,true': [0.16953494594549168, 0.032574962999643256], 'true,false': [0.17089305654804507, 0.188568478497891], 'true,false,false': [0.2430555555555558, 0.11065229198708514], 'true,false,true': [0.24, 0.15970283502600588], 'true,true,true': [0.1648582938508354, 0.2308316466625886], 'false': [0.21094250399501385, 0.1219946014120582]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
0;false,true;title(F, E), venue(F, A).;true;true
0;false,true,true;samebib(F, G), venue(G, B).;true;true
0;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
1;false,true;haswordauthor(E, F), haswordtitle(G, F).;true;true
1;false,true,false;author(H, E), venue(H, A).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
2;false,true;haswordauthor(E, F), haswordtitle(G, F).;true;true
2;false,true,false;author(I, E), venue(I, A).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
3;false,true;haswordauthor(E, F), haswordtitle(G, F).;true;true
3;false,true,false;haswordauthor(E, H), haswordvenue(A, H).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
4;false,true;haswordauthor(E, F), haswordtitle(G, F).;true;true
4;false,true,false;author(H, E), venue(H, A).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
5;true,true;author(F, E), venue(F, A).;true;true
5;true,true,true;samebib(F, G), venue(G, B).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
6;true,true;haswordtitle(F, C), haswordtitle(F, D).;true;true
6;true,true,true;author(G, E), venue(G, A).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
7;false,true;author(F, E), venue(F, B).;true;true
7;false,true,false;haswordauthor(E, H), haswordtitle(I, H).;true;true
7;false,false;haswordvenue(B, J), haswordtitle(K, J).;true;true
7;false,false,false;haswordvenue(A, N), haswordtitle(P, N).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
8;false,true;haswordauthor(E, F), haswordtitle(G, F).;true;true
8;false,true,false;author(H, E), venue(H, A).;true;true
8;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
8;false,false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2523618980624701;  // std dev = 0.489, 4,320.000 (wgt'ed) examples reached here.  /* #neg=2,617 #pos=1,703 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(H, D) )
%   | | | then return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.15602127552504427;  // std dev = 3.135, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | | else if ( author(I, E), venue(I, A) )
%   | | | then return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( haswordauthor(K, L), haswordtitle(M, L) )
%   | | | then return 0.13721870254137283;  // std dev = 2.941, 43.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=12 */
%   | | | else return -0.0418510649004878;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.01264331712198428;  // std dev = 6.819, 356.000 (wgt'ed) examples reached here.  /* #neg=301 #pos=55 */
%   | | | else return 0.018642762260005656;  // std dev = 4.672, 162.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=26 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21878530151098005;  // std dev = 0.489, 4,320.000 (wgt'ed) examples reached here.  /* #neg=2,617 #pos=1,703 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4133963334795556;  // std dev = 4.955, 100.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=56 */
%   | | | else return -0.14545107733445253;  // std dev = 0.092, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | | else if ( haswordtitle(E, H), haswordauthor(I, H) )
%   | | | then return -0.10860546913506011;  // std dev = 1.389, 56.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=2 */
%   | | | else return 0.0533120969231963;  // std dev = 3.105, 61.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, B) )
%   | | | then return 0.0416598526384641;  // std dev = 5.737, 218.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=41 */
%   | | | else return 0.18684834294191943;  // std dev = 1.160, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return -0.14486861881139343;  // std dev = 0.051, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1848637741750867;  // std dev = 0.489, 4,320.000 (wgt'ed) examples reached here.  /* #neg=2,617 #pos=1,703 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then return 0.13567612502632734;  // std dev = 0.453, 53.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=16 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return 0.15072197228546433;  // std dev = 1.173, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.12489857241407903;  // std dev = 0.038, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return -0.015974108565055708;  // std dev = 5.875, 302.000 (wgt'ed) examples reached here.  /* #neg=262 #pos=40 */
%   | | | else return 0.10077276194119958;  // std dev = 3.233, 63.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=16 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.03973762113093999;  // std dev = 5.262, 204.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=39 */
%   | | | else return -0.1283670615188445;  // std dev = 0.021, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.152624238974622;  // std dev = 0.489, 4,320.000 (wgt'ed) examples reached here.  /* #neg=2,617 #pos=1,703 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.1372345309589034;  // std dev = 1.048, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.11334972013576063;  // std dev = 3.123, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return 0.12722627569622155;  // std dev = 1.175, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.11188255328227474;  // std dev = 0.034, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | | then return 0.1035088554634791;  // std dev = 2.748, 43.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=12 */
%   | | | else return -0.03582772717000547;  // std dev = 1.249, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.00402658126610115;  // std dev = 6.478, 352.000 (wgt'ed) examples reached here.  /* #neg=297 #pos=55 */
%   | | | else return 0.010958661616845881;  // std dev = 4.671, 166.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=26 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12357037205497294;  // std dev = 0.489, 4,320.000 (wgt'ed) examples reached here.  /* #neg=2,617 #pos=1,703 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.48328477434163636;  // std dev = 1.123, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return -0.14536290394322604;  // std dev = 0.065, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordauthor(E, H), haswordtitle(I, H) )
%   | | | then return 0.08982294535229308;  // std dev = 2.695, 43.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=12 */
%   | | | else return -0.12808921456358863;  // std dev = 0.101, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | | then return -0.011414199269241719;  // std dev = 5.685, 300.000 (wgt'ed) examples reached here.  /* #neg=257 #pos=43 */
%   | | | else return 0.06016456994774549;  // std dev = 3.194, 62.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=13 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.03267208329779876;  // std dev = 5.686, 215.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=41 */
%   | | | else return -0.12075753606278454;  // std dev = 0.092, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0984995174910372;  // std dev = 0.489, 4,320.000 (wgt'ed) examples reached here.  /* #neg=2,617 #pos=1,703 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(H, D) )
%   | | | then return 0.1134109975241856;  // std dev = 1.029, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.09093491782814479;  // std dev = 3.094, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | | else if ( author(I, E), venue(I, A) )
%   | | | then return 0.1014462191209519;  // std dev = 1.174, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.10246619397398521;  // std dev = 0.043, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | | then return -0.01909115700251541;  // std dev = 5.852, 302.000 (wgt'ed) examples reached here.  /* #neg=262 #pos=40 */
%   | | | else return 0.08826477977187414;  // std dev = 3.220, 63.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=16 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.0301255733606649;  // std dev = 5.200, 204.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=39 */
%   | | | else return -0.10897084273887836;  // std dev = 0.063, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6521183462224586;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return -0.31663165377754116;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.3304271697518704;  // std dev = 1.970, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return -0.04902601997472445;  // std dev = 3.730, 71.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=19 */
%   | else return 0.07562826022149627;  // std dev = 0.488, 4,186.000 (wgt'ed) examples reached here.  /* #neg=2,544 #pos=1,642 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( haswordauthor(I, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, H) )
%   | | | then return 0.10055263382840358;  // std dev = 1.031, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.08427509242619631;  // std dev = 2.645, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | | else return -0.05265444050141499;  // std dev = 0.246, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | else return 0.006315919582215542;  // std dev = 0.357, 589.000 (wgt'ed) examples reached here.  /* #neg=492 #pos=97 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C), haswordauthor(E, C) )
%   | then return 0.5817463551680037;  // std dev = 0.091, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.05972730067929669;  // std dev = 0.487, 4,314.000 (wgt'ed) examples reached here.  /* #neg=2,617 #pos=1,697 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( haswordauthor(G, H), haswordtitle(I, H) )
%   | | then return 0.07620929055921806;  // std dev = 0.446, 53.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=16 */
%   | | else if ( author(J, G), venue(J, A) )
%   | | | then return 0.08176219189100363;  // std dev = 1.175, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.09504899956537027;  // std dev = 0.038, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | | then return -0.017721491563690715;  // std dev = 5.851, 302.000 (wgt'ed) examples reached here.  /* #neg=262 #pos=40 */
%   | | | else return 0.07491594566912935;  // std dev = 3.206, 63.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=16 */
%   | | else if ( haswordvenue(B, P), haswordtitle(Q, P) )
%   | | | then return 0.02352074995534911;  // std dev = 5.181, 204.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=39 */
%   | | | else return -0.10025858575187202;  // std dev = 0.073, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.046874123427541;  // std dev = 0.487, 4,320.000 (wgt'ed) examples reached here.  /* #neg=2,617 #pos=1,703 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.3905513612076487;  // std dev = 1.087, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return -0.13073142766766105;  // std dev = 0.072, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordauthor(E, H), haswordtitle(I, H) )
%   | | | then return 0.05613637060313014;  // std dev = 2.644, 43.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=12 */
%   | | | else return -0.11369803821906611;  // std dev = 0.124, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | | then return -0.01896909562562361;  // std dev = 5.631, 300.000 (wgt'ed) examples reached here.  /* #neg=257 #pos=43 */
%   | | | else return 0.05615133805762105;  // std dev = 3.194, 62.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=13 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.02575623279407158;  // std dev = 5.659, 215.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=41 */
%   | | | else return -0.0990076249570292;  // std dev = 0.134, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then if ( haswordvenue(B, C) )
%   | | | then return 0.43034457809990845;  // std dev = 17.572, 1,870.000 (wgt'ed) examples reached here.  /* #neg=392 #pos=1,478 */
%   | | | else return 0.35430944584731305;  // std dev = 5.492, 131.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=75 */
%   | | else return -0.3069848156473232;  // std dev = 0.181, 2,309.000 (wgt'ed) examples reached here.  /* #neg=2,237 #pos=72 */
%   | else if ( title(G, D), venue(G, A) )
%   | | then if ( samebib(G, H), venue(H, B) )
%   | | | then return 0.24269148641611663;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return -0.14026100414491538;  // std dev = 3.854, 93.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=19 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.059358153082783575;  // std dev = 6.158, 156.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=65 */
%   | | | else return -0.04418087884066713;  // std dev = 3.537, 117.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=16 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then return 0.3408730211062286;  // std dev = 0.459, 67.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=47 */
%   | else return 0.009946099669421298;  // std dev = 0.348, 231.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=41 */


Results
   AUC ROC   = 0.882488
   AUC PR    = 0.80206
   CLL	      = -0.552852
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.014726
   F1        = 0.029024


Total learning time: 2573.025966644287 seconds
Total inference time: 3.699 seconds
AUC ROC: 0.882488


Results scoring model
   AUC ROC   = 0.878131
   AUC PR    = 0.77244
   CLL	      = -0.530029
   Precision = 0.934783 at threshold = 0.5
   Recall    = 0.023678
   F1        = 0.046187


Total scoring time: 32.009 seconds
Refined model CLL: -0.530029


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.882322
   AUC PR    = 0.802689
   CLL	      = -0.553757
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.016064
   F1        = 0.031621


Total learning time: 5243.583123954773 seconds
Total inference time: 3.733 seconds
AUC ROC: 0.882322
Total revision time: 5243.583123954773
Best scored revision CLL: -0.529647


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 01:21:04
{'AUC ROC': 0.882322, 'AUC PR': 0.802689, 'CLL': -0.553757, 'Precision': [1.0, 0.5], 'Recall': 0.016064, 'F1': 0.031621, 'Learning time': 5243.583123954773, 'Inference time': 3.733, 'parameter_0.8': {'AUC ROC': 0.882322, 'AUC PR': 0.802689, 'CLL': -0.553757, 'Precision': [1.0, 0.5], 'Recall': 0.016064, 'F1': 0.031621, 'Learning time': 2605.448157310486, 'Inference time': 3.733}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C), haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.5602765946739794;  // std dev = 3.135, 47.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=33 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return 0.04932540568774767;  // std dev = 3.243, 68.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=13 */
%   | | | else return 0.5504566274072047;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | else return 0.2520303882543829;  // std dev = 0.489, 4,184.000 (wgt'ed) examples reached here.  /* #neg=2,536 #pos=1,648 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, I) )
%   | | | then return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.15602127552504427;  // std dev = 3.135, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | | else return -0.06185106490048781;  // std dev = 0.271, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | else return 0.02166012270708463;  // std dev = 0.370, 581.000 (wgt'ed) examples reached here.  /* #neg=486 #pos=95 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21868042031131463;  // std dev = 0.488, 4,320.000 (wgt'ed) examples reached here.  /* #neg=2,617 #pos=1,703 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.16653882456488173;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.1359479367489864;  // std dev = 3.135, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return 0.1988458922075612;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.1344874411257721;  // std dev = 1.05e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | | then return 0.1345615207598274;  // std dev = 2.941, 43.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=12 */
%   | | | else return -0.04450824668203267;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.00998613534044004;  // std dev = 6.819, 356.000 (wgt'ed) examples reached here.  /* #neg=301 #pos=55 */
%   | | | else return 0.015985580478460774;  // std dev = 4.672, 162.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=26 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18477432102867608;  // std dev = 0.488, 4,320.000 (wgt'ed) examples reached here.  /* #neg=2,617 #pos=1,703 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), title(H, E) )
%   | | | then return 0.0238463337268111;  // std dev = 6.760, 323.000 (wgt'ed) examples reached here.  /* #neg=267 #pos=56 */
%   | | | else return -0.14691363600917198;  // std dev = 0.045, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else return 0.09491253259496558;  // std dev = 0.430, 66.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=16 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.038941284895466985;  // std dev = 5.605, 207.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=39 */
%   | | | else return 0.1868376074517305;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return -0.14869500328726212;  // std dev = 0.079, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1525553644363608;  // std dev = 0.488, 4,320.000 (wgt'ed) examples reached here.  /* #neg=2,617 #pos=1,703 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.12385872924812638;  // std dev = 1.174, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.12852990363176905;  // std dev = 2.891, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return 0.25654836509656864;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.1445455282950756;  // std dev = 0.054, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | | then return 0.10048568620507974;  // std dev = 3.161, 49.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=14 */
%   | | | else return -0.04083924184058433;  // std dev = 1.305, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.006292929280869912;  // std dev = 6.795, 356.000 (wgt'ed) examples reached here.  /* #neg=301 #pos=55 */
%   | | | else return 0.009435565297336778;  // std dev = 4.662, 162.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=26 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6933985845291994;  // std dev = 0.986, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return -0.2724400942062225;  // std dev = 0.075, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( haswordauthor(H, C) )
%   | | | then return 0.34875265643474845;  // std dev = 1.934, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return -0.002919578516787739;  // std dev = 3.730, 71.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=19 */
%   | else return 0.12172081033310732;  // std dev = 0.488, 4,186.000 (wgt'ed) examples reached here.  /* #neg=2,544 #pos=1,642 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | then return 0.10960355315371456;  // std dev = 0.450, 48.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=14 */
%   | | else return -0.048127722677463375;  // std dev = 0.276, 22.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=2 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return 0.04732153745429886;  // std dev = 0.410, 71.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=16 */
%   | | else return 0.00634929678314726;  // std dev = 0.362, 518.000 (wgt'ed) examples reached here.  /* #neg=437 #pos=81 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( haswordtitle(E, C) )
%   | | then return 0.5545034898394698;  // std dev = 0.099, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( haswordauthor(D, F), haswordtitle(G, F) )
%   | | | then return -0.06265332948570053;  // std dev = 1.127, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.4213374840715374;  // std dev = 1.172, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | else return 0.09724446814022712;  // std dev = 0.486, 4,299.000 (wgt'ed) examples reached here.  /* #neg=2,611 #pos=1,688 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then if ( samebib(J, K), venue(K, A) )
%   | | | then return 0.4823072778011807;  // std dev = 1.131, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return -0.18020394423575853;  // std dev = 0.042, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordauthor(I, L), haswordtitle(M, L) )
%   | | | then return 0.07961445887630828;  // std dev = 2.916, 43.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=12 */
%   | | | else return -0.12233895053479057;  // std dev = 0.047, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0.009735300099781814;  // std dev = 0.368, 589.000 (wgt'ed) examples reached here.  /* #neg=492 #pos=97 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5014322819752097;  // std dev = 1.009, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return -0.2391889221306458;  // std dev = 0.069, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return -0.02590114887286977;  // std dev = 3.774, 77.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=22 */
%   | | | else return 0.35599507448165324;  // std dev = 1.487, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | else return 0.07643177288416537;  // std dev = 0.487, 4,186.000 (wgt'ed) examples reached here.  /* #neg=2,544 #pos=1,642 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | then return 0.09184220985027682;  // std dev = 0.453, 53.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=16 */
%   | | else return -0.05473605139089774;  // std dev = 0.263, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.0010521390598075317;  // std dev = 0.359, 365.000 (wgt'ed) examples reached here.  /* #neg=309 #pos=56 */
%   | | else return 0.017918092448175996;  // std dev = 0.378, 216.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=39 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C), haswordtitle(E, C) )
%   | then return 0.3865724307943041;  // std dev = 0.226, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then if ( haswordtitle(H, F), haswordtitle(H, C) )
%   | | | then return 0.17512581467491256;  // std dev = 3.282, 49.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=27 */
%   | | | else return -0.05726621997871019;  // std dev = 3.658, 81.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=22 */
%   | | else return 0.06079758968494581;  // std dev = 0.487, 4,184.000 (wgt'ed) examples reached here.  /* #neg=2,536 #pos=1,648 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.476386723508558;  // std dev = 1.104, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return -0.1986128895331557;  // std dev = 0.082, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordauthor(J, M), haswordtitle(N, M) )
%   | | | then return 0.061857603225702766;  // std dev = 3.125, 49.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=14 */
%   | | | else return -0.1192683804730892;  // std dev = 0.046, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0.006330271678189781;  // std dev = 0.366, 581.000 (wgt'ed) examples reached here.  /* #neg=486 #pos=95 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04679343484983074;  // std dev = 0.485, 4,320.000 (wgt'ed) examples reached here.  /* #neg=2,617 #pos=1,703 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.3876096032607263;  // std dev = 4.873, 100.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=56 */
%   | | | else return -0.16055654671363812;  // std dev = 0.400, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | | else if ( haswordtitle(E, H), haswordauthor(I, H) )
%   | | | then return -0.1248357734677343;  // std dev = 1.367, 56.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=2 */
%   | | | else return 0.04374501224985106;  // std dev = 3.106, 61.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=12 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, B) )
%   | | | then return 0.02067503471405764;  // std dev = 5.629, 218.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=41 */
%   | | | else return 0.16654036990163207;  // std dev = 1.183, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return -0.1388116182324733;  // std dev = 0.153, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then if ( haswordvenue(B, C) )
%   | | | then return 0.42790908571144404;  // std dev = 17.562, 1,870.000 (wgt'ed) examples reached here.  /* #neg=392 #pos=1,478 */
%   | | | else return 0.3526585684834175;  // std dev = 5.513, 131.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=75 */
%   | | else return -0.30482650248718807;  // std dev = 0.180, 2,309.000 (wgt'ed) examples reached here.  /* #neg=2,237 #pos=72 */
%   | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | then if ( haswordvenue(B, C) )
%   | | | then return -0.023537557459633464;  // std dev = 7.211, 234.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=78 */
%   | | | else return -0.11781319604011643;  // std dev = 1.419, 55.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=2 */
%   | | else if ( haswordtitle(D, I), haswordvenue(B, I) )
%   | | | then return 0.09846734813283535;  // std dev = 3.645, 76.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=23 */
%   | | | else return -0.32292692262116796;  // std dev = 0.173, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then return 0.05012611988972083;  // std dev = 0.390, 251.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=64 */
%   | else return 0.22999706707655396;  // std dev = 0.404, 47.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=24 */


Results
   AUC ROC   = 0.882266
   AUC PR    = 0.801829
   CLL	      = -0.553951
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.016064
   F1        = 0.031621


Total learning time: 3431.3084762096405 seconds
Total inference time: 4.242 seconds
AUC ROC: 0.882266


Dataset: 3_imdb_cora, Fold: 4, Type: Scratch (RDN-B), Time: 02:18:21
{'AUC ROC': 0.882266, 'AUC PR': 0.801829, 'CLL': -0.553951, 'Precision': [1.0, 0.5], 'Recall': 0.016064, 'F1': 0.031621, 'Learning time': 3431.3084762096405, 'Inference time': 4.242}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C), haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.5393083553893678;  // std dev = 3.871, 69.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=47 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return 0.058148935099512376;  // std dev = 3.688, 85.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=17 */
%   | | | else return 0.5052077586289241;  // std dev = 1.970, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.4233663264038595;  // std dev = 4.118, 69.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=39 */
%   | | | else return 0.06296821220794611;  // std dev = 3.677, 83.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=17 */
%   | | else return 0.25180160610285823;  // std dev = 0.489, 5,073.000 (wgt'ed) examples reached here.  /* #neg=3,076 #pos=1,997 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.06926004621062345;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 0.027104979055554243;  // std dev = 0.375, 728.000 (wgt'ed) examples reached here.  /* #neg=605 #pos=123 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21814918732512217;  // std dev = 0.488, 5,406.000 (wgt'ed) examples reached here.  /* #neg=3,278 #pos=2,128 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.413797751736599;  // std dev = 5.546, 125.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=70 */
%   | | | else return -0.14212374437481198;  // std dev = 0.999, 254.000 (wgt'ed) examples reached here.  /* #neg=253 #pos=1 */
%   | | else if ( haswordtitle(E, H), haswordauthor(I, H) )
%   | | | then return -0.11512102028984202;  // std dev = 1.393, 66.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=2 */
%   | | | else return 0.06513402525563779;  // std dev = 3.555, 76.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=16 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, A) )
%   | | | then return 0.052265337093867235;  // std dev = 6.397, 258.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=51 */
%   | | | else return -0.027535615320667426;  // std dev = 1.328, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else return -0.1468723092849256;  // std dev = 0.012, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.184341838918654;  // std dev = 0.488, 5,406.000 (wgt'ed) examples reached here.  /* #neg=3,278 #pos=2,128 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.10112304974166181;  // std dev = 1.128, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.12893948673239247;  // std dev = 3.277, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return 0.1727770950397025;  // std dev = 1.171, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.1449423350510503;  // std dev = 0.050, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return -0.005715847074930951;  // std dev = 6.784, 374.000 (wgt'ed) examples reached here.  /* #neg=320 #pos=54 */
%   | | | else return 0.08538856406820063;  // std dev = 3.461, 75.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=18 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.04041969011310421;  // std dev = 6.023, 264.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=51 */
%   | | | else return -0.12947946775731797;  // std dev = 0.009, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D), haswordtitle(F, C) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.17662832558415137;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.38344399520151357;  // std dev = 3.871, 69.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=47 */
%   | | else if ( haswordauthor(H, C) )
%   | | | then return 0.3573736547066251;  // std dev = 2.080, 18.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | | | else return -0.012152687797378117;  // std dev = 3.607, 84.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=17 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.3292468680312647;  // std dev = 3.510, 55.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=32 */
%   | | | else return 0.017356909359557627;  // std dev = 4.244, 97.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=24 */
%   | | else return 0.15237864791721806;  // std dev = 0.489, 5,073.000 (wgt'ed) examples reached here.  /* #neg=3,076 #pos=1,997 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.04984880231786315;  // std dev = 0.382, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 0.01589097899893888;  // std dev = 0.363, 728.000 (wgt'ed) examples reached here.  /* #neg=605 #pos=123 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12303324387212876;  // std dev = 0.487, 5,406.000 (wgt'ed) examples reached here.  /* #neg=3,278 #pos=2,128 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(H, D) )
%   | | | then return 0.08453050552132771;  // std dev = 1.118, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.10938766485715724;  // std dev = 3.275, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | else if ( author(I, E), venue(I, A) )
%   | | | then return 0.1457813808954513;  // std dev = 1.173, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.13019874390615446;  // std dev = 0.045, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | | then return -0.007171706397206941;  // std dev = 6.785, 374.000 (wgt'ed) examples reached here.  /* #neg=320 #pos=54 */
%   | | | else return 0.07182206569259653;  // std dev = 3.446, 75.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=18 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.0319036669529225;  // std dev = 6.004, 264.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=51 */
%   | | | else return -0.11841859007763217;  // std dev = 0.015, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09812243030511303;  // std dev = 0.487, 5,406.000 (wgt'ed) examples reached here.  /* #neg=3,278 #pos=2,128 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then return 0.09082722978561661;  // std dev = 0.439, 62.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=17 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return 0.12263093986327782;  // std dev = 1.175, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.11616085859126354;  // std dev = 0.041, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | | then return 0.08491532406303902;  // std dev = 3.109, 57.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=15 */
%   | | | else return -0.07543253455529461;  // std dev = 1.248, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.003102697746242192;  // std dev = 7.320, 436.000 (wgt'ed) examples reached here.  /* #neg=365 #pos=71 */
%   | | | else return 0.017433718680925803;  // std dev = 5.387, 210.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=35 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07733313080556366;  // std dev = 0.487, 5,406.000 (wgt'ed) examples reached here.  /* #neg=3,278 #pos=2,128 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then return 0.0858361288675102;  // std dev = 0.414, 62.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=17 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return 0.15211099903473604;  // std dev = 1.091, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.14234093907812093;  // std dev = 0.112, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return -0.01728041992082986;  // std dev = 6.339, 374.000 (wgt'ed) examples reached here.  /* #neg=320 #pos=54 */
%   | | | else return 0.08525164101402752;  // std dev = 3.695, 75.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=18 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.03239572578291718;  // std dev = 6.355, 264.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=51 */
%   | | | else return -0.11171293285597948;  // std dev = 0.093, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06040988760133837;  // std dev = 0.487, 5,406.000 (wgt'ed) examples reached here.  /* #neg=3,278 #pos=2,128 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.071242314567037;  // std dev = 1.179, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.07275934124215735;  // std dev = 3.025, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return 0.12869499375151028;  // std dev = 1.085, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.12590251331168417;  // std dev = 0.102, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return -0.01497638952203977;  // std dev = 6.343, 374.000 (wgt'ed) examples reached here.  /* #neg=320 #pos=54 */
%   | | | else return 0.07377376859314835;  // std dev = 3.694, 75.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=18 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.027994089326967213;  // std dev = 6.354, 264.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=51 */
%   | | | else return -0.10115605431832722;  // std dev = 0.086, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.046881867244757264;  // std dev = 0.486, 5,406.000 (wgt'ed) examples reached here.  /* #neg=3,278 #pos=2,128 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.063069063971145;  // std dev = 1.079, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.07356261615895031;  // std dev = 3.251, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return 0.09389555259578995;  // std dev = 1.170, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.10829095224126166;  // std dev = 0.074, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return -0.0160893742911504;  // std dev = 6.749, 374.000 (wgt'ed) examples reached here.  /* #neg=320 #pos=54 */
%   | | | else return 0.06563231956344064;  // std dev = 3.440, 75.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=18 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.025113954855610156;  // std dev = 5.943, 264.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=51 */
%   | | | else return -0.09293150339913131;  // std dev = 0.069, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( haswordauthor(E, C) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return -0.21245207300255214;  // std dev = 1.49e-08, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( author(G, E), title(G, D) )
%   | | | then return 0.13929279538867825;  // std dev = 3.916, 67.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=40 */
%   | | | else return 0.3924438914035676;  // std dev = 0.878, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | else if ( title(H, D), venue(H, B) )
%   | | then if ( haswordvenue(A, C) )
%   | | | then return 0.029334032601025184;  // std dev = 33.891, 4,876.000 (wgt'ed) examples reached here.  /* #neg=2,998 #pos=1,878 */
%   | | | else return 0.04043891190709295;  // std dev = 7.844, 416.000 (wgt'ed) examples reached here.  /* #neg=318 #pos=98 */
%   | | else if ( title(I, D), venue(I, A) )
%   | | | then return -0.11350805531715358;  // std dev = 4.662, 127.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=28 */
%   | | | else return 0.03614190252890978;  // std dev = 8.080, 335.000 (wgt'ed) examples reached here.  /* #neg=230 #pos=105 */
%   else if ( haswordvenue(A, J), haswordvenue(B, J) )
%   | then return 0.3277725301404789;  // std dev = 0.463, 85.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=59 */
%   | else return 0.014385834061984161;  // std dev = 0.376, 297.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=53 */


Results
   AUC ROC   = 0.542352
   AUC PR    = 0.456809
   CLL	      = -0.677205
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.002677
   F1        = 0.00534


Total learning time: 2394.575732946396 seconds
Total inference time: 3.2 seconds
AUC ROC: 0.542352


Results scoring model
   AUC ROC   = 0.595527
   AUC PR    = 0.454243
   CLL	      = -0.632937
   Precision = 0.675325 at threshold = 0.5
   Recall    = 0.022907
   F1        = 0.044312


Total scoring time: 23.839 seconds
Parameter learned model CLL: -0.632937


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, C), haswordtitle(F, D)', 'true,true,true': 'author(G, E), venue(G, A)', 'true,true,false': 'haswordtitle(H, C)', 'true,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'true,false,true': 'haswordtitle(K, I)', 'false': 'haswordvenue(A, L), haswordauthor(M, L)'}, {'true,true,true,true': [0.0, 10, 0], 'true,true,true,false': [3.871, 22, 47], 'true,true,false,true': [3.688, 68, 17], 'true,true,false,false': [1.97, 6, 11], 'true,false,true,true': [4.118, 30, 39], 'true,false,true,false': [3.677, 66, 17], 'true,false,false': [0.489, 3, 1], 'false,true': [0.408, 71, 19], 'false,false': [0.375, 605, 123]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,true,false': 'haswordtitle(E, H), haswordauthor(I, H)', 'false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,false,true': 'title(L, K), venue(L, A)'}, {'true': [0.488, 3, 2], 'false,true,true,true': [5.546, 55, 70], 'false,true,true,false': [0.999, 253, 1], 'false,true,false,true': [1.393, 64, 2], 'false,true,false,false': [3.555, 60, 16], 'false,false,true,true': [6.397, 207, 51], 'false,false,true,false': [1.328, 15, 2], 'false,false,false': [0.012, 22, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,true': 'haswordauthor(E, F), haswordtitle(G, F)', 'false,true,true': 'haswordtitle(G, D)', 'false,true,false': 'author(H, E), venue(H, A)', 'false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false,true': 'haswordtitle(J, K), haswordauthor(L, K)', 'false,false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true': [0.488, 3, 2], 'false,true,true,true': [1.128, 6, 2], 'false,true,true,false': [3.277, 39, 15], 'false,true,false,true': [1.171, 4, 2], 'false,true,false,false': [0.05, 22, 0], 'false,false,true,true': [6.784, 320, 54], 'false,false,true,false': [3.461, 57, 18], 'false,false,false,true': [6.023, 213, 51], 'false,false,false,false': [0.009, 15, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D), haswordtitle(F, C)', 'true,true,true': 'author(G, E), venue(G, A)', 'true,true,false': 'haswordauthor(H, C)', 'true,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'true,false,true': 'author(K, J), venue(K, A)', 'false': 'haswordvenue(A, L), haswordauthor(M, L)'}, {'true,true,true,true': [0.0, 10, 0], 'true,true,true,false': [3.871, 22, 47], 'true,true,false,true': [2.08, 7, 11], 'true,true,false,false': [3.607, 67, 17], 'true,false,true,true': [3.51, 23, 32], 'true,false,true,false': [4.244, 73, 24], 'true,false,false': [0.489, 3, 1], 'false,true': [0.382, 71, 19], 'false,false': [0.363, 605, 123]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,true': 'haswordauthor(E, F), haswordtitle(G, F)', 'false,true,true': 'haswordtitle(H, D)', 'false,true,false': 'author(I, E), venue(I, A)', 'false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,false,true': 'haswordtitle(K, L), haswordauthor(M, L)', 'false,false,false': 'haswordvenue(B, N), haswordtitle(P, N)'}, {'true': [0.487, 3, 2], 'false,true,true,true': [1.118, 6, 2], 'false,true,true,false': [3.275, 39, 15], 'false,true,false,true': [1.173, 4, 2], 'false,true,false,false': [0.045, 22, 0], 'false,false,true,true': [6.785, 320, 54], 'false,false,true,false': [3.446, 57, 18], 'false,false,false,true': [6.004, 213, 51], 'false,false,false,false': [0.015, 15, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,true': 'haswordauthor(E, F), haswordtitle(G, F)', 'false,true,false': 'author(H, E), venue(H, A)', 'false,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false,true': 'haswordauthor(J, K), haswordtitle(L, K)', 'false,false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true': [0.487, 3, 2], 'false,true,true': [0.439, 45, 17], 'false,true,false,true': [1.175, 4, 2], 'false,true,false,false': [0.041, 22, 0], 'false,false,true,true': [3.109, 42, 15], 'false,false,true,false': [1.248, 23, 2], 'false,false,false,true': [7.32, 365, 71], 'false,false,false,false': [5.387, 175, 35]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'haswordauthor(E, F), haswordtitle(G, F)', 'false,true,false': 'author(H, E), venue(H, B)', 'false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false,true': 'haswordtitle(J, K), haswordauthor(L, K)', 'false,false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true': [0.487, 3, 2], 'false,true,true': [0.414, 45, 17], 'false,true,false,true': [1.091, 4, 2], 'false,true,false,false': [0.112, 22, 0], 'false,false,true,true': [6.339, 320, 54], 'false,false,true,false': [3.695, 57, 18], 'false,false,false,true': [6.355, 213, 51], 'false,false,false,false': [0.093, 15, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'haswordauthor(E, F), haswordtitle(G, F)', 'false,true,true': 'haswordtitle(G, D)', 'false,true,false': 'author(H, E), venue(H, B)', 'false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false,true': 'haswordtitle(J, K), haswordauthor(L, K)', 'false,false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true': [0.487, 3, 2], 'false,true,true,true': [1.179, 6, 2], 'false,true,true,false': [3.025, 39, 15], 'false,true,false,true': [1.085, 4, 2], 'false,true,false,false': [0.102, 22, 0], 'false,false,true,true': [6.343, 320, 54], 'false,false,true,false': [3.694, 57, 18], 'false,false,false,true': [6.354, 213, 51], 'false,false,false,false': [0.086, 15, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,true': 'haswordauthor(E, F), haswordtitle(G, F)', 'false,true,true': 'haswordtitle(G, D)', 'false,true,false': 'author(H, E), venue(H, A)', 'false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false,true': 'haswordtitle(J, K), haswordauthor(L, K)', 'false,false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true': [0.486, 3, 2], 'false,true,true,true': [1.079, 6, 2], 'false,true,true,false': [3.251, 39, 15], 'false,true,false,true': [1.17, 4, 2], 'false,true,false,false': [0.074, 22, 0], 'false,false,true,true': [6.749, 320, 54], 'false,false,true,false': [3.44, 57, 18], 'false,false,false,true': [5.943, 213, 51], 'false,false,false,false': [0.069, 15, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordtitle(D, C)', 'true': 'haswordauthor(E, C)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,false': 'author(G, E), title(G, D)', 'true,false': 'title(H, D), venue(H, B)', 'true,false,true': 'haswordvenue(A, C)', 'true,false,false': 'title(I, D), venue(I, A)', 'false': 'haswordvenue(A, J), haswordvenue(B, J)'}, {'true,true,true': [1.49e-08, 10, 0], 'true,true,false,true': [3.916, 27, 40], 'true,true,false,false': [0.878, 2, 9], 'true,false,true,true': [33.891, 2, 1], 'true,false,true,false': [7.844, 318, 98], 'true,false,false,true': [4.662, 99, 28], 'true,false,false,false': [8.08, 230, 105], 'false,true': [0.463, 26, 59], 'false,false': [0.376, 244, 53]}]]
[{'': [0.23868684840518212, 0.14345920935432135], 'true': [0.24266658526906973, 0.23853358668522961], 'true,true': [0.24098702131068755, 0.19915417147251005], 'true,true,true': [-1.1102230246251566e-17, 0.21718126444024383], 'true,false': [0.2326869806094185, 0.23869024561522248], 'true,false,true': [0.24574669187145684, 0.16286834083321183], 'true,true,false': [0.15999999999999945, 0.228373702422145], 'false': [0.16654320987654267, 0.14040989916676855]}, {'': [0.23785910745371827, 0.14341813117979899], 'false': [0.1415515779108228, 0.14665130563542184], 'false,false': [0.1555891883473882, 6.117571947385845e-06], 'false,false,true': [0.1586075737982337, 0.10380622837370237], 'false,true': [0.15211480152867532, 0.11075034870781796], 'false,true,true': [0.24610190103921173, 0.0039323136649218535], 'false,true,false': [0.029400609047550694, 0.1662943148651471]}, {'': [0.23775266595128317, 0.1346046807670584], 'false': [0.16281938207510505, 0.13089783922513867], 'false,true': [0.19380545315858647, 0.06603950606974787], 'false,true,true': [0.15917480272451032, 0.19883608064222394], 'false,false': [0.13034133779960214, 0.13150076858342474], 'false,false,false': [0.13742019453475127, 5.068631833267852e-06], 'false,false,true': [0.12305748820379935, 0.15974987060155357], 'false,true,false': [0.2284505597978629, 0.00011437455631801985]}, {'': [0.23766483078950212, 0.13361334611284534], 'true': [0.22145175618496674, 0.23821935051649984], 'true,false': [0.22202615305343845, 0.2386902456153262], 'true,false,true': [0.22402900458988206, 0.18569219948160143], 'true,true': [0.2243702877064308, 0.18980178055215507], 'true,true,true': [-1.6653345369377347e-17, 0.21718126444024385], 'true,true,false': [0.2403810585573035, 0.15486635481246264], 'false': [0.1459198756874875, 0.13196506158152582]}, {'': [0.236853421660549, 0.13344329101966443], 'false': [0.1591387741269896, 0.13010614647330246], 'false,true': [0.19322264707069797, 0.06202646722701634], 'false,true,true': [0.15626514427164476, 0.19861810642923552], 'false,false': [0.1298280709427891, 0.13035827618567733], 'false,false,false': [0.1365493034549848, 1.429598381110601e-05], 'false,false,true': [0.12307713799969786, 0.15829502612582685], 'false,true,false': [0.2292702463089666, 9.344977335574863e-05]}, {'': [0.23677824604391404, 0.1326606706041006], 'false': [0.1564049452882794, 0.12961673752820863], 'false,true': [0.19287300446713768, 0.05892844828596423], 'false,false': [0.1422806507420139, 0.12791924152166304], 'false,false,true': [0.16953497716474447, 0.062268203101619915], 'false,false,false': [0.12289729413223957, 0.13820714650096655], 'false,true,false': [0.2299157300338116, 7.665547614815244e-05]}, {'': [0.23672384551898593, 0.13213717693918625], 'false': [0.14172893045311968, 0.13088192029173953], 'false,true': [0.17126541569690923, 0.05755347109001357], 'false,false': [0.12134520668442014, 0.1458501537441599], 'false,false,false': [0.15298749798859373, 0.0005821113482115762], 'false,false,true': [0.10742749907785852, 0.18199139132632516], 'false,true,false': [0.19835318942241528, 0.0005745599387885946]}, {'': [0.23668485936155012, 0.13146203558514594], 'false': [0.13810521552837823, 0.1305975513172099], 'false,true': [0.1699526337792301, 0.053319081713358175], 'false,true,true': [0.17366910925795123, 0.16940174786846043], 'false,false': [0.12110957186010073, 0.1455894812854175], 'false,false,false': [0.1529368347167205, 0.0004930625598937902], 'false,false,true': [0.10758813896965744, 0.1819755488222138], 'false,true,false': [0.19617051577894729, 0.0004696231377287474]}, {'': [0.236656972721613, 0.13095012987362503], 'false': [0.1518646799294984, 0.12830198724151418], 'false,true': [0.18930794343975693, 0.0559919988538797], 'false,true,true': [0.14557756199255154, 0.19577231012864763], 'false,false': [0.12873839557961056, 0.12732230949925313], 'false,false,true': [0.1218009845111923, 0.15777006840550264], 'false,false,false': [0.13378933962046444, 0.0003170281951548892], 'false,true,false': [0.22826828717120273, 0.00024768885589972076]}, {'': [0.22573784086103552, 0.17450451479203233], 'true': [0.20498529603947657, 0.2258935963105695], 'true,false': [0.22868102818576022, 0.19282510660972657], 'true,false,true': [0.2355630504405483, 0.14790216217925664], 'true,true': [2.2204460492503132e-17, 0.2142070369098287], 'true,true,false': [0.22883196550389687, 0.07008014450146273], 'true,false,false': [0.171103041540466, 0.19490380723573753], 'false': [0.21397206379790143, 0.14135580608710735]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
0;true,true;haswordtitle(F, C), haswordtitle(F, D).;true;true
0;true,true,true;author(G, E), venue(G, A).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
1;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
2;false,true;haswordauthor(E, F), haswordtitle(G, F).;true;true
2;false,true,false;author(H, E), venue(H, A).;true;true
2;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
2;false,false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
3;true,true;haswordtitle(F, D), haswordtitle(F, C).;true;true
3;true,true,true;author(G, E), venue(G, A).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
4;false,true;haswordauthor(E, F), haswordtitle(G, F).;true;true
4;false,true,false;author(I, E), venue(I, A).;true;true
4;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;true
4;false,false,false;haswordvenue(B, N), haswordtitle(P, N).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
5;false,true;haswordauthor(E, F), haswordtitle(G, F).;true;true
5;false,true,false;author(H, E), venue(H, A).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
6;false,true;haswordauthor(E, F), haswordtitle(G, F).;true;true
6;false,true,false;author(H, E), venue(H, B).;true;true
6;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
6;false,false,false;haswordvenue(A, M), haswordtitle(N, M).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
7;false,true;haswordauthor(E, F), haswordtitle(G, F).;true;true
7;false,true,false;author(H, E), venue(H, B).;true;true
7;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
7;false,false,false;haswordvenue(A, M), haswordtitle(N, M).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
8;false,true;haswordauthor(E, F), haswordtitle(G, F).;true;true
8;false,true,false;author(H, E), venue(H, A).;true;true
8;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
8;false,false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true
9;;samevenue(A, B) :- haswordvenue(B, C), haswordtitle(D, C).;true;true
9;true;haswordauthor(E, C).;true;true
9;true,true;author(F, E), venue(F, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C), haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.5393083553893678;  // std dev = 3.871, 69.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=47 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return 0.058148935099512376;  // std dev = 3.688, 85.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=17 */
%   | | | else return 0.5052077586289241;  // std dev = 1.970, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else return 0.2510675953865885;  // std dev = 0.488, 5,225.000 (wgt'ed) examples reached here.  /* #neg=3,172 #pos=2,053 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(M, I) )
%   | | | then return 0.10814893509951218;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.13592671287729013;  // std dev = 3.291, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | else return -0.07042249347191638;  // std dev = 0.258, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | else return 0.027104979055554243;  // std dev = 0.375, 728.000 (wgt'ed) examples reached here.  /* #neg=605 #pos=123 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C), haswordtitle(F, D) )
%   | | then if ( haswordauthor(G, C) )
%   | | | then return 0.7791451475700202;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.3747922322391921;  // std dev = 4.186, 71.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=39 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return 0.025840768676782516;  // std dev = 3.719, 85.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=17 */
%   | | | else return 0.44840521191748633;  // std dev = 1.981, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else return 0.21758559937376806;  // std dev = 0.488, 5,225.000 (wgt'ed) examples reached here.  /* #neg=3,172 #pos=2,053 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | then return 0.12918323411686905;  // std dev = 0.445, 62.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=17 */
%   | | else return -0.07512611942812578;  // std dev = 0.258, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.014988455036629824;  // std dev = 0.367, 449.000 (wgt'ed) examples reached here.  /* #neg=377 #pos=72 */
%   | | else return 0.03617077256870824;  // std dev = 0.386, 279.000 (wgt'ed) examples reached here.  /* #neg=228 #pos=51 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18427393207983786;  // std dev = 0.487, 5,406.000 (wgt'ed) examples reached here.  /* #neg=3,278 #pos=2,128 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.09196862984884369;  // std dev = 1.213, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.11417443389695298;  // std dev = 3.285, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return 0.19601685092467516;  // std dev = 1.154, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.13906329212702484;  // std dev = 0.019, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return -0.004402761315834148;  // std dev = 6.795, 374.000 (wgt'ed) examples reached here.  /* #neg=320 #pos=54 */
%   | | | else return 0.09291158815238482;  // std dev = 3.699, 75.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=18 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.044375850623231974;  // std dev = 6.400, 264.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=51 */
%   | | | else return -0.1486354946181243;  // std dev = 0.029, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.15217037177989995;  // std dev = 0.487, 5,406.000 (wgt'ed) examples reached here.  /* #neg=3,278 #pos=2,128 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.08811410411072945;  // std dev = 1.199, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.11211257675499102;  // std dev = 3.275, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return 0.19289531991379227;  // std dev = 1.153, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.14074248165438122;  // std dev = 0.053, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return -0.008509791244484553;  // std dev = 6.780, 374.000 (wgt'ed) examples reached here.  /* #neg=320 #pos=54 */
%   | | | else return 0.09341591823333656;  // std dev = 3.699, 75.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=18 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.0398251876422894;  // std dev = 6.379, 264.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=51 */
%   | | | else return -0.13630788295542243;  // std dev = 0.069, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( haswordtitle(E, C) )
%   | | then return 0.536212034613952;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( haswordauthor(D, F), haswordtitle(G, F) )
%   | | | then return 0.062012958345369726;  // std dev = 1.577, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.5186563188668518;  // std dev = 1.176, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | else return 0.12208141113058496;  // std dev = 0.487, 5,379.000 (wgt'ed) examples reached here.  /* #neg=3,270 #pos=2,109 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( haswordauthor(I, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, H) )
%   | | | then return 0.07582331343683553;  // std dev = 1.198, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.09603979168790198;  // std dev = 3.274, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | else return -0.06189472088782089;  // std dev = 0.249, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.007413641643928616;  // std dev = 0.366, 449.000 (wgt'ed) examples reached here.  /* #neg=377 #pos=72 */
%   | | else return 0.026221341972551628;  // std dev = 0.384, 279.000 (wgt'ed) examples reached here.  /* #neg=228 #pos=51 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5854298922172309;  // std dev = 1.362, 38.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=36 */
%   | | | else return -0.2708151912765232;  // std dev = 0.272, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return -0.026366132049932194;  // std dev = 4.251, 106.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=29 */
%   | | | else return 0.23850631074659145;  // std dev = 1.915, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | else return 0.0982950179186286;  // std dev = 0.488, 5,225.000 (wgt'ed) examples reached here.  /* #neg=3,172 #pos=2,053 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, I) )
%   | | | then return 0.06466839261080527;  // std dev = 1.196, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.08132833758100934;  // std dev = 3.273, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | else return -0.054924818897441434;  // std dev = 0.249, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | else return 0.012691613823543599;  // std dev = 0.373, 728.000 (wgt'ed) examples reached here.  /* #neg=605 #pos=123 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07726998437543517;  // std dev = 0.486, 5,406.000 (wgt'ed) examples reached here.  /* #neg=3,278 #pos=2,128 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.07602755867602731;  // std dev = 1.178, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.0888826992530527;  // std dev = 3.265, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return 0.16166700933473196;  // std dev = 1.151, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.1321588309151906;  // std dev = 0.071, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return -0.013450775160819389;  // std dev = 6.777, 374.000 (wgt'ed) examples reached here.  /* #neg=320 #pos=54 */
%   | | | else return 0.07918637966518806;  // std dev = 3.699, 75.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=18 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.031232034381392375;  // std dev = 6.362, 264.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=51 */
%   | | | else return -0.12394735147291382;  // std dev = 0.097, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D), haswordtitle(F, C) )
%   | | then if ( haswordvenue(A, D) )
%   | | | then return 0.3580694887396164;  // std dev = 0.163, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1832758943651264;  // std dev = 4.174, 71.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=39 */
%   | | else if ( haswordtitle(G, C) )
%   | | | then return -0.09338765369918742;  // std dev = 3.664, 85.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=17 */
%   | | | else return 0.18882686084859107;  // std dev = 1.942, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else return 0.06032843031752098;  // std dev = 0.487, 5,225.000 (wgt'ed) examples reached here.  /* #neg=3,172 #pos=2,053 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( haswordauthor(I, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, H) )
%   | | | then return 0.06489094300239878;  // std dev = 1.176, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.07490532838575684;  // std dev = 3.264, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | else return -0.06306460998963027;  // std dev = 0.242, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | else return 0.008519784389242313;  // std dev = 0.372, 728.000 (wgt'ed) examples reached here.  /* #neg=605 #pos=123 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C), haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return -0.19798174704172927;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.20101298062676393;  // std dev = 3.308, 69.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=47 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return -0.08500234009292572;  // std dev = 3.594, 85.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=17 */
%   | | | else return 0.1393769883299647;  // std dev = 1.939, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else return 0.04706377537229719;  // std dev = 0.488, 5,225.000 (wgt'ed) examples reached here.  /* #neg=3,172 #pos=2,053 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.4883815796340145;  // std dev = 1.109, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return -0.16725880900439596;  // std dev = 0.051, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.003825847673548503;  // std dev = 0.377, 79.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=15 */
%   | else return 0.007171020923511244;  // std dev = 0.372, 728.000 (wgt'ed) examples reached here.  /* #neg=605 #pos=123 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, B) )
%   | then if ( haswordvenue(A, C) )
%   | | then return 0.03157211944284492;  // std dev = 0.484, 4,955.000 (wgt'ed) examples reached here.  /* #neg=3,030 #pos=1,925 */
%   | | else return 0.04275041567285548;  // std dev = 0.404, 425.000 (wgt'ed) examples reached here.  /* #neg=325 #pos=100 */
%   | else if ( title(F, D), venue(F, A) )
%   | | then if ( haswordvenue(A, C) )
%   | | | then return -0.12030245028033396;  // std dev = 4.456, 110.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=26 */
%   | | | else return -0.06421688785524449;  // std dev = 1.366, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else if ( haswordvenue(A, C) )
%   | | | then return 0.08604224668936411;  // std dev = 6.883, 192.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=85 */
%   | | | else return -0.039072137678553324;  // std dev = 4.138, 143.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=20 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, A) )
%   | | then return 0.06061927037796201;  // std dev = 0.413, 293.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=75 */
%   | | else return -0.10961223973967202;  // std dev = 0.340, 25.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=3 */
%   | else return 0.2356716374315233;  // std dev = 0.404, 64.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=34 */


Results
   AUC ROC   = 0.541193
   AUC PR    = 0.457955
   CLL	      = -0.677992
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.001339
   F1        = 0.002674


Total learning time: 3661.5348858833313 seconds
Total inference time: 3.548 seconds
AUC ROC: 0.541193


Results scoring model
   AUC ROC   = 0.596908
   AUC PR    = 0.459961
   CLL	      = -0.635419
   Precision = 0.903846 at threshold = 0.5
   Recall    = 0.020705
   F1        = 0.040482


Total scoring time: 22.251 seconds
Refined model CLL: -0.635419


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.542352
   AUC PR    = 0.456809
   CLL	      = -0.677205
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.002677
   F1        = 0.00534


Total learning time: 6102.200618829727 seconds
Total inference time: 3.2 seconds
AUC ROC: 0.542352
Total revision time: 6102.200618829727
Best scored revision CLL: -0.632937


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 04:00:17
{'AUC ROC': 0.542352, 'AUC PR': 0.456809, 'CLL': -0.677205, 'Precision': [1.0, 0.5], 'Recall': 0.002677, 'F1': 0.00534, 'Learning time': 6102.200618829727, 'Inference time': 3.2, 'parameter_1.0': {'AUC ROC': 0.542352, 'AUC PR': 0.456809, 'CLL': -0.677205, 'Precision': [1.0, 0.5], 'Recall': 0.002677, 'F1': 0.00534, 'Learning time': 2394.575732946396, 'Inference time': 3.2}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C), haswordtitle(F, D) )
%   | | then if ( haswordvenue(A, D) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.407444709747399;  // std dev = 4.193, 71.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=39 */
%   | | else if ( haswordtitle(G, C) )
%   | | | then return 0.058148935099512376;  // std dev = 3.688, 85.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=17 */
%   | | | else return 0.5052077586289241;  // std dev = 1.970, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else return 0.2510675953865885;  // std dev = 0.488, 5,225.000 (wgt'ed) examples reached here.  /* #neg=3,172 #pos=2,053 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( haswordauthor(I, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, H) )
%   | | | then return 0.10814893509951218;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.13592671287729013;  // std dev = 3.291, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | else return -0.07042249347191638;  // std dev = 0.258, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | else return 0.027104979055554243;  // std dev = 0.375, 728.000 (wgt'ed) examples reached here.  /* #neg=605 #pos=123 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D), haswordtitle(F, C) )
%   | | then if ( haswordauthor(G, C) )
%   | | | then return 0.7194734122109543;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.35029564201333874;  // std dev = 4.193, 71.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=39 */
%   | | else if ( haswordauthor(H, C) )
%   | | | then return 0.4253860262149795;  // std dev = 2.076, 18.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | | | else return 0.04780591728305329;  // std dev = 3.621, 84.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=17 */
%   | else return 0.2176781446922305;  // std dev = 0.488, 5,225.000 (wgt'ed) examples reached here.  /* #neg=3,172 #pos=2,053 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | then return 0.11545286194823276;  // std dev = 0.446, 62.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=17 */
%   | | else return -0.06206427265859217;  // std dev = 0.258, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.015173673294556605;  // std dev = 0.367, 449.000 (wgt'ed) examples reached here.  /* #neg=377 #pos=72 */
%   | | else return 0.03761302478053433;  // std dev = 0.386, 279.000 (wgt'ed) examples reached here.  /* #neg=228 #pos=51 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18423913142075346;  // std dev = 0.488, 5,406.000 (wgt'ed) examples reached here.  /* #neg=3,278 #pos=2,128 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then return 0.0994214111951705;  // std dev = 0.446, 62.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=17 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return 0.20685774521356923;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.1264755881197641;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | | then return 0.11374245646547337;  // std dev = 3.323, 57.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=15 */
%   | | | else return -0.06957273121184931;  // std dev = 1.356, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.014466593007551286;  // std dev = 7.709, 436.000 (wgt'ed) examples reached here.  /* #neg=365 #pos=71 */
%   | | | else return 0.019455605047595165;  // std dev = 5.401, 210.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=35 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6491305046677427;  // std dev = 1.334, 38.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=36 */
%   | | | else return -0.21651096821622492;  // std dev = 0.258, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( haswordauthor(E, C) )
%   | | | then return 0.3059657626547048;  // std dev = 2.149, 23.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   | | | else return 0.02245659964832051;  // std dev = 4.196, 97.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=24 */
%   | else return 0.15188395602991417;  // std dev = 0.488, 5,225.000 (wgt'ed) examples reached here.  /* #neg=3,172 #pos=2,053 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( haswordauthor(I, J), haswordtitle(K, J) )
%   | | then return 0.08461582475544835;  // std dev = 0.446, 62.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=17 */
%   | | else return -0.04986368805699714;  // std dev = 0.250, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.05003260474218573;  // std dev = 0.403, 82.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=17 */
%   | | else return 0.01404892170150945;  // std dev = 0.370, 646.000 (wgt'ed) examples reached here.  /* #neg=540 #pos=106 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then return 0.24350573561266908;  // std dev = 0.374, 61.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=36 */
%   | | else if ( haswordtitle(G, C) )
%   | | | then return 0.026294325959225522;  // std dev = 4.263, 104.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=29 */
%   | | | else return 0.2822166636183152;  // std dev = 2.004, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | else return 0.12301889309298798;  // std dev = 0.488, 5,225.000 (wgt'ed) examples reached here.  /* #neg=3,172 #pos=2,053 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | then return 0.004608066566845333;  // std dev = 0.364, 443.000 (wgt'ed) examples reached here.  /* #neg=372 #pos=71 */
%   | | else return 0.07809804014014667;  // std dev = 0.423, 78.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=18 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, A) )
%   | | | then return 0.04069554649893673;  // std dev = 6.374, 258.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=51 */
%   | | | else return -0.03701994636424629;  // std dev = 1.330, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else return -0.1532778635688806;  // std dev = 0.128, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09804267865307849;  // std dev = 0.486, 5,406.000 (wgt'ed) examples reached here.  /* #neg=3,278 #pos=2,128 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.08377574649124807;  // std dev = 1.193, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.10396564724490044;  // std dev = 3.266, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return 0.18194018498239115;  // std dev = 1.153, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.15474715553017881;  // std dev = 0.089, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return -0.01376003685158834;  // std dev = 6.784, 374.000 (wgt'ed) examples reached here.  /* #neg=320 #pos=54 */
%   | | | else return 0.08875274041690973;  // std dev = 3.698, 75.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=18 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.03467419528731811;  // std dev = 6.366, 264.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=51 */
%   | | | else return -0.13301928572075541;  // std dev = 0.094, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07729357345716412;  // std dev = 0.486, 5,406.000 (wgt'ed) examples reached here.  /* #neg=3,278 #pos=2,128 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.07189308328233368;  // std dev = 1.191, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.08855415266821298;  // std dev = 3.265, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return 0.1570577242586484;  // std dev = 1.152, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.13561619591204147;  // std dev = 0.080, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return -0.011937948081071462;  // std dev = 6.784, 374.000 (wgt'ed) examples reached here.  /* #neg=320 #pos=54 */
%   | | | else return 0.07700346196646542;  // std dev = 3.698, 75.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=18 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.030013291201397837;  // std dev = 6.365, 264.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=51 */
%   | | | else return -0.11848153912658982;  // std dev = 0.086, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.060398597351410566;  // std dev = 0.486, 5,406.000 (wgt'ed) examples reached here.  /* #neg=3,278 #pos=2,128 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.061176593835698456;  // std dev = 1.189, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.07462010137806299;  // std dev = 3.263, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return 0.13308462697779366;  // std dev = 1.152, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.1205232166108114;  // std dev = 0.072, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return -0.010371018087188044;  // std dev = 6.784, 374.000 (wgt'ed) examples reached here.  /* #neg=320 #pos=54 */
%   | | | else return 0.06622357286474653;  // std dev = 3.698, 75.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=18 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.025890718433488957;  // std dev = 6.364, 264.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=51 */
%   | | | else return -0.10670569769950526;  // std dev = 0.078, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04688893962916794;  // std dev = 0.486, 5,406.000 (wgt'ed) examples reached here.  /* #neg=3,278 #pos=2,128 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordauthor(G, F) )
%   | | then if ( haswordvenue(B, F) )
%   | | | then return 0.051675634356064606;  // std dev = 1.188, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return -0.009646967247506287;  // std dev = 7.527, 435.000 (wgt'ed) examples reached here.  /* #neg=366 #pos=69 */
%   | | else return 0.07208186014953165;  // std dev = 0.423, 78.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=18 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.03259374632985289;  // std dev = 6.313, 258.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=51 */
%   | | | else return -0.032515768232527505;  // std dev = 1.339, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else return -0.10671975856206654;  // std dev = 0.147, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, B) )
%   | then if ( haswordvenue(A, C) )
%   | | then return 0.03146155190707032;  // std dev = 0.485, 4,955.000 (wgt'ed) examples reached here.  /* #neg=3,030 #pos=1,925 */
%   | | else return 0.04057909143828444;  // std dev = 0.406, 425.000 (wgt'ed) examples reached here.  /* #neg=325 #pos=100 */
%   | else if ( title(F, D), venue(F, A) )
%   | | then return -0.11286483017257294;  // std dev = 0.414, 127.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=28 */
%   | | else if ( haswordvenue(A, C) )
%   | | | then return 0.08595610634286029;  // std dev = 6.883, 192.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=85 */
%   | | | else return -0.035257399052501526;  // std dev = 4.144, 143.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=20 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.30967995528729697;  // std dev = 2.833, 35.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=24 */
%   | | | else return -0.23507408391424509;  // std dev = 0.939, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return 0.4334561386665869;  // std dev = 0.387, 42.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=34 */
%   | else return 0.015579885742283181;  // std dev = 0.376, 297.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=53 */


Results
   AUC ROC   = 0.542694
   AUC PR    = 0.465188
   CLL	      = -0.675674
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.013387
   F1        = 0.02642


Total learning time: 3846.960829973221 seconds
Total inference time: 3.068 seconds
AUC ROC: 0.542694


Dataset: 3_imdb_cora, Fold: 4, Type: Scratch (RDN-B), Time: 05:04:29
{'AUC ROC': 0.542694, 'AUC PR': 0.465188, 'CLL': -0.675674, 'Precision': [1.0, 0.5], 'Recall': 0.013387, 'F1': 0.02642, 'Learning time': 3846.960829973221, 'Inference time': 3.068}


Starting fold 5

Target train facts examples: 33914
Target train pos examples: 2467
Target train neg examples: 4522

Target test facts examples: 8644
Target test pos  examples: 550
Target test neg examples: 500

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.6321602345345362;  // std dev = 9.637, 531.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=411 */
%   | | | else return -0.10303118912409005;  // std dev = 4.902, 644.000 (wgt'ed) examples reached here.  /* #neg=619 #pos=25 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.08037115732173453;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return 0.11740819435877163;  // std dev = 2.277, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.5581489350995124;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.6273797043302815;  // std dev = 1.519, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return 0.0248156017661786;  // std dev = 0.373, 144.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=24 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.5367656206748814;  // std dev = 9.637, 531.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=411 */
%   | | | else return -0.090945912301741;  // std dev = 4.902, 644.000 (wgt'ed) examples reached here.  /* #neg=619 #pos=25 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.07030324498182232;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return 0.10250668322505756;  // std dev = 2.277, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.47588605454691735;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.5328490890947368;  // std dev = 1.519, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return 0.021767884192405756;  // std dev = 0.373, 144.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=24 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.4267442807870245;  // std dev = 9.637, 531.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=411 */
%   | | | else return -0.08101686370728066;  // std dev = 4.902, 644.000 (wgt'ed) examples reached here.  /* #neg=619 #pos=25 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.06102210441531307;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return 0.08847583230893136;  // std dev = 2.277, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.382647398804739;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.4239325089396988;  // std dev = 1.519, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return 0.3912569620992536;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return 0.01904987294481085;  // std dev = 0.373, 144.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=24 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.10697180895284271;  // std dev = 0.372, 1,175.000 (wgt'ed) examples reached here.  /* #neg=739 #pos=436 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.05259950478597556;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return 0.07557895462034796;  // std dev = 2.277, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordvenue(A, I) )
%   | | | then return -0.023088589435215433;  // std dev = 0.739, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.34467302064371586;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.3229819329672577;  // std dev = 1.519, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return 0.3005711547884894;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return -0.0010937200616110388;  // std dev = 0.356, 94.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=14 */
%   | else return 0.04997010972562301;  // std dev = 0.400, 50.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=10 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.08890104356498921;  // std dev = 0.368, 1,175.000 (wgt'ed) examples reached here.  /* #neg=739 #pos=436 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.045061565721578795;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return 0.06397460310664428;  // std dev = 2.277, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.22777312466190264;  // std dev = 1.429, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return -0.09950822998545862;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.24247055537624246;  // std dev = 1.519, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return 0.22629823971521876;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return -9.543012497610604E-4;  // std dev = 0.356, 94.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=14 */
%   | else return 0.043485827041495034;  // std dev = 0.400, 50.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=10 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.07116197915037252;  // std dev = 0.364, 1,164.000 (wgt'ed) examples reached here.  /* #neg=732 #pos=432 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.14337221198808012;  // std dev = 2.407, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
%   | | | else return 0.053724771332972446;  // std dev = 2.277, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordvenue(A, I) )
%   | | | then return -0.03674815402195409;  // std dev = 0.723, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.20285830283954498;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.18270684819255756;  // std dev = 1.519, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return 0.16984358676510128;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return -8.327416416201985E-4;  // std dev = 0.356, 94.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=14 */
%   | else return 0.03765881901952532;  // std dev = 0.400, 50.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.058444170381298996;  // std dev = 0.361, 1,164.000 (wgt'ed) examples reached here.  /* #neg=732 #pos=432 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.12600836044544686;  // std dev = 2.407, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
%   | | | else return 0.044813211773260135;  // std dev = 2.277, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.13331890467039237;  // std dev = 1.420, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return -0.08794753638481699;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.13920656791416966;  // std dev = 1.519, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return 0.12813320688246752;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return -7.267327563195067E-4;  // std dev = 0.356, 94.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=14 */
%   | else return 0.03247239037272519;  // std dev = 0.400, 50.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=10 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.047832595783784404;  // std dev = 0.359, 1,164.000 (wgt'ed) examples reached here.  /* #neg=732 #pos=432 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.10923742969059658;  // std dev = 2.407, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
%   | | | else return 0.037167465622064896;  // std dev = 2.277, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.12096184095919366;  // std dev = 1.349, 15.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=10 */
%   | | | else return -0.20694562990852328;  // std dev = 0.900, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.12161241323304561;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.09743184803714998;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return -6.342694434513385E-4;  // std dev = 0.356, 94.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=14 */
%   | else return 0.027894703041261338;  // std dev = 0.400, 50.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=10 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.039041834286002206;  // std dev = 0.358, 1,164.000 (wgt'ed) examples reached here.  /* #neg=732 #pos=432 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.0935115703151858;  // std dev = 2.407, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
%   | | | else return 0.03067988872521299;  // std dev = 2.277, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.1231326132221106;  // std dev = 1.143, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return -0.04014047647774574;  // std dev = 0.826, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.08657793709727503;  // std dev = 1.483, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return 0.07468131696953094;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return -5.536088572191727E-4;  // std dev = 0.356, 94.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=14 */
%   | else return 0.023883697821770335;  // std dev = 0.400, 50.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.03179929039962012;  // std dev = 0.357, 1,164.000 (wgt'ed) examples reached here.  /* #neg=732 #pos=432 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.07915306582867986;  // std dev = 2.407, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
%   | | | else return 0.025225082962538933;  // std dev = 2.277, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.08388807408827616;  // std dev = 1.333, 15.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=10 */
%   | | | else return -0.1838855129666471;  // std dev = 0.897, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.08009055382996992;  // std dev = 1.218, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.057651940521137104;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return -4.832352535036888E-4;  // std dev = 0.356, 94.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=14 */
%   | else return 0.020391339517660905;  // std dev = 0.400, 50.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=10 */


Results
   AUC ROC   = 0.887796
   AUC PR    = 0.866859
   CLL	      = -0.492025
   Precision = 0.897059 at threshold = 0.5
   Recall    = 0.887273
   F1        = 0.892139


Total learning time: 1742.033341884613 seconds
Total inference time: 4.428 seconds
AUC ROC: 0.887796


Results scoring model
   AUC ROC   = 0.879644
   AUC PR    = 0.74834
   CLL	      = -0.428715
   Precision = 0.772809 at threshold = 0.5
   Recall    = 0.876268
   F1        = 0.821293


Total scoring time: 26.352 seconds
Parameter learned model CLL: -0.428715


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,true': 'samebib(E, F), venue(F, A)', 'true,true,false': 'title(G, D), venue(G, A)', 'true,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'true,false,true': 'haswordtitle(I, J), haswordauthor(K, J)', 'true,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true,true': [9.637, 120, 411], 'true,true,true,false': [4.902, 619, 25], 'true,true,false,true': [1.764, 14, 4], 'true,true,false,false': [2.277, 20, 7], 'true,false,true,true': [1.449, 3, 7], 'true,false,true,false': [0.0, 3, 0], 'true,false,false,true': [1.519, 3, 10], 'true,false,false,false': [1.195, 2, 5], 'false': [0.373, 120, 24]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,true': 'samebib(E, F), venue(F, A)', 'true,true,false': 'title(G, D), venue(G, A)', 'true,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'true,false,true': 'haswordtitle(I, J), haswordauthor(K, J)', 'true,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true,true': [9.637, 120, 411], 'true,true,true,false': [4.902, 619, 25], 'true,true,false,true': [1.764, 14, 4], 'true,true,false,false': [2.277, 20, 7], 'true,false,true,true': [1.449, 3, 7], 'true,false,true,false': [0.0, 3, 0], 'true,false,false,true': [1.519, 3, 10], 'true,false,false,false': [1.195, 2, 5], 'false': [0.373, 120, 24]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,true': 'samebib(E, F), venue(F, A)', 'true,true,false': 'title(G, D), venue(G, A)', 'true,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'true,false,true': 'haswordtitle(I, J), haswordauthor(K, J)', 'true,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true,true': [9.637, 120, 411], 'true,true,true,false': [4.902, 619, 25], 'true,true,false,true': [1.764, 14, 4], 'true,true,false,false': [2.277, 20, 7], 'true,false,true,true': [1.449, 3, 7], 'true,false,true,false': [2.63e-09, 3, 0], 'true,false,false,true': [1.519, 3, 10], 'true,false,false,false': [1.195, 2, 5], 'false': [0.373, 120, 24]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordvenue(A, I)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true': [0.372, 739, 436], 'true,true,false,true': [1.764, 14, 4], 'true,true,false,false': [2.277, 20, 7], 'true,false,true,true': [0.739, 4, 1], 'true,false,true,false': [1.225, 2, 6], 'true,false,false,true': [1.519, 3, 10], 'true,false,false,false': [1.195, 2, 5], 'false,true': [0.356, 80, 14], 'false,false': [0.4, 40, 10]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true,true': [0.368, 739, 436], 'true,true,false,true': [1.764, 14, 4], 'true,true,false,false': [2.277, 20, 7], 'true,false,true,true': [1.429, 3, 7], 'true,false,true,false': [0.0, 3, 0], 'true,false,false,true': [1.519, 3, 10], 'true,false,false,false': [1.195, 2, 5], 'false,true': [0.356, 80, 14], 'false,false': [0.4, 40, 10]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordvenue(A, I)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true': [0.364, 732, 432], 'true,true,false,true': [2.407, 21, 8], 'true,true,false,false': [2.277, 20, 7], 'true,false,true,true': [0.723, 4, 1], 'true,false,true,false': [1.225, 2, 6], 'true,false,false,true': [1.519, 3, 10], 'true,false,false,false': [1.195, 2, 5], 'false,true': [0.356, 80, 14], 'false,false': [0.4, 40, 10]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true,true': [0.361, 732, 432], 'true,true,false,true': [2.407, 21, 8], 'true,true,false,false': [2.277, 20, 7], 'true,false,true,true': [1.42, 3, 7], 'true,false,true,false': [1.86e-09, 3, 0], 'true,false,false,true': [1.519, 3, 10], 'true,false,false,false': [1.195, 2, 5], 'false,true': [0.356, 80, 14], 'false,false': [0.4, 40, 10]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'title(I, H), venue(I, A)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true': [0.359, 732, 432], 'true,true,false,true': [2.407, 21, 8], 'true,true,false,false': [2.277, 20, 7], 'true,false,true,true': [1.349, 5, 10], 'true,false,true,false': [0.9, 2, 1], 'true,false,false,true': [1.225, 2, 6], 'true,false,false,false': [1.195, 2, 5], 'false,true': [0.356, 80, 14], 'false,false': [0.4, 40, 10]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'title(I, H), venue(I, B)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true': [0.358, 732, 432], 'true,true,false,true': [2.407, 21, 8], 'true,true,false,false': [2.277, 20, 7], 'true,false,true,true': [1.143, 2, 5], 'true,false,true,false': [0.826, 4, 2], 'true,false,false,true': [1.483, 3, 10], 'true,false,false,false': [1.195, 2, 5], 'false,true': [0.356, 80, 14], 'false,false': [0.4, 40, 10]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'title(I, H), venue(I, A)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true': [0.357, 732, 432], 'true,true,false,true': [2.407, 21, 8], 'true,true,false,false': [2.277, 20, 7], 'true,false,true,true': [1.333, 5, 10], 'true,false,true,false': [0.897, 2, 1], 'true,false,false,true': [1.218, 2, 6], 'true,false,false,false': [1.195, 2, 5], 'false,true': [0.356, 80, 14], 'false,false': [0.4, 40, 10]}]]
[{'': [0.2341999313379593, 0.13888888888888987], 'true': [0.23214928782583874, 0.2222222222222232], 'true,true': [0.2333754640108501, 0.18469135802469086], 'true,true,true': [0.17491780778192656, 0.037312893021103744], 'true,false': [0.24852071005917156, 0.18749999999999964], 'true,false,true': [0.20999999999999988, 0.0], 'true,false,false': [0.1775147928994082, 0.20408163265306106], 'true,true,false': [0.17283950617283936, 0.19204389574759959]}, {'': [0.1990532008157103, 0.13888888888888845], 'true': [0.197010218156692, 0.21015323717475862], 'true,false': [0.22572756256232515, 0.18727738640749675], 'true,false,true': [0.2100000000000001, 0.0], 'true,true': [0.19709299734382982, 0.18461103466202028], 'true,true,true': [0.17491780778191796, 0.03731289302110351], 'true,false,false': [0.1775147928994084, 0.20408163265306115], 'true,true,false': [0.1728395061728396, 0.1920438957475996]}, {'': [0.1663638000095123, 0.13888888888888967], 'true': [0.16431808754193863, 0.199091428988156], 'true,false': [0.2050276580841068, 0.1870560865978874], 'true,false,true': [0.2100000000000001, 2.3129646346357427e-18], 'true,false,false': [0.177514792899408, 0.20408163265306115], 'true,true': [0.16335781961880846, 0.18454302963975724], 'true,true,false': [0.1728395061728395, 0.19204389574759947], 'true,true,true': [0.17491780778193103, 0.03731289302110148]}, {'': [0.1424453765954523, 0.1388888888888895], 'true': [0.14041275913726947, 0.1908969876218846], 'true,false': [0.1894135025775769, 0.1869274470908134], 'true,false,true': [0.10924519787225487, 0.18750000000000006], 'true,false,false': [0.17751479289940836, 0.2040816326530612], 'true,true': [0.13866398359871976, 0.18448887314522106], 'true,true,false': [0.17283950617283939, 0.1920438957475995], 'false': [0.1267541874151206, 0.15999999999999995]}, {'': [0.13907673735519238, 0.1387455067690496], 'true': [0.13750055547103868, 0.18429241789768913], 'true,false': [0.17598883203455548, 0.18687268802628526], 'true,false,false': [0.1775147928994082, 0.20408163265306128], 'true,false,true': [0.20406707739111934, 0.0], 'false': [0.12675418741511946, 0.16000000000000025], 'true,true': [0.1356636286320052, 0.18444798863364636], 'true,true,false': [0.1728395061728395, 0.19204389574759959]}, {'': [0.13663991237613365, 0.13863369029654024], 'false': [0.12675418741512046, 0.15999999999999992], 'true': [0.1352762932236394, 0.18095736560937978], 'true,false': [0.16912891040414252, 0.18685082975819714], 'true,false,false': [0.17751479289940816, 0.2040816326530612], 'true,false,true': [0.10440516448478813, 0.1875], 'true,true': [0.13221780435305416, 0.19804747164705236], 'true,true,false': [0.19976218787158112, 0.19204389574759972]}, {'': [0.13486291356057017, 0.1385476917052838], 'false': [0.1267541874151203, 0.16000000000000028], 'true': [0.13360599368104034, 0.178420275065646], 'true,false': [0.16375803876700207, 0.18684108270951927], 'true,false,false': [0.17751479289940827, 0.20408163265306126], 'true,false,true': [0.2015872570269707, 1.1564823173178713e-18], 'true,true': [0.1304859965393667, 0.1976869292478586], 'true,true,false': [0.19976218787158123, 0.1920438957475993]}, {'': [0.13353638725100284, 0.13848235057508373], 'false': [0.1267541874151205, 0.1600000000000003], 'true': [0.1323203463300838, 0.1771411343365903], 'true,false': [0.1610583602430878, 0.19538362050502328], 'true,false,false': [0.18749999999999997, 0.2040816326530612], 'true,false,true': [0.12132279987411979, 0.27013340421220894], 'true,true': [0.12915974508077888, 0.19733773210944983], 'true,true,false': [0.19976218787158165, 0.19204389574759964]}, {'': [0.1324492833527369, 0.13843322897629062], 'false': [0.12675418741511998, 0.15999999999999995], 'true': [0.13132783609644888, 0.1731114742027646], 'true,false': [0.15965236485101894, 0.18138724166094417], 'true,false,false': [0.16911764962321876, 0.20408163265306123], 'true,false,true': [0.18677022143576166, 0.11366050298361685], 'true,true': [0.12814024422606465, 0.1970265646362763], 'true,true,false': [0.19976218787158112, 0.19204389574759945]}, {'': [0.13166625483094357, 0.13839663849579856], 'false': [0.12675418741511948, 0.16000000000000006], 'true': [0.1305589590161075, 0.17220220874348988], 'true,false': [0.15335384838476637, 0.19431747765166935], 'true,false,false': [0.18553887938741395, 0.2040816326530612], 'true,false,true': [0.1184440940932759, 0.2681503749053347], 'true,true': [0.12735276408322993, 0.19676699792025326], 'true,true,false': [0.1997621878715814, 0.1920438957475995]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
0;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
1;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
4;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.6321602345345362;  // std dev = 9.637, 531.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=411 */
%   | | | else return -0.10303118912409005;  // std dev = 4.902, 644.000 (wgt'ed) examples reached here.  /* #neg=619 #pos=25 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.08037115732173453;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return 0.11740819435877163;  // std dev = 2.277, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.5581489350995124;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.6273797043302815;  // std dev = 1.519, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return 0.0248156017661786;  // std dev = 0.373, 144.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=24 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.5367656206748814;  // std dev = 9.637, 531.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=411 */
%   | | | else return -0.090945912301741;  // std dev = 4.902, 644.000 (wgt'ed) examples reached here.  /* #neg=619 #pos=25 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.07030324498182232;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return 0.10250668322505756;  // std dev = 2.277, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.47588605454691735;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.5328490890947368;  // std dev = 1.519, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return 0.021767884192405756;  // std dev = 0.373, 144.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=24 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.4267442807870245;  // std dev = 9.637, 531.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=411 */
%   | | | else return -0.08101686370728066;  // std dev = 4.902, 644.000 (wgt'ed) examples reached here.  /* #neg=619 #pos=25 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.06102210441531307;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return 0.08847583230893136;  // std dev = 2.277, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.382647398804739;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.4239325089396988;  // std dev = 1.519, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return 0.3912569620992536;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return 0.01904987294481085;  // std dev = 0.373, 144.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=24 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.10697180895284271;  // std dev = 0.372, 1,175.000 (wgt'ed) examples reached here.  /* #neg=739 #pos=436 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.05259950478597556;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return 0.07557895462034796;  // std dev = 2.277, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordvenue(A, I) )
%   | | | then return -0.023088589435215433;  // std dev = 0.739, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.34467302064371586;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.3229819329672577;  // std dev = 1.519, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return 0.3005711547884894;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return -0.0010937200616110388;  // std dev = 0.356, 94.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=14 */
%   | else return 0.04997010972562301;  // std dev = 0.400, 50.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=10 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.08890104356498921;  // std dev = 0.368, 1,175.000 (wgt'ed) examples reached here.  /* #neg=739 #pos=436 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.045061565721578795;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return 0.06397460310664428;  // std dev = 2.277, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.22777312466190264;  // std dev = 1.429, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return -0.09950822998545862;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.24247055537624246;  // std dev = 1.519, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return 0.22629823971521876;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return -9.543012497610604E-4;  // std dev = 0.356, 94.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=14 */
%   | else return 0.043485827041495034;  // std dev = 0.400, 50.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=10 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.07116197915037252;  // std dev = 0.364, 1,164.000 (wgt'ed) examples reached here.  /* #neg=732 #pos=432 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.14337221198808012;  // std dev = 2.407, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
%   | | | else return 0.053724771332972446;  // std dev = 2.277, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordvenue(A, I) )
%   | | | then return -0.03674815402195409;  // std dev = 0.723, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.20285830283954498;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.18270684819255756;  // std dev = 1.519, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return 0.16984358676510128;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return -8.327416416201985E-4;  // std dev = 0.356, 94.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=14 */
%   | else return 0.03765881901952532;  // std dev = 0.400, 50.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.058444170381298996;  // std dev = 0.361, 1,164.000 (wgt'ed) examples reached here.  /* #neg=732 #pos=432 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.12600836044544686;  // std dev = 2.407, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
%   | | | else return 0.044813211773260135;  // std dev = 2.277, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.13331890467039237;  // std dev = 1.420, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return -0.08794753638481699;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.13920656791416966;  // std dev = 1.519, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return 0.12813320688246752;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return -7.267327563195067E-4;  // std dev = 0.356, 94.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=14 */
%   | else return 0.03247239037272519;  // std dev = 0.400, 50.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=10 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.047832595783784404;  // std dev = 0.359, 1,164.000 (wgt'ed) examples reached here.  /* #neg=732 #pos=432 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.10923742969059658;  // std dev = 2.407, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
%   | | | else return 0.037167465622064896;  // std dev = 2.277, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.12096184095919366;  // std dev = 1.349, 15.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=10 */
%   | | | else return -0.20694562990852328;  // std dev = 0.900, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.12161241323304561;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.09743184803714998;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return -6.342694434513385E-4;  // std dev = 0.356, 94.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=14 */
%   | else return 0.027894703041261338;  // std dev = 0.400, 50.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=10 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.039041834286002206;  // std dev = 0.358, 1,164.000 (wgt'ed) examples reached here.  /* #neg=732 #pos=432 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.0935115703151858;  // std dev = 2.407, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
%   | | | else return 0.03067988872521299;  // std dev = 2.277, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.1231326132221106;  // std dev = 1.143, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return -0.04014047647774574;  // std dev = 0.826, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.08657793709727503;  // std dev = 1.483, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return 0.07468131696953094;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return -5.536088572191727E-4;  // std dev = 0.356, 94.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=14 */
%   | else return 0.023883697821770335;  // std dev = 0.400, 50.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.09565684882659033;  // std dev = 0.306, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | else return -0.290211623111639;  // std dev = 0.320, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.06736770524256733;  // std dev = 0.313, 30.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=12 */
%   | | else if ( haswordtitle(I, C) )
%   | | | then return 0.031478359243239315;  // std dev = 12.380, 1,160.000 (wgt'ed) examples reached here.  /* #neg=736 #pos=424 */
%   | | | else return 0.04369243698893055;  // std dev = 2.364, 32.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=21 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, A) )
%   | | then if ( samebib(L, M), venue(M, B) )
%   | | | then return 0.3505805945337302;  // std dev = 2.345, 22.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   | | | else return -0.14941940546626944;  // std dev = 1.05e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return -0.04227654832341229;  // std dev = 0.309, 28.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=3 */
%   | else return 0.020391339517660905;  // std dev = 0.400, 50.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=10 */


Results
   AUC ROC   = 0.926116
   AUC PR    = 0.890734
   CLL	      = -0.483759
   Precision = 0.898148 at threshold = 0.5
   Recall    = 0.881818
   F1        = 0.889908


Total learning time: 1771.4792149066925 seconds
Total inference time: 4.315 seconds
AUC ROC: 0.926116


Results scoring model
   AUC ROC   = 0.898217
   AUC PR    = 0.770256
   CLL	      = -0.426088
   Precision = 0.774194 at threshold = 0.5
   Recall    = 0.876268
   F1        = 0.822074


Total scoring time: 25.793 seconds
Refined model CLL: -0.426088


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.926116
   AUC PR    = 0.890734
   CLL	      = -0.483759
   Precision = 0.898148 at threshold = 0.5
   Recall    = 0.881818
   F1        = 0.889908


Total learning time: 3565.6575567913055 seconds
Total inference time: 4.315 seconds
AUC ROC: 0.926116
Total revision time: 3565.6575567913055
Best scored revision CLL: -0.426088


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 06:04:09
{'AUC ROC': 0.926116, 'AUC PR': 0.890734, 'CLL': -0.483759, 'Precision': [0.898148, 0.5], 'Recall': 0.881818, 'F1': 0.889908, 'Learning time': 3565.6575567913055, 'Inference time': 4.315, 'parameter_0.2': {'AUC ROC': 0.887796, 'AUC PR': 0.866859, 'CLL': -0.492025, 'Precision': [0.897059, 0.5], 'Recall': 0.887273, 'F1': 0.892139, 'Learning time': 1742.033341884613, 'Inference time': 4.428}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.6321602345345362;  // std dev = 9.637, 531.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=411 */
%   | | | else return -0.10303118912409005;  // std dev = 4.902, 644.000 (wgt'ed) examples reached here.  /* #neg=619 #pos=25 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.08037115732173453;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return 0.11740819435877163;  // std dev = 2.277, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.5581489350995124;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.6273797043302815;  // std dev = 1.519, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return 0.0248156017661786;  // std dev = 0.373, 144.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=24 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.5367656206748814;  // std dev = 9.637, 531.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=411 */
%   | | | else return -0.090945912301741;  // std dev = 4.902, 644.000 (wgt'ed) examples reached here.  /* #neg=619 #pos=25 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.07030324498182232;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return 0.10250668322505756;  // std dev = 2.277, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.47588605454691735;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.5328490890947368;  // std dev = 1.519, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return 0.021767884192405756;  // std dev = 0.373, 144.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=24 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.4267442807870245;  // std dev = 9.637, 531.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=411 */
%   | | | else return -0.08101686370728066;  // std dev = 4.902, 644.000 (wgt'ed) examples reached here.  /* #neg=619 #pos=25 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.06102210441531307;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return 0.08847583230893136;  // std dev = 2.277, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.382647398804739;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.4239325089396988;  // std dev = 1.519, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return 0.3912569620992536;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else return 0.01904987294481085;  // std dev = 0.373, 144.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=24 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.10697180895284271;  // std dev = 0.372, 1,175.000 (wgt'ed) examples reached here.  /* #neg=739 #pos=436 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.05259950478597556;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return 0.07557895462034796;  // std dev = 2.277, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordvenue(A, I) )
%   | | | then return -0.023088589435215433;  // std dev = 0.739, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.34467302064371586;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.3229819329672577;  // std dev = 1.519, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return 0.3005711547884894;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return -0.0010937200616110388;  // std dev = 0.356, 94.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=14 */
%   | else return 0.04997010972562301;  // std dev = 0.400, 50.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=10 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.08890104356498921;  // std dev = 0.368, 1,175.000 (wgt'ed) examples reached here.  /* #neg=739 #pos=436 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.045061565721578795;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return 0.06397460310664428;  // std dev = 2.277, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.22777312466190264;  // std dev = 1.429, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return -0.09950822998545862;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.24247055537624246;  // std dev = 1.519, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return 0.22629823971521876;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return -9.543012497610604E-4;  // std dev = 0.356, 94.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=14 */
%   | else return 0.043485827041495034;  // std dev = 0.400, 50.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=10 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.07116197915037252;  // std dev = 0.364, 1,164.000 (wgt'ed) examples reached here.  /* #neg=732 #pos=432 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.14337221198808012;  // std dev = 2.407, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
%   | | | else return 0.053724771332972446;  // std dev = 2.277, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordvenue(A, I) )
%   | | | then return -0.03674815402195409;  // std dev = 0.723, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.20285830283954498;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.18270684819255756;  // std dev = 1.519, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return 0.16984358676510128;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return -8.327416416201985E-4;  // std dev = 0.356, 94.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=14 */
%   | else return 0.03765881901952532;  // std dev = 0.400, 50.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.058444170381298996;  // std dev = 0.361, 1,164.000 (wgt'ed) examples reached here.  /* #neg=732 #pos=432 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.12600836044544686;  // std dev = 2.407, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
%   | | | else return 0.044813211773260135;  // std dev = 2.277, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.13331890467039237;  // std dev = 1.420, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return -0.08794753638481699;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.13920656791416966;  // std dev = 1.519, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return 0.12813320688246752;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return -7.267327563195067E-4;  // std dev = 0.356, 94.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=14 */
%   | else return 0.03247239037272519;  // std dev = 0.400, 50.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=10 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.047832595783784404;  // std dev = 0.359, 1,164.000 (wgt'ed) examples reached here.  /* #neg=732 #pos=432 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.10923742969059658;  // std dev = 2.407, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
%   | | | else return 0.037167465622064896;  // std dev = 2.277, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.12096184095919366;  // std dev = 1.349, 15.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=10 */
%   | | | else return -0.20694562990852328;  // std dev = 0.900, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.12161241323304561;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.09743184803714998;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return -6.342694434513385E-4;  // std dev = 0.356, 94.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=14 */
%   | else return 0.027894703041261338;  // std dev = 0.400, 50.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=10 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.039041834286002206;  // std dev = 0.358, 1,164.000 (wgt'ed) examples reached here.  /* #neg=732 #pos=432 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.0935115703151858;  // std dev = 2.407, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
%   | | | else return 0.03067988872521299;  // std dev = 2.277, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.1231326132221106;  // std dev = 1.143, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return -0.04014047647774574;  // std dev = 0.826, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.08657793709727503;  // std dev = 1.483, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return 0.07468131696953094;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return -5.536088572191727E-4;  // std dev = 0.356, 94.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=14 */
%   | else return 0.023883697821770335;  // std dev = 0.400, 50.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.05831473863901975;  // std dev = 0.318, 31.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=12 */
%   | else if ( haswordtitle(F, C) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.030606650902867558;  // std dev = 12.051, 1,135.000 (wgt'ed) examples reached here.  /* #neg=715 #pos=420 */
%   | | | else return 0.06378860188173534;  // std dev = 3.294, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.03925914291245561;  // std dev = 1.661, 18.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | | | else return 0.06961920095251466;  // std dev = 1.707, 15.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=11 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, A) )
%   | | then if ( samebib(L, M), venue(M, B) )
%   | | | then return 0.3505805945337302;  // std dev = 2.345, 22.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   | | | else return -0.14941940546626944;  // std dev = 1.05e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return -0.04227654832341229;  // std dev = 0.309, 28.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=3 */
%   | else return 0.020391339517660905;  // std dev = 0.400, 50.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=10 */


Results
   AUC ROC   = 0.924285
   AUC PR    = 0.887115
   CLL	      = -0.483835
   Precision = 0.897059 at threshold = 0.5
   Recall    = 0.887273
   F1        = 0.892139


Total learning time: 1734.4175062179565 seconds
Total inference time: 4.556 seconds
AUC ROC: 0.924285


Dataset: 3_imdb_cora, Fold: 5, Type: Scratch (RDN-B), Time: 06:33:09
{'AUC ROC': 0.924285, 'AUC PR': 0.887115, 'CLL': -0.483835, 'Precision': [0.897059, 0.5], 'Recall': 0.887273, 'F1': 0.892139, 'Learning time': 1734.4175062179565, 'Inference time': 4.556}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.6217685103534317;  // std dev = 13.982, 1,083.000 (wgt'ed) examples reached here.  /* #neg=256 #pos=827 */
%   | | | else return -0.10734063151365178;  // std dev = 6.443, 1,246.000 (wgt'ed) examples reached here.  /* #neg=1,203 #pos=43 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.09577269747574936;  // std dev = 4.278, 101.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=24 */
%   | | | else return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.2581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.5052077586289241;  // std dev = 1.970, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.5724346493852266;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | | | else return 0.6359267128772901;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   else return 0.0024788320067282827;  // std dev = 0.351, 291.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=42 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.5282492471677838;  // std dev = 13.982, 1,083.000 (wgt'ed) examples reached here.  /* #neg=256 #pos=827 */
%   | | | else return -0.09476947985899706;  // std dev = 6.443, 1,246.000 (wgt'ed) examples reached here.  /* #neg=1,203 #pos=43 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.08370980119703929;  // std dev = 4.278, 101.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=24 */
%   | | | else return 0.6045267906174348;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.4411399113662343;  // std dev = 1.960, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return 0.2082230811609115;  // std dev = 1.540, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.48767788391726324;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | | | else return 0.5398498420741679;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   else return 0.00217681745069643;  // std dev = 0.351, 291.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=42 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.4206260362994369;  // std dev = 13.982, 1,083.000 (wgt'ed) examples reached here.  /* #neg=256 #pos=827 */
%   | | | else return -0.08447111843512599;  // std dev = 6.443, 1,246.000 (wgt'ed) examples reached here.  /* #neg=1,203 #pos=43 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.0724902495783034;  // std dev = 4.278, 101.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=24 */
%   | | | else return 0.4749335700127619;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.35993523219114765;  // std dev = 1.958, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return 0.17395811627164065;  // std dev = 1.539, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.39125696209925326;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | | | else return 0.4289562725350849;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   else return 0.0019111573452797583;  // std dev = 0.351, 291.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=42 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.32070858546479325;  // std dev = 13.982, 1,083.000 (wgt'ed) examples reached here.  /* #neg=256 #pos=827 */
%   | | | else return -0.07589747879215138;  // std dev = 6.443, 1,246.000 (wgt'ed) examples reached here.  /* #neg=1,203 #pos=43 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.06225238542306703;  // std dev = 4.278, 101.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=24 */
%   | | | else return 0.3584548159137827;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.1276298359457194;  // std dev = 1.533, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.2898175695916225;  // std dev = 1.949, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.30057115478848934;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | | | else return 0.3264400476801372;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   else return 0.0016775773595234468;  // std dev = 0.351, 291.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=42 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.24079734967068295;  // std dev = 13.982, 1,083.000 (wgt'ed) examples reached here.  /* #neg=256 #pos=827 */
%   | | | else return -0.06978655849375419;  // std dev = 6.556, 1,256.000 (wgt'ed) examples reached here.  /* #neg=1,210 #pos=46 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.08198649331536897;  // std dev = 4.033, 91.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=21 */
%   | | | else return 0.2697478132793615;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.1018499772709804;  // std dev = 1.532, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.2214000905089919;  // std dev = 1.948, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.22629823971521895;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | | | else return 0.24503149911444566;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   else return 0.0014722822057160188;  // std dev = 0.351, 291.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=42 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.04994628518560671;  // std dev = 0.342, 2,339.000 (wgt'ed) examples reached here.  /* #neg=1,466 #pos=873 */
%   | | else return 0.08107627596974974;  // std dev = 0.420, 98.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=27 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 0.17315092219420847;  // std dev = 1.945, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return 0.06987726086156607;  // std dev = 1.529, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.16984358676510142;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | | | else return 0.18482045881522163;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then return -0.07637132279586124;  // std dev = 0.249, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return -0.005106954979769029;  // std dev = 0.345, 174.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=24 */
%   | | else return 0.02362867720413905;  // std dev = 0.373, 102.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=17 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.0418901416093379;  // std dev = 0.341, 2,339.000 (wgt'ed) examples reached here.  /* #neg=1,466 #pos=873 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.060447153722502305;  // std dev = 4.037, 91.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=21 */
%   | | | else return 0.1880619542446554;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.13042425197568316;  // std dev = 1.944, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return 0.05448689187294973;  // std dev = 1.529, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.1281332068824675;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | | | else return 0.14108814406879122;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return -0.008133503211877561;  // std dev = 0.340, 187.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=25 */
%   | else return 0.01773402771942912;  // std dev = 0.370, 104.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=17 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.03509788507580052;  // std dev = 0.339, 2,339.000 (wgt'ed) examples reached here.  /* #neg=1,466 #pos=873 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.09923881004150681;  // std dev = 2.641, 40.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=9 */
%   | | | else return 0.030775005869626722;  // std dev = 3.185, 58.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=18 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.12683109615078866;  // std dev = 2.128, 24.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | | | else return -0.09194062158572702;  // std dev = 1.364, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.1023910509963954;  // std dev = 1.943, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return 0.10912169797108993;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return -0.007146497210440129;  // std dev = 0.340, 187.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=25 */
%   | else return 0.015512450606951484;  // std dev = 0.370, 104.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=17 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.08619097221779146;  // std dev = 0.284, 60.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=26 */
%   | else if ( haswordtitle(F, C) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.027780333774539288;  // std dev = 16.235, 2,283.000 (wgt'ed) examples reached here.  /* #neg=1,435 #pos=848 */
%   | | | else return 0.059611489467569154;  // std dev = 4.120, 95.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=27 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.040504190074973176;  // std dev = 2.428, 26.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=14 */
%   | | | else return 0.0799545626148428;  // std dev = 2.699, 39.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=29 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordvenue(B, L) )
%   | | | then return -0.048833479537212426;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | | else return -0.007223801421225529;  // std dev = 3.950, 135.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=18 */
%   | | else return 0.009652623292541476;  // std dev = 0.357, 40.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=6 */
%   | else return 0.013546294499761533;  // std dev = 0.370, 104.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=17 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.02461523014729818;  // std dev = 0.338, 2,339.000 (wgt'ed) examples reached here.  /* #neg=1,466 #pos=873 */
%   | | else if ( haswordauthor(F, C) )
%   | | | then return -0.24134879348796226;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.05034221978431768;  // std dev = 4.120, 95.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=27 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.08196353500520227;  // std dev = 2.125, 24.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | | | else return -0.0834763814423015;  // std dev = 1.368, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.06712483571569947;  // std dev = 1.940, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return 0.06864224926733048;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return -0.00555261558238119;  // std dev = 0.340, 187.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=25 */
%   | else return 0.011811785764577788;  // std dev = 0.370, 104.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=17 */


Results
   AUC ROC   = 0.912227
   AUC PR    = 0.887595
   CLL	      = -0.440895
   Precision = 0.897059 at threshold = 0.5
   Recall    = 0.887273
   F1        = 0.892139


Total learning time: 5298.188103914261 seconds
Total inference time: 5.079 seconds
AUC ROC: 0.912227


Results scoring model
   AUC ROC   = 0.893113
   AUC PR    = 0.757245
   CLL	      = -0.391865
   Precision = 0.762697 at threshold = 0.5
   Recall    = 0.883367
   F1        = 0.818609


Total scoring time: 63.444 seconds
Parameter learned model CLL: -0.391865


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,true': 'samebib(E, F), venue(F, B)', 'true,true,false': 'haswordtitle(D, G), haswordauthor(H, G)', 'true,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'true,false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'true,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true,true': [13.982, 256, 827], 'true,true,true,false': [6.443, 1, 43], 'true,true,false,true': [4.278, 77, 24], 'true,true,false,false': [0.926, 1, 6], 'true,false,true,true': [1.549, 6, 4], 'true,false,true,false': [1.97, 6, 11], 'true,false,false,true': [2.07, 6, 15], 'true,false,false,false': [1.764, 4, 14], 'false': [0.351, 249, 42]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,true': 'samebib(E, F), venue(F, B)', 'true,true,false': 'haswordtitle(D, G), haswordauthor(H, G)', 'true,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'true,false,true': 'title(K, J), venue(K, B)', 'true,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true,true': [13.982, 256, 827], 'true,true,true,false': [6.443, 1, 43], 'true,true,false,true': [4.278, 77, 24], 'true,true,false,false': [0.926, 1, 6], 'true,false,true,true': [1.96, 6, 11], 'true,false,true,false': [1.54, 6, 4], 'true,false,false,true': [2.07, 6, 15], 'true,false,false,false': [1.764, 4, 14], 'false': [0.351, 249, 42]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,true': 'samebib(E, F), venue(F, B)', 'true,true,false': 'haswordtitle(D, G), haswordauthor(H, G)', 'true,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'true,false,true': 'title(K, J), venue(K, B)', 'true,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true,true': [13.982, 256, 827], 'true,true,true,false': [6.443, 1, 43], 'true,true,false,true': [4.278, 77, 24], 'true,true,false,false': [0.926, 1, 6], 'true,false,true,true': [1.958, 6, 11], 'true,false,true,false': [1.539, 6, 4], 'true,false,false,true': [2.07, 6, 15], 'true,false,false,false': [1.764, 4, 14], 'false': [0.351, 249, 42]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,true': 'samebib(E, F), venue(F, B)', 'true,true,false': 'haswordtitle(D, G), haswordauthor(H, G)', 'true,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'true,false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'true,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true,true': [13.982, 256, 827], 'true,true,true,false': [6.443, 1, 43], 'true,true,false,true': [4.278, 77, 24], 'true,true,false,false': [0.926, 1, 6], 'true,false,true,true': [1.533, 6, 4], 'true,false,true,false': [1.949, 6, 11], 'true,false,false,true': [2.07, 6, 15], 'true,false,false,false': [1.764, 4, 14], 'false': [0.351, 249, 42]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,true': 'samebib(E, F), venue(F, A)', 'true,true,false': 'haswordtitle(D, G), haswordauthor(H, G)', 'true,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'true,false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'true,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true,true': [13.982, 256, 827], 'true,true,true,false': [6.556, 1, 46], 'true,true,false,true': [4.033, 70, 21], 'true,true,false,false': [0.926, 1, 6], 'true,false,true,true': [1.532, 6, 4], 'true,false,true,false': [1.948, 6, 11], 'true,false,false,true': [2.07, 6, 15], 'true,false,false,false': [1.764, 4, 14], 'false': [0.351, 249, 42]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,false': 'haswordvenue(B, F), haswordtitle(G, F)', 'true,false,true': 'title(H, G), venue(H, B)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true,true': [0.342, 1, 873], 'true,true,false': [0.42, 71, 27], 'true,false,true,true': [1.945, 6, 11], 'true,false,true,false': [1.529, 6, 4], 'true,false,false,true': [2.07, 6, 15], 'true,false,false,false': [1.764, 4, 14], 'false,true': [0.249, 14, 1], 'false,false,true': [0.345, 150, 24], 'false,false,false': [0.373, 85, 17]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'true,false,true': 'title(J, I), venue(J, B)', 'true,false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true,true': [0.341, 1, 873], 'true,true,false,true': [4.037, 70, 21], 'true,true,false,false': [0.926, 1, 6], 'true,false,true,true': [1.944, 6, 11], 'true,false,true,false': [1.529, 6, 4], 'true,false,false,true': [2.07, 6, 15], 'true,false,false,false': [1.764, 4, 14], 'false,true': [0.34, 162, 25], 'false,false': [0.37, 87, 17]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'title(I, H), venue(I, A)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true': [0.339, 1, 873], 'true,true,false,true': [2.641, 31, 9], 'true,true,false,false': [3.185, 40, 18], 'true,false,true,true': [2.128, 8, 16], 'true,false,true,false': [1.364, 4, 3], 'true,false,false,true': [1.943, 6, 11], 'true,false,false,false': [1.764, 4, 14], 'false,true': [0.34, 162, 25], 'false,false': [0.37, 87, 17]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,false': 'haswordtitle(F, C)', 'true,false,true': 'title(G, F), venue(G, B)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordauthor(M, L)', 'false,true,true': 'haswordvenue(B, L)'}, {'true,true': [0.284, 34, 26], 'true,false,true,true': [16.235, 1, 848], 'true,false,true,false': [4.12, 68, 27], 'true,false,false,true': [2.428, 12, 14], 'true,false,false,false': [2.699, 10, 29], 'false,true,true,true': [0.957, 11, 1], 'false,true,true,false': [3.95, 117, 18], 'false,true,false': [0.357, 34, 6], 'false,false': [0.37, 87, 17]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'haswordauthor(F, C)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'title(I, H), venue(I, A)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true': [0.338, 1, 873], 'true,true,false,true': [5.27e-09, 3, 0], 'true,true,false,false': [4.12, 68, 27], 'true,false,true,true': [2.125, 8, 16], 'true,false,true,false': [1.368, 4, 3], 'true,false,false,true': [1.94, 6, 11], 'true,false,false,false': [1.764, 4, 14], 'false,true': [0.34, 162, 25], 'false,false': [0.37, 87, 17]}]]
[{'': [0.23490724434715987, 0.12349877776596985], 'true': [0.23291921543960697, 0.22222222222222263], 'true,true': [0.2340106201033718, 0.2006172839506185], 'true,true,true': [0.18050471954296082, 0.033319463374291244], 'true,false': [0.24691358024691312, 0.19066403681788444], 'true,false,true': [0.23999999999999985, 0.228373702422145], 'true,true,false': [0.18115870993039998, 0.12244897959183662], 'true,false,false': [0.20408163265306084, 0.1728395061728392]}, {'': [0.2005720321497163, 0.12349877776597046], 'true': [0.19837779751583587, 0.21774818029544013], 'true,false': [0.24279615034944393, 0.1903386414678271], 'true,false,true': [0.22596075829205875, 0.23725875216258235], 'true,true': [0.19832432736866154, 0.19379497808434168], 'true,true,true': [0.18050471954291383, 0.03331946337428877], 'true,true,false': [0.18115870993039998, 0.12244897959183668], 'true,false,false': [0.2040816326530611, 0.17283950617283925]}, {'': [0.16870272978423512, 0.12349877776596839], 'true': [0.16631602905037296, 0.21288856432224917], 'true,false': [0.2377551996158246, 0.19001539674093607], 'true,false,true': [0.22541158876662157, 0.23696203102326416], 'true,false,false': [0.20408163265306142, 0.17283950617283989], 'true,true': [0.16522992854155796, 0.1871705074750485], 'true,true,false': [0.18115870993039815, 0.12244897959183668], 'true,true,true': [0.18050471954294528, 0.03331946337428878]}, {'': [0.14528878465938952, 0.12349877776597042], 'true': [0.1427755661283672, 0.20950877335509963], 'true,false': [0.23388831564977242, 0.18982849962678378], 'true,false,true': [0.23496918837644948, 0.2235099670726788], 'true,false,false': [0.20408163265306126, 0.1728395061728396], 'true,true': [0.14089303085051508, 0.18267145949340213], 'true,true,false': [0.18115870993039873, 0.12244897959183672], 'true,true,true': [0.18050471954294528, 0.0333194633742891]}, {'': [0.13057892500883192, 0.12349877776596846], 'true': [0.12800843367587075, 0.20737515941955662], 'true,false': [0.23085894163980036, 0.1897494042794924], 'true,false,true': [0.2347940022471228, 0.22325078174488827], 'true,false,false': [0.20408163265306126, 0.17283950617283939], 'true,true': [0.12593522798358125, 0.17705169144613397], 'true,true,false': [0.17873373481640914, 0.12244897959183679], 'true,true,true': [0.18050471954294134, 0.03421822773407071]}, {'': [0.12187383242478281, 0.12349877776596971], 'false': [0.062222222222222255, 0.12648340684730194], 'false,false': [0.11890606420927574, 0.13888888888888845], 'true': [0.1192778905999533, 0.20627879807337238], 'true,false': [0.22916488784622757, 0.1897179345216514], 'true,false,true': [0.22242958160077542, 0.2338996256810577], 'true,false,false': [0.20408163265306123, 0.17283950617283944], 'true,true': [0.11685897519211735, 0.17608087735989916]}, {'': [0.12084830707849763, 0.12338279804002973], 'false': [0.11575456166994252, 0.13666896360690528], 'true': [0.11839205542359292, 0.20560552325582], 'true,false': [0.22797649256624186, 0.18970389899174617], 'true,false,true': [0.22239005057535854, 0.2338426956096577], 'true,false,false': [0.20408163265306117, 0.17283950617283952], 'true,true': [0.11594209230624469, 0.1761312096656772], 'true,true,false': [0.17909735931388465, 0.12244897959183673]}, {'': [0.12006979643302342, 0.1233469360057919], 'false': [0.11575490059855095, 0.13666806489297018], 'true': [0.11767875038816641, 0.20525420614087483], 'true,false': [0.21441497659923334, 0.1967609683928817], 'true,false,true': [0.18867214536646726, 0.2656223849140035], 'true,false,false': [0.22206627747920946, 0.17283950617283947], 'true,true': [0.11522103173011218, 0.17580243569495518], 'true,true,false': [0.1743749999999996, 0.1748736935004998]}, {'': [0.11944077220468902, 0.12331924215848356], 'false': [0.11575519775538291, 0.136667274579017], 'true': [0.08073211770099743, 0.12031573163720889], 'true,false': [0.11801812010698638, 0.20317220155259766], 'true,false,false': [0.226726440817185, 0.1868468426187922], 'true,false,true': [0.11545463303695694, 0.17865001730730276], 'false,true': [0.11248807495982792, 0.1274387885249644], 'false,true,true': [0.07638888888888885, 0.11555555555555541]}, {'': [0.11895307436384868, 0.12327413199932649], 'false': [0.11571816429272383, 0.13666658132496573], 'true': [0.11664156516357647, 0.20332719773338687], 'true,false': [0.21079462992393352, 0.19645821259694923], 'true,false,true': [0.18814419689875525, 0.2672632967001283], 'true,false,false': [0.22146507052763797, 0.1728395061728395], 'true,true': [0.11415278556928934, 0.1757713160590299], 'true,true,false': [9.25185853854297e-18, 0.17871738775210932]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;true;true
9;true,true,false;haswordauthor(F, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.6217685103534317;  // std dev = 13.982, 1,083.000 (wgt'ed) examples reached here.  /* #neg=256 #pos=827 */
%   | | | else return -0.10734063151365178;  // std dev = 6.443, 1,246.000 (wgt'ed) examples reached here.  /* #neg=1,203 #pos=43 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.09577269747574936;  // std dev = 4.278, 101.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=24 */
%   | | | else return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.2581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.5052077586289241;  // std dev = 1.970, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.5724346493852266;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | | | else return 0.6359267128772901;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   else return 0.0024788320067282827;  // std dev = 0.351, 291.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=42 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.5282492471677838;  // std dev = 13.982, 1,083.000 (wgt'ed) examples reached here.  /* #neg=256 #pos=827 */
%   | | | else return -0.09476947985899706;  // std dev = 6.443, 1,246.000 (wgt'ed) examples reached here.  /* #neg=1,203 #pos=43 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.08370980119703929;  // std dev = 4.278, 101.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=24 */
%   | | | else return 0.6045267906174348;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.4411399113662343;  // std dev = 1.960, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return 0.2082230811609115;  // std dev = 1.540, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.48767788391726324;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | | | else return 0.5398498420741679;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   else return 0.00217681745069643;  // std dev = 0.351, 291.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=42 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.4206260362994369;  // std dev = 13.982, 1,083.000 (wgt'ed) examples reached here.  /* #neg=256 #pos=827 */
%   | | | else return -0.08447111843512599;  // std dev = 6.443, 1,246.000 (wgt'ed) examples reached here.  /* #neg=1,203 #pos=43 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.0724902495783034;  // std dev = 4.278, 101.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=24 */
%   | | | else return 0.4749335700127619;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.35993523219114765;  // std dev = 1.958, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return 0.17395811627164065;  // std dev = 1.539, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.39125696209925326;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | | | else return 0.4289562725350849;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   else return 0.0019111573452797583;  // std dev = 0.351, 291.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=42 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.32070858546479325;  // std dev = 13.982, 1,083.000 (wgt'ed) examples reached here.  /* #neg=256 #pos=827 */
%   | | | else return -0.07589747879215138;  // std dev = 6.443, 1,246.000 (wgt'ed) examples reached here.  /* #neg=1,203 #pos=43 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.06225238542306703;  // std dev = 4.278, 101.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=24 */
%   | | | else return 0.3584548159137827;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.1276298359457194;  // std dev = 1.533, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.2898175695916225;  // std dev = 1.949, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.30057115478848934;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | | | else return 0.3264400476801372;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   else return 0.0016775773595234468;  // std dev = 0.351, 291.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=42 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.24079734967068295;  // std dev = 13.982, 1,083.000 (wgt'ed) examples reached here.  /* #neg=256 #pos=827 */
%   | | | else return -0.06978655849375419;  // std dev = 6.556, 1,256.000 (wgt'ed) examples reached here.  /* #neg=1,210 #pos=46 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.08198649331536897;  // std dev = 4.033, 91.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=21 */
%   | | | else return 0.2697478132793615;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.1018499772709804;  // std dev = 1.532, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.2214000905089919;  // std dev = 1.948, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.22629823971521895;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | | | else return 0.24503149911444566;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   else return 0.0014722822057160188;  // std dev = 0.351, 291.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=42 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.04994628518560671;  // std dev = 0.342, 2,339.000 (wgt'ed) examples reached here.  /* #neg=1,466 #pos=873 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.07144732887820446;  // std dev = 4.035, 91.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=21 */
%   | | | else return 0.2062525881598365;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.17315092219420847;  // std dev = 1.945, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return 0.06987726086156607;  // std dev = 1.529, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.16984358676510142;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | | | else return 0.18482045881522163;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return -0.009348149890335142;  // std dev = 0.340, 187.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=25 */
%   | else return 0.020423548999010836;  // std dev = 0.370, 104.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=17 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.042975000709751986;  // std dev = 0.344, 2,437.000 (wgt'ed) examples reached here.  /* #neg=1,537 #pos=900 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.13042425197568316;  // std dev = 1.944, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return 0.05448689187294973;  // std dev = 1.529, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.1281332068824675;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | | | else return 0.14108814406879122;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then return -0.07571777500432883;  // std dev = 0.250, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( haswordtitle(M, N), haswordauthor(P, N) )
%   | | | then return -0.008562596755828163;  // std dev = 3.950, 135.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=18 */
%   | | | else return 0.01195022375699215;  // std dev = 2.253, 39.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=6 */
%   | | else return 0.021106899713750904;  // std dev = 0.373, 102.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=17 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03603558625592696;  // std dev = 0.343, 2,437.000 (wgt'ed) examples reached here.  /* #neg=1,537 #pos=900 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.12683109615078866;  // std dev = 2.128, 24.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | | | else return -0.09194062158572702;  // std dev = 1.364, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.1023910509963954;  // std dev = 1.943, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return 0.10912169797108993;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then return -0.06671984752828339;  // std dev = 0.250, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, A) )
%   | | | then return 0.0032876150003125033;  // std dev = 3.700, 111.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=16 */
%   | | | else return -0.015420463210549028;  // std dev = 2.642, 63.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=8 */
%   | | else return 0.018462101924239843;  // std dev = 0.373, 102.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=17 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.030188692794176082;  // std dev = 0.342, 2,437.000 (wgt'ed) examples reached here.  /* #neg=1,537 #pos=900 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.09778045578500698;  // std dev = 2.127, 24.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | | | else return -0.06961031792038176;  // std dev = 1.364, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.07753722802169849;  // std dev = 1.943, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return 0.08540523411308515;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then return -0.059194352999202816;  // std dev = 0.250, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( haswordtitle(M, N), haswordauthor(P, N) )
%   | | | then return -0.007520785165328991;  // std dev = 3.949, 135.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=18 */
%   | | | else return 0.012372240365401034;  // std dev = 2.253, 39.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=6 */
%   | | else return 0.016116277474097485;  // std dev = 0.373, 102.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=17 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.024121501570121433;  // std dev = 0.338, 2,339.000 (wgt'ed) examples reached here.  /* #neg=1,466 #pos=873 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.09487405035926721;  // std dev = 2.641, 40.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=9 */
%   | | | else return 0.023654664589603674;  // std dev = 3.184, 58.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=18 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.07471140345379748;  // std dev = 1.942, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return -0.005489458825451937;  // std dev = 1.529, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.05882137223378294;  // std dev = 2.025, 21.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | | | else return 0.0675192639640355;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return -0.005438690961342148;  // std dev = 0.340, 187.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=25 */
%   | else return 0.01142299738781527;  // std dev = 0.370, 104.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=17 */


Results
   AUC ROC   = 0.911396
   AUC PR    = 0.882169
   CLL	      = -0.441587
   Precision = 0.897059 at threshold = 0.5
   Recall    = 0.887273
   F1        = 0.892139


Total learning time: 4616.802610397339 seconds
Total inference time: 4.705 seconds
AUC ROC: 0.911396


Results scoring model
   AUC ROC   = 0.89198
   AUC PR    = 0.748352
   CLL	      = -0.392005
   Precision = 0.762697 at threshold = 0.5
   Recall    = 0.883367
   F1        = 0.818609


Total scoring time: 56.727 seconds
Refined model CLL: -0.392005


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.912227
   AUC PR    = 0.887595
   CLL	      = -0.440895
   Precision = 0.897059 at threshold = 0.5
   Recall    = 0.887273
   F1        = 0.892139


Total learning time: 10035.1617143116 seconds
Total inference time: 5.079 seconds
AUC ROC: 0.912227
Total revision time: 10035.1617143116
Best scored revision CLL: -0.391865


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 09:20:40
{'AUC ROC': 0.912227, 'AUC PR': 0.887595, 'CLL': -0.440895, 'Precision': [0.897059, 0.5], 'Recall': 0.887273, 'F1': 0.892139, 'Learning time': 10035.1617143116, 'Inference time': 5.079, 'parameter_0.4': {'AUC ROC': 0.912227, 'AUC PR': 0.887595, 'CLL': -0.440895, 'Precision': [0.897059, 0.5], 'Recall': 0.887273, 'F1': 0.892139, 'Learning time': 5298.188103914261, 'Inference time': 5.079}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.6217685103534317;  // std dev = 13.982, 1,083.000 (wgt'ed) examples reached here.  /* #neg=256 #pos=827 */
%   | | | else return -0.10734063151365178;  // std dev = 6.443, 1,246.000 (wgt'ed) examples reached here.  /* #neg=1,203 #pos=43 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.09577269747574936;  // std dev = 4.278, 101.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=24 */
%   | | | else return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.2581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.5052077586289241;  // std dev = 1.970, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.5724346493852266;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | | | else return 0.6359267128772901;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   else return 0.0024788320067282827;  // std dev = 0.351, 291.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=42 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.5282492471677838;  // std dev = 13.982, 1,083.000 (wgt'ed) examples reached here.  /* #neg=256 #pos=827 */
%   | | | else return -0.09476947985899706;  // std dev = 6.443, 1,246.000 (wgt'ed) examples reached here.  /* #neg=1,203 #pos=43 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.08370980119703929;  // std dev = 4.278, 101.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=24 */
%   | | | else return 0.6045267906174348;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.4411399113662343;  // std dev = 1.960, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return 0.2082230811609115;  // std dev = 1.540, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.48767788391726324;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | | | else return 0.5398498420741679;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   else return 0.00217681745069643;  // std dev = 0.351, 291.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=42 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.4206260362994369;  // std dev = 13.982, 1,083.000 (wgt'ed) examples reached here.  /* #neg=256 #pos=827 */
%   | | | else return -0.08447111843512599;  // std dev = 6.443, 1,246.000 (wgt'ed) examples reached here.  /* #neg=1,203 #pos=43 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.0724902495783034;  // std dev = 4.278, 101.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=24 */
%   | | | else return 0.4749335700127619;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.35993523219114765;  // std dev = 1.958, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return 0.17395811627164065;  // std dev = 1.539, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.39125696209925326;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | | | else return 0.4289562725350849;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   else return 0.0019111573452797583;  // std dev = 0.351, 291.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=42 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.32070858546479325;  // std dev = 13.982, 1,083.000 (wgt'ed) examples reached here.  /* #neg=256 #pos=827 */
%   | | | else return -0.07589747879215138;  // std dev = 6.443, 1,246.000 (wgt'ed) examples reached here.  /* #neg=1,203 #pos=43 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.06225238542306703;  // std dev = 4.278, 101.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=24 */
%   | | | else return 0.3584548159137827;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.1276298359457194;  // std dev = 1.533, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.2898175695916225;  // std dev = 1.949, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.30057115478848934;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | | | else return 0.3264400476801372;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   else return 0.0016775773595234468;  // std dev = 0.351, 291.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=42 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.24079734967068295;  // std dev = 13.982, 1,083.000 (wgt'ed) examples reached here.  /* #neg=256 #pos=827 */
%   | | | else return -0.06978655849375419;  // std dev = 6.556, 1,256.000 (wgt'ed) examples reached here.  /* #neg=1,210 #pos=46 */
%   | | else if ( haswordauthor(G, C) )
%   | | | then return -0.18455674395666496;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.104238692805517;  // std dev = 4.136, 95.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=27 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.1018499772709804;  // std dev = 1.532, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.2214000905089919;  // std dev = 1.948, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.22629823971521895;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | | | else return 0.24503149911444566;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   else return 0.0014722822057160188;  // std dev = 0.351, 291.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=42 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.04994628518560671;  // std dev = 0.342, 2,339.000 (wgt'ed) examples reached here.  /* #neg=1,466 #pos=873 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.06988316843905436;  // std dev = 4.028, 91.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=21 */
%   | | | else return 0.24473481572155129;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.17315092219420847;  // std dev = 1.945, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return 0.06987726086156607;  // std dev = 1.529, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.16984358676510142;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | | | else return 0.18482045881522163;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return -0.009348149890335142;  // std dev = 0.340, 187.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=25 */
%   | else return 0.020423548999010836;  // std dev = 0.370, 104.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=17 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04300092619211242;  // std dev = 0.344, 2,437.000 (wgt'ed) examples reached here.  /* #neg=1,537 #pos=900 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.13042425197568316;  // std dev = 1.944, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return 0.05448689187294973;  // std dev = 1.529, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.1281332068824675;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | | | else return 0.14108814406879122;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then return -0.07571777500432883;  // std dev = 0.250, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( haswordtitle(M, N), haswordauthor(P, N) )
%   | | | then return -0.008562596755828163;  // std dev = 3.950, 135.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=18 */
%   | | | else return 0.01195022375699215;  // std dev = 2.253, 39.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=6 */
%   | | else return 0.021106899713750904;  // std dev = 0.373, 102.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=17 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.03491735685506426;  // std dev = 0.339, 2,339.000 (wgt'ed) examples reached here.  /* #neg=1,466 #pos=873 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.054286892273249586;  // std dev = 4.030, 91.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=21 */
%   | | | else return 0.17901501128335434;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.12683109615078866;  // std dev = 2.128, 24.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | | | else return -0.09194062158572702;  // std dev = 1.364, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.1023910509963954;  // std dev = 1.943, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return 0.10912169797108993;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return -0.007136768302287731;  // std dev = 0.340, 187.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=25 */
%   | else return 0.015484119602366338;  // std dev = 0.370, 104.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=17 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.029231837193953975;  // std dev = 0.339, 2,339.000 (wgt'ed) examples reached here.  /* #neg=1,466 #pos=873 */
%   | | else if ( haswordauthor(F, C) )
%   | | | then return -0.18195460111600129;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.060581050156276066;  // std dev = 4.123, 95.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=27 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.09778045578500698;  // std dev = 2.127, 24.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=16 */
%   | | | else return -0.06961031792038176;  // std dev = 1.364, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.07753722802169849;  // std dev = 1.943, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return 0.08540523411308515;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return -0.006275510434896671;  // std dev = 0.340, 187.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=25 */
%   | else return 0.013521261564564133;  // std dev = 0.370, 104.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=17 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.02445674334835468;  // std dev = 0.338, 2,339.000 (wgt'ed) examples reached here.  /* #neg=1,466 #pos=873 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.08681984871762305;  // std dev = 2.641, 40.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=9 */
%   | | | else return 0.015931457158485644;  // std dev = 3.168, 58.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=18 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.07471140345379748;  // std dev = 1.942, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return -0.005489458825451937;  // std dev = 1.529, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.05882137223378294;  // std dev = 2.025, 21.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=15 */
%   | | | else return 0.0675192639640355;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return -0.005521835978060554;  // std dev = 0.340, 187.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=25 */
%   | else return 0.011789733386779116;  // std dev = 0.370, 104.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=17 */


Results
   AUC ROC   = 0.911113
   AUC PR    = 0.882018
   CLL	      = -0.44085
   Precision = 0.897059 at threshold = 0.5
   Recall    = 0.887273
   F1        = 0.892139


Total learning time: 4805.074275970459 seconds
Total inference time: 4.902 seconds
AUC ROC: 0.911113


Dataset: 3_imdb_cora, Fold: 5, Type: Scratch (RDN-B), Time: 10:40:52
{'AUC ROC': 0.911113, 'AUC PR': 0.882018, 'CLL': -0.44085, 'Precision': [0.897059, 0.5], 'Recall': 0.887273, 'F1': 0.892139, 'Learning time': 4805.074275970459, 'Inference time': 4.902}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.22907051495068065;  // std dev = 0.483, 3,494.000 (wgt'ed) examples reached here.  /* #neg=2,198 #pos=1,296 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.1420199028414474;  // std dev = 5.613, 155.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=44 */
%   | | | else return 0.5854216623722396;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.5067975837481601;  // std dev = 2.904, 37.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=24 */
%   | | | else return 0.058148935099512175;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.5551186320692085;  // std dev = 2.640, 33.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=23 */
%   | | | else return 0.5664822684328457;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | then return 0.028216962310396495;  // std dev = 0.376, 294.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=50 */
%   | else return -0.023332546381969136;  // std dev = 0.323, 135.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.19883765319209387;  // std dev = 0.483, 3,494.000 (wgt'ed) examples reached here.  /* #neg=2,198 #pos=1,296 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.12383763649444274;  // std dev = 5.613, 155.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=44 */
%   | | | else return 0.498380757744019;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.4333373867520823;  // std dev = 2.904, 37.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=24 */
%   | | | else return 0.05092203251355425;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.4733822409131974;  // std dev = 2.640, 33.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=23 */
%   | | | else return 0.4827669997975616;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | then return 0.024747296300857147;  // std dev = 0.376, 294.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=50 */
%   | else return -0.020515955599569036;  // std dev = 0.323, 135.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=16 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( haswordauthor(E, C) )
%   | | then return 0.38692768677802963;  // std dev = 0.489, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.16840709750479005;  // std dev = 28.507, 3,487.000 (wgt'ed) examples reached here.  /* #neg=2,196 #pos=1,291 */
%   | | | else return 0.12154574593474443;  // std dev = 5.929, 166.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=53 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordvenue(B, I) )
%   | | | then return 0.11469570061049139;  // std dev = 1.926, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.3808147927291863;  // std dev = 2.640, 33.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=23 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.3922876267815627;  // std dev = 2.491, 29.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=20 */
%   | | | else return 0.38767559119417716;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.021646559343452672;  // std dev = 0.376, 294.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=50 */
%   | else return -0.018078253955869046;  // std dev = 0.323, 135.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=16 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.14023993818980043;  // std dev = 0.483, 3,494.000 (wgt'ed) examples reached here.  /* #neg=2,198 #pos=1,296 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.08349840219456127;  // std dev = 5.614, 155.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=44 */
%   | | | else return 0.37170450641006475;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.09509476249511592;  // std dev = 1.923, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.2934171249542879;  // std dev = 2.640, 33.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=23 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.30446537247364996;  // std dev = 2.491, 29.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=20 */
%   | | | else return 0.2981179678523666;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.018889722654788898;  // std dev = 0.376, 294.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=50 */
%   | else return -0.01596011237121314;  // std dev = 0.323, 135.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=16 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.1146406915920446;  // std dev = 0.483, 3,489.000 (wgt'ed) examples reached here.  /* #neg=2,196 #pos=1,293 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.013055747652031205;  // std dev = 3.648, 69.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=18 */
%   | | | else return 0.12575532399148043;  // std dev = 4.713, 102.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=37 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.21415581409874485;  // std dev = 2.729, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   | | | else return 0.029450726850303106;  // std dev = 1.772, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.23034300981292113;  // std dev = 2.491, 29.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=20 */
%   | | | else return 0.22456691886984817;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.016449723797226465;  // std dev = 0.376, 294.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=50 */
%   | else return -0.014113262284621403;  // std dev = 0.323, 135.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=16 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.09233998290658875;  // std dev = 0.483, 3,494.000 (wgt'ed) examples reached here.  /* #neg=2,198 #pos=1,296 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.002914744672784288;  // std dev = 3.389, 64.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=15 */
%   | | | else return 0.10298760261845578;  // std dev = 4.710, 102.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=37 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.19038933096955735;  // std dev = 2.656, 33.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=22 */
%   | | | else return -0.01892482776300911;  // std dev = 1.612, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.17337308128065998;  // std dev = 2.610, 33.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=23 */
%   | | | else return 0.16851539199825394;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.014298727689490986;  // std dev = 0.376, 294.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=50 */
%   | else return -0.012498065467474239;  // std dev = 0.323, 135.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=16 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( haswordauthor(E, C) )
%   | | then return 0.2565149204998703;  // std dev = 0.484, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.07327905713771365;  // std dev = 28.499, 3,487.000 (wgt'ed) examples reached here.  /* #neg=2,196 #pos=1,291 */
%   | | | else return 0.045311683446772034;  // std dev = 5.881, 166.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=53 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.14382293277263053;  // std dev = 2.656, 33.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=22 */
%   | | | else return -0.015268554553931729;  // std dev = 1.612, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.13044835139154087;  // std dev = 2.610, 33.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=23 */
%   | | | else return 0.12703020906592258;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.012409101629781998;  // std dev = 0.376, 294.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=50 */
%   | else return -0.011081695371563456;  // std dev = 0.323, 135.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=16 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordvenue(B, D) )
%   | | | then return 0.2700150301264628;  // std dev = 1.746, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | | else return 0.024827700417246912;  // std dev = 3.815, 65.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=22 */
%   | | else return 0.6863661619557081;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( haswordtitle(H, C) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.05713286650975137;  // std dev = 28.180, 3,412.000 (wgt'ed) examples reached here.  /* #neg=2,151 #pos=1,261 */
%   | | | else return 0.03638060112291003;  // std dev = 5.881, 166.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=53 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.0723217853168388;  // std dev = 3.242, 51.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=29 */
%   | | | else return 0.10012007496260009;  // std dev = 3.325, 53.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=37 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.010754131492443062;  // std dev = 0.376, 294.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=50 */
%   | else return -0.00983675860344878;  // std dev = 0.323, 135.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=16 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.04551554539525609;  // std dev = 0.482, 3,489.000 (wgt'ed) examples reached here.  /* #neg=2,196 #pos=1,293 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.015318037423751837;  // std dev = 5.765, 160.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=47 */
%   | | | else return 0.20541469660127804;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.08654198286898238;  // std dev = 2.655, 33.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=22 */
%   | | | else return -0.028341521942816868;  // std dev = 1.612, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.08152428797912833;  // std dev = 2.611, 33.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=23 */
%   | | | else return 0.07297467236459047;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return -0.1107595110677105;  // std dev = 0.218, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | else return 0.009222400724208313;  // std dev = 0.365, 409.000 (wgt'ed) examples reached here.  /* #neg=344 #pos=65 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.03553392993691016;  // std dev = 0.483, 3,494.000 (wgt'ed) examples reached here.  /* #neg=2,198 #pos=1,296 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.035632692909905075;  // std dev = 3.389, 64.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=15 */
%   | | | else return 0.05383909472432693;  // std dev = 4.696, 102.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=37 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.06610584690074822;  // std dev = 2.656, 33.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=22 */
%   | | | else return -0.02280643843474937;  // std dev = 1.612, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.06243673420515985;  // std dev = 2.612, 33.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=23 */
%   | | | else return 0.0562407626973214;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.009124048101407786;  // std dev = 0.375, 294.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=50 */
%   | else return -0.009768039813307153;  // std dev = 0.323, 135.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=16 */


Results
   AUC ROC   = 0.633576
   AUC PR    = 0.622457
   CLL	      = -0.748594
   Precision = 0.870968 at threshold = 0.5
   Recall    = 0.049091
   F1        = 0.092943


Total learning time: 8158.493906021118 seconds
Total inference time: 3.638 seconds
AUC ROC: 0.633576


Results scoring model
   AUC ROC   = 0.573649
   AUC PR    = 0.424133
   CLL	      = -0.632313
   Precision = 0.701031 at threshold = 0.5
   Recall    = 0.045946
   F1        = 0.08624


Total scoring time: 41.998 seconds
Parameter learned model CLL: -0.632313


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'true,false,true': 'haswordtitle(I, J), haswordauthor(K, J)', 'true,false,false': 'haswordvenue(A, L), haswordtitle(M, L)', 'false': 'haswordvenue(B, N), haswordtitle(P, N)'}, {'true,true,true': [0.483, 2, 1], 'true,true,false,true': [5.613, 111, 44], 'true,true,false,false': [1.477, 3, 8], 'true,false,true,true': [2.904, 13, 24], 'true,false,true,false': [1.265, 8, 2], 'true,false,false,true': [2.64, 10, 23], 'true,false,false,false': [2.227, 7, 17], 'false,true': [0.376, 244, 50], 'false,false': [0.323, 119, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'true,false,true': 'haswordtitle(I, J), haswordauthor(K, J)', 'true,false,false': 'haswordvenue(A, L), haswordtitle(M, L)', 'false': 'haswordvenue(B, N), haswordtitle(P, N)'}, {'true,true,true': [0.483, 2, 1], 'true,true,false,true': [5.613, 111, 44], 'true,true,false,false': [1.477, 3, 8], 'true,false,true,true': [2.904, 13, 24], 'true,false,true,false': [1.265, 8, 2], 'true,false,false,true': [2.64, 10, 23], 'true,false,false,false': [2.227, 7, 17], 'false,true': [0.376, 244, 50], 'false,false': [0.323, 119, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'haswordauthor(E, C)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordvenue(B, I)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true': [0.489, 3, 4], 'true,true,false,true': [28.507, 2, 1], 'true,true,false,false': [5.929, 113, 53], 'true,false,true,true': [1.926, 12, 6], 'true,false,true,false': [2.64, 10, 23], 'true,false,false,true': [2.491, 9, 20], 'true,false,false,false': [2.227, 7, 17], 'false,true': [0.376, 244, 50], 'false,false': [0.323, 119, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'haswordtitle(I, J), haswordvenue(B, J)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true,true': [0.483, 2, 1], 'true,true,false,true': [5.614, 111, 44], 'true,true,false,false': [1.477, 3, 8], 'true,false,true,true': [1.923, 12, 6], 'true,false,true,false': [2.64, 10, 23], 'true,false,false,true': [2.491, 9, 20], 'true,false,false,false': [2.227, 7, 17], 'false,true': [0.376, 244, 50], 'false,false': [0.323, 119, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'title(I, H), venue(I, A)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true': [0.483, 2, 1], 'true,true,false,true': [3.648, 51, 18], 'true,true,false,false': [4.713, 65, 37], 'true,false,true,true': [2.729, 15, 24], 'true,false,true,false': [1.772, 7, 5], 'true,false,false,true': [2.491, 9, 20], 'true,false,false,false': [2.227, 7, 17], 'false,true': [0.376, 244, 50], 'false,false': [0.323, 119, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'title(I, H), venue(I, B)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true': [0.483, 2, 1], 'true,true,false,true': [3.389, 49, 15], 'true,true,false,false': [4.71, 65, 37], 'true,false,true,true': [2.656, 11, 22], 'true,false,true,false': [1.612, 10, 4], 'true,false,false,true': [2.61, 10, 23], 'true,false,false,false': [2.227, 7, 17], 'false,true': [0.376, 244, 50], 'false,false': [0.323, 119, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'haswordauthor(E, C)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'title(I, H), venue(I, B)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true': [0.484, 3, 4], 'true,true,false,true': [28.499, 2, 1], 'true,true,false,false': [5.881, 113, 53], 'true,false,true,true': [2.656, 11, 22], 'true,false,true,false': [1.612, 10, 4], 'true,false,false,true': [2.61, 10, 23], 'true,false,false,false': [2.227, 7, 17], 'false,true': [0.376, 244, 50], 'false,false': [0.323, 119, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(E, F), haswordtitle(G, F)', 'true,true,true': 'haswordvenue(B, D)', 'true,false': 'haswordtitle(H, C)', 'true,false,true': 'title(I, H), venue(I, A)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true,true': [1.746, 5, 8], 'true,true,true,false': [3.815, 43, 22], 'true,true,false': [0.0, 0, 4], 'true,false,true,true': [28.18, 2, 1], 'true,false,true,false': [5.881, 113, 53], 'true,false,false,true': [3.242, 22, 29], 'true,false,false,false': [3.325, 16, 37], 'false,true': [0.376, 244, 50], 'false,false': [0.323, 119, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'true,false,true': 'title(J, I), venue(J, B)', 'true,false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false': 'haswordvenue(B, M), haswordauthor(N, M)'}, {'true,true,true': [0.482, 2, 1], 'true,true,false,true': [5.765, 113, 47], 'true,true,false,false': [1.477, 3, 8], 'true,false,true,true': [2.655, 11, 22], 'true,false,true,false': [1.612, 10, 4], 'true,false,false,true': [2.611, 10, 23], 'true,false,false,false': [2.227, 7, 17], 'false,true': [0.218, 19, 1], 'false,false': [0.365, 344, 65]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'title(I, H), venue(I, B)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true': [0.483, 2, 1], 'true,true,false,true': [3.389, 49, 15], 'true,true,false,false': [4.696, 65, 37], 'true,false,true,true': [2.656, 11, 22], 'true,false,true,false': [1.612, 10, 4], 'true,false,false,true': [2.612, 10, 23], 'true,false,false,false': [2.227, 7, 17], 'false,true': [0.375, 244, 50], 'false,false': [0.323, 119, 16]}]]
[{'': [0.23454060561430398, 0.13017751479290035], 'true': [0.23265669324255966, 0.2318786982248514], 'true,true': [0.2333387614519088, 0.21512556249092818], 'true,false': [0.2471706654594853, 0.2092951677439218], 'true,false,true': [0.2279035792549318, 0.16000000000000003], 'true,true,false': [0.20328824141519364, 0.19834710743801634], 'true,false,false': [0.2112029384756668, 0.2065972222222218], 'false': [0.1411448933314833, 0.10447187928669355]}, {'': [0.23363822798322822, 0.1300462672334323], 'true': [0.2324636697932434, 0.22613243737961286], 'true,true': [0.23333876145187205, 0.2116406596382375], 'true,false': [0.23795096446018754, 0.20928515901587755], 'true,false,true': [0.22790357925493077, 0.16], 'true,true,false': [0.20328824141519333, 0.1983471074380164], 'true,false,false': [0.2112029384756655, 0.20659722222222252], 'false': [0.1411448933314843, 0.10447187928669394]}, {'': [0.23276192440580198, 0.12994475653814405], 'true': [0.23228036422424372, 0.22066138902194113], 'true,true': [0.23892801450674578, 0.23217450961018166], 'true,true,false': [0.23304736158914616, 0.21174316386945255], 'true,false': [0.2256056415317032, 0.2106699852029688], 'true,false,true': [0.20618629812909464, 0.2112029384756658], 'true,false,false': [0.21403091557669465, 0.20659722222222188], 'false': [0.1411448933314824, 0.10447187928669416]}, {'': [0.23216394525646558, 0.1298663539475348], 'true': [0.23219679964173387, 0.2158812066258213], 'true,true': [0.23327577076994044, 0.2081336410988149], 'true,false': [0.2181778564998936, 0.21067469755488136], 'true,false,true': [0.20551524421302136, 0.2112029384756657], 'true,false,false': [0.21403091557669413, 0.20659722222222218], 'true,true,false': [0.20332401059784624, 0.1983471074380165], 'false': [0.1411448933314797, 0.1044718792866938]}, {'': [0.23174051861117914, 0.12980588010360716], 'true': [0.2320660442081631, 0.2129711643428358], 'true,true': [0.2330541646224429, 0.21077942908159902], 'true,false': [0.21370189376807897, 0.2106729813861683], 'true,false,true': [0.19090035473015443, 0.26171821326951616], 'true,true,false': [0.19281663516068034, 0.21780568745403278], 'true,false,false': [0.21403091557669446, 0.2065972222222221], 'false': [0.14114489333148028, 0.10447187928669349]}, {'': [0.2314892683348289, 0.12975929183734464], 'true': [0.23197953607047112, 0.21064180670994048], 'true,true': [0.23319751599977742, 0.20547361147736845], 'true,false': [0.2146300515341589, 0.2065064446366286], 'true,false,true': [0.21384607377698592, 0.18571608926388405], 'true,false,false': [0.20643048893430962, 0.20659722222222232], 'true,true,false': [0.17944335937499997, 0.21748234483334322], 'false': [0.14114489333147984, 0.10447187928669455]}, {'': [0.2313162847585849, 0.12972343849211634], 'true': [0.23191072330657225, 0.20868734792600224], 'true,true': [0.23471808229484678, 0.23184023467809675], 'true,true,false': [0.2329222955202117, 0.20836380819427994], 'true,false': [0.21072368412984369, 0.20652870972266102], 'true,false,true': [0.21379282123823729, 0.18571836729991095], 'true,false,false': [0.20647396299890225, 0.2065972222222222], 'false': [0.14114489333148406, 0.10447187928669388]}, {'': [0.23121407646835063, 0.12969587026879167], 'true': [0.2404717779507154, 0.23097486473970008], 'true,true': [0.23401165920347575, 0.0], 'true,true,true': [0.2344459724603043, 0.22390532544378672], 'true,false': [0.23162836218271105, 0.2075988121142175], 'true,false,true': [0.23274257148030117, 0.20831598627710282], 'true,false,false': [0.20615082448686534, 0.20861321648490586], 'false': [0.1411448933314805, 0.10447187928669346]}, {'': [0.2309372142032185, 0.12967468673178134], 'true': [0.23159135091450722, 0.20745969019546331], 'true,true': [0.2326694100767738, 0.20928735966193632], 'true,true,false': [0.2077149163992021, 0.1983471074380165], 'true,false': [0.20811757216888732, 0.2066209824084496], 'true,false,true': [0.21368653971933452, 0.1857238849927367], 'true,false,false': [0.20660748531140075, 0.2065972222222222], 'false': [0.04750000000000001, 0.13302188252031788]}, {'': [0.23086251066652458, 0.12951697989128438], 'true': [0.23153573737301716, 0.20692439391141637], 'true,true': [0.23283480006437587, 0.20394258819804822], 'true,false': [0.20702485835369025, 0.2066570321866557], 'true,false,true': [0.21370897760440055, 0.18571883827881794], 'true,false,false': [0.2066843661055858, 0.20659722222222218], 'true,true,false': [0.17944335937500033, 0.21622831087157438], 'false': [0.14090496654343745, 0.10447187928669356]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
7;true,true;haswordauthor(E, F), haswordtitle(G, F).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.22907051495068065;  // std dev = 0.483, 3,494.000 (wgt'ed) examples reached here.  /* #neg=2,198 #pos=1,296 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.1420199028414474;  // std dev = 5.613, 155.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=44 */
%   | | | else return 0.5854216623722396;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.5067975837481601;  // std dev = 2.904, 37.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=24 */
%   | | | else return 0.058148935099512175;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.5551186320692085;  // std dev = 2.640, 33.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=23 */
%   | | | else return 0.5664822684328457;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | then return 0.028216962310396495;  // std dev = 0.376, 294.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=50 */
%   | else return -0.023332546381969136;  // std dev = 0.323, 135.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.19883765319209387;  // std dev = 0.483, 3,494.000 (wgt'ed) examples reached here.  /* #neg=2,198 #pos=1,296 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.12383763649444274;  // std dev = 5.613, 155.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=44 */
%   | | | else return 0.498380757744019;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.4333373867520823;  // std dev = 2.904, 37.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=24 */
%   | | | else return 0.05092203251355425;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.4733822409131974;  // std dev = 2.640, 33.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=23 */
%   | | | else return 0.4827669997975616;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | then return 0.024747296300857147;  // std dev = 0.376, 294.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=50 */
%   | else return -0.020515955599569036;  // std dev = 0.323, 135.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=16 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.1687678374375728;  // std dev = 0.483, 3,489.000 (wgt'ed) examples reached here.  /* #neg=2,196 #pos=1,293 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.10562619480927411;  // std dev = 5.773, 160.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=47 */
%   | | | else return 0.3990418766037683;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.11469570061049139;  // std dev = 1.926, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.3808147927291863;  // std dev = 2.640, 33.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=23 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.3922876267815627;  // std dev = 2.491, 29.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=20 */
%   | | | else return 0.38767559119417716;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.021646559343452672;  // std dev = 0.376, 294.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=50 */
%   | else return -0.018078253955869046;  // std dev = 0.323, 135.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=16 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.14025481066138856;  // std dev = 0.483, 3,494.000 (wgt'ed) examples reached here.  /* #neg=2,198 #pos=1,296 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.0863961896325099;  // std dev = 5.619, 155.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=44 */
%   | | | else return 0.30590364655137575;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.09509476249511592;  // std dev = 1.923, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.2934171249542879;  // std dev = 2.640, 33.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=23 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.30446537247364996;  // std dev = 2.491, 29.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=20 */
%   | | | else return 0.2981179678523666;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return -0.10117830455609526;  // std dev = 0.218, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | else return 0.013258018047716348;  // std dev = 0.365, 409.000 (wgt'ed) examples reached here.  /* #neg=344 #pos=65 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.11458530304935698;  // std dev = 0.483, 3,489.000 (wgt'ed) examples reached here.  /* #neg=2,196 #pos=1,293 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.016008508031446322;  // std dev = 3.648, 69.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=18 */
%   | | | else return 0.12430622148251225;  // std dev = 4.699, 102.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=37 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.21415581409874485;  // std dev = 2.729, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   | | | else return 0.029450726850303106;  // std dev = 1.772, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.23034300981292113;  // std dev = 2.491, 29.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=20 */
%   | | | else return 0.22456691886984817;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return -0.0886476911772124;  // std dev = 0.218, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | else return 0.011601156264113458;  // std dev = 0.365, 409.000 (wgt'ed) examples reached here.  /* #neg=344 #pos=65 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.0923509874669702;  // std dev = 0.483, 3,494.000 (wgt'ed) examples reached here.  /* #neg=2,198 #pos=1,296 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.0034949471206817302;  // std dev = 3.389, 64.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=15 */
%   | | | else return 0.10208023856249968;  // std dev = 4.696, 102.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=37 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.19038933096955735;  // std dev = 2.656, 33.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=22 */
%   | | | else return -0.01892482776300911;  // std dev = 1.612, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.17337308128065998;  // std dev = 2.610, 33.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=23 */
%   | | | else return 0.16851539199825394;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.017440676868447802;  // std dev = 0.375, 294.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=50 */
%   | else return -0.018879955266886246;  // std dev = 0.323, 135.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=16 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.07356267797640804;  // std dev = 0.483, 3,489.000 (wgt'ed) examples reached here.  /* #neg=2,196 #pos=1,293 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.004576581266504541;  // std dev = 3.648, 69.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=18 */
%   | | | else return 0.08285815860194244;  // std dev = 4.695, 102.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=37 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.14382293277263053;  // std dev = 2.656, 33.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=22 */
%   | | | else return -0.015268554553931729;  // std dev = 1.612, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.13044835139154087;  // std dev = 2.610, 33.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=23 */
%   | | | else return 0.12703020906592258;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.015172105433225598;  // std dev = 0.375, 294.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=50 */
%   | else return -0.016657580623880026;  // std dev = 0.323, 135.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=16 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.058127204424709;  // std dev = 0.483, 3,494.000 (wgt'ed) examples reached here.  /* #neg=2,198 #pos=1,296 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.016429652815629154;  // std dev = 3.389, 64.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=15 */
%   | | | else return 0.06663306559393846;  // std dev = 4.694, 102.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=37 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.1116509598801159;  // std dev = 2.669, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   | | | else return -0.055498032013811815;  // std dev = 1.771, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.10314159561354232;  // std dev = 2.469, 29.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=20 */
%   | | | else return 0.09646907084271174;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.013176290846458863;  // std dev = 0.375, 294.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=50 */
%   | else return -0.014722057879696514;  // std dev = 0.323, 135.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=16 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.04562129158904044;  // std dev = 0.483, 3,489.000 (wgt'ed) examples reached here.  /* #neg=2,196 #pos=1,293 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.015148383123299074;  // std dev = 3.648, 69.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=18 */
%   | | | else return 0.05319513295198638;  // std dev = 4.693, 102.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=37 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.09360091049717625;  // std dev = 2.653, 33.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=22 */
%   | | | else return -0.033529129479844426;  // std dev = 1.612, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.07724263513651551;  // std dev = 2.587, 33.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=23 */
%   | | | else return 0.07382094710190883;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.011426084283485068;  // std dev = 0.375, 294.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=50 */
%   | else return -0.013031005152808035;  // std dev = 0.323, 135.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=16 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then if ( haswordtitle(G, C) )
%   | | | then return 0.2707239913594338;  // std dev = 1.277, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.3777613809191277;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordauthor(E, H), haswordtitle(I, H) )
%   | | | then return 0.0019372050949518582;  // std dev = 3.815, 65.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=22 */
%   | | | else return 0.6634756666334134;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( haswordtitle(J, C) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.03467353096747354;  // std dev = 28.209, 3,417.000 (wgt'ed) examples reached here.  /* #neg=2,153 #pos=1,264 */
%   | | | else return 0.014496474402601035;  // std dev = 5.694, 161.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=50 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.04266851711955906;  // std dev = 3.218, 51.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=29 */
%   | | | else return 0.059084300798667506;  // std dev = 3.322, 53.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=37 */
%   else return 0.003147142652208248;  // std dev = 0.360, 429.000 (wgt'ed) examples reached here.  /* #neg=363 #pos=66 */


Results
   AUC ROC   = 0.633605
   AUC PR    = 0.620912
   CLL	      = -0.750234
   Precision = 0.870968 at threshold = 0.5
   Recall    = 0.049091
   F1        = 0.092943


Total learning time: 9425.756816864014 seconds
Total inference time: 3.504 seconds
AUC ROC: 0.633605


Results scoring model
   AUC ROC   = 0.57373
   AUC PR    = 0.424232
   CLL	      = -0.632214
   Precision = 0.701031 at threshold = 0.5
   Recall    = 0.045946
   F1        = 0.08624


Total scoring time: 39.337 seconds
Refined model CLL: -0.632214


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.633605
   AUC PR    = 0.620912
   CLL	      = -0.750234
   Precision = 0.870968 at threshold = 0.5
   Recall    = 0.049091
   F1        = 0.092943


Total learning time: 17665.58572288513 seconds
Total inference time: 3.504 seconds
AUC ROC: 0.633605
Total revision time: 17665.58572288513
Best scored revision CLL: -0.632214


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 15:35:31
{'AUC ROC': 0.633605, 'AUC PR': 0.620912, 'CLL': -0.750234, 'Precision': [0.870968, 0.5], 'Recall': 0.049091, 'F1': 0.092943, 'Learning time': 17665.58572288513, 'Inference time': 3.504, 'parameter_0.6': {'AUC ROC': 0.633576, 'AUC PR': 0.622457, 'CLL': -0.748594, 'Precision': [0.870968, 0.5], 'Recall': 0.049091, 'F1': 0.092943, 'Learning time': 8158.493906021118, 'Inference time': 3.638}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.22907051495068065;  // std dev = 0.483, 3,494.000 (wgt'ed) examples reached here.  /* #neg=2,198 #pos=1,296 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.1420199028414474;  // std dev = 5.613, 155.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=44 */
%   | | | else return 0.5854216623722396;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.5067975837481601;  // std dev = 2.904, 37.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=24 */
%   | | | else return 0.058148935099512175;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.5551186320692085;  // std dev = 2.640, 33.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=23 */
%   | | | else return 0.5664822684328457;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | then return 0.028216962310396495;  // std dev = 0.376, 294.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=50 */
%   | else return -0.023332546381969136;  // std dev = 0.323, 135.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.19883765319209387;  // std dev = 0.483, 3,494.000 (wgt'ed) examples reached here.  /* #neg=2,198 #pos=1,296 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.12383763649444274;  // std dev = 5.613, 155.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=44 */
%   | | | else return 0.498380757744019;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.4333373867520823;  // std dev = 2.904, 37.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=24 */
%   | | | else return 0.05092203251355425;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.4733822409131974;  // std dev = 2.640, 33.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=23 */
%   | | | else return 0.4827669997975616;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   else if ( haswordvenue(B, N), haswordauthor(P, N) )
%   | then return -0.09532073091002669;  // std dev = 0.218, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | else return 0.01567840030491637;  // std dev = 0.365, 409.000 (wgt'ed) examples reached here.  /* #neg=344 #pos=65 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.1687678374375728;  // std dev = 0.483, 3,489.000 (wgt'ed) examples reached here.  /* #neg=2,196 #pos=1,293 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.10562619480927411;  // std dev = 5.773, 160.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=47 */
%   | | | else return 0.3990418766037683;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.11469570061049139;  // std dev = 1.926, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.3808147927291863;  // std dev = 2.640, 33.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=23 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.3922876267815627;  // std dev = 2.491, 29.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=20 */
%   | | | else return 0.38767559119417716;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.023700828223924844;  // std dev = 0.375, 294.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=50 */
%   | else return -0.02240336395629539;  // std dev = 0.323, 135.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=16 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.14025481066138856;  // std dev = 0.483, 3,494.000 (wgt'ed) examples reached here.  /* #neg=2,198 #pos=1,296 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.031006826379380667;  // std dev = 3.389, 64.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=15 */
%   | | | else return 0.14482267271395846;  // std dev = 4.718, 102.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=37 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordvenue(B, I) )
%   | | | then return 0.09509476249511592;  // std dev = 1.923, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.2934171249542879;  // std dev = 2.640, 33.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=23 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.30446537247364996;  // std dev = 2.491, 29.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=20 */
%   | | | else return 0.2981179678523666;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return -0.08664932967015318;  // std dev = 0.218, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | else return 0.012620875684995068;  // std dev = 0.365, 409.000 (wgt'ed) examples reached here.  /* #neg=344 #pos=65 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.11475564630004677;  // std dev = 0.483, 3,489.000 (wgt'ed) examples reached here.  /* #neg=2,196 #pos=1,293 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.016008508031446322;  // std dev = 3.648, 69.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=18 */
%   | | | else return 0.11992971495665494;  // std dev = 4.714, 102.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=37 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.21415581409874485;  // std dev = 2.729, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   | | | else return 0.029450726850303106;  // std dev = 1.772, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.23034300981292113;  // std dev = 2.491, 29.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=20 */
%   | | | else return 0.22456691886984817;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.019880080853407398;  // std dev = 0.375, 294.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=50 */
%   | else return -0.021223222371098065;  // std dev = 0.323, 135.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=16 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.09231738281216545;  // std dev = 0.483, 3,494.000 (wgt'ed) examples reached here.  /* #neg=2,198 #pos=1,296 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.05000742341522755;  // std dev = 5.608, 155.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=44 */
%   | | | else return 0.24037055897443357;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.19038933096955735;  // std dev = 2.656, 33.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=22 */
%   | | | else return -0.01892482776300911;  // std dev = 1.612, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.17337308128065998;  // std dev = 2.610, 33.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=23 */
%   | | | else return 0.16851539199825394;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.01732588625971226;  // std dev = 0.375, 294.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=50 */
%   | else return -0.01869134754535312;  // std dev = 0.323, 135.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=16 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.7018234581023913;  // std dev = 8.43e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.2981765418976084;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordtitle(H, D), haswordtitle(H, C) )
%   | | | then return -0.12122467492838387;  // std dev = 2.436, 41.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=7 */
%   | | | else return 0.2630664272341084;  // std dev = 2.237, 21.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=12 */
%   | else if ( haswordtitle(I, C) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.07258321362508353;  // std dev = 28.169, 3,409.000 (wgt'ed) examples reached here.  /* #neg=2,149 #pos=1,260 */
%   | | | else return 0.04465390753832616;  // std dev = 5.867, 166.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=53 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.08792328712768083;  // std dev = 3.122, 46.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=25 */
%   | | | else return 0.12900913357022797;  // std dev = 3.431, 57.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=40 */
%   else return 0.005138039887947608;  // std dev = 0.360, 429.000 (wgt'ed) examples reached here.  /* #neg=363 #pos=66 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.057767960047947;  // std dev = 0.482, 3,489.000 (wgt'ed) examples reached here.  /* #neg=2,196 #pos=1,293 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.013367393228433245;  // std dev = 3.648, 69.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=18 */
%   | | | else return 0.07605157700721984;  // std dev = 4.699, 102.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=37 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.10732580285966556;  // std dev = 2.678, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   | | | else return -0.04629011815135902;  // std dev = 1.778, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.10973630855929155;  // std dev = 2.472, 29.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=20 */
%   | | | else return 0.09599920737992862;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.014397002990758107;  // std dev = 0.375, 294.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=50 */
%   | else return -0.017094736989743044;  // std dev = 0.323, 135.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=16 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.04544729868623821;  // std dev = 0.482, 3,494.000 (wgt'ed) examples reached here.  /* #neg=2,198 #pos=1,296 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.026919046955763113;  // std dev = 3.389, 64.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=15 */
%   | | | else return 0.06094968316201271;  // std dev = 4.698, 102.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=37 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.08341222070264315;  // std dev = 2.675, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   | | | else return -0.03501281476519471;  // std dev = 1.778, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.08328812057429907;  // std dev = 2.472, 29.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=20 */
%   | | | else return 0.07347105725093199;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.012495924665056063;  // std dev = 0.375, 294.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=50 */
%   | else return -0.015103305905032836;  // std dev = 0.323, 135.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=16 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.03544452261211087;  // std dev = 0.481, 3,489.000 (wgt'ed) examples reached here.  /* #neg=2,196 #pos=1,293 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.019798314631084914;  // std dev = 3.648, 69.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=18 */
%   | | | else return 0.04852433349212313;  // std dev = 4.697, 102.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=37 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.09235760763145291;  // std dev = 2.654, 33.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=22 */
%   | | | else return -0.07452975727337481;  // std dev = 1.600, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.06232408310358567;  // std dev = 2.573, 33.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=23 */
%   | | | else return 0.056614180319969676;  // std dev = 2.227, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.010830620794232365;  // std dev = 0.375, 294.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=50 */
%   | else return -0.0133644957966382;  // std dev = 0.323, 135.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=16 */


Results
   AUC ROC   = 0.671738
   AUC PR    = 0.672968
   CLL	      = -0.739488
   Precision = 0.870968 at threshold = 0.5
   Recall    = 0.049091
   F1        = 0.092943


Total learning time: 9822.494315624237 seconds
Total inference time: 3.665 seconds
AUC ROC: 0.671738


Dataset: 3_imdb_cora, Fold: 5, Type: Scratch (RDN-B), Time: 18:19:19
{'AUC ROC': 0.671738, 'AUC PR': 0.672968, 'CLL': -0.739488, 'Precision': [0.870968, 0.5], 'Recall': 0.049091, 'F1': 0.092943, 'Learning time': 9822.494315624237, 'Inference time': 3.665}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.22978075230149037;  // std dev = 0.483, 4,639.000 (wgt'ed) examples reached here.  /* #neg=2,915 #pos=1,724 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.16229640053730174;  // std dev = 6.777, 217.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=66 */
%   | | | else return 0.6081489350995123;  // std dev = 1.732, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.14386322081379807;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | | else return 0.46684458727342437;  // std dev = 3.310, 46.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=28 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.5166855204653651;  // std dev = 3.036, 41.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=27 */
%   | | | else return 0.6323424834866084;  // std dev = 2.328, 31.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=24 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.030737767586822423;  // std dev = 0.378, 394.000 (wgt'ed) examples reached here.  /* #neg=326 #pos=68 */
%   | else return -0.04455376760319035;  // std dev = 0.296, 185.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=18 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.19944667871472832;  // std dev = 0.483, 4,639.000 (wgt'ed) examples reached here.  /* #neg=2,915 #pos=1,724 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.14136968900282415;  // std dev = 6.777, 217.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=66 */
%   | | | else return 0.5170719622367218;  // std dev = 1.732, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.12543301544918353;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | | else return 0.40005775023242374;  // std dev = 3.310, 46.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=28 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.4415500313258421;  // std dev = 3.036, 41.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=27 */
%   | | | else return 0.5369148882469233;  // std dev = 2.328, 31.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=24 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.026954730955688413;  // std dev = 0.378, 394.000 (wgt'ed) examples reached here.  /* #neg=326 #pos=68 */
%   | else return -0.039216318809826005;  // std dev = 0.296, 185.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=18 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.1691367622362701;  // std dev = 0.483, 4,639.000 (wgt'ed) examples reached here.  /* #neg=2,915 #pos=1,724 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.12117452065826523;  // std dev = 6.777, 217.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=66 */
%   | | | else return 0.41257245288266015;  // std dev = 1.732, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.32067261995910484;  // std dev = 3.370, 50.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=29 */
%   | | | else return 0.07323622223017917;  // std dev = 1.948, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.35737328437183385;  // std dev = 3.036, 41.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=27 */
%   | | | else return 0.4268513802101671;  // std dev = 2.328, 31.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=24 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.02356875640561949;  // std dev = 0.378, 394.000 (wgt'ed) examples reached here.  /* #neg=326 #pos=68 */
%   | else return -0.03465913619609742;  // std dev = 0.296, 185.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=18 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.140500207190291;  // std dev = 0.483, 4,640.000 (wgt'ed) examples reached here.  /* #neg=2,918 #pos=1,722 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.030179292956787725;  // std dev = 4.122, 88.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=23 */
%   | | | else return 0.1681531413078642;  // std dev = 5.707, 144.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=57 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.27725640456388584;  // std dev = 3.351, 50.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=31 */
%   | | | else return -0.09271038415867389;  // std dev = 1.336, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.277934399431122;  // std dev = 3.209, 45.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=28 */
%   | | | else return 0.32499050613309804;  // std dev = 2.328, 31.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=24 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.020555139889107437;  // std dev = 0.378, 394.000 (wgt'ed) examples reached here.  /* #neg=326 #pos=68 */
%   | else return -0.030739533513494996;  // std dev = 0.296, 185.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=18 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.11492820717515495;  // std dev = 0.483, 4,639.000 (wgt'ed) examples reached here.  /* #neg=2,915 #pos=1,724 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.01058805588353376;  // std dev = 4.006, 89.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=21 */
%   | | | else return 0.13823850488408362;  // std dev = 5.702, 144.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=57 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.22842247055590795;  // std dev = 3.177, 46.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=29 */
%   | | | else return -0.046018481796028465;  // std dev = 1.682, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.2128950496703248;  // std dev = 3.205, 45.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=28 */
%   | | | else return 0.24395567811270072;  // std dev = 2.328, 31.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=24 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.01788618687799036;  // std dev = 0.378, 394.000 (wgt'ed) examples reached here.  /* #neg=326 #pos=68 */
%   | else return -0.027346727863009023;  // std dev = 0.296, 185.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=18 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.09247811586027123;  // std dev = 0.483, 4,640.000 (wgt'ed) examples reached here.  /* #neg=2,918 #pos=1,722 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.0033901777623748823;  // std dev = 4.122, 88.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=23 */
%   | | | else return 0.1118172867319786;  // std dev = 5.698, 144.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=57 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.16834587161081405;  // std dev = 3.235, 50.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=29 */
%   | | | else return -0.02983063814311931;  // std dev = 1.947, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.16368672009154864;  // std dev = 2.994, 41.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=27 */
%   | | | else return 0.18393000993661227;  // std dev = 2.328, 31.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=24 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.015532742668564078;  // std dev = 0.378, 394.000 (wgt'ed) examples reached here.  /* #neg=326 #pos=68 */
%   | else return -0.024393482422311822;  // std dev = 0.296, 185.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=18 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.07373999395597386;  // std dev = 0.483, 4,639.000 (wgt'ed) examples reached here.  /* #neg=2,915 #pos=1,724 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.007912180040650432;  // std dev = 4.006, 89.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=21 */
%   | | | else return 0.08929609965932617;  // std dev = 5.696, 144.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=57 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.1452764922729896;  // std dev = 3.155, 46.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=29 */
%   | | | else return -0.07143075332254514;  // std dev = 1.695, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.12521675493216813;  // std dev = 3.168, 45.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=28 */
%   | | | else return 0.14029348968196592;  // std dev = 2.328, 31.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=24 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.013465400151263936;  // std dev = 0.378, 394.000 (wgt'ed) examples reached here.  /* #neg=326 #pos=68 */
%   | else return -0.021810222111083043;  // std dev = 0.296, 185.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=18 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6856778040812125;  // std dev = 1.03e-07, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.31432219591878724;  // std dev = 1.49e-08, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( haswordauthor(E, C) )
%   | | | then return 0.25514514663805243;  // std dev = 1.972, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   | | | else return -0.10117665804930434;  // std dev = 3.283, 65.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=14 */
%   | else if ( haswordtitle(H, C) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.05740256739083484;  // std dev = 32.496, 4,534.000 (wgt'ed) examples reached here.  /* #neg=2,855 #pos=1,679 */
%   | | | else return 0.03946066484468274;  // std dev = 6.961, 226.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=78 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.05782140088939156;  // std dev = 3.598, 62.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=32 */
%   | | | else return 0.09993907278198559;  // std dev = 3.932, 76.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=52 */
%   else return 0.0016877013897469873;  // std dev = 0.354, 579.000 (wgt'ed) examples reached here.  /* #neg=493 #pos=86 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.04548746747784256;  // std dev = 0.482, 4,640.000 (wgt'ed) examples reached here.  /* #neg=2,918 #pos=1,722 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.018886227391274088;  // std dev = 6.813, 216.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=68 */
%   | | | else return 0.1792874203611397;  // std dev = 1.732, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.08614375863348588;  // std dev = 3.195, 50.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=29 */
%   | | | else return -0.06748458090920807;  // std dev = 1.950, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.08068239610758589;  // std dev = 2.985, 41.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=27 */
%   | | | else return 0.0865302585729113;  // std dev = 2.328, 31.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=24 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.012722021020715523;  // std dev = 0.357, 373.000 (wgt'ed) examples reached here.  /* #neg=316 #pos=57 */
%   | else return -0.018884542931321115;  // std dev = 0.347, 206.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=29 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.03549191182091979;  // std dev = 0.482, 4,639.000 (wgt'ed) examples reached here.  /* #neg=2,915 #pos=1,724 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.025848573482375178;  // std dev = 4.006, 89.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=21 */
%   | | | else return 0.051812154231273465;  // std dev = 5.686, 144.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=57 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.06629813771930192;  // std dev = 3.193, 50.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=29 */
%   | | | else return -0.05239009471659335;  // std dev = 1.948, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.06131830153685834;  // std dev = 2.985, 41.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=27 */
%   | | | else return 0.06825326870986424;  // std dev = 2.328, 31.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=24 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.011853709647131021;  // std dev = 0.378, 394.000 (wgt'ed) examples reached here.  /* #neg=326 #pos=68 */
%   | else return -0.020912666965557426;  // std dev = 0.296, 185.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=18 */


Results
   AUC ROC   = 0.6769
   AUC PR    = 0.680253
   CLL	      = -0.737847
   Precision = 0.870968 at threshold = 0.5
   Recall    = 0.049091
   F1        = 0.092943


Total learning time: 12620.20056796074 seconds
Total inference time: 3.62 seconds
AUC ROC: 0.6769


Results scoring model
   AUC ROC   = 0.580417
   AUC PR    = 0.433186
   CLL	      = -0.629963
   Precision = 0.712 at threshold = 0.5
   Recall    = 0.045109
   F1        = 0.084843


Total scoring time: 55.284 seconds
Parameter learned model CLL: -0.629963


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'haswordtitle(I, J), haswordvenue(B, J)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true,true': [0.483, 2, 1], 'true,true,false,true': [6.777, 151, 66], 'true,true,false,false': [1.732, 4, 12], 'true,false,true,true': [2.07, 15, 6], 'true,false,true,false': [3.31, 18, 28], 'true,false,false,true': [3.036, 14, 27], 'true,false,false,false': [2.328, 7, 24], 'false,true': [0.378, 326, 68], 'false,false': [0.296, 167, 18]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'haswordtitle(I, J), haswordvenue(B, J)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true,true': [0.483, 2, 1], 'true,true,false,true': [6.777, 151, 66], 'true,true,false,false': [1.732, 4, 12], 'true,false,true,true': [2.07, 15, 6], 'true,false,true,false': [3.31, 18, 28], 'true,false,false,true': [3.036, 14, 27], 'true,false,false,false': [2.328, 7, 24], 'false,true': [0.378, 326, 68], 'false,false': [0.296, 167, 18]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'title(J, I), venue(J, A)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true,true': [0.483, 2, 1], 'true,true,false,true': [6.777, 151, 66], 'true,true,false,false': [1.732, 4, 12], 'true,false,true,true': [3.37, 21, 29], 'true,false,true,false': [1.948, 12, 5], 'true,false,false,true': [3.036, 14, 27], 'true,false,false,false': [2.328, 7, 24], 'false,true': [0.378, 326, 68], 'false,false': [0.296, 167, 18]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true,true': [0.483, 2, 1], 'true,true,false,true': [4.122, 65, 23], 'true,true,false,false': [5.707, 87, 57], 'true,false,true,true': [3.351, 19, 31], 'true,false,true,false': [1.336, 11, 2], 'true,false,false,true': [3.209, 17, 28], 'true,false,false,false': [2.328, 7, 24], 'false,true': [0.378, 326, 68], 'false,false': [0.296, 167, 18]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'title(I, H), venue(I, A)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true': [0.483, 2, 1], 'true,true,false,true': [4.006, 68, 21], 'true,true,false,false': [5.702, 87, 57], 'true,false,true,true': [3.177, 17, 29], 'true,false,true,false': [1.682, 13, 4], 'true,false,false,true': [3.205, 17, 28], 'true,false,false,false': [2.328, 7, 24], 'false,true': [0.378, 326, 68], 'false,false': [0.296, 167, 18]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'title(I, H), venue(I, A)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true': [0.483, 2, 1], 'true,true,false,true': [4.122, 65, 23], 'true,true,false,false': [5.698, 87, 57], 'true,false,true,true': [3.235, 21, 29], 'true,false,true,false': [1.947, 12, 5], 'true,false,false,true': [2.994, 14, 27], 'true,false,false,false': [2.328, 7, 24], 'false,true': [0.378, 326, 68], 'false,false': [0.296, 167, 18]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'title(I, H), venue(I, B)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true': [0.483, 2, 1], 'true,true,false,true': [4.006, 68, 21], 'true,true,false,false': [5.696, 87, 57], 'true,false,true,true': [3.155, 17, 29], 'true,false,true,false': [1.695, 13, 4], 'true,false,false,true': [3.168, 17, 28], 'true,false,false,false': [2.328, 7, 24], 'false,true': [0.378, 326, 68], 'false,false': [0.296, 167, 18]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'samebib(F, G), venue(G, A)', 'true,true,false': 'haswordauthor(E, C)', 'true,false': 'haswordtitle(H, C)', 'true,false,true': 'title(I, H), venue(I, B)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)'}, {'true,true,true,true': [1.03e-07, 0, 23], 'true,true,true,false': [1.49e-08, 9, 0], 'true,true,false,true': [1.972, 7, 9], 'true,true,false,false': [3.283, 51, 14], 'true,false,true,true': [32.496, 2, 1], 'true,false,true,false': [6.961, 148, 78], 'true,false,false,true': [3.598, 30, 32], 'true,false,false,false': [3.932, 24, 52], 'false': [0.354, 493, 86]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'title(J, I), venue(J, A)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true,true': [0.482, 2, 1], 'true,true,false,true': [6.813, 148, 68], 'true,true,false,false': [1.732, 4, 12], 'true,false,true,true': [3.195, 21, 29], 'true,false,true,false': [1.95, 12, 5], 'true,false,false,true': [2.985, 14, 27], 'true,false,false,false': [2.328, 7, 24], 'false,true': [0.357, 316, 57], 'false,false': [0.347, 177, 29]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'title(I, H), venue(I, A)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true': [0.482, 2, 1], 'true,true,false,true': [4.006, 68, 21], 'true,true,false,false': [5.686, 87, 57], 'true,false,true,true': [3.193, 21, 29], 'true,false,true,false': [1.948, 12, 5], 'true,false,false,true': [2.985, 14, 27], 'true,false,false,false': [2.328, 7, 24], 'false,true': [0.378, 326, 68], 'false,false': [0.296, 167, 18]}]]
[{'': [0.2347654159053476, 0.1264702109825478], 'true': [0.23306582839234058, 0.23756534340872829], 'true,false': [0.2499443083092019, 0.20659722222222213], 'true,false,true': [0.20408163265306134, 0.23818525519848915], 'true,true': [0.23352160964508165, 0.2226970472839805], 'true,true,false': [0.21164178470555783, 0.18749999999999967], 'true,false,false': [0.22486615110053676, 0.1748178980228938], 'false': [0.1428019273879779, 0.08783053323593837]}, {'': [0.23394051505425892, 0.12618968676084125], 'true': [0.2328751037428074, 0.2310495279848512], 'true,true': [0.23352160964512164, 0.2190112307897826], 'true,false': [0.24372562292067304, 0.20554735338155838], 'true,false,true': [0.20408163265306117, 0.23818525519848846], 'true,true,false': [0.2116417847055588, 0.18750000000000006], 'true,false,false': [0.22486615110053607, 0.17481789802289308], 'false': [0.14280192738797984, 0.08783053323593869]}, {'': [0.2331358993949826, 0.12597484402881523], 'true': [0.23269122841397644, 0.2247210359078212], 'true,true': [0.23352160964518576, 0.21541449209833655], 'true,false': [0.23777693688573176, 0.2045011197934713], 'true,false,true': [0.22717862111787845, 0.22325832629697107], 'true,true,false': [0.2116417847055565, 0.18749999999999983], 'true,false,false': [0.22486615110053576, 0.17481789802289244], 'false': [0.14280192738797687, 0.08783053323593897]}, {'': [0.23254717637820918, 0.1258097431579434], 'true': [0.23255955747687124, 0.2194343246042978], 'true,true': [0.2332539518876756, 0.2180914789422295], 'true,false': [0.2289751511618573, 0.20732977721574292], 'true,false,true': [0.22459267825524318, 0.1371995266970717], 'true,true,false': [0.19305268595041303, 0.2261721148891359], 'true,false,false': [0.2288236575418015, 0.17481789802289252], 'false': [0.14280192738797579, 0.08783053323593938]}, {'': [0.23211652221962864, 0.12568252153853357], 'true': [0.2324587567826629, 0.21396315325035736], 'true,true': [0.23344366654889961, 0.21223265752636233], 'true,false': [0.2199080024170263, 0.206737685021714], 'true,false,true': [0.21935455265902604, 0.16641159661900237], 'true,true,false': [0.18028026764297403, 0.2257568778277821], 'true,false,false': [0.22833335001805632, 0.17481789802289296], 'false': [0.14280192738797556, 0.08783053323593884]}, {'': [0.2318440597876465, 0.12558426402303852], 'true': [0.23237172596568853, 0.2104327129563634], 'true,true': [0.23316998546956882, 0.21595440985375722], 'true,true,false': [0.19305268595041333, 0.2254905692583259], 'true,false': [0.22022965874910794, 0.19989278558572426], 'true,false,true': [0.20934383679820795, 0.22293787988168196], 'true,false,false': [0.21867540921515907, 0.1748178980228928], 'false': [0.14280192738797748, 0.08783053323593872]}, {'': [0.2316745178311958, 0.12550822288928787], 'true': [0.23230354137093093, 0.20818894553177147], 'true,true': [0.23338396979245088, 0.21034913316352577], 'true,true,false': [0.18028026764297414, 0.22532391611789107], 'true,false': [0.2128156713580159, 0.20345342377592324], 'true,false,true': [0.21635711234693925, 0.16894321227725295], 'true,false,false': [0.22308740158609602, 0.1748178980228928], 'false': [0.14280192738797565, 0.08783053323593783]}, {'': [0.23154906409865406, 0.12544926460960615], 'true': [0.23989867003902193, 0.2313284671190812], 'true,true': [0.20214843750000025, 0.20117230861765265], 'true,false': [0.2320381591839408, 0.20626751643570343], 'true,false,true': [0.2329015333275259, 0.21441056514183301], 'true,false,false': [0.2088010514058942, 0.203403716480808], 'true,true,true': [4.633974363652827e-16, 2.4671622769447922e-17], 'true,true,false': [0.24298129109862232, 0.1658013154683994]}, {'': [0.23049789964103248, 0.12544853586602428], 'true': [0.2311744240895149, 0.20635333328656713], 'true,true': [0.23199013165865773, 0.21463030767620955], 'true,true,false': [0.21486557784107263, 0.1875], 'true,false': [0.21356834836617888, 0.19901339274951438], 'true,false,true': [0.20416456449305667, 0.22361335211588224], 'true,false,false': [0.21729282337727496, 0.17481789802289285], 'false': [0.12777074092746948, 0.12060021273853351]}, {'': [0.23041111402430936, 0.12538792488706393], 'true': [0.23112290981984432, 0.2052167498024891], 'true,true': [0.23222327779470137, 0.20904517453213958], 'true,true,false': [0.18028026764297433, 0.22451972629331968], 'true,false': [0.21144983249673552, 0.19903534822642768], 'true,false,true': [0.20385131109699445, 0.22328581550655952], 'true,false,false': [0.21732539621864083, 0.1748178980228928], 'false': [0.1426907787968508, 0.08780693120758834]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
7;true,true;author(F, E), venue(F, B).;true;true
7;true,true,true;samebib(F, G), venue(G, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.22978075230149037;  // std dev = 0.483, 4,639.000 (wgt'ed) examples reached here.  /* #neg=2,915 #pos=1,724 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.16229640053730174;  // std dev = 6.777, 217.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=66 */
%   | | | else return 0.6081489350995123;  // std dev = 1.732, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.14386322081379807;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | | else return 0.46684458727342437;  // std dev = 3.310, 46.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=28 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.5166855204653651;  // std dev = 3.036, 41.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=27 */
%   | | | else return 0.6323424834866084;  // std dev = 2.328, 31.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=24 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.030737767586822423;  // std dev = 0.378, 394.000 (wgt'ed) examples reached here.  /* #neg=326 #pos=68 */
%   | else return -0.04455376760319035;  // std dev = 0.296, 185.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=18 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.19944667871472832;  // std dev = 0.483, 4,639.000 (wgt'ed) examples reached here.  /* #neg=2,915 #pos=1,724 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.14136968900282415;  // std dev = 6.777, 217.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=66 */
%   | | | else return 0.5170719622367218;  // std dev = 1.732, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.12543301544918353;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | | else return 0.40005775023242374;  // std dev = 3.310, 46.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=28 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.4415500313258421;  // std dev = 3.036, 41.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=27 */
%   | | | else return 0.5369148882469233;  // std dev = 2.328, 31.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=24 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.026954730955688413;  // std dev = 0.378, 394.000 (wgt'ed) examples reached here.  /* #neg=326 #pos=68 */
%   | else return -0.039216318809826005;  // std dev = 0.296, 185.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=18 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.1691367622362701;  // std dev = 0.483, 4,639.000 (wgt'ed) examples reached here.  /* #neg=2,915 #pos=1,724 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.12117452065826523;  // std dev = 6.777, 217.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=66 */
%   | | | else return 0.41257245288266015;  // std dev = 1.732, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.32067261995910484;  // std dev = 3.370, 50.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=29 */
%   | | | else return 0.07323622223017917;  // std dev = 1.948, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.35737328437183385;  // std dev = 3.036, 41.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=27 */
%   | | | else return 0.4268513802101671;  // std dev = 2.328, 31.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=24 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.02356875640561949;  // std dev = 0.378, 394.000 (wgt'ed) examples reached here.  /* #neg=326 #pos=68 */
%   | else return -0.03465913619609742;  // std dev = 0.296, 185.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=18 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.140500207190291;  // std dev = 0.483, 4,640.000 (wgt'ed) examples reached here.  /* #neg=2,918 #pos=1,722 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.030179292956787725;  // std dev = 4.122, 88.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=23 */
%   | | | else return 0.1681531413078642;  // std dev = 5.707, 144.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=57 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.27725640456388584;  // std dev = 3.351, 50.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=31 */
%   | | | else return -0.09271038415867389;  // std dev = 1.336, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.277934399431122;  // std dev = 3.209, 45.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=28 */
%   | | | else return 0.32499050613309804;  // std dev = 2.328, 31.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=24 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.020555139889107437;  // std dev = 0.378, 394.000 (wgt'ed) examples reached here.  /* #neg=326 #pos=68 */
%   | else return -0.030739533513494996;  // std dev = 0.296, 185.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=18 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.11492820717515495;  // std dev = 0.483, 4,639.000 (wgt'ed) examples reached here.  /* #neg=2,915 #pos=1,724 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.01058805588353376;  // std dev = 4.006, 89.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=21 */
%   | | | else return 0.13823850488408362;  // std dev = 5.702, 144.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=57 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.22842247055590795;  // std dev = 3.177, 46.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=29 */
%   | | | else return -0.046018481796028465;  // std dev = 1.682, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.2128950496703248;  // std dev = 3.205, 45.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=28 */
%   | | | else return 0.24395567811270072;  // std dev = 2.328, 31.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=24 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.01788618687799036;  // std dev = 0.378, 394.000 (wgt'ed) examples reached here.  /* #neg=326 #pos=68 */
%   | else return -0.027346727863009023;  // std dev = 0.296, 185.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=18 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.09247811586027123;  // std dev = 0.483, 4,640.000 (wgt'ed) examples reached here.  /* #neg=2,918 #pos=1,722 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.0033901777623748823;  // std dev = 4.122, 88.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=23 */
%   | | | else return 0.1118172867319786;  // std dev = 5.698, 144.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=57 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.16834587161081405;  // std dev = 3.235, 50.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=29 */
%   | | | else return -0.02983063814311931;  // std dev = 1.947, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.16368672009154864;  // std dev = 2.994, 41.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=27 */
%   | | | else return 0.18393000993661227;  // std dev = 2.328, 31.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=24 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.015532742668564078;  // std dev = 0.378, 394.000 (wgt'ed) examples reached here.  /* #neg=326 #pos=68 */
%   | else return -0.024393482422311822;  // std dev = 0.296, 185.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=18 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6513488577257862;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.2986511422742139;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordauthor(E, C) )
%   | | | then return 0.2717845937786049;  // std dev = 1.970, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   | | | else return -0.03657020703219528;  // std dev = 3.541, 65.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=17 */
%   | else if ( haswordtitle(H, C) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.07255257764024868;  // std dev = 32.522, 4,538.000 (wgt'ed) examples reached here.  /* #neg=2,857 #pos=1,681 */
%   | | | else return 0.0520677947318293;  // std dev = 6.905, 227.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=76 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.09244816434866551;  // std dev = 3.645, 62.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=33 */
%   | | | else return 0.13136647568537557;  // std dev = 3.932, 76.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=52 */
%   else return 0.0021942600501688326;  // std dev = 0.354, 579.000 (wgt'ed) examples reached here.  /* #neg=493 #pos=86 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.05809801796893625;  // std dev = 0.482, 4,639.000 (wgt'ed) examples reached here.  /* #neg=2,915 #pos=1,724 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.017640819435703878;  // std dev = 4.006, 89.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=21 */
%   | | | else return 0.07651513936810189;  // std dev = 5.698, 144.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=57 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.09991844073133921;  // std dev = 3.217, 50.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=29 */
%   | | | else return -0.04531159841400275;  // std dev = 1.952, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.10016674403526322;  // std dev = 2.994, 41.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=27 */
%   | | | else return 0.11037642178924044;  // std dev = 2.328, 31.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=24 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.013171581560219539;  // std dev = 0.378, 394.000 (wgt'ed) examples reached here.  /* #neg=326 #pos=68 */
%   | else return -0.02204063837457808;  // std dev = 0.296, 185.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=18 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.045621503475921414;  // std dev = 0.482, 4,640.000 (wgt'ed) examples reached here.  /* #neg=2,918 #pos=1,722 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.017441010498688157;  // std dev = 6.814, 216.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=68 */
%   | | | else return 0.17933000928678816;  // std dev = 1.732, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.07644418341319838;  // std dev = 3.214, 50.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=29 */
%   | | | else return -0.035444307558739736;  // std dev = 1.951, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.07572582543517142;  // std dev = 2.994, 41.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=27 */
%   | | | else return 0.08620595703897634;  // std dev = 2.328, 31.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=24 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.012693367700802196;  // std dev = 0.357, 373.000 (wgt'ed) examples reached here.  /* #neg=316 #pos=57 */
%   | else return -0.01891329725867591;  // std dev = 0.347, 206.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=29 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.03553663403594795;  // std dev = 0.482, 4,640.000 (wgt'ed) examples reached here.  /* #neg=2,918 #pos=1,722 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.026650904074611195;  // std dev = 4.122, 88.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=23 */
%   | | | else return 0.052084841242120566;  // std dev = 5.686, 144.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=57 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.09361955343619761;  // std dev = 3.156, 46.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=29 */
%   | | | else return -0.12307382997700567;  // std dev = 1.688, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.057705100531546184;  // std dev = 3.128, 45.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=28 */
%   | | | else return 0.06800712183018388;  // std dev = 2.328, 31.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=24 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.0118288825610576;  // std dev = 0.378, 394.000 (wgt'ed) examples reached here.  /* #neg=326 #pos=68 */
%   | else return -0.02093846628094529;  // std dev = 0.296, 185.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=18 */


Results
   AUC ROC   = 0.676784
   AUC PR    = 0.680226
   CLL	      = -0.738357
   Precision = 0.870968 at threshold = 0.5
   Recall    = 0.049091
   F1        = 0.092943


Total learning time: 12512.05679321289 seconds
Total inference time: 3.544 seconds
AUC ROC: 0.676784


Results scoring model
   AUC ROC   = 0.577849
   AUC PR    = 0.430352
   CLL	      = -0.630522
   Precision = 0.714286 at threshold = 0.5
   Recall    = 0.045616
   F1        = 0.085755


Total scoring time: 53.319 seconds
Refined model CLL: -0.630522


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.6769
   AUC PR    = 0.680253
   CLL	      = -0.737847
   Precision = 0.870968 at threshold = 0.5
   Recall    = 0.049091
   F1        = 0.092943


Total learning time: 25240.86036117363 seconds
Total inference time: 3.62 seconds
AUC ROC: 0.6769
Total revision time: 25240.86036117363
Best scored revision CLL: -0.629963


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 01:20:14
{'AUC ROC': 0.6769, 'AUC PR': 0.680253, 'CLL': -0.737847, 'Precision': [0.870968, 0.5], 'Recall': 0.049091, 'F1': 0.092943, 'Learning time': 25240.86036117363, 'Inference time': 3.62, 'parameter_0.8': {'AUC ROC': 0.6769, 'AUC PR': 0.680253, 'CLL': -0.737847, 'Precision': [0.870968, 0.5], 'Recall': 0.049091, 'F1': 0.092943, 'Learning time': 12620.20056796074, 'Inference time': 3.62}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.22978075230149037;  // std dev = 0.483, 4,639.000 (wgt'ed) examples reached here.  /* #neg=2,915 #pos=1,724 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.16229640053730174;  // std dev = 6.777, 217.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=66 */
%   | | | else return 0.6081489350995123;  // std dev = 1.732, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.14386322081379807;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | | else return 0.46684458727342437;  // std dev = 3.310, 46.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=28 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.5166855204653651;  // std dev = 3.036, 41.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=27 */
%   | | | else return 0.6323424834866084;  // std dev = 2.328, 31.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=24 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.030737767586822423;  // std dev = 0.378, 394.000 (wgt'ed) examples reached here.  /* #neg=326 #pos=68 */
%   | else return -0.04455376760319035;  // std dev = 0.296, 185.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=18 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.19944667871472832;  // std dev = 0.483, 4,639.000 (wgt'ed) examples reached here.  /* #neg=2,915 #pos=1,724 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.14136968900282415;  // std dev = 6.777, 217.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=66 */
%   | | | else return 0.5170719622367218;  // std dev = 1.732, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.12543301544918353;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | | else return 0.40005775023242374;  // std dev = 3.310, 46.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=28 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.4415500313258421;  // std dev = 3.036, 41.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=27 */
%   | | | else return 0.5369148882469233;  // std dev = 2.328, 31.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=24 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.026954730955688413;  // std dev = 0.378, 394.000 (wgt'ed) examples reached here.  /* #neg=326 #pos=68 */
%   | else return -0.039216318809826005;  // std dev = 0.296, 185.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=18 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.1691367622362701;  // std dev = 0.483, 4,639.000 (wgt'ed) examples reached here.  /* #neg=2,915 #pos=1,724 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.12117452065826523;  // std dev = 6.777, 217.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=66 */
%   | | | else return 0.41257245288266015;  // std dev = 1.732, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.32067261995910484;  // std dev = 3.370, 50.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=29 */
%   | | | else return 0.07323622223017917;  // std dev = 1.948, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.35737328437183385;  // std dev = 3.036, 41.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=27 */
%   | | | else return 0.4268513802101671;  // std dev = 2.328, 31.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=24 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.02356875640561949;  // std dev = 0.378, 394.000 (wgt'ed) examples reached here.  /* #neg=326 #pos=68 */
%   | else return -0.03465913619609742;  // std dev = 0.296, 185.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=18 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.140500207190291;  // std dev = 0.483, 4,640.000 (wgt'ed) examples reached here.  /* #neg=2,918 #pos=1,722 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.030179292956787725;  // std dev = 4.122, 88.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=23 */
%   | | | else return 0.1681531413078642;  // std dev = 5.707, 144.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=57 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.27725640456388584;  // std dev = 3.351, 50.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=31 */
%   | | | else return -0.09271038415867389;  // std dev = 1.336, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.277934399431122;  // std dev = 3.209, 45.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=28 */
%   | | | else return 0.32499050613309804;  // std dev = 2.328, 31.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=24 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.020555139889107437;  // std dev = 0.378, 394.000 (wgt'ed) examples reached here.  /* #neg=326 #pos=68 */
%   | else return -0.030739533513494996;  // std dev = 0.296, 185.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=18 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( haswordauthor(E, C) )
%   | | then if ( author(F, E), title(F, D) )
%   | | | then return 0.7429075000375821;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.13805348297056488;  // std dev = 1.365, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.1144664254608022;  // std dev = 32.882, 4,634.000 (wgt'ed) examples reached here.  /* #neg=2,914 #pos=1,720 */
%   | | | else return 0.0891192458733629;  // std dev = 6.937, 227.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=76 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.22842247055590795;  // std dev = 3.177, 46.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=29 */
%   | | | else return -0.046018481796028465;  // std dev = 1.682, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.2128950496703248;  // std dev = 3.205, 45.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=28 */
%   | | | else return 0.24395567811270072;  // std dev = 2.328, 31.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=24 */
%   else return 0.00343352845470007;  // std dev = 0.355, 579.000 (wgt'ed) examples reached here.  /* #neg=493 #pos=86 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.09239411994531616;  // std dev = 0.483, 4,639.000 (wgt'ed) examples reached here.  /* #neg=2,915 #pos=1,724 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.005349618282897738;  // std dev = 4.006, 89.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=21 */
%   | | | else return 0.12100628070142484;  // std dev = 5.700, 144.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=57 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.16834587161081405;  // std dev = 3.235, 50.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=29 */
%   | | | else return -0.02983063814311931;  // std dev = 1.947, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.16368672009154864;  // std dev = 2.994, 41.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=27 */
%   | | | else return 0.18393000993661227;  // std dev = 2.328, 31.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=24 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.017436652744040878;  // std dev = 0.378, 394.000 (wgt'ed) examples reached here.  /* #neg=326 #pos=68 */
%   | else return -0.027721835984458622;  // std dev = 0.296, 185.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=18 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.07360433795479876;  // std dev = 0.483, 4,640.000 (wgt'ed) examples reached here.  /* #neg=2,918 #pos=1,722 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.014595313340133469;  // std dev = 4.122, 88.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=23 */
%   | | | else return 0.09704664031734996;  // std dev = 5.697, 144.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=57 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.1452764922729896;  // std dev = 3.155, 46.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=29 */
%   | | | else return -0.07143075332254514;  // std dev = 1.695, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.12521675493216813;  // std dev = 3.168, 45.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=28 */
%   | | | else return 0.14029348968196592;  // std dev = 2.328, 31.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=24 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.015137288837269077;  // std dev = 0.378, 394.000 (wgt'ed) examples reached here.  /* #neg=326 #pos=68 */
%   | else return -0.02472075131811422;  // std dev = 0.296, 185.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=18 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.05813874839210375;  // std dev = 0.483, 4,639.000 (wgt'ed) examples reached here.  /* #neg=2,915 #pos=1,724 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.018065051651837076;  // std dev = 4.006, 89.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=21 */
%   | | | else return 0.07699272236089955;  // std dev = 5.696, 144.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=57 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.10382676109133204;  // std dev = 3.324, 50.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=31 */
%   | | | else return -0.08202103337128551;  // std dev = 1.329, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.09411928184471555;  // std dev = 3.168, 45.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=28 */
%   | | | else return 0.10838715640060288;  // std dev = 2.328, 31.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=24 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.013118739549125655;  // std dev = 0.378, 394.000 (wgt'ed) examples reached here.  /* #neg=326 #pos=68 */
%   | else return -0.022097075255581865;  // std dev = 0.296, 185.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=18 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( haswordauthor(E, C) )
%   | | then if ( author(F, E), title(F, D) )
%   | | | then return 0.5235053845791648;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.055262557958738974;  // std dev = 1.366, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.0452859900387159;  // std dev = 32.862, 4,635.000 (wgt'ed) examples reached here.  /* #neg=2,917 #pos=1,718 */
%   | | | else return 0.029029094357635524;  // std dev = 6.962, 226.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=78 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.08639355084958397;  // std dev = 3.155, 46.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=29 */
%   | | | else return -0.052422478011999354;  // std dev = 1.688, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.07087615120748894;  // std dev = 3.168, 45.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=28 */
%   | | | else return 0.08471864104475094;  // std dev = 2.328, 31.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=24 */
%   else return 0.0014008783278323645;  // std dev = 0.354, 579.000 (wgt'ed) examples reached here.  /* #neg=493 #pos=86 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.035557027376984636;  // std dev = 0.483, 4,640.000 (wgt'ed) examples reached here.  /* #neg=2,918 #pos=1,722 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.02932880086044981;  // std dev = 4.122, 88.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=23 */
%   | | | else return 0.05405021204556932;  // std dev = 5.695, 144.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=57 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.06665629237031032;  // std dev = 3.151, 46.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=29 */
%   | | | else return -0.04377357424205273;  // std dev = 1.694, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.05351486104950854;  // std dev = 3.168, 45.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=28 */
%   | | | else return 0.06687749933215395;  // std dev = 2.328, 31.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=24 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.012477292118102851;  // std dev = 0.357, 373.000 (wgt'ed) examples reached here.  /* #neg=316 #pos=57 */
%   | else return -0.019147612994095682;  // std dev = 0.347, 206.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=29 */


Results
   AUC ROC   = 0.644095
   AUC PR    = 0.646429
   CLL	      = -0.746262
   Precision = 0.875 at threshold = 0.5
   Recall    = 0.050909
   F1        = 0.09622


Total learning time: 11826.622157096863 seconds
Total inference time: 3.773 seconds
AUC ROC: 0.644095


Dataset: 3_imdb_cora, Fold: 5, Type: Scratch (RDN-B), Time: 04:37:25
{'AUC ROC': 0.644095, 'AUC PR': 0.646429, 'CLL': -0.746262, 'Precision': [0.875, 0.5], 'Recall': 0.050909, 'F1': 0.09622, 'Learning time': 11826.622157096863, 'Inference time': 3.773}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.2282181392517563;  // std dev = 0.483, 5,780.000 (wgt'ed) examples reached here.  /* #neg=3,641 #pos=2,139 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.17769780727996295;  // std dev = 7.605, 266.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=85 */
%   | | | else return 0.5133213488926157;  // std dev = 2.560, 29.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.43879409638983374;  // std dev = 3.885, 62.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=36 */
%   | | | else return 0.20430278125335852;  // std dev = 2.426, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.4322230091735853;  // std dev = 3.634, 54.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | | else return 0.6081489350995114;  // std dev = 2.739, 40.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=30 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return -0.0607699838194067;  // std dev = 0.273, 37.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=3 */
%   | else return 0.02361656099879113;  // std dev = 0.372, 695.000 (wgt'ed) examples reached here.  /* #neg=580 #pos=115 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1982401019459203;  // std dev = 0.483, 5,780.000 (wgt'ed) examples reached here.  /* #neg=3,641 #pos=2,139 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.15176214164513685;  // std dev = 7.612, 266.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=85 */
%   | | | else return 0.4387568996768591;  // std dev = 2.560, 29.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.386542148360619;  // std dev = 3.867, 62.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=36 */
%   | | | else return 0.1451649326829113;  // std dev = 2.416, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.3752831052578744;  // std dev = 3.609, 54.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | | else return 0.517071962236721;  // std dev = 2.739, 40.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=30 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return -0.06366919974167344;  // std dev = 0.273, 37.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=3 */
%   | else return 0.021257010121019063;  // std dev = 0.371, 695.000 (wgt'ed) examples reached here.  /* #neg=580 #pos=115 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.16817227184004827;  // std dev = 0.483, 5,780.000 (wgt'ed) examples reached here.  /* #neg=3,641 #pos=2,139 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.06222224166802158;  // std dev = 4.562, 109.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=28 */
%   | | | else return 0.20412200974003036;  // std dev = 6.606, 186.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=76 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.3190425214142974;  // std dev = 3.863, 62.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=36 */
%   | | | else return 0.12085389182376663;  // std dev = 2.415, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.30885289439161834;  // std dev = 3.604, 54.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | | else return 0.4125724528826602;  // std dev = 2.739, 40.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=30 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return -0.055963986122062485;  // std dev = 0.273, 37.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=3 */
%   | else return 0.018613820124439732;  // std dev = 0.371, 695.000 (wgt'ed) examples reached here.  /* #neg=580 #pos=115 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.1400366692276669;  // std dev = 0.483, 5,780.000 (wgt'ed) examples reached here.  /* #neg=3,641 #pos=2,139 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.03519848556363634;  // std dev = 4.562, 109.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=28 */
%   | | | else return 0.16931715823737736;  // std dev = 6.599, 186.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=76 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.26599352825438083;  // std dev = 3.846, 62.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=36 */
%   | | | else return 0.06272097989767102;  // std dev = 2.403, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.2472840534224903;  // std dev = 3.576, 54.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | | else return 0.3151786576185067;  // std dev = 2.739, 40.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=30 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return -0.058244935558504435;  // std dev = 0.273, 37.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=3 */
%   | else return 0.016733155821163064;  // std dev = 0.371, 695.000 (wgt'ed) examples reached here.  /* #neg=580 #pos=115 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.11431455845681501;  // std dev = 0.483, 5,780.000 (wgt'ed) examples reached here.  /* #neg=3,641 #pos=2,139 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.07826105184413269;  // std dev = 7.587, 266.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=85 */
%   | | | else return 0.2716165873289019;  // std dev = 2.560, 29.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.2064655423359757;  // std dev = 3.843, 62.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=36 */
%   | | | else return 0.049841656075472744;  // std dev = 2.403, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.19104059495109732;  // std dev = 3.572, 54.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | | else return 0.23676009386434232;  // std dev = 2.739, 40.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=30 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return -0.05140613508290497;  // std dev = 0.273, 37.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=3 */
%   | else return 0.014602368640375082;  // std dev = 0.371, 695.000 (wgt'ed) examples reached here.  /* #neg=580 #pos=115 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.09207306048399785;  // std dev = 0.483, 5,780.000 (wgt'ed) examples reached here.  /* #neg=3,641 #pos=2,139 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.008333747340515492;  // std dev = 4.562, 109.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=28 */
%   | | | else return 0.11462883629835326;  // std dev = 6.568, 186.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=76 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.1697775644681322;  // std dev = 3.834, 62.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=36 */
%   | | | else return 0.009106962111176193;  // std dev = 2.394, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.14560984068938176;  // std dev = 3.552, 54.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | | else return 0.17806945427207496;  // std dev = 2.739, 40.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=30 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.019717868985819748;  // std dev = 0.375, 482.000 (wgt'ed) examples reached here.  /* #neg=400 #pos=82 */
%   | else return -0.009397677958629766;  // std dev = 0.351, 250.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.0734043084737476;  // std dev = 0.483, 5,780.000 (wgt'ed) examples reached here.  /* #neg=3,641 #pos=2,139 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.0028388179785704803;  // std dev = 4.562, 109.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=28 */
%   | | | else return 0.0908285883983238;  // std dev = 6.566, 186.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=76 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.12872264946298273;  // std dev = 3.834, 62.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=36 */
%   | | | else return 0.007078192489161551;  // std dev = 2.394, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.11000933819518952;  // std dev = 3.550, 54.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | | else return 0.13513671764223473;  // std dev = 2.739, 40.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=30 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.019008616001445804;  // std dev = 0.375, 482.000 (wgt'ed) examples reached here.  /* #neg=400 #pos=82 */
%   | else return -0.011702515529158396;  // std dev = 0.351, 250.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.05795972558547745;  // std dev = 0.483, 5,780.000 (wgt'ed) examples reached here.  /* #neg=3,641 #pos=2,139 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.007244085747042565;  // std dev = 4.562, 109.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=28 */
%   | | | else return 0.07126608430163882;  // std dev = 6.565, 186.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=76 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.09713708284532806;  // std dev = 3.833, 62.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=36 */
%   | | | else return 0.005497307069324566;  // std dev = 2.393, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.08285771851735863;  // std dev = 3.549, 54.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | | else return 0.103671751136855;  // std dev = 2.739, 40.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=30 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.01673777803611901;  // std dev = 0.375, 482.000 (wgt'ed) examples reached here.  /* #neg=400 #pos=82 */
%   | else return -0.010522521058902053;  // std dev = 0.351, 250.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.06639092417936772;  // std dev = 5.225, 115.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=45 */
%   | | | else return 0.024274251562798575;  // std dev = 2.133, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   | | else return 0.6742742515627985;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( haswordtitle(H, C) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.044647429459742885;  // std dev = 36.252, 5,648.000 (wgt'ed) examples reached here.  /* #neg=3,563 #pos=2,085 */
%   | | | else return 0.030384789866007858;  // std dev = 7.930, 289.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=102 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.04915028224922673;  // std dev = 4.479, 86.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=44 */
%   | | | else return 0.0700199131113026;  // std dev = 4.483, 94.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=61 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return -0.058748981047452006;  // std dev = 0.273, 37.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=3 */
%   | else return 0.009927921306675046;  // std dev = 0.371, 695.000 (wgt'ed) examples reached here.  /* #neg=580 #pos=115 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.03546699689235901;  // std dev = 0.482, 5,780.000 (wgt'ed) examples reached here.  /* #neg=3,641 #pos=2,139 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.011756456028228019;  // std dev = 7.570, 266.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=85 */
%   | | | else return 0.12913541133789178;  // std dev = 2.560, 29.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.07768714602375335;  // std dev = 3.828, 62.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=36 */
%   | | | else return -0.05366835240029359;  // std dev = 2.382, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.04847100876370978;  // std dev = 3.527, 54.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | | else return 0.06504666570761924;  // std dev = 2.739, 40.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=30 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.015486876481607884;  // std dev = 0.375, 482.000 (wgt'ed) examples reached here.  /* #neg=400 #pos=82 */
%   | else return -0.013566592030345943;  // std dev = 0.351, 250.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=36 */


Results
   AUC ROC   = 0.625476
   AUC PR    = 0.614815
   CLL	      = -0.751458
   Precision = 0.870968 at threshold = 0.5
   Recall    = 0.049091
   F1        = 0.092943


Total learning time: 15484.875372171402 seconds
Total inference time: 3.467 seconds
AUC ROC: 0.625476


Results scoring model
   AUC ROC   = 0.566272
   AUC PR    = 0.41492
   CLL	      = -0.63483
   Precision = 0.664596 at threshold = 0.5
   Recall    = 0.043373
   F1        = 0.081431


Total scoring time: 63.996 seconds
Parameter learned model CLL: -0.63483


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'title(J, I), venue(J, A)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(A, M), haswordauthor(N, M)'}, {'true,true,true': [0.483, 3, 2], 'true,true,false,true': [7.605, 181, 85], 'true,true,false,false': [2.56, 10, 19], 'true,false,true,true': [3.885, 26, 36], 'true,false,true,false': [2.426, 17, 9], 'true,false,false,true': [3.634, 23, 31], 'true,false,false,false': [2.739, 10, 30], 'false,true': [0.273, 34, 3], 'false,false': [0.372, 580, 115]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'true,false,true': 'title(J, I), venue(J, B)', 'true,false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false': 'haswordvenue(B, M), haswordauthor(N, M)'}, {'true,true,true': [0.483, 3, 2], 'true,true,false,true': [7.612, 181, 85], 'true,true,false,false': [2.56, 10, 19], 'true,false,true,true': [3.867, 26, 36], 'true,false,true,false': [2.416, 17, 9], 'true,false,false,true': [3.609, 23, 31], 'true,false,false,false': [2.739, 10, 30], 'false,true': [0.273, 34, 3], 'false,false': [0.371, 580, 115]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'title(I, H), venue(I, B)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true': [0.483, 3, 2], 'true,true,false,true': [4.562, 81, 28], 'true,true,false,false': [6.606, 110, 76], 'true,false,true,true': [3.863, 26, 36], 'true,false,true,false': [2.415, 17, 9], 'true,false,false,true': [3.604, 23, 31], 'true,false,false,false': [2.739, 10, 30], 'false,true': [0.273, 34, 3], 'false,false': [0.371, 580, 115]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'title(I, H), venue(I, A)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(A, L), haswordauthor(M, L)'}, {'true,true,true': [0.483, 3, 2], 'true,true,false,true': [4.562, 81, 28], 'true,true,false,false': [6.599, 110, 76], 'true,false,true,true': [3.846, 26, 36], 'true,false,true,false': [2.403, 17, 9], 'true,false,false,true': [3.576, 23, 31], 'true,false,false,false': [2.739, 10, 30], 'false,true': [0.273, 34, 3], 'false,false': [0.371, 580, 115]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'title(J, I), venue(J, A)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(A, M), haswordauthor(N, M)'}, {'true,true,true': [0.483, 3, 2], 'true,true,false,true': [7.587, 181, 85], 'true,true,false,false': [2.56, 10, 19], 'true,false,true,true': [3.843, 26, 36], 'true,false,true,false': [2.403, 17, 9], 'true,false,false,true': [3.572, 23, 31], 'true,false,false,false': [2.739, 10, 30], 'false,true': [0.273, 34, 3], 'false,false': [0.371, 580, 115]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'title(I, H), venue(I, B)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true': [0.483, 3, 2], 'true,true,false,true': [4.562, 81, 28], 'true,true,false,false': [6.568, 110, 76], 'true,false,true,true': [3.834, 26, 36], 'true,false,true,false': [2.394, 17, 9], 'true,false,false,true': [3.552, 23, 31], 'true,false,false,false': [2.739, 10, 30], 'false,true': [0.375, 400, 82], 'false,false': [0.351, 214, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'title(I, H), venue(I, B)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true': [0.483, 3, 2], 'true,true,false,true': [4.562, 81, 28], 'true,true,false,false': [6.566, 110, 76], 'true,false,true,true': [3.834, 26, 36], 'true,false,true,false': [2.394, 17, 9], 'true,false,false,true': [3.55, 23, 31], 'true,false,false,false': [2.739, 10, 30], 'false,true': [0.375, 400, 82], 'false,false': [0.351, 214, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'title(I, H), venue(I, B)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true': [0.483, 3, 2], 'true,true,false,true': [4.562, 81, 28], 'true,true,false,false': [6.565, 110, 76], 'true,false,true,true': [3.833, 26, 36], 'true,false,true,false': [2.393, 17, 9], 'true,false,false,true': [3.549, 23, 31], 'true,false,false,false': [2.739, 10, 30], 'false,true': [0.375, 400, 82], 'false,false': [0.351, 214, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(E, F), haswordtitle(G, F)', 'true,true,true': 'haswordtitle(G, D)', 'true,false': 'haswordtitle(H, C)', 'true,false,true': 'title(I, H), venue(I, B)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true,true': [5.225, 70, 45], 'true,true,true,false': [2.133, 13, 7], 'true,true,false': [0.0, 0, 5], 'true,false,true,true': [36.252, 3, 2], 'true,false,true,false': [7.93, 187, 102], 'true,false,false,true': [4.479, 42, 44], 'true,false,false,false': [4.483, 33, 61], 'false,true': [0.273, 34, 3], 'false,false': [0.371, 580, 115]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'title(J, I), venue(J, A)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true,true': [0.482, 3, 2], 'true,true,false,true': [7.57, 181, 85], 'true,true,false,false': [2.56, 10, 19], 'true,false,true,true': [3.828, 26, 36], 'true,false,true,false': [2.382, 17, 9], 'true,false,false,true': [3.527, 23, 31], 'true,false,false,false': [2.739, 10, 30], 'false,true': [0.375, 400, 82], 'false,false': [0.351, 214, 36]}]]
[{'': [0.2344797065259762, 0.1352160410881197], 'true': [0.23289609646219925, 0.24320734210844422], 'true,false': [0.24987086776859532, 0.22781801720235345], 'true,false,true': [0.2434963579604596, 0.22633136094674564], 'true,true': [0.23311798829031047, 0.2282562482045412], 'true,true,false': [0.21743739046865357, 0.22592152199762158], 'true,false,false': [0.24451303155007015, 0.1875000000000015], 'false': [0.07450693937180408, 0.1380880906785375]}, {'': [0.23385403158309442, 0.1351388665810163], 'true': [0.23275557738049388, 0.23904309175766544], 'true,false': [0.24837153643659365, 0.223301804749916], 'true,false,true': [0.24118169279768675, 0.22446764437959207], 'true,true': [0.23308871131463327, 0.22591100349360213], 'true,true,false': [0.21781286100044517, 0.22592152199762183], 'true,false,false': [0.24126673247623512, 0.18750000000000097], 'false': [0.07450693937180407, 0.13800218906163753]}, {'': [0.23321849390674984, 0.13505847355464615], 'true': [0.23261580311435356, 0.23406300219345846], 'true,false': [0.24402212790233718, 0.22060229078145732], 'true,false,true': [0.2406851882567707, 0.2243057927944124], 'true,true': [0.23308493006674755, 0.22316566120070688], 'true,true,false': [0.1908930224728566, 0.23463820859658083], 'true,false,false': [0.24054474157360753, 0.1875], 'false': [0.07450693937180439, 0.1380009486893469]}, {'': [0.23276029443840768, 0.13499795606807943], 'true': [0.23251986263898658, 0.23045301098042756], 'true,true': [0.23301975589256083, 0.222334221407737], 'true,false': [0.24231089311192094, 0.21696653431717935], 'true,false,true': [0.23854749449659124, 0.2221735241580596], 'true,true,false': [0.19089302247285528, 0.2341130936935979], 'true,false,false': [0.23683203197480368, 0.18749999999999975], 'false': [0.07450693937180419, 0.13793418344529546]}, {'': [0.23243268089796282, 0.13493571665012877], 'true': [0.23242573905502678, 0.22753490186711997], 'true,true': [0.2330114235432396, 0.22067384807144744], 'true,false': [0.2385461589764968, 0.21600288817076707], 'true,false,true': [0.23821168314167424, 0.22206052123964265], 'true,true,false': [0.2164264636517715, 0.2259215219976219], 'true,false,false': [0.23622666097364103, 0.1874999999999999], 'false': [0.07450693937180407, 0.13793255117676034]}, {'': [0.23222395377458427, 0.13488854740103787], 'true': [0.23234115887815474, 0.2258635302617984], 'true,true': [0.2329874965036385, 0.21941136063429914], 'true,false': [0.23755682740076312, 0.2142505321341854], 'true,false,true': [0.23714167907759157, 0.22035892565377463], 'true,true,false': [0.1908930224728549, 0.23194896617217875], 'true,false,false': [0.23361738941441174, 0.1875000000000001], 'false': [0.14068309016343053, 0.12315847405678416]}, {'': [0.23208541886078887, 0.13483880893871036], 'true': [0.23227966105777778, 0.22443726646786893], 'true,true': [0.23295707289509673, 0.21872599721398617], 'true,false': [0.23518359718005452, 0.21399996873869312], 'true,false,true': [0.2370361986466339, 0.22034043269205814], 'true,true,false': [0.19089302247285472, 0.23179495439836384], 'true,false,false': [0.23336090065951123, 0.18749999999999992], 'false': [0.14061266945086978, 0.1230857544024959]}, {'': [0.2319962739931866, 0.13478328124801386], 'true': [0.23223008419152366, 0.22363041378012424], 'true,true': [0.23294152029744158, 0.21805616507521317], 'true,false': [0.23381195079943423, 0.21387206299631842], 'true,false,true': [0.23698610435178416, 0.22032614941371945], 'true,true,false': [0.19089302247285683, 0.2316968616367914], 'true,false,false': [0.23322257385639833, 0.18750000000000014], 'false': [0.1405781210772686, 0.12312150529894555]}, {'': [0.2319398761558481, 0.13473869760060292], 'true': [0.2407169300648514, 0.23170726564544097], 'true,true': [0.2361628413556109, 0.0], 'true,true,true': [0.2374066351850396, 0.22750000000000012], 'true,false': [0.2319570692124054, 0.22321646290021577], 'true,false,true': [0.23268225626927586, 0.2175910346685072], 'true,false,false': [0.23327690040938, 0.21380414079231], 'false': [0.07436576433303001, 0.137714393028718]}, {'': [0.2317888902220532, 0.13468580770392527], 'true': [0.23204474416358906, 0.223094581352039], 'true,true': [0.23277166332973673, 0.21766110310543296], 'true,false': [0.23462732106385398, 0.21216398201564557], 'true,false,true': [0.23638016901907732, 0.2182910375003668], 'true,true,false': [0.21540610144183414, 0.22592152199762194], 'true,false,false': [0.23031668240730893, 0.18750000000000006], 'false': [0.14043133908318947, 0.12305260606849389]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
8;true,true;haswordauthor(E, F), haswordtitle(G, F).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.2282181392517563;  // std dev = 0.483, 5,780.000 (wgt'ed) examples reached here.  /* #neg=3,641 #pos=2,139 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.17769780727996295;  // std dev = 7.605, 266.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=85 */
%   | | | else return 0.5133213488926157;  // std dev = 2.560, 29.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.43879409638983374;  // std dev = 3.885, 62.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=36 */
%   | | | else return 0.20430278125335852;  // std dev = 2.426, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.4322230091735853;  // std dev = 3.634, 54.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | | else return 0.6081489350995114;  // std dev = 2.739, 40.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=30 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return -0.0607699838194067;  // std dev = 0.273, 37.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=3 */
%   | else return 0.02361656099879113;  // std dev = 0.372, 695.000 (wgt'ed) examples reached here.  /* #neg=580 #pos=115 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1982401019459203;  // std dev = 0.483, 5,780.000 (wgt'ed) examples reached here.  /* #neg=3,641 #pos=2,139 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.15176214164513685;  // std dev = 7.612, 266.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=85 */
%   | | | else return 0.4387568996768591;  // std dev = 2.560, 29.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.386542148360619;  // std dev = 3.867, 62.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=36 */
%   | | | else return 0.1451649326829113;  // std dev = 2.416, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.3752831052578744;  // std dev = 3.609, 54.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | | else return 0.517071962236721;  // std dev = 2.739, 40.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=30 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return -0.05353224823028762;  // std dev = 0.273, 37.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=3 */
%   | else return 0.02071734507652804;  // std dev = 0.372, 695.000 (wgt'ed) examples reached here.  /* #neg=580 #pos=115 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.16817227184004827;  // std dev = 0.483, 5,780.000 (wgt'ed) examples reached here.  /* #neg=3,641 #pos=2,139 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.06222224166802158;  // std dev = 4.562, 109.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=28 */
%   | | | else return 0.20412200974003036;  // std dev = 6.606, 186.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=76 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.3190425214142974;  // std dev = 3.863, 62.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=36 */
%   | | | else return 0.12085389182376663;  // std dev = 2.415, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.30885289439161834;  // std dev = 3.604, 54.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | | else return 0.4125724528826602;  // std dev = 2.739, 40.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=30 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return -0.06625288115536755;  // std dev = 0.273, 37.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=3 */
%   | else return 0.019136426080461653;  // std dev = 0.371, 695.000 (wgt'ed) examples reached here.  /* #neg=580 #pos=115 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.1400366692276669;  // std dev = 0.483, 5,780.000 (wgt'ed) examples reached here.  /* #neg=3,641 #pos=2,139 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.03519848556363634;  // std dev = 4.562, 109.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=28 */
%   | | | else return 0.16931715823737736;  // std dev = 6.599, 186.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=76 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.26599352825438083;  // std dev = 3.846, 62.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=36 */
%   | | | else return 0.06272097989767102;  // std dev = 2.403, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.2472840534224903;  // std dev = 3.576, 54.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | | else return 0.3151786576185067;  // std dev = 2.739, 40.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=30 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.02253666584234;  // std dev = 0.375, 482.000 (wgt'ed) examples reached here.  /* #neg=400 #pos=82 */
%   | else return -0.005543257912637943;  // std dev = 0.351, 250.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.11431455845681501;  // std dev = 0.483, 5,780.000 (wgt'ed) examples reached here.  /* #neg=3,641 #pos=2,139 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.07826105184413269;  // std dev = 7.587, 266.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=85 */
%   | | | else return 0.2716165873289019;  // std dev = 2.560, 29.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.2064655423359757;  // std dev = 3.843, 62.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=36 */
%   | | | else return 0.049841656075472744;  // std dev = 2.403, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.19104059495109732;  // std dev = 3.572, 54.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | | else return 0.23676009386434232;  // std dev = 2.739, 40.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=30 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return -0.06038770484763865;  // std dev = 0.273, 37.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=3 */
%   | else return 0.015122273961326135;  // std dev = 0.371, 695.000 (wgt'ed) examples reached here.  /* #neg=580 #pos=115 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.09207306048399785;  // std dev = 0.483, 5,780.000 (wgt'ed) examples reached here.  /* #neg=3,641 #pos=2,139 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.008333747340515492;  // std dev = 4.562, 109.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=28 */
%   | | | else return 0.11462883629835326;  // std dev = 6.568, 186.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=76 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.1697775644681322;  // std dev = 3.834, 62.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=36 */
%   | | | else return 0.009106962111176193;  // std dev = 2.394, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.14560984068938176;  // std dev = 3.552, 54.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | | else return 0.17806945427207496;  // std dev = 2.739, 40.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=30 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return -0.05391283065812003;  // std dev = 0.273, 37.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=3 */
%   | else return 0.013217962706956422;  // std dev = 0.371, 695.000 (wgt'ed) examples reached here.  /* #neg=580 #pos=115 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.0734043084737476;  // std dev = 0.483, 5,780.000 (wgt'ed) examples reached here.  /* #neg=3,641 #pos=2,139 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.0028388179785704803;  // std dev = 4.562, 109.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=28 */
%   | | | else return 0.0908285883983238;  // std dev = 6.566, 186.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=76 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.12872264946298273;  // std dev = 3.834, 62.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=36 */
%   | | | else return 0.007078192489161551;  // std dev = 2.394, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.11000933819518952;  // std dev = 3.550, 54.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | | else return 0.13513671764223473;  // std dev = 2.739, 40.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=30 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return -0.05475505030012406;  // std dev = 0.273, 37.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=3 */
%   | else return 0.011877798225690113;  // std dev = 0.371, 695.000 (wgt'ed) examples reached here.  /* #neg=580 #pos=115 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.05795972558547745;  // std dev = 0.483, 5,780.000 (wgt'ed) examples reached here.  /* #neg=3,641 #pos=2,139 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.007244085747042565;  // std dev = 4.562, 109.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=28 */
%   | | | else return 0.07126608430163882;  // std dev = 6.565, 186.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=76 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.09713708284532806;  // std dev = 3.833, 62.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=36 */
%   | | | else return 0.005497307069324566;  // std dev = 2.393, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.08285771851735863;  // std dev = 3.549, 54.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | | else return 0.103671751136855;  // std dev = 2.739, 40.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=30 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.018043485359771565;  // std dev = 0.375, 482.000 (wgt'ed) examples reached here.  /* #neg=400 #pos=82 */
%   | else return -0.013247954869548993;  // std dev = 0.351, 250.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.045531640621957775;  // std dev = 0.483, 5,780.000 (wgt'ed) examples reached here.  /* #neg=3,641 #pos=2,139 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.018350296038070462;  // std dev = 7.570, 266.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=85 */
%   | | | else return 0.13671642449279728;  // std dev = 2.560, 29.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.07320711310983298;  // std dev = 3.833, 62.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=36 */
%   | | | else return 0.004267070726540991;  // std dev = 2.393, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.06236923168977966;  // std dev = 3.548, 54.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | | else return 0.08034833303035956;  // std dev = 2.739, 40.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=30 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.01591368331910524;  // std dev = 0.375, 482.000 (wgt'ed) examples reached here.  /* #neg=400 #pos=82 */
%   | else return -0.011905377214793638;  // std dev = 0.351, 250.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6284816906201637;  // std dev = 0.982, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return -0.3358040236655505;  // std dev = 2.58e-08, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( haswordtitle(H, D), haswordtitle(H, C) )
%   | | | then return -0.11139035479688468;  // std dev = 3.635, 76.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=17 */
%   | | | else return 0.1470404693625219;  // std dev = 2.567, 27.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=13 */
%   | else if ( haswordtitle(I, C) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.03459162058411698;  // std dev = 36.252, 5,648.000 (wgt'ed) examples reached here.  /* #neg=3,563 #pos=2,085 */
%   | | | else return 0.023500498571492615;  // std dev = 7.920, 289.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=102 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.037778773056939254;  // std dev = 4.502, 86.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=44 */
%   | | | else return 0.05258653651593991;  // std dev = 4.462, 94.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=61 */
%   else return 0.0055721363570805475;  // std dev = 0.367, 732.000 (wgt'ed) examples reached here.  /* #neg=614 #pos=118 */


Results
   AUC ROC   = 0.670189
   AUC PR    = 0.673883
   CLL	      = -0.7411
   Precision = 0.870968 at threshold = 0.5
   Recall    = 0.049091
   F1        = 0.092943


Total learning time: 15433.7854449749 seconds
Total inference time: 3.494 seconds
AUC ROC: 0.670189


Results scoring model
   AUC ROC   = 0.573584
   AUC PR    = 0.424257
   CLL	      = -0.633484
   Precision = 0.664596 at threshold = 0.5
   Recall    = 0.043373
   F1        = 0.081431


Total scoring time: 66.064 seconds
Refined model CLL: -0.633484


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.670189
   AUC PR    = 0.673883
   CLL	      = -0.7411
   Precision = 0.870968 at threshold = 0.5
   Recall    = 0.049091
   F1        = 0.092943


Total learning time: 31048.7208171463 seconds
Total inference time: 3.494 seconds
AUC ROC: 0.670189
Total revision time: 31048.7208171463
Best scored revision CLL: -0.633484


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 13:15:06
{'AUC ROC': 0.670189, 'AUC PR': 0.673883, 'CLL': -0.7411, 'Precision': [0.870968, 0.5], 'Recall': 0.049091, 'F1': 0.092943, 'Learning time': 31048.7208171463, 'Inference time': 3.494, 'parameter_1.0': {'AUC ROC': 0.625476, 'AUC PR': 0.614815, 'CLL': -0.751458, 'Precision': [0.870968, 0.5], 'Recall': 0.049091, 'F1': 0.092943, 'Learning time': 15484.875372171402, 'Inference time': 3.467}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.2282181392517563;  // std dev = 0.483, 5,780.000 (wgt'ed) examples reached here.  /* #neg=3,641 #pos=2,139 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.17769780727996295;  // std dev = 7.605, 266.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=85 */
%   | | | else return 0.5133213488926157;  // std dev = 2.560, 29.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.43879409638983374;  // std dev = 3.885, 62.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=36 */
%   | | | else return 0.20430278125335852;  // std dev = 2.426, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.4322230091735853;  // std dev = 3.634, 54.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | | else return 0.6081489350995114;  // std dev = 2.739, 40.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=30 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.02827341642731314;  // std dev = 0.376, 482.000 (wgt'ed) examples reached here.  /* #neg=400 #pos=82 */
%   | else return 0.0021489350995115234;  // std dev = 0.351, 250.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1982401019459203;  // std dev = 0.483, 5,780.000 (wgt'ed) examples reached here.  /* #neg=3,641 #pos=2,139 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.15176214164513685;  // std dev = 7.612, 266.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=85 */
%   | | | else return 0.4387568996768591;  // std dev = 2.560, 29.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.386542148360619;  // std dev = 3.867, 62.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=36 */
%   | | | else return 0.1451649326829113;  // std dev = 2.416, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.3752831052578744;  // std dev = 3.609, 54.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | | else return 0.517071962236721;  // std dev = 2.739, 40.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=30 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return -0.06424666171835293;  // std dev = 0.273, 37.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=3 */
%   | else return 0.021296317655273986;  // std dev = 0.372, 695.000 (wgt'ed) examples reached here.  /* #neg=580 #pos=115 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.16817227184004827;  // std dev = 0.483, 5,780.000 (wgt'ed) examples reached here.  /* #neg=3,641 #pos=2,139 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.06222224166802158;  // std dev = 4.562, 109.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=28 */
%   | | | else return 0.20412200974003036;  // std dev = 6.606, 186.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=76 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.3190425214142974;  // std dev = 3.863, 62.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=36 */
%   | | | else return 0.12085389182376663;  // std dev = 2.415, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.30885289439161834;  // std dev = 3.604, 54.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | | else return 0.4125724528826602;  // std dev = 2.739, 40.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=30 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return -0.06647079355006393;  // std dev = 0.273, 37.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=3 */
%   | else return 0.019182373130986502;  // std dev = 0.371, 695.000 (wgt'ed) examples reached here.  /* #neg=580 #pos=115 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.1400366692276669;  // std dev = 0.483, 5,780.000 (wgt'ed) examples reached here.  /* #neg=3,641 #pos=2,139 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.03519848556363634;  // std dev = 4.562, 109.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=28 */
%   | | | else return 0.16931715823737736;  // std dev = 6.599, 186.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=76 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.26599352825438083;  // std dev = 3.846, 62.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=36 */
%   | | | else return 0.06272097989767102;  // std dev = 2.403, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.2472840534224903;  // std dev = 3.576, 54.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | | else return 0.3151786576185067;  // std dev = 2.739, 40.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=30 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return -0.058304477860541264;  // std dev = 0.273, 37.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=3 */
%   | else return 0.016770605208029605;  // std dev = 0.371, 695.000 (wgt'ed) examples reached here.  /* #neg=580 #pos=115 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.11431455845681501;  // std dev = 0.483, 5,780.000 (wgt'ed) examples reached here.  /* #neg=3,641 #pos=2,139 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.07826105184413269;  // std dev = 7.587, 266.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=85 */
%   | | | else return 0.2716165873289019;  // std dev = 2.560, 29.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=19 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.2064655423359757;  // std dev = 3.843, 62.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=36 */
%   | | | else return 0.049841656075472744;  // std dev = 2.403, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.19104059495109732;  // std dev = 3.572, 54.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | | else return 0.23676009386434232;  // std dev = 2.739, 40.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=30 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.02143804610217759;  // std dev = 0.375, 482.000 (wgt'ed) examples reached here.  /* #neg=400 #pos=82 */
%   | else return -0.008262070402527496;  // std dev = 0.351, 250.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.09207306048399785;  // std dev = 0.483, 5,780.000 (wgt'ed) examples reached here.  /* #neg=3,641 #pos=2,139 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.008333747340515492;  // std dev = 4.562, 109.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=28 */
%   | | | else return 0.11462883629835326;  // std dev = 6.568, 186.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=76 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.1697775644681322;  // std dev = 3.834, 62.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=36 */
%   | | | else return 0.009106962111176193;  // std dev = 2.394, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.14560984068938176;  // std dev = 3.552, 54.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | | else return 0.17806945427207496;  // std dev = 2.739, 40.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=30 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return -0.06290633798335275;  // std dev = 0.273, 37.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=3 */
%   | else return 0.0137316156468503;  // std dev = 0.371, 695.000 (wgt'ed) examples reached here.  /* #neg=580 #pos=115 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.0734043084737476;  // std dev = 0.483, 5,780.000 (wgt'ed) examples reached here.  /* #neg=3,641 #pos=2,139 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.0028388179785704803;  // std dev = 4.562, 109.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=28 */
%   | | | else return 0.0908285883983238;  // std dev = 6.566, 186.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=76 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.12872264946298273;  // std dev = 3.834, 62.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=36 */
%   | | | else return 0.007078192489161551;  // std dev = 2.394, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.11000933819518952;  // std dev = 3.550, 54.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | | else return 0.13513671764223473;  // std dev = 2.739, 40.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=30 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.017784661615197737;  // std dev = 0.375, 482.000 (wgt'ed) examples reached here.  /* #neg=400 #pos=82 */
%   | else return -0.009239326494339683;  // std dev = 0.351, 250.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.05795972558547745;  // std dev = 0.483, 5,780.000 (wgt'ed) examples reached here.  /* #neg=3,641 #pos=2,139 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.007244085747042565;  // std dev = 4.562, 109.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=28 */
%   | | | else return 0.07126608430163882;  // std dev = 6.565, 186.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=76 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.09713708284532806;  // std dev = 3.833, 62.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=36 */
%   | | | else return 0.005497307069324566;  // std dev = 2.393, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.08285771851735863;  // std dev = 3.549, 54.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | | else return 0.103671751136855;  // std dev = 2.739, 40.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=30 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.01700394053160739;  // std dev = 0.375, 482.000 (wgt'ed) examples reached here.  /* #neg=400 #pos=82 */
%   | else return -0.010992824650747914;  // std dev = 0.351, 250.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6385599658485127;  // std dev = 0.982, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return -0.3257257484372014;  // std dev = 1.83e-08, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( haswordtitle(H, D), haswordtitle(H, C) )
%   | | | then return -0.10179015270345446;  // std dev = 3.633, 76.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=17 */
%   | | | else return 0.15695205972573464;  // std dev = 2.569, 27.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=13 */
%   | else if ( haswordtitle(I, C) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.044647429459742885;  // std dev = 36.252, 5,648.000 (wgt'ed) examples reached here.  /* #neg=3,563 #pos=2,085 */
%   | | | else return 0.030384789866007858;  // std dev = 7.930, 289.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=102 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.050769635898979114;  // std dev = 4.501, 86.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=44 */
%   | | | else return 0.06898530503537352;  // std dev = 4.467, 94.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=61 */
%   else return 0.006472046840871629;  // std dev = 0.367, 732.000 (wgt'ed) examples reached here.  /* #neg=614 #pos=118 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.035378618875245044;  // std dev = 0.482, 5,780.000 (wgt'ed) examples reached here.  /* #neg=3,641 #pos=2,139 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.01257983969535608;  // std dev = 7.570, 266.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=85 */
%   | | | else return 0.12913541133789178;  // std dev = 2.560, 29.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=19 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.05737441853850253;  // std dev = 3.832, 62.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=36 */
%   | | | else return -0.009250221119490826;  // std dev = 2.396, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.049355830808161624;  // std dev = 3.544, 54.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | | else return 0.06526996883689068;  // std dev = 2.739, 40.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=30 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return -0.06006062252856991;  // std dev = 0.273, 37.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=3 */
%   | else return 0.009120783334139931;  // std dev = 0.371, 695.000 (wgt'ed) examples reached here.  /* #neg=580 #pos=115 */


Results
   AUC ROC   = 0.670036
   AUC PR    = 0.673847
   CLL	      = -0.740728
   Precision = 0.870968 at threshold = 0.5
   Recall    = 0.049091
   F1        = 0.092943


Total learning time: 15486.968894958496 seconds
Total inference time: 3.556 seconds
AUC ROC: 0.670036


Dataset: 3_imdb_cora, Fold: 5, Type: Scratch (RDN-B), Time: 17:33:18
{'AUC ROC': 0.670036, 'AUC PR': 0.673847, 'CLL': -0.740728, 'Precision': [0.870968, 0.5], 'Recall': 0.049091, 'F1': 0.092943, 'Learning time': 15486.968894958496, 'Inference time': 3.556}


Start learning from source dataset

Source train facts examples: 1078
Source train pos examples: 382
Source train neg examples: 14236

WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.8581489350995083;  // std dev = 1.43e-06, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.14185106490048766;  // std dev = 5.96e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.1418510649004891;  // std dev = 0.000, 709.000 (wgt'ed) examples reached here.  /* #neg=709 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109581;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.12544463852839158;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   else return -0.12544463852839235;  // std dev = 0.000, 696.000 (wgt'ed) examples reached here.  /* #neg=696 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.555366436746283;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.11231637819360628;  // std dev = 4.47e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.11231637819360639;  // std dev = 0.000, 678.000 (wgt'ed) examples reached here.  /* #neg=678 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.417513584158312;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.10159632948783624;  // std dev = 3.33e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.10159632948783515;  // std dev = 4.35e-07, 685.000 (wgt'ed) examples reached here.  /* #neg=685 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.32071184716015166;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.09269127618926107;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.09269127618926204;  // std dev = 0.000, 715.000 (wgt'ed) examples reached here.  /* #neg=715 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948734;  // std dev = 4.42e-07, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.08518475138839679;  // std dev = 1.97e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.08518475138839675;  // std dev = 1.37e-07, 697.000 (wgt'ed) examples reached here.  /* #neg=697 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253462;  // std dev = 2.53e-07, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07877675473109177;  // std dev = 1.29e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.07877675473109272;  // std dev = 0.000, 680.000 (wgt'ed) examples reached here.  /* #neg=680 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527667;  // std dev = 2.60e-07, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.07324622576333704;  // std dev = 1.05e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.07324622576333653;  // std dev = 2.41e-07, 710.000 (wgt'ed) examples reached here.  /* #neg=710 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.15274385809367164;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06842697784420268;  // std dev = 1.97e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.06842697784420251;  // std dev = 1.88e-07, 688.000 (wgt'ed) examples reached here.  /* #neg=688 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.13400703000801212;  // std dev = 0.000, 382.000 (wgt'ed) examples reached here.  /* #pos=382 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.06419184008202528;  // std dev = 2.54e-07, 743.000 (wgt'ed) examples reached here.  /* #neg=743 */


Starting fold 1

Target train facts examples: 35095
Target train pos examples: 2649
Target train neg examples: 4334

Target test facts examples: 7463
Target test pos  examples: 368
Target test neg examples: 688

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.6646005480027337;  // std dev = 9.333, 558.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=450 */
%   | | | else return -0.12071285351837409;  // std dev = 3.567, 615.000 (wgt'ed) examples reached here.  /* #neg=602 #pos=13 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.11901850031690367;  // std dev = 2.978, 46.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=12 */
%   | | | else return 0.4831489350995123;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.4295775065280837;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.6081489350995123;  // std dev = 1.732, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | | else return 0.7581489350995123;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.00868656950811451;  // std dev = 0.358, 93.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=14 */
%   | else return 0.09624417319475045;  // std dev = 0.426, 42.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=10 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.5632855847367698;  // std dev = 9.333, 558.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=450 */
%   | | | else return -0.10664388359796334;  // std dev = 3.567, 615.000 (wgt'ed) examples reached here.  /* #neg=602 #pos=13 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.10390401933018603;  // std dev = 2.978, 46.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=12 */
%   | | | else return 0.4136573287083126;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.7676998355010222;  // std dev = 0.041, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.4261848951164457;  // std dev = 2.121, 20.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=13 */
%   | | | else return 0.6280959012503997;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.007625865862415122;  // std dev = 0.358, 93.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=14 */
%   | else return 0.08411986922925846;  // std dev = 0.426, 42.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=10 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.44570240867678185;  // std dev = 9.333, 558.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=450 */
%   | | | else return -0.09522221729004554;  // std dev = 3.567, 615.000 (wgt'ed) examples reached here.  /* #neg=602 #pos=13 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.08965978484201587;  // std dev = 2.978, 46.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=12 */
%   | | | else return 0.3366053739648666;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.6058357624786573;  // std dev = 0.055, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.3437943093085397;  // std dev = 2.119, 20.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=13 */
%   | | | else return 0.49087684280894134;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.0066892428575105285;  // std dev = 0.358, 93.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=14 */
%   | else return 0.07284015588610233;  // std dev = 0.426, 42.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=10 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.11282416094941791;  // std dev = 0.358, 1,162.000 (wgt'ed) examples reached here.  /* #neg=704 #pos=458 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.14516274776139307;  // std dev = 3.469, 57.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=17 */
%   | | | else return 0.26297558544868993;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.506097307650667;  // std dev = 0.173, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.21769875794939575;  // std dev = 1.522, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.3528847749924046;  // std dev = 1.713, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.005863457993502541;  // std dev = 0.358, 93.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=14 */
%   | else if ( haswordvenue(B, N), haswordauthor(P, N) )
%   | | then return 0.07445046414950204;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.06129256941265968;  // std dev = 0.425, 38.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=9 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.0933810643715769;  // std dev = 0.353, 1,162.000 (wgt'ed) examples reached here.  /* #neg=704 #pos=458 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.18275328472729893;  // std dev = 2.207, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
%   | | | else return 0.10856812781913022;  // std dev = 3.003, 42.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.38669929006081444;  // std dev = 0.169, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.19183359652605433;  // std dev = 2.090, 21.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   | | | else return 0.30481325632115497;  // std dev = 0.932, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then return -0.009598785178677982;  // std dev = 0.343, 81.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=11 */
%   | | else return 0.1045987456855193;  // std dev = 0.433, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | else return 0.05330820437205265;  // std dev = 0.426, 42.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=10 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07887191872129759;  // std dev = 0.357, 1,227.000 (wgt'ed) examples reached here.  /* #neg=747 #pos=480 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.3014907971341557;  // std dev = 0.133, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.10765911264221191;  // std dev = 1.517, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.20841123662575595;  // std dev = 1.705, 17.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=13 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.43396248653350983;  // std dev = 2.149, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return -0.14421256694650622;  // std dev = 4.34e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else return -0.052645270903814004;  // std dev = 0.294, 31.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=3 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return 0.0551874248863774;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.044085201421250685;  // std dev = 0.425, 38.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=9 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.2822241063890605;  // std dev = 0.262, 15.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=11 */
%   | | else return 0.09847668786669961;  // std dev = 0.284, 24.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=10 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, B) )
%   | | | then return 0.15464447803150563;  // std dev = 1.320, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.03999718458210012;  // std dev = 0.989, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | else return 0.06258977829980546;  // std dev = 0.358, 1,191.000 (wgt'ed) examples reached here.  /* #neg=720 #pos=471 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), title(N, K) )
%   | | | then return 0.018027731148339384;  // std dev = 2.848, 66.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=11 */
%   | | | else return -0.14240707342910677;  // std dev = 0.066, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return 0.09187714223463128;  // std dev = 0.423, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | else return 0.03801358745761523;  // std dev = 0.426, 42.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=10 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.050375987808618995;  // std dev = 0.344, 1,162.000 (wgt'ed) examples reached here.  /* #neg=704 #pos=458 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.14367106196507223;  // std dev = 2.207, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
%   | | | else return 0.061103740603222774;  // std dev = 2.999, 42.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordvenue(A, I) )
%   | | | then return 0.03194910681890375;  // std dev = 1.218, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.1300719882449063;  // std dev = 1.697, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | | else return 0.18432789425517165;  // std dev = 0.294, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then return -0.06651656307928432;  // std dev = 0.288, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.010669998610285154;  // std dev = 0.346, 87.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=14 */
%   | | else return 0.03098746691984609;  // std dev = 0.425, 38.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=9 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then return 0.09067446222277352;  // std dev = 0.308, 31.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=14 */
%   | | else return 0.20804727342689033;  // std dev = 0.145, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.09925998637531108;  // std dev = 0.277, 34.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=16 */
%   | | else return 0.0410321453492922;  // std dev = 0.354, 1,191.000 (wgt'ed) examples reached here.  /* #neg=720 #pos=471 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( haswordtitle(K, I) )
%   | | then return 0.09994993810295544;  // std dev = 0.398, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | else return -0.13053366118691115;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return -0.0576049398101493;  // std dev = 0.289, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return -0.006235476593792646;  // std dev = 3.186, 75.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=13 */
%   | | | else return 0.0415280466965473;  // std dev = 2.248, 35.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=7 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.1918101312427741;  // std dev = 0.243, 15.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=11 */
%   | | else if ( haswordtitle(G, D), haswordvenue(B, D) )
%   | | | then return 0.4017466108278713;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.005416826549280408;  // std dev = 1.158, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
%   | else return 0.03381545644756095;  // std dev = 0.352, 1,221.000 (wgt'ed) examples reached here.  /* #neg=737 #pos=484 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | then if ( haswordvenue(A, J) )
%   | | | then return 0.08688995902654029;  // std dev = 1.370, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return -0.03174457779533372;  // std dev = 2.488, 69.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=8 */
%   | | else return 0.07867403235871268;  // std dev = 0.422, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return 0.05999191214741906;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.02670021834677845;  // std dev = 0.425, 38.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=9 */


Results
   AUC ROC   = 0.842782
   AUC PR    = 0.659088
   CLL	      = -0.46238
   Precision = 0.705607 at threshold = 0.5
   Recall    = 0.820652
   F1        = 0.758794


Total learning time: 1772.363625049591 seconds
Total inference time: 3.674 seconds
AUC ROC: 0.842782


Results scoring model
   AUC ROC   = 0.918936
   AUC PR    = 0.82235
   CLL	      = -0.407661
   Precision = 0.801336 at threshold = 0.5
   Recall    = 0.907372
   F1        = 0.851064


Total scoring time: 23.562 seconds
Parameter learned model CLL: -0.407661


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,true': 'samebib(E, F), venue(F, A)', 'true,true,false': 'haswordtitle(D, G), haswordauthor(H, G)', 'true,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'true,false,true': 'haswordtitle(J, K), haswordvenue(A, K)', 'false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true,true': [9.333, 108, 450], 'true,true,true,false': [3.567, 602, 13], 'true,true,false,true': [2.978, 34, 12], 'true,true,false,false': [1.369, 3, 5], 'true,false,true,true': [1.309, 3, 4], 'true,false,true,false': [1.732, 4, 12], 'true,false,false': [0.3, 1, 9], 'false,true': [0.358, 79, 14], 'false,false': [0.426, 32, 10]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,true': 'samebib(E, F), venue(F, A)', 'true,true,false': 'haswordtitle(D, G), haswordauthor(H, G)', 'true,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true,true,true': [9.333, 108, 450], 'true,true,true,false': [3.567, 602, 13], 'true,true,false,true': [2.978, 34, 12], 'true,true,false,false': [1.369, 3, 5], 'true,false,true': [0.041, 0, 4], 'true,false,false,true': [2.121, 7, 13], 'true,false,false,false': [0.943, 1, 8], 'false,true': [0.358, 79, 14], 'false,false': [0.426, 32, 10]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,true': 'samebib(E, F), venue(F, A)', 'true,true,false': 'haswordtitle(D, G), haswordauthor(H, G)', 'true,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true,true,true': [9.333, 108, 450], 'true,true,true,false': [3.567, 602, 13], 'true,true,false,true': [2.978, 34, 12], 'true,true,false,false': [1.369, 3, 5], 'true,false,true': [0.055, 0, 4], 'true,false,false,true': [2.119, 7, 13], 'true,false,false,false': [0.943, 1, 8], 'false,true': [0.358, 79, 14], 'false,false': [0.426, 32, 10]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordtitle(M, L)', 'false,false': 'haswordvenue(B, N), haswordauthor(P, N)'}, {'true,true,true': [0.358, 704, 458], 'true,true,false,true': [3.469, 40, 17], 'true,true,false,false': [1.369, 3, 5], 'true,false,true': [0.173, 0, 3], 'true,false,false,true': [1.522, 4, 8], 'true,false,false,false': [1.713, 4, 14], 'false,true': [0.358, 79, 14], 'false,false,true': [0.866, 3, 1], 'false,false,false': [0.425, 29, 9]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,true': 'haswordtitle(L, M), haswordauthor(N, M)'}, {'true,true,true': [0.353, 704, 458], 'true,true,false,true': [2.207, 16, 7], 'true,true,false,false': [3.003, 27, 15], 'true,false,true': [0.169, 0, 3], 'true,false,false,true': [2.09, 7, 14], 'true,false,false,false': [0.932, 1, 8], 'false,true,true': [0.343, 70, 11], 'false,true,false': [0.433, 9, 3], 'false,false': [0.426, 32, 10]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, A)', 'false,true,true': 'samebib(K, L), venue(L, B)', 'false,false': 'haswordvenue(B, M), haswordauthor(N, M)'}, {'true,true': [0.357, 747, 480], 'true,false,true': [0.133, 0, 4], 'true,false,false,true': [1.517, 4, 8], 'true,false,false,false': [1.705, 4, 13], 'false,true,true,true': [2.149, 8, 11], 'false,true,true,false': [4.34e-08, 43, 0], 'false,true,false': [0.294, 28, 3], 'false,false,true': [0.866, 3, 1], 'false,false,false': [0.425, 29, 9]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'true,false,true': 'author(I, H), venue(I, B)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordauthor(M, L)', 'false,true,true': 'author(N, M), title(N, K)'}, {'true,true,true': [0.262, 4, 11], 'true,true,false': [0.284, 14, 10], 'true,false,true,true': [1.32, 7, 8], 'true,false,true,false': [0.989, 10, 5], 'true,false,false': [0.358, 720, 471], 'false,true,true,true': [2.848, 55, 11], 'false,true,true,false': [0.066, 15, 0], 'false,true,false': [0.423, 9, 3], 'false,false': [0.426, 32, 10]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordvenue(A, I)', 'false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true': [0.344, 704, 458], 'true,true,false,true': [2.207, 16, 7], 'true,true,false,false': [2.999, 27, 15], 'true,false,true,true': [1.218, 3, 4], 'true,false,true,false': [1.697, 4, 12], 'true,false,false': [0.294, 1, 9], 'false,true': [0.288, 9, 1], 'false,false,true': [0.346, 73, 14], 'false,false,false': [0.425, 29, 9]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, C)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,true': 'haswordtitle(K, I)', 'false,false': 'haswordvenue(B, L), haswordauthor(M, L)', 'false,false,false': 'haswordvenue(A, N), haswordtitle(P, N)'}, {'true,true,true': [0.308, 17, 14], 'true,true,false': [0.145, 0, 4], 'true,false,true': [0.277, 18, 16], 'true,false,false': [0.354, 720, 471], 'false,true,true': [0.398, 9, 3], 'false,true,false': [0.0, 3, 0], 'false,false,true': [0.289, 9, 1], 'false,false,false,true': [3.186, 62, 13], 'false,false,false,false': [2.248, 28, 7]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,false': 'haswordtitle(G, D), haswordvenue(B, D)', 'false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false,true': 'haswordtitle(I, J), haswordauthor(K, J)', 'false,true,true': 'haswordvenue(A, J)', 'false,false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true': [0.243, 4, 11], 'true,true,false,true': [0.0, 0, 3], 'true,true,false,false': [1.158, 14, 7], 'true,false': [0.352, 737, 484], 'false,true,true,true': [1.37, 9, 3], 'false,true,true,false': [2.488, 61, 8], 'false,true,false': [0.422, 9, 3], 'false,false,true': [0.866, 3, 1], 'false,false,false': [0.425, 29, 9]}]]
[{'': [0.24015810027713547, 0.14617283950617382], 'true': [0.2381621343726891, 0.1836547291092757], 'true,true': [0.2389149440123595, 0.21570644718792817], 'true,true,true': [0.15608740894901332, 0.020691387401679074], 'true,true,false': [0.19281663516067998, 0.23437499999999983], 'true,false': [0.21172022684309977, 0.08999999999999977], 'true,false,true': [0.24489795918367332, 0.18749999999999967], 'false': [0.12787605503526364, 0.1814058956916101]}, {'': [0.1998359175600672, 0.14578384661090268], 'true': [0.19781734649395574, 0.1792776338338549], 'true,true': [0.19703615551365178, 0.2110819818936719], 'true,true,false': [0.19281663516068004, 0.2343749999999998], 'true,true,true': [0.15608740894900736, 0.020691387401678717], 'true,false': [0.0004244017043574244, 0.19452171885076217], 'true,false,false': [0.22495989307598033, 0.09876543209876558], 'false': [0.1278760550352636, 0.18140589569160973]}, {'': [0.1622398285786271, 0.1454676397282614], 'true': [0.16026948710400188, 0.17210383203218374], 'true,false': [0.0007656127575144667, 0.19006070673581515], 'true,false,false': [0.22442980635876122, 0.09876543209876527], 'true,true': [0.15807685798872873, 0.20666939072922955], 'true,true,false': [0.19281663516068104, 0.234375], 'true,true,true': [0.1560874089490184, 0.020691387401678453], 'false': [0.12787605503526395, 0.18140589569161006]}, {'': [0.13507820376017268, 0.14521837017131067], 'false': [0.1278760550352637, 0.18140589569160998], 'false,false': [0.18750000000000006, 0.18074792243767313], 'true': [0.1331332824609482, 0.1675210852524462], 'true,false': [0.009979113008249533, 0.17936911199712907], 'true,false,false': [0.19301024205578446, 0.16296492160977805], 'true,true': [0.12841084964079244, 0.2154782126141068], 'true,true,false': [0.2111177408854217, 0.23437500000000006]}, {'': [0.13113770413860437, 0.14502582339385897], 'false': [0.12787605503526425, 0.18140172682288916], 'true': [0.12969961596201218, 0.16419473435200757], 'true,false': [0.009542968415427474, 0.1773042819477134], 'true,false,false': [0.20807070987407383, 0.0965808676503475], 'true,true': [0.12484281553609836, 0.2148981821756087], 'true,true,false': [0.21172022684310007, 0.2146911208539227], 'false,true': [0.11736015851242193, 0.18750000000000003]}, {'': [0.12832142405151212, 0.14464085926461456], 'false': [0.12752360645844993, 0.18140159843205153], 'false,false': [0.18749999999999997, 0.18074792243767338], 'true': [0.12711906647481744, 0.16245712625495007], 'true,false': [0.00442442422182561, 0.18205316719023512], 'true,false,false': [0.191850368125329, 0.17093708608516298], 'false,true': [0.1455557722472037, 0.08657261249908074], 'false,true,true': [0.24312767900935595, 4.3892538182855024e-17]}, {'': [0.12624074514132747, 0.13586963246201883], 'false': [0.11489756987806267, 0.18139835375093433], 'true': [0.08392367353087347, 0.12724654393464171], 'true,false': [0.09393724987257054, 0.12805593147907512], 'false,true': [0.10406210331662309, 0.1786962037781401], 'false,true,true': [0.12287956318581028, 0.0002924953205081497], 'true,false,true': [0.11609861472208866, 0.06520388407541526], 'true,true': [0.0688284413224343, 0.08037238065590516]}, {'': [0.12447222208350331, 0.1349343693101211], 'false': [0.08320746784832463, 0.13855775092465322], 'false,false': [0.12000436886533974, 0.1807479224376731], 'true': [0.12334299789237985, 0.1612398957031549], 'true,false': [0.19166677993937162, 0.08632625416497365], 'true,false,true': [0.21185396276592505, 0.17990459619121585], 'true,true': [0.11814105499241116, 0.21482673918075865], 'true,true,false': [0.21172022684310007, 0.21411562698840006]}, {'': [0.12330673673883069, 0.1347388916433403], 'false': [0.1350626564845123, 0.13441575016876312], 'false,true': [0.15820378269731797, -2.3129646346357427e-18], 'false,false': [0.08342722436729912, 0.13868180748344613], 'false,false,false': [0.1352992964010466, 0.144374576773677], 'true': [0.0858035489333063, 0.12427339799589263], 'true,false': [0.07686463238848436, 0.12553269368696346], 'true,true': [0.09462332091371962, 0.005248382339140892]}, {'': [0.12236163904610263, 0.13405126629796696], 'false': [0.11226754983993023, 0.1815785600765292], 'false,false': [0.1875, 0.18084969471793733], 'true': [0.07205446941879065, 0.1238000221240762], 'false,true': [0.10138867026579455, 0.1781923795693153], 'false,true,true': [0.15634171339334943, 0.08974655953494999], 'true,true': [0.05894737865763971, 0.07304313489285176], 'true,true,false': [-1.850371707708594e-17, 0.06384320621068411]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,false;haswordvenue(B, I), haswordauthor(J, I).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,false;haswordvenue(B, I), haswordauthor(J, I).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false,true;title(K, J), venue(K, A).;true;true
5;false,true,true;samebib(K, L), venue(L, B).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(B, J), haswordtitle(K, J).;true;true
6;false,true;haswordtitle(K, L), haswordauthor(M, L).;true;true
6;false,true,true;author(N, M), title(N, K).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(A, I), haswordauthor(J, I).;true;true
8;false,true;haswordtitle(K, I).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
9;true,true;author(F, E), venue(F, A).;true;true
9;true,true,false;haswordtitle(G, D), haswordvenue(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.6646005480027337;  // std dev = 9.333, 558.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=450 */
%   | | | else return -0.12071285351837409;  // std dev = 3.567, 615.000 (wgt'ed) examples reached here.  /* #neg=602 #pos=13 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.11901850031690367;  // std dev = 2.978, 46.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=12 */
%   | | | else return 0.4831489350995123;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.4295775065280837;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.6081489350995123;  // std dev = 1.732, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | | else return 0.7581489350995123;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.00868656950811451;  // std dev = 0.358, 93.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=14 */
%   | else return 0.09624417319475045;  // std dev = 0.426, 42.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=10 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.5632855847367698;  // std dev = 9.333, 558.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=450 */
%   | | | else return -0.10664388359796334;  // std dev = 3.567, 615.000 (wgt'ed) examples reached here.  /* #neg=602 #pos=13 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.10390401933018603;  // std dev = 2.978, 46.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=12 */
%   | | | else return 0.4136573287083126;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.7676998355010222;  // std dev = 0.041, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.4261848951164457;  // std dev = 2.121, 20.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=13 */
%   | | | else return 0.6280959012503997;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.007625865862415122;  // std dev = 0.358, 93.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=14 */
%   | else return 0.08411986922925846;  // std dev = 0.426, 42.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=10 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.44570240867678185;  // std dev = 9.333, 558.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=450 */
%   | | | else return -0.09522221729004554;  // std dev = 3.567, 615.000 (wgt'ed) examples reached here.  /* #neg=602 #pos=13 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.08965978484201587;  // std dev = 2.978, 46.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=12 */
%   | | | else return 0.3366053739648666;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.6058357624786573;  // std dev = 0.055, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.3437943093085397;  // std dev = 2.119, 20.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=13 */
%   | | | else return 0.49087684280894134;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.0066892428575105285;  // std dev = 0.358, 93.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=14 */
%   | else return 0.07284015588610233;  // std dev = 0.426, 42.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=10 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.11282416094941791;  // std dev = 0.358, 1,162.000 (wgt'ed) examples reached here.  /* #neg=704 #pos=458 */
%   | | else return 0.1596627893229065;  // std dev = 0.464, 65.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=22 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.30929427505706697;  // std dev = 1.198, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.14575771722414999;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.3352776222722231;  // std dev = 1.700, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | | | else return 0.480729130795065;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then return 0.005863457993502541;  // std dev = 0.358, 93.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=14 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return 0.07445046414950204;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.06129256941265968;  // std dev = 0.425, 38.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=9 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.0933810643715769;  // std dev = 0.353, 1,162.000 (wgt'ed) examples reached here.  /* #neg=704 #pos=458 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.1235693961331211;  // std dev = 3.472, 57.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=17 */
%   | | | else return 0.22535046030531003;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.4434469535594296;  // std dev = 0.207, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.1524852020457962;  // std dev = 1.503, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.2649215613262323;  // std dev = 1.706, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.0051363800941217575;  // std dev = 0.358, 93.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=14 */
%   | else if ( haswordvenue(B, N), haswordauthor(P, N) )
%   | | then return 0.06341360407517074;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.05224447808751388;  // std dev = 0.425, 38.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=9 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.07687847138941664;  // std dev = 0.349, 1,162.000 (wgt'ed) examples reached here.  /* #neg=704 #pos=458 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.16721925870941362;  // std dev = 2.207, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
%   | | | else return 0.08374489593770382;  // std dev = 3.001, 42.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.3440917711100306;  // std dev = 0.195, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.13673357191135022;  // std dev = 2.076, 21.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   | | | else return 0.23624287428275748;  // std dev = 0.925, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then return -0.010238193563301901;  // std dev = 0.343, 81.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=11 */
%   | | else return 0.10395933730089564;  // std dev = 0.433, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | else return 0.045140829720894296;  // std dev = 0.426, 42.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=10 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06474923361041394;  // std dev = 0.354, 1,227.000 (wgt'ed) examples reached here.  /* #neg=747 #pos=480 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.14404710448585573;  // std dev = 1.192, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.010341073392638359;  // std dev = 0.942, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.16723474142862463;  // std dev = 0.391, 19.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then return -0.06831101905895433;  // std dev = 0.289, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( haswordauthor(L, J) )
%   | | | then return 0.10523154947166517;  // std dev = 1.500, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return -8.940212336872473E-4;  // std dev = 3.238, 75.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=13 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then return -0.14476845052833484;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.05366183693030175;  // std dev = 2.372, 35.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=7 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.3386278221316486;  // std dev = 0.291, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.14227390450469482;  // std dev = 1.309, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
%   | | | else return 0.030616198658076233;  // std dev = 0.978, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | else return 0.052495988861779676;  // std dev = 0.354, 1,225.000 (wgt'ed) examples reached here.  /* #neg=738 #pos=487 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.08535713832726964;  // std dev = 0.835, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return -0.15526668504144367;  // std dev = 0.065, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return 0.032991388125414904;  // std dev = 2.986, 60.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=11 */
%   | | | else return -0.04029978838843014;  // std dev = 1.624, 27.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=3 */
%   | | else return 0.03704346720932804;  // std dev = 0.425, 38.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=9 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.40439119326096057;  // std dev = 0.289, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.15158157187471438;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordtitle(H, D), haswordvenue(B, D) )
%   | | | then return 0.3635360541450841;  // std dev = 7.45e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.027644216253846738;  // std dev = 1.192, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
%   | else return 0.0412236222571173;  // std dev = 0.353, 1,221.000 (wgt'ed) examples reached here.  /* #neg=737 #pos=484 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordvenue(A, K) )
%   | | | then return 0.08807623340032193;  // std dev = 1.498, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return -0.031822865540418487;  // std dev = 2.643, 69.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=8 */
%   | | else return 0.09514026910415767;  // std dev = 0.432, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | else return 0.03399478486255031;  // std dev = 0.425, 42.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=10 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then return 0.19492223491298344;  // std dev = 0.207, 15.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=11 */
%   | else if ( haswordvenue(B, C), haswordtitle(F, C) )
%   | | then return 0.28422791852205753;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordtitle(G, C) )
%   | | | then return 0.0394331304258121;  // std dev = 1.854, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
%   | | | else return -0.01878838397995204;  // std dev = 0.543, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.03352769648779711;  // std dev = 0.352, 1,221.000 (wgt'ed) examples reached here.  /* #neg=737 #pos=484 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return -0.048817616429755815;  // std dev = 1.865, 41.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=4 */
%   | | | else return 0.03448753953905144;  // std dev = 2.744, 41.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=10 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return -0.13393935515557837;  // std dev = 0.022, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.04660978642952842;  // std dev = 2.376, 35.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=7 */


Results
   AUC ROC   = 0.828642
   AUC PR    = 0.653016
   CLL	      = -0.46444
   Precision = 0.705607 at threshold = 0.5
   Recall    = 0.820652
   F1        = 0.758794


Total learning time: 1659.707172870636 seconds
Total inference time: 3.561 seconds
AUC ROC: 0.828642


Results scoring model
   AUC ROC   = 0.905345
   AUC PR    = 0.811004
   CLL	      = -0.409971
   Precision = 0.803691 at threshold = 0.5
   Recall    = 0.905482
   F1        = 0.851556


Total scoring time: 22.672 seconds
Refined model CLL: -0.409971


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.842782
   AUC PR    = 0.659088
   CLL	      = -0.46238
   Precision = 0.705607 at threshold = 0.5
   Recall    = 0.820652
   F1        = 0.758794


Total learning time: 3478.304797920227 seconds
Total inference time: 3.674 seconds
AUC ROC: 0.842782
Total revision time: 3478.304797920227
Best scored revision CLL: -0.407661


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 18:31:38
{'AUC ROC': 0.842782, 'AUC PR': 0.659088, 'CLL': -0.46238, 'Precision': [0.705607, 0.5], 'Recall': 0.820652, 'F1': 0.758794, 'Learning time': 3478.304797920227, 'Inference time': 3.674, 'parameter_0.2': {'AUC ROC': 0.842782, 'AUC PR': 0.659088, 'CLL': -0.46238, 'Precision': [0.705607, 0.5], 'Recall': 0.820652, 'F1': 0.758794, 'Learning time': 1772.363625049591, 'Inference time': 3.674}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.6646005480027337;  // std dev = 9.333, 558.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=450 */
%   | | | else return -0.12071285351837409;  // std dev = 3.567, 615.000 (wgt'ed) examples reached here.  /* #neg=602 #pos=13 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.11901850031690367;  // std dev = 2.978, 46.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=12 */
%   | | | else return 0.4831489350995123;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return 0.4295775065280837;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.6081489350995123;  // std dev = 1.732, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | | else return 0.7581489350995123;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.00868656950811451;  // std dev = 0.358, 93.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=14 */
%   | else return 0.09624417319475045;  // std dev = 0.426, 42.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=10 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.5632855847367698;  // std dev = 9.333, 558.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=450 */
%   | | | else return -0.10664388359796334;  // std dev = 3.567, 615.000 (wgt'ed) examples reached here.  /* #neg=602 #pos=13 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.10390401933018603;  // std dev = 2.978, 46.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=12 */
%   | | | else return 0.4136573287083126;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.7676998355010222;  // std dev = 0.041, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.4261848951164457;  // std dev = 2.121, 20.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=13 */
%   | | | else return 0.6280959012503997;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.007625865862415122;  // std dev = 0.358, 93.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=14 */
%   | else return 0.08411986922925846;  // std dev = 0.426, 42.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=10 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.44570240867678185;  // std dev = 9.333, 558.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=450 */
%   | | | else return -0.09522221729004554;  // std dev = 3.567, 615.000 (wgt'ed) examples reached here.  /* #neg=602 #pos=13 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.08965978484201587;  // std dev = 2.978, 46.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=12 */
%   | | | else return 0.3366053739648666;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.3705501413831643;  // std dev = 2.003, 19.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
%   | | | else return 0.42266620232538177;  // std dev = 0.816, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.4986003325784248;  // std dev = 0.299, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.0066892428575105285;  // std dev = 0.358, 93.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=14 */
%   | else return 0.07284015588610233;  // std dev = 0.426, 42.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=10 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.3380124605859253;  // std dev = 9.333, 558.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=450 */
%   | | | else return -0.09521403639688443;  // std dev = 2.771, 604.000 (wgt'ed) examples reached here.  /* #neg=596 #pos=8 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.14516274776139307;  // std dev = 3.469, 57.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=17 */
%   | | | else return 0.26297558544868993;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.5006958308043614;  // std dev = 0.073, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.22385776800895482;  // std dev = 1.558, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.3412703322606571;  // std dev = 1.711, 17.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=13 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.005863457993502541;  // std dev = 0.358, 93.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=14 */
%   | else return 0.06254570224473985;  // std dev = 0.426, 42.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=10 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08002960376304202;  // std dev = 0.341, 1,227.000 (wgt'ed) examples reached here.  /* #neg=747 #pos=480 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.43429635267957495;  // std dev = 0.192, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.18543601593798634;  // std dev = 2.092, 21.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   | | | else return 0.3028612329052371;  // std dev = 0.934, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return 0.05025091959856307;  // std dev = 2.691, 46.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=9 */
%   | | | else return -0.08825839717162354;  // std dev = 1.373, 35.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=2 */
%   | | else return 0.1045987456855193;  // std dev = 0.433, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | else if ( haswordvenue(B, N), haswordauthor(P, N) )
%   | | then return 0.06521367503081787;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.05205578029397577;  // std dev = 0.425, 38.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=9 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06676494708641492;  // std dev = 0.338, 1,227.000 (wgt'ed) examples reached here.  /* #neg=747 #pos=480 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.3368514312925044;  // std dev = 0.178, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.09711892191690867;  // std dev = 1.511, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.2139766804966103;  // std dev = 1.710, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.42770867697278486;  // std dev = 2.154, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return -0.14504291313090242;  // std dev = 0.054, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else return -0.04819930575590185;  // std dev = 0.294, 31.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=3 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return 0.05518731371074989;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.044085091137913486;  // std dev = 0.425, 38.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=9 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.052455111395105725;  // std dev = 0.327, 1,162.000 (wgt'ed) examples reached here.  /* #neg=704 #pos=458 */
%   | | else return 0.11134722640512797;  // std dev = 0.464, 65.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=22 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.2635429150983137;  // std dev = 0.129, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.08783135752328106;  // std dev = 2.080, 20.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=13 */
%   | | | else return 0.20225020252523235;  // std dev = 0.928, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then return -0.012226581479444928;  // std dev = 0.321, 81.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=11 */
%   | | else return 0.0914420126218937;  // std dev = 0.423, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | else if ( haswordvenue(B, N), haswordauthor(P, N) )
%   | | then return 0.046384566926605225;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.037132325872904756;  // std dev = 0.425, 38.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=9 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( author(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.37580841641223245;  // std dev = 0.072, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.11726969783709594;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( haswordtitle(G, C) )
%   | | then if ( haswordvenue(B, C) )
%   | | | then return 0.3987081653739099;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.05981126389627116;  // std dev = 1.689, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
%   | | else return -0.006925241734099766;  // std dev = 0.198, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then return 0.044652590839502584;  // std dev = 0.338, 1,221.000 (wgt'ed) examples reached here.  /* #neg=737 #pos=484 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(A, K) )
%   | | | then return -0.04828742005470046;  // std dev = 1.813, 41.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=4 */
%   | | | else return 0.03474503218527169;  // std dev = 2.255, 37.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=7 */
%   | | else return 0.03185789095156971;  // std dev = 0.426, 42.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=10 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03780420316475759;  // std dev = 0.332, 1,227.000 (wgt'ed) examples reached here.  /* #neg=747 #pos=480 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.10003775289130216;  // std dev = 1.184, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return -0.046853226577022816;  // std dev = 0.943, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.1302262073361055;  // std dev = 0.392, 19.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then return -0.07384411739265466;  // std dev = 0.289, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.08982011968564337;  // std dev = 1.373, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return -0.13180661415429887;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return -0.002357907224868915;  // std dev = 3.190, 75.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=13 */
%   | | | else return 0.040321117382306045;  // std dev = 2.238, 35.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=7 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C), haswordvenue(A, D) )
%   | | then return 0.2999863139747654;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.11392711961895266;  // std dev = 1.205, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   | | | else return 0.02799053832633479;  // std dev = 0.837, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | else return 0.030935135512259106;  // std dev = 0.335, 1,225.000 (wgt'ed) examples reached here.  /* #neg=738 #pos=487 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), title(L, I) )
%   | | | then return 0.01172096615844456;  // std dev = 2.812, 66.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=11 */
%   | | | else return -0.13111840827519025;  // std dev = 0.085, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return 0.08593975347896399;  // std dev = 0.423, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | else return 0.02794613531827477;  // std dev = 0.426, 42.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=10 */


Results
   AUC ROC   = 0.843361
   AUC PR    = 0.65983
   CLL	      = -0.447144
   Precision = 0.705607 at threshold = 0.5
   Recall    = 0.820652
   F1        = 0.758794


Total learning time: 2166.3297967910767 seconds
Total inference time: 3.808 seconds
AUC ROC: 0.843361


Dataset: 3_imdb_cora, Fold: 1, Type: Scratch (RDN-B), Time: 19:07:49
{'AUC ROC': 0.843361, 'AUC PR': 0.65983, 'CLL': -0.447144, 'Precision': [0.705607, 0.5], 'Recall': 0.820652, 'F1': 0.758794, 'Learning time': 2166.3297967910767, 'Inference time': 3.808}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2587091591891431;  // std dev = 0.490, 2,499.000 (wgt'ed) examples reached here.  /* #neg=1,498 #pos=1,001 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4855999154916681;  // std dev = 3.453, 51.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=32 */
%   | | | else return -0.13073995378937656;  // std dev = 0.994, 90.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=1 */
%   | | else if ( haswordauthor(H, D) )
%   | | | then return 0.12130682983635446;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | | else return -0.03768439823382107;  // std dev = 2.116, 48.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=5 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.058148935099512376;  // std dev = 3.464, 75.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=15 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.6014300749199988;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | else return 0.2228490842907942;  // std dev = 0.490, 2,490.000 (wgt'ed) examples reached here.  /* #neg=1,496 #pos=994 */
%   else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | then if ( title(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.4156994981461517;  // std dev = 3.453, 51.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=32 */
%   | | | else return -0.11555758993932902;  // std dev = 0.994, 90.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=1 */
%   | | else if ( haswordauthor(I, E) )
%   | | | then return 0.1058893024861437;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | | else return -0.033158718281444635;  // std dev = 2.116, 48.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=5 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.0509220325135538;  // std dev = 3.464, 75.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=15 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18923099915150648;  // std dev = 0.490, 2,499.000 (wgt'ed) examples reached here.  /* #neg=1,498 #pos=1,001 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return 0.08324566393952552;  // std dev = 3.817, 84.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=20 */
%   | | | else return -0.04978929472856139;  // std dev = 2.691, 81.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=8 */
%   | | else return 0.15599922470055783;  // std dev = 0.392, 33.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return -0.1365387752451544;  // std dev = 0.064, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.038980444782791446;  // std dev = 3.406, 87.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=19 */
%   | | | else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.4570936844857727;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | else return 0.15489000490320393;  // std dev = 0.490, 2,490.000 (wgt'ed) examples reached here.  /* #neg=1,496 #pos=994 */
%   else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(H, E) )
%   | | | then return 0.04235856353195006;  // std dev = 1.536, 20.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=4 */
%   | | | else return 0.011535340982452444;  // std dev = 4.467, 145.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=24 */
%   | | else return 0.13321850801757185;  // std dev = 0.385, 33.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.026155919502182517;  // std dev = 3.287, 85.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=18 */
%   | | | else return 0.055890485750344096;  // std dev = 0.901, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return -0.10072046959475248;  // std dev = 0.002, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1259886549141741;  // std dev = 0.490, 2,499.000 (wgt'ed) examples reached here.  /* #neg=1,498 #pos=1,001 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.07705225189658158;  // std dev = 0.428, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | else return -0.01597560134193636;  // std dev = 0.322, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return -0.0037781412582636046;  // std dev = 1.309, 19.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
%   | | | else return -0.0417348141783075;  // std dev = 0.808, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.02535867853542739;  // std dev = 4.550, 165.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=34 */
%   | | | else return 0.03272329669523959;  // std dev = 3.359, 73.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=14 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10020679992567239;  // std dev = 0.490, 2,499.000 (wgt'ed) examples reached here.  /* #neg=1,498 #pos=1,001 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, A) )
%   | | | then return 0.06264004644599531;  // std dev = 4.022, 94.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=22 */
%   | | | else return -0.06122017811941684;  // std dev = 2.340, 71.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=6 */
%   | | else return 0.10798679429450686;  // std dev = 0.378, 33.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.02261002645840836;  // std dev = 3.269, 83.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=18 */
%   | | | else return -0.0014739510542221854;  // std dev = 0.923, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else return -0.09310826840272109;  // std dev = 0.007, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then if ( haswordauthor(G, C) )
%   | | | then return 0.231114512073017;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.04973781570833348;  // std dev = 3.804, 62.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=23 */
%   | | else return 0.5977994357800763;  // std dev = 0.162, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.30839970340247924;  // std dev = 2.509, 27.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=17 */
%   | | | else return -0.09046069545791931;  // std dev = 2.631, 39.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=9 */
%   | | else return 0.07834634495929339;  // std dev = 0.490, 2,360.000 (wgt'ed) examples reached here.  /* #neg=1,417 #pos=943 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.057775949833830234;  // std dev = 0.426, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | else return -0.01805104891430323;  // std dev = 0.321, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.016337806935792162;  // std dev = 0.358, 265.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=52 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5878341906087948;  // std dev = 0.266, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.3863848551591309;  // std dev = 0.057, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( haswordtitle(H, C), haswordtitle(H, D) )
%   | | | then return -0.10273049381724854;  // std dev = 2.434, 38.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=9 */
%   | | | else return 0.2821976460513454;  // std dev = 1.313, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else return 0.06101663307749308;  // std dev = 0.490, 2,423.000 (wgt'ed) examples reached here.  /* #neg=1,455 #pos=968 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( haswordtitle(K, I) )
%   | | then return 0.0486759222887968;  // std dev = 0.426, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | else return -0.015883579324433943;  // std dev = 0.321, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return -0.017422734137845373;  // std dev = 0.292, 27.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=4 */
%   | | else return 0.01757734792543093;  // std dev = 0.364, 238.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=48 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04731820161811016;  // std dev = 0.487, 2,499.000 (wgt'ed) examples reached here.  /* #neg=1,498 #pos=1,001 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return 0.05499640749001269;  // std dev = 3.792, 84.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=20 */
%   | | | else return -0.05219110548035042;  // std dev = 2.685, 81.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=8 */
%   | | else return 0.0836536234519805;  // std dev = 0.371, 33.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return -0.12677675970518743;  // std dev = 0.111, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0186606470888795;  // std dev = 3.372, 87.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=19 */
%   | | | else return -0.09056115656839941;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.42613310168487073;  // std dev = 0.404, 1,196.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=947 */
%   | | else return -0.3308400478454677;  // std dev = 0.132, 1,293.000 (wgt'ed) examples reached here.  /* #neg=1,274 #pos=19 */
%   | else if ( title(G, D), venue(G, B) )
%   | | then if ( haswordvenue(B, C) )
%   | | | then return -0.09048611184685734;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | | else return 0.020616810018317257;  // std dev = 0.955, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.09266896836704593;  // std dev = 4.107, 68.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=31 */
%   | | | else return 0.009731332666978534;  // std dev = 3.276, 73.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=15 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then return 0.2687112947502012;  // std dev = 0.467, 23.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   | | else return 0.43678661542586983;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.009138650298627544;  // std dev = 0.378, 85.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=15 */


Results
   AUC ROC   = 0.836127
   AUC PR    = 0.663099
   CLL	      = -0.535655
   Precision = 0.75 at threshold = 0.5
   Recall    = 0.008152
   F1        = 0.016129


Total learning time: 2127.996328830719 seconds
Total inference time: 2.539 seconds
AUC ROC: 0.836127


Results scoring model
   AUC ROC   = 0.899075
   AUC PR    = 0.804736
   CLL	      = -0.529042
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.034939
   F1        = 0.067518


Total scoring time: 25.352 seconds
Parameter learned model CLL: -0.529042


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, B)', 'false,true,true': 'samebib(F, G), venue(G, A)', 'false,true,false': 'haswordauthor(H, D)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false,false': 'haswordvenue(B, K), haswordtitle(L, K)'}, {'true': [0.49, 1, 1], 'false,true,true,true': [3.453, 19, 32], 'false,true,true,false': [0.994, 89, 1], 'false,true,false,true': [1.919, 14, 5], 'false,true,false,false': [2.116, 43, 5], 'false,false,true': [0.0, 5, 0], 'false,false,false,true': [3.464, 60, 15], 'false,false,false,false': [0.0, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordauthor(D, C)', 'false': 'haswordvenue(A, E), haswordtitle(F, E)', 'false,true': 'title(G, F), venue(G, B)', 'false,true,true': 'samebib(G, H), venue(H, A)', 'false,true,false': 'haswordauthor(I, E)', 'false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true': [0.416, 2, 7], 'true,false': [0.49, 1, 994], 'false,true,true,true': [3.453, 19, 32], 'false,true,true,false': [0.994, 89, 1], 'false,true,false,true': [1.919, 14, 5], 'false,true,false,false': [2.116, 43, 5], 'false,false,true': [0.0, 5, 0], 'false,false,false,true': [3.464, 60, 15], 'false,false,false,false': [0.0, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'haswordtitle(E, F), haswordauthor(G, F)', 'false,true,true': 'author(H, G), venue(H, B)', 'false,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false,false': 'haswordvenue(A, K), haswordtitle(L, K)'}, {'true': [0.49, 1, 1], 'false,true,true,true': [3.817, 64, 20], 'false,true,true,false': [2.691, 73, 8], 'false,true,false': [0.392, 22, 11], 'false,false,true': [0.064, 5, 0], 'false,false,false,true': [3.406, 68, 19], 'false,false,false,false': [2.63e-09, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordauthor(D, C)', 'false': 'haswordvenue(B, E), haswordtitle(F, E)', 'false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'false,true,true': 'haswordauthor(H, E)', 'false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, B)'}, {'true,true': [0.416, 2, 7], 'true,false': [0.49, 1, 994], 'false,true,true,true': [1.536, 16, 4], 'false,true,true,false': [4.467, 121, 24], 'false,true,false': [0.385, 22, 11], 'false,false,true,true': [3.287, 67, 18], 'false,false,true,false': [0.901, 4, 1], 'false,false,false': [0.002, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'haswordtitle(F, D)', 'false,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false,false,true': 'haswordtitle(I, G)', 'false,false,false': 'haswordvenue(A, J), haswordtitle(K, J)'}, {'true': [0.49, 1, 1], 'false,true,true': [0.428, 15, 5], 'false,true,false': [0.322, 7, 1], 'false,false,true,true': [1.309, 16, 3], 'false,false,true,false': [0.808, 7, 1], 'false,false,false,true': [4.55, 131, 34], 'false,false,false,false': [3.359, 59, 14]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'haswordtitle(E, F), haswordauthor(G, F)', 'false,true,true': 'author(H, G), venue(H, A)', 'false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false,true': 'title(K, J), venue(K, A)'}, {'true': [0.49, 1, 1], 'false,true,true,true': [4.022, 72, 22], 'false,true,true,false': [2.34, 65, 6], 'false,true,false': [0.378, 22, 11], 'false,false,true,true': [3.269, 65, 18], 'false,false,true,false': [0.923, 6, 1], 'false,false,false': [0.007, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, C)', 'true,true,true': 'haswordauthor(G, C)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'true,false,true': 'author(J, I), venue(J, A)', 'false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,true': 'haswordtitle(M, K)'}, {'true,true,true,true': [1.195, 2, 5], 'true,true,true,false': [3.804, 39, 23], 'true,true,false': [0.162, 0, 4], 'true,false,true,true': [2.509, 10, 17], 'true,false,true,false': [2.631, 30, 9], 'true,false,false': [0.49, 1, 943], 'false,true,true': [0.426, 15, 5], 'false,true,false': [0.321, 7, 1], 'false,false': [0.358, 213, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'samebib(F, G), venue(G, B)', 'true,true,false': 'haswordtitle(H, C), haswordtitle(H, D)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,true': 'haswordtitle(K, I)', 'false,false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true,true': [0.266, 0, 19], 'true,true,true,false': [0.057, 11, 0], 'true,true,false,true': [2.434, 29, 9], 'true,true,false,false': [1.313, 3, 5], 'true,false': [0.49, 1, 968], 'false,true,true': [0.426, 15, 5], 'false,true,false': [0.321, 7, 1], 'false,false,true': [0.292, 23, 4], 'false,false,false': [0.364, 190, 48]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'haswordtitle(E, F), haswordauthor(G, F)', 'false,true,true': 'author(H, G), venue(H, B)', 'false,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false,false': 'haswordvenue(A, K), haswordtitle(L, K)'}, {'true': [0.487, 1, 1], 'false,true,true,true': [3.792, 64, 20], 'false,true,true,false': [2.685, 73, 8], 'false,true,false': [0.371, 22, 11], 'false,false,true': [0.111, 5, 0], 'false,false,false,true': [3.372, 68, 19], 'false,false,false,false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordtitle(D, C)', 'true': 'title(E, D), venue(E, A)', 'true,true': 'samebib(E, F), venue(F, B)', 'true,false': 'title(G, D), venue(G, B)', 'true,false,true': 'haswordvenue(B, C)', 'true,false,false': 'haswordvenue(B, C)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)', 'false,true': 'haswordvenue(B, I), haswordtitle(J, I)'}, {'true,true,true': [0.404, 249, 947], 'true,true,false': [0.132, 1, 19], 'true,false,true,true': [2.954, 32, 12], 'true,false,true,false': [0.955, 4, 1], 'true,false,false,true': [4.107, 37, 31], 'true,false,false,false': [3.276, 58, 15], 'false,true,true': [0.467, 8, 15], 'false,true,false': [0.894, 1, 4], 'false,false': [0.378, 70, 15]}]]
[{'': [0.2401117309669214, 0.1587671376486631], 'false': [0.16399315828402478, 0.14532871972318284], 'false,true': [0.17926663648709942, 0.12697705502339038], 'false,true,true': [0.2337562475970797, 0.01098765432098767], 'false,false': [-2.7755575615628915e-18, 0.15234374999999947], 'false,false,false': [0.15999999999999945, -2.7755575615628915e-18], 'false,true,false': [0.19390581717451505, 0.09331597222222232]}, {'': [0.2401117309668839, 0.14695502743536087], 'true': [0.1728395061728395, 0.23983871227882142], 'false': [0.14783299598193214, 0.14440538435859063], 'false,true': [0.156723957528112, 0.1257694811820499], 'false,true,true': [0.2337562475970768, 0.010987654320987753], 'false,false': [0.0, 0.1518225704680329], 'false,false,false': [0.1600000000000007, 0.0], 'false,true,false': [0.19390581717451527, 0.09331597222222204]}, {'': [0.2399394512398152, 0.13639611775923496], 'false': [0.14212699979016782, 0.1242791224603501], 'false,true': [0.13659706319606219, 0.15389250437796034], 'false,true,true': [0.17341091702433106, 0.08940968954773565], 'false,false': [0.000830298214918479, 0.12960780815549117], 'false,false,false': [0.1333140186313819, 2.3129646346357427e-18]}, {'': [0.23992514306699358, 0.1341882010091586], 'true': [0.17283950617283958, 0.23983871227880585], 'false': [0.1394161895210588, 0.12316166756968144], 'false,true': [0.13533318394538998, 0.14823830135359792], 'false,true,true': [0.11802638636536351, 0.13760516831211567], 'false,false': [0.12913446975298368, 1.1506958284709935e-06], 'false,false,true': [0.1271230910572592, 0.1624928822853324]}, {'': [0.23977983289185031, 0.1329913185635134], 'false': [0.16204364710568328, 0.12985093733181757], 'false,true': [0.18288156837820121, 0.10376728572569757], 'false,false': [0.08793016174470933, 0.13442138953434932], 'false,false,false': [0.12549429597900436, 0.15456146505056223], 'false,false,true': [0.09020424085001867, 0.08151539159685806]}, {'': [0.23977134221973936, 0.13264676047711244], 'false': [0.1376344683274726, 0.12216898848788192], 'false,true': [0.1350033827447479, 0.14268100139408932], 'false,true,true': [0.17212054696631196, 0.07712242483800794], 'false,false': [0.12827351285706623, 8.986242610112272e-06], 'false,false,true': [0.1287743970610476, 0.12179953338729743]}, {'': [0.23976583545155405, 0.13120268160596676], 'true': [0.23548128684299405, 0.23988425065365962], 'true,false': [0.2387511478420571, 0.23991507469119716], 'true,false,true': [0.23319615912208538, 0.1775147928994083], 'true,true': [0.23338020157885836, 0.00655624421695683], 'true,true,true': [0.2040816326530612, 0.23335067637877224], 'false': [0.16050296941312125, 0.12806943859134676], 'false,true': [0.1818185868823509, 0.10310697306922584]}, {'': [0.23913729924765745, 0.13096780416995935], 'true': [0.21844131030200908, 0.23978432693834792], 'true,true': [0.2228731940270023, 0.18753541386285982], 'true,true,true': [0.0037305337153024204, 0.000293926778646854], 'true,true,false': [0.1559011058712282, 0.21539734271914407], 'false': [0.16006223451818682, 0.12786853707616028], 'false,true': [0.18162953790888905, 0.10316688372103885], 'false,false': [0.08553243819431519, 0.13254655991722325]}, {'': [0.23765316273874282, 0.1307688885540088], 'false': [0.13535873767899276, 0.12115537705949689], 'false,true': [0.13373177293530242, 0.13798866469957347], 'false,true,true': [0.17120676700423154, 0.08901978771890451], 'false,false': [0.0024580919379810218, 0.12669144444259153], 'false,false,false': [0.13066246819414024, -1.1564823173178713e-18]}, {'': [0.2283969945712708, 0.1758458125593556], 'true': [0.23048979242042686, 0.20073134023832567], 'true,true': [0.1631272433590348, 0.017460163429742232], 'true,false': [0.19783549568326217, 0.19745413810434134], 'true,false,true': [0.19834710743801684, 0.1822490304686238], 'true,false,false': [0.24805363321799323, 0.14700299803086297], 'false': [0.2118273902310192, 0.14321356222757198], 'false,true': [0.21804969394067178, 0.16]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(A, D), haswordtitle(E, D).;true;true
0;false,false;haswordvenue(B, I), haswordauthor(J, I).;true;true
0;false,false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(A, E), haswordtitle(F, E).;true;true
1;false,false;haswordvenue(B, J), haswordauthor(K, J).;true;true
1;false,false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
2;false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true
2;false,false,false;haswordvenue(A, K), haswordtitle(L, K).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, E), haswordtitle(F, E).;true;true
3;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
5;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
7;true,true;author(F, E), venue(F, A).;true;true
7;true,true,true;samebib(F, G), venue(G, B).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
8;false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true
8;false,false,false;haswordvenue(A, K), haswordtitle(L, K).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2587091591891431;  // std dev = 0.490, 2,499.000 (wgt'ed) examples reached here.  /* #neg=1,498 #pos=1,001 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4855999154916681;  // std dev = 3.453, 51.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=32 */
%   | | | else return -0.13073995378937656;  // std dev = 0.994, 90.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=1 */
%   | | else if ( haswordauthor(H, D) )
%   | | | then return 0.12130682983635446;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | | else return -0.03768439823382107;  // std dev = 2.116, 48.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=5 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.058148935099512376;  // std dev = 3.464, 75.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=15 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.823652297142221;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.17634770285777898;  // std dev = 1.29e-08, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.5379380114279353;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.05442152791145185;  // std dev = 2.631, 39.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=9 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.32365229714222105;  // std dev = 2.646, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return 0.13793801142793533;  // std dev = 2.746, 35.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=11 */
%   | | else return 0.22322856832864107;  // std dev = 0.490, 2,360.000 (wgt'ed) examples reached here.  /* #neg=1,417 #pos=943 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then return 0.053946007599237886;  // std dev = 0.384, 208.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=43 */
%   | else return 0.03017301239097207;  // std dev = 0.380, 85.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=15 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1890496953051555;  // std dev = 0.489, 2,499.000 (wgt'ed) examples reached here.  /* #neg=1,498 #pos=1,001 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4065552450794265;  // std dev = 3.453, 51.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=32 */
%   | | | else return -0.12164645058814877;  // std dev = 0.994, 90.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=1 */
%   | | else if ( haswordauthor(H, D) )
%   | | | then return 0.09860667618552735;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | | else return -0.03967546546863066;  // std dev = 2.116, 48.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=5 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.030126730375093946;  // std dev = 3.380, 77.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=14 */
%   | | | else return 0.1884383894562938;  // std dev = 0.807, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return -0.12879244902824735;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.15583867565258874;  // std dev = 0.488, 2,499.000 (wgt'ed) examples reached here.  /* #neg=1,498 #pos=1,001 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return 0.0787772816624874;  // std dev = 3.811, 84.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=20 */
%   | | | else return -0.05459655620214483;  // std dev = 2.699, 81.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=8 */
%   | | else return 0.14945137598126404;  // std dev = 0.390, 33.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.028155864578201663;  // std dev = 3.282, 83.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=18 */
%   | | | else return 9.617218830780498E-4;  // std dev = 0.931, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else return -0.11501883125381825;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then if ( haswordvenue(A, D) )
%   | | | then return 0.36365936368059165;  // std dev = 1.181, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.09751320126222533;  // std dev = 3.766, 62.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=23 */
%   | | else return 0.6839581748921923;  // std dev = 0.126, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.1250543965077739;  // std dev = 0.488, 2,426.000 (wgt'ed) examples reached here.  /* #neg=1,457 #pos=969 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | then if ( haswordauthor(J, G) )
%   | | | then return 0.032787025743485895;  // std dev = 1.540, 20.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=4 */
%   | | | else return 0.008217842376285301;  // std dev = 4.466, 145.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=24 */
%   | | else return 0.12708631194896974;  // std dev = 0.383, 33.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then return -0.13747949140510013;  // std dev = 0.077, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.0240933401988709;  // std dev = 0.358, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10013130619644557;  // std dev = 0.488, 2,499.000 (wgt'ed) examples reached here.  /* #neg=1,498 #pos=1,001 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.07214981895202291;  // std dev = 0.427, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | else return -0.01693469806374007;  // std dev = 0.322, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return -0.012496010801601504;  // std dev = 1.313, 19.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
%   | | | else return -0.04833835819963148;  // std dev = 0.808, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.020535947842728376;  // std dev = 4.543, 165.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=34 */
%   | | | else return 0.03137062265246173;  // std dev = 3.356, 73.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=14 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.5264136867628587;  // std dev = 0.144, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.24047959893877688;  // std dev = 0.005, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( haswordtitle(H, C), haswordtitle(H, D) )
%   | | | then return -0.07495975811112923;  // std dev = 2.480, 38.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=9 */
%   | | | else return 0.3086694537088013;  // std dev = 1.320, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else return 0.07829578393595242;  // std dev = 0.490, 2,423.000 (wgt'ed) examples reached here.  /* #neg=1,455 #pos=968 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( haswordtitle(K, I) )
%   | | then return 0.06138085637393374;  // std dev = 0.427, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | else return -0.014905009674665551;  // std dev = 0.322, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return -0.01999430025615244;  // std dev = 0.298, 27.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=4 */
%   | | else return 0.0204893845863111;  // std dev = 0.366, 238.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=48 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.061145898214048054;  // std dev = 0.487, 2,499.000 (wgt'ed) examples reached here.  /* #neg=1,498 #pos=1,001 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.05183201281688595;  // std dev = 0.427, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | else return -0.013138533749739048;  // std dev = 0.322, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return -0.008136870496435552;  // std dev = 1.318, 19.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
%   | | | else return -0.039164348400122756;  // std dev = 0.812, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.014558839723881358;  // std dev = 4.531, 165.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=34 */
%   | | | else return 0.02427404340970953;  // std dev = 3.356, 73.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=14 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04735159596709182;  // std dev = 0.487, 2,499.000 (wgt'ed) examples reached here.  /* #neg=1,498 #pos=1,001 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, A) )
%   | | | then return 0.053036413122627246;  // std dev = 4.026, 94.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=22 */
%   | | | else return -0.06847626270937944;  // std dev = 2.331, 71.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=6 */
%   | | else return 0.09722888339607857;  // std dev = 0.375, 33.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.014200537238586077;  // std dev = 3.255, 83.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=18 */
%   | | | else return -0.007702158031169256;  // std dev = 0.930, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else return -0.10332449574018492;  // std dev = 0.028, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( samebib(E, F), venue(F, B) )
%   | | then return 0.4253298054674384;  // std dev = 0.404, 1,196.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=947 */
%   | | else return -0.3299189715276727;  // std dev = 0.132, 1,293.000 (wgt'ed) examples reached here.  /* #neg=1,274 #pos=19 */
%   | else if ( title(G, D), venue(G, B) )
%   | | then if ( haswordvenue(B, C) )
%   | | | then return -0.09054375050319205;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | | else return 0.02269480404320704;  // std dev = 0.957, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.09261132971071236;  // std dev = 4.107, 68.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=31 */
%   | | | else return 0.0075259968814316534;  // std dev = 3.285, 73.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=15 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then return 0.27220557782458826;  // std dev = 0.468, 23.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   | | else return 0.4367289767695352;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.009351574785899746;  // std dev = 0.378, 85.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=15 */


Results
   AUC ROC   = 0.836368
   AUC PR    = 0.663338
   CLL	      = -0.535948
   Precision = 0.75 at threshold = 0.5
   Recall    = 0.008152
   F1        = 0.016129


Total learning time: 1719.828153848648 seconds
Total inference time: 2.67 seconds
AUC ROC: 0.836368


Results scoring model
   AUC ROC   = 0.900377
   AUC PR    = 0.810213
   CLL	      = -0.52856
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.034939
   F1        = 0.067518


Total scoring time: 23.126 seconds
Refined model CLL: -0.52856


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.836368
   AUC PR    = 0.663338
   CLL	      = -0.535948
   Precision = 0.75 at threshold = 0.5
   Recall    = 0.008152
   F1        = 0.016129


Total learning time: 3896.302482679367 seconds
Total inference time: 2.67 seconds
AUC ROC: 0.836368
Total revision time: 3896.302482679367
Best scored revision CLL: -0.52856


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 20:12:55
{'AUC ROC': 0.836368, 'AUC PR': 0.663338, 'CLL': -0.535948, 'Precision': [0.75, 0.5], 'Recall': 0.008152, 'F1': 0.016129, 'Learning time': 3896.302482679367, 'Inference time': 2.67, 'parameter_0.4': {'AUC ROC': 0.836127, 'AUC PR': 0.663099, 'CLL': -0.535655, 'Precision': [0.75, 0.5], 'Recall': 0.008152, 'F1': 0.016129, 'Learning time': 2127.996328830719, 'Inference time': 2.539}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2587091591891431;  // std dev = 0.490, 2,499.000 (wgt'ed) examples reached here.  /* #neg=1,498 #pos=1,001 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4855999154916681;  // std dev = 3.453, 51.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=32 */
%   | | | else return -0.13073995378937656;  // std dev = 0.994, 90.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=1 */
%   | | else if ( haswordauthor(H, D) )
%   | | | then return 0.12130682983635446;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | | else return -0.03768439823382107;  // std dev = 2.116, 48.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=5 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.039967116917694195;  // std dev = 3.384, 77.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=14 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.22421252123183563;  // std dev = 0.490, 2,499.000 (wgt'ed) examples reached here.  /* #neg=1,498 #pos=1,001 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.4156994981461517;  // std dev = 3.453, 51.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=32 */
%   | | | else return -0.11555758993932902;  // std dev = 0.994, 90.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=1 */
%   | | else if ( haswordauthor(H, D) )
%   | | | then return 0.1058893024861437;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | | else return -0.033158718281444635;  // std dev = 2.116, 48.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=5 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return -0.1507878789340461;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.05268022419674176;  // std dev = 3.461, 75.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=15 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C) )
%   | | then if ( haswordtitle(F, D) )
%   | | | then return 0.2097478359184184;  // std dev = 3.728, 57.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=24 */
%   | | | else return 0.12202853767280447;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else return 0.788695204339471;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.1881181227236229;  // std dev = 0.490, 2,426.000 (wgt'ed) examples reached here.  /* #neg=1,457 #pos=969 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.0832474909854071;  // std dev = 3.816, 84.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=20 */
%   | | | else return -0.04956097209309716;  // std dev = 2.695, 81.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=8 */
%   | | else return 0.15599922470055783;  // std dev = 0.392, 33.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then return -0.1365387752451544;  // std dev = 0.064, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.033937217350244825;  // std dev = 0.360, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1559706392707324;  // std dev = 0.490, 2,499.000 (wgt'ed) examples reached here.  /* #neg=1,498 #pos=1,001 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.07949829316200976;  // std dev = 0.428, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | else return -0.015414156516761842;  // std dev = 0.323, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return -0.0030017369456125185;  // std dev = 1.324, 19.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
%   | | | else return -0.04009676759117352;  // std dev = 0.812, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.032254276293576384;  // std dev = 4.586, 165.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=34 */
%   | | | else return 0.034795302381035245;  // std dev = 3.358, 73.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=14 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12602477863048683;  // std dev = 0.490, 2,499.000 (wgt'ed) examples reached here.  /* #neg=1,498 #pos=1,001 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordauthor(G, F) )
%   | | then if ( haswordvenue(B, F) )
%   | | | then return 0.03770641792166675;  // std dev = 1.540, 20.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=4 */
%   | | | else return 0.0073493418458264945;  // std dev = 4.463, 145.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=24 */
%   | | else return 0.1282557475394562;  // std dev = 0.384, 33.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.023059612685362333;  // std dev = 3.280, 85.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=18 */
%   | | | else return 0.04968786483246139;  // std dev = 0.905, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return -0.11082640590741392;  // std dev = 0.023, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.10023005170380461;  // std dev = 0.490, 2,499.000 (wgt'ed) examples reached here.  /* #neg=1,498 #pos=1,001 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, A) )
%   | | | then return 0.06295147858437604;  // std dev = 4.028, 94.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=22 */
%   | | | else return -0.06110889047694748;  // std dev = 2.334, 71.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=6 */
%   | | else return 0.10766640483565028;  // std dev = 0.378, 33.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.022859627919852438;  // std dev = 3.270, 83.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=18 */
%   | | | else return -0.0011074591214578111;  // std dev = 0.924, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else return -0.10037756799550031;  // std dev = 0.021, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.078760103870372;  // std dev = 0.490, 2,499.000 (wgt'ed) examples reached here.  /* #neg=1,498 #pos=1,001 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, B) )
%   | | | then return 0.06039117051965127;  // std dev = 3.796, 84.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=20 */
%   | | | else return -0.04711964232734393;  // std dev = 2.690, 81.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=8 */
%   | | else return 0.08933642522283441;  // std dev = 0.373, 33.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.016393708636140862;  // std dev = 3.269, 85.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=18 */
%   | | | else return 0.042776422175720905;  // std dev = 0.906, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return -0.0916780163879633;  // std dev = 0.020, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6532037238970867;  // std dev = 0.140, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.3376189587920894;  // std dev = 0.014, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.35056585102788196;  // std dev = 1.169, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return -0.10818127397724633;  // std dev = 2.631, 39.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=9 */
%   | else return 0.060401350619762935;  // std dev = 0.490, 2,423.000 (wgt'ed) examples reached here.  /* #neg=1,455 #pos=968 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then return 6.343784404296129E-4;  // std dev = 0.319, 29.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=5 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then return 0.013683313112871872;  // std dev = 0.354, 184.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=38 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.029658968479587516;  // std dev = 3.463, 75.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=15 */
%   | | | else return -0.08433049792788608;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04734238395248173;  // std dev = 0.488, 2,499.000 (wgt'ed) examples reached here.  /* #neg=1,498 #pos=1,001 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.05309824955562416;  // std dev = 0.425, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | else return -0.02152067480336951;  // std dev = 0.320, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return -0.006774678575760086;  // std dev = 4.191, 142.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=22 */
%   | | | else return 0.0709227141243558;  // std dev = 2.117, 33.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.01910509607063759;  // std dev = 3.372, 87.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=19 */
%   | | | else return -0.08426382361010513;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( haswordauthor(E, C) )
%   | then if ( author(F, E), title(F, D) )
%   | | then return 0.29990463999567335;  // std dev = 0.332, 24.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=18 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.22845834271059387;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return -0.06361324962329333;  // std dev = 3.093, 55.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=12 */
%   | else if ( title(G, D), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.42412797801656293;  // std dev = 13.947, 1,169.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=920 */
%   | | | else return -0.3268156965263645;  // std dev = 5.430, 1,276.000 (wgt'ed) examples reached here.  /* #neg=1,250 #pos=26 */
%   | | else if ( title(I, D), venue(I, A) )
%   | | | then return -0.14224818303925035;  // std dev = 2.153, 30.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=6 */
%   | | | else return 0.04374990807563879;  // std dev = 4.843, 119.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=39 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then return 0.0728963658516162;  // std dev = 0.422, 103.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=30 */
%   | else return 0.18138553691261228;  // std dev = 0.381, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */


Results
   AUC ROC   = 0.841722
   AUC PR    = 0.685993
   CLL	      = -0.537853
   Precision = 0.75 at threshold = 0.5
   Recall    = 0.008152
   F1        = 0.016129


Total learning time: 2124.5117177963257 seconds
Total inference time: 2.715 seconds
AUC ROC: 0.841722


Dataset: 3_imdb_cora, Fold: 1, Type: Scratch (RDN-B), Time: 20:48:24
{'AUC ROC': 0.841722, 'AUC PR': 0.685993, 'CLL': -0.537853, 'Precision': [0.75, 0.5], 'Recall': 0.008152, 'F1': 0.016129, 'Learning time': 2124.5117177963257, 'Inference time': 2.715}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.2562353369551175;  // std dev = 0.490, 3,449.000 (wgt'ed) examples reached here.  /* #neg=2,076 #pos=1,373 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.08542166237223965;  // std dev = 3.405, 66.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=15 */
%   | | | else return 0.31648226843284666;  // std dev = 5.458, 120.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=55 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.4020085842223182;  // std dev = 3.760, 57.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=31 */
%   | | | else return 0.5152917922423687;  // std dev = 2.808, 35.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=23 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( title(M, L), venue(M, B) )
%   | | then return 0.07880621209481707;  // std dev = 0.415, 213.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=47 */
%   | | else return 0.01852629359007842;  // std dev = 0.367, 106.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=17 */
%   | else return 0.02481560176617867;  // std dev = 0.373, 138.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=23 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.22209773202903205;  // std dev = 0.490, 3,449.000 (wgt'ed) examples reached here.  /* #neg=2,076 #pos=1,373 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.07470190041753992;  // std dev = 3.405, 66.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=15 */
%   | | | else return 0.27343665874914547;  // std dev = 5.458, 120.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=55 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.4277921834436812;  // std dev = 3.342, 49.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=31 */
%   | | | else return 0.13519829644214612;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.4105176798704923;  // std dev = 2.501, 27.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=17 */
%   | | | else return 0.5610279294813287;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.05143362944872113;  // std dev = 0.400, 319.000 (wgt'ed) examples reached here.  /* #neg=255 #pos=64 */
%   | else return 0.021767884192405756;  // std dev = 0.373, 138.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=23 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.18754530857223886;  // std dev = 0.490, 3,449.000 (wgt'ed) examples reached here.  /* #neg=2,076 #pos=1,373 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.0647908507814797;  // std dev = 3.405, 66.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=15 */
%   | | | else return 0.22864662696661947;  // std dev = 5.458, 120.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=55 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.5260313943415996;  // std dev = 0.884, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.28505140350605096;  // std dev = 3.654, 56.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=31 */
%   | | | else return 0.35447977143191095;  // std dev = 2.797, 35.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=23 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( title(M, L), venue(M, B) )
%   | | then return 0.06220111842693534;  // std dev = 0.415, 213.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=47 */
%   | | else return 0.009794904955541297;  // std dev = 0.367, 106.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=17 */
%   | else return 0.019049872944810833;  // std dev = 0.373, 138.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=23 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.15468512947928964;  // std dev = 0.490, 3,449.000 (wgt'ed) examples reached here.  /* #neg=2,076 #pos=1,373 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.05578011800672902;  // std dev = 3.405, 66.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=15 */
%   | | | else return 0.18572608234333637;  // std dev = 5.458, 120.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=55 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.2641790505281026;  // std dev = 3.041, 42.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=26 */
%   | | | else return 0.10092966034911822;  // std dev = 1.514, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.25369774379680565;  // std dev = 2.944, 37.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=22 */
%   | | | else return 0.36904355636117864;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.038712807804793026;  // std dev = 0.400, 319.000 (wgt'ed) examples reached here.  /* #neg=255 #pos=64 */
%   | else return 0.016636776392289415;  // std dev = 0.373, 138.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=23 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.12525426645561424;  // std dev = 0.489, 3,463.000 (wgt'ed) examples reached here.  /* #neg=2,090 #pos=1,373 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.015457928381353707;  // std dev = 3.267, 52.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=15 */
%   | | | else return 0.14738904413680165;  // std dev = 5.458, 120.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=55 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.3415190944952678;  // std dev = 0.881, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.1650223848111299;  // std dev = 3.278, 46.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=26 */
%   | | | else return 0.20620341740330336;  // std dev = 3.195, 45.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=28 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordauthor(M, K) )
%   | | then return 0.11254921745048832;  // std dev = 0.447, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
%   | | else return 0.024259142149993466;  // std dev = 0.393, 286.000 (wgt'ed) examples reached here.  /* #neg=231 #pos=55 */
%   | else return 0.014502864105143154;  // std dev = 0.373, 138.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=23 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.09986896121244088;  // std dev = 0.489, 3,449.000 (wgt'ed) examples reached here.  /* #neg=2,076 #pos=1,373 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.02851093422745993;  // std dev = 3.405, 66.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=15 */
%   | | | else return 0.11496495858802606;  // std dev = 5.458, 120.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=55 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.4099442664134947;  // std dev = 0.103, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.11520712767536614;  // std dev = 3.705, 57.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=31 */
%   | | | else return 0.16305477381832553;  // std dev = 2.768, 35.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=23 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordauthor(M, K) )
%   | | then return 0.09682918794248813;  // std dev = 0.448, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
%   | | else return 0.02084135054957669;  // std dev = 0.393, 286.000 (wgt'ed) examples reached here.  /* #neg=231 #pos=55 */
%   | else return 0.012622396614874954;  // std dev = 0.373, 138.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=23 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.07881596161545826;  // std dev = 0.489, 3,463.000 (wgt'ed) examples reached here.  /* #neg=2,090 #pos=1,373 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.008019908983905153;  // std dev = 3.267, 52.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=15 */
%   | | | else return 0.0885984563121348;  // std dev = 5.458, 120.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=55 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.1174824849558821;  // std dev = 3.006, 42.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=26 */
%   | | | else return 0.008137989370925105;  // std dev = 1.523, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.11200964551633923;  // std dev = 2.929, 37.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=22 */
%   | | | else return 0.18653598910688385;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.024533020888382374;  // std dev = 0.400, 319.000 (wgt'ed) examples reached here.  /* #neg=255 #pos=64 */
%   | else return 0.010970321301480535;  // std dev = 0.373, 138.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=23 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.06151345551449816;  // std dev = 0.489, 3,463.000 (wgt'ed) examples reached here.  /* #neg=2,090 #pos=1,373 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.006349849596696887;  // std dev = 3.267, 52.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=15 */
%   | | | else return 0.06772501561009095;  // std dev = 5.458, 120.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=55 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.2921035221901237;  // std dev = 0.087, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.06213412438433107;  // std dev = 3.708, 57.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=31 */
%   | | | else return 0.091015093206421;  // std dev = 2.754, 35.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=23 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( title(M, L), venue(M, B) )
%   | | then return 0.037266373936268846;  // std dev = 0.415, 213.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=47 */
%   | | else return -0.01184508847689999;  // std dev = 0.364, 106.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=17 */
%   | else return 0.00952276470720391;  // std dev = 0.373, 138.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=23 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.04780473675455856;  // std dev = 0.489, 3,449.000 (wgt'ed) examples reached here.  /* #neg=2,076 #pos=1,373 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.023505791127235037;  // std dev = 6.050, 167.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=60 */
%   | | | else return 0.11947257977967647;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=10 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.1567572875256819;  // std dev = 0.868, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.26345268126512317;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.05144952276794188;  // std dev = 4.535, 88.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=51 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then if ( haswordauthor(N, L) )
%   | | then return 0.07866127369048169;  // std dev = 0.449, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
%   | | else return 0.010705884778644849;  // std dev = 0.393, 286.000 (wgt'ed) examples reached here.  /* #neg=231 #pos=55 */
%   | else return 0.008257355496335673;  // std dev = 0.373, 138.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=23 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( haswordauthor(E, C) )
%   | | then return 0.3752788298479306;  // std dev = 0.441, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.036099888579271905;  // std dev = 28.720, 3,457.000 (wgt'ed) examples reached here.  /* #neg=2,089 #pos=1,368 */
%   | | | else return 0.024084110369469617;  // std dev = 6.326, 170.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=69 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.19782358531448443;  // std dev = 0.049, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.026481543180356466;  // std dev = 3.351, 48.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=27 */
%   | | | else return 0.058025641467701394;  // std dev = 3.175, 44.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=27 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( title(M, L), venue(M, B) )
%   | | then return 0.02958784407388765;  // std dev = 0.415, 213.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=47 */
%   | | else return -0.014304284257083511;  // std dev = 0.363, 106.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=17 */
%   | else return 0.007153411981729659;  // std dev = 0.373, 138.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=23 */


Results
   AUC ROC   = 0.604787
   AUC PR    = 0.439895
   CLL	      = -0.62198
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total learning time: 9287.097581863403 seconds
Total inference time: 3.504 seconds
AUC ROC: 0.604787


Results scoring model
   AUC ROC   = 0.564885
   AUC PR    = 0.440126
   CLL	      = -0.650128
   Precision = 0.65 at threshold = 0.5
   Recall    = 0.032725
   F1        = 0.062313


Total scoring time: 40.423 seconds
Parameter learned model CLL: -0.650128


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,true': 'title(M, L), venue(M, B)'}, {'true,true,true': [0.49, 2, 1], 'true,true,false,true': [3.405, 51, 15], 'true,true,false,false': [5.458, 65, 55], 'true,false,true': [0.0, 0, 5], 'true,false,false,true': [3.76, 26, 31], 'true,false,false,false': [2.808, 12, 23], 'false,true,true': [0.415, 166, 47], 'false,true,false': [0.367, 89, 17], 'false,false': [0.373, 115, 23]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true,true': [0.49, 2, 1], 'true,true,false,true': [3.405, 51, 15], 'true,true,false,false': [5.458, 65, 55], 'true,false,true,true': [3.342, 18, 31], 'true,false,true,false': [1.633, 8, 4], 'true,false,false,true': [2.501, 10, 17], 'true,false,false,false': [1.247, 2, 7], 'false,true': [0.4, 255, 64], 'false,false': [0.373, 115, 23]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,true': 'title(M, L), venue(M, B)'}, {'true,true,true': [0.49, 2, 1], 'true,true,false,true': [3.405, 51, 15], 'true,true,false,false': [5.458, 65, 55], 'true,false,true': [0.884, 1, 5], 'true,false,false,true': [3.654, 25, 31], 'true,false,false,false': [2.797, 12, 23], 'false,true,true': [0.415, 166, 47], 'false,true,false': [0.367, 89, 17], 'false,false': [0.373, 115, 23]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true,true': [0.49, 2, 1], 'true,true,false,true': [3.405, 51, 15], 'true,true,false,false': [5.458, 65, 55], 'true,false,true,true': [3.041, 16, 26], 'true,false,true,false': [1.514, 5, 4], 'true,false,false,true': [2.944, 15, 22], 'true,false,false,false': [1.247, 2, 7], 'false,true': [0.4, 255, 64], 'false,false': [0.373, 115, 23]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,true': 'haswordauthor(M, K)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [3.267, 37, 15], 'true,true,false,false': [5.458, 65, 55], 'true,false,true': [0.881, 1, 5], 'true,false,false,true': [3.278, 20, 26], 'true,false,false,false': [3.195, 17, 28], 'false,true,true': [0.447, 24, 9], 'false,true,false': [0.393, 231, 55], 'false,false': [0.373, 115, 23]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,true': 'haswordauthor(M, K)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [3.405, 51, 15], 'true,true,false,false': [5.458, 65, 55], 'true,false,true': [0.103, 0, 5], 'true,false,false,true': [3.705, 26, 31], 'true,false,false,false': [2.768, 12, 23], 'false,true,true': [0.448, 24, 9], 'false,true,false': [0.393, 231, 55], 'false,false': [0.373, 115, 23]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [3.267, 37, 15], 'true,true,false,false': [5.458, 65, 55], 'true,false,true,true': [3.006, 16, 26], 'true,false,true,false': [1.523, 5, 4], 'true,false,false,true': [2.929, 15, 22], 'true,false,false,false': [1.247, 2, 7], 'false,true': [0.4, 255, 64], 'false,false': [0.373, 115, 23]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,true': 'title(M, L), venue(M, B)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [3.267, 37, 15], 'true,true,false,false': [5.458, 65, 55], 'true,false,true': [0.087, 0, 5], 'true,false,false,true': [3.708, 26, 31], 'true,false,false,false': [2.754, 12, 23], 'false,true,true': [0.415, 166, 47], 'false,true,false': [0.364, 89, 17], 'false,false': [0.373, 115, 23]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'true,false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false': 'haswordvenue(A, L), haswordtitle(M, L)', 'false,true': 'haswordauthor(N, L)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [6.05, 107, 60], 'true,true,false,false': [2.176, 9, 10], 'true,false,true': [0.868, 1, 5], 'true,false,false,true': [0.004, 0, 3], 'true,false,false,false': [4.535, 37, 51], 'false,true,true': [0.449, 24, 9], 'false,true,false': [0.393, 231, 55], 'false,false': [0.373, 115, 23]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'haswordauthor(E, C)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,true': 'title(M, L), venue(M, B)'}, {'true,true,true': [0.441, 2, 6], 'true,true,false,true': [28.72, 2, 1], 'true,true,false,false': [6.326, 101, 69], 'true,false,true': [0.049, 0, 5], 'true,false,false,true': [3.351, 21, 27], 'true,false,false,false': [3.175, 17, 27], 'false,true,true': [0.415, 166, 47], 'false,true,false': [0.363, 89, 17], 'false,false': [0.373, 115, 23]}]]
[{'': [0.24048695618205454, 0.15413049619581695], 'true': [0.2393856155480145, 0.23828249548304775], 'true,true': [0.2396136185132423, 0.23470921493814306], 'true,false': [0.0, 0.24243856332703195], 'true,false,false': [0.24807633117882583, 0.22530612244898066], 'true,true,false': [0.17561983471074327, 0.24826388888888887], 'false': [0.16037578247069198, 0.13888888888888987], 'false,true': [0.1719676431043234, 0.13465646137415396]}, {'': [0.2399015267745745, 0.15394000396295407], 'true': [0.23921777500759628, 0.23465287231310755], 'true,true': [0.2396136185132753, 0.23152860110789042], 'true,false': [0.24036826262821326, 0.2211510183562409], 'true,false,true': [0.2279706467511013, 0.22222222222222213], 'true,true,false': [0.17561983471074424, 0.2482638888888898], 'true,false,false': [0.23159152194122903, 0.17283950617283952], 'false': [0.16018539456808156, 0.13888888888888845]}, {'': [0.23931594859495398, 0.15388961043982208], 'true': [0.23906586842399083, 0.23004818310653652], 'true,true': [0.239613618513263, 0.22863339451936227], 'true,false': [0.13017731666005594, 0.23379300105798423], 'true,false,false': [0.23836812433520116, 0.22350646641576194], 'true,true,false': [0.17561983471074333, 0.24826388888888856], 'false': [0.16017892417746973, 0.13888888888888967], 'false,true': [0.1719676431043202, 0.134656461374155]}, {'': [0.23891263693712375, 0.15374366165700692], 'true': [0.2389460894183902, 0.22775269820160582], 'true,true': [0.23961361851324126, 0.22635263740884246], 'true,false': [0.2301063967533728, 0.22426385628783477], 'true,false,true': [0.2201486369764163, 0.25462858429014995], 'true,true,false': [0.17561983471074416, 0.24826388888888973], 'true,false,false': [0.2341693970287601, 0.17283950617283952], 'false': [0.16002269917509726, 0.13888888888888948]}, {'': [0.23864861007465557, 0.15371057282377704], 'true': [0.23886194037461958, 0.2257952861072666], 'true,true': [0.23884357729786984, 0.23893145652703685], 'true,true,false': [0.20525147928994028, 0.24826388888888917], 'true,false': [0.1293513679133941, 0.23064634869998843], 'true,false,false': [0.23352257033894216, 0.2268489542939922], 'false': [0.16001471184233318, 0.13888888888888762], 'false,true': [0.2001792295946671, 0.1545739508855889]}, {'': [0.23847100974238022, 0.15356220503643797], 'true': [0.2387732310631206, 0.224845621544899], 'true,true': [0.23954682898652302, 0.22419804409954752], 'true,false': [0.002133628301704227, 0.23300772080389218], 'true,false,false': [0.2408002794945031, 0.21889855146532122], 'true,true,false': [0.17561983471074435, 0.24826388888888798], 'false': [0.15983183235391893, 0.13888888888888998], 'false,true': [0.20032266673307925, 0.1545624869923065]}, {'': [0.23835099291091394, 0.15344486275901487], 'true': [0.23872865366731597, 0.22308834167834551], 'true,true': [0.23878527181283474, 0.23722914327182829], 'true,true,false': [0.20525147928994128, 0.24826388888888912], 'true,false': [0.22446635352829844, 0.2211363442284747], 'true,false,true': [0.21521013441052203, 0.25781574497951776], 'true,false,false': [0.23179753716854753, 0.1728395061728395], 'false': [0.15968625812870585, 0.1388888888888888]}, {'': [0.23827050299093572, 0.1534265539382297], 'true': [0.2386767654513952, 0.22250081744780922], 'true,true': [0.2387765862011325, 0.23641749972706963], 'true,true,false': [0.2052514792899403, 0.24826388888888967], 'true,false': [0.0015185291153455682, 0.2320389126611338], 'true,false,false': [0.24117573887778748, 0.2166421527702841], 'false': [0.15967616279673685, 0.138888888888888], 'false,true': [0.17236300550270306, 0.1325723127201951]}, {'': [0.2382109391964352, 0.15332274532298873], 'true': [0.2386442163007201, 0.22167738154155847], 'true,true': [0.2394723911711296, 0.22308798226492216], 'true,true,false': [0.21916415762806093, 0.2493074792243767], 'true,false': [0.12571489130564037, 0.2274066473473409], 'true,false,false': [5.303628568847918e-06, 0.2336772514036659], 'false': [0.15953972983340556, 0.13888888888889014], 'false,true': [0.20146942730355155, 0.15422397041601688]}, {'': [0.23816802852554744, 0.1532345869498085], 'true': [0.23861832309638242, 0.22112031306597985], 'true,true': [0.1942775627830385, 0.23846209497541115], 'true,true,false': [0.23860432486629074, 0.23543219652626804], 'true,false': [0.00047595646196738615, 0.23185330498533158], 'true,false,false': [0.2339240390015582, 0.2290751762638644], 'false': [0.1594219567644722, 0.1388888888888878], 'false,true': [0.17256975094019927, 0.1317159735845273]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,false;haswordvenue(B, G), haswordauthor(H, G).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,false;haswordvenue(B, G), haswordauthor(H, G).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
8;true,false,false;haswordvenue(B, J), haswordauthor(K, J).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;true;true


Refining candidate
***************************
