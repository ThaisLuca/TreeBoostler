Starting experiment #2 for 3_imdb_cora

Loading pre-trained trees.
Starting fold 1

Target train facts examples: 35095
Target train pos examples: 2649
Target train neg examples: 4334

Target test facts examples: 7463
Target test pos  examples: 368
Target test neg examples: 688

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.6433474910561866;  // std dev = 9.666, 554.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=435 */
%   | | | else return -0.11102914709226816;  // std dev = 4.177, 584.000 (wgt'ed) examples reached here.  /* #neg=566 #pos=18 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.14386322081379807;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | | else return 0.2823913593419366;  // std dev = 2.839, 33.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=14 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.5423594614153018;  // std dev = 2.026, 19.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
%   | | | else return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.643863220813798;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return 0.020648935099511823;  // std dev = 0.369, 160.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=26 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.5459224822218625;  // std dev = 9.666, 554.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=435 */
%   | | | else return -0.09804335916272296;  // std dev = 4.177, 584.000 (wgt'ed) examples reached here.  /* #neg=566 #pos=18 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.12543301544918353;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | | else return 0.2444284950558592;  // std dev = 2.839, 33.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=14 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.29666526514230396;  // std dev = 1.583, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return 0.4961278138360791;  // std dev = 1.672, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.5463443246618189;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.5580193346218546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return 0.018116717074911526;  // std dev = 0.369, 160.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=26 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.43330586901119533;  // std dev = 9.666, 554.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=435 */
%   | | | else return -0.08962524083027762;  // std dev = 4.108, 585.000 (wgt'ed) examples reached here.  /* #neg=567 #pos=18 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.1896375468989591;  // std dev = 3.352, 49.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=18 */
%   | | | else return 0.2812866503410098;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.3790404797405395;  // std dev = 2.005, 19.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
%   | | | else return 0.16916287028262153;  // std dev = 1.109, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.43360774241258027;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.4419486100244409;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return 0.015864186153868354;  // std dev = 0.369, 160.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=26 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.3294386023025125;  // std dev = 9.666, 554.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=435 */
%   | | | else return -0.08046218750438945;  // std dev = 4.112, 585.000 (wgt'ed) examples reached here.  /* #neg=567 #pos=18 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.16076972457884153;  // std dev = 3.352, 49.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=18 */
%   | | | else return 0.22946176084268743;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.18320373728194805;  // std dev = 1.589, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return 0.31672921836202406;  // std dev = 1.646, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.3296468796614062;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.33541139495094313;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return 0.013867891990252896;  // std dev = 0.369, 160.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=26 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0853209188426023;  // std dev = 0.357, 1,192.000 (wgt'ed) examples reached here.  /* #neg=719 #pos=473 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.22652023053331952;  // std dev = 1.988, 19.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
%   | | | else return 0.09485998438363195;  // std dev = 1.124, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.248567153918374;  // std dev = 0.408, 19.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( haswordtitle(J, H) )
%   | | then return 0.27817590473506726;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return -0.15039552383636123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then return -0.15039552383636123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.001778389207117136;  // std dev = 3.445, 92.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=14 */
%   | | | else return 0.08037370693286934;  // std dev = 2.631, 39.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=9 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07079562252721149;  // std dev = 0.354, 1,192.000 (wgt'ed) examples reached here.  /* #neg=719 #pos=473 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.10158307955742289;  // std dev = 1.597, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return 0.18519925545643923;  // std dev = 1.631, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | else return 0.18777669049362303;  // std dev = 0.408, 19.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return -0.13217104110589648;  // std dev = 1.05e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.23908126553712858;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return -0.13217104110589648;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.0015510111762345733;  // std dev = 3.445, 92.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=14 */
%   | | | else return 0.06981275134133995;  // std dev = 2.631, 39.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=9 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05858734852772264;  // std dev = 0.352, 1,192.000 (wgt'ed) examples reached here.  /* #neg=719 #pos=473 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.13118723985608188;  // std dev = 1.980, 19.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
%   | | | else return 0.04780512059192388;  // std dev = 1.134, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.14239365112149144;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.1475395349765098;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return -0.11773368014064062;  // std dev = 1.05e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, B) )
%   | | | then return 0.025506308161166787;  // std dev = 3.220, 71.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=13 */
%   | | | else return -0.017488105691567488;  // std dev = 1.862, 30.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
%   | | else return 0.05148227759265024;  // std dev = 0.413, 41.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=9 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04838725501462874;  // std dev = 0.351, 1,192.000 (wgt'ed) examples reached here.  /* #neg=719 #pos=473 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.053594199312755095;  // std dev = 1.603, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return 0.10969431072154537;  // std dev = 1.624, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.11042649793715557;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.11487800178855918;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return -0.10604399429993233;  // std dev = 1.18e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, A) )
%   | | | then return 0.02226141160582118;  // std dev = 3.219, 71.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=13 */
%   | | | else return -0.015630112450114468;  // std dev = 1.863, 30.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
%   | | else return 0.04416881778678483;  // std dev = 0.413, 41.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=9 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03990208432302047;  // std dev = 0.349, 1,192.000 (wgt'ed) examples reached here.  /* #neg=719 #pos=473 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.07760970647604386;  // std dev = 1.976, 19.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
%   | | | else return 0.021711011170380646;  // std dev = 1.141, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.08669625829153658;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.09063754892886285;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordauthor(L, J) )
%   | | then return -0.09640296811852603;  // std dev = 3.73e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( title(M, K), venue(M, A) )
%   | | | then return 0.017641668856522633;  // std dev = 3.221, 72.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=13 */
%   | | | else return -0.013659512549498836;  // std dev = 1.863, 30.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
%   | else return 0.011402638201126278;  // std dev = 0.374, 51.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=9 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.032866324356891984;  // std dev = 0.348, 1,192.000 (wgt'ed) examples reached here.  /* #neg=719 #pos=473 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.02712987360376502;  // std dev = 1.608, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return 0.0672640369275275;  // std dev = 1.620, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.06877648687039703;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.07231134852621098;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordauthor(L, J) )
%   | | then return -0.08832587742924428;  // std dev = 4.56e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( title(M, K), venue(M, B) )
%   | | | then return 0.015327492743993469;  // std dev = 3.220, 72.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=13 */
%   | | | else return -0.012180219414230439;  // std dev = 1.863, 30.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
%   | else return 0.009839759571456665;  // std dev = 0.374, 51.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=9 */


Results
   AUC ROC   = 0.836325
   AUC PR    = 0.658728
   CLL	      = -0.447064
   Precision = 0.70892 at threshold = 0.5
   Recall    = 0.820652
   F1        = 0.760705


Total learning time: 1786.7211821079254 seconds
Total inference time: 3.526 seconds
AUC ROC: 0.836325


Results scoring model
   AUC ROC   = 0.899066
   AUC PR    = 0.772446
   CLL	      = -0.408413
   Precision = 0.782095 at threshold = 0.5
   Recall    = 0.875236
   F1        = 0.826048


Total scoring time: 21.427 seconds
Parameter learned model CLL: -0.408413


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,true': 'samebib(E, F), venue(F, B)', 'true,true,false': 'title(G, D), venue(G, B)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'title(J, I), venue(J, A)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)'}, {'true,true,true,true': [9.666, 119, 435], 'true,true,true,false': [4.177, 566, 18], 'true,true,false,true': [2.07, 15, 6], 'true,true,false,false': [2.839, 19, 14], 'true,false,true,true': [2.026, 6, 13], 'true,false,true,false': [1.095, 3, 2], 'true,false,false,true': [1.535, 3, 11], 'true,false,false,false': [0.894, 1, 4], 'false': [0.369, 134, 26]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,true': 'samebib(E, F), venue(F, B)', 'true,true,false': 'title(G, D), venue(G, B)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'haswordtitle(I, J), haswordvenue(B, J)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)'}, {'true,true,true,true': [9.666, 119, 435], 'true,true,true,false': [4.177, 566, 18], 'true,true,false,true': [2.07, 15, 6], 'true,true,false,false': [2.839, 19, 14], 'true,false,true,true': [1.583, 5, 5], 'true,false,true,false': [1.672, 4, 10], 'true,false,false,true': [1.535, 3, 11], 'true,false,false,false': [0.894, 1, 4], 'false': [0.369, 134, 26]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,true': 'samebib(E, F), venue(F, A)', 'true,true,false': 'haswordtitle(D, G), haswordauthor(H, G)', 'true,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'true,false,true': 'title(K, J), venue(K, A)', 'true,false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true,true': [9.666, 119, 435], 'true,true,true,false': [4.108, 567, 18], 'true,true,false,true': [3.352, 31, 18], 'true,true,false,false': [1.0, 2, 2], 'true,false,true,true': [2.005, 6, 13], 'true,false,true,false': [1.109, 3, 2], 'true,false,false,true': [1.535, 3, 11], 'true,false,false,false': [0.894, 1, 4], 'false': [0.369, 134, 26]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,true': 'samebib(E, F), venue(F, A)', 'true,true,false': 'haswordtitle(D, G), haswordauthor(H, G)', 'true,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'true,false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'true,false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true,true': [9.666, 119, 435], 'true,true,true,false': [4.112, 567, 18], 'true,true,false,true': [3.352, 31, 18], 'true,true,false,false': [1.0, 2, 2], 'true,false,true,true': [1.589, 5, 5], 'true,false,true,false': [1.646, 4, 10], 'true,false,false,true': [1.535, 3, 11], 'true,false,false,false': [0.894, 1, 4], 'false': [0.369, 134, 26]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, A)', 'false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,true': 'haswordtitle(J, H)', 'false,false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.357, 719, 473], 'true,false,true,true': [1.988, 6, 13], 'true,false,true,false': [1.124, 3, 2], 'true,false,false': [0.408, 4, 15], 'false,true,true': [0.495, 4, 3], 'false,true,false': [0.0, 6, 0], 'false,false,true': [0.0, 16, 0], 'false,false,false,true': [3.445, 78, 14], 'false,false,false,false': [2.631, 30, 9]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'false': 'haswordvenue(A, H), haswordauthor(I, H)', 'false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,false,true': 'haswordtitle(L, J)', 'false,false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.354, 719, 473], 'true,false,true,true': [1.597, 5, 5], 'true,false,true,false': [1.631, 4, 10], 'true,false,false': [0.408, 4, 15], 'false,true': [1.05e-08, 18, 0], 'false,false,true,true': [1.309, 4, 3], 'false,false,true,false': [0.0, 4, 0], 'false,false,false,true': [3.445, 78, 14], 'false,false,false,false': [2.631, 30, 9]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, A)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordauthor(K, J)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)', 'false,false,true': 'title(N, M), venue(N, B)'}, {'true,true': [0.352, 719, 473], 'true,false,true,true': [1.98, 6, 13], 'true,false,true,false': [1.134, 3, 2], 'true,false,false,true': [1.535, 3, 11], 'true,false,false,false': [0.894, 1, 4], 'false,true': [1.05e-08, 18, 0], 'false,false,true,true': [3.22, 58, 13], 'false,false,true,false': [1.862, 26, 4], 'false,false,false': [0.413, 32, 9]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordauthor(K, J)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)', 'false,false,true': 'title(N, M), venue(N, A)'}, {'true,true': [0.351, 719, 473], 'true,false,true,true': [1.603, 5, 5], 'true,false,true,false': [1.624, 4, 10], 'true,false,false,true': [1.535, 3, 11], 'true,false,false,false': [0.894, 1, 4], 'false,true': [1.18e-08, 18, 0], 'false,false,true,true': [3.219, 58, 13], 'false,false,true,false': [1.863, 26, 4], 'false,false,false': [0.413, 32, 9]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, A)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordauthor(L, J)', 'false,true,false': 'title(M, K), venue(M, A)'}, {'true,true': [0.349, 719, 473], 'true,false,true,true': [1.976, 6, 13], 'true,false,true,false': [1.141, 3, 2], 'true,false,false,true': [1.535, 3, 11], 'true,false,false,false': [0.894, 1, 4], 'false,true,true': [3.73e-09, 7, 0], 'false,true,false,true': [3.221, 59, 13], 'false,true,false,false': [1.863, 26, 4], 'false,false': [0.374, 42, 9]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordauthor(L, J)', 'false,true,false': 'title(M, K), venue(M, B)'}, {'true,true': [0.348, 719, 473], 'true,false,true,true': [1.608, 5, 5], 'true,false,true,false': [1.62, 4, 10], 'true,false,false,true': [1.535, 3, 11], 'true,false,false,false': [0.894, 1, 4], 'false,true,true': [4.56e-09, 7, 0], 'false,true,false,true': [3.22, 59, 13], 'false,true,false,false': [1.863, 26, 4], 'false,false': [0.374, 42, 9]}]]
[{'': [0.24140438295987898, 0.136093750000001], 'true': [0.23935225327686646, 0.21092482422931472], 'true,true': [0.23960961944148831, 0.23319615912208466], 'true,true,true': [0.1686617836802258, 0.029871927190843365], 'true,true,false': [0.20408163265306134, 0.2442607897153347], 'true,false': [0.23437499999999958, 0.16620498614958412], 'true,false,true': [0.21606648199445946, 0.24000000000000005], 'true,false,false': [0.16836734693877523, 0.15999999999999986]}, {'': [0.20484822276907663, 0.13609375000000024], 'true': [0.2024540143426198, 0.20666253455387876], 'true,false': [0.2304812426069334, 0.1661918440325316], 'true,false,true': [0.2504884651343729, 0.1996131575682917], 'true,true': [0.2010384165851131, 0.2320007291319983], 'true,true,false': [0.20408163265306117, 0.2442607897153352], 'true,true,true': [0.1686617836802134, 0.02987192719084153], 'true,false,false': [0.16836734693877556, 0.16]}, {'': [0.170873676289551, 0.13609375000000043], 'true': [0.16815969687255916, 0.20208047772666834], 'true,false': [0.22604083460095045, 0.16617890357559717], 'true,false,true': [0.21159707055927726, 0.2460553209558233], 'true,true': [0.16516891866444167, 0.23146508692832773], 'true,true,false': [0.22931810388216148, 0.25], 'true,false,false': [0.16836734693877567, 0.15999999999999998], 'true,true,true': [0.1686617836802221, 0.028853992098748272]}, {'': [0.14597898561529174, 0.1360937499999996], 'true': [0.14305458997450798, 0.1988055443710415], 'true,false': [0.22247108237324476, 0.1661718569536591], 'true,false,true': [0.2526072413100213, 0.1935164820205675], 'true,false,false': [0.16836734693877542, 0.15999999999999998], 'true,true': [0.1388560627669722, 0.23116858772805154], 'true,true,false': [0.22927520914218957, 0.24999999999999994], 'true,true,true': [0.16866178368021953, 0.028906931448172267]}, {'': [0.130480151103352, 0.13609375000000085], 'false': [0.17751479289940836, 0.13198204451848855], 'false,true': [0.24489795918367355, 0.0], 'false,false': [0.0, 0.1447468096264795], 'false,false,false': [0.1290170132325135, 0.17751479289940836], 'true': [0.12744406319603913, 0.19688789567231058], 'true,false': [0.2201253380756669, 0.1661690734640263], 'true,false,true': [0.20798295766490965, 0.25254330080705556]}, {'': [0.12823961866335865, 0.13415649478624567], 'false': [6.1679056923619804e-18, 0.14826738158909342], 'false,false': [0.1877383021685977, 0.14442952036784587], 'false,false,true': [0.24489795918367346, 0.0], 'false,false,false': [0.1290170132325144, 0.17751479289940797], 'true': [0.12547769752716592, 0.1958895608912129], 'true,false': [0.21879914719851934, 0.16616970170272302], 'true,false,true': [0.2551573513301434, 0.18991580769356028]}, {'': [0.12663081768653933, 0.13263703542758323], 'false': [6.1679056923619804e-18, 0.1471926838590987], 'false,false': [0.1373692917676497, 0.17032394703491613], 'false,false,true': [0.14603729817214495, 0.1155555555555556], 'true': [0.12398791935703952, 0.19537157940025857], 'true,false': [0.21809319231851462, 0.166170548183268], 'true,false,true': [0.20635445625313983, 0.25719626526499406], 'true,false,false': [0.16836734693877556, 0.15999999999999998]}, {'': [0.12544862474332863, 0.1320723765890956], 'false': [7.709882115452476e-18, 0.14701011759485652], 'false,false': [0.13724158797074365, 0.1702918476350401], 'false,false,true': [0.14593595310027088, 0.11565562185794204], 'true': [0.12285234322176528, 0.1950929355106046], 'true,false': [0.2177084944609695, 0.16616925594950702], 'true,false,true': [0.25708560539486236, 0.18827064394268006], 'true,false,false': [0.1683673469387755, 0.16]}, {'': [0.1245638146941907, 0.13164190472398768], 'false': [0.12783521654299315, 0.13971366966745574], 'false,true': [1.982541115402065e-18, 0.1359023716797196], 'false,true,false': [0.14405081330400132, 0.11565451369385772], 'true': [0.12198059018736752, 0.1949443914500953], 'true,false': [0.21751596574663853, 0.1661684256225663], 'true,false,true': [0.20560217635533604, 0.260314672991895], 'true,false,false': [0.1683673469387755, 0.15999999999999998]}, {'': [0.12389027654159973, 0.13150268046730693], 'false': [0.12765305630770504, 0.13967827148271664], 'false,true': [2.9738116731030977e-18, 0.13582708466456442], 'false,true,false': [0.14398391327278734, 0.11571657302023165], 'true': [0.1213063904683849, 0.19485831645564158], 'true,false': [0.21740931487088444, 0.16616783643490052], 'true,false,true': [0.2584204873629607, 0.18744447395631272], 'true,false,false': [0.16836734693877548, 0.16]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(B, H), haswordauthor(I, H).;true;true
4;false,true;haswordtitle(J, H).;true;true
4;false,false;haswordvenue(A, K), haswordauthor(L, K).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(A, H), haswordauthor(I, H).;true;true
5;false,false;haswordvenue(B, J), haswordauthor(K, J).;true;true
5;false,false,true;haswordtitle(L, J).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(A, J), haswordauthor(K, J).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(A, J), haswordauthor(K, J).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(A, J), haswordtitle(K, J).;true;true
8;false,true;haswordauthor(L, J).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(A, J), haswordtitle(K, J).;true;true
9;false,true;haswordauthor(L, J).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.6433474910561866;  // std dev = 9.666, 554.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=435 */
%   | | | else return -0.11102914709226816;  // std dev = 4.177, 584.000 (wgt'ed) examples reached here.  /* #neg=566 #pos=18 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.14386322081379807;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | | else return 0.2823913593419366;  // std dev = 2.839, 33.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=14 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.5423594614153018;  // std dev = 2.026, 19.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
%   | | | else return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.643863220813798;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return 0.020648935099511823;  // std dev = 0.369, 160.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=26 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.5459224822218625;  // std dev = 9.666, 554.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=435 */
%   | | | else return -0.09804335916272296;  // std dev = 4.177, 584.000 (wgt'ed) examples reached here.  /* #neg=566 #pos=18 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.12543301544918353;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | | else return 0.2444284950558592;  // std dev = 2.839, 33.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=14 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.29666526514230396;  // std dev = 1.583, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return 0.4961278138360791;  // std dev = 1.672, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.5463443246618189;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.5580193346218546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return 0.018116717074911526;  // std dev = 0.369, 160.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=26 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.43330586901119533;  // std dev = 9.666, 554.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=435 */
%   | | | else return -0.08962524083027762;  // std dev = 4.108, 585.000 (wgt'ed) examples reached here.  /* #neg=567 #pos=18 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.1896375468989591;  // std dev = 3.352, 49.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=18 */
%   | | | else return 0.2812866503410098;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.3790404797405395;  // std dev = 2.005, 19.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
%   | | | else return 0.16916287028262153;  // std dev = 1.109, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.43360774241258027;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.4419486100244409;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return 0.015864186153868354;  // std dev = 0.369, 160.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=26 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.3294386023025125;  // std dev = 9.666, 554.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=435 */
%   | | | else return -0.08046218750438945;  // std dev = 4.112, 585.000 (wgt'ed) examples reached here.  /* #neg=567 #pos=18 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.16076972457884153;  // std dev = 3.352, 49.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=18 */
%   | | | else return 0.22946176084268743;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.18320373728194805;  // std dev = 1.589, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return 0.31672921836202406;  // std dev = 1.646, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.3296468796614062;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.33541139495094313;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return 0.013867891990252896;  // std dev = 0.369, 160.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=26 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0853209188426023;  // std dev = 0.357, 1,192.000 (wgt'ed) examples reached here.  /* #neg=719 #pos=473 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.22652023053331952;  // std dev = 1.988, 19.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
%   | | | else return 0.09485998438363195;  // std dev = 1.124, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.24742386133742827;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.25176837314502193;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return -0.15039552383636126;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, B) )
%   | | | then return 0.03270306771293463;  // std dev = 3.259, 71.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=13 */
%   | | | else return -0.017062190503027968;  // std dev = 1.862, 30.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
%   | | else return 0.06911667128558979;  // std dev = 0.414, 41.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=9 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07079562252721149;  // std dev = 0.354, 1,192.000 (wgt'ed) examples reached here.  /* #neg=719 #pos=473 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.10158307955742289;  // std dev = 1.597, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return 0.18519925545643923;  // std dev = 1.631, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | else return 0.187778462071614;  // std dev = 0.408, 19.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return -0.13217104110589648;  // std dev = 1.05e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.27394926728391994;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return -0.15703208995053353;  // std dev = 0.005, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return -3.633107760627486E-4;  // std dev = 3.444, 92.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=14 */
%   | | | else return 0.07132721215567255;  // std dev = 2.631, 39.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=9 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05858734852772264;  // std dev = 0.352, 1,192.000 (wgt'ed) examples reached here.  /* #neg=719 #pos=473 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.13118723985608188;  // std dev = 1.980, 19.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
%   | | | else return 0.04780512059192388;  // std dev = 1.134, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.14265562644433977;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.14681359333238114;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return -0.11773368014064062;  // std dev = 1.05e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, A) )
%   | | | then return 0.025372651454604177;  // std dev = 3.237, 71.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=13 */
%   | | | else return -0.015275301084850352;  // std dev = 1.863, 30.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
%   | | else return 0.05172746000874283;  // std dev = 0.413, 41.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=9 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04838725501462874;  // std dev = 0.351, 1,192.000 (wgt'ed) examples reached here.  /* #neg=719 #pos=473 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.053594199312755095;  // std dev = 1.603, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return 0.10969431072154537;  // std dev = 1.624, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | else return 0.1115995167589194;  // std dev = 0.408, 19.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( haswordtitle(J, H) )
%   | | then return 0.23067235677069695;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return -0.13001914874280504;  // std dev = 0.042, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then return -0.10604399429993233;  // std dev = 9.13e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return -0.001941200018505432;  // std dev = 3.444, 92.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=14 */
%   | | | else return 0.05413667130308479;  // std dev = 2.631, 39.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=9 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03990208432302047;  // std dev = 0.349, 1,192.000 (wgt'ed) examples reached here.  /* #neg=719 #pos=473 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.07760970647604386;  // std dev = 1.976, 19.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
%   | | | else return 0.021711011170380646;  // std dev = 1.141, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.08773143571168374;  // std dev = 0.408, 19.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( haswordtitle(J, H) )
%   | | then return 0.1915003612105393;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return -0.11603930516416362;  // std dev = 0.038, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then return -0.09640296811852606;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return -0.00168836301637976;  // std dev = 3.444, 92.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=14 */
%   | | | else return 0.04612509137566457;  // std dev = 2.631, 39.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=9 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.032866324356891984;  // std dev = 0.348, 1,192.000 (wgt'ed) examples reached here.  /* #neg=719 #pos=473 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.02712987360376502;  // std dev = 1.608, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return 0.0672640369275275;  // std dev = 1.620, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.06850693092905197;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.07304664845924642;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return -0.08794262018676613;  // std dev = 0.005, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, A) )
%   | | | then return 0.015705152526123523;  // std dev = 3.205, 71.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=13 */
%   | | | else return -0.012899282116270554;  // std dev = 1.863, 30.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
%   | | else return 0.03142864011274382;  // std dev = 0.412, 41.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=9 */


Results
   AUC ROC   = 0.836325
   AUC PR    = 0.658728
   CLL	      = -0.447286
   Precision = 0.70892 at threshold = 0.5
   Recall    = 0.820652
   F1        = 0.760705


Total learning time: 1749.1987566947937 seconds
Total inference time: 3.389 seconds
AUC ROC: 0.836325


Results scoring model
   AUC ROC   = 0.899066
   AUC PR    = 0.772446
   CLL	      = -0.40802
   Precision = 0.782095 at threshold = 0.5
   Recall    = 0.875236
   F1        = 0.826048


Total scoring time: 21.363 seconds
Refined model CLL: -0.40802


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.836325
   AUC PR    = 0.658728
   CLL	      = -0.447286
   Precision = 0.70892 at threshold = 0.5
   Recall    = 0.820652
   F1        = 0.760705


Total learning time: 3578.7099388027186 seconds
Total inference time: 3.389 seconds
AUC ROC: 0.836325
Total revision time: 3578.7099388027186
Best scored revision CLL: -0.40802


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:59:51
{'AUC ROC': 0.836325, 'AUC PR': 0.658728, 'CLL': -0.447286, 'Precision': [0.70892, 0.5], 'Recall': 0.820652, 'F1': 0.760705, 'Learning time': 3578.7099388027186, 'Inference time': 3.389, 'parameter_0.2': {'AUC ROC': 0.836325, 'AUC PR': 0.658728, 'CLL': -0.447064, 'Precision': [0.70892, 0.5], 'Recall': 0.820652, 'F1': 0.760705, 'Learning time': 1786.7211821079254, 'Inference time': 3.526}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.6433474910561866;  // std dev = 9.666, 554.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=435 */
%   | | | else return -0.11102914709226816;  // std dev = 4.177, 584.000 (wgt'ed) examples reached here.  /* #neg=566 #pos=18 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.14386322081379807;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | | else return 0.2823913593419366;  // std dev = 2.839, 33.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=14 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.5423594614153018;  // std dev = 2.026, 19.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
%   | | | else return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.643863220813798;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return 0.020648935099511823;  // std dev = 0.369, 160.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=26 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.5459224822218625;  // std dev = 9.666, 554.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=435 */
%   | | | else return -0.09804335916272296;  // std dev = 4.177, 584.000 (wgt'ed) examples reached here.  /* #neg=566 #pos=18 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.12543301544918353;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | | else return 0.2444284950558592;  // std dev = 2.839, 33.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=14 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.29666526514230396;  // std dev = 1.583, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return 0.4961278138360791;  // std dev = 1.672, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.5463443246618189;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.5580193346218546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return 0.018116717074911526;  // std dev = 0.369, 160.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=26 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.43330586901119533;  // std dev = 9.666, 554.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=435 */
%   | | | else return -0.08962524083027762;  // std dev = 4.108, 585.000 (wgt'ed) examples reached here.  /* #neg=567 #pos=18 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.1896375468989591;  // std dev = 3.352, 49.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=18 */
%   | | | else return 0.2812866503410098;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.3790404797405395;  // std dev = 2.005, 19.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
%   | | | else return 0.16916287028262153;  // std dev = 1.109, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.43360774241258027;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.4419486100244409;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return 0.015864186153868354;  // std dev = 0.369, 160.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=26 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.3294386023025125;  // std dev = 9.666, 554.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=435 */
%   | | | else return -0.08046218750438945;  // std dev = 4.112, 585.000 (wgt'ed) examples reached here.  /* #neg=567 #pos=18 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.16076972457884153;  // std dev = 3.352, 49.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=18 */
%   | | | else return 0.22946176084268743;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | | then return 0.18320373728194805;  // std dev = 1.589, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return 0.31672921836202406;  // std dev = 1.646, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.3296468796614062;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.33541139495094313;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return 0.013867891990252896;  // std dev = 0.369, 160.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=26 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0853209188426023;  // std dev = 0.357, 1,192.000 (wgt'ed) examples reached here.  /* #neg=719 #pos=473 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.22652023053331952;  // std dev = 1.988, 19.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
%   | | | else return 0.09485998438363195;  // std dev = 1.124, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.24742386133742827;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.25176837314502193;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return -0.15039552383636126;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, B) )
%   | | | then return 0.03270306771293463;  // std dev = 3.259, 71.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=13 */
%   | | | else return -0.017062190503027968;  // std dev = 1.862, 30.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
%   | | else return 0.06911667128558979;  // std dev = 0.414, 41.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=9 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07079562252721149;  // std dev = 0.354, 1,192.000 (wgt'ed) examples reached here.  /* #neg=719 #pos=473 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.10158307955742289;  // std dev = 1.597, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return 0.18519925545643923;  // std dev = 1.631, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | else return 0.187778462071614;  // std dev = 0.408, 19.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return -0.13217104110589648;  // std dev = 1.05e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.27394926728391994;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return -0.15703208995053353;  // std dev = 0.005, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return -3.633107760627486E-4;  // std dev = 3.444, 92.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=14 */
%   | | | else return 0.07132721215567255;  // std dev = 2.631, 39.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=9 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05858734852772264;  // std dev = 0.352, 1,192.000 (wgt'ed) examples reached here.  /* #neg=719 #pos=473 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.13118723985608188;  // std dev = 1.980, 19.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
%   | | | else return 0.04780512059192388;  // std dev = 1.134, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.1437498282569822;  // std dev = 0.408, 19.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return -0.11773368014064062;  // std dev = 1.05e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.23466903597771324;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return -0.13734672478919163;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return -3.1635492154020523E-4;  // std dev = 3.444, 92.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=14 */
%   | | | else return 0.06153418926113629;  // std dev = 2.631, 39.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=9 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04838725501462874;  // std dev = 0.351, 1,192.000 (wgt'ed) examples reached here.  /* #neg=719 #pos=473 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.053594199312755095;  // std dev = 1.603, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return 0.10969431072154537;  // std dev = 1.624, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.11037943115839623;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.11500458766776396;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return -0.10604399429993233;  // std dev = 1.18e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, A) )
%   | | | then return 0.021961778588179777;  // std dev = 3.219, 71.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=13 */
%   | | | else return -0.015235279813928308;  // std dev = 1.863, 30.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
%   | | else return 0.044095013400494064;  // std dev = 0.413, 41.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=9 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03990208432302047;  // std dev = 0.349, 1,192.000 (wgt'ed) examples reached here.  /* #neg=719 #pos=473 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.07760970647604386;  // std dev = 1.976, 19.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
%   | | | else return 0.021711011170380646;  // std dev = 1.141, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.08666100003764662;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.09073242186326531;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return -0.09640296811852606;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, A) )
%   | | | then return 0.018984527157059332;  // std dev = 3.219, 71.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=13 */
%   | | | else return -0.013318416725521849;  // std dev = 1.863, 30.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
%   | | else return 0.037631593359798016;  // std dev = 0.413, 41.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=9 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.032866324356891984;  // std dev = 0.348, 1,192.000 (wgt'ed) examples reached here.  /* #neg=719 #pos=473 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.02712987360376502;  // std dev = 1.608, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return 0.0672640369275275;  // std dev = 1.620, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | else return 0.06970597486627698;  // std dev = 0.408, 19.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( haswordtitle(J, H) )
%   | | then return 0.1879425130307665;  // std dev = 0.495, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return -0.1151986586143275;  // std dev = 0.047, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return -0.008000569614455623;  // std dev = 0.348, 98.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=14 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then return -0.08832587742924428;  // std dev = 6.45e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.04042848031130919;  // std dev = 2.631, 39.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=9 */


Results
   AUC ROC   = 0.836325
   AUC PR    = 0.658728
   CLL	      = -0.447277
   Precision = 0.70892 at threshold = 0.5
   Recall    = 0.820652
   F1        = 0.760705


Total learning time: 1724.0346291065216 seconds
Total inference time: 3.396 seconds
AUC ROC: 0.836325


Dataset: 3_imdb_cora, Fold: 1, Type: Scratch (RDN-B), Time: 01:28:39
{'AUC ROC': 0.836325, 'AUC PR': 0.658728, 'CLL': -0.447277, 'Precision': [0.70892, 0.5], 'Recall': 0.820652, 'F1': 0.760705, 'Learning time': 1724.0346291065216, 'Inference time': 3.396}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.6545453314959039;  // std dev = 13.416, 1,110.000 (wgt'ed) examples reached here.  /* #neg=226 #pos=884 */
%   | | | else return -0.11289024718328365;  // std dev = 5.746, 1,174.000 (wgt'ed) examples reached here.  /* #neg=1,140 #pos=34 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.09070707463439608;  // std dev = 2.770, 43.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=10 */
%   | | | else return 0.3025933795439555;  // std dev = 4.216, 72.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=32 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.591482268432845;  // std dev = 2.422, 30.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=22 */
%   | | | else return 0.30259337954395676;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.5538011090125557;  // std dev = 2.207, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return 0.01555634250691961;  // std dev = 0.364, 324.000 (wgt'ed) examples reached here.  /* #neg=273 #pos=51 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.5550761109600649;  // std dev = 13.416, 1,110.000 (wgt'ed) examples reached here.  /* #neg=226 #pos=884 */
%   | | | else return -0.09969567825554274;  // std dev = 5.746, 1,174.000 (wgt'ed) examples reached here.  /* #neg=1,140 #pos=34 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.07930269045009507;  // std dev = 2.770, 43.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=10 */
%   | | | else return 0.26163180867521313;  // std dev = 4.216, 72.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=32 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.7660245645740956;  // std dev = 0.022, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.4301543335223308;  // std dev = 2.877, 37.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=24 */
%   | | | else return 0.48465748236606004;  // std dev = 2.383, 28.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.019881064409346633;  // std dev = 0.370, 220.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=36 */
%   | else return 4.7547000375225624E-4;  // std dev = 0.351, 104.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=15 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.4398483960549423;  // std dev = 13.416, 1,110.000 (wgt'ed) examples reached here.  /* #neg=226 #pos=884 */
%   | | | else return -0.09312294392118917;  // std dev = 5.427, 1,172.000 (wgt'ed) examples reached here.  /* #neg=1,141 #pos=31 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.17100108798460384;  // std dev = 3.040, 45.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=13 */
%   | | | else return 0.2192721473492705;  // std dev = 4.216, 72.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=32 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.6036245837167438;  // std dev = 0.029, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.3482656788133049;  // std dev = 2.871, 37.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=24 */
%   | | | else return 0.3882553569687018;  // std dev = 2.381, 28.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return -0.07692244929733257;  // std dev = 0.253, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */
%   | else return 0.020697458128696784;  // std dev = 0.372, 295.000 (wgt'ed) examples reached here.  /* #neg=246 #pos=49 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.3339580367413009;  // std dev = 13.416, 1,110.000 (wgt'ed) examples reached here.  /* #neg=226 #pos=884 */
%   | | | else return -0.08366765631989534;  // std dev = 5.431, 1,172.000 (wgt'ed) examples reached here.  /* #neg=1,141 #pos=31 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.1636305769138233;  // std dev = 5.000, 109.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=41 */
%   | | | else return 0.23429080130242846;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.32390314165287837;  // std dev = 2.478, 32.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=23 */
%   | | | else return 0.10248594325153489;  // std dev = 1.424, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.28409672507324824;  // std dev = 2.148, 22.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=15 */
%   | | | else return 0.39225052034856517;  // std dev = 0.914, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return 0.010435720605806617;  // std dev = 0.364, 324.000 (wgt'ed) examples reached here.  /* #neg=273 #pos=51 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.08303105500701138;  // std dev = 0.344, 2,282.000 (wgt'ed) examples reached here.  /* #neg=1,367 #pos=915 */
%   | | else return 0.13916745560815946;  // std dev = 0.481, 117.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=45 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.374609635047188;  // std dev = 0.044, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.20267384770977448;  // std dev = 2.876, 38.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=25 */
%   | | | else return 0.22465930118982275;  // std dev = 2.333, 27.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=19 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, B) )
%   | | | then return 0.05735700610102561;  // std dev = 4.269, 112.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=23 */
%   | | | else return -0.07343829809654268;  // std dev = 2.353, 79.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=6 */
%   | | else return 0.0912298648456986;  // std dev = 0.428, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
%   | else return -0.0030026509459908112;  // std dev = 0.351, 104.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=15 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07117805067536084;  // std dev = 0.349, 2,399.000 (wgt'ed) examples reached here.  /* #neg=1,439 #pos=960 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.1929136752444623;  // std dev = 2.472, 32.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=23 */
%   | | | else return 0.027651682154303914;  // std dev = 1.424, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else return 0.1767054651733026;  // std dev = 0.434, 29.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=21 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.07212247989536497;  // std dev = 0.252, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( haswordtitle(M, K) )
%   | | | then return 0.07567206152653795;  // std dev = 1.748, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return -0.007399220925636734;  // std dev = 0.929, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.00590032168949898;  // std dev = 4.841, 180.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=28 */
%   | | | else return 0.025084703304195;  // std dev = 3.629, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05895440875645565;  // std dev = 0.347, 2,399.000 (wgt'ed) examples reached here.  /* #neg=1,439 #pos=960 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.33719361415299937;  // std dev = 0.184, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.10026586215503133;  // std dev = 2.831, 37.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=24 */
%   | | | else return 0.1306843011427304;  // std dev = 2.337, 28.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.06360919033741233;  // std dev = 0.252, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( haswordtitle(M, K) )
%   | | | then return 0.0659571949310554;  // std dev = 1.748, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return -0.006457094776905719;  // std dev = 0.929, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.01691372937597548;  // std dev = 4.966, 175.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=30 */
%   | | | else return -7.379689139180751E-4;  // std dev = 3.455, 95.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=14 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04873852237008049;  // std dev = 0.346, 2,399.000 (wgt'ed) examples reached here.  /* #neg=1,439 #pos=960 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.2157522853131075;  // std dev = 0.058, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.0826983895393214;  // std dev = 2.861, 37.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=24 */
%   | | | else return 0.09815689493651143;  // std dev = 2.323, 28.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.056465663441891994;  // std dev = 0.252, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | | then return 0.006539536991593148;  // std dev = 4.729, 166.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=27 */
%   | | | else return 0.07590596006410763;  // std dev = 2.305, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
%   | | else if ( haswordvenue(B, P), haswordauthor(Q, P) )
%   | | | then return 0.054419609789503796;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -6.448829889166849E-4;  // std dev = 3.455, 95.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=14 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04023565637682172;  // std dev = 0.344, 2,399.000 (wgt'ed) examples reached here.  /* #neg=1,439 #pos=960 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.12130684574787906;  // std dev = 2.380, 30.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=22 */
%   | | | else return -0.10119492950532193;  // std dev = 1.490, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.062432722929969715;  // std dev = 2.132, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return 0.14151738315076132;  // std dev = 0.913, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then return -0.050403006116788766;  // std dev = 0.253, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then if ( haswordtitle(N, P), haswordauthor(Q, P) )
%   | | | then return 0.005676648265740008;  // std dev = 4.729, 166.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=27 */
%   | | | else return 0.06515619336636538;  // std dev = 2.305, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
%   | | else return 0.0018405577409232208;  // std dev = 0.357, 100.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=15 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.033180047366219545;  // std dev = 0.343, 2,399.000 (wgt'ed) examples reached here.  /* #neg=1,439 #pos=960 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.22459151200345376;  // std dev = 0.160, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.04083030465362285;  // std dev = 2.821, 37.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=24 */
%   | | | else return 0.057697761513704524;  // std dev = 2.322, 28.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordauthor(L, I) )
%   | | | then return 0.0553770155814351;  // std dev = 1.747, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return -0.006083232457081708;  // std dev = 4.595, 173.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=25 */
%   | | else return 0.0554972498715168;  // std dev = 0.428, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return -0.10948056260861963;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.0016081157863831283;  // std dev = 0.357, 100.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=15 */


Results
   AUC ROC   = 0.834731
   AUC PR    = 0.654664
   CLL	      = -0.445183
   Precision = 0.705607 at threshold = 0.5
   Recall    = 0.820652
   F1        = 0.758794


Total learning time: 3712.403826236725 seconds
Total inference time: 3.53 seconds
AUC ROC: 0.834731


Results scoring model
   AUC ROC   = 0.903046
   AUC PR    = 0.782577
   CLL	      = -0.400725
   Precision = 0.7905 at threshold = 0.5
   Recall    = 0.880076
   F1        = 0.832887


Total scoring time: 46.38 seconds
Parameter learned model CLL: -0.400725


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,true': 'samebib(E, F), venue(F, B)', 'true,true,false': 'title(G, D), venue(G, B)', 'true,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'true,false,true': 'haswordtitle(I, J), haswordauthor(K, J)', 'true,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true,true': [13.416, 226, 884], 'true,true,true,false': [5.746, 1, 34], 'true,true,false,true': [2.77, 33, 10], 'true,true,false,false': [4.216, 40, 32], 'true,false,true,true': [2.422, 8, 22], 'true,false,true,false': [1.491, 5, 4], 'true,false,false,true': [2.207, 7, 16], 'true,false,false,false': [0.926, 1, 6], 'false': [0.364, 273, 51]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,true': 'samebib(E, F), venue(F, B)', 'true,true,false': 'title(G, D), venue(G, B)', 'true,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true,true': [13.416, 226, 884], 'true,true,true,false': [5.746, 1, 34], 'true,true,false,true': [2.77, 33, 10], 'true,true,false,false': [4.216, 40, 32], 'true,false,true': [0.022, 0, 4], 'true,false,false,true': [2.877, 13, 24], 'true,false,false,false': [2.383, 8, 20], 'false,true': [0.37, 184, 36], 'false,false': [0.351, 89, 15]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,true': 'samebib(E, F), venue(F, A)', 'true,true,false': 'title(G, D), venue(G, A)', 'true,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(A, L), haswordauthor(M, L)'}, {'true,true,true,true': [13.416, 226, 884], 'true,true,true,false': [5.427, 1, 31], 'true,true,false,true': [3.04, 32, 13], 'true,true,false,false': [4.216, 40, 32], 'true,false,true': [0.029, 0, 4], 'true,false,false,true': [2.871, 13, 24], 'true,false,false,false': [2.381, 8, 20], 'false,true': [0.253, 27, 2], 'false,false': [0.372, 246, 49]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,true': 'samebib(E, F), venue(F, A)', 'true,true,false': 'haswordtitle(D, G), haswordauthor(H, G)', 'true,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'true,false,true': 'haswordtitle(J, K), haswordauthor(L, K)', 'true,false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true,true,true': [13.416, 226, 884], 'true,true,true,false': [5.431, 1, 31], 'true,true,false,true': [5.0, 68, 41], 'true,true,false,false': [1.414, 4, 4], 'true,false,true,true': [2.478, 9, 23], 'true,false,true,false': [1.424, 4, 4], 'true,false,false,true': [2.148, 7, 15], 'true,false,false,false': [0.914, 1, 6], 'false': [0.364, 273, 51]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,false': 'haswordvenue(B, F), haswordauthor(G, F)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordauthor(M, L)', 'false,true,true': 'author(N, M), venue(N, B)'}, {'true,true,true': [0.344, 1, 915], 'true,true,false': [0.481, 72, 45], 'true,false,true': [0.044, 0, 4], 'true,false,false,true': [2.876, 13, 25], 'true,false,false,false': [2.333, 8, 19], 'false,true,true,true': [4.269, 89, 23], 'false,true,true,false': [2.353, 73, 6], 'false,true,false': [0.428, 22, 7], 'false,false': [0.351, 89, 15]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false,false,true': 'haswordtitle(M, K)', 'false,false,false': 'haswordvenue(A, N), haswordtitle(P, N)'}, {'true,true': [0.349, 1, 960], 'true,false,true,true': [2.472, 9, 23], 'true,false,true,false': [1.424, 4, 4], 'true,false,false': [0.434, 8, 21], 'false,true': [0.252, 27, 2], 'false,false,true,true': [1.748, 14, 4], 'false,false,true,false': [0.929, 6, 1], 'false,false,false,true': [4.841, 152, 28], 'false,false,false,false': [3.629, 74, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false,false,true': 'haswordtitle(M, K)', 'false,false,false': 'haswordvenue(B, N), haswordtitle(P, N)'}, {'true,true': [0.347, 1, 960], 'true,false,true': [0.184, 0, 4], 'true,false,false,true': [2.831, 13, 24], 'true,false,false,false': [2.337, 8, 20], 'false,true': [0.252, 27, 2], 'false,false,true,true': [1.748, 14, 4], 'false,false,true,false': [0.929, 6, 1], 'false,false,false,true': [4.966, 145, 30], 'false,false,false,false': [3.455, 81, 14]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,false,true': 'haswordtitle(L, M), haswordauthor(N, M)', 'false,false,false': 'haswordvenue(B, P), haswordauthor(Q, P)'}, {'true,true': [0.346, 1, 960], 'true,false,true': [0.058, 0, 4], 'true,false,false,true': [2.861, 13, 24], 'true,false,false,false': [2.323, 8, 20], 'false,true': [0.252, 27, 2], 'false,false,true,true': [4.729, 139, 27], 'false,false,true,false': [2.305, 22, 7], 'false,false,false,true': [0.894, 4, 1], 'false,false,false,false': [3.455, 81, 14]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,false': 'haswordvenue(B, M), haswordtitle(N, M)', 'false,false,true': 'haswordtitle(N, P), haswordauthor(Q, P)'}, {'true,true': [0.344, 1, 960], 'true,false,true,true': [2.38, 8, 22], 'true,false,true,false': [1.49, 5, 4], 'true,false,false,true': [2.132, 7, 16], 'true,false,false,false': [0.913, 1, 6], 'false,true': [0.253, 27, 2], 'false,false,true,true': [4.729, 139, 27], 'false,false,true,false': [2.305, 22, 7], 'false,false,false': [0.357, 85, 15]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordauthor(L, K)', 'false,true,true': 'haswordauthor(L, I)', 'false,false': 'haswordvenue(A, M), haswordauthor(N, M)'}, {'true,true': [0.343, 1, 960], 'true,false,true': [0.16, 0, 4], 'true,false,false,true': [2.821, 13, 24], 'true,false,false,false': [2.322, 8, 20], 'false,true,true,true': [1.747, 14, 4], 'false,true,true,false': [4.595, 148, 25], 'false,true,false': [0.428, 22, 7], 'false,false,true': [0.0, 4, 0], 'false,false,false': [0.357, 85, 15]}]]
[{'': [0.24161454625694317, 0.1326303155006869], 'true': [0.240033319427096, 0.2117202268431003], 'true,true': [0.24038157777705257, 0.23183364839319584], 'true,true,true': [0.16214917620325067, 0.02812208875435758], 'true,true,false': [0.17847485127095739, 0.24691358024691512], 'true,false': [0.22222222222222351, 0.19555555555555645], 'true,false,true': [0.19555555555555645, 0.2469135802469134], 'true,false,false': [0.21172022684309977, 0.12244897959183662]}, {'': [0.20370150153678637, 0.13263031550068521], 'true': [0.20176208565390852, 0.20820801343449558], 'true,false': [0.00012309450796832433, 0.21535592145266938], 'true,false,false': [0.2236287349440579, 0.20273303626745456], 'true,true': [0.20035521239975596, 0.22910591464222624], 'true,true,false': [0.1784748512709575, 0.24691358024691334], 'true,true,true': [0.1621491762032411, 0.02812208875435542], 'false': [0.13685950413223077, 0.12342825443786924]}, {'': [0.1684534555216312, 0.1326112247178533], 'true': [0.16615017523493023, 0.20505764284772401], 'true,false': [0.0002153763287218724, 0.21437595112864677], 'true,false,false': [0.22270280507678913, 0.20246230916096783], 'true,true': [0.16274075831559348, 0.23151066610840015], 'true,true,false': [0.20543209876543148, 0.24691358024691443], 'true,true,true': [0.16214917620323208, 0.02513063379986194], 'false': [0.06416418905065736, 0.13848695418857104]}, {'': [0.14269785878258182, 0.1324330827701201], 'true': [0.14014935063079267, 0.20300994611681167], 'true,false': [0.21200862308315535, 0.1900557595012394], 'true,false,true': [0.1918441723625045, 0.253445965367439], 'true,false,false': [0.20975321776780798, 0.11927569121223046], 'true,true': [0.1353677494472914, 0.23112802613007918], 'true,true,false': [0.22940153449382641, 0.25], 'true,true,true': [0.16214917620322492, 0.025166780116324793]}, {'': [0.12669159041617345, 0.1324316992398499], 'false': [0.13664530981007852, 0.12330176639265031], 'false,true': [0.12856951342875395, 0.18311533888228335], 'false,true,true': [0.16275394650726607, 0.0700739358388855], 'true': [0.12406004790965039, 0.20034493519652452], 'true,false': [0.0004883710082696502, 0.2111072826156344], 'true,false,false': [0.21769609162242162, 0.201551564224882], 'true,true': [0.1184288259089223, 0.23089533619437194]}, {'': [0.12448765390986649, 0.13168578667008135], 'false': [0.0636962527576439, 0.13767924223143527], 'false,false': [0.15819381836916202, 0.13564335692935908], 'false,false,true': [0.1698268223156862, 0.123311776312389], 'false,false,false': [0.13017990255107934, 0.1463249053539559], 'true': [0.12206636683637885, 0.19975714235935382], 'true,false': [0.20780896219530015, 0.1884867047256394], 'true,false,true': [0.190903928478202, 0.2535798759755874]}, {'': [0.12285645563242348, 0.13146595089383664], 'false': [0.06372076516889869, 0.13759114836310218], 'false,false': [0.1577444470301917, 0.13562141763302166], 'false,false,true': [0.16966842449300057, 0.12330723356244047], 'false,false,false': [0.14091604321945667, 0.12566620838420237], 'true': [0.12054510759033814, 0.19880321400830409], 'true,false': [0.00846937523856943, 0.20761187009022328], 'true,false,false': [0.21667573751427352, 0.1951079180480338]}, {'': [0.12164191066904378, 0.13129015859357734], 'false': [0.06374191898689083, 0.1375126864259131], 'false,false': [0.14255987252878394, 0.12752691508416525], 'false,false,true': [0.1347437214999583, 0.18320448470819767], 'false,false,false': [0.15999999999999998, 0.12566620043350568], 'true': [0.11938655356092043, 0.19782186496039517], 'true,false': [0.0008424614388549065, 0.2090175493398905], 'true,false,false': [0.22127337656730908, 0.19268632262282215]}, {'': [0.12074535001401274, 0.1310890214976048], 'false': [0.06376029726039749, 0.13737879181029122], 'false,false': [0.14239406409641484, 0.12749270134685484], 'false,false,true': [0.13473759657285522, 0.1832090607612809], 'true': [0.11849779523342187, 0.19773330790819937], 'true,false': [0.21098290517514834, 0.18044136306413477], 'true,false,true': [0.188805504083195, 0.24682523702717843], 'true,false,false': [0.19766671483141074, 0.11904875134955979]}, {'': [0.12000316045515494, 0.13094246127217957], 'false': [0.13464519130126495, 0.12304551491986852], 'false,true': [0.12686075055964602, 0.18321304510638287], 'false,true,true': [0.1695015071199868, 0.12206815828293202], 'false,false': [0.0, 0.12749269342175754], 'true': [0.1178108250346097, 0.19561179932866393], 'true,false': [0.006394089195763883, 0.20545013626391642], 'true,false,false': [0.2150755794873816, 0.1925688481029309]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,false;haswordvenue(B, F), haswordauthor(G, F).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,false;haswordvenue(B, E), haswordauthor(F, E).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
9;false,false;haswordvenue(A, M), haswordauthor(N, M).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.6545453314959039;  // std dev = 13.416, 1,110.000 (wgt'ed) examples reached here.  /* #neg=226 #pos=884 */
%   | | | else return -0.11289024718328365;  // std dev = 5.746, 1,174.000 (wgt'ed) examples reached here.  /* #neg=1,140 #pos=34 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.09070707463439608;  // std dev = 2.770, 43.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=10 */
%   | | | else return 0.3025933795439555;  // std dev = 4.216, 72.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=32 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.5067975837481601;  // std dev = 2.904, 37.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=24 */
%   | | | else return 0.572434649385226;  // std dev = 2.390, 28.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return -0.07288554765910848;  // std dev = 0.253, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */
%   | else return 0.024250630014766336;  // std dev = 0.372, 295.000 (wgt'ed) examples reached here.  /* #neg=246 #pos=49 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.5550761109600649;  // std dev = 13.416, 1,110.000 (wgt'ed) examples reached here.  /* #neg=226 #pos=884 */
%   | | | else return -0.09969567825554274;  // std dev = 5.746, 1,174.000 (wgt'ed) examples reached here.  /* #neg=1,140 #pos=34 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.07930269045009507;  // std dev = 2.770, 43.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=10 */
%   | | | else return 0.26163180867521313;  // std dev = 4.216, 72.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=32 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.7492569330392229;  // std dev = 0.060, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.42340066811168936;  // std dev = 2.888, 37.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=24 */
%   | | | else return 0.4965537591451726;  // std dev = 2.387, 28.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return -0.0642426763044578;  // std dev = 0.253, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */
%   | else return 0.02127290016375716;  // std dev = 0.372, 295.000 (wgt'ed) examples reached here.  /* #neg=246 #pos=49 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.4398483960549423;  // std dev = 13.416, 1,110.000 (wgt'ed) examples reached here.  /* #neg=226 #pos=884 */
%   | | | else return -0.09312294392118917;  // std dev = 5.427, 1,172.000 (wgt'ed) examples reached here.  /* #neg=1,141 #pos=31 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.17100108798460384;  // std dev = 3.040, 45.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=13 */
%   | | | else return 0.2192721473492705;  // std dev = 4.216, 72.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=32 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.5873927998729088;  // std dev = 0.079, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.3411918325298493;  // std dev = 2.885, 37.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=24 */
%   | | | else return 0.4004935860098822;  // std dev = 2.386, 28.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return -0.0569981732687453;  // std dev = 0.253, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */
%   | else return 0.018618221460847302;  // std dev = 0.372, 295.000 (wgt'ed) examples reached here.  /* #neg=246 #pos=49 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.3339580367413009;  // std dev = 13.416, 1,110.000 (wgt'ed) examples reached here.  /* #neg=226 #pos=884 */
%   | | | else return -0.08366765631989534;  // std dev = 5.431, 1,172.000 (wgt'ed) examples reached here.  /* #neg=1,141 #pos=31 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.1636305769138233;  // std dev = 5.000, 109.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=41 */
%   | | | else return 0.23429080130242846;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then return 0.4724665818474826;  // std dev = 0.140, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.26117272993276736;  // std dev = 2.891, 38.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=25 */
%   | | | else return 0.3103487137306786;  // std dev = 2.363, 27.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=19 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return -0.05085547602717065;  // std dev = 0.253, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */
%   | else return 0.01626191649784088;  // std dev = 0.372, 295.000 (wgt'ed) examples reached here.  /* #neg=246 #pos=49 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08576884528226546;  // std dev = 0.352, 2,399.000 (wgt'ed) examples reached here.  /* #neg=1,439 #pos=960 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.26155889335203986;  // std dev = 2.377, 30.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=22 */
%   | | | else return 0.007754575332239888;  // std dev = 1.499, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else return 0.2454392646403528;  // std dev = 0.435, 30.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=22 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.0455949006884871;  // std dev = 0.253, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | | then return 0.010727436441324492;  // std dev = 4.755, 166.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=27 */
%   | | | else return 0.08945614437651309;  // std dev = 2.304, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
%   | | else if ( haswordvenue(B, P), haswordauthor(Q, P) )
%   | | | then return 0.04807683403168557;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.004554744915682975;  // std dev = 3.455, 95.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=14 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07123046713715787;  // std dev = 0.349, 2,399.000 (wgt'ed) examples reached here.  /* #neg=1,439 #pos=960 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.30180893725744573;  // std dev = 0.109, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.14169117461339137;  // std dev = 2.841, 37.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=24 */
%   | | | else return 0.18059359390350638;  // std dev = 2.383, 28.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordauthor(L, I) )
%   | | | then return 0.06891173943709329;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return -0.002545396869836456;  // std dev = 4.614, 173.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=25 */
%   | | else return 0.07756815249653921;  // std dev = 0.428, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return 0.016479239063977736;  // std dev = 0.905, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return -0.007215174675974376;  // std dev = 0.349, 98.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=14 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.059008893448644795;  // std dev = 0.347, 2,399.000 (wgt'ed) examples reached here.  /* #neg=1,439 #pos=960 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.16883633297959943;  // std dev = 2.321, 29.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=21 */
%   | | | else return -0.030853043448470115;  // std dev = 1.606, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | | else return 0.1438773505941879;  // std dev = 0.437, 29.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=21 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.05958500915041387;  // std dev = 4.254, 112.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=23 */
%   | | | else return -0.07573758124729271;  // std dev = 2.349, 79.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=6 */
%   | | else return 0.0666642135497375;  // std dev = 0.428, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return -0.10989371609801565;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -9.137047546236085E-4;  // std dev = 0.357, 100.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=15 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04879259274147217;  // std dev = 0.346, 2,399.000 (wgt'ed) examples reached here.  /* #neg=1,439 #pos=960 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.1283810456125541;  // std dev = 2.322, 29.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=21 */
%   | | | else return -0.02343359437869421;  // std dev = 1.606, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | | else return 0.10964298647792484;  // std dev = 0.437, 29.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=21 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return -0.042269778239781244;  // std dev = 0.252, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, A) )
%   | | | then return 0.17284212522786824;  // std dev = 0.817, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.02293842343017641;  // std dev = 1.793, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 8.93157828934425E-5;  // std dev = 4.831, 180.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=28 */
%   | | | else return 0.021662700241212668;  // std dev = 3.631, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.07902862082194181;  // std dev = 0.276, 76.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=34 */
%   | else if ( haswordtitle(F, C) )
%   | | then return 0.039321336412999175;  // std dev = 0.346, 2,327.000 (wgt'ed) examples reached here.  /* #neg=1,397 #pos=930 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.0565612401008999;  // std dev = 2.859, 37.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=24 */
%   | | | else return 0.07686197511671836;  // std dev = 2.314, 28.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.03816090156114288;  // std dev = 0.252, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return 0.14816794635608418;  // std dev = 0.817, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.01985040811011982;  // std dev = 1.793, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 7.760406819278315E-5;  // std dev = 4.831, 180.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=28 */
%   | | | else return 0.01878925918689755;  // std dev = 3.631, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.033195405759558094;  // std dev = 0.343, 2,399.000 (wgt'ed) examples reached here.  /* #neg=1,439 #pos=960 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.08224589008316296;  // std dev = 2.322, 29.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=21 */
%   | | | else return -0.03275151386985779;  // std dev = 1.611, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.043033221815616626;  // std dev = 2.153, 22.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=15 */
%   | | | else return 0.15591025234559133;  // std dev = 0.913, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return -0.03456670016046614;  // std dev = 0.252, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then if ( haswordtitle(M, N), haswordauthor(P, N) )
%   | | | then return 0.004803682728268607;  // std dev = 4.730, 166.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=27 */
%   | | | else return 0.056394003546951066;  // std dev = 2.306, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
%   | | else return -0.0020573301451512495;  // std dev = 0.356, 100.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=15 */


Results
   AUC ROC   = 0.836966
   AUC PR    = 0.662296
   CLL	      = -0.444407
   Precision = 0.705607 at threshold = 0.5
   Recall    = 0.820652
   F1        = 0.758794


Total learning time: 3747.0526609420776 seconds
Total inference time: 3.502 seconds
AUC ROC: 0.836966


Results scoring model
   AUC ROC   = 0.904717
   AUC PR    = 0.791707
   CLL	      = -0.400807
   Precision = 0.7905 at threshold = 0.5
   Recall    = 0.880076
   F1        = 0.832887


Total scoring time: 43.856 seconds
Refined model CLL: -0.400807


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.834731
   AUC PR    = 0.654664
   CLL	      = -0.445183
   Precision = 0.705607 at threshold = 0.5
   Recall    = 0.820652
   F1        = 0.758794


Total learning time: 7549.692487178802 seconds
Total inference time: 3.53 seconds
AUC ROC: 0.834731
Total revision time: 7549.692487178802
Best scored revision CLL: -0.400725


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 03:34:40
{'AUC ROC': 0.834731, 'AUC PR': 0.654664, 'CLL': -0.445183, 'Precision': [0.705607, 0.5], 'Recall': 0.820652, 'F1': 0.758794, 'Learning time': 7549.692487178802, 'Inference time': 3.53, 'parameter_0.4': {'AUC ROC': 0.834731, 'AUC PR': 0.654664, 'CLL': -0.445183, 'Precision': [0.705607, 0.5], 'Recall': 0.820652, 'F1': 0.758794, 'Learning time': 3712.403826236725, 'Inference time': 3.53}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.6545453314959039;  // std dev = 13.416, 1,110.000 (wgt'ed) examples reached here.  /* #neg=226 #pos=884 */
%   | | | else return -0.11289024718328365;  // std dev = 5.746, 1,174.000 (wgt'ed) examples reached here.  /* #neg=1,140 #pos=34 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.09070707463439608;  // std dev = 2.770, 43.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=10 */
%   | | | else return 0.3025933795439555;  // std dev = 4.216, 72.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=32 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.5067975837481601;  // std dev = 2.904, 37.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=24 */
%   | | | else return 0.572434649385226;  // std dev = 2.390, 28.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return -0.07288554765910848;  // std dev = 0.253, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */
%   | else return 0.024250630014766336;  // std dev = 0.372, 295.000 (wgt'ed) examples reached here.  /* #neg=246 #pos=49 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.5550761109600649;  // std dev = 13.416, 1,110.000 (wgt'ed) examples reached here.  /* #neg=226 #pos=884 */
%   | | | else return -0.09969567825554274;  // std dev = 5.746, 1,174.000 (wgt'ed) examples reached here.  /* #neg=1,140 #pos=34 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.07930269045009507;  // std dev = 2.770, 43.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=10 */
%   | | | else return 0.26163180867521313;  // std dev = 4.216, 72.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=32 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.5057667851136157;  // std dev = 2.411, 30.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=22 */
%   | | | else return 0.22787800827322424;  // std dev = 1.494, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.47750546306463015;  // std dev = 2.199, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return 0.6228323471428924;  // std dev = 0.919, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return 0.01361872819592294;  // std dev = 0.364, 324.000 (wgt'ed) examples reached here.  /* #neg=273 #pos=51 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.4398483960549423;  // std dev = 13.416, 1,110.000 (wgt'ed) examples reached here.  /* #neg=226 #pos=884 */
%   | | | else return -0.09312294392118917;  // std dev = 5.427, 1,172.000 (wgt'ed) examples reached here.  /* #neg=1,141 #pos=31 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.17100108798460384;  // std dev = 3.040, 45.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=13 */
%   | | | else return 0.2192721473492705;  // std dev = 4.216, 72.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=32 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.6383532624560303;  // std dev = 0.088, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.33727145489705124;  // std dev = 2.854, 37.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=24 */
%   | | | else return 0.39762563891964753;  // std dev = 2.379, 28.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.018446211777546122;  // std dev = 0.370, 220.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=36 */
%   | else return -0.0018415712095983501;  // std dev = 0.351, 104.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=15 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.3339580367413009;  // std dev = 13.416, 1,110.000 (wgt'ed) examples reached here.  /* #neg=226 #pos=884 */
%   | | | else return -0.08366765631989534;  // std dev = 5.431, 1,172.000 (wgt'ed) examples reached here.  /* #neg=1,141 #pos=31 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.1636305769138233;  // std dev = 5.000, 109.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=41 */
%   | | | else return 0.23429080130242846;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.32235924090322776;  // std dev = 2.393, 30.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=22 */
%   | | | else return 0.11720286274246122;  // std dev = 1.495, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.29230798285025017;  // std dev = 2.191, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return 0.39005618262020975;  // std dev = 0.913, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return 0.010443244403552335;  // std dev = 0.364, 324.000 (wgt'ed) examples reached here.  /* #neg=273 #pos=51 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08576884528226546;  // std dev = 0.352, 2,399.000 (wgt'ed) examples reached here.  /* #neg=1,439 #pos=960 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.24294063201318897;  // std dev = 2.393, 30.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=22 */
%   | | | else return 0.09090020255054691;  // std dev = 1.495, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.2207076839729914;  // std dev = 2.191, 23.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=16 */
%   | | | else return 0.2937247313026535;  // std dev = 0.914, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then return -0.06889697916063912;  // std dev = 0.253, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then if ( haswordtitle(N, P), haswordauthor(Q, P) )
%   | | | then return 0.012477136477556517;  // std dev = 4.755, 166.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=27 */
%   | | | else return 0.09120584441274536;  // std dev = 2.304, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
%   | | else return 0.002397355432682222;  // std dev = 0.357, 100.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=15 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07123046713715787;  // std dev = 0.349, 2,399.000 (wgt'ed) examples reached here.  /* #neg=1,439 #pos=960 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.3455653536551386;  // std dev = 0.100, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.15541770399113505;  // std dev = 0.457, 65.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=44 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, A) )
%   | | then return 0.18413939125450082;  // std dev = 0.818, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( haswordtitle(J, G) )
%   | | | then return 0.07044944674245267;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return -0.1422645635187796;  // std dev = 0.023, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then return -0.05586319427511466;  // std dev = 0.262, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.0042190467442360735;  // std dev = 4.857, 180.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=28 */
%   | | | else return 0.025859507231035254;  // std dev = 3.628, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.059008893448644795;  // std dev = 0.347, 2,399.000 (wgt'ed) examples reached here.  /* #neg=1,439 #pos=960 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.29184135187320925;  // std dev = 0.122, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.10402837722579165;  // std dev = 2.812, 37.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=24 */
%   | | | else return 0.13258484033608503;  // std dev = 2.371, 28.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.05410540591069228;  // std dev = 0.253, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | | then return 0.00788600900734181;  // std dev = 4.752, 166.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=27 */
%   | | | else return 0.07841202766472131;  // std dev = 2.305, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
%   | | else if ( haswordvenue(B, P), haswordauthor(Q, P) )
%   | | | then return 0.05242712659550704;  // std dev = 0.867, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.0011266430824586587;  // std dev = 3.455, 95.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=14 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04879259274147217;  // std dev = 0.346, 2,399.000 (wgt'ed) examples reached here.  /* #neg=1,439 #pos=960 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.2362359952409798;  // std dev = 0.106, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.07902120283559992;  // std dev = 2.812, 37.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=24 */
%   | | | else return 0.10089110115009747;  // std dev = 2.372, 28.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.04838452609118568;  // std dev = 0.253, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return 0.1537650752215974;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.024340539140296436;  // std dev = 1.799, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.0017642374102311076;  // std dev = 4.852, 180.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=28 */
%   | | | else return 0.021263382833024834;  // std dev = 3.629, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04028760364613191;  // std dev = 0.344, 2,399.000 (wgt'ed) examples reached here.  /* #neg=1,439 #pos=960 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.09398079344727248;  // std dev = 2.379, 30.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=22 */
%   | | | else return -0.012122077761466886;  // std dev = 1.496, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else return 0.08243317736669296;  // std dev = 0.434, 30.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=22 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return 0.055222136920462836;  // std dev = 4.258, 112.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=23 */
%   | | | else return -0.07866098573837102;  // std dev = 2.343, 79.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=6 */
%   | | else return 0.06698052896276929;  // std dev = 0.428, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
%   | else if ( haswordvenue(A, N), haswordauthor(P, N) )
%   | | then return -0.10919669579382021;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 5.252976826205508E-4;  // std dev = 0.356, 100.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=15 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0717539407543946;  // std dev = 0.274, 76.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=34 */
%   | else if ( haswordtitle(F, C) )
%   | | then return 0.032255452398624145;  // std dev = 0.345, 2,327.000 (wgt'ed) examples reached here.  /* #neg=1,397 #pos=930 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.04298633166644272;  // std dev = 2.804, 37.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=24 */
%   | | | else return 0.05863827572360268;  // std dev = 2.372, 28.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.044635532658506595;  // std dev = 0.252, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( haswordtitle(M, K) )
%   | | | then return 0.06121673434797224;  // std dev = 1.747, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return -0.026258155270119574;  // std dev = 0.891, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.0010389320341315914;  // std dev = 4.831, 180.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=28 */
%   | | | else return 0.016151874149346317;  // std dev = 3.631, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */


Results
   AUC ROC   = 0.834557
   AUC PR    = 0.65528
   CLL	      = -0.445388
   Precision = 0.705607 at threshold = 0.5
   Recall    = 0.820652
   F1        = 0.758794


Total learning time: 3527.0387001037598 seconds
Total inference time: 3.409 seconds
AUC ROC: 0.834557


Dataset: 3_imdb_cora, Fold: 1, Type: Scratch (RDN-B), Time: 04:33:31
{'AUC ROC': 0.834557, 'AUC PR': 0.65528, 'CLL': -0.445388, 'Precision': [0.705607, 0.5], 'Recall': 0.820652, 'F1': 0.758794, 'Learning time': 3527.0387001037598, 'Inference time': 3.409}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.25624086918450284;  // std dev = 0.490, 3,459.000 (wgt'ed) examples reached here.  /* #neg=2,082 #pos=1,377 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.03275210970268697;  // std dev = 3.013, 63.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=11 */
%   | | | else return 0.307690219503183;  // std dev = 5.194, 109.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=49 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.5166855204653651;  // std dev = 3.036, 41.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=27 */
%   | | | else return 0.3126943896449669;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.5768989350995116;  // std dev = 2.543, 32.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=23 */
%   | | | else return 0.7867203636709409;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.036720363670940934;  // std dev = 0.383, 308.000 (wgt'ed) examples reached here.  /* #neg=253 #pos=55 */
%   | else return 0.048938408783722076;  // std dev = 0.393, 152.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=29 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.2221024619915506;  // std dev = 0.490, 3,459.000 (wgt'ed) examples reached here.  /* #neg=2,082 #pos=1,377 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.028718259987384094;  // std dev = 3.013, 63.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=11 */
%   | | | else return 0.2659659893177112;  // std dev = 5.194, 109.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=49 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.7710621290604822;  // std dev = 0.043, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.38218203288348895;  // std dev = 3.427, 49.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=29 */
%   | | | else return 0.5338289257822508;  // std dev = 2.755, 44.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=34 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then return -0.046955046484477486;  // std dev = 0.300, 40.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=4 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.03736551888941525;  // std dev = 0.387, 283.000 (wgt'ed) examples reached here.  /* #neg=231 #pos=52 */
%   | | else return 0.056466211667609845;  // std dev = 0.403, 137.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.1875491350813599;  // std dev = 0.490, 3,459.000 (wgt'ed) examples reached here.  /* #neg=2,082 #pos=1,377 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.025103379480055473;  // std dev = 3.013, 63.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=11 */
%   | | | else return 0.2227192960387043;  // std dev = 5.194, 109.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=49 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.36343720156201226;  // std dev = 3.011, 41.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=27 */
%   | | | else return 0.20576433277267678;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.38284620681941617;  // std dev = 2.538, 32.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=23 */
%   | | | else return 0.5420925801645123;  // std dev = 0.961, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return -0.04116585405123295;  // std dev = 0.300, 40.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=4 */
%   | else return 0.038040411449499614;  // std dev = 0.393, 420.000 (wgt'ed) examples reached here.  /* #neg=340 #pos=80 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.15468806716515068;  // std dev = 0.490, 3,459.000 (wgt'ed) examples reached here.  /* #neg=2,082 #pos=1,377 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.021883331394517376;  // std dev = 3.013, 63.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=11 */
%   | | | else return 0.18131188495327857;  // std dev = 5.194, 109.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=49 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.556318880769755;  // std dev = 0.169, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.23712666191625187;  // std dev = 3.394, 49.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=29 */
%   | | | else return 0.32600363053073583;  // std dev = 2.736, 45.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=35 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then return 0.024167308263882883;  // std dev = 0.383, 308.000 (wgt'ed) examples reached here.  /* #neg=253 #pos=55 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.039251726149190265;  // std dev = 0.397, 147.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=29 */
%   | | else return -0.15560959628071153;  // std dev = 0.021, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1252026927582678;  // std dev = 0.488, 3,464.000 (wgt'ed) examples reached here.  /* #neg=2,092 #pos=1,372 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.0028550796003345424;  // std dev = 3.404, 58.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
%   | | | else return 0.14426830683631428;  // std dev = 5.194, 109.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=49 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.22026844899924175;  // std dev = 2.986, 41.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=27 */
%   | | | else return 0.1143071832842657;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.21201329703034236;  // std dev = 2.538, 32.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=23 */
%   | | | else return 0.3250499642498595;  // std dev = 0.961, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return -0.03924972039942774;  // std dev = 0.300, 40.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=4 */
%   | else return 0.02939218338211538;  // std dev = 0.393, 420.000 (wgt'ed) examples reached here.  /* #neg=340 #pos=80 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.09996166984164695;  // std dev = 0.489, 3,459.000 (wgt'ed) examples reached here.  /* #neg=2,082 #pos=1,377 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.001864427205411282;  // std dev = 3.013, 63.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=11 */
%   | | | else return 0.11284335089876116;  // std dev = 5.194, 109.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=49 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.3659908162152136;  // std dev = 0.169, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.13345778321702903;  // std dev = 3.387, 49.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=29 */
%   | | | else return 0.18604933165901782;  // std dev = 2.728, 45.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=35 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, B) )
%   | | then return -0.16253223937135325;  // std dev = 0.032, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.06580022732372703;  // std dev = 0.420, 35.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=8 */
%   | else return 0.018536128582574765;  // std dev = 0.384, 420.000 (wgt'ed) examples reached here.  /* #neg=344 #pos=76 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.0788505495632885;  // std dev = 0.488, 3,464.000 (wgt'ed) examples reached here.  /* #neg=2,092 #pos=1,372 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.018020204741953493;  // std dev = 3.404, 58.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
%   | | | else return 0.08719636859046642;  // std dev = 5.194, 109.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=49 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.13388580445341047;  // std dev = 2.887, 38.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=25 */
%   | | | else return 0.05835096566186108;  // std dev = 1.797, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.11410686818866285;  // std dev = 2.538, 32.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=23 */
%   | | | else return 0.20955887845015522;  // std dev = 0.961, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return -0.036428996084663844;  // std dev = 0.300, 40.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=4 */
%   | else return 0.022503353197339194;  // std dev = 0.392, 420.000 (wgt'ed) examples reached here.  /* #neg=340 #pos=80 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.06159449055228201;  // std dev = 0.489, 3,459.000 (wgt'ed) examples reached here.  /* #neg=2,082 #pos=1,377 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.024219410642814954;  // std dev = 5.657, 156.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=51 */
%   | | | else return 0.17977657572727454;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.10085426723371992;  // std dev = 2.888, 38.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=25 */
%   | | | else return 0.04437710354955972;  // std dev = 1.797, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.08719041956837645;  // std dev = 2.538, 32.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=23 */
%   | | | else return 0.1693715596747088;  // std dev = 0.961, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return -0.03219443732799008;  // std dev = 0.300, 40.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=4 */
%   | else return 0.019335225123321004;  // std dev = 0.392, 420.000 (wgt'ed) examples reached here.  /* #neg=340 #pos=80 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.04784670874608859;  // std dev = 0.488, 3,464.000 (wgt'ed) examples reached here.  /* #neg=2,092 #pos=1,372 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.027143036374407382;  // std dev = 3.404, 58.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
%   | | | else return 0.05557117706517685;  // std dev = 5.182, 109.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=49 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.2651441694698649;  // std dev = 0.179, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.05040654461153328;  // std dev = 3.378, 49.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=29 */
%   | | | else return 0.08367731958997009;  // std dev = 2.715, 44.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=34 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.07306815334663448;  // std dev = 0.432, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
%   | | else return -0.08203240559841136;  // std dev = 0.273, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | else return 0.011329379575119432;  // std dev = 0.384, 420.000 (wgt'ed) examples reached here.  /* #neg=344 #pos=76 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.03701080477951379;  // std dev = 0.489, 3,459.000 (wgt'ed) examples reached here.  /* #neg=2,082 #pos=1,377 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.008401415843843506;  // std dev = 5.654, 156.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=51 */
%   | | | else return 0.1228682792775174;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | | then return 0.07683930156870847;  // std dev = 2.155, 21.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=13 */
%   | | | else return 0.03225454918667805;  // std dev = 2.621, 31.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=19 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.047311928750164656;  // std dev = 2.535, 32.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=23 */
%   | | | else return 0.12504931779766176;  // std dev = 0.961, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return -0.02933519272955113;  // std dev = 0.300, 40.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=4 */
%   | else return 0.014638584223976785;  // std dev = 0.392, 420.000 (wgt'ed) examples reached here.  /* #neg=340 #pos=80 */


Results
   AUC ROC   = 0.605315
   AUC PR    = 0.440162
   CLL	      = -0.625059
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total learning time: 9666.91485285759 seconds
Total inference time: 3.254 seconds
AUC ROC: 0.605315


Results scoring model
   AUC ROC   = 0.570814
   AUC PR    = 0.450259
   CLL	      = -0.646333
   Precision = 0.724138 at threshold = 0.5
   Recall    = 0.039648
   F1        = 0.075179


Total scoring time: 34.461 seconds
Parameter learned model CLL: -0.646333


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true,true': [0.49, 2, 1], 'true,true,false,true': [3.013, 52, 11], 'true,true,false,false': [5.194, 60, 49], 'true,false,true,true': [3.036, 14, 27], 'true,false,true,false': [1.651, 6, 5], 'true,false,false,true': [2.543, 9, 23], 'true,false,false,false': [0.964, 1, 13], 'false,true': [0.383, 253, 55], 'false,false': [0.393, 123, 29]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true,true': [0.49, 2, 1], 'true,true,false,true': [3.013, 52, 11], 'true,true,false,false': [5.194, 60, 49], 'true,false,true': [0.043, 0, 5], 'true,false,false,true': [3.427, 20, 29], 'true,false,false,false': [2.755, 10, 34], 'false,true': [0.3, 36, 4], 'false,false,true': [0.387, 231, 52], 'false,false,false': [0.403, 109, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(A, M), haswordauthor(N, M)'}, {'true,true,true': [0.49, 2, 1], 'true,true,false,true': [3.013, 52, 11], 'true,true,false,false': [5.194, 60, 49], 'true,false,true,true': [3.011, 14, 27], 'true,false,true,false': [1.651, 6, 5], 'true,false,false,true': [2.538, 9, 23], 'true,false,false,false': [0.961, 1, 13], 'false,true': [0.3, 36, 4], 'false,false': [0.393, 340, 80]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true,true': [0.49, 2, 1], 'true,true,false,true': [3.013, 52, 11], 'true,true,false,false': [5.194, 60, 49], 'true,false,true': [0.169, 0, 4], 'true,false,false,true': [3.394, 20, 29], 'true,false,false,false': [2.736, 10, 35], 'false,true': [0.383, 253, 55], 'false,false,true': [0.397, 118, 29], 'false,false,false': [0.021, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(A, M), haswordauthor(N, M)'}, {'true,true,true': [0.488, 2, 1], 'true,true,false,true': [3.404, 42, 16], 'true,true,false,false': [5.194, 60, 49], 'true,false,true,true': [2.986, 14, 27], 'true,false,true,false': [1.651, 6, 5], 'true,false,false,true': [2.538, 9, 23], 'true,false,false,false': [0.961, 1, 13], 'false,true': [0.3, 36, 4], 'false,false': [0.393, 340, 80]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false,true': 'author(M, L), venue(M, B)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [3.013, 52, 11], 'true,true,false,false': [5.194, 60, 49], 'true,false,true': [0.169, 0, 4], 'true,false,false,true': [3.387, 20, 29], 'true,false,false,false': [2.728, 10, 35], 'false,true,true': [0.032, 5, 0], 'false,true,false': [0.42, 27, 8], 'false,false': [0.384, 344, 76]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'title(I, H), venue(I, A)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(A, L), haswordauthor(M, L)'}, {'true,true,true': [0.488, 2, 1], 'true,true,false,true': [3.404, 42, 16], 'true,true,false,false': [5.194, 60, 49], 'true,false,true,true': [2.887, 13, 25], 'true,false,true,false': [1.797, 7, 7], 'true,false,false,true': [2.538, 9, 23], 'true,false,false,false': [0.961, 1, 13], 'false,true': [0.3, 36, 4], 'false,false': [0.392, 340, 80]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'title(J, I), venue(J, A)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(A, M), haswordauthor(N, M)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [5.657, 105, 51], 'true,true,false,false': [1.984, 7, 9], 'true,false,true,true': [2.888, 13, 25], 'true,false,true,false': [1.797, 7, 7], 'true,false,false,true': [2.538, 9, 23], 'true,false,false,false': [0.961, 1, 13], 'false,true': [0.3, 36, 4], 'false,false': [0.392, 340, 80]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false,true': 'haswordtitle(M, K)'}, {'true,true,true': [0.488, 2, 1], 'true,true,false,true': [3.404, 42, 16], 'true,true,false,false': [5.182, 60, 49], 'true,false,true': [0.179, 0, 5], 'true,false,false,true': [3.378, 20, 29], 'true,false,false,false': [2.715, 10, 34], 'false,true,true': [0.432, 21, 7], 'false,true,false': [0.273, 11, 1], 'false,false': [0.384, 344, 76]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'haswordtitle(I, J), haswordvenue(B, J)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(A, M), haswordauthor(N, M)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [5.654, 105, 51], 'true,true,false,false': [1.984, 7, 9], 'true,false,true,true': [2.155, 8, 13], 'true,false,true,false': [2.621, 12, 19], 'true,false,false,true': [2.535, 9, 23], 'true,false,false,false': [0.961, 1, 13], 'false,true': [0.3, 36, 4], 'false,false': [0.392, 340, 80]}]]
[{'': [0.24070577840712631, 0.14926275992438645], 'true': [0.23913376057827387, 0.21241149521032818], 'true,true': [0.23961474610143674, 0.22714981070849125], 'true,true,false': [0.14411690602166738, 0.24745391802036884], 'true,false': [0.236686390532546, 0.17013232514177878], 'true,false,true': [0.22486615110053676, 0.24793388429752045], 'true,false,false': [0.202148437500001, 0.06632653061224467], 'false': [0.14668367346938874, 0.15438885041551353]}, {'': [0.23967401057123525, 0.14925499046981014], 'true': [0.23889559776687164, 0.2076354588562225], 'true,true': [0.23961474610147465, 0.22266887985697895], 'true,true,false': [0.14411690602166832, 0.2474539180203703], 'true,false': [0.0003659404158356416, 0.21364768271575899], 'true,false,false': [0.23973851814660693, 0.17247539654525498], 'false': [0.09003888316347777, 0.15418162069934924], 'false,false': [0.149983143752573, 0.1626085566625807]}, {'': [0.2386818382891727, 0.14908387525809116], 'true': [0.2386850113326473, 0.20273908839530522], 'true,true': [0.23961474610147052, 0.21866844508262584], 'true,true,false': [0.14411690602166854, 0.24745391802036934], 'true,false': [0.23090408435751658, 0.1654630307673077], 'true,false,true': [0.2210761123135424, 0.2479338842975206], 'true,false,false': [0.20127776467975364, 0.06595945492122139], 'false': [0.09003758802351781, 0.1541617979247973]}, {'': [0.23796792667875732, 0.1489663595065418], 'true': [0.23851815583619168, 0.19909620961620672], 'true,true': [0.23961474610146719, 0.21550360234771432], 'true,true,false': [0.14411690602166852, 0.2474539180203676], 'true,false': [0.007173935066881798, 0.20413934721076182], 'true,false,false': [0.2351119328110703, 0.1662960188270757], 'false': [0.14652108258353724, 0.1538708799353876], 'false,false': [0.15785264120395778, 8.520757408036761e-05]}, {'': [0.23754387714814384, 0.1488613725598625], 'true': [0.23839773005043682, 0.196778611309264], 'true,true': [0.2384995926744562, 0.23542348905096183], 'true,true,false': [0.1997621878715818, 0.24745391802036834], 'true,false': [0.22575946433854768, 0.16276631116600723], 'true,false,true': [0.21743512032788728, 0.24793388429752064], 'true,false,false': [0.2012172994993751, 0.06598978956400693], 'false': [0.08998391807533508, 0.15405903518137007]}, {'': [0.23727541303692784, 0.14877077686152734], 'true': [0.2382756171368334, 0.19565432488314635], 'true,true': [0.23952265546328186, 0.21246258208712648], 'true,true,false': [0.14411690602166813, 0.24745391802036795], 'true,false': [0.007161892456246988, 0.20192031597507498], 'true,false,false': [0.23415819090855766, 0.1653750683563951], 'false': [0.15984931289061408, 0.1476851970165095], 'false,true': [0.00020424754362231013, 0.17613878637894473]}, {'': [0.23713066301422214, 0.14863477684379997], 'true': [0.2382061814935024, 0.1948576749581786], 'true,true': [0.23840132989406754, 0.2333998384690616], 'true,true,false': [0.19976218787158098, 0.2474539180203696], 'true,false': [0.22347956277054784, 0.16203734555640006], 'true,false,true': [0.21933130546710855, 0.23056970578714497], 'true,false,false': [0.20127052032916218, 0.06602337053883502], 'false': [0.08992373658684669, 0.15392430259237272]}, {'': [0.23701878119352446, 0.14856649147321377], 'true': [0.23813249205418366, 0.19437782317732072], 'true,true': [0.2394581755197389, 0.21097260947333057], 'true,true,false': [0.20511946152961683, 0.24609375000000017], 'true,false': [0.2230954703648685, 0.161540276028866], 'true,false,true': [0.21944163805691516, 0.2306821024954215], 'true,false,false': [0.20129595204506356, 0.06597190565403065], 'false': [0.08992527574373564, 0.15392047297805245]}, {'': [0.23694283988601486, 0.14851441643585614], 'true': [0.23807586161179392, 0.19412045595519922], 'true,true': [0.23836083222032697, 0.231744032203778], 'true,true,false': [0.19976218787158126, 0.24638575549863487], 'true,false': [0.0063885583296616755, 0.2021931783225198], 'true,false,false': [0.23281246891197335, 0.16751119408781165], 'false': [0.15820279568549622, 0.14757160045894785], 'false,true': [0.1867700401040878, 0.07470656367256975]}, {'': [0.2368759348581673, 0.14838975056847079], 'true': [0.23803222273388086, 0.1934817368969718], 'true,true': [0.23941822700135645, 0.20985170558253133], 'true,true,false': [0.20491572046601167, 0.24609374999999997], 'true,false': [0.22193095518437778, 0.1610941427738507], 'true,false,true': [0.22124295349747602, 0.2215942554000871], 'true,false,false': [0.20086724494398722, 0.06598029815227614], 'false': [0.08983965094238511, 0.153797803310289]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,false;haswordvenue(B, G), haswordauthor(H, G).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(A, K), haswordtitle(L, K).;true;true
3;false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(B, K), haswordauthor(L, K).;true;true
5;false,true;author(M, L), venue(M, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.25624086918450284;  // std dev = 0.490, 3,459.000 (wgt'ed) examples reached here.  /* #neg=2,082 #pos=1,377 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.18507201202258994;  // std dev = 5.859, 156.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=51 */
%   | | | else return 0.42064893509951234;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.5166855204653651;  // std dev = 3.036, 41.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=27 */
%   | | | else return 0.3126943896449669;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.5768989350995116;  // std dev = 2.543, 32.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=23 */
%   | | | else return 0.7867203636709409;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( haswordvenue(A, N), haswordauthor(P, N) )
%   | then return -0.041851064900487754;  // std dev = 0.300, 40.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=4 */
%   | else return 0.04862512557570308;  // std dev = 0.393, 420.000 (wgt'ed) examples reached here.  /* #neg=340 #pos=80 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.2221024619915506;  // std dev = 0.490, 3,459.000 (wgt'ed) examples reached here.  /* #neg=2,082 #pos=1,377 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.008697623655975071;  // std dev = 3.013, 63.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=11 */
%   | | | else return 0.2784676320479142;  // std dev = 5.183, 109.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=49 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.4415500313258421;  // std dev = 3.036, 41.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=27 */
%   | | | else return 0.27021896952830904;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.4913588187737372;  // std dev = 2.543, 32.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=23 */
%   | | | else return 0.6622329172201352;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.03159377217519168;  // std dev = 0.383, 308.000 (wgt'ed) examples reached here.  /* #neg=253 #pos=55 */
%   | else return 0.04400521076816771;  // std dev = 0.393, 152.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=29 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.1875491350813599;  // std dev = 0.490, 3,459.000 (wgt'ed) examples reached here.  /* #neg=2,082 #pos=1,377 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.007490538702848883;  // std dev = 3.013, 63.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=11 */
%   | | | else return 0.23535948077565474;  // std dev = 5.181, 109.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=49 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.35737328437183385;  // std dev = 3.036, 41.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=27 */
%   | | | else return 0.22609590054064999;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.3939374800029808;  // std dev = 2.543, 32.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=23 */
%   | | | else return 0.5154428111118985;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.027588652480519265;  // std dev = 0.383, 308.000 (wgt'ed) examples reached here.  /* #neg=253 #pos=55 */
%   | else return 0.03840846117914056;  // std dev = 0.393, 152.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=29 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.15468806716515068;  // std dev = 0.490, 3,459.000 (wgt'ed) examples reached here.  /* #neg=2,082 #pos=1,377 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.006445359287918452;  // std dev = 3.013, 63.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=11 */
%   | | | else return 0.19315947970045436;  // std dev = 5.180, 109.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=49 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.27667898348566955;  // std dev = 2.924, 38.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=25 */
%   | | | else return 0.20560514174778202;  // std dev = 1.849, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.30240717602312417;  // std dev = 2.543, 32.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=23 */
%   | | | else return 0.3875647182006322;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return -0.04505650849777207;  // std dev = 0.300, 40.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=4 */
%   | else return 0.03398542638590129;  // std dev = 0.393, 420.000 (wgt'ed) examples reached here.  /* #neg=340 #pos=80 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.12508494471982332;  // std dev = 0.490, 3,459.000 (wgt'ed) examples reached here.  /* #neg=2,082 #pos=1,377 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.005541848163696635;  // std dev = 3.013, 63.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=11 */
%   | | | else return 0.15470036472593307;  // std dev = 5.179, 109.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=49 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.5058969040529446;  // std dev = 0.161, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.1749787195135157;  // std dev = 3.404, 49.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=29 */
%   | | | else return 0.23919608085810154;  // std dev = 2.712, 44.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=34 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then return -0.03955777430541125;  // std dev = 0.300, 40.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=4 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.023742753465732038;  // std dev = 0.387, 283.000 (wgt'ed) examples reached here.  /* #neg=231 #pos=52 */
%   | | else return 0.04122969259173536;  // std dev = 0.403, 137.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.09988988752400894;  // std dev = 0.488, 3,464.000 (wgt'ed) examples reached here.  /* #neg=2,092 #pos=1,372 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.022662314896648533;  // std dev = 3.404, 58.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
%   | | | else return 0.121604405199524;  // std dev = 5.179, 109.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=49 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.43389436391995784;  // std dev = 0.219, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return 0.4121668914482141;  // std dev = 0.034, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.14749077313959524;  // std dev = 4.327, 91.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=61 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then return -0.03487506969683982;  // std dev = 0.300, 40.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=4 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.020525864597664353;  // std dev = 0.387, 283.000 (wgt'ed) examples reached here.  /* #neg=231 #pos=52 */
%   | | else return 0.03552206024292826;  // std dev = 0.403, 137.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=28 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.0786839231984717;  // std dev = 0.488, 3,464.000 (wgt'ed) examples reached here.  /* #neg=2,092 #pos=1,372 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.017938425463334757;  // std dev = 3.404, 58.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
%   | | | else return 0.09431076294348084;  // std dev = 5.178, 109.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=49 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordvenue(B, I) )
%   | | | then return 0.13283665072912726;  // std dev = 2.164, 21.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=13 */
%   | | | else return 0.0892731642005242;  // std dev = 2.633, 31.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=19 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.1280559306358299;  // std dev = 2.533, 32.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=23 */
%   | | | else return 0.2027796823667238;  // std dev = 0.961, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.03458750481912123;  // std dev = 0.400, 40.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=8 */
%   | else return 0.015637248760142913;  // std dev = 0.384, 420.000 (wgt'ed) examples reached here.  /* #neg=344 #pos=76 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.061673839589113336;  // std dev = 0.489, 3,459.000 (wgt'ed) examples reached here.  /* #neg=2,082 #pos=1,377 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.021918290557407412;  // std dev = 3.013, 63.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=11 */
%   | | | else return 0.07246423671540066;  // std dev = 5.178, 109.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=49 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.09223115143670567;  // std dev = 2.983, 41.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=27 */
%   | | | else return 0.038244207204385934;  // std dev = 1.646, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.09754525340599435;  // std dev = 2.533, 32.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=23 */
%   | | | else return 0.16442428083874133;  // std dev = 0.961, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.013029811068611615;  // std dev = 0.383, 308.000 (wgt'ed) examples reached here.  /* #neg=253 #pos=55 */
%   | else return 0.01864959105217363;  // std dev = 0.392, 152.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=29 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( haswordtitle(E, C) )
%   | | then return 0.265196094418139;  // std dev = 0.495, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | else return 0.17970922965067396;  // std dev = 0.718, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( haswordtitle(F, C) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.047008146993962954;  // std dev = 28.692, 3,456.000 (wgt'ed) examples reached here.  /* #neg=2,090 #pos=1,366 */
%   | | | else return 0.031702322705536204;  // std dev = 6.189, 165.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=65 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.05679673912737639;  // std dev = 3.403, 51.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=31 */
%   | | | else return 0.09263686421908414;  // std dev = 2.716, 45.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=35 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return -0.03451035870238332;  // std dev = 0.300, 40.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=4 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.013391045423994885;  // std dev = 0.387, 283.000 (wgt'ed) examples reached here.  /* #neg=231 #pos=52 */
%   | | else return 0.02537443447239541;  // std dev = 0.403, 137.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.03699047284505659;  // std dev = 0.488, 3,464.000 (wgt'ed) examples reached here.  /* #neg=2,092 #pos=1,372 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.03383004213482598;  // std dev = 3.404, 58.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
%   | | | else return 0.046700946388322465;  // std dev = 5.188, 109.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=49 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.267357438274973;  // std dev = 0.194, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.03049059245463581;  // std dev = 3.374, 49.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=29 */
%   | | | else return 0.07339392894140986;  // std dev = 2.717, 45.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=35 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then return -0.030543274120820252;  // std dev = 0.300, 40.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=4 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return 0.03415402228591749;  // std dev = 0.409, 38.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=8 */
%   | | else return 0.012866721102627472;  // std dev = 0.391, 382.000 (wgt'ed) examples reached here.  /* #neg=310 #pos=72 */


Results
   AUC ROC   = 0.606077
   AUC PR    = 0.441761
   CLL	      = -0.62525
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total learning time: 8924.858870744705 seconds
Total inference time: 3.142 seconds
AUC ROC: 0.606077


Results scoring model
   AUC ROC   = 0.571794
   AUC PR    = 0.452137
   CLL	      = -0.646426
   Precision = 0.724138 at threshold = 0.5
   Recall    = 0.039648
   F1        = 0.075179


Total scoring time: 35.739 seconds
Refined model CLL: -0.646426


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.605315
   AUC PR    = 0.440162
   CLL	      = -0.625059
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total learning time: 18661.973723602296 seconds
Total inference time: 3.254 seconds
AUC ROC: 0.605315
Total revision time: 18661.973723602296
Best scored revision CLL: -0.646333


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 09:44:44
{'AUC ROC': 0.605315, 'AUC PR': 0.440162, 'CLL': -0.625059, 'Precision': [0.578947, 0.5], 'Recall': 0.059783, 'F1': 0.108374, 'Learning time': 18661.973723602296, 'Inference time': 3.254, 'parameter_0.6': {'AUC ROC': 0.605315, 'AUC PR': 0.440162, 'CLL': -0.625059, 'Precision': [0.578947, 0.5], 'Recall': 0.059783, 'F1': 0.108374, 'Learning time': 9666.91485285759, 'Inference time': 3.254}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.25624086918450284;  // std dev = 0.490, 3,459.000 (wgt'ed) examples reached here.  /* #neg=2,082 #pos=1,377 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.03275210970268697;  // std dev = 3.013, 63.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=11 */
%   | | | else return 0.307690219503183;  // std dev = 5.194, 109.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=49 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.5166855204653651;  // std dev = 3.036, 41.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=27 */
%   | | | else return 0.3126943896449669;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.5768989350995116;  // std dev = 2.543, 32.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=23 */
%   | | | else return 0.7867203636709409;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.036720363670940934;  // std dev = 0.383, 308.000 (wgt'ed) examples reached here.  /* #neg=253 #pos=55 */
%   | else return 0.048938408783722076;  // std dev = 0.393, 152.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=29 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.2221024619915506;  // std dev = 0.490, 3,459.000 (wgt'ed) examples reached here.  /* #neg=2,082 #pos=1,377 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.028718259987384094;  // std dev = 3.013, 63.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=11 */
%   | | | else return 0.2659659893177112;  // std dev = 5.194, 109.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=49 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.7710621290604822;  // std dev = 0.043, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.38218203288348895;  // std dev = 3.427, 49.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=29 */
%   | | | else return 0.5338289257822508;  // std dev = 2.755, 44.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=34 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then return 0.03219136442197456;  // std dev = 0.383, 308.000 (wgt'ed) examples reached here.  /* #neg=253 #pos=55 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return -0.08124668370951892;  // std dev = 0.249, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | else return 0.056466211667609845;  // std dev = 0.403, 137.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=28 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.1875491350813599;  // std dev = 0.490, 3,459.000 (wgt'ed) examples reached here.  /* #neg=2,082 #pos=1,377 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.025103379480055473;  // std dev = 3.013, 63.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=11 */
%   | | | else return 0.2227192960387043;  // std dev = 5.194, 109.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=49 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.6519896765497614;  // std dev = 0.127, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.3085027400988181;  // std dev = 3.407, 49.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=29 */
%   | | | else return 0.4284469932005615;  // std dev = 2.756, 45.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=35 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then return -0.04576658979309204;  // std dev = 0.300, 40.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=4 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.03329715227209647;  // std dev = 0.387, 283.000 (wgt'ed) examples reached here.  /* #neg=231 #pos=52 */
%   | | else return 0.04920710351806226;  // std dev = 0.403, 137.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=28 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.15468806716515068;  // std dev = 0.490, 3,459.000 (wgt'ed) examples reached here.  /* #neg=2,082 #pos=1,377 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.10534176749338584;  // std dev = 5.711, 156.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=51 */
%   | | | else return 0.29427060054960746;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=9 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.2895959959398921;  // std dev = 2.986, 41.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=27 */
%   | | | else return 0.14379663638388376;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.2817472011171555;  // std dev = 2.538, 32.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=23 */
%   | | | else return 0.4331923506066947;  // std dev = 0.961, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | then return 0.024634175469508617;  // std dev = 0.383, 308.000 (wgt'ed) examples reached here.  /* #neg=253 #pos=55 */
%   | else return 0.03193024776527908;  // std dev = 0.392, 152.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=29 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.12508494471982332;  // std dev = 0.490, 3,459.000 (wgt'ed) examples reached here.  /* #neg=2,082 #pos=1,377 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.007748446859212848;  // std dev = 3.013, 63.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=11 */
%   | | | else return 0.15421657076801243;  // std dev = 5.182, 109.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=49 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.4187431184376542;  // std dev = 0.157, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.18158854192611681;  // std dev = 3.393, 49.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=29 */
%   | | | else return 0.24547702152972856;  // std dev = 2.737, 45.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=35 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then return -0.04347690176285914;  // std dev = 0.300, 40.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=4 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.02574185306613559;  // std dev = 0.387, 283.000 (wgt'ed) examples reached here.  /* #neg=231 #pos=52 */
%   | | else return 0.03827049683967839;  // std dev = 0.403, 137.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=28 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.09992456329653938;  // std dev = 0.488, 3,464.000 (wgt'ed) examples reached here.  /* #neg=2,092 #pos=1,372 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.022662314896648533;  // std dev = 3.404, 58.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
%   | | | else return 0.12117865378534333;  // std dev = 5.181, 109.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=49 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.1770592486615905;  // std dev = 2.886, 38.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=25 */
%   | | | else return 0.0769367840378256;  // std dev = 1.794, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.15075683289656283;  // std dev = 2.538, 32.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=23 */
%   | | | else return 0.2675143203165459;  // std dev = 0.962, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.01866176079171965;  // std dev = 0.383, 308.000 (wgt'ed) examples reached here.  /* #neg=253 #pos=55 */
%   | else return 0.023277515888069856;  // std dev = 0.392, 152.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=29 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.07871341682041225;  // std dev = 0.488, 3,464.000 (wgt'ed) examples reached here.  /* #neg=2,092 #pos=1,372 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.017938425463334757;  // std dev = 3.404, 58.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
%   | | | else return 0.0939492684643615;  // std dev = 5.181, 109.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=49 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.2950777337696337;  // std dev = 0.160, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.0995195343360031;  // std dev = 3.383, 49.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=29 */
%   | | | else return 0.1427926755258911;  // std dev = 2.730, 45.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=35 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, B) )
%   | | then return -0.16878236609175587;  // std dev = 0.027, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.06450487049604359;  // std dev = 0.420, 35.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=8 */
%   | else return 0.015711026218591537;  // std dev = 0.384, 420.000 (wgt'ed) examples reached here.  /* #neg=344 #pos=76 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.061659738139722566;  // std dev = 0.489, 3,459.000 (wgt'ed) examples reached here.  /* #neg=2,082 #pos=1,377 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.019792345335397695;  // std dev = 3.013, 63.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=11 */
%   | | | else return 0.07216496003012596;  // std dev = 5.180, 109.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=49 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.27896779739697586;  // std dev = 0.202, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.07230916863828948;  // std dev = 3.374, 49.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=29 */
%   | | | else return 0.10614494874483661;  // std dev = 2.725, 44.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=34 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then return -0.04217970280887138;  // std dev = 0.299, 40.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=4 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return 0.039132559184806834;  // std dev = 0.407, 38.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=8 */
%   | | else return 0.018569565733564903;  // std dev = 0.391, 382.000 (wgt'ed) examples reached here.  /* #neg=310 #pos=72 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.047841737890148166;  // std dev = 0.488, 3,464.000 (wgt'ed) examples reached here.  /* #neg=2,092 #pos=1,372 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.027090854652103775;  // std dev = 3.404, 58.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
%   | | | else return 0.0550836893130452;  // std dev = 5.180, 109.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=49 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.22827467186870315;  // std dev = 0.174, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.052855194663555045;  // std dev = 3.293, 50.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=33 */
%   | | | else return 0.08582985887584642;  // std dev = 2.822, 43.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=30 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then return -0.03711398446341301;  // std dev = 0.299, 40.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=4 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.013864513131062484;  // std dev = 0.387, 283.000 (wgt'ed) examples reached here.  /* #neg=231 #pos=52 */
%   | | else return 0.02508529597938582;  // std dev = 0.403, 137.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.037064114080703044;  // std dev = 0.489, 3,459.000 (wgt'ed) examples reached here.  /* #neg=2,082 #pos=1,377 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.02422273264895519;  // std dev = 3.013, 63.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=11 */
%   | | | else return 0.041867391934260256;  // std dev = 5.180, 109.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=49 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.1916950044486117;  // std dev = 0.152, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.036666101362861796;  // std dev = 3.375, 49.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=29 */
%   | | | else return 0.07038268792355326;  // std dev = 2.725, 44.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=34 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then return -0.03278296962097109;  // std dev = 0.300, 40.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=4 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.011900500111404215;  // std dev = 0.387, 283.000 (wgt'ed) examples reached here.  /* #neg=231 #pos=52 */
%   | | else return 0.021364737379214446;  // std dev = 0.403, 137.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=28 */


Results
   AUC ROC   = 0.605058
   AUC PR    = 0.440096
   CLL	      = -0.624134
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total learning time: 9538.729522943497 seconds
Total inference time: 3.147 seconds
AUC ROC: 0.605058


Dataset: 3_imdb_cora, Fold: 1, Type: Scratch (RDN-B), Time: 12:23:46
{'AUC ROC': 0.605058, 'AUC PR': 0.440096, 'CLL': -0.624134, 'Precision': [0.578947, 0.5], 'Recall': 0.059783, 'F1': 0.108374, 'Learning time': 9538.729522943497, 'Inference time': 3.147}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.25632720445539525;  // std dev = 0.490, 4,611.000 (wgt'ed) examples reached here.  /* #neg=2,775 #pos=1,836 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.06594114289172016;  // std dev = 3.560, 77.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=16 */
%   | | | else return 0.2895214841191214;  // std dev = 6.126, 153.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=66 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.4474346493852255;  // std dev = 3.682, 56.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=33 */
%   | | | else return 0.25814893509951237;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.5166855204653651;  // std dev = 3.036, 41.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=27 */
%   | | | else return 0.8055173561521439;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.056216567949754055;  // std dev = 0.399, 414.000 (wgt'ed) examples reached here.  /* #neg=332 #pos=82 */
%   | else return 0.033148935099511376;  // std dev = 0.380, 200.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=35 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( haswordauthor(E, C) )
%   | | then return 0.40611486693980176;  // std dev = 0.494, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.22143390489495737;  // std dev = 33.198, 4,602.000 (wgt'ed) examples reached here.  /* #neg=2,773 #pos=1,829 */
%   | | | else return 0.19081274346036572;  // std dev = 7.190, 227.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=82 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.3838344294649675;  // std dev = 3.682, 56.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=33 */
%   | | | else return 0.22373365448410584;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.4415500313258421;  // std dev = 3.036, 41.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=27 */
%   | | | else return 0.6773408397065112;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.07394133817979585;  // std dev = 0.415, 63.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=14 */
%   | else return 0.03908885287614515;  // std dev = 0.390, 551.000 (wgt'ed) examples reached here.  /* #neg=448 #pos=103 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.18766913804528584;  // std dev = 0.489, 4,611.000 (wgt'ed) examples reached here.  /* #neg=2,775 #pos=1,836 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.03172832703017777;  // std dev = 3.560, 77.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=16 */
%   | | | else return 0.21975257937624032;  // std dev = 6.135, 153.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=66 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.6904127286072258;  // std dev = 0.127, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.26839629126518555;  // std dev = 4.092, 68.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=36 */
%   | | | else return 0.4029097156536288;  // std dev = 3.228, 58.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=43 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( title(M, L), venue(M, B) )
%   | | then return 0.060707139980852004;  // std dev = 0.411, 288.000 (wgt'ed) examples reached here.  /* #neg=226 #pos=62 */
%   | | else return 0.004658366519448701;  // std dev = 0.366, 126.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=20 */
%   | else return 0.02385478729562629;  // std dev = 0.380, 200.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=35 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1548796974638723;  // std dev = 0.489, 4,607.000 (wgt'ed) examples reached here.  /* #neg=2,777 #pos=1,830 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.028286182753043124;  // std dev = 4.003, 81.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=22 */
%   | | | else return 0.1807837028933793;  // std dev = 6.136, 153.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=66 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordauthor(I, G) )
%   | | | then return 0.4682619597453576;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.21052720886072546;  // std dev = 3.997, 66.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=35 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.26480999926030885;  // std dev = 3.029, 41.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=27 */
%   | | | else return 0.4222121951248569;  // std dev = 0.972, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.0384646900941921;  // std dev = 0.396, 415.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=81 */
%   | else return 0.01935672964446375;  // std dev = 0.385, 199.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.1255789682402129;  // std dev = 0.489, 4,611.000 (wgt'ed) examples reached here.  /* #neg=2,775 #pos=1,836 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.003004963590596363;  // std dev = 3.560, 77.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=16 */
%   | | | else return 0.1453386432888548;  // std dev = 6.136, 153.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=66 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.37381852177426234;  // std dev = 0.343, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return 0.5018494451511923;  // std dev = 0.037, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.18789618462248914;  // std dev = 5.102, 121.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=75 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.1155360490265501;  // std dev = 0.451, 42.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=12 */
%   | | else return -0.07157372182043623;  // std dev = 0.293, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | else return 0.025050744745185972;  // std dev = 0.390, 551.000 (wgt'ed) examples reached here.  /* #neg=448 #pos=103 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.10013148823247744;  // std dev = 0.489, 4,607.000 (wgt'ed) examples reached here.  /* #neg=2,777 #pos=1,830 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.0011470594008409925;  // std dev = 4.003, 81.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=22 */
%   | | | else return 0.11476707325022549;  // std dev = 6.137, 153.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=66 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.1794656191314961;  // std dev = 3.516, 58.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=38 */
%   | | | else return -0.05988689158347534;  // std dev = 1.969, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.1513221528492421;  // std dev = 2.983, 38.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=22 */
%   | | | else return 0.2750563034817085;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.029626423101676114;  // std dev = 0.398, 414.000 (wgt'ed) examples reached here.  /* #neg=332 #pos=82 */
%   | else return 0.012455106422239228;  // std dev = 0.380, 200.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=35 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.07897578424548052;  // std dev = 0.489, 4,611.000 (wgt'ed) examples reached here.  /* #neg=2,775 #pos=1,836 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.014302369470010467;  // std dev = 3.560, 77.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=16 */
%   | | | else return 0.08943526274333921;  // std dev = 6.137, 153.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=66 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.13568946734535722;  // std dev = 3.516, 58.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=38 */
%   | | | else return -0.04527046120429236;  // std dev = 1.969, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.11414127992549883;  // std dev = 2.983, 38.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=22 */
%   | | | else return 0.21765132624931766;  // std dev = 0.972, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.025584534267429602;  // std dev = 0.396, 415.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=81 */
%   | else return 0.010371887390311023;  // std dev = 0.385, 199.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.061729336113330535;  // std dev = 0.489, 4,607.000 (wgt'ed) examples reached here.  /* #neg=2,777 #pos=1,830 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.02427949660072083;  // std dev = 6.937, 212.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=76 */
%   | | | else return 0.18412276621324572;  // std dev = 2.335, 22.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.21012169308216663;  // std dev = 0.345, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.30827206914301214;  // std dev = 0.031, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.07966266337714355;  // std dev = 5.039, 121.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=75 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then if ( title(N, M), venue(N, B) )
%   | | then return 0.037951260545525056;  // std dev = 0.410, 288.000 (wgt'ed) examples reached here.  /* #neg=226 #pos=62 */
%   | | else return -0.012027125939597193;  // std dev = 0.366, 126.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=20 */
%   | else return 0.007334626900407413;  // std dev = 0.380, 200.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=35 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.047845674852895356;  // std dev = 0.489, 4,607.000 (wgt'ed) examples reached here.  /* #neg=2,777 #pos=1,830 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.021863789564466787;  // std dev = 4.003, 81.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=22 */
%   | | | else return 0.05797018651648347;  // std dev = 6.124, 153.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=66 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.23750090862291376;  // std dev = 0.133, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.04222645410740114;  // std dev = 4.037, 71.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=41 */
%   | | | else return 0.09249193858683255;  // std dev = 3.143, 55.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=38 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordauthor(M, K) )
%   | | then return 0.08580059729299418;  // std dev = 0.449, 42.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=12 */
%   | | else return 0.013096411488114516;  // std dev = 0.388, 373.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=69 */
%   | else return 0.003960032572580071;  // std dev = 0.385, 199.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.03708906681042252;  // std dev = 0.489, 4,611.000 (wgt'ed) examples reached here.  /* #neg=2,775 #pos=1,836 */
%   | | else if ( haswordauthor(F, C) )
%   | | | then return -0.43240715559386195;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.025006521354843426;  // std dev = 7.061, 227.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=82 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.05684990276751023;  // std dev = 3.554, 56.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=33 */
%   | | | else return -0.04665949409939837;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.04776400116763607;  // std dev = 2.979, 41.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=27 */
%   | | | else return 0.14643839778900755;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.017347951120359084;  // std dev = 0.395, 415.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=81 */
%   | else return 0.003382692800252129;  // std dev = 0.385, 199.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=36 */


Results
   AUC ROC   = 0.604803
   AUC PR    = 0.437855
   CLL	      = -0.626495
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total learning time: 11224.65273976326 seconds
Total inference time: 3.225 seconds
AUC ROC: 0.604803


Results scoring model
   AUC ROC   = 0.566561
   AUC PR    = 0.444907
   CLL	      = -0.64874
   Precision = 0.705882 at threshold = 0.5
   Recall    = 0.033978
   F1        = 0.064836


Total scoring time: 46.196 seconds
Parameter learned model CLL: -0.64874


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true,true': [0.49, 2, 1], 'true,true,false,true': [3.56, 61, 16], 'true,true,false,false': [6.126, 87, 66], 'true,false,true,true': [3.682, 23, 33], 'true,false,true,false': [1.897, 9, 6], 'true,false,false,true': [3.036, 14, 27], 'true,false,false,false': [0.973, 1, 18], 'false,true': [0.399, 332, 82], 'false,false': [0.38, 165, 35]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'haswordauthor(E, C)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(B, M), haswordauthor(N, M)'}, {'true,true,true': [0.494, 5, 7], 'true,true,false,true': [33.198, 2, 1], 'true,true,false,false': [7.19, 145, 82], 'true,false,true,true': [3.682, 23, 33], 'true,false,true,false': [1.897, 9, 6], 'true,false,false,true': [3.036, 14, 27], 'true,false,false,false': [0.973, 1, 18], 'false,true': [0.415, 49, 14], 'false,false': [0.39, 448, 103]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,true': 'title(M, L), venue(M, B)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [3.56, 61, 16], 'true,true,false,false': [6.135, 87, 66], 'true,false,true': [0.127, 0, 5], 'true,false,false,true': [4.092, 32, 36], 'true,false,false,false': [3.228, 15, 43], 'false,true,true': [0.411, 226, 62], 'false,true,false': [0.366, 106, 20], 'false,false': [0.38, 165, 35]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'haswordauthor(I, G)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [4.003, 59, 22], 'true,true,false,false': [6.136, 87, 66], 'true,false,true,true': [0.894, 1, 4], 'true,false,true,false': [3.997, 31, 35], 'true,false,false,true': [3.029, 14, 27], 'true,false,false,false': [0.972, 1, 18], 'false,true': [0.396, 334, 81], 'false,false': [0.385, 163, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false,true': 'haswordtitle(M, K)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [3.56, 61, 16], 'true,true,false,false': [6.136, 87, 66], 'true,false,true': [0.343, 1, 6], 'true,false,false,true': [0.037, 0, 3], 'true,false,false,false': [5.102, 46, 75], 'false,true,true': [0.451, 30, 12], 'false,true,false': [0.293, 19, 2], 'false,false': [0.39, 448, 103]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [4.003, 59, 22], 'true,true,false,false': [6.137, 87, 66], 'true,false,true,true': [3.516, 20, 38], 'true,false,true,false': [1.969, 10, 6], 'true,false,false,true': [2.983, 16, 22], 'true,false,false,false': [0.973, 1, 18], 'false,true': [0.398, 332, 82], 'false,false': [0.38, 165, 35]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [3.56, 61, 16], 'true,true,false,false': [6.137, 87, 66], 'true,false,true,true': [3.516, 20, 38], 'true,false,true,false': [1.969, 10, 6], 'true,false,false,true': [2.983, 16, 22], 'true,false,false,false': [0.972, 1, 18], 'false,true': [0.396, 334, 81], 'false,false': [0.385, 163, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'true,false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false': 'haswordvenue(A, L), haswordtitle(M, L)', 'false,true': 'title(N, M), venue(N, B)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [6.937, 136, 76], 'true,true,false,false': [2.335, 10, 12], 'true,false,true': [0.345, 1, 6], 'true,false,false,true': [0.031, 0, 3], 'true,false,false,false': [5.039, 46, 75], 'false,true,true': [0.41, 226, 62], 'false,true,false': [0.366, 106, 20], 'false,false': [0.38, 165, 35]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,true': 'haswordauthor(M, K)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [4.003, 59, 22], 'true,true,false,false': [6.124, 87, 66], 'true,false,true': [0.133, 0, 5], 'true,false,false,true': [4.037, 30, 41], 'true,false,false,false': [3.143, 17, 38], 'false,true,true': [0.449, 30, 12], 'false,true,false': [0.388, 304, 69], 'false,false': [0.385, 163, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'haswordauthor(F, C)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [1.05e-08, 3, 0], 'true,true,false,false': [7.061, 145, 82], 'true,false,true,true': [3.554, 23, 33], 'true,false,true,false': [1.897, 9, 6], 'true,false,false,true': [2.979, 14, 27], 'true,false,false,false': [0.973, 1, 18], 'false,true': [0.395, 334, 81], 'false,false': [0.385, 163, 36]}]]
[{'': [0.24052392513112164, 0.15424301584101816], 'true': [0.23922537988764547, 0.23005652351261774], 'true,true': [0.23963233516858484, 0.22941398865784557], 'true,false': [0.24756992660186602, 0.18750000000000042], 'true,false,true': [0.24202806122449144, 0.24000000000000007], 'true,true,false': [0.16461460617304718, 0.2452902729719337], 'true,false,false': [0.22486615110053676, 0.04986149584487499], 'false': [0.15883684566734424, 0.1443750000000011]}, {'': [0.23973854517901472, 0.15421549007040627], 'true': [0.23907051047066857, 0.22323568864625895], 'true,true': [0.24447921447609233, 0.2389712013743609], 'true,true,false': [0.2394806048652327, 0.22775042079256988], 'true,false': [0.24587079315098734, 0.18147864939229777], 'true,false,true': [0.24202806122448955, 0.2400000000000002], 'true,false,false': [0.22486615110053607, 0.04986149584487499], 'false': [0.17259541433292813, 0.15198933932505693]}, {'': [0.2390600490508595, 0.15418671072559978], 'true': [0.23901264865440816, 0.2165495399539393], 'true,true': [0.23958647277887973, 0.2266014053627615], 'true,true,false': [0.16461460617304782, 0.24596176663500632], 'true,false': [0.003225614989175174, 0.2200655287997915], 'true,false,false': [0.2461851253684238, 0.1796776124714123], 'false': [0.1587526374757171, 0.14447106205065022], 'false,true': [0.16879851205189017, 0.1336052714833973]}, {'': [0.23850038882072302, 0.15405066778882753], 'true': [0.2388731762831262, 0.21196488077184011], 'true,true': [0.2390542943498917, 0.23461952434936872], 'true,true,false': [0.19783569577808216, 0.24604333737514222], 'true,false': [0.2406242124715837, 0.17404501102209557], 'true,false,true': [0.15999999999999998, 0.242054135397093], 'true,false,false': [0.22381384212062327, 0.049719220639428484], 'false': [0.15678460925849289, 0.14810245295100488]}, {'': [0.23812771301382854, 0.1540257251850781], 'true': [0.23874867539279152, 0.2088291266353265], 'true,true': [0.23948052325182953, 0.22333575917683912], 'true,true,false': [0.16461460617304785, 0.246105915389008], 'true,false': [0.11796010491864498, 0.21225957094034417], 'true,false,false': [0.0004555256576183793, 0.2151262338948234], 'false': [0.17166365516139273, 0.1519279398342671], 'false,true': [0.20298365366251397, 0.08568361392820949]}, {'': [0.2379037671309365, 0.15378674919973784], 'true': [0.23865008761853804, 0.20715705058712747], 'true,true': [0.2389327128062123, 0.23246749066329886], 'true,true,false': [0.1978356957780824, 0.24615101741094148], 'true,false': [0.229209899273266, 0.17615116742756362], 'true,false,true': [0.2131858973719409, 0.24239422759310245], 'true,false,false': [0.23422930022391097, 0.049788141813043016], 'false': [0.15820889033047744, 0.14443410662875858]}, {'': [0.23769931133678918, 0.15376202518929483], 'true': [0.23856754834438312, 0.2039453639707847], 'true,true': [0.2394023068777891, 0.2212714034496973], 'true,true,false': [0.1646146061730482, 0.24618219320305126], 'true,false': [0.22503139396779237, 0.1750382681164948], 'true,false,true': [0.21317366707212207, 0.24234948162729622], 'true,false,false': [0.2341122365446754, 0.04974744480016123], 'false': [0.1564914146961429, 0.14791366332381267]}, {'': [0.23757685535683148, 0.15374232594705756], 'true': [0.23850913303400967, 0.20217605699800106], 'true,true': [0.23885960930144998, 0.23113050634886909], 'true,true,false': [0.22698463497168417, 0.2479338842975206], 'true,false': [0.11887965146913618, 0.20604430923415834], 'true,false,false': [0.00032362833565056465, 0.2098804124577898], 'false': [0.1581811796893983, 0.14439386861785905], 'false,true': [0.16811043104009235, 0.13374812081977588]}, {'': [0.2374915962759381, 0.15362221723619146], 'true': [0.23844710889262075, 0.20163060829356647], 'true,true': [0.23885104214534453, 0.2302026663974481], 'true,true,false': [0.19783569577808277, 0.24513192244538146], 'true,false': [0.003538998315390529, 0.2083446540864018], 'true,false,false': [0.2294857117625126, 0.17962974082638009], 'false': [0.15629430760273877, 0.1478658798972901], 'false,true': [0.20184368371207753, 0.15063046501364383]}, {'': [0.23743817316297872, 0.15349685666076757], 'true': [0.23840792868444485, 0.2012532402316014], 'true,true': [0.23933827311831238, 0.21944626281407037], 'true,true,false': [3.700743415417188e-17, 0.21961738231618164], 'true,false': [0.23038370697295818, 0.16573151361598681], 'true,false,true': [0.22554029896617772, 0.24001513066644947], 'true,false,false': [0.2163777091251413, 0.04978898657750195], 'false': [0.15613415678486783, 0.14786514052033195]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;true
4;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
7;true,false,false;haswordvenue(B, J), haswordauthor(K, J).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;true;true
9;true,true,false;haswordauthor(F, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.25632720445539525;  // std dev = 0.490, 4,611.000 (wgt'ed) examples reached here.  /* #neg=2,775 #pos=1,836 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.06594114289172016;  // std dev = 3.560, 77.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=16 */
%   | | | else return 0.2895214841191214;  // std dev = 6.126, 153.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=66 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.4474346493852255;  // std dev = 3.682, 56.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=33 */
%   | | | else return 0.25814893509951237;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.5166855204653651;  // std dev = 3.036, 41.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=27 */
%   | | | else return 0.8055173561521439;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.056216567949754055;  // std dev = 0.399, 414.000 (wgt'ed) examples reached here.  /* #neg=332 #pos=82 */
%   | else return 0.033148935099511376;  // std dev = 0.380, 200.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=35 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.22217627681494803;  // std dev = 0.490, 4,611.000 (wgt'ed) examples reached here.  /* #neg=2,775 #pos=1,836 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.05772306439192216;  // std dev = 3.560, 77.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=16 */
%   | | | else return 0.25050466106844205;  // std dev = 6.126, 153.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=66 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.3838344294649675;  // std dev = 3.682, 56.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=33 */
%   | | | else return 0.22373365448410584;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.4415500313258421;  // std dev = 3.036, 41.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=27 */
%   | | | else return 0.6773408397065112;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.07394133817979585;  // std dev = 0.415, 63.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=14 */
%   | else return 0.03908885287614515;  // std dev = 0.390, 551.000 (wgt'ed) examples reached here.  /* #neg=448 #pos=103 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.18760884984574497;  // std dev = 0.490, 4,611.000 (wgt'ed) examples reached here.  /* #neg=2,775 #pos=1,836 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.0502109276015882;  // std dev = 3.560, 77.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=16 */
%   | | | else return 0.21039415601814743;  // std dev = 6.126, 153.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=66 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.3141521854870378;  // std dev = 3.682, 56.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=33 */
%   | | | else return 0.18886832215749727;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.35737328437183385;  // std dev = 3.036, 41.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=27 */
%   | | | else return 0.525995951478812;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.043648817623033874;  // std dev = 0.398, 414.000 (wgt'ed) examples reached here.  /* #neg=332 #pos=82 */
%   | else return 0.02385478729562629;  // std dev = 0.380, 200.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=35 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.15509902020225078;  // std dev = 0.489, 4,607.000 (wgt'ed) examples reached here.  /* #neg=2,777 #pos=1,830 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.028160579101480628;  // std dev = 4.003, 81.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=22 */
%   | | | else return 0.1720667306666075;  // std dev = 6.126, 153.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=66 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordauthor(I, G) )
%   | | | then return 0.45804152724755304;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.2105397318969898;  // std dev = 4.021, 66.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=35 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.27732083200941793;  // std dev = 3.036, 41.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=27 */
%   | | | else return 0.3953438564084147;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.037863181638848685;  // std dev = 0.398, 414.000 (wgt'ed) examples reached here.  /* #neg=332 #pos=82 */
%   | else return 0.02076870236225707;  // std dev = 0.380, 200.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=35 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1255325628686841;  // std dev = 0.489, 4,607.000 (wgt'ed) examples reached here.  /* #neg=2,777 #pos=1,830 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.022936589255178087;  // std dev = 4.003, 81.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=22 */
%   | | | else return 0.13767913104042115;  // std dev = 6.126, 153.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=66 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.5465260621146741;  // std dev = 0.222, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.15748792161355873;  // std dev = 4.066, 68.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=36 */
%   | | | else return 0.23145250219851563;  // std dev = 3.187, 58.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=43 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.11727792457560815;  // std dev = 0.451, 42.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=12 */
%   | | else return -0.07201565638969618;  // std dev = 0.293, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | else return 0.024925396049545474;  // std dev = 0.390, 551.000 (wgt'ed) examples reached here.  /* #neg=448 #pos=103 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.10023206554881016;  // std dev = 0.489, 4,611.000 (wgt'ed) examples reached here.  /* #neg=2,775 #pos=1,836 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.0011840660503903235;  // std dev = 3.560, 77.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=16 */
%   | | | else return 0.1083320689355262;  // std dev = 6.126, 153.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=66 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.4159000925749553;  // std dev = 0.203, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.12041711444685313;  // std dev = 4.065, 68.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=36 */
%   | | | else return 0.17586758057817725;  // std dev = 3.190, 58.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=43 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.10020819179642146;  // std dev = 0.451, 42.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=12 */
%   | | else return -0.06222512064059123;  // std dev = 0.293, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | else return 0.021513302088832988;  // std dev = 0.390, 551.000 (wgt'ed) examples reached here.  /* #neg=448 #pos=103 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.07895355192754888;  // std dev = 0.489, 4,607.000 (wgt'ed) examples reached here.  /* #neg=2,777 #pos=1,830 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.03989423986398169;  // std dev = 6.927, 212.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=76 */
%   | | | else return 0.198284450989399;  // std dev = 2.335, 22.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.1483260127433796;  // std dev = 3.517, 58.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=38 */
%   | | | else return -0.09497852890843748;  // std dev = 1.975, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.12030707649972741;  // std dev = 2.977, 38.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=22 */
%   | | | else return 0.2091047224990531;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | then return 0.02480954848071474;  // std dev = 0.398, 414.000 (wgt'ed) examples reached here.  /* #neg=332 #pos=82 */
%   | else return 0.011751321547286553;  // std dev = 0.380, 200.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=35 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.06159750174331429;  // std dev = 0.489, 4,611.000 (wgt'ed) examples reached here.  /* #neg=2,775 #pos=1,836 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.012261114556272063;  // std dev = 3.560, 77.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=16 */
%   | | | else return 0.06977292794901035;  // std dev = 6.113, 153.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=66 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.24449075813243418;  // std dev = 0.343, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.0659077030926547;  // std dev = 3.986, 70.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=41 */
%   | | | else return 0.10638651990622747;  // std dev = 3.117, 54.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=37 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordauthor(M, K) )
%   | | then return 0.08086750763009115;  // std dev = 0.451, 42.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=12 */
%   | | else return 0.015404431493925383;  // std dev = 0.388, 373.000 (wgt'ed) examples reached here.  /* #neg=304 #pos=69 */
%   | else return 0.008415668576113944;  // std dev = 0.384, 199.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), venue(E, A) )
%   | | then return 0.5298425439590289;  // std dev = 0.291, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordtitle(F, C) )
%   | | | then return 0.1882516065432622;  // std dev = 1.672, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | | | else return 0.1422230264053398;  // std dev = 1.000, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( haswordtitle(G, C) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 0.04699861892406779;  // std dev = 33.110, 4,593.000 (wgt'ed) examples reached here.  /* #neg=2,773 #pos=1,820 */
%   | | | else return 0.03280320341691444;  // std dev = 7.294, 231.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=88 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.05456644441708753;  // std dev = 4.083, 74.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=44 */
%   | | | else return 0.08824727783305954;  // std dev = 3.135, 55.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=38 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then return 0.018705583415069154;  // std dev = 0.395, 415.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=81 */
%   | else return 0.007211478335850151;  // std dev = 0.384, 199.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.037088557377103905;  // std dev = 0.489, 4,607.000 (wgt'ed) examples reached here.  /* #neg=2,777 #pos=1,830 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.028192318690007417;  // std dev = 4.003, 81.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=22 */
%   | | | else return 0.04506172703579589;  // std dev = 6.121, 153.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=66 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.23773913985515102;  // std dev = 0.178, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.028505618812450433;  // std dev = 4.035, 68.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=36 */
%   | | | else return 0.06946345789325588;  // std dev = 3.167, 58.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=43 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( title(M, L), venue(M, B) )
%   | | then return 0.033257311466353356;  // std dev = 0.409, 288.000 (wgt'ed) examples reached here.  /* #neg=226 #pos=62 */
%   | | else return -0.021938316148719973;  // std dev = 0.366, 126.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=20 */
%   | else return 0.0052220582623703745;  // std dev = 0.380, 200.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=35 */


Results
   AUC ROC   = 0.605771
   AUC PR    = 0.441618
   CLL	      = -0.625725
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total learning time: 11170.551300048828 seconds
Total inference time: 3.22 seconds
AUC ROC: 0.605771


Results scoring model
   AUC ROC   = 0.566144
   AUC PR    = 0.444586
   CLL	      = -0.64879
   Precision = 0.705882 at threshold = 0.5
   Recall    = 0.033978
   F1        = 0.064836


Total scoring time: 46.366 seconds
Refined model CLL: -0.64879


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.604803
   AUC PR    = 0.437855
   CLL	      = -0.626495
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total learning time: 22487.76603981209 seconds
Total inference time: 3.225 seconds
AUC ROC: 0.604803
Total revision time: 22487.76603981209
Best scored revision CLL: -0.64874


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 18:38:45
{'AUC ROC': 0.604803, 'AUC PR': 0.437855, 'CLL': -0.626495, 'Precision': [0.578947, 0.5], 'Recall': 0.059783, 'F1': 0.108374, 'Learning time': 22487.76603981209, 'Inference time': 3.225, 'parameter_0.8': {'AUC ROC': 0.604803, 'AUC PR': 0.437855, 'CLL': -0.626495, 'Precision': [0.578947, 0.5], 'Recall': 0.059783, 'F1': 0.108374, 'Learning time': 11224.65273976326, 'Inference time': 3.225}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.25632720445539525;  // std dev = 0.490, 4,611.000 (wgt'ed) examples reached here.  /* #neg=2,775 #pos=1,836 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.06594114289172016;  // std dev = 3.560, 77.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=16 */
%   | | | else return 0.2895214841191214;  // std dev = 6.126, 153.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=66 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.4474346493852255;  // std dev = 3.682, 56.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=33 */
%   | | | else return 0.25814893509951237;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.5166855204653651;  // std dev = 3.036, 41.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=27 */
%   | | | else return 0.8055173561521439;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.056216567949754055;  // std dev = 0.399, 414.000 (wgt'ed) examples reached here.  /* #neg=332 #pos=82 */
%   | else return 0.033148935099511376;  // std dev = 0.380, 200.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=35 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.22217627681494803;  // std dev = 0.490, 4,611.000 (wgt'ed) examples reached here.  /* #neg=2,775 #pos=1,836 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.05772306439192216;  // std dev = 3.560, 77.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=16 */
%   | | | else return 0.25050466106844205;  // std dev = 6.126, 153.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=66 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordauthor(I, G) )
%   | | | then return 0.5945487151792527;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.3314846862333862;  // std dev = 4.042, 66.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=35 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.4415500313258421;  // std dev = 3.036, 41.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=27 */
%   | | | else return 0.6773408397065112;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.049234627151549526;  // std dev = 0.399, 414.000 (wgt'ed) examples reached here.  /* #neg=332 #pos=82 */
%   | else return 0.029065632996707808;  // std dev = 0.380, 200.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=35 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.18760884984574497;  // std dev = 0.490, 4,611.000 (wgt'ed) examples reached here.  /* #neg=2,775 #pos=1,836 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.0502109276015882;  // std dev = 3.560, 77.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=16 */
%   | | | else return 0.21039415601814743;  // std dev = 6.126, 153.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=66 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordauthor(I, G) )
%   | | | then return 0.4809229690748493;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.27348169544609624;  // std dev = 4.039, 66.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=35 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.35737328437183385;  // std dev = 3.036, 41.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=27 */
%   | | | else return 0.525995951478812;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.06810729983572977;  // std dev = 0.415, 63.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=14 */
%   | else return 0.03365957464673679;  // std dev = 0.390, 551.000 (wgt'ed) examples reached here.  /* #neg=448 #pos=103 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.15509902020225078;  // std dev = 0.489, 4,607.000 (wgt'ed) examples reached here.  /* #neg=2,777 #pos=1,830 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.028160579101480628;  // std dev = 4.003, 81.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=22 */
%   | | | else return 0.1720667306666075;  // std dev = 6.126, 153.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=66 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.25865530160520805;  // std dev = 3.490, 50.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=29 */
%   | | | else return 0.15713677624061265;  // std dev = 2.208, 21.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=10 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.27732083200941793;  // std dev = 3.036, 41.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=27 */
%   | | | else return 0.3953438564084147;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.05901833777978034;  // std dev = 0.415, 63.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=14 */
%   | else return 0.029240298373252392;  // std dev = 0.390, 551.000 (wgt'ed) examples reached here.  /* #neg=448 #pos=103 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1255325628686841;  // std dev = 0.489, 4,607.000 (wgt'ed) examples reached here.  /* #neg=2,777 #pos=1,830 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.022936589255178087;  // std dev = 4.003, 81.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=22 */
%   | | | else return 0.13767913104042115;  // std dev = 6.126, 153.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=66 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.5529079820725681;  // std dev = 0.231, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.15751367012828132;  // std dev = 4.064, 68.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=36 */
%   | | | else return 0.23145250219851563;  // std dev = 3.187, 58.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=43 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( title(M, L), venue(M, B) )
%   | | then return 0.05027013932771747;  // std dev = 0.411, 288.000 (wgt'ed) examples reached here.  /* #neg=226 #pos=62 */
%   | | else return -0.005302033442492795;  // std dev = 0.366, 126.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=20 */
%   | else return 0.01670271830562647;  // std dev = 0.380, 200.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=35 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.10023206554881016;  // std dev = 0.489, 4,611.000 (wgt'ed) examples reached here.  /* #neg=2,775 #pos=1,836 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.0011840660503903235;  // std dev = 3.560, 77.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=16 */
%   | | | else return 0.1083320689355262;  // std dev = 6.126, 153.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=66 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.18228782995217854;  // std dev = 3.536, 58.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=38 */
%   | | | else return -0.05391803818097238;  // std dev = 1.974, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.16032097292802638;  // std dev = 2.991, 38.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=22 */
%   | | | else return 0.24649067574129715;  // std dev = 0.972, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.03056004349367882;  // std dev = 0.396, 415.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=81 */
%   | else return 0.010469177025106182;  // std dev = 0.385, 199.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.07895355192754888;  // std dev = 0.489, 4,607.000 (wgt'ed) examples reached here.  /* #neg=2,777 #pos=1,830 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.03989423986398169;  // std dev = 6.927, 212.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=76 */
%   | | | else return 0.198284450989399;  // std dev = 2.335, 22.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.37797102398832205;  // std dev = 0.211, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.08561790326567116;  // std dev = 4.059, 71.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=41 */
%   | | | else return 0.14017089031009505;  // std dev = 3.141, 55.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=38 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then if ( haswordtitle(M, N), haswordauthor(P, N) )
%   | | then return 0.018888639164858993;  // std dev = 0.390, 358.000 (wgt'ed) examples reached here.  /* #neg=291 #pos=67 */
%   | | else return 0.07296023640473207;  // std dev = 0.429, 57.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=14 */
%   | else return 0.008983994543239254;  // std dev = 0.385, 199.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.06159750174331429;  // std dev = 0.489, 4,611.000 (wgt'ed) examples reached here.  /* #neg=2,775 #pos=1,836 */
%   | | else if ( haswordauthor(F, C) )
%   | | | then return -0.3562660977351617;  // std dev = 7.45e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.04757687422278106;  // std dev = 7.064, 227.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=82 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.09811074541574652;  // std dev = 3.581, 56.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=33 */
%   | | | else return -0.01338890013445421;  // std dev = 1.901, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.08543003989962195;  // std dev = 2.999, 41.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=27 */
%   | | | else return 0.1705077111149344;  // std dev = 0.972, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.022555616799119816;  // std dev = 0.396, 415.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=81 */
%   | else return 0.007701343989732189;  // std dev = 0.385, 199.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( haswordtitle(E, C) )
%   | | then return 0.24988370429254245;  // std dev = 0.472, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | else return 0.242654521164623;  // std dev = 0.418, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), venue(H, A) )
%   | | | then return 0.21100471259726578;  // std dev = 3.969, 64.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=36 */
%   | | | else return -0.14660710066380347;  // std dev = 3.360, 72.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=16 */
%   | | else if ( haswordtitle(I, C) )
%   | | | then return 0.047191456567571954;  // std dev = 33.453, 4,693.000 (wgt'ed) examples reached here.  /* #neg=2,833 #pos=1,860 */
%   | | | else return 0.06366478324243716;  // std dev = 5.063, 124.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=78 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then return 0.035653000483772866;  // std dev = 0.410, 288.000 (wgt'ed) examples reached here.  /* #neg=226 #pos=62 */
%   | | else return -0.015125579768381645;  // std dev = 0.366, 126.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=20 */
%   | else return 0.004823015099833687;  // std dev = 0.380, 200.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=35 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.03694583887202574;  // std dev = 0.488, 4,607.000 (wgt'ed) examples reached here.  /* #neg=2,777 #pos=1,830 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.03122135750823439;  // std dev = 4.003, 81.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=22 */
%   | | | else return 0.04854122097343629;  // std dev = 6.104, 153.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=66 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.0620674226376875;  // std dev = 3.591, 56.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=33 */
%   | | | else return -0.025631089585468114;  // std dev = 1.901, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.04950336686199319;  // std dev = 3.000, 41.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=27 */
%   | | | else return 0.13170133545436655;  // std dev = 0.972, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.018178773565335798;  // std dev = 0.395, 415.000 (wgt'ed) examples reached here.  /* #neg=334 #pos=81 */
%   | else return 0.0019528971752301911;  // std dev = 0.385, 199.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=36 */


Results
   AUC ROC   = 0.608255
   AUC PR    = 0.443557
   CLL	      = -0.625896
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total learning time: 10942.037272930145 seconds
Total inference time: 3.272 seconds
AUC ROC: 0.608255


Dataset: 3_imdb_cora, Fold: 1, Type: Scratch (RDN-B), Time: 21:41:11
{'AUC ROC': 0.608255, 'AUC PR': 0.443557, 'CLL': -0.625896, 'Precision': [0.578947, 0.5], 'Recall': 0.059783, 'F1': 0.108374, 'Learning time': 10942.037272930145, 'Inference time': 3.272}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.2559515161947286;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.10324697431519789;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.29692444530359235;  // std dev = 6.947, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.4765699877310918;  // std dev = 4.235, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return 0.24703782398840124;  // std dev = 2.068, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.48777856472914083;  // std dev = 3.549, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.7711924133603816;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.05551735615214257;  // std dev = 0.398, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.03153603187370529;  // std dev = 0.379, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.22222965384560173;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.06915052434230415;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.2568082465168603;  // std dev = 6.947, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.414387820861306;  // std dev = 4.212, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return 0.17843323178848147;  // std dev = 2.069, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.4206995586697572;  // std dev = 3.536, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.6497281345945147;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.04994835668198882;  // std dev = 0.398, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.024812622309081725;  // std dev = 0.379, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.18771929258357145;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.05884198209418326;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.21542855580470746;  // std dev = 6.947, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.5722990304781012;  // std dev = 0.327, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.2863120680641541;  // std dev = 4.616, 88.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=49 */
%   | | | else return 0.3841214314529836;  // std dev = 3.821, 75.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=53 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordauthor(M, K) )
%   | | then return 0.13632258622435228;  // std dev = 0.454, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | else return 0.03293643442142861;  // std dev = 0.390, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | else return 0.02150599900274675;  // std dev = 0.378, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.15525226700208614;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.028767305670366766;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.17585398336442742;  // std dev = 6.947, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.2584708013373242;  // std dev = 4.187, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return 0.0886880360978348;  // std dev = 2.077, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.2783951685096814;  // std dev = 3.519, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.4097440870537006;  // std dev = 1.349, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.03867000132834715;  // std dev = 0.398, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.016872303430865272;  // std dev = 0.379, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1256109426421042;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.08260567652739077;  // std dev = 7.763, 270.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=95 */
%   | | | else return 0.27304033640502706;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.37183378648303617;  // std dev = 0.327, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.16472017585460588;  // std dev = 4.599, 89.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=50 */
%   | | | else return 0.23260462533244833;  // std dev = 3.764, 74.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=52 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then if ( title(N, M), venue(N, B) )
%   | | then return 0.04420526608238203;  // std dev = 0.404, 360.000 (wgt'ed) examples reached here.  /* #neg=286 #pos=74 */
%   | | else return 0.012175409645362232;  // std dev = 0.383, 172.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=31 */
%   | else return 0.013752491817378944;  // std dev = 0.378, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.10016792098007679;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.001825019944045801;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.11673645072487955;  // std dev = 6.928, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.15362616291594897;  // std dev = 4.178, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return 0.03294223655372392;  // std dev = 2.078, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.15414612147298581;  // std dev = 3.510, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.2535928892859441;  // std dev = 1.349, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.030526988117540486;  // std dev = 0.397, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.009029322167080224;  // std dev = 0.379, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.07901111444727847;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.009234377456444577;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.09076611960288185;  // std dev = 6.927, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.3159558521825125;  // std dev = 0.318, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.08321434602042742;  // std dev = 4.558, 88.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=49 */
%   | | | else return 0.13626042081390982;  // std dev = 3.766, 75.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=53 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.1172839031114403;  // std dev = 0.452, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | else return -0.09493753968697652;  // std dev = 0.258, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | else return 0.017358504811084946;  // std dev = 0.389, 697.000 (wgt'ed) examples reached here.  /* #neg=567 #pos=130 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.06172574127613094;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.013363132973430773;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.06992016399847384;  // std dev = 6.927, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.1021021851005778;  // std dev = 3.902, 67.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=41 */
%   | | | else return -0.020812016588192303;  // std dev = 2.519, 27.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=13 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.0941472616480617;  // std dev = 3.489, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.17099612592506905;  // std dev = 1.348, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.023075162882601783;  // std dev = 0.397, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.005247756190569364;  // std dev = 0.378, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.04797599302029758;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.016309598525510574;  // std dev = 7.740, 270.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=95 */
%   | | | else return 0.14697608113692365;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.19958358400653095;  // std dev = 0.319, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.04090795168017022;  // std dev = 4.561, 88.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=49 */
%   | | | else return 0.08792951950346417;  // std dev = 3.744, 75.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=53 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then if ( haswordauthor(N, L) )
%   | | then return 0.09670689026147321;  // std dev = 0.452, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | else return 0.01125595771590524;  // std dev = 0.389, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | else return 0.0037427074383644477;  // std dev = 0.378, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.03699474740250874;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.022501310722410846;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.04504333806752579;  // std dev = 6.916, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.06451906120277663;  // std dev = 4.133, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return -0.0722740070086766;  // std dev = 2.083, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.049060907653032525;  // std dev = 3.488, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.12409810821928961;  // std dev = 1.348, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.01737267567369256;  // std dev = 0.397, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.0024490361213601575;  // std dev = 0.378, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */


Results
   AUC ROC   = 0.604647
   AUC PR    = 0.440057
   CLL	      = -0.62499
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total learning time: 14812.3666472435 seconds
Total inference time: 3.199 seconds
AUC ROC: 0.604647


Results scoring model
   AUC ROC   = 0.566294
   AUC PR    = 0.442778
   CLL	      = -0.648833
   Precision = 0.703704 at threshold = 0.5
   Recall    = 0.035863
   F1        = 0.068247


Total scoring time: 54.888 seconds
Parameter learned model CLL: -0.648833


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true,true': [0.489, 3, 2], 'true,true,false,true': [4.344, 77, 25], 'true,true,false,false': [6.947, 110, 86], 'true,false,true,true': [4.235, 29, 47], 'true,false,true,false': [2.068, 11, 7], 'true,false,false,true': [3.549, 20, 34], 'true,false,false,false': [1.351, 2, 21], 'false,true': [0.398, 427, 105], 'false,false': [0.379, 205, 43]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true,true': [0.489, 3, 2], 'true,true,false,true': [4.344, 77, 25], 'true,true,false,false': [6.947, 110, 86], 'true,false,true,true': [4.212, 29, 47], 'true,false,true,false': [2.069, 11, 7], 'true,false,false,true': [3.536, 20, 34], 'true,false,false,false': [1.351, 2, 21], 'false,true': [0.398, 427, 105], 'false,false': [0.379, 205, 43]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,true': 'haswordauthor(M, K)'}, {'true,true,true': [0.489, 3, 2], 'true,true,false,true': [4.344, 77, 25], 'true,true,false,false': [6.947, 110, 86], 'true,false,true': [0.327, 1, 7], 'true,false,false,true': [4.616, 39, 49], 'true,false,false,false': [3.821, 22, 53], 'false,true,true': [0.454, 39, 16], 'false,true,false': [0.39, 388, 89], 'false,false': [0.378, 205, 43]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true,true': [0.489, 3, 2], 'true,true,false,true': [4.344, 77, 25], 'true,true,false,false': [6.947, 110, 86], 'true,false,true,true': [4.187, 29, 47], 'true,false,true,false': [2.077, 11, 7], 'true,false,false,true': [3.519, 20, 34], 'true,false,false,false': [1.349, 2, 21], 'false,true': [0.398, 427, 105], 'false,false': [0.379, 205, 43]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(A, L), haswordtitle(M, L)', 'false,true': 'title(N, M), venue(N, B)'}, {'true,true,true': [0.489, 3, 2], 'true,true,false,true': [7.763, 175, 95], 'true,true,false,false': [2.619, 12, 16], 'true,false,true': [0.327, 1, 7], 'true,false,false,true': [4.599, 39, 50], 'true,false,false,false': [3.764, 22, 52], 'false,true,true': [0.404, 286, 74], 'false,true,false': [0.383, 141, 31], 'false,false': [0.378, 205, 43]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true,true': [0.489, 3, 2], 'true,true,false,true': [4.344, 77, 25], 'true,true,false,false': [6.928, 110, 86], 'true,false,true,true': [4.178, 29, 47], 'true,false,true,false': [2.078, 11, 7], 'true,false,false,true': [3.51, 20, 34], 'true,false,false,false': [1.349, 2, 21], 'false,true': [0.397, 427, 105], 'false,false': [0.379, 205, 43]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false,true': 'haswordtitle(M, K)'}, {'true,true,true': [0.489, 3, 2], 'true,true,false,true': [4.344, 77, 25], 'true,true,false,false': [6.927, 110, 86], 'true,false,true': [0.318, 1, 7], 'true,false,false,true': [4.558, 39, 49], 'true,false,false,false': [3.766, 22, 53], 'false,true,true': [0.452, 39, 16], 'false,true,false': [0.258, 26, 2], 'false,false': [0.389, 567, 130]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'title(I, H), venue(I, B)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true': [0.489, 3, 2], 'true,true,false,true': [4.344, 77, 25], 'true,true,false,false': [6.927, 110, 86], 'true,false,true,true': [3.902, 26, 41], 'true,false,true,false': [2.519, 14, 13], 'true,false,false,true': [3.489, 20, 34], 'true,false,false,false': [1.348, 2, 21], 'false,true': [0.397, 427, 105], 'false,false': [0.378, 205, 43]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordtitle(M, L)', 'false,true': 'haswordauthor(N, L)'}, {'true,true,true': [0.489, 3, 2], 'true,true,false,true': [7.74, 175, 95], 'true,true,false,false': [2.619, 12, 16], 'true,false,true': [0.319, 1, 7], 'true,false,false,true': [4.561, 39, 49], 'true,false,false,false': [3.744, 22, 53], 'false,true,true': [0.452, 39, 16], 'false,true,false': [0.389, 388, 89], 'false,false': [0.378, 205, 43]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true,true': [0.489, 3, 2], 'true,true,false,true': [4.344, 77, 25], 'true,true,false,false': [6.916, 110, 86], 'true,false,true,true': [4.133, 29, 47], 'true,false,true,false': [2.083, 11, 7], 'true,false,false,true': [3.488, 20, 34], 'true,false,false,false': [1.348, 2, 21], 'false,true': [0.397, 427, 105], 'false,false': [0.378, 205, 43]}]]
[{'': [0.24062821188505737, 0.1537409598948076], 'true': [0.23929845422110457, 0.23111384699566015], 'true,true': [0.23955568756914178, 0.23373947119499386], 'true,true,false': [0.18502499038831322, 0.2462515618492307], 'true,false': [0.24445450430058835, 0.20408163265306092], 'true,false,true': [0.23597645429362898, 0.23765432098765438], 'true,false,false': [0.23319615912208677, 0.07939508506616269], 'false': [0.15841412742382383, 0.14332401144641108]}, {'': [0.2399129948937479, 0.15371160841346576], 'true': [0.23918272629623266, 0.22582369812454695], 'true,true': [0.23944903274422905, 0.23322268729789866], 'true,true,false': [0.18502499038831138, 0.24625156184923094], 'true,false': [0.2428694722095544, 0.19711122261596048], 'true,false,true': [0.23340525381542415, 0.23781602483406653], 'true,false,false': [0.23158147311422042, 0.07939508506616208], 'false': [0.15838031736159208, 0.14326555119473272]}, {'': [0.23916397065149947, 0.15367763995572667], 'true': [0.23903956932964793, 0.21984154008871193], 'true,true': [0.23943391157955712, 0.2308147355842156], 'true,true,false': [0.1850249903883126, 0.2462515618492287], 'true,false': [0.107034079698554, 0.22266125392652378], 'true,false,false': [0.2421355295935192, 0.19464660832272104], 'false': [0.1583776509162067, 0.14326166910389898], 'false,true': [0.20605579348254136, 0.15177513676470572]}, {'': [0.23866316294152842, 0.15347453140245995], 'true': [0.23892345831564185, 0.21696416109390143], 'true,true': [0.23933492148457614, 0.23016528052236868], 'true,true,false': [0.18502499038831116, 0.24625156184922922], 'true,false': [0.2368816765838474, 0.1880298599420893], 'true,false,true': [0.230689611621538, 0.2397196717170268], 'true,false,false': [0.22925894729632912, 0.07913195033448861], 'false': [0.15805415421201918, 0.14332643223084868]}, {'': [0.23829352569886886, 0.1534423349290726], 'true': [0.23880741891299592, 0.21403293896192838], 'true,true': [0.23931962975793447, 0.22835219528472686], 'true,true,false': [0.22322885482768134, 0.244897959183674], 'true,false': [0.10662926259332528, 0.21785025495943613], 'true,false,false': [0.23767784550951082, 0.19148737070266086], 'false': [0.15808641577015173, 0.1432045521512037], 'false,true': [0.16318831457515948, 0.14671379695778036]}, {'': [0.23808851514864118, 0.15337726356269635], 'true': [0.23871790449215596, 0.21289271948516747], 'true,true': [0.2392829383344157, 0.22735316284216983], 'true,true,false': [0.18502499038831155, 0.24486138138279578], 'true,false': [0.23387306325943505, 0.18571666913397972], 'true,false,true': [0.22965609588280034, 0.23990239443332698], 'true,false,false': [0.22818612187919932, 0.07907017462627065], 'false': [0.15794473169821296, 0.14326409796824358]}, {'': [0.23794333084375896, 0.15334485976554957], 'true': [0.23864158862638687, 0.21179762416047035], 'true,true': [0.2392422081331794, 0.2266046014404892], 'true,true,false': [0.18502499038831266, 0.24482011763852876], 'true,false': [0.1009854189222239, 0.21520571153313064], 'true,false,false': [0.23612439090707393, 0.18914197452892448], 'false': [0.1681286504609275, 0.1514989601659356], 'false,true': [0.20469371936615835, 0.06645998937707294]}, {'': [0.23783895742734784, 0.15302688506336337], 'true': [0.23858128569610276, 0.21085095835385753], 'true,true': [0.23922012599162146, 0.225896776987013], 'true,true,false': [0.1850249903883116, 0.24479268445215938], 'true,false': [0.232591361971592, 0.18291963498550426], 'true,false,true': [0.22724215474378273, 0.23509692314327613], 'true,false,false': [0.2253952952345053, 0.07905247843121085], 'false': [0.15754226219419204, 0.14312390572799324]}, {'': [0.23775871382950436, 0.1530000918229778], 'true': [0.23853785467896732, 0.20980667909648806], 'true,true': [0.23919595546195788, 0.22551757431463915], 'true,true,false': [0.2219035135675205, 0.24489795918367332], 'true,false': [0.10206514655551965, 0.2142160131279236], 'true,false,false': [0.23644187987774992, 0.18694397906598426], 'false': [0.1575898839859508, 0.14297197626391345], 'false,true': [0.20437237274342696, 0.15144078495188998]}, {'': [0.2377014636832402, 0.15283581947219646], 'true': [0.23849520678431757, 0.20942120526431815], 'true,true': [0.23919230683383136, 0.2248659732002652], 'true,true,false': [0.18502499038831188, 0.2440379602600117], 'true,false': [0.23074483567416088, 0.18278567527880712], 'true,false,true': [0.22473991422917441, 0.24096981964599293], 'true,false,false': [0.2252865745574383, 0.07905223576168463], 'false': [0.15725456606145155, 0.1432049922739717]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;true;true
0;true,true,false;title(F, D), venue(F, B).;true;true
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;true;true
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
0;false;haswordvenue(A, M), haswordtitle(N, M).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;true;true
1;true,true,false;title(F, D), venue(F, A).;true;true
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;true;true
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;true;true
1;false;haswordvenue(B, M), haswordtitle(N, M).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;true;true
2;true,true,false;title(F, D), venue(F, B).;true;true
2;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;true
2;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
2;false;haswordvenue(A, K), haswordtitle(L, K).;true;true
2;false,true;haswordauthor(M, K).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;true;true
3;true,true,false;title(F, D), venue(F, A).;true;true
3;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;true;true
3;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;true;true
3;false;haswordvenue(B, M), haswordtitle(N, M).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;true;true
4;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;true;true
4;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;true;true
4;false;haswordvenue(A, L), haswordtitle(M, L).;true;true
4;false,true;title(N, M), venue(N, B).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;true;true
5;true,true,false;title(F, D), venue(F, B).;true;true
5;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
5;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;true;true
5;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;true;true
5;false;haswordvenue(B, M), haswordtitle(N, M).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;true;true
6;true,true,false;title(F, D), venue(F, A).;true;true
6;true,false;haswordvenue(B, G), haswordauthor(H, G).;true;true
6;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
6;false;haswordvenue(B, K), haswordauthor(L, K).;true;true
6;false,true;haswordtitle(M, K).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, A).;true;true
7;true,true,false;title(F, D), venue(F, B).;true;true
7;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;true;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;true;true
7;false;haswordvenue(A, L), haswordtitle(M, L).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, B).;true;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;true;true
8;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
8;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;true;true
8;false;haswordvenue(B, L), haswordtitle(M, L).;true;true
8;false,true;haswordauthor(N, L).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;true;true
9;true,true,false;title(F, D), venue(F, A).;true;true
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;true;true
9;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
9;false;haswordvenue(A, M), haswordtitle(N, M).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.2559515161947286;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.10324697431519789;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.29692444530359235;  // std dev = 6.947, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.4765699877310918;  // std dev = 4.235, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return 0.24703782398840124;  // std dev = 2.068, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.48777856472914083;  // std dev = 3.549, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.7711924133603816;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.05551735615214257;  // std dev = 0.398, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.03153603187370529;  // std dev = 0.379, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.22222965384560173;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.06915052434230415;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.2568082465168603;  // std dev = 6.947, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.414387820861306;  // std dev = 4.212, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return 0.17843323178848147;  // std dev = 2.069, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.4206995586697572;  // std dev = 3.536, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.6497281345945147;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.04994835668198882;  // std dev = 0.398, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.024812622309081725;  // std dev = 0.379, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.18771929258357145;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.05884198209418326;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.21542855580470746;  // std dev = 6.947, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.5722990304781012;  // std dev = 0.327, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.2863120680641541;  // std dev = 4.616, 88.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=49 */
%   | | | else return 0.3841214314529836;  // std dev = 3.821, 75.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=53 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordauthor(M, K) )
%   | | then return 0.13632258622435228;  // std dev = 0.454, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | else return 0.03293643442142861;  // std dev = 0.390, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | else return 0.02150599900274675;  // std dev = 0.378, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.15525226700208614;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.028767305670366766;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.17585398336442742;  // std dev = 6.947, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.2584708013373242;  // std dev = 4.187, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return 0.0886880360978348;  // std dev = 2.077, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.2783951685096814;  // std dev = 3.519, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.4097440870537006;  // std dev = 1.349, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.03867000132834715;  // std dev = 0.398, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.016872303430865272;  // std dev = 0.379, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1256109426421042;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.08260567652739077;  // std dev = 7.763, 270.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=95 */
%   | | | else return 0.27304033640502706;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.41339778928724535;  // std dev = 0.320, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.15698383522322057;  // std dev = 4.573, 88.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=49 */
%   | | | else return 0.23634331204778694;  // std dev = 3.775, 75.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=53 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then if ( haswordauthor(N, L) )
%   | | then return 0.11261817381670416;  // std dev = 0.454, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | else return 0.024767435406165248;  // std dev = 0.390, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | else return 0.013752491817378944;  // std dev = 0.378, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.10016792098007679;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.001825019944045801;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.11673645072487955;  // std dev = 6.928, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.1629583280675372;  // std dev = 4.152, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return -0.006440108214581525;  // std dev = 2.078, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.15460819084703697;  // std dev = 3.500, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.25243080443985855;  // std dev = 1.348, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.02953417275368742;  // std dev = 0.397, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.01084946641508356;  // std dev = 0.379, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.07901111444727847;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.009234377456444577;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.09076611960288185;  // std dev = 6.927, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.2724701027177356;  // std dev = 0.320, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.0879908842792695;  // std dev = 4.562, 88.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=49 */
%   | | | else return 0.13544763528445875;  // std dev = 3.757, 75.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=53 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordauthor(M, K) )
%   | | then return 0.0913620380060199;  // std dev = 0.453, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | else return 0.018473246263962493;  // std dev = 0.390, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | else return 0.00800021950258587;  // std dev = 0.378, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.06172574127613094;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.013363132973430773;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.06992016399847384;  // std dev = 6.927, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.23221378563882145;  // std dev = 0.317, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.05696803918465357;  // std dev = 4.557, 88.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=49 */
%   | | | else return 0.11248076406235995;  // std dev = 3.752, 75.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=53 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( title(M, L), venue(M, A) )
%   | | then return 0.031156087446032273;  // std dev = 0.402, 360.000 (wgt'ed) examples reached here.  /* #neg=286 #pos=74 */
%   | | else return 0.0039030432524403374;  // std dev = 0.385, 172.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=31 */
%   | else return 0.006428677132596614;  // std dev = 0.379, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.04797599302029758;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.016309598525510574;  // std dev = 7.740, 270.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=95 */
%   | | | else return 0.14697608113692365;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.07257330044036897;  // std dev = 4.140, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return -0.039704252463204005;  // std dev = 2.083, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.06500004735995658;  // std dev = 3.492, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.14912569576461038;  // std dev = 1.348, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(B, N), haswordauthor(P, N) )
%   | then return 0.042093507091818305;  // std dev = 0.410, 83.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=18 */
%   | else return 0.011534527105041128;  // std dev = 0.389, 697.000 (wgt'ed) examples reached here.  /* #neg=567 #pos=130 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.03699474740250874;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.022501310722410846;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.04504333806752579;  // std dev = 6.916, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.054989445010260804;  // std dev = 4.140, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return -0.03001517435333058;  // std dev = 2.083, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.04916664517851726;  // std dev = 3.493, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.12334469897431707;  // std dev = 1.348, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.018097707671396304;  // std dev = 0.397, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 9.332204133179796E-4;  // std dev = 0.378, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */


Results
   AUC ROC   = 0.604489
   AUC PR    = 0.439808
   CLL	      = -0.62509
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total learning time: 14698.738874912262 seconds
Total inference time: 3.203 seconds
AUC ROC: 0.604489


Results scoring model
   AUC ROC   = 0.566179
   AUC PR    = 0.442647
   CLL	      = -0.648911
   Precision = 0.703704 at threshold = 0.5
   Recall    = 0.035863
   F1        = 0.068247


Total scoring time: 56.253 seconds
Refined model CLL: -0.648911


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.604647
   AUC PR    = 0.440057
   CLL	      = -0.62499
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total learning time: 29622.24652215576 seconds
Total inference time: 3.199 seconds
AUC ROC: 0.604647
Total revision time: 29622.24652215576
Best scored revision CLL: -0.648833


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 05:55:06
{'AUC ROC': 0.604647, 'AUC PR': 0.440057, 'CLL': -0.62499, 'Precision': [0.578947, 0.5], 'Recall': 0.059783, 'F1': 0.108374, 'Learning time': 29622.24652215576, 'Inference time': 3.199, 'parameter_1.0': {'AUC ROC': 0.604647, 'AUC PR': 0.440057, 'CLL': -0.62499, 'Precision': [0.578947, 0.5], 'Recall': 0.059783, 'F1': 0.108374, 'Learning time': 14812.3666472435, 'Inference time': 3.199}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.2559515161947286;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.10324697431519789;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.29692444530359235;  // std dev = 6.947, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.4765699877310918;  // std dev = 4.235, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return 0.24703782398840124;  // std dev = 2.068, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.48777856472914083;  // std dev = 3.549, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.7711924133603816;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.05551735615214257;  // std dev = 0.398, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.03153603187370529;  // std dev = 0.379, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.22222965384560173;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.06915052434230415;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.2568082465168603;  // std dev = 6.947, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.414387820861306;  // std dev = 4.212, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return 0.17843323178848147;  // std dev = 2.069, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.4206995586697572;  // std dev = 3.536, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.6497281345945147;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.04994835668198882;  // std dev = 0.398, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.024812622309081725;  // std dev = 0.379, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.18771929258357145;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.05884198209418326;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.21542855580470746;  // std dev = 6.947, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.33904383181810743;  // std dev = 4.207, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return 0.1472560332512732;  // std dev = 2.069, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.3427971745112513;  // std dev = 3.533, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.5066945370494556;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.04362485237097873;  // std dev = 0.398, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.02150599900274675;  // std dev = 0.378, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.15525226700208614;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.028767305670366766;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.17585398336442742;  // std dev = 6.947, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.2749297118443762;  // std dev = 4.184, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return 0.07852321241691132;  // std dev = 2.069, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.2692180265923337;  // std dev = 3.518, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.38118293431064965;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.039078555963073074;  // std dev = 0.398, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.01610734391500163;  // std dev = 0.378, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1256109426421042;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.08260567652739077;  // std dev = 7.763, 270.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=95 */
%   | | | else return 0.27304033640502706;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.42287208361359274;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return 0.37274375036912366;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.1874415682259186;  // std dev = 5.853, 158.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=98 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then if ( haswordauthor(N, L) )
%   | | then return 0.12576801234907317;  // std dev = 0.454, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | else return 0.02333080827479791;  // std dev = 0.390, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | else return 0.013706296500967195;  // std dev = 0.378, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.10016792098007679;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.001825019944045801;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.11673645072487955;  // std dev = 6.928, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.1585356900032452;  // std dev = 4.162, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return 0.018942334940421822;  // std dev = 2.069, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.4053447876493304;  // std dev = 0.150, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.17368443679685083;  // std dev = 3.746, 74.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=52 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.029900104546692875;  // std dev = 0.398, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.010297879084538391;  // std dev = 0.379, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.07901111444727847;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.009234377456444577;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.09076611960288185;  // std dev = 6.927, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.12286416651286455;  // std dev = 4.143, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return -0.01855653840436074;  // std dev = 2.070, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.11759818338695599;  // std dev = 3.494, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.2045192971215003;  // std dev = 1.348, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.04637193539458457;  // std dev = 0.410, 83.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=18 */
%   | else return 0.017249467733112825;  // std dev = 0.389, 697.000 (wgt'ed) examples reached here.  /* #neg=567 #pos=130 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.06172574127613094;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.013363132973430773;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.06992016399847384;  // std dev = 6.927, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.09271897380758046;  // std dev = 4.143, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return -0.01408422060484025;  // std dev = 2.070, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.08838593649460881;  // std dev = 3.494, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.16420045620528673;  // std dev = 1.348, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.02315036821327006;  // std dev = 0.397, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.00525615789978861;  // std dev = 0.378, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.04797599302029758;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.016309598525510574;  // std dev = 7.740, 270.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=95 */
%   | | | else return 0.14697608113692365;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.07008502977886928;  // std dev = 4.144, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return -0.01070047169057555;  // std dev = 2.070, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return 0.30650696850204034;  // std dev = 0.187, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.0780227031364809;  // std dev = 3.730, 74.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=52 */
%   else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | then return 0.020506673906193092;  // std dev = 0.397, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.0029951770982198124;  // std dev = 0.379, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), venue(E, A) )
%   | | then return 0.5715929760608083;  // std dev = 0.295, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordtitle(F, C) )
%   | | | then return 0.2003033937608683;  // std dev = 1.867, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | | else return 0.2300101583769028;  // std dev = 1.104, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else if ( haswordtitle(G, C) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 0.03590887985991578;  // std dev = 36.962, 5,717.000 (wgt'ed) examples reached here.  /* #neg=3,449 #pos=2,268 */
%   | | | else return 0.023386270247382514;  // std dev = 8.102, 292.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=109 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return 0.14958879212653348;  // std dev = 0.883, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.046905632810541234;  // std dev = 5.885, 163.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=102 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then return 0.0178826482414912;  // std dev = 0.397, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.0017565289842140714;  // std dev = 0.378, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */


Results
   AUC ROC   = 0.605506
   AUC PR    = 0.441545
   CLL	      = -0.625065
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total learning time: 13434.71853685379 seconds
Total inference time: 3.221 seconds
AUC ROC: 0.605506


Dataset: 3_imdb_cora, Fold: 1, Type: Scratch (RDN-B), Time: 09:39:05
{'AUC ROC': 0.605506, 'AUC PR': 0.441545, 'CLL': -0.625065, 'Precision': [0.578947, 0.5], 'Recall': 0.059783, 'F1': 0.108374, 'Learning time': 13434.71853685379, 'Inference time': 3.221}


Starting fold 2

Target train facts examples: 33542
Target train pos examples: 2246
Target train neg examples: 4478

Target test facts examples: 9016
Target test pos  examples: 771
Target test neg examples: 544

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.6807295802607984;  // std dev = 7.959, 434.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=357 */
%   | | | else return -0.1228336322538954;  // std dev = 3.431, 631.000 (wgt'ed) examples reached here.  /* #neg=619 #pos=12 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.09344305274657114;  // std dev = 1.749, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | | else return 0.28368084999312904;  // std dev = 3.390, 47.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.25814893509951237;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.4831489350995123;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.5724346493852266;  // std dev = 1.690, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   else return 0.03358753159073964;  // std dev = 0.380, 171.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=30 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.576434006887333;  // std dev = 7.959, 434.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=357 */
%   | | | else return -0.10852847994728733;  // std dev = 3.431, 631.000 (wgt'ed) examples reached here.  /* #neg=619 #pos=12 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.08168328864042035;  // std dev = 1.749, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | | else return 0.24552773196596844;  // std dev = 3.390, 47.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.22373365448410584;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.4136573287083126;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.4876778839172629;  // std dev = 1.690, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   else return 0.02944955541611934;  // std dev = 0.380, 171.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=30 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.12800834120174848;  // std dev = 0.380, 1,065.000 (wgt'ed) examples reached here.  /* #neg=696 #pos=369 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.07076028829018174;  // std dev = 1.749, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | | else return 0.2064101104219833;  // std dev = 3.390, 47.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=20 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.3672603116404226;  // std dev = 1.794, 15.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=10 */
%   | | | else return -0.05734216920794117;  // std dev = 0.930, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.3444238777130529;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.3912569620992537;  // std dev = 1.690, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.1660903616598865;  // std dev = 0.465, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
%   | else return 0.008195624817781615;  // std dev = 0.365, 152.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=24 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.10752591361899266;  // std dev = 0.374, 1,065.000 (wgt'ed) examples reached here.  /* #neg=696 #pos=369 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.06080115416453141;  // std dev = 1.749, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | | else return 0.1690588431090709;  // std dev = 3.390, 47.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=20 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.2556530628982581;  // std dev = 2.001, 18.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | | | else return -0.20173920118467145;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.2814106402926482;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.3005711547884892;  // std dev = 1.690, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.14369743546741823;  // std dev = 0.465, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
%   | else return 0.007149411817831487;  // std dev = 0.365, 152.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=24 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.08943979468072237;  // std dev = 0.369, 1,065.000 (wgt'ed) examples reached here.  /* #neg=696 #pos=369 */
%   | | else return 0.11329964532264372;  // std dev = 0.478, 64.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=24 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, H), haswordauthor(I, H) )
%   | | | then return 0.1964486097966297;  // std dev = 1.998, 18.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | | | else return -0.17119256889204829;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.22203013053058127;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.22629823971521892;  // std dev = 1.690, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then if ( haswordauthor(N, L) )
%   | | then return 0.23503221304087507;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.013285565288360458;  // std dev = 0.371, 97.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
%   | else return -0.021819248920775868;  // std dev = 0.341, 60.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=8 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.073805373295858;  // std dev = 0.366, 1,065.000 (wgt'ed) examples reached here.  /* #neg=696 #pos=369 */
%   | | else return 0.09109889502653232;  // std dev = 0.478, 64.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=24 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.17531861789867617;  // std dev = 1.786, 15.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=10 */
%   | | | else return -0.06480994429059055;  // std dev = 0.880, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.17099913554885646;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.1698435867651014;  // std dev = 1.690, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordauthor(M, K) )
%   | | then return 0.19569553017505775;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.011568305793518256;  // std dev = 0.371, 97.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
%   | else return -0.018983506839438204;  // std dev = 0.341, 60.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=8 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.061192901898254444;  // std dev = 0.370, 1,129.000 (wgt'ed) examples reached here.  /* #neg=736 #pos=393 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.11520239109659428;  // std dev = 1.986, 18.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | | | else return -0.14025166532789574;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.12981560499048994;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.12813320688246746;  // std dev = 1.690, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordauthor(M, K) )
%   | | then return 0.15893094516971934;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else if ( title(N, L), venue(N, B) )
%   | | | then return 0.05939733696089962;  // std dev = 3.433, 70.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=15 */
%   | | | else return -0.11785134028777765;  // std dev = 0.981, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | else return -0.0165509927132036;  // std dev = 0.341, 60.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=8 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.04924134217136431;  // std dev = 0.361, 1,065.000 (wgt'ed) examples reached here.  /* #neg=696 #pos=369 */
%   | | else return 0.05956668761812612;  // std dev = 0.478, 64.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=24 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.1590919637416194;  // std dev = 0.752, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.06180275404189715;  // std dev = 2.026, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
%   | | | else return 0.08252501331644524;  // std dev = 2.113, 21.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordauthor(L, J) )
%   | | then return 0.12651331781586497;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else if ( title(M, K), venue(M, B) )
%   | | | then return 0.051462015261727605;  // std dev = 3.433, 70.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=15 */
%   | | | else return -0.10304420706852523;  // std dev = 0.981, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | else return -0.014456344991761566;  // std dev = 0.341, 60.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=8 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04038834276767205;  // std dev = 0.367, 1,129.000 (wgt'ed) examples reached here.  /* #neg=736 #pos=393 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.06905786595387425;  // std dev = 1.993, 18.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | | | else return -0.13105642856082092;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.07973882604113378;  // std dev = 1.484, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.07687239768757682;  // std dev = 1.687, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( title(M, L), venue(M, B) )
%   | | then if ( samebib(M, N), venue(N, A) )
%   | | | then return 0.4392923528349761;  // std dev = 2.461, 26.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=16 */
%   | | | else return -0.17674453899633571;  // std dev = 0.221, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else return -0.028485912379595753;  // std dev = 0.327, 38.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=6 */
%   | else return -0.01264662226737798;  // std dev = 0.341, 60.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=8 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.32088925241731947;  // std dev = 7.959, 434.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=357 */
%   | | | else return -0.1661442807379795;  // std dev = 3.431, 631.000 (wgt'ed) examples reached here.  /* #neg=619 #pos=12 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return -0.009279543027760129;  // std dev = 1.749, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | | else return 0.05496277900740532;  // std dev = 3.390, 47.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.0677362025340124;  // std dev = 1.792, 15.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=10 */
%   | | | else return -0.06993093846699638;  // std dev = 0.869, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.05982755895461467;  // std dev = 1.484, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.05930162257019889;  // std dev = 1.687, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   else return 0.00451878477706218;  // std dev = 0.357, 171.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=30 */


Results
   AUC ROC   = 0.747587
   AUC PR    = 0.747823
   CLL	      = -0.55681
   Precision = 0.744898 at threshold = 0.5
   Recall    = 0.946822
   F1        = 0.833809


Total learning time: 1222.1384160518646 seconds
Total inference time: 5.117 seconds
AUC ROC: 0.747587


Results scoring model
   AUC ROC   = 0.910597
   AUC PR    = 0.780073
   CLL	      = -0.394049
   Precision = 0.809322 at threshold = 0.5
   Recall    = 0.85078
   F1        = 0.829533


Total scoring time: 20.724 seconds
Parameter learned model CLL: -0.394049


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,true': 'samebib(E, F), venue(F, B)', 'true,true,false': 'title(G, D), venue(G, B)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'haswordtitle(I, J), haswordauthor(K, J)', 'true,false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true,true': [7.959, 77, 357], 'true,true,true,false': [3.431, 619, 12], 'true,true,false,true': [1.749, 13, 4], 'true,true,false,false': [3.39, 27, 20], 'true,false,true,true': [1.897, 9, 6], 'true,false,true,false': [1.195, 2, 5], 'true,false,false,true': [1.369, 3, 5], 'true,false,false,false': [1.69, 4, 10], 'false': [0.38, 141, 30]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,true': 'samebib(E, F), venue(F, B)', 'true,true,false': 'title(G, D), venue(G, B)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'haswordtitle(I, J), haswordauthor(K, J)', 'true,false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true,true': [7.959, 77, 357], 'true,true,true,false': [3.431, 619, 12], 'true,true,false,true': [1.749, 13, 4], 'true,true,false,false': [3.39, 27, 20], 'true,false,true,true': [1.897, 9, 6], 'true,false,true,false': [1.195, 2, 5], 'true,false,false,true': [1.369, 3, 5], 'true,false,false,false': [1.69, 4, 10], 'false': [0.38, 141, 30]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'title(I, H), venue(I, A)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true': [0.38, 696, 369], 'true,true,false,true': [1.749, 13, 4], 'true,true,false,false': [3.39, 27, 20], 'true,false,true,true': [1.794, 5, 10], 'true,false,true,false': [0.93, 5, 1], 'true,false,false,true': [1.491, 4, 5], 'true,false,false,false': [1.69, 4, 10], 'false,true': [0.465, 13, 6], 'false,false': [0.365, 128, 24]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false': 'haswordvenue(B, M), haswordauthor(N, M)'}, {'true,true,true': [0.374, 696, 369], 'true,true,false,true': [1.749, 13, 4], 'true,true,false,false': [3.39, 27, 20], 'true,false,true,true': [2.001, 7, 11], 'true,false,true,false': [0.0, 3, 0], 'true,false,false,true': [1.491, 4, 5], 'true,false,false,false': [1.69, 4, 10], 'false,true': [0.465, 13, 6], 'false,false': [0.365, 128, 24]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,false': 'haswordvenue(B, F), haswordtitle(G, F)', 'true,false,true': 'haswordtitle(G, H), haswordauthor(I, H)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordtitle(M, L)', 'false,true': 'haswordauthor(N, L)'}, {'true,true,true': [0.369, 696, 369], 'true,true,false': [0.478, 40, 24], 'true,false,true,true': [1.998, 7, 11], 'true,false,true,false': [0.0, 3, 0], 'true,false,false,true': [1.491, 4, 5], 'true,false,false,false': [1.69, 4, 10], 'false,true,true': [0.495, 8, 6], 'false,true,false': [0.371, 81, 16], 'false,false': [0.341, 52, 8]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,false': 'haswordvenue(B, F), haswordtitle(G, F)', 'true,false,true': 'title(H, G), venue(H, A)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,true': 'haswordauthor(M, K)'}, {'true,true,true': [0.366, 696, 369], 'true,true,false': [0.478, 40, 24], 'true,false,true,true': [1.786, 5, 10], 'true,false,true,false': [0.88, 5, 1], 'true,false,false,true': [1.491, 4, 5], 'true,false,false,false': [1.69, 4, 10], 'false,true,true': [0.495, 8, 6], 'false,true,false': [0.371, 81, 16], 'false,false': [0.341, 52, 8]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,true': 'haswordauthor(M, K)', 'false,true,false': 'title(N, L), venue(N, B)'}, {'true,true': [0.37, 736, 393], 'true,false,true,true': [1.986, 7, 11], 'true,false,true,false': [2.63e-09, 3, 0], 'true,false,false,true': [1.491, 4, 5], 'true,false,false,false': [1.69, 4, 10], 'false,true,true': [0.495, 8, 6], 'false,true,false,true': [3.433, 55, 15], 'false,true,false,false': [0.981, 26, 1], 'false,false': [0.341, 52, 8]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,false': 'haswordvenue(A, F), haswordauthor(G, F)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordauthor(L, J)', 'false,true,false': 'title(M, K), venue(M, B)'}, {'true,true,true': [0.361, 696, 369], 'true,true,false': [0.478, 40, 24], 'true,false,true': [0.752, 1, 2], 'true,false,false,true': [2.026, 10, 10], 'true,false,false,false': [2.113, 7, 14], 'false,true,true': [0.495, 8, 6], 'false,true,false,true': [3.433, 55, 15], 'false,true,false,false': [0.981, 26, 1], 'false,false': [0.341, 52, 8]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,true': 'title(M, L), venue(M, B)', 'false,true,true': 'samebib(M, N), venue(N, A)'}, {'true,true': [0.367, 736, 393], 'true,false,true,true': [1.993, 7, 11], 'true,false,true,false': [0.0, 3, 0], 'true,false,false,true': [1.484, 4, 5], 'true,false,false,false': [1.687, 4, 10], 'false,true,true,true': [2.461, 10, 16], 'false,true,true,false': [0.221, 47, 0], 'false,true,false': [0.327, 32, 6], 'false,false': [0.341, 52, 8]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,true': 'samebib(E, F), venue(F, B)', 'true,true,false': 'title(G, D), venue(G, B)', 'true,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'true,false,true': 'title(J, I), venue(J, A)', 'true,false,false': 'haswordvenue(A, K), haswordtitle(L, K)'}, {'true,true,true,true': [7.959, 77, 357], 'true,true,true,false': [3.431, 619, 12], 'true,true,false,true': [1.749, 13, 4], 'true,true,false,false': [3.39, 27, 20], 'true,false,true,true': [1.792, 5, 10], 'true,false,true,false': [0.869, 5, 1], 'true,false,false,true': [1.484, 4, 5], 'true,false,false,false': [1.687, 4, 10], 'false': [0.357, 141, 30]}]]
[{'': [0.22960923129026198, 0.1446598953524172], 'true': [0.22692507145147495, 0.24173553719008398], 'true,false': [0.24999999999999958, 0.21694214876033016], 'true,false,true': [0.24000000000000007, 0.20408163265306106], 'true,true': [0.22643126363815042, 0.23437500000000117], 'true,true,false': [0.1799307958477507, 0.2444545043005882], 'true,true,true': [0.14594172736732408, 0.018655769902125075], 'true,false,false': [0.23437499999999983, 0.20408163265306115]}, {'': [0.19009051226638934, 0.14465989535241497], 'true': [0.18662234623018614, 0.2358808849121435], 'true,false': [0.24368504098126678, 0.2163652802223309], 'true,false,true': [0.2400000000000002, 0.20408163265306115], 'true,false,false': [0.2343749999999998, 0.20408163265306115], 'true,true': [0.18380634562274895, 0.23255200466402415], 'true,true,false': [0.17993079584775074, 0.24445450430058804], 'true,true,true': [0.145941727367317, 0.018655769902124676]}, {'': [0.15334209456233835, 0.14465989535241733], 'true': [0.14910888138467981, 0.23011111807227458], 'true,false': [0.23126171433395643, 0.22136438069438677], 'true,false,true': [0.21465160006899653, 0.1440103808945096], 'true,false,false': [0.24691358024691346, 0.20408163265306123], 'true,true': [0.1440916795140045, 0.23090482259272224], 'true,true,false': [0.1799307958477509, 0.24445450430058865], 'false': [0.21606648199445966, 0.1329639889196688]}, {'': [0.14844382059448358, 0.1440391165711991], 'true': [0.14492268324591656, 0.22134403099454197], 'true,false': [0.21627810451494028, 0.22092940380941534], 'true,false,false': [0.2469135802469136, 0.20408163265306126], 'true,false,true': [0.22243764337558622, 0.0], 'true,true': [0.1397730997115619, 0.22960154220307563], 'true,true,false': [0.179930795847751, 0.24445450430058868], 'false': [0.21606648199445985, 0.13296398891966849]}, {'': [0.1447239969286799, 0.14352700877967373], 'true': [0.1416183066346658, 0.21566809987794555], 'true,false': [0.20659251082721225, 0.22084629893507426], 'true,false,false': [0.24691358024691354, 0.20408163265306126], 'true,false,true': [0.22171601935542373, -4.625929269271485e-18], 'false': [0.1566754301505804, 0.11662009820598121], 'false,true': [0.24489795918367335, 0.137740461260495], 'true,true': [0.13635413706215557, 0.2286803576270476]}, {'': [0.14196931712307925, 0.14218117193731458], 'false': [0.1549925350673768, 0.11660304424506326], 'false,true': [0.24489795918367338, 0.13774046126049458], 'true': [0.13907320995334194, 0.21219391488236122], 'true,false': [0.2006084644572358, 0.22084227801949688], 'true,false,false': [0.2469135802469136, 0.20408163265306123], 'true,false,true': [0.21272017449286643, 0.12914224195452742], 'true,true': [0.13368328511610655, 0.2284828153023434]}, {'': [0.1398893131291358, 0.141146607919579], 'false': [0.15369853894261867, 0.11658832179673488], 'false,true': [0.2448979591836736, 0.13774046126049586], 'true': [0.13710319782697952, 0.2095408141273862], 'true,false': [0.19585149175738148, 0.22084263414704058], 'true,false,false': [0.2469135802469136, 0.20408163265306123], 'true,false,true': [0.21917101062974612, 2.3129646346357427e-18], 'false,true,false': [0.16836734693877606, 0.03566529492455423]}, {'': [0.13832145998452733, 0.1395502544457047], 'false': [0.1514676073483467, 0.11657557572888488], 'false,true': [0.2448979591836735, 0.13622490164714227], 'true': [0.1355699089907113, 0.20814199595551755], 'true,false': [0.18857791954006084, 0.20906128967207568], 'true,false,false': [0.20513400923043706, 0.212592087476696], 'false,true,false': [0.16836734693877548, 0.0356652949245542], 'true,true': [0.12999431119407673, 0.22825077190982865]}, {'': [0.13716331721267003, 0.13842411473731467], 'false': [0.14990391800132277, 0.11656451282952146], 'false,true': [0.17064478006869188, 0.10673018924022688], 'false,true,true': [0.23290978129129516, 0.0010354105603100244], 'true': [0.13439892339837434, 0.20772174771390872], 'true,false': [0.19408069631562833, 0.21950459895625388], 'true,false,false': [0.24457224072705477, 0.2033864712717646], 'true,false,true': [0.22070666033931197, 0.0]}, {'': [0.13624876947112435, 0.12727276690921424], 'true': [0.13348635647843884, 0.20699074692521127], 'true,false': [0.19277166656070535, 0.21951162332220311], 'true,false,false': [0.2445705009303597, 0.20340223662148096], 'true,false,true': [0.21417527255019056, 0.12572533607885508], 'true,true': [0.12779766543408203, 0.22812045617552698], 'true,true,false': [0.17993079584775074, 0.2444545043005884], 'true,true,true': [0.14594172736732386, 0.018655769902123285]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,false;haswordvenue(B, F), haswordtitle(G, F).;true;true
4;true,false,true;haswordtitle(G, H), haswordauthor(I, H).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
6;true,false,true;haswordtitle(F, G), haswordauthor(H, G).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
8;true,false,true;haswordtitle(F, G), haswordauthor(H, G).;true;true
8;false;haswordvenue(B, K), haswordtitle(L, K).;true;true
8;false,true;title(M, L), venue(M, B).;true;true
8;false,true,true;samebib(M, N), venue(N, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.6807295802607984;  // std dev = 7.959, 434.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=357 */
%   | | | else return -0.1228336322538954;  // std dev = 3.431, 631.000 (wgt'ed) examples reached here.  /* #neg=619 #pos=12 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.09344305274657114;  // std dev = 1.749, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | | else return 0.28368084999312904;  // std dev = 3.390, 47.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.25814893509951237;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.4831489350995123;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.5724346493852266;  // std dev = 1.690, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   else return 0.03358753159073964;  // std dev = 0.380, 171.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=30 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.576434006887333;  // std dev = 7.959, 434.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=357 */
%   | | | else return -0.10852847994728733;  // std dev = 3.431, 631.000 (wgt'ed) examples reached here.  /* #neg=619 #pos=12 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.08168328864042035;  // std dev = 1.749, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | | else return 0.24552773196596844;  // std dev = 3.390, 47.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.22373365448410584;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.4136573287083126;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.4876778839172629;  // std dev = 1.690, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   else return 0.02944955541611934;  // std dev = 0.380, 171.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=30 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( haswordauthor(E, C) )
%   | | then return 0.39807612789070407;  // std dev = 0.763, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.12753422122861535;  // std dev = 12.378, 1,064.000 (wgt'ed) examples reached here.  /* #neg=696 #pos=368 */
%   | | | else return 0.16681360805983184;  // std dev = 3.775, 62.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=23 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.3672603116404226;  // std dev = 1.794, 15.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=10 */
%   | | | else return -0.05734216920794117;  // std dev = 0.930, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.3444238777130529;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.3912569620992537;  // std dev = 1.690, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.04849908617387448;  // std dev = 0.399, 111.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=22 */
%   | else return -0.01636577869099067;  // std dev = 0.340, 60.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=8 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.10754171379838652;  // std dev = 0.374, 1,065.000 (wgt'ed) examples reached here.  /* #neg=696 #pos=369 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.04652990288933262;  // std dev = 1.749, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | | else return 0.17459216150920653;  // std dev = 3.388, 47.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=20 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.2556530628982581;  // std dev = 2.001, 18.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | | | else return -0.20173920118467145;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.2814106402926482;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.3005711547884892;  // std dev = 1.690, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.16200890612594046;  // std dev = 0.463, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
%   | else return 0.0049381947059561745;  // std dev = 0.365, 152.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=24 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.4182560289179012;  // std dev = 0.832, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( haswordtitle(E, C) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.08814335178036395;  // std dev = 12.022, 1,062.000 (wgt'ed) examples reached here.  /* #neg=696 #pos=366 */
%   | | | else return 0.111788715364035;  // std dev = 3.763, 62.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=23 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.1439284414125328;  // std dev = 2.083, 21.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=11 */
%   | | | else return 0.2115651820617633;  // std dev = 2.235, 22.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=14 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( haswordtitle(K, I) )
%   | | then return 0.2500584631434727;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return -0.1691982933681576;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then return 0.059452003614130944;  // std dev = 0.411, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | else return -0.0012980155678163688;  // std dev = 0.359, 138.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=21 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.07382288697782374;  // std dev = 0.365, 1,065.000 (wgt'ed) examples reached here.  /* #neg=696 #pos=369 */
%   | | else return 0.08929925089602896;  // std dev = 0.478, 64.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=24 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, H), haswordauthor(I, H) )
%   | | | then return 0.16193130946721285;  // std dev = 1.997, 18.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | | | else return -0.19258963884495373;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.17347289284403425;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.169877160764337;  // std dev = 1.682, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then if ( haswordauthor(N, L) )
%   | | then return 0.21040717804116768;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return 0.00756234554790682;  // std dev = 0.371, 97.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
%   | else return -0.01503118798381704;  // std dev = 0.340, 60.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=8 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.06053876699963676;  // std dev = 0.363, 1,065.000 (wgt'ed) examples reached here.  /* #neg=696 #pos=369 */
%   | | else return 0.07095047847296124;  // std dev = 0.478, 64.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=24 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.14811951510136748;  // std dev = 1.786, 15.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=10 */
%   | | | else return -0.08480702605961911;  // std dev = 0.880, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.13176816582953435;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.1281857663922255;  // std dev = 1.683, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.1724048683086782;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return -0.1448535799621125;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.003761622258761739;  // std dev = 0.364, 152.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=24 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.275122044477462;  // std dev = 0.829, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( haswordtitle(E, C) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.048353939706185345;  // std dev = 11.741, 1,062.000 (wgt'ed) examples reached here.  /* #neg=696 #pos=366 */
%   | | | else return 0.05675576105162998;  // std dev = 3.759, 62.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=23 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.05968434384336859;  // std dev = 2.026, 21.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=11 */
%   | | | else return 0.08726322887688462;  // std dev = 2.235, 22.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=14 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.4516991429467697;  // std dev = 2.461, 26.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=16 */
%   | | | else return -0.16447027545725962;  // std dev = 0.183, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else return -0.03926167242160018;  // std dev = 0.338, 38.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=6 */
%   | else return -0.0121542950173001;  // std dev = 0.339, 60.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=8 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.330722257886843;  // std dev = 7.953, 434.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=357 */
%   | | | else return -0.16003439349360696;  // std dev = 3.504, 630.000 (wgt'ed) examples reached here.  /* #neg=617 #pos=13 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return -0.01199705512384093;  // std dev = 1.581, 18.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
%   | | | else return 0.06346864461524764;  // std dev = 3.391, 47.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.0950767483614933;  // std dev = 1.450, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | | else return -0.00671509872746848;  // std dev = 1.568, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.08723724458655654;  // std dev = 1.302, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.0742841770810355;  // std dev = 1.678, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   else return 0.007389034090657982;  // std dev = 0.359, 171.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=30 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.020686212808932986;  // std dev = 0.337, 1,129.000 (wgt'ed) examples reached here.  /* #neg=736 #pos=393 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.1120406730545216;  // std dev = 0.716, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.04295831145696769;  // std dev = 0.457, 41.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=24 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( haswordtitle(I, G) )
%   | | then return 0.1404594315503621;  // std dev = 0.484, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return -0.12728636272700652;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.1274249395259684;  // std dev = 1.371, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return -0.14762672851741698;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return -0.019343436842823126;  // std dev = 3.032, 83.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=11 */
%   | | | else return 0.01238286181779357;  // std dev = 2.662, 55.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=10 */


Results
   AUC ROC   = 0.749278
   AUC PR    = 0.751334
   CLL	      = -0.556384
   Precision = 0.744898 at threshold = 0.5
   Recall    = 0.946822
   F1        = 0.833809


Total learning time: 1281.336157798767 seconds
Total inference time: 5.351 seconds
AUC ROC: 0.749278


Results scoring model
   AUC ROC   = 0.915474
   AUC PR    = 0.788699
   CLL	      = -0.393775
   Precision = 0.813163 at threshold = 0.5
   Recall    = 0.853007
   F1        = 0.832609


Total scoring time: 21.133 seconds
Refined model CLL: -0.393775


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.749278
   AUC PR    = 0.751334
   CLL	      = -0.556384
   Precision = 0.744898 at threshold = 0.5
   Recall    = 0.946822
   F1        = 0.833809


Total learning time: 2545.3315738506317 seconds
Total inference time: 5.351 seconds
AUC ROC: 0.749278
Total revision time: 2545.3315738506317
Best scored revision CLL: -0.393775


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 10:21:45
{'AUC ROC': 0.749278, 'AUC PR': 0.751334, 'CLL': -0.556384, 'Precision': [0.744898, 0.5], 'Recall': 0.946822, 'F1': 0.833809, 'Learning time': 2545.3315738506317, 'Inference time': 5.351, 'parameter_0.2': {'AUC ROC': 0.747587, 'AUC PR': 0.747823, 'CLL': -0.55681, 'Precision': [0.744898, 0.5], 'Recall': 0.946822, 'F1': 0.833809, 'Learning time': 1222.1384160518646, 'Inference time': 5.117}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.6807295802607984;  // std dev = 7.959, 434.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=357 */
%   | | | else return -0.1228336322538954;  // std dev = 3.431, 631.000 (wgt'ed) examples reached here.  /* #neg=619 #pos=12 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.09344305274657114;  // std dev = 1.749, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | | else return 0.28368084999312904;  // std dev = 3.390, 47.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.25814893509951237;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.4831489350995123;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.5724346493852266;  // std dev = 1.690, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   else return 0.03358753159073964;  // std dev = 0.380, 171.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=30 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.576434006887333;  // std dev = 7.959, 434.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=357 */
%   | | | else return -0.10852847994728733;  // std dev = 3.431, 631.000 (wgt'ed) examples reached here.  /* #neg=619 #pos=12 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.08168328864042035;  // std dev = 1.749, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | | else return 0.24552773196596844;  // std dev = 3.390, 47.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.22373365448410584;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | | else return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.4136573287083126;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.4876778839172629;  // std dev = 1.690, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   else return 0.02944955541611934;  // std dev = 0.380, 171.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=30 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.12800834120174848;  // std dev = 0.380, 1,065.000 (wgt'ed) examples reached here.  /* #neg=696 #pos=369 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.07076028829018174;  // std dev = 1.749, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | | else return 0.2064101104219833;  // std dev = 3.390, 47.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=20 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.3672603116404226;  // std dev = 1.794, 15.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=10 */
%   | | | else return -0.05734216920794117;  // std dev = 0.930, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.3444238777130529;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.3912569620992537;  // std dev = 1.690, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.1660903616598865;  // std dev = 0.465, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
%   | else return 0.008195624817781615;  // std dev = 0.365, 152.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=24 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.10752591361899266;  // std dev = 0.374, 1,065.000 (wgt'ed) examples reached here.  /* #neg=696 #pos=369 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.06080115416453141;  // std dev = 1.749, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | | else return 0.1690588431090709;  // std dev = 3.390, 47.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=20 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.2556530628982581;  // std dev = 2.001, 18.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | | | else return -0.20173920118467145;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.2814106402926482;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.3005711547884892;  // std dev = 1.690, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.14369743546741823;  // std dev = 0.465, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
%   | else return 0.007149411817831487;  // std dev = 0.365, 152.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=24 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09079234600143292;  // std dev = 0.376, 1,129.000 (wgt'ed) examples reached here.  /* #neg=736 #pos=393 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.1964486097966297;  // std dev = 1.998, 18.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | | | else return -0.17119256889204829;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.22203013053058127;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.22629823971521892;  // std dev = 1.690, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( title(M, L), venue(M, B) )
%   | | then if ( samebib(M, N), venue(N, A) )
%   | | | then return 0.46211109909508735;  // std dev = 2.475, 26.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=16 */
%   | | | else return -0.15344485969055363;  // std dev = 0.058, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else return -0.005890246196658859;  // std dev = 0.355, 38.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=6 */
%   | else return -0.021819248920775868;  // std dev = 0.341, 60.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=8 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.37649764253262835;  // std dev = 7.959, 434.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=357 */
%   | | | else return -0.1347913094125384;  // std dev = 3.431, 631.000 (wgt'ed) examples reached here.  /* #neg=619 #pos=12 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.0378775670804718;  // std dev = 1.749, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | | else return 0.1164745973999828;  // std dev = 3.390, 47.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.17531861789867617;  // std dev = 1.786, 15.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=10 */
%   | | | else return -0.06480994429059055;  // std dev = 0.880, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.17099913554885646;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.1698435867651014;  // std dev = 1.690, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   else return 0.014858821168111646;  // std dev = 0.365, 171.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=30 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04695021627226198;  // std dev = 0.341, 1,129.000 (wgt'ed) examples reached here.  /* #neg=736 #pos=393 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.07870895446452425;  // std dev = 0.443, 21.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=11 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.12981560499048994;  // std dev = 1.491, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | | else return 0.12813320688246746;  // std dev = 1.690, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( haswordtitle(K, I) )
%   | | then return 0.23079582631717813;  // std dev = 0.486, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return -0.19245513634862157;  // std dev = 5.27e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then if ( haswordtitle(N, L) )
%   | | | then return 0.1370564811674471;  // std dev = 1.375, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return -0.1387018444832002;  // std dev = 0.014, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.006416661659037849;  // std dev = 0.344, 138.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0387645178810388;  // std dev = 0.339, 1,129.000 (wgt'ed) examples reached here.  /* #neg=736 #pos=393 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.1620943367448637;  // std dev = 0.745, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.06177630870535439;  // std dev = 2.036, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
%   | | | else return 0.08594991265330605;  // std dev = 2.114, 21.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=14 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordauthor(K, I) )
%   | | then return 0.19177519056810727;  // std dev = 0.485, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else if ( title(L, J), venue(L, B) )
%   | | | then return 0.04810397880486095;  // std dev = 3.182, 70.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=15 */
%   | | | else return -0.11783285180699606;  // std dev = 0.985, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return -0.1642979393288824;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.00490155035746269;  // std dev = 0.352, 55.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=8 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.355108551282426;  // std dev = 0.205, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.018980460559593373;  // std dev = 0.349, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   | else return 0.031316443217379246;  // std dev = 0.343, 1,146.000 (wgt'ed) examples reached here.  /* #neg=740 #pos=406 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( haswordtitle(I, G) )
%   | | then return 0.1555468969012784;  // std dev = 0.484, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return -0.14296381071156375;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | | then return -0.02470547596823139;  // std dev = 3.040, 87.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=11 */
%   | | | else return 0.249815039867283;  // std dev = 1.190, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.01329978366772761;  // std dev = 2.653, 55.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=10 */
%   | | | else return -0.1493260793827237;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.02595085017782766;  // std dev = 0.336, 1,129.000 (wgt'ed) examples reached here.  /* #neg=736 #pos=393 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.11811575398243045;  // std dev = 0.746, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.06291370635278329;  // std dev = 1.955, 20.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=11 */
%   | | | else return 0.03707087983280537;  // std dev = 2.185, 21.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=13 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( haswordtitle(K, I) )
%   | | then return 0.12375216243477365;  // std dev = 0.483, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else return -0.12632478718702828;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return -0.0042695430332652445;  // std dev = 0.342, 94.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=14 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.011453690327303813;  // std dev = 2.651, 55.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=10 */
%   | | | else return -0.13133313401317862;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.753102
   AUC PR    = 0.761559
   CLL	      = -0.555338
   Precision = 0.745587 at threshold = 0.5
   Recall    = 0.931258
   F1        = 0.828143


Total learning time: 1179.1377248764038 seconds
Total inference time: 4.067 seconds
AUC ROC: 0.753102


Dataset: 3_imdb_cora, Fold: 2, Type: Scratch (RDN-B), Time: 10:41:29
{'AUC ROC': 0.753102, 'AUC PR': 0.761559, 'CLL': -0.555338, 'Precision': [0.745587, 0.5], 'Recall': 0.931258, 'F1': 0.828143, 'Learning time': 1179.1377248764038, 'Inference time': 4.067}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.6644552414058139;  // std dev = 11.776, 888.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=716 */
%   | | | else return -0.11608616957037728;  // std dev = 5.584, 1,242.000 (wgt'ed) examples reached here.  /* #neg=1,210 #pos=32 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.09344305274657119;  // std dev = 2.473, 34.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=8 */
%   | | | else return 0.2602107907696145;  // std dev = 4.829, 97.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=39 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.4098730730305468;  // std dev = 2.678, 29.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=16 */
%   | | | else return 0.039967116917694;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.5248156017661789;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=12 */
%   | | | else return 0.48972788246793336;  // std dev = 2.103, 19.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=12 */
%   else return 0.03193810888868637;  // std dev = 0.379, 351.000 (wgt'ed) examples reached here.  /* #neg=290 #pos=61 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.5631670188319176;  // std dev = 11.776, 888.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=716 */
%   | | | else return -0.10545823476543073;  // std dev = 5.289, 1,232.000 (wgt'ed) examples reached here.  /* #neg=1,203 #pos=29 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.17990637718651595;  // std dev = 5.478, 135.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=46 */
%   | | | else return 0.4901007470235393;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.33679387488759716;  // std dev = 2.813, 32.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=17 */
%   | | | else return -0.021786221475444723;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then return 0.7836055221917478;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.402415276672014;  // std dev = 2.833, 34.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=21 */
%   else return 0.028005656481572213;  // std dev = 0.379, 351.000 (wgt'ed) examples reached here.  /* #neg=290 #pos=61 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.4456179512743779;  // std dev = 11.776, 888.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=716 */
%   | | | else return -0.092357888964506;  // std dev = 5.529, 1,242.000 (wgt'ed) examples reached here.  /* #neg=1,210 #pos=32 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.15711182449908437;  // std dev = 5.276, 125.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=43 */
%   | | | else return 0.4073817375542042;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.2931385607786997;  // std dev = 2.678, 29.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=16 */
%   | | | else return 0.02408252827076076;  // std dev = 1.263, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return 0.6232206408156942;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.32680148209771853;  // std dev = 2.833, 34.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=21 */
%   else return 0.02448338196040297;  // std dev = 0.379, 351.000 (wgt'ed) examples reached here.  /* #neg=290 #pos=61 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09525958604333343;  // std dev = 0.359, 2,261.000 (wgt'ed) examples reached here.  /* #neg=1,466 #pos=795 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.22395727491106662;  // std dev = 2.804, 32.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=17 */
%   | | | else return -0.022074044322663012;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.4700514103990053;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.25514048553028257;  // std dev = 2.833, 34.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=21 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then if ( haswordauthor(N, K) )
%   | | | then return 0.3021031670693771;  // std dev = 2.335, 22.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=10 */
%   | | | else return 0.01592505946269814;  // std dev = 5.239, 196.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=33 */
%   | | else return -0.00958514461893456;  // std dev = 0.350, 21.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=3 */
%   | else return -0.018513716047505957;  // std dev = 0.341, 112.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=15 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07970134808301894;  // std dev = 0.355, 2,261.000 (wgt'ed) examples reached here.  /* #neg=1,466 #pos=795 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.13587004139781916;  // std dev = 0.474, 40.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=18 */
%   | | else return 0.20753736607043022;  // std dev = 0.468, 37.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=24 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( haswordtitle(I, G) )
%   | | then return 0.258858081945195;  // std dev = 0.498, 22.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=10 */
%   | | else return -0.15040758286719014;  // std dev = 0.004, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.24815612631667588;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.05465304497170378;  // std dev = 1.987, 24.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=5 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return -0.019545428521437043;  // std dev = 4.272, 159.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=21 */
%   | | | else return 0.02534096303784353;  // std dev = 4.343, 128.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=23 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06633027186278279;  // std dev = 0.352, 2,261.000 (wgt'ed) examples reached here.  /* #neg=1,466 #pos=795 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.1431456876866475;  // std dev = 2.803, 32.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=17 */
%   | | | else return -0.036929580242082705;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return 0.15666856367428042;  // std dev = 0.468, 37.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=24 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.4586886943384788;  // std dev = 3.589, 55.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=34 */
%   | | | else return -0.15849873701835718;  // std dev = 0.126, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | | else if ( haswordauthor(M, I) )
%   | | | then return 0.23403644736641702;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
%   | | | else return -0.08971468666417443;  // std dev = 1.683, 48.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=3 */
%   | else return -0.013428313037873205;  // std dev = 0.340, 112.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=15 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.051569712106578305;  // std dev = 0.340, 2,120.000 (wgt'ed) examples reached here.  /* #neg=1,375 #pos=745 */
%   | | else return 0.10606151786142504;  // std dev = 0.471, 141.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=50 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.11567728752292956;  // std dev = 2.678, 29.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=16 */
%   | | | else return -0.011395319469877102;  // std dev = 1.247, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.27805247815042927;  // std dev = 0.006, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.10395081833120544;  // std dev = 2.833, 34.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=21 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordauthor(M, K) )
%   | | then return 0.17415345080050265;  // std dev = 0.490, 22.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=10 */
%   | | else return 0.005026476378135387;  // std dev = 0.346, 217.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=36 */
%   | else return -0.011750000530542782;  // std dev = 0.340, 112.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=15 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04534644507516869;  // std dev = 0.348, 2,261.000 (wgt'ed) examples reached here.  /* #neg=1,466 #pos=795 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.1496108251348074;  // std dev = 0.737, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.05664192485707208;  // std dev = 2.775, 35.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=17 */
%   | | | else return 0.08158311992578925;  // std dev = 2.936, 37.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=21 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.7420908295631207;  // std dev = 0.101, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1644639253381399;  // std dev = 0.042, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordtitle(M, I) )
%   | | | then return 0.09041461850693673;  // std dev = 1.760, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | | else return -0.15977011746631176;  // std dev = 0.090, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.0020634713892147224;  // std dev = 0.352, 318.000 (wgt'ed) examples reached here.  /* #neg=265 #pos=53 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.08695778844739663;  // std dev = 0.327, 65.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=29 */
%   | else if ( haswordtitle(F, C) )
%   | | then return 0.03606478020412854;  // std dev = 0.347, 2,201.000 (wgt'ed) examples reached here.  /* #neg=1,431 #pos=770 */
%   | | else return 0.053074012903806374;  // std dev = 0.476, 72.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=38 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( haswordtitle(I, G) )
%   | | then if ( author(J, H), venue(J, B) )
%   | | | then return 0.1514779506645941;  // std dev = 0.816, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.07728683107123197;  // std dev = 1.751, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return -0.06243295369956657;  // std dev = 0.222, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( haswordtitle(M, K) )
%   | | | then return 0.12936272255730827;  // std dev = 2.198, 20.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=9 */
%   | | | else return -0.1283223959954745;  // std dev = 0.010, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.0021187665847362783;  // std dev = 0.344, 287.000 (wgt'ed) examples reached here.  /* #neg=243 #pos=44 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03066392060695039;  // std dev = 0.345, 2,261.000 (wgt'ed) examples reached here.  /* #neg=1,466 #pos=795 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.03143777905832958;  // std dev = 0.469, 40.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=18 */
%   | | else return 0.058997183766874975;  // std dev = 0.467, 37.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=24 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( haswordauthor(H, I), haswordvenue(B, I) )
%   | | then return -0.1602266679188005;  // std dev = 0.056, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordtitle(J, G) )
%   | | | then return 0.09764890277865591;  // std dev = 1.895, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
%   | | | else return -0.03549959268732648;  // std dev = 0.654, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return -0.007498771145825238;  // std dev = 0.349, 185.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=29 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.019219436845001492;  // std dev = 4.066, 127.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=24 */
%   | | | else return -0.1385467590449937;  // std dev = 0.040, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 0.751719
   AUC PR    = 0.750946
   CLL	      = -0.56016
   Precision = 0.744637 at threshold = 0.5
   Recall    = 0.945525
   F1        = 0.833143


Total learning time: 2407.987672805786 seconds
Total inference time: 3.984 seconds
AUC ROC: 0.751719


Results scoring model
   AUC ROC   = 0.907986
   AUC PR    = 0.771357
   CLL	      = -0.402151
   Precision = 0.795767 at threshold = 0.5
   Recall    = 0.837416
   F1        = 0.816061


Total scoring time: 31.927 seconds
Parameter learned model CLL: -0.402151


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,true': 'samebib(E, F), venue(F, B)', 'true,true,false': 'title(G, D), venue(G, B)', 'true,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'true,false,true': 'title(J, I), venue(J, A)', 'true,false,false': 'haswordvenue(A, K), haswordtitle(L, K)'}, {'true,true,true,true': [11.776, 172, 716], 'true,true,true,false': [5.584, 1, 32], 'true,true,false,true': [2.473, 26, 8], 'true,true,false,false': [4.829, 58, 39], 'true,false,true,true': [2.678, 13, 16], 'true,false,true,false': [1.279, 9, 2], 'true,false,false,true': [2.0, 6, 12], 'true,false,false,false': [2.103, 7, 12], 'false': [0.379, 290, 61]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,true': 'samebib(E, F), venue(F, A)', 'true,true,false': 'haswordtitle(D, G), haswordauthor(H, G)', 'true,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'true,false,true': 'haswordtitle(J, K), haswordauthor(L, K)', 'true,false,false': 'haswordvenue(A, M), haswordauthor(N, M)'}, {'true,true,true,true': [11.776, 172, 716], 'true,true,true,false': [5.289, 1, 29], 'true,true,false,true': [5.478, 89, 46], 'true,true,false,false': [1.155, 2, 4], 'true,false,true,true': [2.813, 15, 17], 'true,false,true,false': [0.935, 7, 1], 'true,false,false,true': [0.005, 0, 3], 'true,false,false,false': [2.833, 13, 21], 'false': [0.379, 290, 61]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,true': 'samebib(E, F), venue(F, B)', 'true,true,false': 'haswordtitle(D, G), haswordauthor(H, G)', 'true,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'true,false,true': 'title(K, J), venue(K, A)', 'true,false,false': 'haswordvenue(A, L), haswordauthor(M, L)'}, {'true,true,true,true': [11.776, 172, 716], 'true,true,true,false': [5.529, 1, 32], 'true,true,false,true': [5.276, 82, 43], 'true,true,false,false': [1.155, 2, 4], 'true,false,true,true': [2.678, 13, 16], 'true,false,true,false': [1.263, 9, 2], 'true,false,false,true': [0.007, 0, 3], 'true,false,false,false': [2.833, 13, 21], 'false': [0.379, 290, 61]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,true': 'haswordtitle(L, M), haswordauthor(N, M)', 'false,true,true': 'haswordauthor(N, K)'}, {'true,true': [0.359, 1, 795], 'true,false,true,true': [2.804, 15, 17], 'true,false,true,false': [0.935, 7, 1], 'true,false,false,true': [0.007, 0, 3], 'true,false,false,false': [2.833, 13, 21], 'false,true,true,true': [2.335, 12, 10], 'false,true,true,false': [5.239, 163, 33], 'false,true,false': [0.35, 18, 3], 'false,false': [0.341, 97, 15]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false,true': 'haswordtitle(I, G)', 'false,false': 'haswordvenue(A, J), haswordauthor(K, J)', 'false,false,true': 'author(L, K), venue(L, B)', 'false,false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.355, 1, 795], 'true,false,true': [0.474, 22, 18], 'true,false,false': [0.468, 13, 24], 'false,true,true': [0.498, 12, 10], 'false,true,false': [0.004, 13, 0], 'false,false,true,true': [1.095, 3, 2], 'false,false,true,false': [1.987, 19, 5], 'false,false,false,true': [4.272, 138, 21], 'false,false,false,false': [4.343, 105, 23]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, A)', 'false,true,true': 'samebib(K, L), venue(L, B)', 'false,true,false': 'haswordauthor(M, I)'}, {'true,true': [0.352, 1, 795], 'true,false,true,true': [2.803, 15, 17], 'true,false,true,false': [0.935, 7, 1], 'true,false,false': [0.468, 13, 24], 'false,true,true,true': [3.589, 21, 34], 'false,true,true,false': [0.126, 117, 0], 'false,true,false,true': [2.176, 10, 9], 'false,true,false,false': [1.683, 45, 3], 'false,false': [0.34, 97, 15]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,false': 'haswordvenue(B, F), haswordtitle(G, F)', 'true,false,true': 'title(H, G), venue(H, A)', 'true,false,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,true': 'haswordauthor(M, K)'}, {'true,true,true': [0.34, 1, 745], 'true,true,false': [0.471, 91, 50], 'true,false,true,true': [2.678, 13, 16], 'true,false,true,false': [1.247, 9, 2], 'true,false,false,true': [0.006, 0, 3], 'true,false,false,false': [2.833, 13, 21], 'false,true,true': [0.49, 12, 10], 'false,true,false': [0.346, 181, 36], 'false,false': [0.34, 97, 15]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, B)', 'false,true,true': 'samebib(K, L), venue(L, A)', 'false,true,false': 'haswordtitle(M, I)'}, {'true,true': [0.348, 1, 795], 'true,false,true': [0.737, 1, 4], 'true,false,false,true': [2.775, 18, 17], 'true,false,false,false': [2.936, 16, 21], 'false,true,true,true': [0.101, 0, 3], 'false,true,true,false': [0.042, 4, 0], 'false,true,false,true': [1.76, 14, 5], 'false,true,false,false': [0.09, 7, 0], 'false,false': [0.352, 265, 53]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,false': 'haswordtitle(F, C)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false,true': 'haswordtitle(I, G)', 'false,true,true': 'author(J, H), venue(J, B)', 'false,false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false,false,true': 'haswordtitle(M, K)'}, {'true,true': [0.327, 36, 29], 'true,false,true': [0.347, 1, 770], 'true,false,false': [0.476, 34, 38], 'false,true,true,true': [0.816, 3, 2], 'false,true,true,false': [1.751, 14, 5], 'false,true,false': [0.222, 8, 1], 'false,false,true,true': [2.198, 11, 9], 'false,false,true,false': [0.01, 11, 0], 'false,false,false': [0.344, 243, 44]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false,true': 'haswordauthor(H, I), haswordvenue(B, I)', 'false,true,false': 'haswordtitle(J, G)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true': [0.345, 1, 795], 'true,false,true': [0.469, 22, 18], 'true,false,false': [0.467, 13, 24], 'false,true,true': [0.056, 3, 0], 'false,true,false,true': [1.895, 15, 7], 'false,true,false,false': [0.654, 7, 1], 'false,false,true': [0.349, 156, 29], 'false,false,false,true': [4.066, 103, 24], 'false,false,false,false': [0.04, 6, 0]}]]
[{'': [0.22983551411172545, 0.14358649686285108], 'true': [0.22798169292161227, 0.24793388429752125], 'true,false': [0.24749999999999953, 0.2279035792549318], 'true,false,true': [0.24732461355529087, 0.14876033057851243], 'true,true': [0.2278507350834513, 0.23005652351261655], 'true,true,false': [0.179930795847751, 0.24040811988521765], 'true,false,false': [0.22222222222222188, 0.2326869806094179], 'true,true,true': [0.15617644671700573, 0.025101065498741682]}, {'': [0.19249083020217397, 0.1435864968628481], 'true': [0.1898729568442816, 0.24135972176877696], 'true,false': [0.24029296171073677, 0.22780840863746107], 'true,false,true': [0.24730651503687545, 0.10937499999999997], 'true,false,false': [7.813757679183317e-06, 0.23612689329338915], 'true,true': [0.1874348223645824, 0.22621057112587298], 'true,true,false': [0.22229333971210014, 0.2222222222222222], 'true,true,true': [0.1561764467169619, 0.022706228866947023]}, {'': [0.15757053547079852, 0.14358649686284755], 'true': [0.15427276744136578, 0.23311403384430526], 'true,false': [0.23365111454580645, 0.22352480906055694], 'true,false,true': [0.24732461355529115, 0.14511921621938534], 'true,false,false': [1.504081590875117e-05, 0.23612212533586585], 'true,true': [0.14981979558159106, 0.22541068232376657], 'true,true,false': [0.22269494843700868, 0.22222222222222224], 'true,true,true': [0.15617644671698547, 0.024616169779669243]}, {'': [0.1323260334866328, 0.14358649686285282], 'false': [0.15542444985207088, 0.11599170918367306], 'false,true': [0.1583410487332733, 0.12244897959183672], 'false,true,true': [0.2479338842975208, 0.1400197834235731], 'true': [0.12858027945182424, 0.22684140562759322], 'true,false': [0.22818630686932623, 0.22041721806830805], 'true,false,true': [0.24578285157788005, 0.10937500000000001], 'true,false,false': [1.6987534815715577e-05, 0.23611942920914175]}, {'': [0.12931836437172686, 0.14212430572895188], 'false': [0.19495042234467336, 0.13530903834125205], 'false,true': [0.24793388429752056, 1.4033546316298658e-06], 'false,false': [0.182871444307648, 0.1297997748207939], 'false,false,true': [0.23964909037465992, 0.16458700209713562], 'false,false,false': [0.11477965212084057, 0.14734137681324722], 'true': [0.1258562409728719, 0.2230397788101379], 'true,false': [0.22436740181315779, 0.2189363520360478]}, {'': [0.12710875055801665, 0.1403525000252919], 'false': [0.15151325526305878, 0.11533624657163781], 'false,true': [0.1578416481395237, 0.13429462426476413], 'false,true,true': [0.23421159016364618, 0.00013533002895321634], 'false,true,false': [0.2493074792243768, 0.05904510342132404], 'true': [0.12374108549193653, 0.22195938477047686], 'true,false': [0.22345861363236202, 0.2190637882576994], 'true,false,true': [0.24549409661653182, 0.10937500000000003]}, {'': [0.12540836634022284, 0.12765351236660183], 'false': [0.1330892175408616, 0.11534175205687176], 'false,true': [0.2401044076167063, 0.11960675320522259], 'true': [0.12210033413257754, 0.22069704273968116], 'true,false': [0.22138215193010372, 0.2192322849790417], 'true,false,true': [0.24732461355529128, 0.14128149006393806], 'true,false,false': [1.1080997453958666e-05, 0.2361176522849812], 'true,true': [0.11526984039362959, 0.22201577381405338]}, {'': [0.12411746505376588, 0.1269021515639994], 'false': [0.15362761150718648, 0.12374809359190884], 'false,true': [0.20297926204367192, 0.1317705190632025], 'false,true,true': [0.003395719971770387, 0.00044912275441899574], 'false,true,false': [0.16303555615562448, 0.0011676739817795148], 'true': [0.12083866655899166, 0.2195637231282494], 'true,false': [0.10871222989677778, 0.22684457942441702], 'true,false,false': [0.22009082235607635, 0.2329308767042151]}, {'': [0.1231305604737155, 0.12471006741599085], 'false': [0.13198714895759678, 0.12373249078165484], 'false,true': [0.1564105231904811, 0.04934566070765072], 'false,true,true': [0.13309133437987386, 0.1614004180276605], 'false,false': [0.17106275195689047, 0.11846383823065647], 'false,false,true': [0.2415806707694037, 8.59906849814962e-06], 'true': [0.10670117543045814, 0.12352989238203665], 'true,false': [0.12014876430358366, 0.22660894970652817]}, {'': [0.12233693042794491, 0.12390020433674835], 'false': [0.129107247022728, 0.12320004438878268], 'false,true': [0.0010373456071396392, 0.13741895462675421], 'false,true,false': [0.16319156306139182, 0.0535433654119407], 'false,false': [0.1214655352414561, 0.12538919683435323], 'false,false,false': [0.13017766408333933, 0.0002659990929838642], 'true': [0.11903150757612949, 0.21920616798728557], 'true,false': [0.21954436319447476, 0.2184459952936318]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
1;true,false,false;haswordvenue(A, M), haswordauthor(N, M).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
2;true,false,false;haswordvenue(A, L), haswordauthor(M, L).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
3;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(B, G), haswordauthor(H, G).;true;true
4;false,true;haswordtitle(I, G).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false,true;title(K, J), venue(K, A).;true;true
5;false,true,true;samebib(K, L), venue(L, B).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,false;haswordvenue(B, F), haswordtitle(G, F).;true;true
6;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(A, I), haswordauthor(J, I).;true;true
7;false,true;author(K, J), venue(K, B).;true;true
7;false,true,true;samebib(K, L), venue(L, A).;true;true
7;false,true,false;haswordtitle(M, I).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(A, G), haswordauthor(H, G).;true;true
8;false,false;haswordvenue(B, K), haswordauthor(L, K).;true;true
8;false,false,true;haswordtitle(M, K).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(A, G), haswordauthor(H, G).;true;true
9;false,true;haswordauthor(H, I), haswordvenue(B, I).;true;true
9;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;true
9;false,false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.6644552414058139;  // std dev = 11.776, 888.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=716 */
%   | | | else return -0.11608616957037728;  // std dev = 5.584, 1,242.000 (wgt'ed) examples reached here.  /* #neg=1,210 #pos=32 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.09344305274657119;  // std dev = 2.473, 34.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=8 */
%   | | | else return 0.2602107907696145;  // std dev = 4.829, 97.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=39 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.4098730730305468;  // std dev = 2.678, 29.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=16 */
%   | | | else return 0.039967116917694;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.47579599392304095;  // std dev = 2.834, 34.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=21 */
%   else return 0.03193810888868637;  // std dev = 0.379, 351.000 (wgt'ed) examples reached here.  /* #neg=290 #pos=61 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.5631670188319176;  // std dev = 11.776, 888.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=716 */
%   | | | else return -0.10545823476543073;  // std dev = 5.289, 1,232.000 (wgt'ed) examples reached here.  /* #neg=1,203 #pos=29 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.17990637718651595;  // std dev = 5.478, 135.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=46 */
%   | | | else return 0.4901007470235393;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.33679387488759716;  // std dev = 2.813, 32.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=17 */
%   | | | else return -0.021786221475444723;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.40752735208725743;  // std dev = 2.834, 34.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=21 */
%   else return 0.028005656481572213;  // std dev = 0.379, 351.000 (wgt'ed) examples reached here.  /* #neg=290 #pos=61 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.4456179512743779;  // std dev = 11.776, 888.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=716 */
%   | | | else return -0.092357888964506;  // std dev = 5.529, 1,242.000 (wgt'ed) examples reached here.  /* #neg=1,210 #pos=32 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.15711182449908437;  // std dev = 5.276, 125.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=43 */
%   | | | else return 0.4073817375542042;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.2931385607786997;  // std dev = 2.678, 29.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=16 */
%   | | | else return 0.02408252827076076;  // std dev = 1.263, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.33201152621099134;  // std dev = 2.834, 34.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=21 */
%   else return 0.02448338196040297;  // std dev = 0.379, 351.000 (wgt'ed) examples reached here.  /* #neg=290 #pos=61 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09525958604333343;  // std dev = 0.359, 2,261.000 (wgt'ed) examples reached here.  /* #neg=1,466 #pos=795 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.22395727491106662;  // std dev = 2.804, 32.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=17 */
%   | | | else return -0.022074044322663012;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.2838483042520658;  // std dev = 1.947, 18.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=12 */
%   | | | else return 0.2618966411003392;  // std dev = 2.074, 19.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=12 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordauthor(M, K) )
%   | | then return 0.3021031670693771;  // std dev = 0.498, 22.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=10 */
%   | | else if ( title(N, L), venue(N, A) )
%   | | | then return 0.042823984713271736;  // std dev = 5.153, 169.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=33 */
%   | | | else return -0.08994228747607741;  // std dev = 1.677, 48.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=3 */
%   | else return -0.018513716047505957;  // std dev = 0.341, 112.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=15 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07970134808301894;  // std dev = 0.355, 2,261.000 (wgt'ed) examples reached here.  /* #neg=1,466 #pos=795 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.13587004139781916;  // std dev = 0.474, 40.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=18 */
%   | | else return 0.20785866017192145;  // std dev = 0.468, 37.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=24 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( haswordtitle(I, G) )
%   | | then return 0.258858081945195;  // std dev = 0.498, 22.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=10 */
%   | | else return -0.15068041029058926;  // std dev = 0.008, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.1323932888253298;  // std dev = 2.061, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | | else return -0.031059922778943833;  // std dev = 0.933, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return -0.017531194942421002;  // std dev = 4.266, 159.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=21 */
%   | | | else return 0.02280219614706157;  // std dev = 4.338, 128.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=23 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06633027186278279;  // std dev = 0.352, 2,261.000 (wgt'ed) examples reached here.  /* #neg=1,466 #pos=795 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.10713063410090151;  // std dev = 0.473, 40.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=18 */
%   | | else return 0.15694771713112404;  // std dev = 0.468, 37.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=24 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( haswordtitle(I, G) )
%   | | then return 0.21489769138555576;  // std dev = 0.498, 22.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=10 */
%   | | else return -0.1323946418426286;  // std dev = 0.007, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.23776555897545526;  // std dev = 1.098, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.04157361959668951;  // std dev = 1.966, 24.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=5 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return -0.015315004676741297;  // std dev = 4.266, 159.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=21 */
%   | | | else return 0.01976282470787108;  // std dev = 4.338, 128.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=23 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.1095458764976343;  // std dev = 0.331, 65.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=29 */
%   | else if ( haswordtitle(F, C) )
%   | | then return 0.053670890432602356;  // std dev = 0.350, 2,201.000 (wgt'ed) examples reached here.  /* #neg=1,431 #pos=770 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.076230226019999;  // std dev = 2.784, 35.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=17 */
%   | | | else return 0.11050757211192117;  // std dev = 2.946, 37.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=21 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( haswordtitle(K, I) )
%   | | then return 0.1735873199512449;  // std dev = 0.498, 22.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=10 */
%   | | else return -0.11791333535468654;  // std dev = 0.006, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return -0.0013539973999123574;  // std dev = 0.353, 182.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=27 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.021514671279268954;  // std dev = 4.415, 130.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=24 */
%   | | | else return -0.15557584656457477;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.08940263333485365;  // std dev = 0.327, 65.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=29 */
%   | else if ( haswordtitle(F, C) )
%   | | then return 0.0443366075319121;  // std dev = 0.348, 2,201.000 (wgt'ed) examples reached here.  /* #neg=1,431 #pos=770 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.059011981703104385;  // std dev = 2.782, 35.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=17 */
%   | | | else return 0.08351993540906064;  // std dev = 2.944, 37.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=21 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.44845021761564036;  // std dev = 3.579, 55.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=34 */
%   | | | else return -0.16685420530536826;  // std dev = 0.236, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | | else if ( haswordauthor(M, I) )
%   | | | then return 0.15636661340300587;  // std dev = 2.176, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
%   | | | else return -0.07927243172234295;  // std dev = 1.687, 48.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=3 */
%   | else return -0.009086811951507642;  // std dev = 0.338, 112.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=15 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03731419423767563;  // std dev = 0.346, 2,261.000 (wgt'ed) examples reached here.  /* #neg=1,466 #pos=795 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.07555656572677491;  // std dev = 2.801, 32.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=17 */
%   | | | else return -0.07375312892740925;  // std dev = 0.937, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return 0.07721935506284554;  // std dev = 0.468, 37.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=24 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.7254193074390013;  // std dev = 0.106, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.16877617290879846;  // std dev = 0.079, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordtitle(M, I) )
%   | | | then return 0.07611935139011913;  // std dev = 1.736, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | | else return -0.1637423111962;  // std dev = 0.129, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -8.110589364944148E-5;  // std dev = 0.350, 318.000 (wgt'ed) examples reached here.  /* #neg=265 #pos=53 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03066730954087945;  // std dev = 0.345, 2,261.000 (wgt'ed) examples reached here.  /* #neg=1,466 #pos=795 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.03308468906733456;  // std dev = 0.469, 40.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=18 */
%   | | else return 0.058667056384774895;  // std dev = 0.468, 37.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=24 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( haswordtitle(I, G) )
%   | | then if ( author(J, H), venue(J, B) )
%   | | | then return 0.13713534135367522;  // std dev = 0.793, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.06447513532308685;  // std dev = 1.728, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else return -0.06412205774157692;  // std dev = 0.227, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return -0.004816076657376743;  // std dev = 0.348, 185.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=29 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.012747797442981688;  // std dev = 4.052, 127.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=24 */
%   | | | else return -0.12504944677643612;  // std dev = 0.035, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 0.751221
   AUC PR    = 0.75589
   CLL	      = -0.560486
   Precision = 0.744637 at threshold = 0.5
   Recall    = 0.945525
   F1        = 0.833143


Total learning time: 2256.115458726883 seconds
Total inference time: 3.727 seconds
AUC ROC: 0.751221


Results scoring model
   AUC ROC   = 0.907462
   AUC PR    = 0.779979
   CLL	      = -0.402084
   Precision = 0.795767 at threshold = 0.5
   Recall    = 0.837416
   F1        = 0.816061


Total scoring time: 30.781 seconds
Refined model CLL: -0.402084


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.751221
   AUC PR    = 0.75589
   CLL	      = -0.560486
   Precision = 0.744637 at threshold = 0.5
   Recall    = 0.945525
   F1        = 0.833143


Total learning time: 4726.811131532669 seconds
Total inference time: 3.727 seconds
AUC ROC: 0.751221
Total revision time: 4726.811131532669
Best scored revision CLL: -0.402084


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 12:00:28
{'AUC ROC': 0.751221, 'AUC PR': 0.75589, 'CLL': -0.560486, 'Precision': [0.744637, 0.5], 'Recall': 0.945525, 'F1': 0.833143, 'Learning time': 4726.811131532669, 'Inference time': 3.727, 'parameter_0.4': {'AUC ROC': 0.751719, 'AUC PR': 0.750946, 'CLL': -0.56016, 'Precision': [0.744637, 0.5], 'Recall': 0.945525, 'F1': 0.833143, 'Learning time': 2407.987672805786, 'Inference time': 3.984}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.6644552414058139;  // std dev = 11.776, 888.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=716 */
%   | | | else return -0.11608616957037728;  // std dev = 5.584, 1,242.000 (wgt'ed) examples reached here.  /* #neg=1,210 #pos=32 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.09344305274657119;  // std dev = 2.473, 34.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=8 */
%   | | | else return 0.2602107907696145;  // std dev = 4.829, 97.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=39 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.4098730730305468;  // std dev = 2.678, 29.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=16 */
%   | | | else return 0.039967116917694;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.5248156017661789;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=12 */
%   | | | else return 0.48972788246793336;  // std dev = 2.103, 19.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=12 */
%   else return 0.03193810888868637;  // std dev = 0.379, 351.000 (wgt'ed) examples reached here.  /* #neg=290 #pos=61 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.5631670188319176;  // std dev = 11.776, 888.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=716 */
%   | | | else return -0.10545823476543073;  // std dev = 5.289, 1,232.000 (wgt'ed) examples reached here.  /* #neg=1,203 #pos=29 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.17990637718651595;  // std dev = 5.478, 135.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=46 */
%   | | | else return 0.4901007470235393;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.33679387488759716;  // std dev = 2.813, 32.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=17 */
%   | | | else return -0.021786221475444723;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.448295606241962;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=12 */
%   | | | else return 0.4191376347930739;  // std dev = 2.103, 19.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=12 */
%   else return 0.028005656481572213;  // std dev = 0.379, 351.000 (wgt'ed) examples reached here.  /* #neg=290 #pos=61 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.4456179512743779;  // std dev = 11.776, 888.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=716 */
%   | | | else return -0.092357888964506;  // std dev = 5.529, 1,242.000 (wgt'ed) examples reached here.  /* #neg=1,210 #pos=32 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.15711182449908437;  // std dev = 5.276, 125.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=43 */
%   | | | else return 0.4073817375542042;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.2931385607786997;  // std dev = 2.678, 29.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=16 */
%   | | | else return 0.02408252827076076;  // std dev = 1.263, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return 0.700172531265541;  // std dev = 0.011, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.32045244397706124;  // std dev = 2.833, 34.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=21 */
%   else return 0.02448338196040297;  // std dev = 0.379, 351.000 (wgt'ed) examples reached here.  /* #neg=290 #pos=61 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09525958604333343;  // std dev = 0.359, 2,261.000 (wgt'ed) examples reached here.  /* #neg=1,466 #pos=795 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.22395727491106662;  // std dev = 2.804, 32.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=17 */
%   | | | else return -0.022074044322663012;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return 0.27283703514915425;  // std dev = 0.472, 37.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=24 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( haswordtitle(K, I) )
%   | | then return 0.3021031670693771;  // std dev = 0.498, 22.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=10 */
%   | | else return -0.1524422874760774;  // std dev = 1.29e-08, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return -0.004090639124429029;  // std dev = 0.355, 182.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=27 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.03217309713930724;  // std dev = 4.424, 130.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=24 */
%   | | | else return -0.15244228747607746;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07970134808301894;  // std dev = 0.355, 2,261.000 (wgt'ed) examples reached here.  /* #neg=1,466 #pos=795 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.3336970632325977;  // std dev = 0.798, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.15879973380295434;  // std dev = 0.479, 72.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=38 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( haswordtitle(I, G) )
%   | | then return 0.258858081945195;  // std dev = 0.498, 22.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=10 */
%   | | else return -0.1337715544510109;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.13379977259828188;  // std dev = 2.070, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | | else return -0.030462985672861834;  // std dev = 0.934, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return -0.019839041417890915;  // std dev = 4.269, 159.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=21 */
%   | | | else return 0.023756510623001947;  // std dev = 4.340, 128.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=23 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06633027186278279;  // std dev = 0.352, 2,261.000 (wgt'ed) examples reached here.  /* #neg=1,466 #pos=795 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.13505061787417522;  // std dev = 2.805, 32.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=17 */
%   | | | else return -0.040065503724918586;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.38738902091667843;  // std dev = 0.012, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1448163665152937;  // std dev = 2.833, 34.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=21 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordauthor(M, K) )
%   | | then return 0.21489769138555576;  // std dev = 0.498, 22.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=10 */
%   | | else if ( title(N, L), venue(N, A) )
%   | | | then return 0.037145824163641296;  // std dev = 5.143, 169.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=33 */
%   | | | else return -0.09011359852358314;  // std dev = 1.683, 48.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=3 */
%   | else return -0.012447858594119248;  // std dev = 0.339, 112.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=15 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05496791848049898;  // std dev = 0.349, 2,261.000 (wgt'ed) examples reached here.  /* #neg=1,466 #pos=795 */
%   | else return 0.09871929535685654;  // std dev = 0.470, 77.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=42 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, B) )
%   | | then if ( samebib(G, H), venue(H, A) )
%   | | | then return 0.7977644817278104;  // std dev = 0.097, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.15292065383007558;  // std dev = 0.042, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordtitle(I, E) )
%   | | | then return 0.09500108090003288;  // std dev = 1.902, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | | else return -0.17200247665476828;  // std dev = 0.118, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | | then return -0.001227605414549401;  // std dev = 3.366, 87.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=15 */
%   | | | else return 0.023542261210434023;  // std dev = 4.392, 127.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=24 */
%   | | else return -0.009804203516139028;  // std dev = 0.340, 104.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=14 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04539732513418504;  // std dev = 0.348, 2,261.000 (wgt'ed) examples reached here.  /* #neg=1,466 #pos=795 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.05311870433852497;  // std dev = 0.470, 40.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=18 */
%   | | else return 0.09991797043323786;  // std dev = 0.469, 37.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=24 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( haswordtitle(I, G) )
%   | | then return 0.1665280036220327;  // std dev = 0.489, 22.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=10 */
%   | | else return -0.11717180487489731;  // std dev = 0.020, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.1925262893152641;  // std dev = 0.924, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.03651095691792194;  // std dev = 1.948, 24.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=5 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return -0.014027612179803818;  // std dev = 4.266, 159.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=21 */
%   | | | else return 0.013560692807194238;  // std dev = 4.334, 128.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=23 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.037391398734194954;  // std dev = 0.346, 2,261.000 (wgt'ed) examples reached here.  /* #neg=1,466 #pos=795 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.0933634673556929;  // std dev = 2.095, 23.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=12 */
%   | | | else return -0.027316755086985278;  // std dev = 1.941, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.07253769391010484;  // std dev = 2.089, 19.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=10 */
%   | | | else return 0.0711567942292442;  // std dev = 2.078, 19.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=12 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordauthor(L, J) )
%   | | then return 0.1314887080209335;  // std dev = 0.488, 22.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=10 */
%   | | else if ( title(M, K), venue(M, B) )
%   | | | then return 0.02699504131159935;  // std dev = 5.104, 169.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=33 */
%   | | | else return -0.08036108236601396;  // std dev = 1.691, 48.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=3 */
%   | else return -0.008785805733387655;  // std dev = 0.335, 112.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=15 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.027455293614044387;  // std dev = 0.335, 2,120.000 (wgt'ed) examples reached here.  /* #neg=1,375 #pos=745 */
%   | | else return 0.07997498977755256;  // std dev = 0.471, 141.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=50 */
%   | else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | | then return 0.14984796383701554;  // std dev = 0.768, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.02461243850036376;  // std dev = 2.759, 35.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=17 */
%   | | | else return 0.04894090319356249;  // std dev = 2.939, 37.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=21 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.4379263235321558;  // std dev = 3.561, 55.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=34 */
%   | | | else return -0.1724279795690863;  // std dev = 0.262, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | | else return -0.017021964931100166;  // std dev = 0.344, 67.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=12 */
%   | else return -0.0077194131310733246;  // std dev = 0.335, 112.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=15 */


Results
   AUC ROC   = 0.747528
   AUC PR    = 0.742922
   CLL	      = -0.56088
   Precision = 0.744637 at threshold = 0.5
   Recall    = 0.945525
   F1        = 0.833143


Total learning time: 2406.8491671085358 seconds
Total inference time: 3.894 seconds
AUC ROC: 0.747528


Dataset: 3_imdb_cora, Fold: 2, Type: Scratch (RDN-B), Time: 12:40:40
{'AUC ROC': 0.747528, 'AUC PR': 0.742922, 'CLL': -0.56088, 'Precision': [0.744637, 0.5], 'Recall': 0.945525, 'F1': 0.833143, 'Learning time': 2406.8491671085358, 'Inference time': 3.894}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.21088758924661208;  // std dev = 0.478, 3,195.000 (wgt'ed) examples reached here.  /* #neg=2,068 #pos=1,127 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.20259337954395806;  // std dev = 6.375, 180.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=62 */
%   | | | else return 0.40360348055405776;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.405767982718559;  // std dev = 3.226, 42.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=23 */
%   | | | else return 0.24276431971489695;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.4735335504841277;  // std dev = 2.481, 26.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=16 */
%   | | | else return 0.524815601766179;  // std dev = 2.449, 27.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=18 */
%   else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | then return 0.0452997730883396;  // std dev = 0.390, 358.000 (wgt'ed) examples reached here.  /* #neg=291 #pos=67 */
%   | else return -0.014779241696068047;  // std dev = 0.333, 181.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=23 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( title(F, D), venue(F, B) )
%   | | | then return 0.6200469175915364;  // std dev = 14.601, 1,283.000 (wgt'ed) examples reached here.  /* #neg=270 #pos=1,013 */
%   | | | else return -0.1106201050627202;  // std dev = 10.268, 1,903.000 (wgt'ed) examples reached here.  /* #neg=1,791 #pos=112 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.1074142657538929;  // std dev = 3.608, 65.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=18 */
%   | | | else return 0.2143927545634901;  // std dev = 5.646, 135.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=52 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.3488860488464421;  // std dev = 3.226, 42.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=23 */
%   | | | else return 0.2105717177991725;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.40564015880039006;  // std dev = 2.481, 26.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=16 */
%   | | | else return 0.448295606241962;  // std dev = 2.449, 27.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=18 */
%   else return 0.022003442513438658;  // std dev = 0.373, 539.000 (wgt'ed) examples reached here.  /* #neg=449 #pos=90 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.14919915190108304;  // std dev = 0.435, 3,195.000 (wgt'ed) examples reached here.  /* #neg=2,068 #pos=1,127 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.15857411237658522;  // std dev = 6.358, 180.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=62 */
%   | | | else return 0.31076244018646126;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(J, C) )
%   | | | then return 0.7169291047593336;  // std dev = 0.031, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.3942119839776889;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.2437654010964001;  // std dev = 3.553, 51.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=25 */
%   | | | else return 0.32964048565970067;  // std dev = 3.350, 48.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=30 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return 0.10149017058140249;  // std dev = 0.432, 52.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=13 */
%   | else return 0.0104741414667227;  // std dev = 0.365, 487.000 (wgt'ed) examples reached here.  /* #neg=410 #pos=77 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.12452526849155333;  // std dev = 0.432, 3,195.000 (wgt'ed) examples reached here.  /* #neg=2,068 #pos=1,127 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.13346326053085827;  // std dev = 6.357, 180.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=62 */
%   | | | else return 0.250458471637892;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | else if ( haswordauthor(H, C) )
%   | | then return 0.553211603022513;  // std dev = 0.038, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.2030390488435134;  // std dev = 3.651, 54.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=27 */
%   | | | else return 0.2590827663058661;  // std dev = 3.449, 51.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=32 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.18050926023121394;  // std dev = 0.471, 39.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=13 */
%   | | else return -0.09059178302394566;  // std dev = 0.230, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | else return 0.007538600732953712;  // std dev = 0.364, 482.000 (wgt'ed) examples reached here.  /* #neg=406 #pos=76 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.10241040331378586;  // std dev = 0.429, 3,195.000 (wgt'ed) examples reached here.  /* #neg=2,068 #pos=1,127 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.11047682031466574;  // std dev = 6.356, 180.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=62 */
%   | | | else return 0.19585112078940228;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(J, C) )
%   | | | then return 0.41618394680113585;  // std dev = 0.038, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2550031637351628;  // std dev = 1.156, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.14336260490705807;  // std dev = 3.536, 51.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=26 */
%   | | | else return 0.20423945880274966;  // std dev = 3.358, 48.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=29 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.030704066482375617;  // std dev = 0.389, 358.000 (wgt'ed) examples reached here.  /* #neg=291 #pos=67 */
%   | else return -0.01760468844871747;  // std dev = 0.333, 181.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=23 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.08321046115021377;  // std dev = 0.427, 3,195.000 (wgt'ed) examples reached here.  /* #neg=2,068 #pos=1,127 */
%   | | else if ( haswordauthor(F, C) )
%   | | | then return -0.07279264893102289;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.09810535695938351;  // std dev = 6.497, 186.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=67 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.3199787557483666;  // std dev = 0.034, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1922944504242147;  // std dev = 1.156, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.1098804241514484;  // std dev = 3.536, 51.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=26 */
%   | | | else return 0.1548206310980972;  // std dev = 3.357, 48.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=29 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.0829194307138627;  // std dev = 0.430, 52.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=13 */
%   | else return 0.004970041605468119;  // std dev = 0.364, 487.000 (wgt'ed) examples reached here.  /* #neg=410 #pos=77 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.06695986211599772;  // std dev = 0.425, 3,195.000 (wgt'ed) examples reached here.  /* #neg=2,068 #pos=1,127 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.055554142819187566;  // std dev = 3.381, 56.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=16 */
%   | | | else return 0.0834722083730924;  // std dev = 5.624, 135.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=52 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.2547716428074749;  // std dev = 0.030, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.14435589116764067;  // std dev = 1.156, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.08257610869934706;  // std dev = 3.544, 51.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=25 */
%   | | | else return 0.11768013612335787;  // std dev = 3.347, 48.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=30 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.024667749653083965;  // std dev = 0.388, 358.000 (wgt'ed) examples reached here.  /* #neg=291 #pos=67 */
%   | else return -0.01673582446404856;  // std dev = 0.333, 181.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=23 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, C) )
%   | | then if ( author(F, E), venue(F, B) )
%   | | | then return 0.5138596581911082;  // std dev = 0.329, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.23845490847556003;  // std dev = 1.645, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.12492458685013777;  // std dev = 3.704, 67.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=30 */
%   | | | else return -0.19021568352693052;  // std dev = 0.841, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | else if ( haswordtitle(H, C) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.05161668325822664;  // std dev = 23.599, 3,107.000 (wgt'ed) examples reached here.  /* #neg=2,017 #pos=1,090 */
%   | | | else return 0.06342482006659055;  // std dev = 6.495, 186.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=67 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.059712754806500665;  // std dev = 3.534, 51.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=26 */
%   | | | else return 0.09148412441568367;  // std dev = 3.356, 48.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=29 */
%   else return 0.009205541602937645;  // std dev = 0.371, 539.000 (wgt'ed) examples reached here.  /* #neg=449 #pos=90 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( title(F, D), venue(F, B) )
%   | | | then return 0.38533942801750853;  // std dev = 14.591, 1,283.000 (wgt'ed) examples reached here.  /* #neg=270 #pos=1,013 */
%   | | | else return -0.18701747933492174;  // std dev = 10.253, 1,903.000 (wgt'ed) examples reached here.  /* #neg=1,791 #pos=112 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return -0.011352005232684138;  // std dev = 3.608, 65.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=18 */
%   | | | else return 0.05047587373108831;  // std dev = 5.629, 135.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=52 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(J, C) )
%   | | | then return 0.1598972345877129;  // std dev = 0.015, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.07810016493233017;  // std dev = 1.156, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.04461880615174227;  // std dev = 3.543, 51.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=25 */
%   | | | else return 0.06942481958996098;  // std dev = 3.347, 48.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=30 */
%   else return 0.007980523787818206;  // std dev = 0.371, 539.000 (wgt'ed) examples reached here.  /* #neg=449 #pos=90 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.3133824835775239;  // std dev = 0.328, 25.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.09189371658607086;  // std dev = 1.395, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | | | else return 0.04302809329993421;  // std dev = 4.023, 81.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=26 */
%   | else return -0.06145100851049375;  // std dev = 0.265, 36.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=8 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.021964110994524326;  // std dev = 21.378, 3,107.000 (wgt'ed) examples reached here.  /* #neg=2,017 #pos=1,090 */
%   | | | else return 0.05240527105561264;  // std dev = 6.494, 186.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=67 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.03148032295582469;  // std dev = 3.533, 51.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=26 */
%   | | | else return 0.05471658698605211;  // std dev = 3.356, 48.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=29 */
%   | else return 5.852807503344867E-4;  // std dev = 0.364, 487.000 (wgt'ed) examples reached here.  /* #neg=410 #pos=77 */


Results
   AUC ROC   = 0.677797
   AUC PR    = 0.720616
   CLL	      = -0.692955
   Precision = 0.723636 at threshold = 0.5
   Recall    = 0.774319
   F1        = 0.74812


Total learning time: 6796.840453863144 seconds
Total inference time: 5.506 seconds
AUC ROC: 0.677797


Results scoring model
   AUC ROC   = 0.850006
   AUC PR    = 0.720138
   CLL	      = -0.477655
   Precision = 0.780721 at threshold = 0.5
   Recall    = 0.787676
   F1        = 0.784183


Total scoring time: 46.794 seconds
Parameter learned model CLL: -0.477655


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'true,false,true': 'haswordtitle(I, J), haswordauthor(K, J)', 'true,false,false': 'haswordvenue(A, L), haswordtitle(M, L)', 'false': 'haswordvenue(B, N), haswordtitle(P, N)'}, {'true,true,true': [0.478, 2, 1], 'true,true,false,true': [6.375, 118, 62], 'true,true,false,false': [1.651, 5, 6], 'true,false,true,true': [3.226, 19, 23], 'true,false,true,false': [1.754, 8, 5], 'true,false,false,true': [2.481, 10, 16], 'true,false,false,false': [2.449, 9, 18], 'false,true': [0.39, 291, 67], 'false,false': [0.333, 158, 23]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,true': 'title(F, D), venue(F, B)', 'true,true,false': 'title(G, D), venue(G, B)', 'true,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'true,false,true': 'haswordtitle(I, J), haswordauthor(K, J)', 'true,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true,true': [14.601, 270, 1], 'true,true,true,false': [10.268, 1, 112], 'true,true,false,true': [3.608, 47, 18], 'true,true,false,false': [5.646, 83, 52], 'true,false,true,true': [3.226, 19, 23], 'true,false,true,false': [1.754, 8, 5], 'true,false,false,true': [2.481, 10, 16], 'true,false,false,false': [2.449, 9, 18], 'false': [0.373, 449, 90]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'true,false,true': 'haswordauthor(J, C)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(A, M), haswordauthor(N, M)'}, {'true,true,true': [0.435, 2, 1], 'true,true,false,true': [6.358, 118, 62], 'true,true,false,false': [1.651, 5, 6], 'true,false,true,true': [0.031, 0, 3], 'true,false,true,false': [1.155, 2, 4], 'true,false,false,true': [3.553, 26, 25], 'true,false,false,false': [3.35, 18, 30], 'false,true': [0.432, 39, 13], 'false,false': [0.365, 410, 77]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordauthor(H, C)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false,true': 'haswordtitle(M, K)'}, {'true,true,true': [0.432, 2, 1], 'true,true,false,true': [6.357, 118, 62], 'true,true,false,false': [1.651, 5, 6], 'true,false,true': [0.038, 0, 3], 'true,false,false,true': [3.651, 27, 27], 'true,false,false,false': [3.449, 19, 32], 'false,true,true': [0.471, 26, 13], 'false,true,false': [0.23, 17, 1], 'false,false': [0.364, 406, 76]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'true,false,true': 'haswordauthor(J, C)', 'true,false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true,true': [0.429, 2, 1], 'true,true,false,true': [6.356, 118, 62], 'true,true,false,false': [1.651, 5, 6], 'true,false,true,true': [0.038, 0, 3], 'true,false,true,false': [1.156, 2, 4], 'true,false,false,true': [3.536, 25, 26], 'true,false,false,false': [3.358, 19, 29], 'false,true': [0.389, 291, 67], 'false,false': [0.333, 158, 23]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'haswordauthor(F, C)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'true,false,true': 'haswordauthor(I, C)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(A, L), haswordauthor(M, L)'}, {'true,true,true': [0.427, 2, 1], 'true,true,false,true': [0.894, 4, 1], 'true,true,false,false': [6.497, 119, 67], 'true,false,true,true': [0.034, 0, 3], 'true,false,true,false': [1.156, 2, 4], 'true,false,false,true': [3.536, 25, 26], 'true,false,false,false': [3.357, 19, 29], 'false,true': [0.43, 39, 13], 'false,false': [0.364, 410, 77]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'true,false,true': 'haswordauthor(I, C)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true': [0.425, 2, 1], 'true,true,false,true': [3.381, 40, 16], 'true,true,false,false': [5.624, 83, 52], 'true,false,true,true': [0.03, 0, 3], 'true,false,true,false': [1.156, 2, 4], 'true,false,false,true': [3.544, 26, 25], 'true,false,false,false': [3.347, 18, 30], 'false,true': [0.388, 291, 67], 'false,false': [0.333, 158, 23]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(E, C)', 'true,true,true': 'author(F, E), venue(F, B)', 'true,true,false': 'haswordtitle(G, D)', 'true,false': 'haswordtitle(H, C)', 'true,false,true': 'title(I, H), venue(I, B)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)'}, {'true,true,true,true': [0.329, 0, 4], 'true,true,true,false': [1.645, 6, 10], 'true,true,false,true': [3.704, 37, 30], 'true,true,false,false': [0.841, 14, 1], 'true,false,true,true': [23.599, 2, 1], 'true,false,true,false': [6.495, 119, 67], 'true,false,false,true': [3.534, 25, 26], 'true,false,false,false': [3.356, 19, 29], 'false': [0.371, 449, 90]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,true': 'title(F, D), venue(F, B)', 'true,true,false': 'title(G, D), venue(G, B)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'true,false,true': 'haswordauthor(J, C)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)'}, {'true,true,true,true': [14.591, 270, 1], 'true,true,true,false': [10.253, 1, 112], 'true,true,false,true': [3.608, 47, 18], 'true,true,false,false': [5.629, 83, 52], 'true,false,true,true': [0.015, 0, 3], 'true,false,true,false': [1.156, 2, 4], 'true,false,false,true': [3.543, 26, 25], 'true,false,false,false': [3.347, 18, 30], 'false': [0.371, 449, 90]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,true': 'author(F, D), venue(F, A)', 'true,true,false': 'haswordvenue(B, C)', 'false': 'haswordvenue(A, G), haswordvenue(B, G)', 'false,true': 'haswordtitle(H, G)', 'false,true,true': 'title(I, H), venue(I, B)', 'false,true,false': 'haswordvenue(A, J), haswordtitle(K, J)'}, {'true,true,true': [0.328, 7, 18], 'true,true,false,true': [1.395, 6, 6], 'true,true,false,false': [4.023, 55, 26], 'true,false': [0.265, 28, 8], 'false,true,true,true': [21.378, 2, 1], 'false,true,true,false': [6.494, 119, 67], 'false,true,false,true': [3.533, 25, 26], 'false,true,false,false': [3.356, 19, 29], 'false,false': [0.364, 410, 77]}]]
[{'': [0.23033262680420624, 0.13909493633851], 'true': [0.22836859254031097, 0.24451303155006812], 'true,false': [0.24991735537190227, 0.22997508009968132], 'true,false,true': [0.24773242630385606, 0.2366863905325442], 'true,false,false': [0.23668639053254395, 0.2222222222222218], 'true,true': [0.22831409601761957, 0.22927003097502813], 'true,true,false': [0.22580246913580262, 0.2479338842975207], 'false': [0.15212540182890757, 0.11092457495192556]}, {'': [0.22982173472229026, 0.13890897386999368], 'true': [0.22833419659351856, 0.2424366725195624], 'true,false': [0.24857458524666426, 0.22977256182475883], 'true,false,true': [0.24773242630385547, 0.23668639053254428], 'true,false,false': [0.23668639053254442, 0.22222222222222257], 'true,true': [0.22841981255098218, 0.2269553226753767], 'true,true,true': [0.16615747994184993, 0.05540618097835821], 'true,true,false': [0.20023668639053266, 0.23610042220987323]}, {'': [0.19390968633974645, 0.13890624180580222], 'true': [0.19170130503986704, 0.24039840436603943], 'true,false': [0.17150215901975063, 0.2427599153358455], 'true,false,false': [0.24756102997670246, 0.23385973065027418], 'true,true': [0.18956298761853715, 0.2271600528543767], 'true,true,false': [0.22455664481590226, 0.2479338842975207], 'true,false,true': [0.00032684076618324137, 0.22237437146466932], 'false': [0.18693230343439693, 0.13297901180915292]}, {'': [0.1907456564405684, 0.13872403467274913], 'true': [0.18886590895119237, 0.23712431094705752], 'true,false': [0.00048732664664796754, 0.24098821333361142], 'true,false,false': [0.24680704807514892, 0.23321177508676966], 'true,true': [0.18659773827728504, 0.22657542459982696], 'true,true,false': [0.22448187820423723, 0.24793388429752056], 'false': [0.184302536920348, 0.13252697918958464], 'false,true': [0.22182266125670652, 0.05272235084933571]}, {'': [0.1882927349734213, 0.1381114736840386], 'true': [0.18658949369298258, 0.23532537875369208], 'true,false': [0.15439721433257805, 0.24114451688497837], 'true,false,false': [0.2452058815964043, 0.23492016982502648], 'true,true': [0.18421347983699457, 0.22617579982660763], 'true,true,false': [0.2244263669466527, 0.24793388429752075], 'true,false,true': [0.00047288362188679933, 0.22269963141133695], 'false': [0.15109870970190628, 0.11087396152173498]}, {'': [0.18642886748922435, 0.13797240104269687], 'true': [0.18481035609656526, 0.23408188577157812], 'true,false': [0.15223524122233725, 0.24063520595949597], 'true,false,false': [0.24514073262768102, 0.23480767243797662], 'true,true': [0.18234561629527019, 0.22593743019588364], 'true,true,false': [0.15999999999999998, 0.22694538342475729], 'true,false,true': [0.00038030888581937666, 0.22272828011522583], 'false': [0.18526144023574623, 0.13233686588246632]}, {'': [0.18502374449693765, 0.13781774488673362], 'true': [0.18343239252103472, 0.23344432951997512], 'true,false': [0.15129190121347683, 0.2403583293709313], 'true,false,false': [0.24627800316266138, 0.2334338584943835], 'true,true': [0.18090704195326987, 0.22561039543514072], 'true,true,false': [0.20408163265306106, 0.2343123246083827], 'true,false,true': [0.0002900906582499844, 0.22272892708769365], 'false': [0.15082436224867615, 0.11095335250446785]}, {'': [0.183979007108272, 0.13771105840732764], 'true': [0.19136637391667685, 0.18365630322040857], 'true,true': [0.15282915624879068, 0.1907278361450859], 'true,true,false': [0.20471634951980247, 0.04709950326371057], 'true,false': [0.18194111158098294, 0.24020193389761677], 'true,false,false': [0.2449085158962684, 0.23468118631931167], 'true,false,true': [0.17924956417736299, 0.22676997328026882], 'true,true,true': [0.027107448921076527, 0.16909002784754248]}, {'': [0.18292242650530444, 0.1377039820240081], 'true': [0.18132298805705163, 0.23275349177197255], 'true,false': [0.14997668636917555, 0.24008085358754183], 'true,false,false': [0.24607047066452914, 0.23339989298427763], 'true,true': [0.1786129873053541, 0.22433211135789516], 'true,true,false': [0.200236686390533, 0.23469123911752934], 'true,true,true': [0.16593426663468624, 0.05523971835149801], 'true,false,true': [7.061063668818701e-05, 0.2226994707006834]}, {'': [0.16569229797494253, 0.15153463728065794], 'true': [0.18825665105809264, 0.07043168926830276], 'true,true': [0.1073460299165458, 0.19523521785006387], 'true,true,false': [0.1622018212682006, 0.19982094481436938], 'false': [0.15423101134449377, 0.13226485061124518], 'false,true': [0.15164151932021264, 0.24001153030815534], 'false,true,false': [0.2447984251678369, 0.23464731187054957], 'false,true,true': [0.14709485274721873, 0.22671608361074283]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
2;true,false,true;haswordauthor(J, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,false;haswordauthor(H, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
4;true,false,true;haswordauthor(J, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;true
5;true,false,true;haswordauthor(I, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;true
6;true,false,true;haswordauthor(I, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
8;true,false,true;haswordauthor(J, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.21088758924661208;  // std dev = 0.478, 3,195.000 (wgt'ed) examples reached here.  /* #neg=2,068 #pos=1,127 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.20259337954395806;  // std dev = 6.375, 180.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=62 */
%   | | | else return 0.40360348055405776;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | else if ( haswordauthor(H, C) )
%   | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.35814893509951123;  // std dev = 3.674, 54.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=27 */
%   | | | else return 0.4855999154916681;  // std dev = 3.453, 51.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=32 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then return 0.060461073827834916;  // std dev = 0.402, 173.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=35 */
%   | | else return 0.03112190807248447;  // std dev = 0.378, 185.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=32 */
%   | else return -0.014779241696068047;  // std dev = 0.333, 181.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=23 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( title(F, D), venue(F, B) )
%   | | | then return 0.6200469175915364;  // std dev = 14.601, 1,283.000 (wgt'ed) examples reached here.  /* #neg=270 #pos=1,013 */
%   | | | else return -0.1106201050627202;  // std dev = 10.268, 1,903.000 (wgt'ed) examples reached here.  /* #neg=1,791 #pos=112 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.1074142657538929;  // std dev = 3.608, 65.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=18 */
%   | | | else return 0.2143927545634901;  // std dev = 5.646, 135.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=52 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.354234761414809;  // std dev = 3.214, 42.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=23 */
%   | | | else return 0.1933565204010197;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return 0.5607384755367782;  // std dev = 0.866, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.4132485177539948;  // std dev = 3.354, 48.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=30 */
%   else return 0.02199711433111657;  // std dev = 0.373, 539.000 (wgt'ed) examples reached here.  /* #neg=449 #pos=90 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.14919915190108304;  // std dev = 0.435, 3,195.000 (wgt'ed) examples reached here.  /* #neg=2,068 #pos=1,127 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.15857411237658522;  // std dev = 6.358, 180.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=62 */
%   | | | else return 0.31076244018646126;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | else if ( haswordauthor(H, C) )
%   | | then return 0.6103669547109957;  // std dev = 0.040, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.25493972524916564;  // std dev = 3.663, 54.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=27 */
%   | | | else return 0.3368011863100816;  // std dev = 3.452, 51.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=32 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.17428209279178544;  // std dev = 0.467, 37.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=12 */
%   | | else return -0.08050174830747482;  // std dev = 0.249, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | else return 0.010543074635136908;  // std dev = 0.365, 487.000 (wgt'ed) examples reached here.  /* #neg=410 #pos=77 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.12452526849155333;  // std dev = 0.432, 3,195.000 (wgt'ed) examples reached here.  /* #neg=2,068 #pos=1,127 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.13346326053085827;  // std dev = 6.357, 180.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=62 */
%   | | | else return 0.250458471637892;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(J, C) )
%   | | | then return 0.460061606320463;  // std dev = 0.042, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.31649282348331165;  // std dev = 1.160, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.18880807013961162;  // std dev = 3.540, 51.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=26 */
%   | | | else return 0.26956340858191913;  // std dev = 3.366, 48.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=29 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.09412252147672893;  // std dev = 0.428, 57.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=14 */
%   | else return 0.007543935957514204;  // std dev = 0.364, 482.000 (wgt'ed) examples reached here.  /* #neg=406 #pos=76 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.10241040331378586;  // std dev = 0.429, 3,195.000 (wgt'ed) examples reached here.  /* #neg=2,068 #pos=1,127 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.11047682031466574;  // std dev = 6.356, 180.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=62 */
%   | | | else return 0.19585112078940228;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.19588821594394798;  // std dev = 2.860, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | | | else return 0.10483277689375224;  // std dev = 2.379, 23.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.19285640887472064;  // std dev = 2.335, 23.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=13 */
%   | | | else return 0.23098312353949946;  // std dev = 2.428, 27.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=18 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.03175859591247956;  // std dev = 0.389, 358.000 (wgt'ed) examples reached here.  /* #neg=291 #pos=67 */
%   | else return -0.019588696519780603;  // std dev = 0.333, 181.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=23 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.08321046115021377;  // std dev = 0.427, 3,195.000 (wgt'ed) examples reached here.  /* #neg=2,068 #pos=1,127 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.09017968181578513;  // std dev = 6.355, 180.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=62 */
%   | | | else return 0.15011731117717145;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.14847893464209247;  // std dev = 3.185, 42.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=23 */
%   | | | else return 0.030916329504701294;  // std dev = 1.758, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return 0.2147297166208757;  // std dev = 0.828, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.15557197399440417;  // std dev = 3.344, 48.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=30 */
%   else if ( haswordvenue(B, N), haswordauthor(P, N) )
%   | then return 0.07916269377935059;  // std dev = 0.427, 57.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=14 */
%   | else return 0.004656666080642245;  // std dev = 0.364, 482.000 (wgt'ed) examples reached here.  /* #neg=406 #pos=76 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( title(F, D), venue(F, B) )
%   | | | then return 0.4142966112344192;  // std dev = 14.601, 1,283.000 (wgt'ed) examples reached here.  /* #neg=270 #pos=1,013 */
%   | | | else return -0.16564334182924012;  // std dev = 10.261, 1,903.000 (wgt'ed) examples reached here.  /* #neg=1,791 #pos=112 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.012353731572244814;  // std dev = 3.608, 65.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=18 */
%   | | | else return 0.08267843091941823;  // std dev = 5.628, 135.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=52 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(J, C) )
%   | | | then return 0.26595682471671017;  // std dev = 0.048, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.17204756979341887;  // std dev = 1.164, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.07765811261083305;  // std dev = 3.526, 51.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=26 */
%   | | | else return 0.11845876562858415;  // std dev = 3.358, 48.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=29 */
%   else return 0.010804019135666613;  // std dev = 0.371, 539.000 (wgt'ed) examples reached here.  /* #neg=449 #pos=90 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.042293628167009475;  // std dev = 0.386, 3,195.000 (wgt'ed) examples reached here.  /* #neg=2,068 #pos=1,127 */
%   | | else if ( haswordauthor(F, C) )
%   | | | then return -0.10839329255350567;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.07570013895999925;  // std dev = 6.492, 186.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=67 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.09362471520000787;  // std dev = 2.927, 36.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=20 */
%   | | | else return 0.016196549518628714;  // std dev = 2.153, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.0841238644345972;  // std dev = 2.443, 26.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=16 */
%   | | | else return 0.1050442765984011;  // std dev = 2.428, 27.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=18 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.024215242698777006;  // std dev = 0.388, 358.000 (wgt'ed) examples reached here.  /* #neg=291 #pos=67 */
%   | else return -0.019972723704221852;  // std dev = 0.333, 181.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=23 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.03396843651850839;  // std dev = 0.385, 3,195.000 (wgt'ed) examples reached here.  /* #neg=2,068 #pos=1,127 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.07243588075689465;  // std dev = 3.381, 56.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=16 */
%   | | | else return 0.04995194630009633;  // std dev = 5.622, 135.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=52 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.20196985824097935;  // std dev = 0.040, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.10799008398211911;  // std dev = 1.163, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.04003833527030227;  // std dev = 3.535, 51.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=25 */
%   | | | else return 0.06832343039512667;  // std dev = 3.342, 48.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=30 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.064462391390103;  // std dev = 0.426, 57.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=14 */
%   | else return 0.0013249100820193743;  // std dev = 0.363, 482.000 (wgt'ed) examples reached here.  /* #neg=406 #pos=76 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then if ( author(F, D), venue(F, A) )
%   | | then return 0.33499215907961755;  // std dev = 0.336, 25.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=18 */
%   | | else if ( author(G, D), title(G, E) )
%   | | | then return 0.07182446372842961;  // std dev = 1.704, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | | else return 0.0625407279491128;  // std dev = 3.907, 79.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=28 */
%   | else return -0.05291925143577798;  // std dev = 0.282, 36.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=8 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.025397094699575254;  // std dev = 21.376, 3,107.000 (wgt'ed) examples reached here.  /* #neg=2,017 #pos=1,090 */
%   | | | else return 0.048828745678309186;  // std dev = 6.493, 186.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=67 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.029391381533869342;  // std dev = 3.527, 51.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=26 */
%   | | | else return 0.0524209358991895;  // std dev = 3.351, 48.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=29 */
%   | else return -4.2968988879545105E-4;  // std dev = 0.364, 487.000 (wgt'ed) examples reached here.  /* #neg=410 #pos=77 */


Results
   AUC ROC   = 0.677281
   AUC PR    = 0.716859
   CLL	      = -0.695106
   Precision = 0.722965 at threshold = 0.5
   Recall    = 0.771725
   F1        = 0.74655


Total learning time: 7546.317914962769 seconds
Total inference time: 5.41 seconds
AUC ROC: 0.677281


Results scoring model
   AUC ROC   = 0.850402
   AUC PR    = 0.719928
   CLL	      = -0.477603
   Precision = 0.780236 at threshold = 0.5
   Recall    = 0.785449
   F1        = 0.782834


Total scoring time: 46.473 seconds
Refined model CLL: -0.477603


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.677281
   AUC PR    = 0.716859
   CLL	      = -0.695106
   Precision = 0.722965 at threshold = 0.5
   Recall    = 0.771725
   F1        = 0.74655


Total learning time: 14436.425368825912 seconds
Total inference time: 5.41 seconds
AUC ROC: 0.677281
Total revision time: 14436.425368825912
Best scored revision CLL: -0.477603


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 16:41:32
{'AUC ROC': 0.677281, 'AUC PR': 0.716859, 'CLL': -0.695106, 'Precision': [0.722965, 0.5], 'Recall': 0.771725, 'F1': 0.74655, 'Learning time': 14436.425368825912, 'Inference time': 5.41, 'parameter_0.6': {'AUC ROC': 0.677797, 'AUC PR': 0.720616, 'CLL': -0.692955, 'Precision': [0.723636, 0.5], 'Recall': 0.774319, 'F1': 0.74812, 'Learning time': 6796.840453863144, 'Inference time': 5.506}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.21088758924661208;  // std dev = 0.478, 3,195.000 (wgt'ed) examples reached here.  /* #neg=2,068 #pos=1,127 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.20259337954395806;  // std dev = 6.375, 180.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=62 */
%   | | | else return 0.40360348055405776;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | else if ( haswordauthor(H, C) )
%   | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.35814893509951123;  // std dev = 3.674, 54.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=27 */
%   | | | else return 0.4855999154916681;  // std dev = 3.453, 51.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=32 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then return 0.060461073827834916;  // std dev = 0.402, 173.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=35 */
%   | | else return 0.03112190807248447;  // std dev = 0.378, 185.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=32 */
%   | else return -0.014779241696068047;  // std dev = 0.333, 181.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=23 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( title(F, D), venue(F, B) )
%   | | | then return 0.6200469175915364;  // std dev = 14.601, 1,283.000 (wgt'ed) examples reached here.  /* #neg=270 #pos=1,013 */
%   | | | else return -0.1106201050627202;  // std dev = 10.268, 1,903.000 (wgt'ed) examples reached here.  /* #neg=1,791 #pos=112 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.1074142657538929;  // std dev = 3.608, 65.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=18 */
%   | | | else return 0.2143927545634901;  // std dev = 5.646, 135.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=52 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.354234761414809;  // std dev = 3.214, 42.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=23 */
%   | | | else return 0.1933565204010197;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return 0.5607384755367782;  // std dev = 0.866, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.4132485177539948;  // std dev = 3.354, 48.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=30 */
%   else return 0.02199711433111657;  // std dev = 0.373, 539.000 (wgt'ed) examples reached here.  /* #neg=449 #pos=90 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.14919915190108304;  // std dev = 0.435, 3,195.000 (wgt'ed) examples reached here.  /* #neg=2,068 #pos=1,127 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.15857411237658522;  // std dev = 6.358, 180.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=62 */
%   | | | else return 0.31076244018646126;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(J, C) )
%   | | | then return 0.6103669547109957;  // std dev = 0.040, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.3806209725403455;  // std dev = 1.158, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.2455479880888519;  // std dev = 3.560, 51.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=25 */
%   | | | else return 0.3361860924478248;  // std dev = 3.354, 48.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=30 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.09660621365785076;  // std dev = 0.429, 57.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=14 */
%   | else return 0.010101316135888222;  // std dev = 0.364, 482.000 (wgt'ed) examples reached here.  /* #neg=406 #pos=76 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.12452526849155333;  // std dev = 0.432, 3,195.000 (wgt'ed) examples reached here.  /* #neg=2,068 #pos=1,127 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.13346326053085827;  // std dev = 6.357, 180.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=62 */
%   | | | else return 0.250458471637892;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | else if ( haswordauthor(H, C) )
%   | | then return 0.460061606320463;  // std dev = 0.042, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.20129767027235193;  // std dev = 3.733, 57.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=30 */
%   | | | else return 0.2705451807021237;  // std dev = 3.366, 48.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=29 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.17176931814408422;  // std dev = 0.467, 37.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=12 */
%   | | else return -0.08330262323075192;  // std dev = 0.250, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | else return 0.008075543551798998;  // std dev = 0.364, 487.000 (wgt'ed) examples reached here.  /* #neg=410 #pos=77 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.10241040331378586;  // std dev = 0.429, 3,195.000 (wgt'ed) examples reached here.  /* #neg=2,068 #pos=1,127 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.11047682031466574;  // std dev = 6.356, 180.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=62 */
%   | | | else return 0.19585112078940228;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.19404358511301334;  // std dev = 2.860, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | | | else return 0.10602846633955022;  // std dev = 2.381, 23.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.1947098247192892;  // std dev = 2.335, 23.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=13 */
%   | | | else return 0.23089673713740422;  // std dev = 2.428, 27.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=18 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.0317497591459685;  // std dev = 0.389, 358.000 (wgt'ed) examples reached here.  /* #neg=291 #pos=67 */
%   | else return -0.01959793161582598;  // std dev = 0.333, 181.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=23 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.08321046115021377;  // std dev = 0.427, 3,195.000 (wgt'ed) examples reached here.  /* #neg=2,068 #pos=1,127 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.09017968181578513;  // std dev = 6.355, 180.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=62 */
%   | | | else return 0.15011731117717145;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.1416328562401828;  // std dev = 3.225, 44.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=25 */
%   | | | else return 0.05915989765604911;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return 0.0716111368210612;  // std dev = 0.587, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.16821543044044815;  // std dev = 3.314, 47.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=29 */
%   else if ( haswordvenue(A, N), haswordauthor(P, N) )
%   | then return 0.08156135314310323;  // std dev = 0.427, 52.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=13 */
%   | else return 0.00515676575789457;  // std dev = 0.364, 487.000 (wgt'ed) examples reached here.  /* #neg=410 #pos=77 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( title(F, D), venue(F, B) )
%   | | | then return 0.4142966112344192;  // std dev = 14.601, 1,283.000 (wgt'ed) examples reached here.  /* #neg=270 #pos=1,013 */
%   | | | else return -0.16564334182924012;  // std dev = 10.261, 1,903.000 (wgt'ed) examples reached here.  /* #neg=1,791 #pos=112 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.012353731572244814;  // std dev = 3.608, 65.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=18 */
%   | | | else return 0.08267843091941823;  // std dev = 5.628, 135.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=52 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.12729528701977375;  // std dev = 2.926, 36.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=20 */
%   | | | else return 0.019536375958057725;  // std dev = 2.149, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.11257701373248832;  // std dev = 2.446, 26.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=16 */
%   | | | else return 0.1329879876305483;  // std dev = 2.430, 27.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=18 */
%   else return 0.010794268138537745;  // std dev = 0.371, 539.000 (wgt'ed) examples reached here.  /* #neg=449 #pos=90 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.042293628167009475;  // std dev = 0.386, 3,195.000 (wgt'ed) examples reached here.  /* #neg=2,068 #pos=1,127 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.08486202096709158;  // std dev = 3.381, 56.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=16 */
%   | | | else return 0.06508137933062977;  // std dev = 5.628, 135.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=52 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.26060171740448873;  // std dev = 0.041, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.15949365441077396;  // std dev = 1.159, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.05564867893095217;  // std dev = 3.527, 51.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=26 */
%   | | | else return 0.08499502301846718;  // std dev = 3.350, 48.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=29 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.07573636833075145;  // std dev = 0.427, 57.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=14 */
%   | else return 0.0015196132866488994;  // std dev = 0.363, 482.000 (wgt'ed) examples reached here.  /* #neg=406 #pos=76 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(F, C) )
%   | | then return 0.23772085710997568;  // std dev = 0.361, 20.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=14 */
%   | | else if ( haswordtitle(G, D) )
%   | | | then return 0.10777942297924464;  // std dev = 3.486, 67.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=30 */
%   | | | else return -0.17471189000474416;  // std dev = 0.763, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | else if ( haswordtitle(H, C) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.03216064781607838;  // std dev = 21.421, 3,107.000 (wgt'ed) examples reached here.  /* #neg=2,017 #pos=1,090 */
%   | | | else return 0.061549055074949746;  // std dev = 6.492, 186.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=67 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.03916768145464949;  // std dev = 3.532, 51.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=25 */
%   | | | else return 0.06700926711666359;  // std dev = 3.343, 48.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=30 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.022672016658476204;  // std dev = 0.388, 358.000 (wgt'ed) examples reached here.  /* #neg=291 #pos=67 */
%   | else return -0.020923280001982403;  // std dev = 0.334, 181.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=23 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.027253971872238707;  // std dev = 0.384, 3,195.000 (wgt'ed) examples reached here.  /* #neg=2,068 #pos=1,127 */
%   | | else if ( haswordauthor(F, C) )
%   | | | then return -0.17640408559280424;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.0487653754307079;  // std dev = 6.493, 186.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=67 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.17655039562954708;  // std dev = 0.031, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.04572804685017265;  // std dev = 1.004, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.02626050345870066;  // std dev = 3.610, 54.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=28 */
%   | | | else return 0.06158360635015479;  // std dev = 3.309, 47.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=29 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.019536329724555268;  // std dev = 0.388, 358.000 (wgt'ed) examples reached here.  /* #neg=291 #pos=67 */
%   | else return -0.01830631913092098;  // std dev = 0.334, 181.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=23 */


Results
   AUC ROC   = 0.677762
   AUC PR    = 0.718664
   CLL	      = -0.694388
   Precision = 0.723636 at threshold = 0.5
   Recall    = 0.774319
   F1        = 0.74812


Total learning time: 7420.856189250946 seconds
Total inference time: 5.508 seconds
AUC ROC: 0.677762


Dataset: 3_imdb_cora, Fold: 2, Type: Scratch (RDN-B), Time: 18:45:19
{'AUC ROC': 0.677762, 'AUC PR': 0.718664, 'CLL': -0.694388, 'Precision': [0.723636, 0.5], 'Recall': 0.774319, 'F1': 0.74812, 'Learning time': 7420.856189250946, 'Inference time': 5.508}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.21391816586873794;  // std dev = 0.479, 4,264.000 (wgt'ed) examples reached here.  /* #neg=2,747 #pos=1,517 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.09911279052119894;  // std dev = 3.896, 83.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=20 */
%   | | | else return 0.24543217209373325;  // std dev = 6.407, 173.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=67 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.34995221378803576;  // std dev = 3.905, 61.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | | | else return 0.48501460674130376;  // std dev = 3.959, 67.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=42 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.08891816586874314;  // std dev = 0.421, 78.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=18 */
%   | else return 0.004566380582377671;  // std dev = 0.354, 642.000 (wgt'ed) examples reached here.  /* #neg=548 #pos=94 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1858333610302362;  // std dev = 0.479, 4,264.000 (wgt'ed) examples reached here.  /* #neg=2,747 #pos=1,517 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.08661442947540587;  // std dev = 3.896, 83.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=20 */
%   | | | else return 0.21285572624768753;  // std dev = 6.407, 173.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=67 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.3502282077446266;  // std dev = 3.560, 52.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=29 */
%   | | | else return 0.20856181545808727;  // std dev = 1.902, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.3757094101694457;  // std dev = 2.913, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | | | else return 0.48087750832855736;  // std dev = 2.757, 36.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=25 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.07774578121440995;  // std dev = 0.421, 78.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=18 */
%   | else return 0.004009608484283955;  // std dev = 0.354, 642.000 (wgt'ed) examples reached here.  /* #neg=548 #pos=94 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.15802265139581864;  // std dev = 0.478, 4,257.000 (wgt'ed) examples reached here.  /* #neg=2,745 #pos=1,512 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.13353712346457866;  // std dev = 7.454, 249.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=84 */
%   | | | else return 0.36419992636744014;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(J, C) )
%   | | | then return 0.6316183098285973;  // std dev = 0.023, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.41827848596972744;  // std dev = 1.196, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.2429495082518859;  // std dev = 3.917, 62.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=31 */
%   | | | else return 0.3410735170621984;  // std dev = 3.918, 66.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=41 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return 0.06663904525991414;  // std dev = 0.408, 71.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=15 */
%   | else return 0.00429091848267295;  // std dev = 0.356, 649.000 (wgt'ed) examples reached here.  /* #neg=552 #pos=97 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1318096851273289;  // std dev = 0.479, 4,264.000 (wgt'ed) examples reached here.  /* #neg=2,747 #pos=1,517 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.051922327040455074;  // std dev = 3.896, 83.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=20 */
%   | | | else return 0.15375008102926546;  // std dev = 6.392, 173.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=67 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.4770270618844889;  // std dev = 0.024, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.35417229838542535;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.18925933912312048;  // std dev = 3.835, 60.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=30 */
%   | | | else return 0.26797214841842243;  // std dev = 4.000, 69.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=43 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.06613674676792222;  // std dev = 0.421, 78.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=18 */
%   | else return 0.0021999842116840747;  // std dev = 0.353, 642.000 (wgt'ed) examples reached here.  /* #neg=548 #pos=94 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.10837418090844612;  // std dev = 0.478, 4,257.000 (wgt'ed) examples reached here.  /* #neg=2,745 #pos=1,512 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.0345201269264348;  // std dev = 4.249, 90.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=25 */
%   | | | else return 0.12513669569601796;  // std dev = 6.391, 173.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=67 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.186262296872901;  // std dev = 3.616, 55.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=31 */
%   | | | else return 0.01477517315917983;  // std dev = 1.803, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.1954794283327622;  // std dev = 2.802, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | | | else return 0.24457050374607364;  // std dev = 2.748, 36.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=25 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.05683857860848804;  // std dev = 0.421, 78.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=18 */
%   | else return 0.0019282645596437713;  // std dev = 0.353, 642.000 (wgt'ed) examples reached here.  /* #neg=548 #pos=94 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.08768644100085612;  // std dev = 0.478, 4,257.000 (wgt'ed) examples reached here.  /* #neg=2,745 #pos=1,512 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.06635280628036734;  // std dev = 7.441, 249.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=84 */
%   | | | else return 0.23931150633546258;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(J, C) )
%   | | | then return 0.3150530406976954;  // std dev = 0.030, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2239994689655703;  // std dev = 1.199, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.09979470716697292;  // std dev = 3.864, 61.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | | | else return 0.162879850019391;  // std dev = 3.922, 67.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=42 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.018306067449807503;  // std dev = 0.372, 465.000 (wgt'ed) examples reached here.  /* #neg=387 #pos=78 */
%   | else return -0.0142858786275045;  // std dev = 0.341, 255.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=34 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.0701623023608913;  // std dev = 0.479, 4,264.000 (wgt'ed) examples reached here.  /* #neg=2,747 #pos=1,517 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.010956058277167247;  // std dev = 3.896, 83.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=20 */
%   | | | else return 0.08323941278883766;  // std dev = 6.379, 173.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=67 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.12043289670501793;  // std dev = 3.275, 45.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=25 */
%   | | | else return 0.02712403631480237;  // std dev = 2.362, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.10803269659033479;  // std dev = 2.800, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | | | else return 0.1427414757705986;  // std dev = 2.748, 36.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=25 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.05461015786911936;  // std dev = 0.407, 71.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=15 */
%   | else return 5.549659768005909E-4;  // std dev = 0.356, 649.000 (wgt'ed) examples reached here.  /* #neg=552 #pos=97 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.055866758181517394;  // std dev = 0.478, 4,257.000 (wgt'ed) examples reached here.  /* #neg=2,745 #pos=1,512 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.0016730381797391799;  // std dev = 4.249, 90.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=25 */
%   | | | else return 0.06539701128656063;  // std dev = 6.378, 173.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=67 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.22896376030422771;  // std dev = 0.029, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.16145925101066014;  // std dev = 1.199, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.05286661808932987;  // std dev = 3.853, 61.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | | | else return 0.09135227737258722;  // std dev = 3.921, 67.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=42 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.015003143168631447;  // std dev = 0.372, 465.000 (wgt'ed) examples reached here.  /* #neg=387 #pos=78 */
%   | else return -0.012964679193338257;  // std dev = 0.341, 255.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=34 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.04402560917965391;  // std dev = 0.478, 4,257.000 (wgt'ed) examples reached here.  /* #neg=2,745 #pos=1,512 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.027570992334561832;  // std dev = 7.434, 249.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=84 */
%   | | | else return 0.14847918623332054;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(J, C) )
%   | | | then return 0.19111117376354728;  // std dev = 0.025, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1483911792834227;  // std dev = 1.157, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.03747268837842153;  // std dev = 3.806, 60.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=30 */
%   | | | else return 0.06912080185098528;  // std dev = 3.975, 69.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=43 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.04531355775956241;  // std dev = 0.420, 78.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=18 */
%   | else return -5.602704946837326E-4;  // std dev = 0.353, 642.000 (wgt'ed) examples reached here.  /* #neg=548 #pos=94 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.034550739175403695;  // std dev = 0.479, 4,264.000 (wgt'ed) examples reached here.  /* #neg=2,747 #pos=1,517 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.00925999909288731;  // std dev = 3.896, 83.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=20 */
%   | | | else return 0.042424270117861866;  // std dev = 6.373, 173.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=67 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.05529002548287152;  // std dev = 3.600, 55.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=31 */
%   | | | else return -0.03972183001022728;  // std dev = 1.805, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.11366399583907985;  // std dev = 0.821, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.053339886545790305;  // std dev = 3.833, 64.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=40 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return 0.04539654312042517;  // std dev = 0.407, 71.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=15 */
%   | else return -8.39325230644118E-4;  // std dev = 0.356, 649.000 (wgt'ed) examples reached here.  /* #neg=552 #pos=97 */


Results
   AUC ROC   = 0.506328
   AUC PR    = 0.608579
   CLL	      = -0.822717
   Precision = 0.74359 at threshold = 0.5
   Recall    = 0.037613
   F1        = 0.071605


Total learning time: 10261.123556137085 seconds
Total inference time: 4.631 seconds
AUC ROC: 0.506328


Results scoring model
   AUC ROC   = 0.572716
   AUC PR    = 0.39768
   CLL	      = -0.621325
   Precision = 0.633028 at threshold = 0.5
   Recall    = 0.038419
   F1        = 0.072441


Total scoring time: 38.59 seconds
Parameter learned model CLL: -0.621325


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'true,false,true': 'haswordauthor(I, C)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true': [0.479, 2, 1], 'true,true,false,true': [3.896, 63, 20], 'true,true,false,false': [6.407, 106, 67], 'true,false,true,true': [2.11e-08, 0, 3], 'true,false,true,false': [1.195, 2, 5], 'true,false,false,true': [3.905, 31, 30], 'true,false,false,false': [3.959, 25, 42], 'false,true': [0.421, 60, 18], 'false,false': [0.354, 548, 94]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(B, M), haswordauthor(N, M)'}, {'true,true,true': [0.479, 2, 1], 'true,true,false,true': [3.896, 63, 20], 'true,true,false,false': [6.407, 106, 67], 'true,false,true,true': [3.56, 23, 29], 'true,false,true,false': [1.902, 9, 6], 'true,false,false,true': [2.913, 15, 20], 'true,false,false,false': [2.757, 11, 25], 'false,true': [0.421, 60, 18], 'false,false': [0.354, 548, 94]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'true,false,true': 'haswordauthor(J, C)', 'true,false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false': 'haswordvenue(A, M), haswordauthor(N, M)'}, {'true,true,true': [0.478, 2, 1], 'true,true,false,true': [7.454, 165, 84], 'true,true,false,false': [1.852, 6, 8], 'true,false,true,true': [0.023, 0, 3], 'true,false,true,false': [1.196, 2, 5], 'true,false,false,true': [3.917, 31, 31], 'true,false,false,false': [3.918, 25, 41], 'false,true': [0.408, 56, 15], 'false,false': [0.356, 552, 97]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'true,false,true': 'haswordauthor(I, C)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true': [0.479, 2, 1], 'true,true,false,true': [3.896, 63, 20], 'true,true,false,false': [6.392, 106, 67], 'true,false,true,true': [0.024, 0, 3], 'true,false,true,false': [1.155, 2, 4], 'true,false,false,true': [3.835, 30, 30], 'true,false,false,false': [4.0, 26, 43], 'false,true': [0.421, 60, 18], 'false,false': [0.353, 548, 94]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false': 'haswordvenue(B, M), haswordauthor(N, M)'}, {'true,true,true': [0.478, 2, 1], 'true,true,false,true': [4.249, 65, 25], 'true,true,false,false': [6.391, 106, 67], 'true,false,true,true': [3.616, 24, 31], 'true,false,true,false': [1.803, 9, 5], 'true,false,false,true': [2.802, 14, 19], 'true,false,false,false': [2.748, 11, 25], 'false,true': [0.421, 60, 18], 'false,false': [0.353, 548, 94]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'true,false,true': 'haswordauthor(J, C)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true,true': [0.478, 2, 1], 'true,true,false,true': [7.441, 165, 84], 'true,true,false,false': [1.852, 6, 8], 'true,false,true,true': [0.03, 0, 3], 'true,false,true,false': [1.199, 2, 5], 'true,false,false,true': [3.864, 31, 30], 'true,false,false,false': [3.922, 25, 42], 'false,true': [0.372, 387, 78], 'false,false': [0.341, 221, 34]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'title(I, H), venue(I, B)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(A, L), haswordauthor(M, L)'}, {'true,true,true': [0.479, 2, 1], 'true,true,false,true': [3.896, 63, 20], 'true,true,false,false': [6.379, 106, 67], 'true,false,true,true': [3.275, 20, 25], 'true,false,true,false': [2.362, 13, 11], 'true,false,false,true': [2.8, 14, 19], 'true,false,false,false': [2.748, 11, 25], 'false,true': [0.407, 56, 15], 'false,false': [0.356, 552, 97]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'true,false,true': 'haswordauthor(I, C)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true': [0.478, 2, 1], 'true,true,false,true': [4.249, 65, 25], 'true,true,false,false': [6.378, 106, 67], 'true,false,true,true': [0.029, 0, 3], 'true,false,true,false': [1.199, 2, 5], 'true,false,false,true': [3.853, 31, 30], 'true,false,false,false': [3.921, 25, 42], 'false,true': [0.372, 387, 78], 'false,false': [0.341, 221, 34]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'true,false,true': 'haswordauthor(J, C)', 'true,false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false': 'haswordvenue(B, M), haswordauthor(N, M)'}, {'true,true,true': [0.478, 2, 1], 'true,true,false,true': [7.434, 165, 84], 'true,true,false,false': [1.852, 6, 8], 'true,false,true,true': [0.025, 0, 3], 'true,false,true,false': [1.157, 2, 4], 'true,false,false,true': [3.806, 30, 30], 'true,false,false,false': [3.975, 26, 43], 'false,true': [0.42, 60, 18], 'false,false': [0.353, 548, 94]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false': 'haswordvenue(A, M), haswordauthor(N, M)'}, {'true,true,true': [0.479, 2, 1], 'true,true,false,true': [3.896, 63, 20], 'true,true,false,false': [6.373, 106, 67], 'true,false,true,true': [3.6, 24, 31], 'true,false,true,false': [1.805, 9, 5], 'true,false,false,true': [0.821, 1, 4], 'true,false,false,false': [3.833, 24, 40], 'false,true': [0.407, 56, 15], 'false,false': [0.356, 552, 97]}]]
[{'': [0.23082565837316418, 0.13135802469135913], 'true': [0.22893648680392595, 0.24364629279563194], 'true,false': [0.15999999999999986, 0.2460937499999993], 'true,false,false': [0.2499328137597435, 0.23390510135887765], 'true,true': [0.22919748520705016, 0.2243499755859384], 'true,true,false': [0.1829002758020027, 0.23729493133749868], 'true,false,true': [1.4802973661668753e-16, 0.20408163265306106], 'false': [0.17751479289940775, 0.12497937714113895]}, {'': [0.23025943773908106, 0.13119591518355259], 'true': [0.22886536050624745, 0.24076859210113757], 'true,false': [0.24661679276152537, 0.2293193173968663], 'true,false,true': [0.2436906962744899, 0.24118436901238519], 'true,false,false': [0.24239937085436014, 0.21115032396236527], 'true,true': [0.2291974852071333, 0.22315094641121466], 'true,true,false': [0.18290027580200394, 0.23729493133749827], 'false': [0.17751479289940797, 0.12497937714113391]}, {'': [0.22972383693583448, 0.13106484611453814], 'true': [0.22880200605660045, 0.2381102688346432], 'true,false': [0.1526240767906258, 0.24220763288895936], 'true,false,false': [0.24748227637739742, 0.23258894672821992], 'true,true': [0.22890484635109326, 0.22699706276574957], 'true,true,false': [0.22315836384443105, 0.24489795918367335], 'true,false,true': [0.00017452038057090094, 0.20430543683312358], 'false': [0.16624361066216395, 0.12683299191688371]}, {'': [0.2292880195813796, 0.1309804745020209], 'true': [0.22873558985940048, 0.2354564318704999], 'true,false': [0.15170857315391706, 0.2395502988069833], 'true,false,false': [0.24506465356076493, 0.23187348383433862], 'true,true': [0.22918393444946347, 0.2211521609296456], 'true,true,false': [0.1829002758020037, 0.23614243238909916], 'true,false,true': [0.00019854052828989963, 0.2224324918285936], 'false': [0.17738250301622877, 0.12489998799545098]}, {'': [0.22901351025507782, 0.13087613963405867], 'true': [0.22868325262368272, 0.2338151385692481], 'true,false': [0.2413421715902332, 0.22386433012087242], 'true,false,true': [0.2377230605923531, 0.23211908087104166], 'true,true': [0.2288505075473641, 0.22578484680275776], 'true,true,false': [0.20061728395061743, 0.2360678266052008], 'true,false,false': [0.23794603825395488, 0.2098035206856515], 'false': [0.17737690542252227, 0.12489987343692313]}, {'': [0.22881872488857324, 0.13079611937566668], 'true': [0.2286316401818825, 0.2320724260858709], 'true,false': [0.14554828741470127, 0.23781457515766755], 'true,false,false': [0.24474455724081653, 0.22960859590548768], 'true,true': [0.2288430567055734, 0.225071086010111], 'true,true,false': [0.2223639039313055, 0.24489795918367352], 'true,false,true': [0.0002999567427094026, 0.2053103461108589], 'false': [0.13853121083383388, 0.11600492586103074]}, {'': [0.22870360386164842, 0.13072922658276398], 'true': [0.2285850689939865, 0.23122262612845884], 'true,false': [0.23834721154237234, 0.22336979587941408], 'true,false,true': [0.23840889957282105, 0.23255336598920243], 'true,true': [0.22913081848791622, 0.21939370738342726], 'true,false,false': [0.2376076685571624, 0.20974225203173755], 'true,true,false': [0.1829002758020026, 0.23520811160964555], 'false': [0.16569283508618599, 0.12661610204228202]}, {'': [0.22863442695384376, 0.13066099695900493], 'true': [0.2285548232800294, 0.23059902874130703], 'true,false': [0.14474416750452707, 0.23645024377042745], 'true,false,false': [0.24337461871934893, 0.22944010347396263], 'true,true': [0.22881133555581468, 0.22426089411090855], 'true,true,false': [0.2006172839506169, 0.2351714296558583], 'true,false,true': [0.0002713603996919907, 0.20529402720268108], 'false': [0.13839015243670225, 0.11606148437319794]}, {'': [0.22858512248719748, 0.13060965573645425], 'true': [0.22852720668271376, 0.23016709452103845], 'true,false': [0.14918760796043498, 0.23505288099207325], 'true,false,false': [0.24142801048219273, 0.22904342823046137], 'true,true': [0.22880815368255294, 0.22388518188510548], 'true,true,false': [0.221925553979324, 0.24489795918367346], 'true,false,true': [0.00020703418616745128, 0.22306956220477478], 'false': [0.17654497041987666, 0.12480075210722928]}, {'': [0.22854762979173213, 0.13054945714751348], 'true': [0.2285034447988856, 0.22983551133633473], 'true,false': [0.2365055759861987, 0.22293002466378503], 'true,false,true': [0.2356391259794988, 0.23271385052922186], 'true,true': [0.22909872531023767, 0.218513857185735], 'true,false,false': [0.13484106832983017, 0.22954827885838763], 'true,true,false': [0.1829002758020027, 0.23473406812335196], 'false': [0.16533627912169732, 0.12653300453660232]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,false;haswordvenue(B, G), haswordauthor(H, G).;true;true
0;true,false,true;haswordauthor(I, C).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;true
2;true,false,true;haswordauthor(J, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;true
3;true,false,true;haswordauthor(I, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;true
5;true,false,true;haswordauthor(J, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,false;haswordvenue(B, G), haswordauthor(H, G).;true;true
7;true,false,true;haswordauthor(I, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
8;true,false,true;haswordauthor(J, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.21391816586873794;  // std dev = 0.479, 4,264.000 (wgt'ed) examples reached here.  /* #neg=2,747 #pos=1,517 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.09911279052119894;  // std dev = 3.896, 83.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=20 */
%   | | | else return 0.24543217209373325;  // std dev = 6.407, 173.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=67 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.34995221378803576;  // std dev = 3.905, 61.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | | | else return 0.48501460674130376;  // std dev = 3.959, 67.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=42 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.06941654073331519;  // std dev = 0.408, 71.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=15 */
%   | else return 0.007609643882254142;  // std dev = 0.357, 649.000 (wgt'ed) examples reached here.  /* #neg=552 #pos=97 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1858333610302362;  // std dev = 0.479, 4,264.000 (wgt'ed) examples reached here.  /* #neg=2,747 #pos=1,517 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.08661442947540587;  // std dev = 3.896, 83.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=20 */
%   | | | else return 0.21285572624768753;  // std dev = 6.407, 173.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=67 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.3502282077446266;  // std dev = 3.560, 52.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=29 */
%   | | | else return 0.20856181545808727;  // std dev = 1.902, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.3757094101694457;  // std dev = 2.913, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | | | else return 0.48087750832855736;  // std dev = 2.757, 36.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=25 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.08739447155416763;  // std dev = 0.421, 78.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=18 */
%   | else return 0.002854594939064307;  // std dev = 0.353, 642.000 (wgt'ed) examples reached here.  /* #neg=548 #pos=94 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.15802265139581864;  // std dev = 0.478, 4,257.000 (wgt'ed) examples reached here.  /* #neg=2,745 #pos=1,512 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.13353712346457866;  // std dev = 7.454, 249.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=84 */
%   | | | else return 0.36419992636744014;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(J, C) )
%   | | | then return 0.6316183098285973;  // std dev = 0.023, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.41827848596972744;  // std dev = 1.196, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.2429495082518859;  // std dev = 3.917, 62.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=31 */
%   | | | else return 0.3410735170621984;  // std dev = 3.918, 66.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=41 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.076323200083104;  // std dev = 0.421, 78.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=18 */
%   | else return 0.0025032735273531055;  // std dev = 0.353, 642.000 (wgt'ed) examples reached here.  /* #neg=548 #pos=94 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1318096851273289;  // std dev = 0.479, 4,264.000 (wgt'ed) examples reached here.  /* #neg=2,747 #pos=1,517 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.11047816933976132;  // std dev = 7.261, 242.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=79 */
%   | | | else return 0.2980428701570302;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.24286239023022005;  // std dev = 3.625, 55.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=31 */
%   | | | else return 0.05725737966593815;  // std dev = 1.798, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.24413763849614076;  // std dev = 2.811, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | | | else return 0.3107271309962919;  // std dev = 2.750, 36.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=25 */
%   else if ( haswordvenue(B, N), haswordauthor(P, N) )
%   | then return 0.06609146822892734;  // std dev = 0.421, 78.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=18 */
%   | else return 0.002194601729801881;  // std dev = 0.353, 642.000 (wgt'ed) examples reached here.  /* #neg=548 #pos=94 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.10819027826190314;  // std dev = 0.478, 4,257.000 (wgt'ed) examples reached here.  /* #neg=2,745 #pos=1,512 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.0345201269264348;  // std dev = 4.249, 90.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=25 */
%   | | | else return 0.13013516990343518;  // std dev = 6.380, 173.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=67 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.4116297413922121;  // std dev = 0.037, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.29969266804172473;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.14402234963586588;  // std dev = 3.820, 60.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=30 */
%   | | | else return 0.20293149783015782;  // std dev = 3.988, 69.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=43 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.056797775371692276;  // std dev = 0.421, 78.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=18 */
%   | else return 0.001923538762315608;  // std dev = 0.353, 642.000 (wgt'ed) examples reached here.  /* #neg=548 #pos=94 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.08766277655638212;  // std dev = 0.479, 4,264.000 (wgt'ed) examples reached here.  /* #neg=2,747 #pos=1,517 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.016106645767945262;  // std dev = 3.896, 83.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=20 */
%   | | | else return 0.10458044109912054;  // std dev = 6.379, 173.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=67 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.14258083177985775;  // std dev = 3.615, 55.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=31 */
%   | | | else return 0.012400726300119676;  // std dev = 1.802, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.14838276004627374;  // std dev = 2.802, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | | | else return 0.1836120805280538;  // std dev = 2.749, 36.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=25 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.01829972398498554;  // std dev = 0.372, 465.000 (wgt'ed) examples reached here.  /* #neg=387 #pos=78 */
%   | else return -0.014295840826713993;  // std dev = 0.341, 255.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=34 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.07025115384711773;  // std dev = 0.478, 4,257.000 (wgt'ed) examples reached here.  /* #neg=2,745 #pos=1,512 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.011329655735269286;  // std dev = 4.249, 90.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=25 */
%   | | | else return 0.08296817760368612;  // std dev = 6.378, 173.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=67 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.28387223400868805;  // std dev = 0.037, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.19177989138593646;  // std dev = 1.156, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.1876793546401296;  // std dev = 1.198, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.09364507342212268;  // std dev = 5.377, 122.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=68 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.05466800605823519;  // std dev = 0.407, 71.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=15 */
%   | else return 5.412319895419448E-4;  // std dev = 0.356, 649.000 (wgt'ed) examples reached here.  /* #neg=552 #pos=97 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.05581636802498189;  // std dev = 0.479, 4,264.000 (wgt'ed) examples reached here.  /* #neg=2,747 #pos=1,517 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 6.982482989338764E-4;  // std dev = 3.896, 83.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=20 */
%   | | | else return 0.06518034990147233;  // std dev = 6.378, 173.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=67 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.2299438927103186;  // std dev = 0.032, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.14128011728972154;  // std dev = 1.198, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.04919871640424512;  // std dev = 3.852, 61.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | | | else return 0.09686892044769646;  // std dev = 3.920, 67.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=42 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.04637532319241026;  // std dev = 0.421, 78.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=18 */
%   | else return 7.648868214349013E-5;  // std dev = 0.353, 642.000 (wgt'ed) examples reached here.  /* #neg=548 #pos=94 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.04409364088437858;  // std dev = 0.478, 4,257.000 (wgt'ed) examples reached here.  /* #neg=2,745 #pos=1,512 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.026440107935266924;  // std dev = 7.435, 249.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=84 */
%   | | | else return 0.14504098401859647;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(J, C) )
%   | | | then return 0.1918295061101032;  // std dev = 0.028, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.12581268036936968;  // std dev = 1.156, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.039521552450120796;  // std dev = 3.950, 65.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=33 */
%   | | | else return 0.07167824907347482;  // std dev = 3.834, 64.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=40 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return 0.04667138700628699;  // std dev = 0.407, 71.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=15 */
%   | else return -3.163500988936549E-4;  // std dev = 0.356, 649.000 (wgt'ed) examples reached here.  /* #neg=552 #pos=97 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.03457054926687026;  // std dev = 0.478, 4,257.000 (wgt'ed) examples reached here.  /* #neg=2,745 #pos=1,512 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.007356882233149798;  // std dev = 4.249, 90.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=25 */
%   | | | else return 0.042551052319851915;  // std dev = 6.372, 173.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=67 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.07746500084438811;  // std dev = 3.095, 42.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=24 */
%   | | | else return -0.0398011415640739;  // std dev = 2.460, 25.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=11 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.045052355958774735;  // std dev = 2.878, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | | | else return 0.07319974397703727;  // std dev = 2.747, 36.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=25 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.013370115736682554;  // std dev = 0.372, 465.000 (wgt'ed) examples reached here.  /* #neg=387 #pos=78 */
%   | else return -0.013901294639771513;  // std dev = 0.341, 255.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=34 */


Results
   AUC ROC   = 0.506328
   AUC PR    = 0.608579
   CLL	      = -0.822707
   Precision = 0.74359 at threshold = 0.5
   Recall    = 0.037613
   F1        = 0.071605


Total learning time: 10131.485913038254 seconds
Total inference time: 4.578 seconds
AUC ROC: 0.506328


Results scoring model
   AUC ROC   = 0.572721
   AUC PR    = 0.397825
   CLL	      = -0.621307
   Precision = 0.633028 at threshold = 0.5
   Recall    = 0.038419
   F1        = 0.072441


Total scoring time: 37.978 seconds
Refined model CLL: -0.621307


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.506328
   AUC PR    = 0.608579
   CLL	      = -0.822707
   Precision = 0.74359 at threshold = 0.5
   Recall    = 0.037613
   F1        = 0.071605


Total learning time: 20469.177469175338 seconds
Total inference time: 4.578 seconds
AUC ROC: 0.506328
Total revision time: 20469.177469175338
Best scored revision CLL: -0.621307


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 00:26:42
{'AUC ROC': 0.506328, 'AUC PR': 0.608579, 'CLL': -0.822707, 'Precision': [0.74359, 0.5], 'Recall': 0.037613, 'F1': 0.071605, 'Learning time': 20469.177469175338, 'Inference time': 4.578, 'parameter_0.8': {'AUC ROC': 0.506328, 'AUC PR': 0.608579, 'CLL': -0.822717, 'Precision': [0.74359, 0.5], 'Recall': 0.037613, 'F1': 0.071605, 'Learning time': 10261.123556137085, 'Inference time': 4.631}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.21391816586873794;  // std dev = 0.479, 4,264.000 (wgt'ed) examples reached here.  /* #neg=2,747 #pos=1,517 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.09911279052119894;  // std dev = 3.896, 83.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=20 */
%   | | | else return 0.24543217209373325;  // std dev = 6.407, 173.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=67 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.34995221378803576;  // std dev = 3.905, 61.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | | | else return 0.48501460674130376;  // std dev = 3.959, 67.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=42 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.06941654073331519;  // std dev = 0.408, 71.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=15 */
%   | else return 0.007609643882254142;  // std dev = 0.357, 649.000 (wgt'ed) examples reached here.  /* #neg=552 #pos=97 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1858333610302362;  // std dev = 0.479, 4,264.000 (wgt'ed) examples reached here.  /* #neg=2,747 #pos=1,517 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.08661442947540587;  // std dev = 3.896, 83.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=20 */
%   | | | else return 0.21285572624768753;  // std dev = 6.407, 173.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=67 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.3502282077446266;  // std dev = 3.560, 52.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=29 */
%   | | | else return 0.20856181545808727;  // std dev = 1.902, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.3757094101694457;  // std dev = 2.913, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | | | else return 0.48087750832855736;  // std dev = 2.757, 36.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=25 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.08739447155416763;  // std dev = 0.421, 78.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=18 */
%   | else return 0.002854594939064307;  // std dev = 0.353, 642.000 (wgt'ed) examples reached here.  /* #neg=548 #pos=94 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.15802265139581864;  // std dev = 0.478, 4,257.000 (wgt'ed) examples reached here.  /* #neg=2,745 #pos=1,512 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.13353712346457866;  // std dev = 7.454, 249.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=84 */
%   | | | else return 0.36419992636744014;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.29998852379454927;  // std dev = 3.175, 42.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=24 */
%   | | | else return 0.19728677447007775;  // std dev = 2.483, 25.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=11 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.3099655665570517;  // std dev = 2.910, 35.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=20 */
%   | | | else return 0.3893345493993364;  // std dev = 2.756, 36.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=25 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.02237170926954954;  // std dev = 0.373, 465.000 (wgt'ed) examples reached here.  /* #neg=387 #pos=78 */
%   | else return -0.011147190585484263;  // std dev = 0.340, 255.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=34 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), venue(E, A) )
%   | | then return 0.7250624592357862;  // std dev = 0.176, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordtitle(F, C) )
%   | | | then return 0.34524573455947355;  // std dev = 1.858, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | | else return 0.6583751451589047;  // std dev = 0.237, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( haswordtitle(G, C) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 0.13015839538811444;  // std dev = 31.177, 4,250.000 (wgt'ed) examples reached here.  /* #neg=2,745 #pos=1,505 */
%   | | | else return 0.1237387960020436;  // std dev = 7.463, 251.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=86 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.20245824931672157;  // std dev = 4.023, 66.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=34 */
%   | | | else return 0.2663330951321597;  // std dev = 3.995, 69.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=43 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then return 0.07461922703120885;  // std dev = 0.421, 78.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=18 */
%   | else return 0.0012265116824511397;  // std dev = 0.353, 642.000 (wgt'ed) examples reached here.  /* #neg=548 #pos=94 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.10821945190738637;  // std dev = 0.478, 4,257.000 (wgt'ed) examples reached here.  /* #neg=2,745 #pos=1,512 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.03482397301370737;  // std dev = 4.249, 90.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=25 */
%   | | | else return 0.12962191201715426;  // std dev = 6.398, 173.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=67 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.19863506484823523;  // std dev = 3.624, 55.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=31 */
%   | | | else return 5.50982216583903E-4;  // std dev = 1.798, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.33270529971078194;  // std dev = 0.821, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.2031691573085941;  // std dev = 3.828, 64.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=40 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.06453342840189882;  // std dev = 0.421, 78.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=18 */
%   | else return 0.0010742355834415344;  // std dev = 0.353, 642.000 (wgt'ed) examples reached here.  /* #neg=548 #pos=94 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.08774032418011761;  // std dev = 0.478, 4,264.000 (wgt'ed) examples reached here.  /* #neg=2,747 #pos=1,517 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.013781814075223251;  // std dev = 3.896, 83.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=20 */
%   | | | else return 0.10409029098092831;  // std dev = 6.397, 173.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=67 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.3188469062596964;  // std dev = 0.049, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.247637664814292;  // std dev = 1.199, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return 0.2569739123435872;  // std dev = 1.157, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.12477289563191504;  // std dev = 5.383, 122.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=68 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.05539599370896056;  // std dev = 0.421, 78.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=18 */
%   | else return 9.407562887164739E-4;  // std dev = 0.353, 642.000 (wgt'ed) examples reached here.  /* #neg=548 #pos=94 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.07027520864631706;  // std dev = 0.478, 4,257.000 (wgt'ed) examples reached here.  /* #neg=2,745 #pos=1,512 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.04905335396658809;  // std dev = 7.447, 249.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=84 */
%   | | | else return 0.22166103346681812;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(J, C) )
%   | | | then return 0.25410721629216754;  // std dev = 0.043, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.19399035443201398;  // std dev = 1.158, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0724013942764098;  // std dev = 3.806, 60.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=30 */
%   | | | else return 0.12268258683154473;  // std dev = 3.986, 69.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=43 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.04724078241118947;  // std dev = 0.421, 78.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=18 */
%   | else return 8.237789621448781E-4;  // std dev = 0.353, 642.000 (wgt'ed) examples reached here.  /* #neg=548 #pos=94 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.05575030549619227;  // std dev = 0.478, 4,257.000 (wgt'ed) examples reached here.  /* #neg=2,745 #pos=1,512 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.0018866238958238247;  // std dev = 4.249, 90.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=25 */
%   | | | else return 0.06874483753458904;  // std dev = 6.386, 173.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=67 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.08794420770074561;  // std dev = 3.609, 55.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=31 */
%   | | | else return -0.046855475939170034;  // std dev = 1.800, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.08049358546133245;  // std dev = 2.782, 33.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=19 */
%   | | | else return 0.11990400508511535;  // std dev = 2.747, 36.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=25 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.014934691921135914;  // std dev = 0.372, 465.000 (wgt'ed) examples reached here.  /* #neg=387 #pos=78 */
%   | else return -0.013165364234320463;  // std dev = 0.341, 255.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=34 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.04411888033635036;  // std dev = 0.478, 4,264.000 (wgt'ed) examples reached here.  /* #neg=2,747 #pos=1,517 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.011694439822388015;  // std dev = 3.896, 83.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=20 */
%   | | | else return 0.053687793868711677;  // std dev = 6.386, 173.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=67 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.19389088511531039;  // std dev = 0.038, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.140959007857577;  // std dev = 1.201, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.03185067019059213;  // std dev = 3.852, 61.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=30 */
%   | | | else return 0.07341789270093847;  // std dev = 3.909, 67.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=42 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.052633627514943694;  // std dev = 0.407, 71.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=15 */
%   | else return -9.774943157350555E-4;  // std dev = 0.356, 649.000 (wgt'ed) examples reached here.  /* #neg=552 #pos=97 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( haswordauthor(E, C) )
%   | | then if ( author(F, E), title(F, D) )
%   | | | then return 0.5683578934310775;  // std dev = 0.075, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.16152907439666936;  // std dev = 1.814, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.03357981931381422;  // std dev = 31.138, 4,246.000 (wgt'ed) examples reached here.  /* #neg=2,743 #pos=1,503 */
%   | | | else return 0.029005919373318884;  // std dev = 7.613, 258.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=91 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(J, C) )
%   | | | then return 0.16544797981007128;  // std dev = 0.034, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.11196539541054146;  // std dev = 1.158, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.027166799159652356;  // std dev = 3.951, 65.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=33 */
%   | | | else return 0.054630068994977785;  // std dev = 3.823, 64.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=40 */
%   else return 0.0037172207239552545;  // std dev = 0.361, 720.000 (wgt'ed) examples reached here.  /* #neg=608 #pos=112 */


Results
   AUC ROC   = 0.506504
   AUC PR    = 0.609299
   CLL	      = -0.822819
   Precision = 0.75 at threshold = 0.5
   Recall    = 0.038911
   F1        = 0.073983


Total learning time: 8519.078674077988 seconds
Total inference time: 5.149 seconds
AUC ROC: 0.506504


Dataset: 3_imdb_cora, Fold: 2, Type: Scratch (RDN-B), Time: 02:48:47
{'AUC ROC': 0.506504, 'AUC PR': 0.609299, 'CLL': -0.822819, 'Precision': [0.75, 0.5], 'Recall': 0.038911, 'F1': 0.073983, 'Learning time': 8519.078674077988, 'Inference time': 5.149}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.21330135701834016;  // std dev = 0.479, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.12028485742960847;  // std dev = 4.463, 103.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=27 */
%   | | | else return 0.2648474996928126;  // std dev = 7.101, 209.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=85 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.3649982501680042;  // std dev = 4.272, 73.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=37 */
%   | | | else return 0.477196554147132;  // std dev = 4.451, 84.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=52 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.06926004621062345;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 0.005426162822282901;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.18530354008666333;  // std dev = 0.479, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.10500272994125538;  // std dev = 4.463, 103.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=27 */
%   | | | else return 0.2294575007214978;  // std dev = 7.101, 209.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=85 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5142372924435396;  // std dev = 1.198, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.3030166354222459;  // std dev = 4.255, 73.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=37 */
%   | | | else return 0.41648667279104884;  // std dev = 4.443, 84.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=52 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.06061815509605241;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 0.004764355085214639;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.15805938797414934;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.06454109932242497;  // std dev = 4.463, 103.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=27 */
%   | | | else return 0.1934904464853735;  // std dev = 7.101, 209.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=85 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.30181672923547476;  // std dev = 3.955, 65.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=37 */
%   | | | else return 0.12985994601597747;  // std dev = 1.941, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.3091416237269521;  // std dev = 3.214, 43.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=25 */
%   | | | else return 0.3830161154304319;  // std dev = 3.060, 43.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=29 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.06665397399339616;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 0.0026272184729727384;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1318487881456303;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.11301637624248481;  // std dev = 8.167, 297.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=103 */
%   | | | else return 0.3525398797982056;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(J, C) )
%   | | | then return 0.4727999312037022;  // std dev = 0.016, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.35241271483828884;  // std dev = 1.199, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.1941447153978304;  // std dev = 4.240, 73.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=37 */
%   | | | else return 0.26769695688575734;  // std dev = 4.429, 84.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=52 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.05822085396359157;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 0.0023019149906748373;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1081531035526926;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.0348741176720454;  // std dev = 4.463, 103.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=27 */
%   | | | else return 0.13403639809688797;  // std dev = 7.084, 209.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=85 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.18055130281565043;  // std dev = 3.938, 65.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=37 */
%   | | | else return 0.06410132511457463;  // std dev = 1.945, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.19536148428018654;  // std dev = 3.207, 43.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=25 */
%   | | | else return 0.2329314652134453;  // std dev = 3.057, 43.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=29 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return 0.050559813281390024;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 0.002012888860042329;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), venue(E, A) )
%   | | then return 0.6299308351670647;  // std dev = 0.353, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordtitle(F, C) )
%   | | | then return 0.34447331696685457;  // std dev = 1.957, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | | | else return 0.5197965844741941;  // std dev = 0.424, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( haswordtitle(G, C) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.08622108760084056;  // std dev = 34.911, 5,333.000 (wgt'ed) examples reached here.  /* #neg=3,446 #pos=1,887 */
%   | | | else return 0.07901187534643177;  // std dev = 8.294, 305.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=109 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.11744987447470497;  // std dev = 4.398, 80.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=42 */
%   | | | else return 0.15840789947645145;  // std dev = 4.428, 84.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=52 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then return 0.049621018536496725;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 0.0010954396094321184;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.0701077656782244;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.054180816460296204;  // std dev = 8.150, 297.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=103 */
%   | | | else return 0.23335021421366473;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(J, C) )
%   | | | then return 0.20742295615601225;  // std dev = 0.014, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.22686927573235222;  // std dev = 1.202, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.07588052643731882;  // std dev = 4.212, 73.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=37 */
%   | | | else return 0.1191140191709364;  // std dev = 4.428, 84.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=52 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.04279081851986248;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 9.587102523172162E-4;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.055650981831400145;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.04217423421355567;  // std dev = 8.150, 297.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=103 */
%   | | | else return 0.17768229913646613;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(J, C) )
%   | | | then return 0.1753930005996697;  // std dev = 0.012, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.17038884093200554;  // std dev = 1.202, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.05351416397541766;  // std dev = 4.297, 76.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=39 */
%   | | | else return 0.09434152330236668;  // std dev = 4.342, 81.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=50 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return 0.042104706590988875;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 2.3889800821687686E-4;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.04385955679605097;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.009209440616904924;  // std dev = 4.463, 103.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=27 */
%   | | | else return 0.061082050483453;  // std dev = 7.064, 209.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=85 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.07600452565036983;  // std dev = 3.568, 54.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | | else return -0.008353708311016568;  // std dev = 2.523, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.06470748947866713;  // std dev = 3.204, 43.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=25 */
%   | | | else return 0.0817667130075468;  // std dev = 3.056, 43.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=29 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.007968018181867254;  // std dev = 0.364, 585.000 (wgt'ed) examples reached here.  /* #neg=492 #pos=93 */
%   | else return -0.003969212235327177;  // std dev = 0.352, 313.000 (wgt'ed) examples reached here.  /* #neg=268 #pos=45 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.03457526084289821;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.017433006595904427;  // std dev = 4.463, 103.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=27 */
%   | | | else return 0.0472179036474649;  // std dev = 7.064, 209.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=85 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.1422053749647381;  // std dev = 0.012, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.133790583634404;  // std dev = 1.203, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.025596329217960585;  // std dev = 4.217, 73.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=37 */
%   | | | else return 0.05314724844684732;  // std dev = 4.410, 84.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=52 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.035392601566283384;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return -2.5842622800753903E-4;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */


Results
   AUC ROC   = 0.506495
   AUC PR    = 0.608781
   CLL	      = -0.823133
   Precision = 0.74359 at threshold = 0.5
   Recall    = 0.037613
   F1        = 0.071605


Total learning time: 11581.98730802536 seconds
Total inference time: 4.571 seconds
AUC ROC: 0.506495


Results scoring model
   AUC ROC   = 0.575264
   AUC PR    = 0.401793
   CLL	      = -0.62116
   Precision = 0.625 at threshold = 0.5
   Recall    = 0.037845
   F1        = 0.071369


Total scoring time: 46.66 seconds
Parameter learned model CLL: -0.62116


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'true,false,true': 'haswordauthor(I, C)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(A, L), haswordauthor(M, L)'}, {'true,true,true': [0.479, 3, 1], 'true,true,false,true': [4.463, 76, 27], 'true,true,false,false': [7.101, 124, 85], 'true,false,true,true': [2.11e-08, 0, 3], 'true,false,true,false': [1.195, 2, 5], 'true,false,false,true': [4.272, 36, 37], 'true,false,false,false': [4.451, 32, 52], 'false,true': [0.408, 71, 19], 'false,false': [0.354, 689, 119]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'true,false,true': 'haswordauthor(I, C)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(A, L), haswordauthor(M, L)'}, {'true,true,true': [0.479, 3, 1], 'true,true,false,true': [4.463, 76, 27], 'true,true,false,false': [7.101, 124, 85], 'true,false,true,true': [0.0, 0, 3], 'true,false,true,false': [1.198, 2, 5], 'true,false,false,true': [4.255, 36, 37], 'true,false,false,false': [4.443, 32, 52], 'false,true': [0.408, 71, 19], 'false,false': [0.354, 689, 119]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(B, M), haswordauthor(N, M)'}, {'true,true,true': [0.478, 3, 1], 'true,true,false,true': [4.463, 76, 27], 'true,true,false,false': [7.101, 124, 85], 'true,false,true,true': [3.955, 28, 37], 'true,false,true,false': [1.941, 10, 6], 'true,false,false,true': [3.214, 18, 25], 'true,false,false,false': [3.06, 14, 29], 'false,true': [0.408, 71, 19], 'false,false': [0.354, 689, 119]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'true,false,true': 'haswordauthor(J, C)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(B, M), haswordauthor(N, M)'}, {'true,true,true': [0.478, 3, 1], 'true,true,false,true': [8.167, 194, 103], 'true,true,false,false': [1.897, 6, 9], 'true,false,true,true': [0.016, 0, 3], 'true,false,true,false': [1.199, 2, 5], 'true,false,false,true': [4.24, 36, 37], 'true,false,false,false': [4.429, 32, 52], 'false,true': [0.408, 71, 19], 'false,false': [0.354, 689, 119]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(A, M), haswordauthor(N, M)'}, {'true,true,true': [0.478, 3, 1], 'true,true,false,true': [4.463, 76, 27], 'true,true,false,false': [7.084, 124, 85], 'true,false,true,true': [3.938, 28, 37], 'true,false,true,false': [1.945, 10, 6], 'true,false,false,true': [3.207, 18, 25], 'true,false,false,false': [3.057, 14, 29], 'false,true': [0.408, 71, 19], 'false,false': [0.354, 689, 119]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordauthor(D, C)', 'true,true': 'author(E, D), venue(E, A)', 'true,true,false': 'haswordtitle(F, C)', 'true,false': 'haswordtitle(G, C)', 'true,false,true': 'title(H, G), venue(H, A)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordauthor(L, K)'}, {'true,true,true': [0.353, 0, 4], 'true,true,false,true': [1.957, 6, 10], 'true,true,false,false': [0.424, 0, 4], 'true,false,true,true': [34.911, 3, 1], 'true,false,true,false': [8.294, 196, 109], 'true,false,false,true': [4.398, 38, 42], 'true,false,false,false': [4.428, 32, 52], 'false,true': [0.408, 71, 19], 'false,false': [0.354, 689, 119]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'true,false,true': 'haswordauthor(J, C)', 'true,false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false': 'haswordvenue(B, M), haswordauthor(N, M)'}, {'true,true,true': [0.478, 3, 1], 'true,true,false,true': [8.15, 194, 103], 'true,true,false,false': [1.897, 6, 9], 'true,false,true,true': [0.014, 0, 3], 'true,false,true,false': [1.202, 2, 5], 'true,false,false,true': [4.212, 36, 37], 'true,false,false,false': [4.428, 32, 52], 'false,true': [0.408, 71, 19], 'false,false': [0.354, 689, 119]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'true,false,true': 'haswordauthor(J, C)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(A, M), haswordauthor(N, M)'}, {'true,true,true': [0.478, 3, 1], 'true,true,false,true': [8.15, 194, 103], 'true,true,false,false': [1.897, 6, 9], 'true,false,true,true': [0.012, 0, 3], 'true,false,true,false': [1.202, 2, 5], 'true,false,false,true': [4.297, 37, 39], 'true,false,false,false': [4.342, 31, 50], 'false,true': [0.408, 71, 19], 'false,false': [0.354, 689, 119]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'title(I, H), venue(I, A)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true': [0.478, 3, 1], 'true,true,false,true': [4.463, 76, 27], 'true,true,false,false': [7.064, 124, 85], 'true,false,true,true': [3.568, 23, 31], 'true,false,true,false': [2.523, 15, 12], 'true,false,false,true': [3.204, 18, 25], 'true,false,false,false': [3.056, 14, 29], 'false,true': [0.364, 492, 93], 'false,false': [0.352, 268, 45]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'true,false,true': 'haswordauthor(I, C)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true': [0.478, 3, 1], 'true,true,false,true': [4.463, 76, 27], 'true,true,false,false': [7.064, 124, 85], 'true,false,true,true': [0.012, 0, 3], 'true,false,true,false': [1.203, 2, 5], 'true,false,false,true': [4.217, 36, 37], 'true,false,false,false': [4.41, 32, 52], 'false,true': [0.408, 71, 19], 'false,false': [0.354, 689, 119]}]]
[{'': [0.23090802749933353, 0.1300588786761983], 'true': [0.22908017825593363, 0.2434651654774311], 'true,false': [0.15999999999999986, 0.24552720191488728], 'true,false,false': [0.24995308688309423, 0.23582766439909286], 'true,true': [0.2290191791239627, 0.23011176857330964], 'true,true,false': [0.1934206805542475, 0.24129484215105063], 'true,false,true': [1.4802973661668753e-16, 0.20408163265306106], 'false': [0.16654320987654267, 0.12558664591706808]}, {'': [0.23038041332348722, 0.12997274795435312], 'true': [0.22901395445256728, 0.24126650771808122], 'true,false': [0.15227366462162578, 0.24424151687355022], 'true,false,false': [0.24804195610106056, 0.23495208029578127], 'true,true': [0.22901917912401135, 0.22891552169995377], 'true,true,false': [0.19342068055424694, 0.24129484215105207], 'true,false,true': [0.0, 0.20489724714516724], 'false': [0.1665432098765434, 0.12558664591706903]}, {'': [0.22986193264368726, 0.12990373824519194], 'true': [0.22895391536240214, 0.23863908103610856], 'true,false': [0.2442969586826832, 0.23034188161605584], 'true,false,true': [0.2406434610053397, 0.23541097455012905], 'true,false,false': [0.240193526231194, 0.21776151673869248], 'true,true': [0.22893864920391638, 0.22916739188213198], 'true,true,false': [0.19342068055424647, 0.2412948421510494], 'false': [0.16645633791801512, 0.12542142975674705]}, {'': [0.22944429167343233, 0.12981548677012247], 'true': [0.22887975841010672, 0.23653392895152953], 'true,false': [0.146846971059792, 0.24080726885878015], 'true,false,false': [0.24625832541321907, 0.23355459494371308], 'true,true': [0.22893196892239995, 0.2279343992440491], 'true,true,false': [0.22456677985524573, 0.2400000000000002], 'true,false,true': [8.34193145571686e-05, 0.2053977115342001], 'false': [0.16645318576227602, 0.12542116575767256]}, {'': [0.22916852613975253, 0.12974525045240026], 'true': [0.2288146710285256, 0.23510956180305403], 'true,false': [0.2403317242488289, 0.22863732069526324], 'true,false,true': [0.23861894990885685, 0.23640790920338864], 'true,true': [0.2289265809567515, 0.2268524047942951], 'true,false,false': [0.23920628316723574, 0.21736260648962935], 'true,true,false': [0.19342068055424763, 0.24008212355497344], 'false': [0.16645030758683066, 0.12542061058287776]}, {'': [0.22900029834857047, 0.1296903649041584], 'true': [0.18506688521959966, 0.22872260937800554], 'true,false': [0.22837737933287475, 0.23790266773636634], 'true,false,false': [0.241761668958035, 0.23340910661809922], 'true,false,true': [0.22853525998185792, 0.22556763620061468], 'true,true': [0.03107915879726536, 0.20541499938872615], 'true,true,false': [0.2393762899395001, 0.04497923868207082], 'false': [0.1664243913995094, 0.12536270591692547]}, {'': [0.22874623199580274, 0.12963546811307602], 'true': [0.22856527500177867, 0.2335760207489595], 'true,false': [0.14466390764714804, 0.23834761094806853], 'true,false,false': [0.24303868727592043, 0.23340175403548113], 'true,true': [0.22871762950875824, 0.22590371887555874], 'true,true,false': [0.22364843581758487, 0.24000000000000005], 'true,false,true': [6.31766462217409e-05, 0.2065222017011683], 'false': [0.1664220549824112, 0.1253625699823364]}, {'': [0.22866841282297434, 0.1295934439109582], 'true': [0.22852084620456398, 0.23305508897447266], 'true,false': [0.14456762946619928, 0.23812418796661688], 'true,false,false': [0.24296550947412301, 0.23277481939892872], 'true,true': [0.22870655756413857, 0.2252923619301853], 'true,true,false': [0.22366674251996885, 0.24000000000000005], 'true,false,true': [4.8981483653227444e-05, 0.20649668040309657], 'false': [0.16640629746375143, 0.1253173373429491]}, {'': [0.2286220525982572, 0.12955144836216878], 'true': [0.22849294211064755, 0.2327026692515165], 'true,false': [0.2373417705476718, 0.22802154313217074], 'true,false,true': [0.2358014026969398, 0.23567829849107952], 'true,true': [0.2287005094388129, 0.2249018710566763], 'true,false,false': [0.23874608813412984, 0.21715148957650754], 'true,true,false': [0.19342068055424674, 0.23878539637338117], 'false': [0.13264807584109473, 0.12367099228030276]}, {'': [0.22857898414864575, 0.12953996452518315], 'true': [0.22846459072521552, 0.23231573992370427], 'true,false': [0.14475634891035022, 0.23734116698155486], 'true,false,false': [0.24364560480697398, 0.23150937475869146], 'true,true': [0.2286786614269875, 0.22472436117396993], 'true,true,false': [0.19342068055424658, 0.23877168379100103], 'true,false,true': [4.59620157278832e-05, 0.20675384353696274], 'false': [0.16628666700381992, 0.12531950857845928]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;true
0;true,false,true;haswordauthor(I, C).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,false;haswordvenue(B, G), haswordauthor(H, G).;true;true
1;true,false,true;haswordauthor(I, C).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;true
3;true,false,true;haswordauthor(J, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
6;true,false,true;haswordauthor(J, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
7;true,false,true;haswordauthor(J, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;true;true
9;true,false,true;haswordauthor(I, C).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.21330135701834016;  // std dev = 0.479, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.12028485742960847;  // std dev = 4.463, 103.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=27 */
%   | | | else return 0.2648474996928126;  // std dev = 7.101, 209.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=85 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.3649982501680042;  // std dev = 4.272, 73.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=37 */
%   | | | else return 0.477196554147132;  // std dev = 4.451, 84.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=52 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.06926004621062345;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 0.005426162822282901;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.18530354008666333;  // std dev = 0.479, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.10500272994125538;  // std dev = 4.463, 103.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=27 */
%   | | | else return 0.2294575007214978;  // std dev = 7.101, 209.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=85 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.3620693745070567;  // std dev = 3.975, 65.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=37 */
%   | | | else return 0.18155246888631185;  // std dev = 1.940, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.3846313600019396;  // std dev = 3.222, 43.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=25 */
%   | | | else return 0.46243439206480663;  // std dev = 3.066, 43.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=29 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.06788889772888439;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 0.003954495138488216;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.15805938797414934;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.06454109932242497;  // std dev = 4.463, 103.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=27 */
%   | | | else return 0.1934904464853735;  // std dev = 7.101, 209.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=85 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.631478760918287;  // std dev = 0.017, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.45006042183471845;  // std dev = 1.198, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.2452480920217088;  // std dev = 4.239, 73.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=37 */
%   | | | else return 0.33934796130605305;  // std dev = 4.436, 84.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=52 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.05935522574341573;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 0.0034682948641971676;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1318487881456303;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.11301637624248481;  // std dev = 8.167, 297.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=103 */
%   | | | else return 0.3525398797982056;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(J, C) )
%   | | | then return 0.4768599779403046;  // std dev = 0.019, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.3530006810150512;  // std dev = 1.199, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.19432788809067225;  // std dev = 4.240, 73.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=37 */
%   | | | else return 0.2673395017876637;  // std dev = 4.429, 84.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=52 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.012783724132426172;  // std dev = 0.365, 585.000 (wgt'ed) examples reached here.  /* #neg=492 #pos=93 */
%   | else return -0.0012188800148706291;  // std dev = 0.351, 313.000 (wgt'ed) examples reached here.  /* #neg=268 #pos=45 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1081531035526926;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.0348741176720454;  // std dev = 4.463, 103.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=27 */
%   | | | else return 0.13403639809688797;  // std dev = 7.084, 209.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=85 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.36140443872459166;  // std dev = 0.017, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.30052988633765887;  // std dev = 1.202, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.1410707022563106;  // std dev = 4.221, 73.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=37 */
%   | | | else return 0.2106047068555165;  // std dev = 4.430, 84.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=52 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.011951375921324647;  // std dev = 0.365, 585.000 (wgt'ed) examples reached here.  /* #neg=492 #pos=93 */
%   | else return -0.002507270437391768;  // std dev = 0.351, 313.000 (wgt'ed) examples reached here.  /* #neg=268 #pos=45 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.0875371329299183;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.07155660019542309;  // std dev = 8.153, 297.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=103 */
%   | | | else return 0.25149752718275165;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.16533182160114668;  // std dev = 3.555, 54.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | | else return 0.028530819431843414;  // std dev = 2.537, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.14563447458256906;  // std dev = 3.199, 43.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=25 */
%   | | | else return 0.17960662656975848;  // std dev = 3.056, 43.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=29 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.010589240822306068;  // std dev = 0.365, 585.000 (wgt'ed) examples reached here.  /* #neg=492 #pos=93 */
%   | else return -0.0024609104091418213;  // std dev = 0.351, 313.000 (wgt'ed) examples reached here.  /* #neg=268 #pos=45 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.07005058720455873;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.012663192547185185;  // std dev = 4.463, 103.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=27 */
%   | | | else return 0.0884008952601443;  // std dev = 7.071, 209.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=85 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.25092660588000876;  // std dev = 0.018, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2187426998047015;  // std dev = 1.202, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.07635158551397857;  // std dev = 4.202, 73.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=37 */
%   | | | else return 0.1194296806752326;  // std dev = 4.422, 84.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=52 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.05471250880647673;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return -2.3406627972354937E-4;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.05576022701164301;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 2.8522993726151607E-5;  // std dev = 4.463, 103.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=27 */
%   | | | else return 0.06897562919081386;  // std dev = 7.071, 209.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=85 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.2067765825959471;  // std dev = 0.016, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.16433967312950873;  // std dev = 1.202, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.05431919186917624;  // std dev = 4.287, 76.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=39 */
%   | | | else return 0.0941349788691501;  // std dev = 4.337, 81.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=50 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.04739965082079156;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return -2.091968789461942E-4;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.04394500913012484;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.02969194340151711;  // std dev = 8.142, 297.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=103 */
%   | | | else return 0.15397738894588417;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(J, C) )
%   | | | then return 0.17492111564325863;  // std dev = 0.014, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.15046603648401227;  // std dev = 1.203, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.03795229082512452;  // std dev = 4.274, 76.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=39 */
%   | | | else return 0.07143374344811314;  // std dev = 4.345, 81.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=50 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.04080756947775722;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return -1.829011873814668E-4;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.03449636385018316;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.008564780478634673;  // std dev = 4.463, 103.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=27 */
%   | | | else return 0.044411796946552194;  // std dev = 7.065, 209.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=85 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.06898993622614721;  // std dev = 3.548, 54.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | | else return -0.03714924867340573;  // std dev = 2.525, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.0532621448769178;  // std dev = 3.186, 43.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=25 */
%   | | | else return 0.06464855242618969;  // std dev = 3.056, 43.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=29 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.046222778952762354;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return -0.0014138979276244188;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */


Results
   AUC ROC   = 0.506495
   AUC PR    = 0.60862
   CLL	      = -0.822874
   Precision = 0.74359 at threshold = 0.5
   Recall    = 0.037613
   F1        = 0.071605


Total learning time: 12623.226962089539 seconds
Total inference time: 4.584 seconds
AUC ROC: 0.506495


Results scoring model
   AUC ROC   = 0.573193
   AUC PR    = 0.398167
   CLL	      = -0.621467
   Precision = 0.641221 at threshold = 0.5
   Recall    = 0.0374
   F1        = 0.070677


Total scoring time: 46.442 seconds
Refined model CLL: -0.621467


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.506495
   AUC PR    = 0.608781
   CLL	      = -0.823133
   Precision = 0.74359 at threshold = 0.5
   Recall    = 0.037613
   F1        = 0.071605


Total learning time: 24298.316270114898 seconds
Total inference time: 4.571 seconds
AUC ROC: 0.506495
Total revision time: 24298.316270114898
Best scored revision CLL: -0.62116


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 09:33:59
{'AUC ROC': 0.506495, 'AUC PR': 0.608781, 'CLL': -0.823133, 'Precision': [0.74359, 0.5], 'Recall': 0.037613, 'F1': 0.071605, 'Learning time': 24298.316270114898, 'Inference time': 4.571, 'parameter_1.0': {'AUC ROC': 0.506495, 'AUC PR': 0.608781, 'CLL': -0.823133, 'Precision': [0.74359, 0.5], 'Recall': 0.037613, 'F1': 0.071605, 'Learning time': 11581.98730802536, 'Inference time': 4.571}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.21330135701834016;  // std dev = 0.479, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.12028485742960847;  // std dev = 4.463, 103.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=27 */
%   | | | else return 0.2648474996928126;  // std dev = 7.101, 209.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=85 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.42737970433028033;  // std dev = 3.992, 65.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=37 */
%   | | | else return 0.23314893509951234;  // std dev = 1.936, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.4395442839367207;  // std dev = 3.235, 43.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=25 */
%   | | | else return 0.5325675397506742;  // std dev = 3.073, 43.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=29 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.06926004621062345;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 0.005426162822282901;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.18530354008666333;  // std dev = 0.479, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.10500272994125538;  // std dev = 4.463, 103.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=27 */
%   | | | else return 0.2294575007214978;  // std dev = 7.101, 209.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=85 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.37257625556591717;  // std dev = 3.974, 65.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=37 */
%   | | | else return 0.1726800832396439;  // std dev = 1.937, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.5943031196385155;  // std dev = 0.891, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.40637749404981754;  // std dev = 4.363, 81.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=50 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return 0.06788889772888439;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 0.003954495138488199;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.15805938797414934;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.06454109932242497;  // std dev = 4.463, 103.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=27 */
%   | | | else return 0.1934904464853735;  // std dev = 7.101, 209.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=85 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.6920632342112758;  // std dev = 0.048, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.44432508106382435;  // std dev = 1.196, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.2523330466132187;  // std dev = 4.241, 73.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=37 */
%   | | | else return 0.33171943565063927;  // std dev = 4.436, 84.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=52 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.01404356705618253;  // std dev = 0.365, 585.000 (wgt'ed) examples reached here.  /* #neg=492 #pos=93 */
%   | else return -2.2726568909929636E-4;  // std dev = 0.351, 313.000 (wgt'ed) examples reached here.  /* #neg=268 #pos=45 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1318487881456303;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.11301637624248481;  // std dev = 8.167, 297.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=103 */
%   | | | else return 0.3525398797982056;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.23462550787524425;  // std dev = 3.944, 65.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=37 */
%   | | | else return 0.09302919978673095;  // std dev = 1.941, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return 0.39332054322801974;  // std dev = 0.858, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.2696143872092001;  // std dev = 4.352, 81.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=50 */
%   else if ( haswordvenue(A, N), haswordauthor(P, N) )
%   | then return 0.05803076980124393;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 0.0023604744059748245;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1081531035526926;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.0348741176720454;  // std dev = 4.463, 103.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=27 */
%   | | | else return 0.13403639809688797;  // std dev = 7.084, 209.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=85 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordauthor(I, G) )
%   | | | then return 0.30864351203082857;  // std dev = 1.208, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.14564292288940672;  // std dev = 4.222, 74.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=38 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.18829426581939568;  // std dev = 3.208, 43.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=25 */
%   | | | else return 0.23512132122563417;  // std dev = 3.060, 43.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=29 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.056870739222377814;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 0.0013420152911598224;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.0875371329299183;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.07155660019542309;  // std dev = 8.153, 297.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=103 */
%   | | | else return 0.25149752718275165;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(J, C) )
%   | | | then return 0.39987841332030577;  // std dev = 0.069, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.23520856568241144;  // std dev = 1.204, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.10898790242324945;  // std dev = 4.288, 76.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=39 */
%   | | | else return 0.15427402819925523;  // std dev = 4.348, 81.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=50 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return 0.049468299213491294;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 0.0011566759433355972;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.07005058720455873;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.012663192547185185;  // std dev = 4.463, 103.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=27 */
%   | | | else return 0.0884008952601443;  // std dev = 7.071, 209.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=85 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.3093052659145874;  // std dev = 0.061, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.20595409141496385;  // std dev = 1.208, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.07686462600304131;  // std dev = 4.283, 76.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=39 */
%   | | | else return 0.11896230690542463;  // std dev = 4.343, 81.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=50 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.04851401588972031;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 3.5950697788341503E-4;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.05576022701164301;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 2.8522993726151607E-5;  // std dev = 4.463, 103.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=27 */
%   | | | else return 0.06897562919081386;  // std dev = 7.071, 209.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=85 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.09757319330280721;  // std dev = 3.557, 54.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | | else return 0.003674146903308964;  // std dev = 2.528, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.08169605030053663;  // std dev = 3.200, 43.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=25 */
%   | | | else return 0.10715077755340806;  // std dev = 3.057, 43.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=29 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.041949564215754534;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 2.9803917708295013E-4;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.04394500913012484;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.02969194340151711;  // std dev = 8.142, 297.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=103 */
%   | | | else return 0.15397738894588417;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(J, C) )
%   | | | then return 0.23054367849157353;  // std dev = 0.052, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.15412637595536216;  // std dev = 1.208, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.03719824025477014;  // std dev = 4.189, 73.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=37 */
%   | | | else return 0.06774955378233456;  // std dev = 4.421, 84.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=52 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.0411792428202763;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return -3.1912977142576645E-4;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.03449636385018316;  // std dev = 0.478, 5,347.000 (wgt'ed) examples reached here.  /* #neg=3,448 #pos=1,899 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.008564780478634673;  // std dev = 4.463, 103.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=27 */
%   | | | else return 0.044411796946552194;  // std dev = 7.065, 209.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=85 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.19237041094410348;  // std dev = 0.046, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.11677338924814196;  // std dev = 1.207, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.12331116939587981;  // std dev = 1.204, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.03655833318411355;  // std dev = 5.968, 150.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=84 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.03542644841586113;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return -2.9366275341306564E-4;  // std dev = 0.354, 808.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=119 */


Results
   AUC ROC   = 0.506328
   AUC PR    = 0.608579
   CLL	      = -0.823177
   Precision = 0.74359 at threshold = 0.5
   Recall    = 0.037613
   F1        = 0.071605


Total learning time: 12573.805276155472 seconds
Total inference time: 4.936 seconds
AUC ROC: 0.506328


Dataset: 3_imdb_cora, Fold: 2, Type: Scratch (RDN-B), Time: 13:03:38
{'AUC ROC': 0.506328, 'AUC PR': 0.608579, 'CLL': -0.823177, 'Precision': [0.74359, 0.5], 'Recall': 0.037613, 'F1': 0.071605, 'Learning time': 12573.805276155472, 'Inference time': 4.936}


Starting fold 3

Target train facts examples: 33252
Target train pos examples: 2436
Target train neg examples: 2800

Target test facts examples: 9306
Target test pos  examples: 581
Target test neg examples: 2222

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.34808182100554785;  // std dev = 0.500, 894.000 (wgt'ed) examples reached here.  /* #neg=456 #pos=438 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.4945125714631487;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.6581489350995123;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.6359267128772901;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordauthor(M, K) )
%   | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordtitle(L, N), haswordauthor(P, N) )
%   | | | then return 0.0803711573217346;  // std dev = 3.300, 63.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=14 */
%   | | | else return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else return 0.02481560176617902;  // std dev = 0.373, 48.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=8 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3002263539730639;  // std dev = 0.500, 894.000 (wgt'ed) examples reached here.  /* #neg=456 #pos=438 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.42312069605298835;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.5580193346218546;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.5398498420741675;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.5170719622367217;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.055101217525739085;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | then return 0.0815848927393436;  // std dev = 0.424, 68.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=16 */
%   | | else return 0.017891915200157694;  // std dev = 0.369, 43.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=7 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24975268591682817;  // std dev = 0.500, 894.000 (wgt'ed) examples reached here.  /* #neg=456 #pos=438 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.34367606239514226;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.44194861002444086;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.4289562725350853;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.41257245288266;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.04813955023343215;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | then return 0.07067336484934017;  // std dev = 0.424, 68.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=16 */
%   | | else return 0.01566093611019724;  // std dev = 0.369, 43.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=7 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2012807191468957;  // std dev = 0.500, 894.000 (wgt'ed) examples reached here.  /* #neg=456 #pos=438 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.2678714180597208;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.3311618094016139;  // std dev = 0.408, 19.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.39424575726381517;  // std dev = 2.488, 26.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=15 */
%   | | | else return -0.17987571940679198;  // std dev = 0.259, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else if ( haswordtitle(J, M), haswordauthor(N, M) )
%   | | | then return 0.12251652779717945;  // std dev = 0.808, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.2005272292015506;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else return 0.016617163054067463;  // std dev = 0.373, 48.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=8 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.15826662208579861;  // std dev = 0.500, 894.000 (wgt'ed) examples reached here.  /* #neg=456 #pos=438 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.2036576554421387;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.25282109795158647;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.24385630580972975;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, A) )
%   | | then return 0.38208579201492604;  // std dev = 0.715, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.032885954777648684;  // std dev = 0.892, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | then return 0.04646175910288581;  // std dev = 0.399, 68.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=16 */
%   | | else return 0.011564291444647557;  // std dev = 0.369, 43.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=7 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.12230152116266178;  // std dev = 0.500, 894.000 (wgt'ed) examples reached here.  /* #neg=456 #pos=438 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.1531477270126841;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.1912407459158025;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.18396474584064035;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( title(M, L), venue(M, A) )
%   | | then return 0.03956430904572774;  // std dev = 0.395, 62.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=15 */
%   | | else if ( haswordtitle(L, N), haswordauthor(P, N) )
%   | | | then return 0.09182746351539736;  // std dev = 0.794, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.1581573824950648;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else return 0.010440993283431075;  // std dev = 0.371, 48.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=8 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0934377379925482;  // std dev = 0.500, 894.000 (wgt'ed) examples reached here.  /* #neg=456 #pos=438 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.11488033872832898;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.14675346844046344;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.14046593553314712;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, A) )
%   | | then return 0.3080080902120929;  // std dev = 0.711, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.01665411934244908;  // std dev = 0.869, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( haswordvenue(A, N), haswordauthor(P, N) )
%   | | then return -0.02286624083950686;  // std dev = 0.346, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else return 0.027878458273229278;  // std dev = 0.392, 99.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.3825398829278607;  // std dev = 0.364, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | else if ( author(F, D), venue(F, B) )
%   | | then return -0.41905533426823277;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return 0.15151122493880598;  // std dev = 1.010, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.07514702084792536;  // std dev = 1.114, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.19205577684287828;  // std dev = 2.068, 18.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | | | else return -0.41905533426823277;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordtitle(L, H) )
%   | | | then return 0.06970206218147584;  // std dev = 14.531, 845.000 (wgt'ed) examples reached here.  /* #neg=432 #pos=413 */
%   | | | else return 0.0750232782796546;  // std dev = 2.378, 32.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=21 */
%   | else return 0.019044455771618528;  // std dev = 0.387, 111.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=23 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.2890606783395429;  // std dev = 0.364, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | else if ( author(F, D), venue(F, B) )
%   | | then return -0.3217572521775489;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return 0.11717474607012843;  // std dev = 1.011, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.05993448480929879;  // std dev = 1.116, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordtitle(I, H) )
%   | | then return 0.051536285000942435;  // std dev = 0.499, 870.000 (wgt'ed) examples reached here.  /* #neg=446 #pos=424 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.0060848526724034315;  // std dev = 1.558, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | | else return 0.0954750737260579;  // std dev = 1.776, 19.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then return -0.022287356966546757;  // std dev = 0.346, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else return 0.020816647147359597;  // std dev = 0.391, 99.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04054372306756142;  // std dev = 0.497, 894.000 (wgt'ed) examples reached here.  /* #neg=456 #pos=438 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.06039714251493532;  // std dev = 1.310, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return -0.07003025683477737;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.09663640983188927;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.072059208091609;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return -0.029060870801177936;  // std dev = 0.335, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( haswordtitle(M, N), haswordauthor(P, N) )
%   | | | then return 0.006782250776089616;  // std dev = 2.900, 55.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=12 */
%   | | | else return 0.20068275719079542;  // std dev = 1.437, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else return -0.003062757108003486;  // std dev = 0.358, 43.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=9 */


Results
   AUC ROC   = 0.560681
   AUC PR    = 0.245539
   CLL	      = -0.601842
   Precision = 0.473684 at threshold = 0.5
   Recall    = 0.030981
   F1        = 0.058158


Total learning time: 309.1269040107727 seconds
Total inference time: 2.806 seconds
AUC ROC: 0.560681


Results scoring model
   AUC ROC   = 0.596814
   AUC PR    = 0.560367
   CLL	      = -0.657671
   Precision = 0.765957 at threshold = 0.5
   Recall    = 0.073922
   F1        = 0.134831


Total scoring time: 3.308 seconds
Parameter learned model CLL: -0.657671


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,true': 'haswordauthor(M, K)', 'false,true,false': 'haswordtitle(L, N), haswordauthor(P, N)'}, {'true,true': [0.5, 456, 438], 'true,false,true,true': [1.595, 4, 7], 'true,false,true,false': [0.0, 3, 0], 'true,false,false,true': [1.265, 2, 8], 'true,false,false,false': [1.247, 2, 7], 'false,true,true': [0.866, 1, 3], 'false,true,false,true': [3.3, 49, 14], 'false,true,false,false': [1.095, 3, 2], 'false,false': [0.373, 40, 8]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false,true': 'haswordtitle(M, K)', 'false,false': 'haswordvenue(B, N), haswordtitle(P, N)'}, {'true,true': [0.5, 456, 438], 'true,false,true,true': [1.595, 4, 7], 'true,false,true,false': [0.0, 3, 0], 'true,false,false,true': [1.265, 2, 8], 'true,false,false,false': [1.247, 2, 7], 'false,true,true': [0.866, 1, 3], 'false,true,false': [0.894, 4, 1], 'false,false,true': [0.424, 52, 16], 'false,false,false': [0.369, 36, 7]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false,true': 'haswordtitle(M, K)', 'false,false': 'haswordvenue(B, N), haswordtitle(P, N)'}, {'true,true': [0.5, 456, 438], 'true,false,true,true': [1.595, 4, 7], 'true,false,true,false': [2.63e-09, 3, 0], 'true,false,false,true': [1.265, 2, 8], 'true,false,false,false': [1.247, 2, 7], 'false,true,true': [0.866, 1, 3], 'false,true,false': [0.894, 4, 1], 'false,false,true': [0.424, 52, 16], 'false,false,false': [0.369, 36, 7]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, A)', 'false,true,true': 'samebib(K, L), venue(L, B)', 'false,true,false': 'haswordtitle(J, M), haswordauthor(N, M)'}, {'true,true': [0.5, 456, 438], 'true,false,true,true': [1.595, 4, 7], 'true,false,true,false': [0.0, 3, 0], 'true,false,false': [0.408, 4, 15], 'false,true,true,true': [2.488, 11, 15], 'false,true,true,false': [0.259, 36, 0], 'false,true,false,true': [0.808, 3, 2], 'false,true,false,false': [1.095, 3, 2], 'false,false': [0.373, 40, 8]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false,true': 'author(M, L), venue(M, A)', 'false,false': 'haswordvenue(B, N), haswordtitle(P, N)'}, {'true,true': [0.5, 456, 438], 'true,false,true,true': [1.595, 4, 7], 'true,false,true,false': [2.63e-09, 3, 0], 'true,false,false,true': [1.265, 2, 8], 'true,false,false,false': [1.247, 2, 7], 'false,true,true': [0.715, 1, 2], 'false,true,false': [0.892, 4, 2], 'false,false,true': [0.399, 52, 16], 'false,false,false': [0.369, 36, 7]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,true': 'title(M, L), venue(M, A)', 'false,true,false': 'haswordtitle(L, N), haswordauthor(P, N)'}, {'true,true': [0.5, 456, 438], 'true,false,true,true': [1.595, 4, 7], 'true,false,true,false': [0.0, 3, 0], 'true,false,false,true': [1.265, 2, 8], 'true,false,false,false': [1.247, 2, 7], 'false,true,true': [0.395, 47, 15], 'false,true,false,true': [0.794, 3, 2], 'false,true,false,false': [1.095, 3, 2], 'false,false': [0.371, 40, 8]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false,true': 'author(M, L), venue(M, A)', 'false,false': 'haswordvenue(A, N), haswordauthor(P, N)'}, {'true,true': [0.5, 456, 438], 'true,false,true,true': [1.595, 4, 7], 'true,false,true,false': [0.0, 3, 0], 'true,false,false,true': [1.265, 2, 8], 'true,false,false,false': [1.247, 2, 7], 'false,true,true': [0.711, 1, 2], 'false,true,false': [0.869, 4, 2], 'false,false,true': [0.346, 10, 2], 'false,false,false': [0.392, 78, 21]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'author(F, D), venue(F, B)', 'true,false,false': 'author(G, D), venue(G, A)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)', 'false,true': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,true,true': 'haswordtitle(K, I)', 'false,true,false': 'haswordtitle(L, H)'}, {'true,true': [0.364, 3, 15], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [1.01, 2, 2], 'true,false,false,false': [1.114, 6, 2], 'false,true,true,true': [2.068, 7, 11], 'false,true,true,false': [0.0, 7, 0], 'false,true,false,true': [14.531, 432, 413], 'false,true,false,false': [2.378, 11, 21], 'false,false': [0.387, 88, 23]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordauthor(D, C)', 'true': 'haswordtitle(E, C)', 'true,false': 'author(F, D), venue(F, B)', 'true,false,false': 'author(G, D), venue(G, A)', 'false': 'haswordvenue(A, H), haswordvenue(B, H)', 'false,true': 'haswordtitle(I, H)', 'false,true,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,false': 'haswordvenue(A, L), haswordauthor(M, L)'}, {'true,true': [0.364, 3, 15], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [1.011, 2, 2], 'true,false,false,false': [1.116, 6, 2], 'false,true,true': [0.499, 446, 424], 'false,true,false,true': [1.558, 7, 6], 'false,true,false,false': [1.776, 4, 15], 'false,false,true': [0.346, 10, 2], 'false,false,false': [0.391, 78, 21]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, A)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordauthor(K, J)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)', 'false,false,true': 'haswordtitle(M, N), haswordauthor(P, N)'}, {'true,true': [0.497, 456, 438], 'true,false,true,true': [1.31, 5, 9], 'true,false,true,false': [1.0, 2, 2], 'true,false,false,true': [1.155, 2, 4], 'true,false,false,false': [1.247, 2, 7], 'false,true': [0.335, 11, 2], 'false,false,true,true': [2.9, 43, 12], 'false,false,true,false': [1.437, 5, 4], 'false,false,false': [0.358, 34, 9]}]]
[{'': [0.2499857446914883, 0.17437500000000108], 'true': [0.24989865321380914, 0.2222222222222232], 'true,false': [0.25, 0.16620498614958412], 'true,false,true': [0.23140495867768587, 0.0], 'false': [0.19425154320987603, 0.1388888888888891], 'false,true': [0.18750000000000006, 0.17993079584775032], 'false,true,false': [0.17283950617283897, 0.24000000000000005], 'true,false,false': [0.15999999999999986, 0.17283950617283939]}, {'': [0.24916561182716437, 0.17111934785200972], 'true': [0.24989865321380855, 0.20882328853591042], 'true,false': [0.2324839449204501, 0.16616417533768726], 'true,false,true': [0.23140495867768598, 0.0], 'false': [0.224917770115758, 0.1636510739793697], 'false,true': [0.18750000000000006, 0.15999999999999998], 'true,false,false': [0.1600000000000001, 0.1728395061728397], 'false,false': [0.17938145003695036, 0.136289886425095]}, {'': [0.24837763388172737, 0.16830391707316444], 'true': [0.24989865321382357, 0.19643632089116983], 'true,false': [0.21682665372555301, 0.16612395465530463], 'true,false,true': [0.23140495867768598, 2.3129646346357427e-18], 'false': [0.20501514581070154, 0.16338934940505276], 'false,true': [0.18750000000000003, 0.15999999999999998], 'true,false,false': [0.15999999999999998, 0.17283950617283944], 'false,false': [0.17935339799699843, 0.1362898864250949]}, {'': [0.24784208869148308, 0.16625567775950548], 'true': [0.24989865321381963, 0.18747727230559844], 'true,false': [0.2048014050006796, 0.16610193687540828], 'true,false,true': [0.2314049586776859, -1.1564823173178713e-18], 'false': [0.1831800431022227, 0.13883363509504185], 'false,true': [0.18118341024411982, 0.18683800444271834], 'false,true,false': [0.13063317411863565, 0.24], 'false,true,true': [0.23809179918002432, 0.001857064876398831]}, {'': [0.24754588852986467, 0.15339533126466393], 'true': [0.249898653213815, 0.18191374349395784], 'true,false': [0.19660465501312768, 0.16610190756340373], 'true,false,true': [0.23140495867768598, 2.3129646346357427e-18], 'true,false,false': [0.15999999999999998, 0.17283950617283952], 'false': [0.1722920234463238, 0.15084799035483087], 'false,true': [0.17027511383524022, 0.13265363614301864], 'false,false': [0.15958207695216542, 0.13628988642509496]}, {'': [0.24739026404448927, 0.1519360185791965], 'true': [0.2498986532138118, 0.1786175067042787], 'true,false': [0.191381846198827, 0.1660950697271301], 'true,false,true': [0.23140495867768596, 0.0], 'true,false,false': [0.16000000000000003, 0.1728395061728395], 'false': [0.16089638609788823, 0.13748744130524052], 'false,true': [0.15613527671064778, 0.18413090756836165], 'false,true,false': [0.1260619860607987, 0.23999999999999994]}, {'': [0.24730558285507598, 0.15122255387110498], 'true': [0.24989865321381463, 0.1766526941820003], 'true,false': [0.1881324741904062, 0.16609172723507204], 'true,false,true': [0.23140495867768598, 0.0], 'true,false,false': [0.16000000000000003, 0.1728395061728395], 'false': [0.15893962807514053, 0.14997057828744992], 'false,true': [0.1682912133224003, 0.12596812333767424], 'false,false': [0.11997673225613813, 0.1533278149624804]}, {'': [0.21545260384249798, 0.23680218529215502], 'false': [0.2472458077862857, 0.14975466837828919], 'false,true': [0.24640000000000015, 0.247203503564204], 'false,true,false': [0.2498736038654044, 0.17666888531579467], 'false,true,true': [0.23765432098765438, 0.0], 'true': [0.13276241514093265, 0.18291930603055026], 'true,false': [0.0, 0.19990551240386026], 'true,false,false': [0.2549796392783205, 0.15524379550559073]}, {'': [0.18259169631026517, 0.23586764906277963], 'false': [0.24634237018454208, 0.1496170832593753], 'false,true': [0.24891230911786794, 0.17641609198835292], 'true': [0.1325999152107846, 0.16628797381817653], 'false,true,false': [0.18676200698993564, 0.16609112206926802], 'true,false': [0.0, 0.19597964545184918], 'true,false,false': [0.25540239695890193, 0.15581237647742197], 'false,false': [0.12001492822798555, 0.15300436324473135]}, {'': [0.24446107575968568, 0.14837822291840042], 'true': [0.24712300858784877, 0.17216287384652965], 'true,false': [0.15385916016939952, 0.19273756191548438], 'true,false,false': [0.22222222222222218, 0.1728395061728395], 'true,false,true': [0.12261005845564366, 0.25], 'false': [0.11221846915211423, 0.15251982037273226], 'false,false': [0.16821782297406623, 0.1283315336159729], 'false,false,true': [0.15290249858170238, 0.22950120092392734]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
0;true,false,true;haswordtitle(F, G), haswordauthor(H, G).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
1;true,false,true;haswordtitle(F, G), haswordauthor(H, G).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
2;true,false,true;haswordtitle(F, G), haswordauthor(H, G).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
3;true,false,true;haswordtitle(F, G), haswordauthor(H, G).;true;true
3;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false,true;title(K, J), venue(K, A).;true;true
3;false,true,true;samebib(K, L), venue(L, B).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
4;true,false,true;haswordtitle(F, G), haswordauthor(H, G).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
5;true,false,true;haswordtitle(F, G), haswordauthor(H, G).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
6;true,false,true;haswordtitle(F, G), haswordauthor(H, G).;true;true
7;;samevenue(A, B) :- haswordvenue(B, C), haswordauthor(D, C).;true;true
7;true;haswordtitle(E, C).;true;true
7;true,false;author(F, D), venue(F, B).;true;true
7;false;haswordvenue(A, H), haswordvenue(B, H).;true;true
7;false,true;haswordvenue(A, I), haswordauthor(J, I).;true;true
7;false,true,true;haswordtitle(K, I).;true;true
8;;samevenue(A, B) :- haswordvenue(B, C), haswordauthor(D, C).;true;true
8;true;haswordtitle(E, C).;true;true
8;true,false;author(F, D), venue(F, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.34808182100554785;  // std dev = 0.500, 894.000 (wgt'ed) examples reached here.  /* #neg=456 #pos=438 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.4945125714631487;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.6581489350995123;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.6359267128772901;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | then return 0.09344305274657119;  // std dev = 0.424, 68.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=16 */
%   | | else return 0.020939632773930943;  // std dev = 0.369, 43.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=7 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3002263539730639;  // std dev = 0.500, 894.000 (wgt'ed) examples reached here.  /* #neg=456 #pos=438 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.42312069605298835;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.5580193346218546;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.5398498420741675;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordauthor(M, K) )
%   | | then return 0.5170719622367217;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordtitle(L, N), haswordauthor(P, N) )
%   | | | then return 0.06861139321558417;  // std dev = 3.300, 63.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=14 */
%   | | | else return 0.24638917099336152;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else return 0.021762179745124312;  // std dev = 0.373, 48.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=8 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24975268591682817;  // std dev = 0.500, 894.000 (wgt'ed) examples reached here.  /* #neg=456 #pos=438 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.34367606239514226;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.43579434489790386;  // std dev = 0.408, 19.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.4074597046567693;  // std dev = 2.496, 26.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=15 */
%   | | | else return -0.1675971036568512;  // std dev = 0.172, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else if ( haswordtitle(J, M), haswordauthor(N, M) )
%   | | | then return 0.1673820979897044;  // std dev = 0.904, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.21155833438645738;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else return 0.019044842859336397;  // std dev = 0.373, 48.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=8 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then return 0.562787829559089;  // std dev = 0.348, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return -0.2886521667591413;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.1399192618122873;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.1987041550799372;  // std dev = 0.500, 870.000 (wgt'ed) examples reached here.  /* #neg=446 #pos=424 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.15463760219210268;  // std dev = 1.630, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | | else return 0.33116497594672983;  // std dev = 1.777, 19.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.37844807169226813;  // std dev = 0.786, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.04567104365425116;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else return 0.03874858455724228;  // std dev = 0.389, 111.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=23 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.15814177536970486;  // std dev = 0.499, 894.000 (wgt'ed) examples reached here.  /* #neg=456 #pos=438 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.22204352787457593;  // std dev = 1.575, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return -0.1166055979769466;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.2543456187938575;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.24215426968666703;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, A) )
%   | | then return 0.38382606589692975;  // std dev = 0.715, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.032863102426019745;  // std dev = 0.887, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | then return 0.04913621619930233;  // std dev = 0.400, 68.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=16 */
%   | | else return 0.008260740340179028;  // std dev = 0.369, 43.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=7 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.12222476275577014;  // std dev = 0.499, 894.000 (wgt'ed) examples reached here.  /* #neg=456 #pos=438 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.03563347127312204;  // std dev = 1.105, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.19234321730566176;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.20708069442805335;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.18272577474178067;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, B) )
%   | | | then return 0.06851361998232731;  // std dev = 3.055, 57.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=16 */
%   | | | else return -0.0846289135015963;  // std dev = 0.893, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | else return 0.16146436097491276;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else return 0.007835594378269596;  // std dev = 0.371, 48.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=8 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09339771820104378;  // std dev = 0.499, 894.000 (wgt'ed) examples reached here.  /* #neg=456 #pos=438 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.13533015671692492;  // std dev = 1.570, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return -0.1085201846858974;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.1475521636686214;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.13956489838469896;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then return -0.03577569405740933;  // std dev = 0.335, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then if ( haswordtitle(N, P), haswordauthor(Q, P) )
%   | | | then return 0.02922506756949377;  // std dev = 2.924, 55.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=12 */
%   | | | else return 0.21586406035461841;  // std dev = 1.444, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else return 0.01035034143434586;  // std dev = 0.362, 43.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=9 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07086288813027107;  // std dev = 0.499, 894.000 (wgt'ed) examples reached here.  /* #neg=456 #pos=438 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.10167139824256805;  // std dev = 1.570, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return -0.09845886797795923;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.11488729199900685;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.10799985298454667;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, A) )
%   | | then return 0.3031872570163141;  // std dev = 0.711, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.013881777918844962;  // std dev = 0.869, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( haswordvenue(A, N), haswordauthor(P, N) )
%   | | then return -0.019517393617830295;  // std dev = 0.347, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | else return 0.021975869195689238;  // std dev = 0.389, 99.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordauthor(D, C) )
%   then if ( haswordtitle(E, C) )
%   | then return 0.2997711038585405;  // std dev = 0.357, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | else if ( author(F, D), venue(F, B) )
%   | | then return -0.3217013250326441;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( author(G, D), venue(G, A) )
%   | | | then return 0.148013731487589;  // std dev = 1.010, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.07635047046178463;  // std dev = 1.114, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.17540514830167156;  // std dev = 2.068, 18.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | | | else return -0.43570596280943935;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordtitle(L, H) )
%   | | | then return 0.05305143364026772;  // std dev = 14.531, 845.000 (wgt'ed) examples reached here.  /* #neg=432 #pos=413 */
%   | | | else return 0.058328775456908524;  // std dev = 2.369, 32.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=21 */
%   | else return 0.014812167526283516;  // std dev = 0.385, 111.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=23 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.040337704145635096;  // std dev = 0.497, 894.000 (wgt'ed) examples reached here.  /* #neg=456 #pos=438 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.057435495327884015;  // std dev = 1.562, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return -0.09495368409247489;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.07876725777432543;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.0723023619313789;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordauthor(M, K) )
%   | | then return 0.14604769740350948;  // std dev = 0.756, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordtitle(L, N), haswordauthor(P, N) )
%   | | | then return 0.014061863067228965;  // std dev = 3.051, 63.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=14 */
%   | | | else return 0.11773360246171057;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else return -0.0038200322765555295;  // std dev = 0.368, 48.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=8 */


Results
   AUC ROC   = 0.562338
   AUC PR    = 0.24565
   CLL	      = -0.601479
   Precision = 0.473684 at threshold = 0.5
   Recall    = 0.030981
   F1        = 0.058158


Total learning time: 393.6385989189148 seconds
Total inference time: 2.989 seconds
AUC ROC: 0.562338


Results scoring model
   AUC ROC   = 0.596958
   AUC PR    = 0.560581
   CLL	      = -0.657449
   Precision = 0.765957 at threshold = 0.5
   Recall    = 0.073922
   F1        = 0.134831


Total scoring time: 4.255 seconds
Refined model CLL: -0.657449


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.562338
   AUC PR    = 0.24565
   CLL	      = -0.601479
   Precision = 0.473684 at threshold = 0.5
   Recall    = 0.030981
   F1        = 0.058158


Total learning time: 710.3285029296875 seconds
Total inference time: 2.989 seconds
AUC ROC: 0.562338
Total revision time: 710.3285029296875
Best scored revision CLL: -0.657449


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 13:15:39
{'AUC ROC': 0.562338, 'AUC PR': 0.24565, 'CLL': -0.601479, 'Precision': [0.473684, 0.5], 'Recall': 0.030981, 'F1': 0.058158, 'Learning time': 710.3285029296875, 'Inference time': 2.989, 'parameter_0.2': {'AUC ROC': 0.560681, 'AUC PR': 0.245539, 'CLL': -0.601842, 'Precision': [0.473684, 0.5], 'Recall': 0.030981, 'F1': 0.058158, 'Learning time': 309.1269040107727, 'Inference time': 2.806}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.34808182100554785;  // std dev = 0.500, 894.000 (wgt'ed) examples reached here.  /* #neg=456 #pos=438 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.4945125714631487;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.6581489350995123;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.6359267128772901;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | then return 0.09344305274657119;  // std dev = 0.424, 68.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=16 */
%   | | else return 0.020939632773930943;  // std dev = 0.369, 43.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=7 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3002263539730639;  // std dev = 0.500, 894.000 (wgt'ed) examples reached here.  /* #neg=456 #pos=438 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.42312069605298835;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.5580193346218546;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.5398498420741675;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.5170719622367217;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.050922032513554226;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | then return 0.08168328864042076;  // std dev = 0.424, 68.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=16 */
%   | | else return 0.018371499190655702;  // std dev = 0.369, 43.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=7 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24975268591682817;  // std dev = 0.500, 894.000 (wgt'ed) examples reached here.  /* #neg=456 #pos=438 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.34367606239514226;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.44194861002444086;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.4289562725350853;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.41257245288266;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.04434629760466851;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | then return 0.0707602882901818;  // std dev = 0.424, 68.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=16 */
%   | | else return 0.01608661273776828;  // std dev = 0.369, 43.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=7 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2012807191468957;  // std dev = 0.500, 894.000 (wgt'ed) examples reached here.  /* #neg=456 #pos=438 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.2678714180597208;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.335411394950943;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.32644004768013724;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then if ( haswordauthor(N, K) )
%   | | | then return 0.3151786576185065;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.047729258739694504;  // std dev = 3.300, 63.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=14 */
%   | | else return 0.2255070365174726;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else return 0.016599649412265785;  // std dev = 0.373, 48.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=8 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.15826662208579861;  // std dev = 0.500, 894.000 (wgt'ed) examples reached here.  /* #neg=456 #pos=438 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.2036576554421387;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.25176837314502193;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.24503149911444544;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, A) )
%   | | then return 0.38636491237394194;  // std dev = 0.718, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.005202958920124651;  // std dev = 0.904, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | then return 0.05176628009040203;  // std dev = 0.423, 68.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=16 */
%   | | else return 0.011947450980110286;  // std dev = 0.369, 43.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=7 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.12230152116266178;  // std dev = 0.500, 894.000 (wgt'ed) examples reached here.  /* #neg=456 #pos=438 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.1531477270126841;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.19047961032437172;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.18482045881522163;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then return -0.027753851764801402;  // std dev = 0.358, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then if ( author(P, N), venue(P, A) )
%   | | | then return 0.31476178084905493;  // std dev = 0.713, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.027587539633307075;  // std dev = 0.888, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.03666169011528769;  // std dev = 0.407, 99.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=21 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0934377379925482;  // std dev = 0.500, 894.000 (wgt'ed) examples reached here.  /* #neg=456 #pos=438 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.11488033872832898;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.14620194507639933;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.1410881440687913;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then if ( author(P, N), venue(P, B) )
%   | | | then return 0.06190366927605176;  // std dev = 3.250, 57.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=16 */
%   | | | else return -0.09498219611543521;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | else return 0.17559505950926266;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else return 0.004137640081805084;  // std dev = 0.369, 48.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=8 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07087755163781238;  // std dev = 0.500, 894.000 (wgt'ed) examples reached here.  /* #neg=456 #pos=438 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.08631518284931711;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.11389369465607464;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.10912169797108993;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then return 0.012727037630002476;  // std dev = 0.388, 63.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=13 */
%   | | else return 0.24497934706813274;  // std dev = 0.498, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else if ( haswordvenue(B, P), haswordtitle(Q, P) )
%   | | then return 0.01897341405088734;  // std dev = 0.407, 43.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=10 */
%   | | else return -0.15800544877492342;  // std dev = 0.013, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.053530293787395114;  // std dev = 0.500, 894.000 (wgt'ed) examples reached here.  /* #neg=456 #pos=438 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.06505762125972504;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.08989956180301868;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.08540523411308514;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then return -0.03175772558697532;  // std dev = 0.357, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then if ( haswordtitle(N, P), haswordauthor(Q, P) )
%   | | | then return 0.021343800855704326;  // std dev = 2.925, 55.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=12 */
%   | | | else return 0.20301001866145152;  // std dev = 1.493, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else return -0.0020284679807328555;  // std dev = 0.388, 43.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=9 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04032241963211048;  // std dev = 0.500, 894.000 (wgt'ed) examples reached here.  /* #neg=456 #pos=438 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return -0.016047247105768124;  // std dev = 1.101, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.07950617534665343;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.07174810215160456;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.0675192639640355;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return -0.02701972974468708;  // std dev = 0.357, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( haswordtitle(M, N), haswordauthor(P, N) )
%   | | | then return 0.01812011793349356;  // std dev = 2.924, 55.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=12 */
%   | | | else return 0.16394398712628458;  // std dev = 1.494, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else return -0.0017028071778932596;  // std dev = 0.388, 43.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=9 */


Results
   AUC ROC   = 0.557742
   AUC PR    = 0.243324
   CLL	      = -0.60891
   Precision = 0.473684 at threshold = 0.5
   Recall    = 0.030981
   F1        = 0.058158


Total learning time: 414.99891996383667 seconds
Total inference time: 2.742 seconds
AUC ROC: 0.557742


Dataset: 3_imdb_cora, Fold: 3, Type: Scratch (RDN-B), Time: 13:22:37
{'AUC ROC': 0.557742, 'AUC PR': 0.243324, 'CLL': -0.60891, 'Precision': [0.473684, 0.5], 'Recall': 0.030981, 'F1': 0.058158, 'Learning time': 414.99891996383667, 'Inference time': 2.742}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3461978511639876;  // std dev = 0.500, 1,799.000 (wgt'ed) examples reached here.  /* #neg=921 #pos=878 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.588918165868743;  // std dev = 2.262, 26.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=19 */
%   | | | else return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.6816783468642181;  // std dev = 1.572, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return 0.6081489350995123;  // std dev = 1.500, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then if ( haswordvenue(B, M) )
%   | | | then return 0.19148226843284566;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.07126368919787229;  // std dev = 4.523, 122.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=26 */
%   | | else return 0.35814893509951234;  // std dev = 0.500, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | else return 0.04419544672741935;  // std dev = 0.389, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2986318148571168;  // std dev = 0.500, 1,799.000 (wgt'ed) examples reached here.  /* #neg=921 #pos=878 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.7662870502780095;  // std dev = 0.015, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3742029124729904;  // std dev = 2.577, 29.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=17 */
%   | | | else return 0.5451321367571046;  // std dev = 2.169, 28.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=22 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( title(M, J), venue(M, B) )
%   | | | then return -0.15074929082680635;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.08963343001755131;  // std dev = 4.765, 124.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=30 */
%   | | else return 0.3087411357856348;  // std dev = 0.500, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | then return 0.05021429529796557;  // std dev = 0.398, 81.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=16 */
%   | | else return -0.14731656889956488;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24850294809709686;  // std dev = 0.500, 1,799.000 (wgt'ed) examples reached here.  /* #neg=921 #pos=878 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.6038284220496498;  // std dev = 0.019, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3056417047127853;  // std dev = 2.561, 29.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=17 */
%   | | | else return 0.43240105048352906;  // std dev = 2.168, 28.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=22 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordvenue(B, K) )
%   | | | then return 0.1537074628998235;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.05299800971247604;  // std dev = 4.510, 122.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=26 */
%   | | else return 0.2564123687585864;  // std dev = 0.500, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.04379430943727463;  // std dev = 0.398, 81.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=16 */
%   | | else return -0.12975563258039371;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2003666390917954;  // std dev = 0.500, 1,799.000 (wgt'ed) examples reached here.  /* #neg=921 #pos=878 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.1534461740118134;  // std dev = 1.821, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   | | | else return 0.35291808966614724;  // std dev = 1.564, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.36918122370909695;  // std dev = 1.715, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | | | else return 0.3033753220257932;  // std dev = 1.500, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordvenue(B, L) )
%   | | | then return 0.12993311484059974;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.04574569021530207;  // std dev = 4.509, 122.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=26 */
%   | | else return 0.2061374073445397;  // std dev = 0.500, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | else return 0.02906771967224068;  // std dev = 0.388, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.15763216149575293;  // std dev = 0.500, 1,799.000 (wgt'ed) examples reached here.  /* #neg=921 #pos=878 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.11928955402609764;  // std dev = 1.816, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   | | | else return 0.2651715028463131;  // std dev = 1.564, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.2798323010547177;  // std dev = 1.715, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | | | else return 0.2277503425579028;  // std dev = 1.500, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, A) )
%   | | | then return 0.0694173874631471;  // std dev = 4.644, 117.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=29 */
%   | | | else return -0.11960193531809234;  // std dev = 0.976, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | | else return 0.16162857548414683;  // std dev = 0.500, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | else return 0.025185674831227987;  // std dev = 0.388, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.12187555355683478;  // std dev = 0.500, 1,799.000 (wgt'ed) examples reached here.  /* #neg=921 #pos=878 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.09189274299305326;  // std dev = 1.812, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   | | | else return 0.2012654467933137;  // std dev = 1.564, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.21044721631177216;  // std dev = 1.716, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | | | else return 0.1714539110255143;  // std dev = 1.500, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordvenue(B, L) )
%   | | | then return 0.10114493255295672;  // std dev = 1.620, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.03234262089541721;  // std dev = 4.497, 122.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=26 */
%   | | else return 0.12455597792081977;  // std dev = 0.500, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | else return 0.021759714179292934;  // std dev = 0.388, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09315653064282167;  // std dev = 0.500, 1,799.000 (wgt'ed) examples reached here.  /* #neg=921 #pos=878 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.07038809471086904;  // std dev = 1.811, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   | | | else return 0.1553226777777748;  // std dev = 1.565, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.15908842047606322;  // std dev = 1.716, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | | | else return 0.13030315260810046;  // std dev = 1.500, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, A) )
%   | | | then return 0.05293610589336565;  // std dev = 4.640, 117.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=29 */
%   | | | else return -0.108570937823596;  // std dev = 0.978, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | | else return 0.09492800936730686;  // std dev = 0.500, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | else return 0.01875283294794761;  // std dev = 0.388, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07069284567206251;  // std dev = 0.500, 1,799.000 (wgt'ed) examples reached here.  /* #neg=921 #pos=878 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.1479652835528444;  // std dev = 2.218, 26.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=19 */
%   | | | else return -0.17400034278468712;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.11287131267691032;  // std dev = 0.403, 29.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=23 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return 9.526152903622285E-4;  // std dev = 0.387, 26.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=5 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return 0.47571924916425257;  // std dev = 0.828, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.06612037134113094;  // std dev = 1.519, 19.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.018593601465278924;  // std dev = 4.240, 112.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=25 */
%   | | | else return 0.05033712835129162;  // std dev = 3.682, 74.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=18 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.42958560715591804;  // std dev = 0.307, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( haswordtitle(E, C) )
%   | | then return 0.05139328888399924;  // std dev = 0.500, 1,790.000 (wgt'ed) examples reached here.  /* #neg=920 #pos=870 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.06655910517409067;  // std dev = 2.461, 32.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   | | | else return 0.08468371599311489;  // std dev = 2.166, 28.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=22 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return 8.056786614983089E-4;  // std dev = 0.387, 26.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=5 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | | then return 0.011691300020212497;  // std dev = 4.218, 112.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=25 */
%   | | | else return 0.104598576623523;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.03634335407829028;  // std dev = 3.784, 79.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=19 */
%   | | | else return -0.12831373822326475;  // std dev = 0.011, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04026860428321946;  // std dev = 0.500, 1,799.000 (wgt'ed) examples reached here.  /* #neg=921 #pos=878 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.24028396369836116;  // std dev = 0.141, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.0287230666221263;  // std dev = 2.427, 29.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=17 */
%   | | | else return 0.06728293584464233;  // std dev = 2.166, 28.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=22 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordauthor(K, I) )
%   | | then return 0.1372230209916242;  // std dev = 0.479, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else return 0.012077274515450882;  // std dev = 0.400, 132.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=29 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then return -0.18799369320257128;  // std dev = 0.068, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.030422371991843885;  // std dev = 3.784, 79.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=19 */
%   | | | else return -0.11463653350503092;  // std dev = 0.010, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.558687
   AUC PR    = 0.244001
   CLL	      = -0.607927
   Precision = 0.47619 at threshold = 0.5
   Recall    = 0.034423
   F1        = 0.064205


Total learning time: 1455.6400079727173 seconds
Total inference time: 3.355 seconds
AUC ROC: 0.558687


Results scoring model
   AUC ROC   = 0.572434
   AUC PR    = 0.535517
   CLL	      = -0.66885
   Precision = 0.78125 at threshold = 0.5
   Recall    = 0.051335
   F1        = 0.096339


Total scoring time: 15.5 seconds
Parameter learned model CLL: -0.66885


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,true': 'haswordtitle(L, M), haswordauthor(N, M)', 'false,true,true': 'haswordvenue(B, M)'}, {'true,true': [0.5, 921, 878], 'true,false,true,true': [2.262, 7, 19], 'true,false,true,false': [0.913, 5, 1], 'true,false,false,true': [1.572, 3, 14], 'true,false,false,false': [1.5, 3, 9], 'false,true,true,true': [1.633, 8, 4], 'false,true,true,false': [4.523, 96, 26], 'false,true,false': [0.5, 7, 7], 'false,false': [0.389, 70, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordauthor(L, K)', 'false,true,true': 'title(M, J), venue(M, B)', 'false,false': 'haswordvenue(B, N), haswordtitle(P, N)'}, {'true,true': [0.5, 921, 878], 'true,false,true': [0.015, 0, 4], 'true,false,false,true': [2.577, 12, 17], 'true,false,false,false': [2.169, 6, 22], 'false,true,true,true': [0.0, 10, 0], 'false,true,true,false': [4.765, 94, 30], 'false,true,false': [0.5, 7, 7], 'false,false,true': [0.398, 65, 16], 'false,false,false': [0.0, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordauthor(L, K)', 'false,true,true': 'haswordvenue(B, K)', 'false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true': [0.5, 921, 878], 'true,false,true': [0.019, 0, 4], 'true,false,false,true': [2.561, 12, 17], 'true,false,false,false': [2.168, 6, 22], 'false,true,true,true': [1.633, 8, 4], 'false,true,true,false': [4.51, 96, 26], 'false,true,false': [0.5, 7, 7], 'false,false,true': [0.398, 65, 16], 'false,false,false': [3.73e-09, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordauthor(M, L)', 'false,true,true': 'haswordvenue(B, L)'}, {'true,true': [0.5, 921, 878], 'true,false,true,true': [1.821, 8, 8], 'true,false,true,false': [1.564, 3, 14], 'true,false,false,true': [1.715, 4, 12], 'true,false,false,false': [1.5, 3, 9], 'false,true,true,true': [1.633, 8, 4], 'false,true,true,false': [4.509, 96, 26], 'false,true,false': [0.5, 7, 7], 'false,false': [0.388, 70, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordauthor(M, L)', 'false,true,true': 'author(N, M), venue(N, A)'}, {'true,true': [0.5, 921, 878], 'true,false,true,true': [1.816, 8, 8], 'true,false,true,false': [1.564, 3, 14], 'true,false,false,true': [1.715, 4, 12], 'true,false,false,false': [1.5, 3, 9], 'false,true,true,true': [4.644, 88, 29], 'false,true,true,false': [0.976, 16, 1], 'false,true,false': [0.5, 7, 7], 'false,false': [0.388, 70, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordauthor(M, L)', 'false,true,true': 'haswordvenue(B, L)'}, {'true,true': [0.5, 921, 878], 'true,false,true,true': [1.812, 8, 8], 'true,false,true,false': [1.564, 3, 14], 'true,false,false,true': [1.716, 4, 12], 'true,false,false,false': [1.5, 3, 9], 'false,true,true,true': [1.62, 8, 4], 'false,true,true,false': [4.497, 96, 26], 'false,true,false': [0.5, 7, 7], 'false,false': [0.388, 70, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordauthor(M, L)', 'false,true,true': 'author(N, M), venue(N, A)'}, {'true,true': [0.5, 921, 878], 'true,false,true,true': [1.811, 8, 8], 'true,false,true,false': [1.565, 3, 14], 'true,false,false,true': [1.716, 4, 12], 'true,false,false,false': [1.5, 3, 9], 'false,true,true,true': [4.64, 88, 29], 'false,true,true,false': [0.978, 16, 1], 'false,true,false': [0.5, 7, 7], 'false,false': [0.388, 70, 16]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false,false,true': 'author(M, L), venue(M, A)', 'false,false,false': 'haswordvenue(B, N), haswordtitle(P, N)'}, {'true,true': [0.5, 921, 878], 'true,false,true,true': [2.218, 7, 19], 'true,false,true,false': [0.913, 5, 1], 'true,false,false': [0.403, 6, 23], 'false,true': [0.387, 21, 5], 'false,false,true,true': [0.828, 1, 2], 'false,false,true,false': [1.519, 16, 3], 'false,false,false,true': [4.24, 87, 25], 'false,false,false,false': [3.682, 56, 18]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordauthor(D, C)', 'true,false': 'haswordtitle(E, C)', 'true,false,false': 'haswordvenue(B, F), haswordtitle(G, F)', 'false': 'haswordvenue(A, H), haswordauthor(I, H)', 'false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,false,true': 'haswordtitle(K, L), haswordauthor(M, L)', 'false,false,false': 'haswordvenue(A, N), haswordtitle(P, N)'}, {'true,true': [0.307, 1, 9], 'true,false,true': [0.5, 920, 870], 'true,false,false,true': [2.461, 12, 20], 'true,false,false,false': [2.166, 6, 22], 'false,true': [0.387, 21, 5], 'false,false,true,true': [4.218, 87, 25], 'false,false,true,false': [1.664, 9, 4], 'false,false,false,true': [3.784, 60, 19], 'false,false,false,false': [0.011, 4, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordauthor(K, I)', 'false,false': 'haswordvenue(A, L), haswordauthor(M, L)', 'false,false,false': 'haswordvenue(A, N), haswordtitle(P, N)'}, {'true,true': [0.5, 921, 878], 'true,false,true': [0.141, 0, 4], 'true,false,false,true': [2.427, 12, 17], 'true,false,false,false': [2.166, 6, 22], 'false,true,true': [0.479, 8, 5], 'false,true,false': [0.4, 103, 29], 'false,false,true': [0.068, 6, 0], 'false,false,false,true': [3.784, 60, 19], 'false,false,false,false': [0.01, 4, 0]}]]
[{'': [0.24997658688868132, 0.17519541237490047], 'true': [0.2498571715927897, 0.20800859983875347], 'true,false': [0.23437500000000003, 0.1640903686087999], 'true,false,true': [0.19674556213017722, 0.13888888888888892], 'false': [0.18750000000000133, 0.15143320713899353], 'false,true': [0.1737580752951671, 0.25], 'false,true,true': [0.22222222222222207, 0.16769685568395695], 'true,false,false': [0.14532871972318315, 0.18749999999999978]}, {'': [0.2492026973575402, 0.17370354967896706], 'true': [0.2498571715927769, 0.1986538223742653], 'true,false': [5.30022059973545e-05, 0.20636532796899693], 'true,false,false': [0.2290544000305195, 0.16800124433130018], 'false': [0.1855169386060217, 0.15143320713899366], 'false,true': [0.1734645237607506, 0.2500000000000001], 'false,true,true': [-2.7755575615628915e-18, 0.18314137046053053], 'false,false': [0.15851242188690712, 0.0]}, {'': [0.24852995061717104, 0.17177504079856576], 'true': [0.249857171592749, 0.19179272244886336], 'true,false': [9.315876297333325e-05, 0.20159563424759422], 'true,false,false': [0.22621430685755217, 0.16792281069037265], 'false': [0.18307688395957883, 0.15094591153674994], 'false,true': [0.17251021998154453, 0.25], 'false,true,true': [0.22222222222222213, 0.16671224075703112], 'false,false': [0.15851242188690728, 2.7755575615628915e-18]}, {'': [0.2480878863813147, 0.1705436597692353], 'true': [0.24985717159276083, 0.1872252334525511], 'true,false': [0.18454515539753355, 0.1864960233524427], 'true,false,false': [0.18388714799690942, 0.1874999999999999], 'true,false,true': [0.2073094935097239, 0.14382823775064474], 'false': [0.1815874656669764, 0.15059194973226464], 'false,true': [0.17222978876241915, 0.25], 'false,true,true': [0.22222222222222218, 0.16667779672105754]}, {'': [0.24781570660168503, 0.16975720102130099], 'true': [0.24985717159277648, 0.18342677557298862], 'true,false': [0.17933308067367032, 0.18609950836586073], 'true,false,false': [0.18388662661131464, 0.1875], 'true,false,true': [0.2060521497759071, 0.14386739764391668], 'false': [0.180544065828406, 0.15057639234243175], 'false,true': [0.17201041017423133, 0.24999999999999994], 'false,true,true': [0.18433530112885527, 0.05599055161070244]}, {'': [0.2476830900164503, 0.16868815677605692], 'true': [0.2498571715927707, 0.18140654919863136], 'true,false': [0.17668080419455437, 0.1858562284407803], 'true,false,false': [0.1839717664040167, 0.1875], 'true,false,true': [0.20531103680101787, 0.14393475705772307], 'false': [0.1789928492586971, 0.1505628494076985], 'false,true': [0.1708737245037282, 0.2499999999999998], 'false,true,true': [0.21875465549185422, 0.16574020609953075]}, {'': [0.24761950420633633, 0.16833099726252332], 'true': [0.2498571715927786, 0.18037635644212338], 'true,false': [0.17532719040139283, 0.18575188476159224], 'true,false,false': [0.18408568762725921, 0.1875], 'true,false,true': [0.20489010646340625, 0.14400562896512376], 'false': [0.1785213109810182, 0.15055110624795132], 'false,true': [0.17068409561204503, 0.24999999999999997], 'false,true,true': [0.1840039606910929, 0.056236788644168145]}, {'': [0.2475876837830098, 0.16771362253529423], 'true': [0.2498571715927703, 0.17984747710260315], 'true,false': [0.19557647488381708, 0.16215623101029744], 'true,false,true': [0.18922162589623398, 0.1388888888888889], 'false': [0.1494935575964612, 0.16990532613060008], 'false,false': [0.17066011459948233, 0.16975785805484717], 'false,false,true': [0.228492205161732, 0.12149370810420641], 'false,false,false': [0.16048616382474884, 0.1831839346732982]}, {'': [0.2474714549372846, 0.16660031152970947], 'true': [0.09436328367890878, 0.24753320383630067], 'true,false': [0.2498049374239257, 0.1792198268845063], 'true,false,false': [0.1893364211462733, 0.16748280406180976], 'false': [0.14949069781033147, 0.16867836569330008], 'false,false': [0.16526532990723813, 0.17378857310936832], 'false,false,false': [0.1812798534602091, 3.0428522780647643e-05], 'false,false,true': [0.1588249348648577, 0.21301775147928986]}, {'': [0.24713703210603935, 0.16632042119376783], 'true': [0.24952337046650355, 0.17637168671005055], 'true,false': [0.004968207810043104, 0.18596707256773765], 'true,false,false': [0.20307033803015154, 0.16749650177631545], 'false': [0.16726993607726826, 0.1646499314722593], 'false,true': [0.22919229548501366, 0.15976739118838582], 'false,false': [0.0007674260809461125, 0.1734833328272511], 'false,false,false': [0.18125195601375332, 2.5015266698007188e-05]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,false;haswordvenue(B, E), haswordauthor(F, E).;true;true
1;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
1;false,true;haswordtitle(J, K), haswordauthor(L, K).;true;true
1;false,true,true;title(M, J), venue(M, B).;true;true
1;false,false;haswordvenue(B, N), haswordtitle(P, N).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,false;haswordvenue(B, E), haswordauthor(F, E).;true;true
2;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
2;false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(A, H), haswordauthor(I, H).;true;true
8;false,false;haswordvenue(B, J), haswordtitle(K, J).;true;true
8;false,false,false;haswordvenue(A, N), haswordtitle(P, N).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
9;false,false;haswordvenue(A, L), haswordauthor(M, L).;true;true
9;false,false,false;haswordvenue(A, N), haswordtitle(P, N).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3461978511639876;  // std dev = 0.500, 1,799.000 (wgt'ed) examples reached here.  /* #neg=921 #pos=878 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.588918165868743;  // std dev = 2.262, 26.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=19 */
%   | | | else return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.6816783468642181;  // std dev = 1.572, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return 0.6081489350995123;  // std dev = 1.500, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then if ( author(P, N), venue(P, A) )
%   | | | then return 0.10601218296275916;  // std dev = 4.670, 117.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=29 */
%   | | | else return -0.08302753548872309;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | | else return 0.35814893509951234;  // std dev = 0.500, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | else return 0.04419544672741935;  // std dev = 0.389, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2986318148571168;  // std dev = 0.500, 1,799.000 (wgt'ed) examples reached here.  /* #neg=921 #pos=878 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.5012595419241128;  // std dev = 2.262, 26.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=19 */
%   | | | else return 0.02176788419240575;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.5772066794120977;  // std dev = 1.572, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return 0.5170719622367218;  // std dev = 1.500, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then if ( title(P, L), venue(P, B) )
%   | | | then return -0.1506100006831421;  // std dev = 0.029, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.08949109614605152;  // std dev = 4.757, 124.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=30 */
%   | | else return 0.3087411357856348;  // std dev = 0.500, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | else return 0.03872994272834171;  // std dev = 0.389, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24850294809709686;  // std dev = 0.500, 1,799.000 (wgt'ed) examples reached here.  /* #neg=921 #pos=878 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.40113112246303523;  // std dev = 2.262, 26.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=19 */
%   | | | else return 0.01904987294481035;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.45560116266536577;  // std dev = 1.572, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return 0.41257245288266015;  // std dev = 1.500, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then if ( author(P, N), venue(P, A) )
%   | | | then return 0.08261827808959404;  // std dev = 4.658, 117.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=29 */
%   | | | else return -0.08064869207523329;  // std dev = 0.968, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | | else return 0.2564123687585864;  // std dev = 0.500, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | else return 0.03379815547193589;  // std dev = 0.389, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2003666390917954;  // std dev = 0.500, 1,799.000 (wgt'ed) examples reached here.  /* #neg=921 #pos=878 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.5627656774530045;  // std dev = 0.048, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2193390724731362;  // std dev = 2.452, 29.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=17 */
%   | | | else return 0.3258568158880498;  // std dev = 2.166, 28.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=22 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordauthor(L, I) )
%   | | | then return 0.0708149243106182;  // std dev = 1.732, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | | else return 0.0504418819434477;  // std dev = 4.463, 118.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=26 */
%   | | else return 0.2061374073445397;  // std dev = 0.500, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.040868764684882784;  // std dev = 0.398, 81.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=16 */
%   | | else return -0.15666209951264823;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.15763216149575293;  // std dev = 0.500, 1,799.000 (wgt'ed) examples reached here.  /* #neg=921 #pos=878 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.42334097611666777;  // std dev = 0.047, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.17007805495716896;  // std dev = 2.441, 29.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=17 */
%   | | | else return 0.24472654042185957;  // std dev = 2.166, 28.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=22 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordvenue(B, K) )
%   | | | then return 0.15430601344804137;  // std dev = 1.613, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.03452244560710217;  // std dev = 4.489, 122.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=26 */
%   | | else return 0.16162857548414683;  // std dev = 0.500, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.03539315025987074;  // std dev = 0.398, 81.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=16 */
%   | | else return -0.13705855977836165;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.49933684207256135;  // std dev = 0.306, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( haswordtitle(E, C) )
%   | | then return 0.11986015704542738;  // std dev = 0.500, 1,790.000 (wgt'ed) examples reached here.  /* #neg=920 #pos=870 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.3368383837185645;  // std dev = 7.45e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.15745470134994477;  // std dev = 3.264, 57.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=39 */
%   else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | then if ( haswordauthor(K, H) )
%   | | | then return 0.053576416608033396;  // std dev = 1.724, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | | else return 0.03642300708777135;  // std dev = 4.459, 118.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=26 */
%   | | else return 0.12455597792081977;  // std dev = 0.500, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.03052734610322273;  // std dev = 0.398, 81.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=16 */
%   | | else return -0.12163931141590205;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( haswordauthor(E, C) )
%   | | then return 0.5123304352731052;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.09223740079887455;  // std dev = 0.500, 1,795.000 (wgt'ed) examples reached here.  /* #neg=921 #pos=874 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.249067958165553;  // std dev = 0.059, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.08794842374986091;  // std dev = 2.317, 30.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=19 */
%   | | | else return 0.15697265227493334;  // std dev = 2.279, 27.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=20 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return 0.001631454592394578;  // std dev = 0.390, 26.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=5 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, A) )
%   | | | then return 0.05110456459398008;  // std dev = 4.405, 107.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=26 */
%   | | | else return -0.012257407387066243;  // std dev = 1.972, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
%   | | else return 0.026735749094750703;  // std dev = 0.395, 77.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=15 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07070657148804482;  // std dev = 0.499, 1,799.000 (wgt'ed) examples reached here.  /* #neg=921 #pos=878 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.11737809289531433;  // std dev = 2.211, 26.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=19 */
%   | | | else return -0.08315823050600156;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.13898239145820906;  // std dev = 1.561, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return 0.09914398065645047;  // std dev = 1.500, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then return 0.0013804029764375105;  // std dev = 0.390, 26.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=5 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then if ( haswordtitle(N, P), haswordauthor(Q, P) )
%   | | | then return 0.025661991348052183;  // std dev = 4.447, 117.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=26 */
%   | | | else return 0.09787843573676192;  // std dev = 1.871, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | else return 0.022969471175008353;  // std dev = 0.395, 77.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=15 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( author(G, E), title(G, F) )
%   | | | then return 0.3179247944258464;  // std dev = 2.292, 29.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=22 */
%   | | | else return -0.07441647787223338;  // std dev = 1.206, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else return -0.17867296025242935;  // std dev = 0.407, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.05259485316602925;  // std dev = 0.500, 1,743.000 (wgt'ed) examples reached here.  /* #neg=895 #pos=848 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return 0.2008966132793183;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.06423927214035666;  // std dev = 3.226, 56.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=38 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then return 0.022685533012732625;  // std dev = 0.412, 134.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=30 */
%   | | else return 0.07413803321364452;  // std dev = 0.500, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | else return 0.012001368069004382;  // std dev = 0.388, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0401396007706693;  // std dev = 0.499, 1,799.000 (wgt'ed) examples reached here.  /* #neg=921 #pos=878 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.16959832961764154;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.03297165921877849;  // std dev = 2.409, 29.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=17 */
%   | | | else return 0.08109528593808675;  // std dev = 2.167, 28.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=22 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.0018386147408914948;  // std dev = 0.389, 26.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=5 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | | then return 0.009103582718283524;  // std dev = 4.232, 112.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=25 */
%   | | | else return 0.09370210403304718;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else if ( haswordvenue(B, P), haswordauthor(Q, P) )
%   | | | then return -0.08599649233290294;  // std dev = 0.930, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0.037835085372222056;  // std dev = 3.678, 74.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=18 */


Results
   AUC ROC   = 0.560193
   AUC PR    = 0.244852
   CLL	      = -0.605775
   Precision = 0.473684 at threshold = 0.5
   Recall    = 0.030981
   F1        = 0.058158


Total learning time: 1584.2292358875275 seconds
Total inference time: 3.587 seconds
AUC ROC: 0.560193


Results scoring model
   AUC ROC   = 0.584981
   AUC PR    = 0.550191
   CLL	      = -0.667542
   Precision = 0.770115 at threshold = 0.5
   Recall    = 0.068789
   F1        = 0.126296


Total scoring time: 14.11 seconds
Refined model CLL: -0.667542


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.560193
   AUC PR    = 0.244852
   CLL	      = -0.605775
   Precision = 0.473684 at threshold = 0.5
   Recall    = 0.030981
   F1        = 0.058158


Total learning time: 3069.479243860245 seconds
Total inference time: 3.587 seconds
AUC ROC: 0.560193
Total revision time: 3069.479243860245
Best scored revision CLL: -0.667542


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 14:13:58
{'AUC ROC': 0.560193, 'AUC PR': 0.244852, 'CLL': -0.605775, 'Precision': [0.473684, 0.5], 'Recall': 0.030981, 'F1': 0.058158, 'Learning time': 3069.479243860245, 'Inference time': 3.587, 'parameter_0.4': {'AUC ROC': 0.558687, 'AUC PR': 0.244001, 'CLL': -0.607927, 'Precision': [0.47619, 0.5], 'Recall': 0.034423, 'F1': 0.064205, 'Learning time': 1455.6400079727173, 'Inference time': 3.355}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3461978511639876;  // std dev = 0.500, 1,799.000 (wgt'ed) examples reached here.  /* #neg=921 #pos=878 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.588918165868743;  // std dev = 2.262, 26.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=19 */
%   | | | else return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.6816783468642181;  // std dev = 1.572, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return 0.6081489350995123;  // std dev = 1.500, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then if ( haswordauthor(N, K) )
%   | | | then return 0.10814893509951232;  // std dev = 1.732, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | | else return 0.07848791815035908;  // std dev = 4.502, 118.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=26 */
%   | | else return 0.35814893509951234;  // std dev = 0.500, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | else return 0.04419544672741935;  // std dev = 0.389, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2986318148571168;  // std dev = 0.500, 1,799.000 (wgt'ed) examples reached here.  /* #neg=921 #pos=878 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.5012595419241128;  // std dev = 2.262, 26.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=19 */
%   | | | else return 0.02176788419240575;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.5772066794120977;  // std dev = 1.572, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return 0.5170719622367218;  // std dev = 1.500, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then if ( haswordvenue(B, M) )
%   | | | then return 0.18133549438345917;  // std dev = 1.631, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.06096414767722467;  // std dev = 4.523, 122.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=26 */
%   | | else return 0.3087411357856348;  // std dev = 0.500, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | else return 0.03872994272834171;  // std dev = 0.389, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24850294809709686;  // std dev = 0.500, 1,799.000 (wgt'ed) examples reached here.  /* #neg=921 #pos=878 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.40113112246303523;  // std dev = 2.262, 26.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=19 */
%   | | | else return 0.01904987294481035;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.45560116266536577;  // std dev = 1.572, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return 0.41257245288266015;  // std dev = 1.500, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then if ( haswordvenue(B, M) )
%   | | | then return 0.1564609949943803;  // std dev = 1.631, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.05293198048758188;  // std dev = 4.523, 122.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=26 */
%   | | else return 0.2564123687585864;  // std dev = 0.500, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | else return 0.03379815547193589;  // std dev = 0.389, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2003666390917954;  // std dev = 0.500, 1,799.000 (wgt'ed) examples reached here.  /* #neg=921 #pos=878 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.5627656774530045;  // std dev = 0.048, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.2193390724731362;  // std dev = 2.452, 29.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=17 */
%   | | | else return 0.3258568158880498;  // std dev = 2.166, 28.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=22 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordvenue(B, K) )
%   | | | then return 0.13252079724526916;  // std dev = 1.631, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.04568273992363595;  // std dev = 4.523, 122.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=26 */
%   | | else return 0.2061374073445397;  // std dev = 0.500, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.040868764684882784;  // std dev = 0.398, 81.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=16 */
%   | | else return -0.15666209951264823;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.15763216149575293;  // std dev = 0.500, 1,799.000 (wgt'ed) examples reached here.  /* #neg=921 #pos=878 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.42334097611666777;  // std dev = 0.047, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.17007805495716896;  // std dev = 2.441, 29.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=17 */
%   | | | else return 0.24472654042185957;  // std dev = 2.166, 28.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=22 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordauthor(L, I) )
%   | | | then return 0.06921319756469774;  // std dev = 1.711, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | | else return 0.042390212035916676;  // std dev = 4.499, 118.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=26 */
%   | | else return 0.16162857548414683;  // std dev = 0.500, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.03539315025987074;  // std dev = 0.398, 81.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=16 */
%   | | else return -0.13705855977836165;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.12187555355683478;  // std dev = 0.500, 1,799.000 (wgt'ed) examples reached here.  /* #neg=921 #pos=878 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.184927410158239;  // std dev = 1.728, 24.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=17 */
%   | | | else return 0.024410160858889623;  // std dev = 1.530, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.2208925206704047;  // std dev = 1.717, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | | | else return 0.17351101576188646;  // std dev = 1.500, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordvenue(B, L) )
%   | | | then return 0.10257462878441574;  // std dev = 1.629, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.03254440322620535;  // std dev = 4.524, 122.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=26 */
%   | | else return 0.12455597792081977;  // std dev = 0.500, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | else return 0.02168044741025031;  // std dev = 0.388, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09315653064282167;  // std dev = 0.500, 1,799.000 (wgt'ed) examples reached here.  /* #neg=921 #pos=878 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.2838903175745063;  // std dev = 0.037, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.09369066550658282;  // std dev = 2.304, 30.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=19 */
%   | | | else return 0.14663354823268404;  // std dev = 2.278, 27.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=20 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordauthor(L, I) )
%   | | | then return 0.05284052242893441;  // std dev = 1.704, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | | else return 0.029981424361370152;  // std dev = 4.499, 118.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=26 */
%   | | else return 0.09492800936730686;  // std dev = 0.500, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.02748949376402842;  // std dev = 0.398, 81.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=16 */
%   | | else return -0.12397478604940279;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07069284567206251;  // std dev = 0.500, 1,799.000 (wgt'ed) examples reached here.  /* #neg=921 #pos=878 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.12181963969656252;  // std dev = 2.206, 26.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=19 */
%   | | | else return -0.08943470235880098;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return 0.12062680753618688;  // std dev = 0.400, 29.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=23 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, A) )
%   | | then if ( samebib(K, L), venue(L, B) )
%   | | | then return 0.34594138544556435;  // std dev = 3.449, 48.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=26 */
%   | | | else return -0.19353829132650344;  // std dev = 0.127, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | else if ( haswordtitle(J, M), haswordvenue(B, M) )
%   | | | then return 0.026560154039497852;  // std dev = 2.559, 35.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=11 */
%   | | | else return -0.27696824617746313;  // std dev = 0.185, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.015743280481854506;  // std dev = 0.388, 86.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=16 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0534086853954071;  // std dev = 0.500, 1,799.000 (wgt'ed) examples reached here.  /* #neg=921 #pos=878 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.09365850581991907;  // std dev = 2.207, 26.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=19 */
%   | | | else return -0.07277078385042113;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.11145537123342909;  // std dev = 1.545, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | | else return 0.07100695867925384;  // std dev = 1.500, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then return 0.004384614288472792;  // std dev = 0.382, 26.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=5 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then if ( haswordtitle(N, P), haswordauthor(Q, P) )
%   | | | then return 0.004749628330152663;  // std dev = 4.224, 112.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=25 */
%   | | | else return 0.080014961548027;  // std dev = 1.621, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else return 0.036475123714098445;  // std dev = 0.392, 83.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=19 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04024183772720032;  // std dev = 0.500, 1,799.000 (wgt'ed) examples reached here.  /* #neg=921 #pos=878 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.19347069280784987;  // std dev = 0.030, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.031825852321328826;  // std dev = 2.391, 29.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=17 */
%   | | | else return 0.07206834747204689;  // std dev = 2.154, 28.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=22 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return 0.003718043886709536;  // std dev = 0.382, 26.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=5 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | | then return -0.015097806989816562;  // std dev = 2.920, 52.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=14 */
%   | | | else return 0.028558861107860174;  // std dev = 3.452, 73.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=15 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.038284765074515635;  // std dev = 3.552, 79.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=19 */
%   | | | else return -0.11638960087162174;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.560454
   AUC PR    = 0.242672
   CLL	      = -0.606711
   Precision = 0.473684 at threshold = 0.5
   Recall    = 0.030981
   F1        = 0.058158


Total learning time: 1317.1997609138489 seconds
Total inference time: 3.327 seconds
AUC ROC: 0.560454


Dataset: 3_imdb_cora, Fold: 3, Type: Scratch (RDN-B), Time: 14:35:59
{'AUC ROC': 0.560454, 'AUC PR': 0.242672, 'CLL': -0.606711, 'Precision': [0.473684, 0.5], 'Recall': 0.030981, 'F1': 0.058158, 'Learning time': 1317.1997609138489, 'Inference time': 3.327}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3454136084106922;  // std dev = 0.500, 2,709.000 (wgt'ed) examples reached here.  /* #neg=1,389 #pos=1,320 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.6359267128772893;  // std dev = 2.494, 36.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=28 */
%   | | | else return 0.13087620782678497;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5854216623722386;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=32 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then if ( haswordauthor(N, M) )
%   | | | then return 0.29564893509951234;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | | | else return 0.1568502338008104;  // std dev = 4.016, 77.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=23 */
%   | | else return 0.05194738471191488;  // std dev = 0.395, 129.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=25 */
%   | else return 0.030562728202960524;  // std dev = 0.378, 116.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.29796795404605414;  // std dev = 0.500, 2,709.000 (wgt'ed) examples reached here.  /* #neg=1,389 #pos=1,320 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.539849842074168;  // std dev = 2.494, 36.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=28 */
%   | | | else return 0.11418623766746651;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.4983807577440196;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=32 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then if ( haswordtitle(L, N), haswordauthor(P, N) )
%   | | | then return 0.054336242804413744;  // std dev = 3.033, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | else return 0.2995015326405051;  // std dev = 3.113, 39.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=18 */
%   | | else return 0.04550546107179215;  // std dev = 0.395, 129.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=25 */
%   | else return 0.026801469463011766;  // std dev = 0.378, 116.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=20 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24798239774156317;  // std dev = 0.500, 2,709.000 (wgt'ed) examples reached here.  /* #neg=1,389 #pos=1,320 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.6192411420869667;  // std dev = 0.111, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.32371150699647105;  // std dev = 2.989, 43.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=27 */
%   | | | else return 0.40251575571804643;  // std dev = 2.958, 45.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=33 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then if ( haswordauthor(L, K) )
%   | | | then return 0.2475007151091829;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | | | else return 0.11022788251798121;  // std dev = 3.960, 77.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=23 */
%   | | else if ( title(M, J), venue(M, B) )
%   | | | then return 0.04586711517789105;  // std dev = 4.472, 125.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=25 */
%   | | | else return -0.15413288482210924;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.023435345074299042;  // std dev = 0.378, 116.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.19998564655077272;  // std dev = 0.500, 2,709.000 (wgt'ed) examples reached here.  /* #neg=1,389 #pos=1,320 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.3441985388418799;  // std dev = 2.472, 36.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=28 */
%   | | | else return 0.046760361943454475;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.326114235876745;  // std dev = 2.282, 29.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=22 */
%   | | | else return 0.29024383373041285;  // std dev = 1.882, 18.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then if ( haswordauthor(N, K) )
%   | | | then return 0.12247302861685068;  // std dev = 2.155, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
%   | | | else return 0.04590978906946401;  // std dev = 5.524, 180.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=40 */
%   | | else return 0.2002320684042457;  // std dev = 0.490, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
%   | else return 0.020439614626026212;  // std dev = 0.378, 116.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1573675508117034;  // std dev = 0.500, 2,709.000 (wgt'ed) examples reached here.  /* #neg=1,389 #pos=1,320 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.25873784079788753;  // std dev = 2.472, 36.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=28 */
%   | | | else return 0.038477068411761475;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.24547904764006903;  // std dev = 2.283, 29.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=22 */
%   | | | else return 0.21857132065623558;  // std dev = 1.882, 18.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then if ( haswordvenue(B, M) )
%   | | | then return 0.17622534859824593;  // std dev = 2.165, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
%   | | | else return 0.020791060120735387;  // std dev = 5.007, 162.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=32 */
%   | | else return 0.24248601079020643;  // std dev = 0.499, 21.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=10 */
%   | else return 0.019469980823722144;  // std dev = 0.388, 135.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=25 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.12169784232642178;  // std dev = 0.500, 2,709.000 (wgt'ed) examples reached here.  /* #neg=1,389 #pos=1,320 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.35973534078130953;  // std dev = 0.163, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.1375702505477761;  // std dev = 3.069, 47.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=30 */
%   | | | else return 0.1723407160593801;  // std dev = 2.754, 41.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=30 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordvenue(A, K) )
%   | | | then return 0.17172101790553276;  // std dev = 2.023, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | | else return 0.01631565587648882;  // std dev = 5.054, 164.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=33 */
%   | | else return 0.1963039513096713;  // std dev = 0.499, 21.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=10 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return -0.10559943802955235;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | else return 0.03321280663612311;  // std dev = 0.401, 119.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=24 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09303923924894807;  // std dev = 0.500, 2,709.000 (wgt'ed) examples reached here.  /* #neg=1,389 #pos=1,320 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.15246580528444773;  // std dev = 2.460, 36.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=28 */
%   | | | else return 0.0048137340233438105;  // std dev = 1.478, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.2256998091335141;  // std dev = 0.028, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.13228028184938664;  // std dev = 2.953, 44.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=32 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then if ( haswordvenue(B, M) )
%   | | | then return 0.15535088066569114;  // std dev = 1.958, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | | | else return 0.016746682681231483;  // std dev = 5.495, 187.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=40 */
%   | | else return 0.15672202297266588;  // std dev = 0.490, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
%   | else return 0.012162537710760746;  // std dev = 0.378, 116.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=20 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07061587701067289;  // std dev = 0.500, 2,709.000 (wgt'ed) examples reached here.  /* #neg=1,389 #pos=1,320 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordauthor(G, E) )
%   | | | then return 0.2879602525503582;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.07262203012413321;  // std dev = 2.861, 43.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=27 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.18875196097885397;  // std dev = 0.024, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.10084605425184702;  // std dev = 2.953, 44.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=32 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( title(N, K), venue(N, A) )
%   | | | then return -0.13518998116413333;  // std dev = 1.003, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | | | else return 0.037892572230901755;  // std dev = 5.299, 162.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=39 */
%   | | else return 0.15142876176083572;  // std dev = 0.499, 21.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=10 */
%   | else return 0.011793662902582167;  // std dev = 0.387, 135.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=25 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05335809914250307;  // std dev = 0.500, 2,709.000 (wgt'ed) examples reached here.  /* #neg=1,389 #pos=1,320 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.22661945991544843;  // std dev = 0.161, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.23267731923147011;  // std dev = 0.006, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.05930076445362205;  // std dev = 4.094, 84.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=56 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( title(M, J), venue(M, B) )
%   | | | then return -0.13440553451995207;  // std dev = 0.986, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | | | else return 0.03264407750811297;  // std dev = 5.699, 185.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=46 */
%   | | else return 0.11752133714709902;  // std dev = 0.489, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
%   | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | then return 0.016273035364042274;  // std dev = 0.385, 110.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=20 */
%   | | else return -0.16187260514243276;  // std dev = 0.017, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04020840647387006;  // std dev = 0.500, 2,709.000 (wgt'ed) examples reached here.  /* #neg=1,389 #pos=1,320 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.17113080057986077;  // std dev = 0.079, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.22229482997924338;  // std dev = 0.086, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.04619091083322598;  // std dev = 4.094, 84.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=56 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordvenue(B, K) )
%   | | | then return 0.10751183495628897;  // std dev = 1.955, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | | | else return 0.006696876617161917;  // std dev = 5.458, 187.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=40 */
%   | | else return 0.09220742243814672;  // std dev = 0.489, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.014013742666173687;  // std dev = 0.385, 110.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=20 */
%   | | else return -0.14110031793619082;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */


Results
   AUC ROC   = 0.557452
   AUC PR    = 0.240891
   CLL	      = -0.607189
   Precision = 0.473684 at threshold = 0.5
   Recall    = 0.030981
   F1        = 0.058158


Total learning time: 1979.3823311328888 seconds
Total inference time: 3.788 seconds
AUC ROC: 0.557452


Results scoring model
   AUC ROC   = 0.567705
   AUC PR    = 0.529014
   CLL	      = -0.669447
   Precision = 0.759036 at threshold = 0.5
   Recall    = 0.043121
   F1        = 0.081606


Total scoring time: 24.812 seconds
Parameter learned model CLL: -0.669447


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,true': 'haswordtitle(L, M), haswordvenue(B, M)', 'false,true,true': 'haswordauthor(N, M)'}, {'true,true': [0.5, 1, 1], 'true,false,true,true': [2.494, 8, 28], 'true,false,true,false': [1.477, 8, 3], 'true,false,false,true': [2.11e-08, 0, 3], 'true,false,false,false': [2.954, 12, 32], 'false,true,true,true': [1.984, 9, 7], 'false,true,true,false': [4.016, 54, 23], 'false,true,false': [0.395, 104, 25], 'false,false': [0.378, 96, 20]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,true': 'haswordtitle(L, M), haswordvenue(B, M)', 'false,true,true': 'haswordtitle(L, N), haswordauthor(P, N)'}, {'true,true': [0.5, 1, 1], 'true,false,true,true': [2.494, 8, 28], 'true,false,true,false': [1.477, 8, 3], 'true,false,false,true': [0.0, 0, 3], 'true,false,false,false': [2.954, 12, 32], 'false,true,true,true': [3.033, 42, 12], 'false,true,true,false': [3.113, 21, 18], 'false,true,false': [0.395, 104, 25], 'false,false': [0.378, 96, 20]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,true,true': 'haswordauthor(L, K)', 'false,true,false': 'title(M, J), venue(M, B)'}, {'true,true': [0.5, 1, 1], 'true,false,true': [0.111, 0, 6], 'true,false,false,true': [2.989, 16, 27], 'true,false,false,false': [2.958, 12, 33], 'false,true,true,true': [1.984, 9, 7], 'false,true,true,false': [3.96, 54, 23], 'false,true,false,true': [4.472, 100, 25], 'false,true,false,false': [0.0, 4, 0], 'false,false': [0.378, 96, 20]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,true': 'haswordtitle(L, M), haswordauthor(N, M)', 'false,true,true': 'haswordauthor(N, K)'}, {'true,true': [0.5, 1, 1], 'true,false,true,true': [2.472, 8, 28], 'true,false,true,false': [1.477, 8, 3], 'true,false,false,true': [2.282, 7, 22], 'true,false,false,false': [1.882, 5, 13], 'false,true,true,true': [2.155, 16, 7], 'false,true,true,false': [5.524, 140, 40], 'false,true,false': [0.49, 11, 8], 'false,false': [0.378, 96, 20]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,true': 'haswordtitle(L, M), haswordauthor(N, M)', 'false,true,true': 'haswordvenue(B, M)'}, {'true,true': [0.5, 1, 1], 'true,false,true,true': [2.472, 8, 28], 'true,false,true,false': [1.477, 8, 3], 'true,false,false,true': [2.283, 7, 22], 'true,false,false,false': [1.882, 5, 13], 'false,true,true,true': [2.165, 12, 8], 'false,true,true,false': [5.007, 130, 32], 'false,true,false': [0.499, 11, 10], 'false,false': [0.388, 110, 25]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordauthor(L, K)', 'false,true,true': 'haswordvenue(A, K)', 'false,false': 'haswordvenue(B, M), haswordauthor(N, M)'}, {'true,true': [0.5, 1, 1], 'true,false,true': [0.163, 0, 6], 'true,false,false,true': [3.069, 17, 30], 'true,false,false,false': [2.754, 11, 30], 'false,true,true,true': [2.023, 11, 7], 'false,true,true,false': [5.054, 131, 33], 'false,true,false': [0.499, 11, 10], 'false,false,true': [0.242, 15, 1], 'false,false,false': [0.401, 95, 24]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,true': 'haswordtitle(L, M), haswordauthor(N, M)', 'false,true,true': 'haswordvenue(B, M)'}, {'true,true': [0.5, 1, 1], 'true,false,true,true': [2.46, 8, 28], 'true,false,true,false': [1.478, 8, 3], 'true,false,false,true': [0.028, 0, 3], 'true,false,false,false': [2.953, 12, 32], 'false,true,true,true': [1.958, 9, 7], 'false,true,true,false': [5.495, 147, 40], 'false,true,false': [0.49, 11, 8], 'false,false': [0.378, 96, 20]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordauthor(G, E)', 'true,false,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordauthor(M, L)', 'false,true,true': 'title(N, K), venue(N, A)'}, {'true,true': [0.5, 1, 1], 'true,false,true,true': [0.007, 0, 4], 'true,false,true,false': [2.861, 16, 27], 'true,false,false,true': [0.024, 0, 3], 'true,false,false,false': [2.953, 12, 32], 'false,true,true,true': [1.003, 19, 1], 'false,true,true,false': [5.299, 123, 39], 'false,true,false': [0.499, 11, 10], 'false,false': [0.387, 110, 25]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordauthor(L, K)', 'false,true,true': 'title(M, J), venue(M, B)', 'false,false': 'haswordvenue(B, N), haswordtitle(P, N)'}, {'true,true': [0.5, 1, 1], 'true,false,true': [0.161, 0, 6], 'true,false,false,true': [0.006, 0, 4], 'true,false,false,false': [4.094, 28, 56], 'false,true,true,true': [0.986, 17, 1], 'false,true,true,false': [5.699, 139, 46], 'false,true,false': [0.489, 11, 8], 'false,false,true': [0.385, 90, 20], 'false,false,false': [0.017, 6, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordauthor(L, K)', 'false,true,true': 'haswordvenue(B, K)', 'false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true': [0.5, 1, 1], 'true,false,true': [0.079, 0, 6], 'true,false,false,true': [0.086, 0, 4], 'true,false,false,false': [4.094, 28, 56], 'false,true,true,true': [1.955, 9, 7], 'false,true,true,false': [5.458, 147, 40], 'false,true,false': [0.489, 11, 8], 'false,false,true': [0.385, 90, 20], 'false,false,false': [0.015, 6, 0]}]]
[{'': [0.24996942142793585, 0.17265676972094876], 'true': [0.24983781145415423, 0.20914440923494715], 'true,false': [0.22453598913535694, 0.1901312811226817], 'true,false,true': [0.17283950617284086, 0.1983471074380164], 'true,false,false': [1.4802973661668753e-16, 0.19834710743801817], 'false': [0.18636880123366692, 0.14268727705112957], 'false,true': [0.21852237252861736, 0.15624061054023294], 'false,true,true': [0.24609375000000003, 0.2094788328554572]}, {'': [0.24923998515162996, 0.1714854180191686], 'true': [0.24983781145411613, 0.20125472838159586], 'true,false': [0.21129060326846216, 0.18860762206755793], 'true,false,true': [0.1728395061728384, 0.19834710743801673], 'true,false,false': [0.0, 0.19834710743801576], 'false': [0.18506191762012583, 0.14268727705112938], 'false,true': [0.21779729800601344, 0.15624061054023106], 'false,true,true': [0.17040241703275388, 0.24852071005917173]}, {'': [0.24851929233305575, 0.16950198287419657], 'true': [0.24983781145410416, 0.19359974544532], 'true,false': [0.0020399889911794458, 0.20250254998242348], 'true,false,false': [0.20773268636196007, 0.19447037872782108], 'false': [0.18244913583299938, 0.14268727705113002], 'false,true': [0.21364887480786343, 0.1562406105402317], 'false,true,true': [0.2460937499999999, 0.20366513321518054], 'false,true,false': [0.15999999999999973, 0.0]}, {'': [0.24810653585490486, 0.16842163199658333], 'true': [0.24983781145411219, 0.1897644134469957], 'true,false': [0.192302286946152, 0.18651244927825733], 'true,false,true': [0.16974963804032972, 0.1983471074380165], 'true,false,false': [0.17962562595073445, 0.1968139743773595], 'false': [0.18112281778712172, 0.14268727705112969], 'false,true': [0.17378116822534914, 0.24016486299591483], 'false,true,true': [0.20200577422850954, 0.16951053127461707]}, {'': [0.24782842805448668, 0.16767773297564875], 'true': [0.24983781145411538, 0.1859841505938917], 'true,false': [0.18514621930729944, 0.18643045941295824], 'true,false,false': [0.17967258795005026, 0.19687140190853009], 'true,false,true': [0.1697580851033836, 0.19834710743801665], 'false': [0.17839266385599473, 0.1506253130943211], 'false,true': [0.1658646212225736, 0.24943310657596363], 'false,true,true': [0.23442795227137275, 0.15474508739237952]}, {'': [0.24769598813638777, 0.16625660627425035], 'true': [0.24983781145413517, 0.18399427696194198], 'true,false': [0.004436531365031378, 0.19352908438810773], 'true,false,false': [0.2004089601690979, 0.18499668947427367], 'false': [0.1762462181036779, 0.1506219533988344], 'false,true': [0.16499820521031347, 0.24943310657596351], 'false,true,true': [0.22742384045120145, 0.1557580678136033], 'false,false': [0.0584887951947016, 0.1607258906383313]}, {'': [0.247627761657607, 0.1649368771496301], 'true': [0.2498378114541205, 0.1827495944500682], 'true,false': [0.17916217395207717, 0.1861302732150631], 'true,false,false': [0.0002584282524647115, 0.1982462977186568], 'true,false,true': [0.16809252029548705, 0.19869139032434757], 'false': [0.17638085102881307, 0.14257237320413793], 'false,true': [0.1690237829976285, 0.23975654054803267], 'false,true,true': [0.23950863667899744, 0.16147881614047938]}, {'': [0.24758694670664602, 0.1641851190698537], 'true': [0.24983781145412043, 0.181956516135093], 'true,false': [0.17772361382068222, 0.18606916348991723], 'true,false,false': [0.0001989876986551962, 0.19824888863151216], 'true,false,true': [1.27057675277098e-05, 0.1903084312909994], 'false': [0.1733487722754901, 0.15014607053084436], 'false,true': [0.162752104469757, 0.24943310657596351], 'false,true,true': [0.050285624564154606, 0.1733448143842061]}, {'': [0.247557938927597, 0.16324003962702632], 'true': [0.24983781145413808, 0.181297255198396], 'true,false': [0.004310661633699808, 0.19174194053766994], 'true,false,false': [9.633510060336192e-06, 0.19950571268037137], 'false': [0.17400509373146025, 0.14239316881808442], 'false,true': [0.1670478544696037, 0.23925024813386275], 'false,true,true': [0.05398480108411205, 0.1755741982156947], 'false,false': [0.14851603828155227, 4.620323386623123e-05]}, {'': [0.2475270464428957, 0.16242373477613245], 'true': [0.24983781145411932, 0.1804880439869865], 'true,false': [0.0010308045164459285, 0.1918509670036599], 'true,false,false': [0.001853435199067624, 0.19948880532095584], 'false': [0.173007910954927, 0.1420142470751063], 'false,true': [0.16631338928844763, 0.23903223700566553], 'false,true,true': [0.23898917448714294, 0.15929406396631424], 'false,false': [0.14851397339138409, 3.67281362680961e-05]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
0;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
1;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,false;haswordvenue(B, E), haswordauthor(F, E).;true;true
2;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
2;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
2;false,true,false;title(M, J), venue(M, B).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
6;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
7;true,false,true;haswordauthor(G, E).;true;true
7;true,false,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,false;haswordvenue(A, E), haswordauthor(F, E).;true;true
8;true,false,false;haswordvenue(B, G), haswordauthor(H, G).;true;true
8;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
8;false,false;haswordvenue(B, N), haswordtitle(P, N).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,false;haswordvenue(B, E), haswordauthor(F, E).;true;true
9;true,false,false;haswordvenue(A, G), haswordauthor(H, G).;true;true
9;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
9;false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3454136084106922;  // std dev = 0.500, 2,709.000 (wgt'ed) examples reached here.  /* #neg=1,389 #pos=1,320 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.4860559118436974;  // std dev = 3.170, 43.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=27 */
%   | | | else return 0.5914822684328447;  // std dev = 2.966, 45.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=33 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then if ( haswordauthor(L, K) )
%   | | | then return 0.29564893509951234;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | | | else return 0.1568502338008104;  // std dev = 4.016, 77.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=23 */
%   | | else if ( haswordauthor(M, I) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.05976183832531821;  // std dev = 4.468, 124.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=25 */
%   | else return 0.030562728202960524;  // std dev = 0.378, 116.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.29796795404605414;  // std dev = 0.500, 2,709.000 (wgt'ed) examples reached here.  /* #neg=1,389 #pos=1,320 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.5583169534684174;  // std dev = 2.473, 36.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=28 */
%   | | | else return 0.060899668852873366;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.5269137060158716;  // std dev = 2.300, 29.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=22 */
%   | | | else return 0.4894497313494943;  // std dev = 1.894, 18.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then if ( haswordauthor(N, M) )
%   | | | then return 0.2557225255975429;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | | | else return 0.13666436980334173;  // std dev = 4.016, 77.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=23 */
%   | | else return 0.04543971884549097;  // std dev = 0.395, 129.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=25 */
%   | else return 0.026801469463011766;  // std dev = 0.378, 116.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=20 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24798239774156317;  // std dev = 0.500, 2,709.000 (wgt'ed) examples reached here.  /* #neg=1,389 #pos=1,320 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.44866154304129435;  // std dev = 2.469, 36.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=28 */
%   | | | else return 0.050553692520536056;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.625859265899605;  // std dev = 0.047, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.39457813894803234;  // std dev = 2.953, 44.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=32 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then if ( haswordvenue(B, M) )
%   | | | then return 0.214562364478699;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | | | else return 0.051114072412249474;  // std dev = 5.595, 187.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=40 */
%   | | else return 0.2409773586546178;  // std dev = 0.493, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
%   | else return 0.023435345074299042;  // std dev = 0.378, 116.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=20 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.19998564655077272;  // std dev = 0.500, 2,709.000 (wgt'ed) examples reached here.  /* #neg=1,389 #pos=1,320 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.3436532542619011;  // std dev = 2.467, 36.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=28 */
%   | | | else return 0.04169484629754156;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.3236423825212793;  // std dev = 2.289, 29.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=22 */
%   | | | else return 0.295769510138152;  // std dev = 1.886, 18.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then if ( author(P, N), venue(P, A) )
%   | | | then return 0.07025605270753334;  // std dev = 5.689, 178.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=44 */
%   | | | else return -0.058698748714125004;  // std dev = 1.661, 25.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=3 */
%   | | else return 0.2026366693379893;  // std dev = 0.492, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
%   | else return 0.020439614626026212;  // std dev = 0.378, 116.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( haswordauthor(E, C) )
%   | | then return 0.6701028775004866;  // std dev = 2.98e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.1560392209498149;  // std dev = 0.500, 2,702.000 (wgt'ed) examples reached here.  /* #neg=1,389 #pos=1,313 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, H), haswordauthor(I, H) )
%   | | | then return 0.258426381071604;  // std dev = 2.468, 36.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=28 */
%   | | | else return 0.03420457312269789;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.2433014666589359;  // std dev = 2.289, 29.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=22 */
%   | | | else return 0.22260290092306245;  // std dev = 1.886, 18.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then if ( haswordtitle(M, N), haswordauthor(P, N) )
%   | | then return 0.03600625265696624;  // std dev = 0.407, 182.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=40 */
%   | | else return 0.27600175508158553;  // std dev = 0.499, 21.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=10 */
%   | else return 0.01678665711161655;  // std dev = 0.388, 135.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=25 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.12168259375972837;  // std dev = 0.500, 2,709.000 (wgt'ed) examples reached here.  /* #neg=1,389 #pos=1,320 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.38392925530135097;  // std dev = 0.114, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.33912250704414226;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.14267244515125474;  // std dev = 4.106, 84.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=56 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), title(M, J) )
%   | | | then return 0.04046481546186186;  // std dev = 5.073, 154.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=34 */
%   | | | else return -0.0235897945950192;  // std dev = 2.055, 28.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=6 */
%   | | else return 0.22815428271024185;  // std dev = 0.499, 21.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=10 */
%   | else if ( haswordvenue(B, N), haswordauthor(P, N) )
%   | | then return -0.10604731972484728;  // std dev = 0.241, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | else return 0.030621984737541186;  // std dev = 0.401, 119.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=24 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09303223371525621;  // std dev = 0.500, 2,709.000 (wgt'ed) examples reached here.  /* #neg=1,389 #pos=1,320 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.2986879706951094;  // std dev = 0.100, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.09875781681889899;  // std dev = 3.059, 47.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=30 */
%   | | | else return 0.13619300461005013;  // std dev = 2.748, 41.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=30 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordvenue(B, K) )
%   | | | then return 0.15968629082857547;  // std dev = 1.975, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | | | else return 0.020858366221825547;  // std dev = 5.514, 187.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=40 */
%   | | else return 0.15157735258756766;  // std dev = 0.492, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.01708580529868605;  // std dev = 0.386, 110.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=20 */
%   | | else return -0.15799114360435948;  // std dev = 0.016, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07061436724659229;  // std dev = 0.500, 2,709.000 (wgt'ed) examples reached here.  /* #neg=1,389 #pos=1,320 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.24048321997028643;  // std dev = 0.087, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.24532269918026794;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.08194706430870065;  // std dev = 4.102, 84.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=56 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordvenue(B, K) )
%   | | | then return 0.12654777534817427;  // std dev = 1.974, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | | | else return 0.01762017550063331;  // std dev = 5.513, 187.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=40 */
%   | | else return 0.12073285956604399;  // std dev = 0.492, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.014721409816370162;  // std dev = 0.386, 110.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=20 */
%   | | else return -0.1380960542796539;  // std dev = 0.014, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05335992877193013;  // std dev = 0.500, 2,709.000 (wgt'ed) examples reached here.  /* #neg=1,389 #pos=1,320 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.18855914781729052;  // std dev = 0.050, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.05231935973321682;  // std dev = 2.856, 43.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=27 */
%   | | | else return 0.08756782870952991;  // std dev = 2.955, 45.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=33 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordauthor(K, I) )
%   | | then if ( author(L, K), title(L, J) )
%   | | | then return 0.052476908120123775;  // std dev = 0.702, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.09816613433463092;  // std dev = 1.961, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
%   | | else if ( title(M, J), venue(M, A) )
%   | | | then return 0.03241392341121204;  // std dev = 5.391, 166.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=40 */
%   | | | else return -0.039285156683054476;  // std dev = 2.329, 33.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=8 */
%   | else return 0.005672946987133761;  // std dev = 0.377, 116.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=20 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.040212048437284244;  // std dev = 0.500, 2,709.000 (wgt'ed) examples reached here.  /* #neg=1,389 #pos=1,320 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.16145105208235055;  // std dev = 0.044, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.20917108595729791;  // std dev = 0.035, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.047325583161437146;  // std dev = 4.099, 84.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=56 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordvenue(B, K) )
%   | | | then return 0.0906523029187715;  // std dev = 2.142, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
%   | | | else return -4.901171792879403E-4;  // std dev = 4.978, 162.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=32 */
%   | | else return 0.16831420824054177;  // std dev = 0.499, 21.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=10 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return -0.16187199110539624;  // std dev = 0.057, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.013956715892199842;  // std dev = 0.396, 127.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=25 */


Results
   AUC ROC   = 0.557789
   AUC PR    = 0.240955
   CLL	      = -0.607181
   Precision = 0.473684 at threshold = 0.5
   Recall    = 0.030981
   F1        = 0.058158


Total learning time: 1997.4073917865753 seconds
Total inference time: 3.647 seconds
AUC ROC: 0.557789


Results scoring model
   AUC ROC   = 0.569579
   AUC PR    = 0.532984
   CLL	      = -0.669243
   Precision = 0.777778 at threshold = 0.5
   Recall    = 0.047912
   F1        = 0.090264


Total scoring time: 13.207 seconds
Refined model CLL: -0.669243


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.557789
   AUC PR    = 0.240955
   CLL	      = -0.607181
   Precision = 0.473684 at threshold = 0.5
   Recall    = 0.030981
   F1        = 0.058158


Total learning time: 4014.808722919464 seconds
Total inference time: 3.647 seconds
AUC ROC: 0.557789
Total revision time: 4014.808722919464
Best scored revision CLL: -0.669243


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 15:43:06
{'AUC ROC': 0.557789, 'AUC PR': 0.240955, 'CLL': -0.607181, 'Precision': [0.473684, 0.5], 'Recall': 0.030981, 'F1': 0.058158, 'Learning time': 4014.808722919464, 'Inference time': 3.647, 'parameter_0.6': {'AUC ROC': 0.557452, 'AUC PR': 0.240891, 'CLL': -0.607189, 'Precision': [0.473684, 0.5], 'Recall': 0.030981, 'F1': 0.058158, 'Learning time': 1979.3823311328888, 'Inference time': 3.788}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3454136084106922;  // std dev = 0.500, 2,709.000 (wgt'ed) examples reached here.  /* #neg=1,389 #pos=1,320 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.4860559118436974;  // std dev = 3.170, 43.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=27 */
%   | | | else return 0.5914822684328447;  // std dev = 2.966, 45.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=33 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then if ( title(L, J), venue(L, A) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.19522758678490423;  // std dev = 4.460, 89.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=30 */
%   | | else if ( title(M, J), venue(M, B) )
%   | | | then return 0.05814893509951176;  // std dev = 4.472, 125.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=25 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.030562728202960524;  // std dev = 0.378, 116.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=20 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.29796795404605414;  // std dev = 0.500, 2,709.000 (wgt'ed) examples reached here.  /* #neg=1,389 #pos=1,320 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.5583169534684174;  // std dev = 2.473, 36.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=28 */
%   | | | else return 0.060899668852873366;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.73632779935789;  // std dev = 0.041, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.49730930092448883;  // std dev = 2.954, 44.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=32 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then if ( haswordauthor(N, M) )
%   | | | then return 0.27018433921405627;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | | | else return 0.1335607559547079;  // std dev = 4.005, 77.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=23 */
%   | | else return 0.04545329852775814;  // std dev = 0.395, 129.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=25 */
%   | else return 0.026801469463011766;  // std dev = 0.378, 116.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=20 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24798239774156317;  // std dev = 0.500, 2,709.000 (wgt'ed) examples reached here.  /* #neg=1,389 #pos=1,320 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.6265856906486296;  // std dev = 0.142, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.3301911198297385;  // std dev = 3.181, 47.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=30 */
%   | | | else return 0.40627098112748394;  // std dev = 2.801, 41.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=30 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordauthor(L, I) )
%   | | | then return 0.12474862570889743;  // std dev = 2.166, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
%   | | | else return 0.056681498378043114;  // std dev = 5.554, 180.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=40 */
%   | | else return 0.2372542083369596;  // std dev = 0.491, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.03283973378903257;  // std dev = 0.386, 110.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=20 */
%   | | else return -0.14897844802914909;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.19998564655077272;  // std dev = 0.500, 2,709.000 (wgt'ed) examples reached here.  /* #neg=1,389 #pos=1,320 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.46797038771376204;  // std dev = 0.126, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.24666801907764316;  // std dev = 3.014, 43.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=27 */
%   | | | else return 0.31752688259480544;  // std dev = 2.961, 45.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=33 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then if ( haswordauthor(L, K) )
%   | | | then return 0.2181153837639071;  // std dev = 1.978, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | | | else return 0.09638082101700182;  // std dev = 3.985, 77.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=23 */
%   | | else if ( title(M, J), venue(M, B) )
%   | | | then return 0.037268860332146485;  // std dev = 4.473, 125.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=25 */
%   | | | else return -0.14690914355666132;  // std dev = 0.016, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.02036826144705154;  // std dev = 0.377, 116.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1573675508117034;  // std dev = 0.500, 2,709.000 (wgt'ed) examples reached here.  /* #neg=1,389 #pos=1,320 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.3964436416068579;  // std dev = 0.197, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.3887650245871569;  // std dev = 0.018, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.20291293385979944;  // std dev = 4.198, 84.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=56 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordauthor(L, I) )
%   | | | then return 0.16162805935028043;  // std dev = 2.164, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
%   | | | else return 0.019167525752831604;  // std dev = 5.024, 162.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=32 */
%   | | else return 0.26506411597814317;  // std dev = 0.499, 21.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=10 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return -0.1570979045624684;  // std dev = 0.061, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.03113780831055301;  // std dev = 0.397, 127.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=25 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.12169784232642178;  // std dev = 0.500, 2,709.000 (wgt'ed) examples reached here.  /* #neg=1,389 #pos=1,320 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.22927407736381117;  // std dev = 2.422, 36.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=28 */
%   | | | else return -0.11276429298912033;  // std dev = 1.481, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.20940115233195564;  // std dev = 2.279, 29.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=22 */
%   | | | else return 0.1557923655624212;  // std dev = 1.880, 18.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then if ( haswordauthor(N, K) )
%   | | | then return 0.09072577335726653;  // std dev = 2.106, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
%   | | | else return 0.02747457871695785;  // std dev = 5.506, 180.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=40 */
%   | | else return 0.1800816241043862;  // std dev = 0.490, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
%   | else return 0.01462069263745826;  // std dev = 0.377, 116.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=20 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09303923924894807;  // std dev = 0.500, 2,709.000 (wgt'ed) examples reached here.  /* #neg=1,389 #pos=1,320 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.2658813754349664;  // std dev = 0.149, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.09818239933982773;  // std dev = 3.091, 47.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=30 */
%   | | | else return 0.1425975351207531;  // std dev = 2.770, 41.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=30 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( title(M, J), venue(M, A) )
%   | | | then return -0.13509602619770594;  // std dev = 1.007, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | | | else return 0.04109451640471949;  // std dev = 5.324, 162.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=39 */
%   | | else return 0.21225451916665503;  // std dev = 0.499, 21.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=10 */
%   | else if ( haswordvenue(A, N), haswordauthor(P, N) )
%   | | then return -0.14545416258707788;  // std dev = 0.059, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.022779722118441384;  // std dev = 0.397, 127.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=25 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07061587701067289;  // std dev = 0.500, 2,709.000 (wgt'ed) examples reached here.  /* #neg=1,389 #pos=1,320 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.21808898716674;  // std dev = 0.129, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.070232947712693;  // std dev = 2.912, 44.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=28 */
%   | | | else return 0.11124437865628027;  // std dev = 2.957, 44.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=32 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordauthor(L, I) )
%   | | | then return 0.07300526097894325;  // std dev = 2.088, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
%   | | | else return 0.016415734642395513;  // std dev = 5.468, 180.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=40 */
%   | | else return 0.13762768138579295;  // std dev = 0.489, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.01677907367594188;  // std dev = 0.385, 110.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=20 */
%   | | else return -0.13518093191202324;  // std dev = 0.035, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05335809914250307;  // std dev = 0.500, 2,709.000 (wgt'ed) examples reached here.  /* #neg=1,389 #pos=1,320 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.12368943505779272;  // std dev = 2.417, 36.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=28 */
%   | | | else return -0.1270110065755209;  // std dev = 1.483, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.10763976409057491;  // std dev = 2.278, 29.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=22 */
%   | | | else return 0.058539902677435016;  // std dev = 1.880, 18.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then if ( haswordvenue(A, M) )
%   | | | then return 0.11563024507873809;  // std dev = 2.021, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | | else return 3.850095979622573E-4;  // std dev = 5.027, 164.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=33 */
%   | | else return 0.16551009680940426;  // std dev = 0.499, 21.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=10 */
%   | else return 0.00872083198885123;  // std dev = 0.386, 135.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=25 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04020840647387006;  // std dev = 0.500, 2,709.000 (wgt'ed) examples reached here.  /* #neg=1,389 #pos=1,320 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.09669519206066562;  // std dev = 2.419, 36.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=28 */
%   | | | else return -0.09696669678105184;  // std dev = 1.483, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.08390352684870236;  // std dev = 2.279, 29.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=22 */
%   | | | else return 0.04574541466478897;  // std dev = 1.880, 18.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then if ( haswordvenue(B, M) )
%   | | | then return 0.10951621409535299;  // std dev = 2.134, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
%   | | | else return -0.002951573498868435;  // std dev = 4.970, 162.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=32 */
%   | | else return 0.12900418210255174;  // std dev = 0.499, 21.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=10 */
%   | else return 0.00745238696060469;  // std dev = 0.386, 135.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=25 */


Results
   AUC ROC   = 0.557591
   AUC PR    = 0.240687
   CLL	      = -0.607815
   Precision = 0.473684 at threshold = 0.5
   Recall    = 0.030981
   F1        = 0.058158


Total learning time: 2089.0534031391144 seconds
Total inference time: 3.666 seconds
AUC ROC: 0.557591


Dataset: 3_imdb_cora, Fold: 3, Type: Scratch (RDN-B), Time: 16:17:59
{'AUC ROC': 0.557591, 'AUC PR': 0.240687, 'CLL': -0.607815, 'Precision': [0.473684, 0.5], 'Recall': 0.030981, 'F1': 0.058158, 'Learning time': 2089.0534031391144, 'Inference time': 3.666}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.34399799170328077;  // std dev = 0.500, 3,604.000 (wgt'ed) examples reached here.  /* #neg=1,853 #pos=1,751 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.35814893509951234;  // std dev = 2.828, 32.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=16 */
%   | | | else return 0.5486251255757019;  // std dev = 2.996, 42.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=29 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.5949910403626694;  // std dev = 2.714, 38.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=28 */
%   | | | else return 0.6273797043302811;  // std dev = 2.148, 26.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then if ( haswordauthor(M, L) )
%   | | | then return 0.3581489350995123;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
%   | | | else return 0.22089403313872663;  // std dev = 4.856, 102.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=37 */
%   | | else return 0.050695518950443115;  // std dev = 0.394, 161.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=31 */
%   | else return 0.017658137553499563;  // std dev = 0.366, 163.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=26 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2967694872458112;  // std dev = 0.500, 3,604.000 (wgt'ed) examples reached here.  /* #neg=1,853 #pos=1,751 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.3087411357856347;  // std dev = 2.828, 32.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=16 */
%   | | | else return 0.4680139582552811;  // std dev = 2.996, 42.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=29 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.7679655680759863;  // std dev = 0.005, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.500332846251093;  // std dev = 3.424, 60.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=44 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then if ( haswordauthor(M, L) )
%   | | | then return 0.3087411357856348;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
%   | | | else return 0.1918229618547076;  // std dev = 4.856, 102.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=37 */
%   | | else return 0.04441163907694578;  // std dev = 0.394, 161.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=31 */
%   | else return 0.015495000118283447;  // std dev = 0.366, 163.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=26 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24704228855253318;  // std dev = 0.500, 3,604.000 (wgt'ed) examples reached here.  /* #neg=1,853 #pos=1,751 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.5472636912927326;  // std dev = 0.305, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.3083875778907972;  // std dev = 3.887, 65.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=39 */
%   | | | else return 0.40010061286072485;  // std dev = 3.603, 65.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=47 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then if ( haswordauthor(L, I) )
%   | | | then return 0.2548459888278729;  // std dev = 2.422, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | | | else return 0.1594701380225143;  // std dev = 4.763, 98.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=36 */
%   | | else if ( title(M, J), venue(M, B) )
%   | | | then return 0.04617268837037408;  // std dev = 4.980, 155.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=31 */
%   | | | else return -0.15382731162962548;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.013574311651699226;  // std dev = 0.366, 163.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=26 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1992971994998462;  // std dev = 0.500, 3,604.000 (wgt'ed) examples reached here.  /* #neg=1,853 #pos=1,751 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.2757144309097981;  // std dev = 3.338, 52.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=34 */
%   | | | else return 0.16880280620328064;  // std dev = 2.392, 22.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.32474381297359417;  // std dev = 2.686, 38.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=28 */
%   | | | else return 0.33289039763576034;  // std dev = 2.140, 26.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordauthor(M, J) )
%   | | | then return 0.16151536215156842;  // std dev = 2.636, 31.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=12 */
%   | | | else return 0.04748912092826096;  // std dev = 6.256, 224.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=52 */
%   | | else return 0.27671097975258185;  // std dev = 0.497, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | else return 0.01187429346788761;  // std dev = 0.366, 163.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=26 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.15688915552232877;  // std dev = 0.500, 3,604.000 (wgt'ed) examples reached here.  /* #neg=1,853 #pos=1,751 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, C) )
%   | | | then return 0.4221180044399893;  // std dev = 0.084, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.33087751703814033;  // std dev = 1.201, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.16624227883945092;  // std dev = 3.903, 66.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=39 */
%   | | | else return 0.24245728674529204;  // std dev = 3.428, 62.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=46 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordvenue(B, L) )
%   | | | then return 0.21185338204758267;  // std dev = 2.217, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
%   | | | else return 0.03785558573151682;  // std dev = 6.388, 235.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=54 */
%   | | else return 0.22519929942310427;  // std dev = 0.497, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | else return 0.01037378549642124;  // std dev = 0.366, 163.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=26 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.12137646801737663;  // std dev = 0.500, 3,604.000 (wgt'ed) examples reached here.  /* #neg=1,853 #pos=1,751 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.2731953347167298;  // std dev = 0.382, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.1257549091390756;  // std dev = 3.902, 66.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=39 */
%   | | | else return 0.18228134248852032;  // std dev = 3.429, 62.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=46 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordvenue(A, K) )
%   | | | then return 0.16818958663384423;  // std dev = 2.402, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | | | else return 0.019244364410417623;  // std dev = 5.955, 222.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=48 */
%   | | else return 0.26139718319197747;  // std dev = 0.497, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.02073965287263354;  // std dev = 0.394, 161.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=31 */
%   | | else return -0.15045658548762939;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.4883897186769696;  // std dev = 0.255, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else if ( haswordtitle(E, C) )
%   | | then return 0.09110067069797011;  // std dev = 0.500, 3,590.000 (wgt'ed) examples reached here.  /* #neg=1,852 #pos=1,738 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.09197407881737611;  // std dev = 3.951, 70.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=43 */
%   | | | else return 0.14868156788726128;  // std dev = 3.577, 65.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=47 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | then if ( haswordauthor(K, H) )
%   | | | then return 0.1363894323361705;  // std dev = 2.386, 25.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=11 */
%   | | | else return 0.015316580873194844;  // std dev = 5.957, 221.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=48 */
%   | | else return 0.21082826985687173;  // std dev = 0.497, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.017769039180748646;  // std dev = 0.394, 161.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=31 */
%   | | else return -0.132218848863096;  // std dev = 1.05e-08, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07051344196576036;  // std dev = 0.499, 3,604.000 (wgt'ed) examples reached here.  /* #neg=1,853 #pos=1,751 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.19429394177433118;  // std dev = 0.294, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.05965372176482284;  // std dev = 3.852, 65.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=39 */
%   | | | else return 0.11299034578225366;  // std dev = 3.578, 65.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=47 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), title(M, J) )
%   | | | then return 0.03639457483487771;  // std dev = 5.952, 209.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=50 */
%   | | | else return -0.05563684746455109;  // std dev = 2.380, 37.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=9 */
%   | | else return 0.16574542446900997;  // std dev = 0.496, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | then return 0.015191844866440905;  // std dev = 0.394, 161.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=31 */
%   | | else return -0.11777200706284305;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordauthor(G, C) )
%   | | | then return 0.46897098746269933;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1928386846644197;  // std dev = 3.583, 56.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=36 */
%   | | else if ( haswordauthor(H, C) )
%   | | | then return 0.253845037102617;  // std dev = 0.937, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.29883415181827594;  // std dev = 1.862, 30.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
%   | else if ( haswordtitle(I, C) )
%   | | then return 0.052879510006488765;  // std dev = 0.500, 3,511.000 (wgt'ed) examples reached here.  /* #neg=1,808 #pos=1,703 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.04067698406833224;  // std dev = 3.890, 66.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=39 */
%   | | | else return 0.0918225893154657;  // std dev = 3.428, 62.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=46 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.03125337674489001;  // std dev = 0.428, 283.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=78 */
%   | else return 0.0026120622495189832;  // std dev = 0.365, 163.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=26 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04020250072898205;  // std dev = 0.499, 3,604.000 (wgt'ed) examples reached here.  /* #neg=1,853 #pos=1,751 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.1373545357075881;  // std dev = 0.294, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.0262598235871132;  // std dev = 3.847, 65.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=39 */
%   | | | else return 0.07209894333323076;  // std dev = 3.574, 65.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=47 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordvenue(A, K) )
%   | | | then return 0.114212944585795;  // std dev = 2.385, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | | | else return 0.0060027130064829685;  // std dev = 5.941, 222.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=48 */
%   | | else return 0.12087674316149052;  // std dev = 0.496, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.008314937885260408;  // std dev = 0.394, 161.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=31 */
%   | | else return -0.10632327847681179;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */


Results
   AUC ROC   = 0.560109
   AUC PR    = 0.248563
   CLL	      = -0.603966
   Precision = 0.47619 at threshold = 0.5
   Recall    = 0.034423
   F1        = 0.064205


Total learning time: 2329.7212719917297 seconds
Total inference time: 3.725 seconds
AUC ROC: 0.560109


Results scoring model
   AUC ROC   = 0.572582
   AUC PR    = 0.535437
   CLL	      = -0.66965
   Precision = 0.748031 at threshold = 0.5
   Recall    = 0.048768
   F1        = 0.091566


Total scoring time: 14.552 seconds
Parameter learned model CLL: -0.66965


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)', 'false,true,true': 'haswordauthor(M, L)'}, {'true,true': [0.5, 1, 1], 'true,false,true,true': [2.828, 16, 16], 'true,false,true,false': [2.996, 13, 29], 'true,false,false,true': [2.714, 10, 28], 'true,false,false,false': [2.148, 6, 20], 'false,true,true,true': [2.236, 10, 10], 'false,true,true,false': [4.856, 65, 37], 'false,true,false': [0.394, 130, 31], 'false,false': [0.366, 137, 26]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(B, G)', 'true,false,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(B, L)', 'false,true,true': 'haswordauthor(M, L)'}, {'true,true': [0.5, 1, 1], 'true,false,true,true': [2.828, 16, 16], 'true,false,true,false': [2.996, 13, 29], 'true,false,false,true': [0.005, 0, 4], 'true,false,false,false': [3.424, 16, 44], 'false,true,true,true': [2.236, 10, 10], 'false,true,true,false': [4.856, 65, 37], 'false,true,false': [0.394, 130, 31], 'false,false': [0.366, 137, 26]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordvenue(B, K)', 'false,true,true': 'haswordauthor(L, I)', 'false,true,false': 'title(M, J), venue(M, B)'}, {'true,true': [0.5, 1, 1], 'true,false,true': [0.305, 1, 7], 'true,false,false,true': [3.887, 26, 39], 'true,false,false,false': [3.603, 18, 47], 'false,true,true,true': [2.422, 13, 11], 'false,true,true,false': [4.763, 62, 36], 'false,true,false,true': [4.98, 124, 31], 'false,true,false,false': [0.0, 6, 0], 'false,false': [0.366, 137, 26]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, A)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordauthor(M, L)', 'false,true,true': 'haswordauthor(M, J)'}, {'true,true': [0.5, 1, 1], 'true,false,true,true': [3.338, 18, 34], 'true,false,true,false': [2.392, 11, 11], 'true,false,false,true': [2.686, 10, 28], 'true,false,false,false': [2.14, 6, 20], 'false,true,true,true': [2.636, 19, 12], 'false,true,true,false': [6.256, 172, 52], 'false,true,false': [0.497, 14, 14], 'false,false': [0.366, 137, 26]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,true': 'haswordauthor(G, C)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordauthor(M, L)', 'false,true,true': 'haswordvenue(B, L)'}, {'true,true': [0.5, 1, 1], 'true,false,true,true': [0.084, 0, 3], 'true,false,true,false': [1.201, 2, 5], 'true,false,false,true': [3.903, 27, 39], 'true,false,false,false': [3.428, 16, 46], 'false,true,true,true': [2.217, 10, 10], 'false,true,true,false': [6.388, 181, 54], 'false,true,false': [0.497, 14, 14], 'false,false': [0.366, 137, 26]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordauthor(L, K)', 'false,true,true': 'haswordvenue(A, K)', 'false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.5, 1, 1], 'true,false,true': [0.382, 2, 8], 'true,false,false,true': [3.902, 27, 39], 'true,false,false,false': [3.429, 16, 46], 'false,true,true,true': [2.402, 13, 11], 'false,true,true,false': [5.955, 174, 48], 'false,true,false': [0.497, 14, 14], 'false,false,true': [0.394, 130, 31], 'false,false,false': [0.0, 11, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordauthor(D, C)', 'true,false': 'haswordtitle(E, C)', 'true,false,false': 'haswordvenue(B, F), haswordtitle(G, F)', 'false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false,true': 'haswordtitle(I, J), haswordauthor(K, J)', 'false,true,true': 'haswordauthor(K, H)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.255, 1, 16], 'true,false,true': [0.5, 1, 1], 'true,false,false,true': [3.951, 27, 43], 'true,false,false,false': [3.577, 18, 47], 'false,true,true,true': [2.386, 14, 11], 'false,true,true,false': [5.957, 173, 48], 'false,true,false': [0.497, 14, 14], 'false,false,true': [0.394, 130, 31], 'false,false,false': [1.05e-08, 11, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordauthor(L, K)', 'false,true,true': 'author(M, L), title(M, J)', 'false,false': 'haswordvenue(A, N), haswordtitle(P, N)'}, {'true,true': [0.499, 1, 1], 'true,false,true': [0.294, 1, 7], 'true,false,false,true': [3.852, 26, 39], 'true,false,false,false': [3.578, 18, 47], 'false,true,true,true': [5.952, 159, 50], 'false,true,true,false': [2.38, 28, 9], 'false,true,false': [0.496, 14, 14], 'false,false,true': [0.394, 130, 31], 'false,false,false': [5.27e-09, 11, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,true': 'haswordauthor(G, C)', 'true,true,false': 'haswordauthor(H, C)', 'true,false': 'haswordtitle(I, C)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true,true': [1.49e-08, 0, 8], 'true,true,true,false': [3.583, 20, 36], 'true,true,false,true': [0.937, 1, 8], 'true,true,false,false': [1.862, 26, 4], 'true,false,true': [0.5, 1, 1], 'true,false,false,true': [3.89, 27, 39], 'true,false,false,false': [3.428, 16, 46], 'false,true': [0.428, 205, 78], 'false,false': [0.365, 137, 26]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordauthor(L, K)', 'false,true,true': 'haswordvenue(A, K)', 'false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.499, 1, 1], 'true,false,true': [0.294, 1, 7], 'true,false,false,true': [3.847, 26, 39], 'true,false,false,false': [3.574, 18, 47], 'false,true,true,true': [2.385, 13, 11], 'false,true,true,false': [5.941, 174, 48], 'false,true,false': [0.496, 14, 14], 'false,false,true': [0.394, 130, 31], 'false,false,false': [7.45e-09, 11, 0]}]]
[{'': [0.24994793810614702, 0.1788091455689851], 'true': [0.24979975080095282, 0.21975425330813092], 'true,false': [0.23831263696128588, 0.18750000000000017], 'true,false,true': [0.24999999999999953, 0.21371882086167948], 'true,false,false': [0.19390581717451663, 0.17751479289940847], 'false': [0.19965288616414284, 0.1340660167864815], 'false,true': [0.23683149690943356, 0.15547239689826892], 'false,true,true': [0.25, 0.231161091887737]}, {'': [0.2494563557136888, 0.17638144936472172], 'true': [0.2497997508010436, 0.21673087463712573], 'true,false': [0.23563412370631612, 0.18741753640192588], 'true,false,true': [0.2500000000000001, 0.21371882086167787], 'true,false,false': [6.2995223391038024e-06, 0.19543491424860213], 'false': [0.19704584585782878, 0.1340660167864816], 'false,true': [0.23612302745347116, 0.1554723968982667], 'false,true,true': [0.2500000000000001, 0.23116109188773462]}, {'': [0.24893864449374511, 0.1742415522982983], 'true': [0.2497997508010459, 0.2129504410268747], 'true,false': [0.09324471226330211, 0.21815714657708185], 'true,false,false': [0.23242388254793145, 0.1996847702145351], 'false': [0.19472304223952094, 0.1340660167864815], 'false,true': [0.23544788378750034, 0.15547239689826775], 'false,true,true': [0.2444608030433454, 0.23145115243574957], 'false,true,false': [0.15999999999999995, 0.0]}, {'': [0.24860677579771412, 0.17241863009729388], 'true': [0.24979975080099942, 0.21071240687756662], 'true,false': [0.23030394822405542, 0.18426490388647437], 'true,false,true': [0.21432954146592442, 0.260029677926929], 'true,false,false': [0.18984054051447344, 0.17607649119485483], 'false': [0.19267747792898826, 0.13406601678648142], 'false,true': [0.18212226861163391, 0.24701423451030083], 'false,true,true': [0.22407632357214616, 0.17473549376588868]}, {'': [0.2484177449126761, 0.17072547733931823], 'true': [0.24979975080099381, 0.2091401280672342], 'true,false': [0.1467420321771568, 0.21227199832148375], 'true,false,false': [0.23080486562860372, 0.1895483370747004], 'false': [0.19059748826953746, 0.13406601678648072], 'false,true': [0.18146967785779236, 0.24654024954716788], 'false,true,true': [0.24573714109561964, 0.1736255784303363], 'true,false,true': [0.0023260152052442993, 0.20613716291700687]}, {'': [0.2483091599037452, 0.16922273065287555], 'true': [0.2497997508009651, 0.20780445338718004], 'true,false': [0.14625107234607312, 0.211568781722025], 'true,false,false': [0.23066545483831266, 0.1895925207567256], 'false': [0.18222566563171425, 0.14713746020865426], 'false,true': [0.169555734350314, 0.24702309358428126], 'false,true,true': [0.24044607894971168, 0.15972755436393796], 'false,false': [0.15531597160082306, -5.046468293750712e-18]}, {'': [0.24825804834102927, 0.16736650933077651], 'true': [0.06527711641263663, 0.24837974594297837], 'true,false': [0.24974790698392677, 0.2112316264774273], 'true,false,false': [0.22300449965319805, 0.19688572728636045], 'false': [0.17976039010812722, 0.14672788600575457], 'false,true': [0.16872234805198713, 0.24660247230274418], 'false,true,true': [0.22780303422625903, 0.16054931379632403], 'false,false': [0.15531405151006583, 1.0092936587501423e-17]}, {'': [0.2479323861018697, 0.16604151116434368], 'true': [0.2494985374504643, 0.20656183854453206], 'true,false': [0.08629341018426043, 0.21328715039936563], 'true,false,false': [0.22823244731395828, 0.19691945575398515], 'false': [0.17798869625931266, 0.1464379822707324], 'false,true': [0.16811973973599564, 0.24628562328507414], 'false,true,true': [0.1695011651438516, 0.1531206806869069], 'false,false': [0.15531240340290534, 2.523234146875356e-18]}, {'': [0.2479105310924765, 0.16517881808091042], 'true': [0.22989410912130534, 0.24840580252917713], 'true,false': [0.249776407646181, 0.2106580579991668], 'true,true': [0.20888803619796797, 0.165619052612823], 'true,false,false': [0.22924805046887084, 0.18951990169390442], 'true,true,true': [2.7755575615628914e-17, 0.229198053145164], 'true,true,false': [0.0975325408553135, 0.11555555555555541], 'false': [0.18330400689913837, 0.13318941191585038]}, {'': [0.24716130623437205, 0.16503633137249094], 'true': [0.2487400836989341, 0.20573887994179377], 'true,false': [0.08632170238173341, 0.21263691295480924], 'true,false,false': [0.22767225813609115, 0.19655095532397757], 'false': [0.1766187920209142, 0.1461623118128937], 'false,true': [0.16762366347195862, 0.24587743014162244], 'false,true,true': [0.23708869581653005, 0.15897154446810902], 'false,false': [0.15530808504984467, 5.046468293750712e-18]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
1;true,false,false;haswordvenue(B, H), haswordauthor(I, H).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
2;false,true;haswordtitle(J, K), haswordvenue(B, K).;true;true
2;false,true,false;title(M, J), venue(M, B).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,false;haswordvenue(A, E), haswordauthor(F, E).;true;true
4;true,false,true;haswordauthor(G, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false,false;haswordvenue(A, M), haswordtitle(N, M).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
7;false,false;haswordvenue(A, N), haswordtitle(P, N).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
8;true,true;haswordtitle(F, D).;true;true
8;true,true,true;haswordauthor(G, C).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
9;false,false;haswordvenue(A, M), haswordtitle(N, M).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.34399799170328077;  // std dev = 0.500, 3,604.000 (wgt'ed) examples reached here.  /* #neg=1,853 #pos=1,751 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.35814893509951234;  // std dev = 2.828, 32.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=16 */
%   | | | else return 0.5486251255757019;  // std dev = 2.996, 42.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=29 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5914822684328459;  // std dev = 3.425, 60.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=44 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then if ( haswordauthor(M, L) )
%   | | | then return 0.3581489350995123;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
%   | | | else return 0.22089403313872663;  // std dev = 4.856, 102.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=37 */
%   | | else return 0.050695518950443115;  // std dev = 0.394, 161.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=31 */
%   | else return 0.017658137553499563;  // std dev = 0.366, 163.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=26 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2967694872458112;  // std dev = 0.500, 3,604.000 (wgt'ed) examples reached here.  /* #neg=1,853 #pos=1,751 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.3087411357856347;  // std dev = 2.828, 32.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=16 */
%   | | | else return 0.4680139582552811;  // std dev = 2.996, 42.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=29 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5033699069850941;  // std dev = 3.425, 60.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=44 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then if ( haswordauthor(M, L) )
%   | | | then return 0.3087411357856348;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
%   | | | else return 0.1918229618547076;  // std dev = 4.856, 102.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=37 */
%   | | else return 0.04441163907694578;  // std dev = 0.394, 161.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=31 */
%   | else return 0.015495000118283447;  // std dev = 0.366, 163.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=26 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24704228855253318;  // std dev = 0.500, 3,604.000 (wgt'ed) examples reached here.  /* #neg=1,853 #pos=1,751 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.25641236875858675;  // std dev = 2.828, 32.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=16 */
%   | | | else return 0.37688020636174774;  // std dev = 2.996, 42.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=29 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.39717325147932403;  // std dev = 2.688, 38.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=28 */
%   | | | else return 0.4341757488302274;  // std dev = 2.139, 26.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then if ( haswordauthor(M, J) )
%   | | | then return 0.2548459888278729;  // std dev = 2.422, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | | | else return 0.1594701380225143;  // std dev = 4.763, 98.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=36 */
%   | | else return 0.038719272221305764;  // std dev = 0.394, 161.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=31 */
%   | else return 0.013574311651699226;  // std dev = 0.366, 163.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=26 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1992971994998462;  // std dev = 0.500, 3,604.000 (wgt'ed) examples reached here.  /* #neg=1,853 #pos=1,751 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.4418924428251967;  // std dev = 0.297, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.23464471619377195;  // std dev = 3.867, 65.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=39 */
%   | | | else return 0.3106621092226213;  // std dev = 3.602, 65.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=47 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return 0.0781815676611576;  // std dev = 6.497, 224.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=60 */
%   | | | else return -0.05915228779680305;  // std dev = 1.940, 31.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=4 */
%   | | else return 0.2758508829618292;  // std dev = 0.498, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | then return 0.023417722592847287;  // std dev = 0.377, 152.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=26 */
%   | | else return -0.14763490898610046;  // std dev = 1.49e-08, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.15688915552232877;  // std dev = 0.500, 3,604.000 (wgt'ed) examples reached here.  /* #neg=1,853 #pos=1,751 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.338246636914512;  // std dev = 0.296, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.1785944378671171;  // std dev = 4.022, 70.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=42 */
%   | | | else return 0.23988864552879866;  // std dev = 3.422, 60.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=44 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordvenue(B, K) )
%   | | | then return 0.21075711229635125;  // std dev = 2.215, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
%   | | | else return 0.038348420234323305;  // std dev = 6.389, 235.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=54 */
%   | | else return 0.22433579819024763;  // std dev = 0.497, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.020446481811907957;  // std dev = 0.377, 152.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=26 */
%   | | else return -0.13000580231322717;  // std dev = 1.05e-08, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.12137646801737663;  // std dev = 0.500, 3,604.000 (wgt'ed) examples reached here.  /* #neg=1,853 #pos=1,751 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.2868363680041296;  // std dev = 0.385, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.12321663657159407;  // std dev = 3.903, 66.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=39 */
%   | | | else return 0.1833174885821381;  // std dev = 3.424, 62.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=46 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then if ( haswordauthor(L, I) )
%   | | | then return 0.18492755033976901;  // std dev = 2.403, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | | | else return 0.0852452854834714;  // std dev = 4.675, 98.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=36 */
%   | | else if ( title(M, J), venue(M, B) )
%   | | | then return 0.027064519193774308;  // std dev = 4.982, 155.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=31 */
%   | | | else return -0.18238431617026088;  // std dev = 0.063, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.008782212426041335;  // std dev = 0.365, 163.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=26 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09282716462764937;  // std dev = 0.500, 3,604.000 (wgt'ed) examples reached here.  /* #neg=1,853 #pos=1,751 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.15058207108772728;  // std dev = 3.345, 56.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=39 */
%   | | | else return -0.10428155290123291;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.3439142524203471;  // std dev = 0.156, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.13821328649449197;  // std dev = 3.574, 63.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=45 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then if ( haswordvenue(A, M) )
%   | | | then return 0.1468271455843186;  // std dev = 2.401, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | | | else return 0.01096422341780218;  // std dev = 5.945, 222.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=48 */
%   | | else return 0.2409779555635657;  // std dev = 0.496, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | else return 0.007923718023318012;  // std dev = 0.383, 172.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=31 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordauthor(G, C) )
%   | | | then return 0.5846277575414368;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.2104152023070561;  // std dev = 3.571, 56.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=36 */
%   | | else if ( haswordauthor(H, C) )
%   | | | then return 0.3488565416163547;  // std dev = 0.962, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.2820389091252299;  // std dev = 1.862, 30.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
%   | else if ( haswordtitle(I, C) )
%   | | then return 0.06967475269949402;  // std dev = 0.500, 3,511.000 (wgt'ed) examples reached here.  /* #neg=1,808 #pos=1,703 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.06997000810521757;  // std dev = 3.883, 66.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=39 */
%   | | | else return 0.10574156264515258;  // std dev = 3.413, 62.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=46 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.0371699862528037;  // std dev = 0.423, 274.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=73 */
%   | else return 0.006792917457996156;  // std dev = 0.383, 172.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=31 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.053285518884935934;  // std dev = 0.499, 3,604.000 (wgt'ed) examples reached here.  /* #neg=1,853 #pos=1,751 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.08993455812558569;  // std dev = 3.340, 56.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=39 */
%   | | | else return -0.09882000851498793;  // std dev = 1.908, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.22396774668247926;  // std dev = 0.134, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.08536514288482645;  // std dev = 3.574, 63.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=45 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then if ( haswordauthor(N, K) )
%   | | | then return 0.07636588212560941;  // std dev = 2.586, 31.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=12 */
%   | | | else return 0.011886016990071841;  // std dev = 6.183, 224.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=52 */
%   | | else return 0.14959270944815256;  // std dev = 0.495, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | else return 0.001388923482745221;  // std dev = 0.365, 163.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=26 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordauthor(G, C) )
%   | | | then return 0.4265079587510162;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.14447693383162677;  // std dev = 3.561, 56.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=36 */
%   | | else return -0.11575163929366689;  // std dev = 0.392, 39.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=12 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.03953968636777742;  // std dev = 0.500, 3,511.000 (wgt'ed) examples reached here.  /* #neg=1,808 #pos=1,703 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return 0.12380077336296635;  // std dev = 0.824, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.048703837589148646;  // std dev = 5.091, 123.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=81 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then return 0.016018008654179117;  // std dev = 0.420, 255.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=64 */
%   | | else return 0.11494991836380529;  // std dev = 0.495, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | else return 0.0012041127197042643;  // std dev = 0.365, 163.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=26 */


Results
   AUC ROC   = 0.560062
   AUC PR    = 0.24859
   CLL	      = -0.602856
   Precision = 0.473684 at threshold = 0.5
   Recall    = 0.030981
   F1        = 0.058158


Total learning time: 1961.0440130233765 seconds
Total inference time: 3.756 seconds
AUC ROC: 0.560062


Results scoring model
   AUC ROC   = 0.573731
   AUC PR    = 0.536565
   CLL	      = -0.669459
   Precision = 0.697802 at threshold = 0.5
   Recall    = 0.065195
   F1        = 0.119249


Total scoring time: 16.788 seconds
Refined model CLL: -0.669459


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.560062
   AUC PR    = 0.24859
   CLL	      = -0.602856
   Precision = 0.473684 at threshold = 0.5
   Recall    = 0.030981
   F1        = 0.058158


Total learning time: 4322.105285015105 seconds
Total inference time: 3.756 seconds
AUC ROC: 0.560062
Total revision time: 4322.105285015105
Best scored revision CLL: -0.669459


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 17:30:14
{'AUC ROC': 0.560062, 'AUC PR': 0.24859, 'CLL': -0.602856, 'Precision': [0.473684, 0.5], 'Recall': 0.030981, 'F1': 0.058158, 'Learning time': 4322.105285015105, 'Inference time': 3.756, 'parameter_0.8': {'AUC ROC': 0.560109, 'AUC PR': 0.248563, 'CLL': -0.603966, 'Precision': [0.47619, 0.5], 'Recall': 0.034423, 'F1': 0.064205, 'Learning time': 2329.7212719917297, 'Inference time': 3.725}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.34399799170328077;  // std dev = 0.500, 3,604.000 (wgt'ed) examples reached here.  /* #neg=1,853 #pos=1,751 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.511995088945665;  // std dev = 3.431, 52.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=34 */
%   | | | else return 0.35814893509951234;  // std dev = 2.345, 22.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5914822684328459;  // std dev = 3.425, 60.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=44 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then if ( haswordtitle(K, M), haswordauthor(N, M) )
%   | | | then return 0.13756069980539468;  // std dev = 3.700, 68.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=19 */
%   | | | else return 0.3766674536180297;  // std dev = 3.672, 54.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=28 */
%   | | else return 0.050695518950443115;  // std dev = 0.394, 161.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=31 */
%   | else return 0.017658137553499563;  // std dev = 0.366, 163.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=26 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.2967694872458112;  // std dev = 0.500, 3,604.000 (wgt'ed) examples reached here.  /* #neg=1,853 #pos=1,751 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(B, G) )
%   | | | then return 0.2962752220139961;  // std dev = 2.838, 32.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=16 */
%   | | | else return 0.4778471883675875;  // std dev = 2.979, 42.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=29 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5033699069850941;  // std dev = 3.425, 60.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=44 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then if ( haswordauthor(M, L) )
%   | | | then return 0.3405651783839172;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
%   | | | else return 0.1849371176866488;  // std dev = 4.798, 102.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=37 */
%   | | else return 0.04441163907694578;  // std dev = 0.394, 161.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=31 */
%   | else return 0.015495000118283447;  // std dev = 0.366, 163.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=26 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.24704228855253318;  // std dev = 0.500, 3,604.000 (wgt'ed) examples reached here.  /* #neg=1,853 #pos=1,751 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.38840668068822976;  // std dev = 3.374, 56.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=39 */
%   | | | else return 0.05838889870026562;  // std dev = 1.839, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.6738387531105574;  // std dev = 0.139, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.39888857433255326;  // std dev = 3.561, 63.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=45 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then if ( haswordauthor(N, M) )
%   | | | then return 0.2894933425670575;  // std dev = 2.236, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
%   | | | else return 0.15634047194935344;  // std dev = 4.792, 102.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=37 */
%   | | else return 0.038719272221305764;  // std dev = 0.394, 161.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=31 */
%   | else return 0.013574311651699226;  // std dev = 0.366, 163.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=26 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1992971994998462;  // std dev = 0.500, 3,604.000 (wgt'ed) examples reached here.  /* #neg=1,853 #pos=1,751 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.301372278547619;  // std dev = 3.370, 56.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=39 */
%   | | | else return 0.0466110077419626;  // std dev = 1.839, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.3082861361964884;  // std dev = 2.876, 41.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=29 */
%   | | | else return 0.33801198291753476;  // std dev = 2.136, 26.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then if ( haswordtitle(L, N), haswordauthor(P, N) )
%   | | | then return 0.05349323736087109;  // std dev = 3.643, 68.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=19 */
%   | | | else return 0.265401186323642;  // std dev = 3.672, 54.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=28 */
%   | | else return 0.03361157548670459;  // std dev = 0.394, 161.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=31 */
%   | else return 0.01187429346788761;  // std dev = 0.366, 163.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=26 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.15688915552232877;  // std dev = 0.500, 3,604.000 (wgt'ed) examples reached here.  /* #neg=1,853 #pos=1,751 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.33123101674322597;  // std dev = 0.299, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.17658206564244758;  // std dev = 3.790, 65.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=39 */
%   | | | else return 0.23668273328079334;  // std dev = 3.575, 65.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=47 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordvenue(B, K) )
%   | | then if ( haswordauthor(L, I) )
%   | | | then return 0.23422203913790196;  // std dev = 2.418, 24.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=11 */
%   | | | else return 0.09003348804865716;  // std dev = 4.620, 98.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=36 */
%   | | else if ( title(M, J), venue(M, B) )
%   | | | then return 0.03652030409678074;  // std dev = 4.980, 155.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=31 */
%   | | | else return -0.16347969590321884;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.01037378549642124;  // std dev = 0.366, 163.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=26 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.12137646801737663;  // std dev = 0.500, 3,604.000 (wgt'ed) examples reached here.  /* #neg=1,853 #pos=1,751 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.2747965103352968;  // std dev = 0.346, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.11928638871500924;  // std dev = 3.864, 66.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=39 */
%   | | | else return 0.18854679209575526;  // std dev = 3.399, 62.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=46 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordvenue(B, K) )
%   | | | then return 0.20558979257899831;  // std dev = 2.223, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
%   | | | else return 0.027529538598277514;  // std dev = 6.313, 235.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=54 */
%   | | else return 0.18062043731494407;  // std dev = 0.495, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.02059604609131809;  // std dev = 0.377, 152.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=26 */
%   | | else return -0.15045658548762939;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09282716462764937;  // std dev = 0.500, 3,604.000 (wgt'ed) examples reached here.  /* #neg=1,853 #pos=1,751 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.14169135231385158;  // std dev = 3.268, 52.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=34 */
%   | | | else return 0.011392184321249747;  // std dev = 2.298, 22.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=11 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.14245152115419915;  // std dev = 2.647, 38.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=28 */
%   | | | else return 0.14965692550616944;  // std dev = 2.136, 26.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordauthor(L, J) )
%   | | then if ( author(M, L), title(M, K) )
%   | | | then return 0.18837659584093885;  // std dev = 0.998, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.127048539848728;  // std dev = 2.408, 26.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=10 */
%   | | else return 0.033120607014107815;  // std dev = 0.423, 252.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=66 */
%   | else return 0.0078107549955361245;  // std dev = 0.366, 163.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=26 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordauthor(G, C) )
%   | | | then return 0.5846277575414368;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.2138121799090749;  // std dev = 3.545, 56.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=36 */
%   | | else if ( haswordauthor(H, C) )
%   | | | then return 0.3552486032688375;  // std dev = 0.954, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.2820389091252299;  // std dev = 1.862, 30.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
%   | else if ( haswordtitle(I, C) )
%   | | then return 0.06967475269949402;  // std dev = 0.500, 3,511.000 (wgt'ed) examples reached here.  /* #neg=1,808 #pos=1,703 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.06321600082552772;  // std dev = 3.845, 66.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=39 */
%   | | | else return 0.10856310320628125;  // std dev = 3.400, 62.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=46 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.038126320134319054;  // std dev = 0.421, 274.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=73 */
%   | else return 0.005910195591350581;  // std dev = 0.383, 172.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=31 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.053271360638702775;  // std dev = 0.499, 3,604.000 (wgt'ed) examples reached here.  /* #neg=1,853 #pos=1,751 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.09790923688743859;  // std dev = 3.151, 50.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=35 */
%   | | | else return -0.0561058625148675;  // std dev = 2.163, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.09243850091701122;  // std dev = 2.840, 41.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=29 */
%   | | | else return 0.09005081371599524;  // std dev = 2.136, 26.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=20 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordauthor(M, J) )
%   | | | then return 0.10460069656522125;  // std dev = 2.600, 31.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=12 */
%   | | | else return 0.011109984435973072;  // std dev = 6.158, 224.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=52 */
%   | | else return 0.12408611176679522;  // std dev = 0.494, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | else return 0.002060531608088596;  // std dev = 0.365, 163.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=26 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.3408149689567754;  // std dev = 0.242, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordtitle(G, E) )
%   | | | then return 0.16796300487841728;  // std dev = 3.321, 49.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=31 */
%   | | | else return -0.28003133452865464;  // std dev = 2.044, 30.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=5 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return 0.03991368254445442;  // std dev = 29.601, 3,516.000 (wgt'ed) examples reached here.  /* #neg=1,810 #pos=1,706 */
%   | | | else return 0.04909658091439363;  // std dev = 5.168, 130.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=86 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordauthor(L, I) )
%   | | | then return 0.08332940064914705;  // std dev = 2.596, 31.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=12 */
%   | | | else return 0.0092441128026712;  // std dev = 6.158, 224.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=52 */
%   | | else return 0.09476403804965547;  // std dev = 0.494, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | else return 0.0017870749864853524;  // std dev = 0.365, 163.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=26 */


Results
   AUC ROC   = 0.561567
   AUC PR    = 0.248918
   CLL	      = -0.60274
   Precision = 0.47619 at threshold = 0.5
   Recall    = 0.034423
   F1        = 0.064205


Total learning time: 1725.4953598976135 seconds
Total inference time: 3.741 seconds
AUC ROC: 0.561567


Dataset: 3_imdb_cora, Fold: 3, Type: Scratch (RDN-B), Time: 17:59:05
{'AUC ROC': 0.561567, 'AUC PR': 0.248918, 'CLL': -0.60274, 'Precision': [0.47619, 0.5], 'Recall': 0.034423, 'F1': 0.064205, 'Learning time': 1725.4953598976135, 'Inference time': 3.741}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3441551545575258;  // std dev = 0.500, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.493284070234648;  // std dev = 4.141, 74.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=47 */
%   | | | else return 0.26991364098186527;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.5248156017661779;  // std dev = 3.367, 51.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=34 */
%   | | | else return 0.5803711573217337;  // std dev = 2.687, 36.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=26 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then if ( haswordauthor(N, K) )
%   | | | then return 0.35814893509951234;  // std dev = 2.646, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return 0.24524570929306141;  // std dev = 5.424, 124.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=48 */
%   | | else return 0.0427643197148959;  // std dev = 0.388, 195.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=36 */
%   | else return 0.03039773892726256;  // std dev = 0.378, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.29690255138011334;  // std dev = 0.500, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.42607371502600516;  // std dev = 4.114, 74.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=47 */
%   | | | else return 0.1984140253494258;  // std dev = 2.030, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.7832218764169514;  // std dev = 0.013, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.4557737619444895;  // std dev = 4.258, 83.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=56 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then if ( haswordauthor(N, K) )
%   | | | then return 0.324395181388906;  // std dev = 2.639, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return 0.20916132844549118;  // std dev = 5.418, 124.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=48 */
%   | | else return 0.03902358598744723;  // std dev = 0.388, 195.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=36 */
%   | else return 0.02521541327201523;  // std dev = 0.378, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.247146690498353;  // std dev = 0.500, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordauthor(E, C) )
%   | | then return 0.6452491781389017;  // std dev = 0.069, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | | then return 0.3070900885459612;  // std dev = 4.605, 90.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=53 */
%   | | | else return 0.3757786349681064;  // std dev = 4.281, 85.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=58 */
%   else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | then if ( haswordtitle(I, J), haswordvenue(B, J) )
%   | | then if ( haswordtitle(I, K), haswordauthor(L, K) )
%   | | | then return 0.09002035381905053;  // std dev = 4.189, 84.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=26 */
%   | | | else return 0.32281996218883663;  // std dev = 4.116, 68.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=36 */
%   | | else if ( title(M, I), venue(M, B) )
%   | | | then return 0.04014684264921155;  // std dev = 5.398, 189.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=36 */
%   | | | else return -0.15032934782697896;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.021852921493614806;  // std dev = 0.378, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.19937367766283512;  // std dev = 0.500, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.2796400139311113;  // std dev = 3.809, 65.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=42 */
%   | | | else return 0.13171075778949873;  // std dev = 2.523, 26.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=12 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.5063397097811638;  // std dev = 0.096, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2924564190794238;  // std dev = 4.252, 83.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=56 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then if ( haswordauthor(M, L) )
%   | | | then return 0.2566157618454649;  // std dev = 2.638, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return 0.13761307127732594;  // std dev = 5.343, 124.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=48 */
%   | | else return 0.031286320185600965;  // std dev = 0.388, 195.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=36 */
%   | else return 0.017658155597261197;  // std dev = 0.377, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.15694231532784036;  // std dev = 0.500, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.20643739369893768;  // std dev = 4.086, 74.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=47 */
%   | | | else return 0.07181530050958647;  // std dev = 2.034, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.22076338450209343;  // std dev = 3.320, 51.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=34 */
%   | | | else return 0.24068036565191175;  // std dev = 2.674, 36.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=26 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then if ( haswordvenue(B, M) )
%   | | | then return 0.22817300420888234;  // std dev = 2.628, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return 0.03725223920618521;  // std dev = 6.961, 284.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=66 */
%   | | else return 0.22668898561174922;  // std dev = 0.496, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | else return 0.01505547889774183;  // std dev = 0.377, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1214121850859716;  // std dev = 0.500, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.1854689455187451;  // std dev = 3.780, 65.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=42 */
%   | | | else return 0.01269914660065319;  // std dev = 2.457, 26.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=12 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.16751704360248595;  // std dev = 3.331, 51.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=34 */
%   | | | else return 0.1808514025208231;  // std dev = 2.674, 36.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=26 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordvenue(A, L) )
%   | | | then return 0.19546652039413995;  // std dev = 2.622, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return 0.026997674254652274;  // std dev = 6.918, 284.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=66 */
%   | | else return 0.21842604029834822;  // std dev = 0.496, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | else return 0.010427142290819404;  // std dev = 0.377, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.45284772425485803;  // std dev = 0.312, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | else if ( haswordtitle(E, C) )
%   | | then return 0.09146332675285358;  // std dev = 0.500, 4,486.000 (wgt'ed) examples reached here.  /* #neg=2,312 #pos=2,174 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return 0.23478073965046797;  // std dev = 1.130, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.10798876006149347;  // std dev = 6.118, 168.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=106 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | then if ( haswordvenue(A, J) )
%   | | | then return 0.15263100465362164;  // std dev = 2.620, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return 0.022694299426571068;  // std dev = 6.917, 284.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=66 */
%   | | else return 0.1711346296126926;  // std dev = 0.496, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return 0.02093918371735089;  // std dev = 0.388, 195.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=36 */
%   | | else return -0.15717584261391807;  // std dev = 1.29e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordvenue(B, D) )
%   | | | then return 0.4953050632991811;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.2106846914719398;  // std dev = 3.951, 69.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=44 */
%   | | else if ( haswordauthor(G, C) )
%   | | | then return 0.21094476524319156;  // std dev = 1.199, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return -0.26366189784373767;  // std dev = 2.060, 33.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=5 */
%   | else if ( haswordtitle(H, C) )
%   | | then return 0.06990607521409839;  // std dev = 0.500, 4,391.000 (wgt'ed) examples reached here.  /* #neg=2,261 #pos=2,130 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return 0.1765054751393542;  // std dev = 1.129, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.0771303170996289;  // std dev = 6.018, 161.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=101 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then return 0.03832656973494816;  // std dev = 0.429, 347.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=98 */
%   | else return 0.007636018971603903;  // std dev = 0.377, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordtitle(F, C) )
%   | | | then return 0.2203982989996652;  // std dev = 3.823, 71.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=48 */
%   | | | else return 0.1332834631864245;  // std dev = 1.130, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return -0.1780336904657811;  // std dev = 0.410, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | else if ( haswordtitle(G, C) )
%   | | then return 0.05293265947576092;  // std dev = 0.499, 4,391.000 (wgt'ed) examples reached here.  /* #neg=2,261 #pos=2,130 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.041654200410679396;  // std dev = 4.396, 83.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=48 */
%   | | | else return 0.08080079873063083;  // std dev = 4.244, 85.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=58 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then return 0.01991816292613681;  // std dev = 0.418, 312.000 (wgt'ed) examples reached here.  /* #neg=232 #pos=80 */
%   | | else return 0.15866787277814728;  // std dev = 0.495, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | else return 0.002622328576075911;  // std dev = 0.377, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.040105751572918326;  // std dev = 0.499, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.146717308594502;  // std dev = 0.341, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.02598987174313533;  // std dev = 4.401, 83.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=48 */
%   | | | else return 0.0654915775602982;  // std dev = 4.251, 85.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=58 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordauthor(L, I) )
%   | | | then return 0.07237411881868733;  // std dev = 2.800, 36.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=15 */
%   | | | else return 0.009191533773431978;  // std dev = 6.824, 276.000 (wgt'ed) examples reached here.  /* #neg=211 #pos=65 */
%   | | else return 0.12171542337552858;  // std dev = 0.495, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.012371005275702835;  // std dev = 0.388, 195.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=36 */
%   | | else return -0.13867836725547747;  // std dev = 1.29e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */


Results
   AUC ROC   = 0.561587
   AUC PR    = 0.249065
   CLL	      = -0.602315
   Precision = 0.47619 at threshold = 0.5
   Recall    = 0.034423
   F1        = 0.064205


Total learning time: 2316.7610347270966 seconds
Total inference time: 3.728 seconds
AUC ROC: 0.561587


Results scoring model
   AUC ROC   = 0.574733
   AUC PR    = 0.536654
   CLL	      = -0.670857
   Precision = 0.703704 at threshold = 0.5
   Recall    = 0.046798
   F1        = 0.08776


Total scoring time: 17.461 seconds
Parameter learned model CLL: -0.670857


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,true': 'haswordtitle(L, M), haswordvenue(B, M)', 'false,true,true': 'haswordauthor(N, K)'}, {'true,true': [0.5, 2, 2], 'true,false,true,true': [4.141, 27, 47], 'true,false,true,false': [2.029, 10, 7], 'true,false,false,true': [3.367, 17, 34], 'true,false,false,false': [2.687, 10, 26], 'false,true,true,true': [2.646, 14, 14], 'false,true,true,false': [5.424, 76, 48], 'false,true,false': [0.388, 159, 36], 'false,false': [0.378, 173, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,true': 'haswordtitle(L, M), haswordvenue(A, M)', 'false,true,true': 'haswordauthor(N, K)'}, {'true,true': [0.5, 2, 2], 'true,false,true,true': [4.114, 27, 47], 'true,false,true,false': [2.03, 10, 7], 'true,false,false,true': [0.013, 0, 4], 'true,false,false,false': [4.258, 27, 56], 'false,true,true,true': [2.639, 14, 14], 'false,true,true,false': [5.418, 76, 48], 'false,true,false': [0.388, 159, 36], 'false,false': [0.378, 173, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordauthor(E, C)', 'true,false,false': 'haswordvenue(A, F), haswordtitle(G, F)', 'false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false,true': 'haswordtitle(I, J), haswordvenue(B, J)', 'false,true,true': 'haswordtitle(I, K), haswordauthor(L, K)', 'false,true,false': 'title(M, I), venue(M, B)'}, {'true,true': [0.5, 2, 2], 'true,false,true': [0.069, 0, 3], 'true,false,false,true': [4.605, 37, 53], 'true,false,false,false': [4.281, 27, 58], 'false,true,true,true': [4.189, 58, 26], 'false,true,true,false': [4.116, 32, 36], 'false,true,false,true': [5.398, 153, 36], 'false,true,false,false': [5.27e-09, 6, 0], 'false,false': [0.378, 173, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, B)', 'true,false,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordvenue(A, L)', 'false,true,true': 'haswordauthor(M, L)'}, {'true,true': [0.5, 2, 2], 'true,false,true,true': [3.809, 23, 42], 'true,false,true,false': [2.523, 14, 12], 'true,false,false,true': [0.096, 0, 4], 'true,false,false,false': [4.252, 27, 56], 'false,true,true,true': [2.638, 14, 14], 'false,true,true,false': [5.343, 76, 48], 'false,true,false': [0.388, 159, 36], 'false,false': [0.377, 173, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,true': 'haswordtitle(L, M), haswordauthor(N, M)', 'false,true,true': 'haswordvenue(B, M)'}, {'true,true': [0.5, 2, 2], 'true,false,true,true': [4.086, 27, 47], 'true,false,true,false': [2.034, 10, 7], 'true,false,false,true': [3.32, 17, 34], 'true,false,false,false': [2.674, 10, 26], 'false,true,true,true': [2.628, 14, 14], 'false,true,true,false': [6.961, 218, 66], 'false,true,false': [0.496, 17, 18], 'false,false': [0.377, 173, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, A)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordauthor(M, L)', 'false,true,true': 'haswordvenue(A, L)'}, {'true,true': [0.5, 2, 2], 'true,false,true,true': [3.78, 23, 42], 'true,false,true,false': [2.457, 14, 12], 'true,false,false,true': [3.331, 17, 34], 'true,false,false,false': [2.674, 10, 26], 'false,true,true,true': [2.622, 14, 14], 'false,true,true,false': [6.918, 218, 66], 'false,true,false': [0.496, 17, 18], 'false,false': [0.377, 173, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordauthor(D, C)', 'true,false': 'haswordtitle(E, C)', 'true,false,false': 'haswordvenue(B, F), haswordauthor(G, F)', 'false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false,true': 'haswordtitle(I, J), haswordauthor(K, J)', 'false,true,true': 'haswordvenue(A, J)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.312, 2, 17], 'true,false,true': [0.5, 2, 2], 'true,false,false,true': [1.13, 2, 5], 'true,false,false,false': [6.118, 62, 106], 'false,true,true,true': [2.62, 14, 14], 'false,true,true,false': [6.917, 218, 66], 'false,true,false': [0.496, 17, 18], 'false,false,true': [0.388, 159, 36], 'false,false,false': [1.29e-08, 14, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,true': 'haswordvenue(B, D)', 'true,true,false': 'haswordauthor(G, C)', 'true,false': 'haswordtitle(H, C)', 'true,false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false': 'haswordvenue(B, K), haswordtitle(L, K)'}, {'true,true,true,true': [2.11e-08, 0, 9], 'true,true,true,false': [3.951, 25, 44], 'true,true,false,true': [1.199, 2, 8], 'true,true,false,false': [2.06, 28, 5], 'true,false,true': [0.5, 2, 2], 'true,false,false,true': [1.129, 2, 5], 'true,false,false,false': [6.018, 60, 101], 'false,true': [0.429, 249, 98], 'false,false': [0.377, 173, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D)', 'true,true,true': 'haswordtitle(F, C)', 'true,false': 'haswordtitle(G, C)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordauthor(M, L)'}, {'true,true,true,true': [3.823, 23, 48], 'true,true,true,false': [1.13, 2, 5], 'true,true,false': [0.41, 30, 13], 'true,false,true': [0.499, 2, 2], 'true,false,false,true': [4.396, 35, 48], 'true,false,false,false': [4.244, 27, 58], 'false,true,true': [0.418, 232, 80], 'false,true,false': [0.495, 17, 18], 'false,false': [0.377, 173, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordauthor(L, K)', 'false,true,true': 'haswordauthor(L, I)', 'false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true': [0.499, 2, 2], 'true,false,true': [0.341, 2, 8], 'true,false,false,true': [4.401, 35, 48], 'true,false,false,false': [4.251, 27, 58], 'false,true,true,true': [2.8, 21, 15], 'false,true,true,false': [6.824, 211, 65], 'false,true,false': [0.495, 17, 18], 'false,false,true': [0.388, 159, 36], 'false,false,false': [1.29e-08, 14, 0]}]]
[{'': [0.2499340711519663, 0.1829227265669498], 'true': [0.24980417410609057, 0.23027395530867678], 'true,false': [0.24127520830817514, 0.2140309155766939], 'true,false,true': [0.2317384952520089, 0.24221453287197234], 'true,false,false': [0.22222222222222393, 0.20061728395061854], 'false': [0.202659269655924, 0.1425791534076612], 'false,true': [0.24151662049861491, 0.15053254437869934], 'false,true,true': [0.24999999999999956, 0.2372528616024979]}, {'': [0.24959940219109736, 0.18012042678213355], 'true': [0.249804174106148, 0.22833690031063653], 'true,false': [0.2391372213704096, 0.21314507724875675], 'true,false,true': [0.22868821855956348, 0.24247451004155807], 'true,false,false': [4.1990109284739674e-05, 0.21848534611145945], 'false': [0.19916992152892746, 0.14254364748477327], 'false,true': [0.24098727094154773, 0.15053254437869718], 'false,true,true': [0.24881469258003622, 0.23677368637162813]}, {'': [0.2492099550716472, 0.17758653336893301], 'true': [0.24980417410615238, 0.22485837377906864], 'true,false': [0.0015901994840869331, 0.22712008688328564], 'true,false,false': [0.23566060027825075, 0.21565073047965125], 'false': [0.19613951485805878, 0.14253880121674675], 'false,true': [0.2402835898796527, 0.15053254437869956], 'false,true,true': [0.2088727788622004, 0.24913494809688655], 'false,true,false': [0.1541950113378698, 4.625929269271485e-18]}, {'': [0.24897014464244233, 0.17439252253937162], 'true': [0.2498041741061843, 0.2231985184760187], 'true,false': [0.233841429641989, 0.20991191036849632], 'true,false,true': [0.223201495378675, 0.24481050471269508], 'true,false,false': [0.0023195403803816794, 0.21781309471389437], 'false': [0.19190741800475666, 0.14227159323948238], 'false,true': [0.23574412323668367, 0.15053254437869784], 'false,true,true': [0.24847773758907474, 0.23026006773890084]}, {'': [0.24879667911691408, 0.17272202707077686], 'true': [0.24980417410610006, 0.22112915581982417], 'true,false': [0.2316492998801946, 0.20896130313977349], 'true,false,true': [0.22557623661983342, 0.243347514594558], 'true,false,false': [0.21608784906780965, 0.19863282292512138], 'false': [0.18971796788362347, 0.14249676858155655], 'false,true': [0.1804270030480051, 0.24584651087936754], 'false,true,true': [0.24673101564324154, 0.17061876759909236]}, {'': [0.24871697450747296, 0.17104508914086913], 'true': [0.24980417410616934, 0.22018802839355672], 'true,false': [0.22944022763088964, 0.20981325860000252], 'true,false,true': [0.21982137845746053, 0.232166348122893], 'true,false,false': [0.2175979399833468, 0.19868072938146092], 'false': [0.1874796906665069, 0.14223140390904818], 'false,true': [0.17775526853533494, 0.24621634897108352], 'false,true,true': [0.24545655797457813, 0.16853341320177548]}, {'': [0.24864001778915804, 0.16954068668090325], 'true': [0.09725644318321808, 0.24872928290384064], 'true,false': [0.24976341911996627, 0.2217710169920032], 'true,false,false': [0.18228951678879748, 0.22277303125694634], 'false': [0.18541469939084007, 0.14222901579630093], 'false,true': [0.17674554239360243, 0.2458724863325967], 'false,true,true': [0.24521162799737067, 0.16848017479154553], 'false,false': [0.15031521263861117, 1.1895246692412391e-17]}, {'': [0.2483977209563182, 0.16840062683819954], 'true': [0.23165000382033357, 0.24881543973918407], 'true,false': [0.2497774868274774, 0.2235461058498286], 'true,true': [0.20842119160405323, 0.17228210100300764], 'true,false,false': [0.18206295717840007, 0.2249382450913133], 'true,true,true': [4.9343245538895844e-17, 0.22625940026131053], 'true,true,false': [0.14370319162086176, 0.12855831037649215], 'false': [0.18409541223021633, 0.1417549307573652]}, {'': [0.24777156454099392, 0.16823114311511675], 'true': [0.22636010368609666, 0.24832895734543745], 'true,false': [0.24931070745348705, 0.22259900385576356], 'true,true': [0.20438729170579906, 0.16786086477255793], 'true,false,false': [0.23281292834643486, 0.21186830068301257], 'true,true,true': [0.2058879088424669, 0.1822588154633189], 'false': [0.1836713180971871, 0.1419849556939868], 'false,true': [0.17483201233178397, 0.24515772535285854]}, {'': [0.2473670869503618, 0.16764047881297478], 'true': [0.24853319644443697, 0.2177458096851403], 'true,false': [0.11607721419219083, 0.22322735220773543], 'true,false,false': [0.23333399000278565, 0.21258761327822723], 'false': [0.1828615120114287, 0.14198400540566114], 'false,true': [0.1747848452713676, 0.2449021032394743], 'false,true,true': [0.21777843837830457, 0.16871636541016666], 'false,false': [0.1506493902047073, 1.1895246692412391e-17]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
1;true,false,false;haswordvenue(A, I), haswordauthor(J, I).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,false;haswordauthor(E, C).;true;true
2;false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;false,true;haswordtitle(I, J), haswordvenue(B, J).;true;true
2;false,true,false;title(M, I), venue(M, B).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
3;true,false,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
7;true,true;haswordtitle(F, D).;true;true
7;true,true,true;haswordvenue(B, D).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
9;false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3441551545575258;  // std dev = 0.500, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.493284070234648;  // std dev = 4.141, 74.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=47 */
%   | | | else return 0.26991364098186527;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.5248156017661779;  // std dev = 3.367, 51.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=34 */
%   | | | else return 0.5803711573217337;  // std dev = 2.687, 36.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=26 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then if ( haswordauthor(N, K) )
%   | | | then return 0.35814893509951234;  // std dev = 2.646, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return 0.24524570929306141;  // std dev = 5.424, 124.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=48 */
%   | | else return 0.0427643197148959;  // std dev = 0.388, 195.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=36 */
%   | else return 0.03039773892726256;  // std dev = 0.378, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.29690255138011334;  // std dev = 0.500, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.42607371502600516;  // std dev = 4.114, 74.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=47 */
%   | | | else return 0.1984140253494258;  // std dev = 2.030, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.4543171296026042;  // std dev = 3.360, 51.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=34 */
%   | | | else return 0.4942204482591005;  // std dev = 2.687, 36.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=26 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then if ( haswordauthor(N, K) )
%   | | | then return 0.324395181388906;  // std dev = 2.639, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return 0.20916132844549118;  // std dev = 5.418, 124.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=48 */
%   | | else return 0.03902358598744723;  // std dev = 0.388, 195.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=36 */
%   | else return 0.02521541327201523;  // std dev = 0.378, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.247146690498353;  // std dev = 0.500, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then if ( haswordauthor(G, C) )
%   | | | then return 0.6917491755903863;  // std dev = 0.022, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.42565620753300765;  // std dev = 1.166, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.29862356499713;  // std dev = 4.455, 83.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=48 */
%   | | | else return 0.3727178586267966;  // std dev = 4.280, 85.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=58 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(B, L) )
%   | | then if ( haswordtitle(K, M), haswordauthor(N, M) )
%   | | | then return 0.09002035381905053;  // std dev = 4.189, 84.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=26 */
%   | | | else return 0.32281996218883663;  // std dev = 4.116, 68.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=36 */
%   | | else return 0.03428603678840569;  // std dev = 0.388, 195.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=36 */
%   | else return 0.021852921493614806;  // std dev = 0.378, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.19937367766283512;  // std dev = 0.500, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.27943462567185284;  // std dev = 3.805, 65.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=42 */
%   | | | else return 0.131845576924106;  // std dev = 2.528, 26.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=12 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.29887927977791745;  // std dev = 3.343, 51.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=34 */
%   | | | else return 0.30730165598180403;  // std dev = 2.680, 36.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=26 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then if ( haswordauthor(M, L) )
%   | | | then return 0.2566157618454649;  // std dev = 2.638, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return 0.13761307127732594;  // std dev = 5.343, 124.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=48 */
%   | | else return 0.031286320185600965;  // std dev = 0.388, 195.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=36 */
%   | else return 0.017702833979475512;  // std dev = 0.377, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.15694231532784036;  // std dev = 0.500, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.3645192681171912;  // std dev = 0.370, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.16557191657499556;  // std dev = 4.415, 83.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=48 */
%   | | | else return 0.22373835570595815;  // std dev = 4.272, 85.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=58 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordvenue(B, K) )
%   | | | then return 0.22817300420888234;  // std dev = 2.628, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return 0.03736201083205779;  // std dev = 6.964, 284.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=66 */
%   | | else return 0.22603372415964976;  // std dev = 0.496, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.027180556726322008;  // std dev = 0.388, 195.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=36 */
%   | | else return -0.1538353494112396;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1214121850859716;  // std dev = 0.500, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.265779531145469;  // std dev = 0.364, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.12375666592677695;  // std dev = 4.432, 83.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=48 */
%   | | | else return 0.17077873522065998;  // std dev = 4.259, 85.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=58 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordvenue(A, K) )
%   | | | then return 0.19544512733641756;  // std dev = 2.622, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return 0.025898479732256723;  // std dev = 6.919, 284.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=66 */
%   | | else return 0.21835703112138488;  // std dev = 0.496, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.02237329591221369;  // std dev = 0.388, 195.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=36 */
%   | | else return -0.13485856475639071;  // std dev = 1.29e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D) )
%   | | then if ( haswordauthor(G, C) )
%   | | | then return 0.6068445126646084;  // std dev = 4.21e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.22780044602657407;  // std dev = 3.973, 69.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=44 */
%   | | else if ( haswordauthor(H, C) )
%   | | | then return 0.31732600799508465;  // std dev = 1.196, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return -0.2416403358202401;  // std dev = 2.060, 33.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=5 */
%   | else if ( haswordtitle(I, C) )
%   | | then return 0.09192763723756966;  // std dev = 0.500, 4,391.000 (wgt'ed) examples reached here.  /* #neg=2,261 #pos=2,130 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.09323686522250302;  // std dev = 4.431, 83.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=48 */
%   | | | else return 0.12844352878621312;  // std dev = 4.259, 85.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=58 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.047372498143042445;  // std dev = 0.431, 347.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=98 */
%   | else return 0.009985399477440125;  // std dev = 0.376, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07048787261629348;  // std dev = 0.499, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.09808550839370128;  // std dev = 3.784, 65.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=42 */
%   | | | else return -0.009237478829264487;  // std dev = 2.518, 26.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=12 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.2978761712258012;  // std dev = 0.117, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.09870993057980766;  // std dev = 4.249, 83.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=56 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordvenue(B, L) )
%   | | | then return 0.16175251410102717;  // std dev = 2.613, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return 0.015139150482993054;  // std dev = 6.907, 284.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=66 */
%   | | else return 0.16136162530467368;  // std dev = 0.496, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | else return 0.004255338332455262;  // std dev = 0.376, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0532805729898718;  // std dev = 0.499, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.1869593511731042;  // std dev = 0.361, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.03796730808021512;  // std dev = 4.395, 83.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=48 */
%   | | | else return 0.08000747949801368;  // std dev = 4.260, 85.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=58 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordauthor(L, I) )
%   | | | then return 0.09587626565524203;  // std dev = 2.807, 36.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=15 */
%   | | | else return 0.01316453539249409;  // std dev = 6.837, 276.000 (wgt'ed) examples reached here.  /* #neg=211 #pos=65 */
%   | | else return 0.12382990823072174;  // std dev = 0.495, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.01263876750237716;  // std dev = 0.388, 195.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=36 */
%   | | else return -0.12139515594471263;  // std dev = 1.05e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0401629739333903;  // std dev = 0.499, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.08847200093207896;  // std dev = 3.770, 65.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=42 */
%   | | | else return -0.0876899481850947;  // std dev = 2.456, 26.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=12 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.06790132152778242;  // std dev = 3.303, 51.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=34 */
%   | | | else return 0.058576366561274025;  // std dev = 2.674, 36.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=26 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordvenue(B, L) )
%   | | | then return 0.12020009066213043;  // std dev = 2.606, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return 0.008362175572611286;  // std dev = 6.901, 284.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=66 */
%   | | else return 0.0941025265218588;  // std dev = 0.495, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | else return 0.0028025261885221576;  // std dev = 0.376, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */


Results
   AUC ROC   = 0.560114
   AUC PR    = 0.248428
   CLL	      = -0.604034
   Precision = 0.47619 at threshold = 0.5
   Recall    = 0.034423
   F1        = 0.064205


Total learning time: 2418.213611841202 seconds
Total inference time: 3.692 seconds
AUC ROC: 0.560114


Results scoring model
   AUC ROC   = 0.567749
   AUC PR    = 0.527484
   CLL	      = -0.671778
   Precision = 0.707317 at threshold = 0.5
   Recall    = 0.047619
   F1        = 0.089231


Total scoring time: 17.943 seconds
Refined model CLL: -0.671778


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.561587
   AUC PR    = 0.249065
   CLL	      = -0.602315
   Precision = 0.47619 at threshold = 0.5
   Recall    = 0.034423
   F1        = 0.064205


Total learning time: 4770.378646568298 seconds
Total inference time: 3.728 seconds
AUC ROC: 0.561587
Total revision time: 4770.378646568298
Best scored revision CLL: -0.670857


Dataset: 3_imdb_cora, Fold: 3, Type: Transfer (trRDN-B), Time: 19:18:47
{'AUC ROC': 0.561587, 'AUC PR': 0.249065, 'CLL': -0.602315, 'Precision': [0.47619, 0.5], 'Recall': 0.034423, 'F1': 0.064205, 'Learning time': 4770.378646568298, 'Inference time': 3.728, 'parameter_1.0': {'AUC ROC': 0.561587, 'AUC PR': 0.249065, 'CLL': -0.602315, 'Precision': [0.47619, 0.5], 'Recall': 0.034423, 'F1': 0.064205, 'Learning time': 2316.7610347270966, 'Inference time': 3.728}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.3441551545575258;  // std dev = 0.500, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.493284070234648;  // std dev = 4.141, 74.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=47 */
%   | | | else return 0.26991364098186527;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5328477302802359;  // std dev = 4.268, 83.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=56 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | then if ( haswordauthor(N, K) )
%   | | | then return 0.35814893509951234;  // std dev = 2.646, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return 0.24524570929306141;  // std dev = 5.424, 124.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=48 */
%   | | else return 0.0427643197148959;  // std dev = 0.388, 195.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=36 */
%   | else return 0.03039773892726256;  // std dev = 0.378, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.29690255138011334;  // std dev = 0.500, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.42268117885457773;  // std dev = 4.099, 74.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=47 */
%   | | | else return 0.19833319794693202;  // std dev = 2.031, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.7700906729604704;  // std dev = 0.058, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.45925548085245094;  // std dev = 4.261, 83.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=56 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordvenue(A, M) )
%   | | then if ( haswordauthor(N, K) )
%   | | | then return 0.324395181388906;  // std dev = 2.639, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return 0.20916132844549118;  // std dev = 5.418, 124.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=48 */
%   | | else return 0.03902358598744723;  // std dev = 0.388, 195.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=36 */
%   | else return 0.02521541327201523;  // std dev = 0.378, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.247146690498353;  // std dev = 0.500, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.3570081795033492;  // std dev = 3.818, 65.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=42 */
%   | | | else return 0.19263872451691724;  // std dev = 2.496, 26.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=12 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.3635184439965643;  // std dev = 3.339, 51.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=34 */
%   | | | else return 0.4097493000924299;  // std dev = 2.676, 36.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=26 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | then if ( haswordauthor(M, L) )
%   | | | then return 0.2728052450080595;  // std dev = 2.638, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return 0.1764106474952855;  // std dev = 5.418, 124.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=48 */
%   | | else return 0.034101808790177275;  // std dev = 0.388, 195.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=36 */
%   | else return 0.022024808860382897;  // std dev = 0.378, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.19937367766283512;  // std dev = 0.500, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.4065317189620852;  // std dev = 0.365, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.229273299912387;  // std dev = 4.423, 83.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=48 */
%   | | | else return 0.2914413150517085;  // std dev = 4.270, 85.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=58 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordauthor(L, I) )
%   | | | then return 0.16594829894890745;  // std dev = 2.866, 36.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=15 */
%   | | | else return 0.05298225074789307;  // std dev = 6.962, 276.000 (wgt'ed) examples reached here.  /* #neg=211 #pos=65 */
%   | | else return 0.279678283809469;  // std dev = 0.498, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.02968941765682729;  // std dev = 0.388, 195.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=36 */
%   | | else return -0.1515671682437705;  // std dev = 1.05e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.15694231532784036;  // std dev = 0.500, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.22094693916801064;  // std dev = 3.788, 65.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=42 */
%   | | | else return 0.06290979801538821;  // std dev = 2.489, 26.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=12 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.43586402888553677;  // std dev = 0.111, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.22513135446034482;  // std dev = 4.234, 83.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=56 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordvenue(A, L) )
%   | | | then return 0.1868739626234936;  // std dev = 2.636, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return 0.038353052907300865;  // std dev = 6.978, 284.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=66 */
%   | | else return 0.2700792971779555;  // std dev = 0.497, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | else return 0.013137600266377655;  // std dev = 0.377, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1214121850859716;  // std dev = 0.500, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.1668780756043979;  // std dev = 3.786, 65.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=42 */
%   | | | else return 0.047878707409736695;  // std dev = 2.489, 26.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=12 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.1697651493316525;  // std dev = 3.298, 51.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=34 */
%   | | | else return 0.18662284013545466;  // std dev = 2.673, 36.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=26 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), title(N, K) )
%   | | | then return 0.05501687062799132;  // std dev = 6.895, 265.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=67 */
%   | | | else return -0.022635074112974985;  // std dev = 2.855, 47.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=13 */
%   | | else return 0.21806816924050113;  // std dev = 0.497, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | else return 0.0100114358505576;  // std dev = 0.377, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09285073212259731;  // std dev = 0.500, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.12055574717529922;  // std dev = 4.046, 74.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=47 */
%   | | | else return 0.011251894816370267;  // std dev = 2.035, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.12765460499925094;  // std dev = 3.299, 51.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=34 */
%   | | | else return 0.14086408623488764;  // std dev = 2.674, 36.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=26 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then if ( haswordauthor(N, K) )
%   | | | then return 0.15184613844364125;  // std dev = 2.837, 36.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=15 */
%   | | | else return 0.02049001792471761;  // std dev = 6.842, 276.000 (wgt'ed) examples reached here.  /* #neg=211 #pos=65 */
%   | | else return 0.20555391104776302;  // std dev = 0.497, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | else return 0.004303769699711838;  // std dev = 0.377, 209.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07049226145065242;  // std dev = 0.500, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.17796948143708846;  // std dev = 0.340, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | | then return 0.21502323901479956;  // std dev = 1.097, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.07675836691925653;  // std dev = 6.009, 161.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=101 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordvenue(A, K) )
%   | | | then return 0.14165597988433504;  // std dev = 2.629, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return 0.01812206931449763;  // std dev = 6.918, 284.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=66 */
%   | | else return 0.16013802024930449;  // std dev = 0.497, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.01375243419461498;  // std dev = 0.388, 195.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=36 */
%   | | else return -0.13628713890326163;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05327696275075745;  // std dev = 0.500, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.18307552204047842;  // std dev = 0.349, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.04058727330310836;  // std dev = 4.380, 83.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=48 */
%   | | | else return 0.07873231331578566;  // std dev = 4.241, 85.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=58 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return 0.0327160480661509;  // std dev = 6.991, 274.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=73 */
%   | | | else return -0.04274719985633561;  // std dev = 2.431, 38.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=7 */
%   | | else return 0.12278872080400957;  // std dev = 0.496, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | then return 0.011795704767471608;  // std dev = 0.388, 195.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=36 */
%   | | else return -0.1210245510616809;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.040154893573991046;  // std dev = 0.500, 4,502.000 (wgt'ed) examples reached here.  /* #neg=2,314 #pos=2,188 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.14307901246692195;  // std dev = 0.350, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.030737460203942826;  // std dev = 4.381, 83.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=48 */
%   | | | else return 0.06013672610610156;  // std dev = 4.242, 85.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=58 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( haswordvenue(B, K) )
%   | | | then return 0.1610582243017931;  // std dev = 2.595, 28.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=14 */
%   | | | else return -0.0014261608769771657;  // std dev = 6.849, 284.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=66 */
%   | | else return 0.1557351381063994;  // std dev = 0.496, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.008913638330554972;  // std dev = 0.389, 195.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=36 */
%   | | else return -0.10872918360569071;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */


Results
   AUC ROC   = 0.557633
   AUC PR    = 0.246017
   CLL	      = -0.605116
   Precision = 0.473684 at threshold = 0.5
   Recall    = 0.030981
   F1        = 0.058158


Total learning time: 2961.8235030174255 seconds
Total inference time: 3.683 seconds
AUC ROC: 0.557633


Dataset: 3_imdb_cora, Fold: 3, Type: Scratch (RDN-B), Time: 20:08:14
{'AUC ROC': 0.557633, 'AUC PR': 0.246017, 'CLL': -0.605116, 'Precision': [0.473684, 0.5], 'Recall': 0.030981, 'F1': 0.058158, 'Learning time': 2961.8235030174255, 'Inference time': 3.683}


Starting fold 4

Target train facts examples: 34429
Target train pos examples: 2270
Target train neg examples: 3954

Target test facts examples: 8129
Target test pos  examples: 747
Target test neg examples: 1068

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.645567590197122;  // std dev = 8.784, 461.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=363 */
%   | | | else return -0.109470112519535;  // std dev = 4.056, 525.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=17 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.12481560176617904;  // std dev = 2.422, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | | else return 0.38314893509951164;  // std dev = 3.158, 40.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=21 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.3581489350995123;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.5504566274072047;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.029035011048878824;  // std dev = 0.376, 158.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=27 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.5477382382997596;  // std dev = 8.784, 461.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=363 */
%   | | | else return -0.09665944156845033;  // std dev = 4.056, 525.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=17 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.10893247925776725;  // std dev = 2.422, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | | else return 0.3298442880375027;  // std dev = 3.158, 40.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=21 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.30874113578563506;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.050922032513554226;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.46952849908361544;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.025463711763229282;  // std dev = 0.376, 158.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=27 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.4346049847059449;  // std dev = 8.784, 461.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=363 */
%   | | | else return -0.08617990644098363;  // std dev = 4.056, 525.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=17 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.09391529972732654;  // std dev = 2.422, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | | else return 0.27281765923568413;  // std dev = 3.158, 40.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=21 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.2564123687585864;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.04434629760466851;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.37799101181885475;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.022270558611941566;  // std dev = 0.376, 158.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=27 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.11319983530422645;  // std dev = 0.369, 986.000 (wgt'ed) examples reached here.  /* #neg=606 #pos=380 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.08007894754642039;  // std dev = 2.422, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | | else return 0.2180014607516632;  // std dev = 3.158, 40.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=21 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.20613740734453972;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.038428662236904595;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.2914815096729242;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.12127177815253015;  // std dev = 0.445, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | else return 0.011809811547706177;  // std dev = 0.370, 147.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=24 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.09385679536646976;  // std dev = 0.365, 986.000 (wgt'ed) examples reached here.  /* #neg=606 #pos=380 */
%   | | else return 0.12599882051704175;  // std dev = 0.478, 70.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=29 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 0.1616285754841467;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.03315494592188569;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.2199151733112511;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then return 0.005486047788045262;  // std dev = 0.366, 107.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=17 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return 0.20729199603048926;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return 0.009811189263162877;  // std dev = 0.369, 43.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=7 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.07730311625395221;  // std dev = 0.363, 988.000 (wgt'ed) examples reached here.  /* #neg=605 #pos=383 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.0467847416798823;  // std dev = 2.027, 28.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=5 */
%   | | | else return 0.14042845045077673;  // std dev = 3.158, 40.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=21 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return -0.024754965494063513;  // std dev = 0.626, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.09975109338277262;  // std dev = 1.706, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | | else return 0.22014323296469723;  // std dev = 1.483, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then return 0.08229677551112365;  // std dev = 0.440, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return -0.006207747766063668;  // std dev = 0.355, 88.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=13 */
%   | | else return 0.032701203864812685;  // std dev = 0.389, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06437136052745009;  // std dev = 0.368, 1,056.000 (wgt'ed) examples reached here.  /* #neg=647 #pos=409 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.08267884113721077;  // std dev = 1.384, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.0023347015250983925;  // std dev = 0.887, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.1425971418982102;  // std dev = 1.670, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0.21562313723146476;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return 0.06930125937879207;  // std dev = 0.440, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return -0.005400992929546285;  // std dev = 0.355, 88.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=13 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.045710179011464326;  // std dev = 2.960, 54.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
%   | | | else return -0.1585697565358731;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0524947882836078;  // std dev = 0.366, 1,056.000 (wgt'ed) examples reached here.  /* #neg=647 #pos=409 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.06248264269558144;  // std dev = 1.384, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.00196468534330565;  // std dev = 0.887, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.1076169967419087;  // std dev = 1.670, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0.18138670137291413;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then return -4.387028085421754E-4;  // std dev = 0.365, 107.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=17 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, B) )
%   | | | then return 0.07727170302300716;  // std dev = 2.728, 41.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=10 */
%   | | | else return -0.15274673275275008;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.13853895705844535;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04269060535843961;  // std dev = 0.364, 1,056.000 (wgt'ed) examples reached here.  /* #neg=647 #pos=409 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.04707778495795028;  // std dev = 1.383, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.0016529079762884202;  // std dev = 0.887, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.09922014811762256;  // std dev = 0.406, 17.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=13 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( haswordauthor(I, J), haswordtitle(K, J) )
%   | | then return 0.11237141320178265;  // std dev = 0.443, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | else return -0.15034558220663277;  // std dev = 0.034, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return -0.011277278657114592;  // std dev = 0.354, 95.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=14 */
%   | | else if ( haswordvenue(A, N), haswordauthor(P, N) )
%   | | | then return 0.1373845010747538;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.014193398757024528;  // std dev = 2.392, 41.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=7 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03464341482090682;  // std dev = 0.363, 1,056.000 (wgt'ed) examples reached here.  /* #neg=647 #pos=409 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.0637161696502457;  // std dev = 0.586, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return -0.0061079117158310695;  // std dev = 1.696, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | | else return 0.13528482642027034;  // std dev = 1.461, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then return -0.02021638232055919;  // std dev = 0.345, 93.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=13 */
%   | | else return 0.13292987327337016;  // std dev = 0.453, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then if ( title(P, N), venue(P, B) )
%   | | | then return 0.05973362700722676;  // std dev = 2.723, 41.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=10 */
%   | | | else return -0.13566500246175134;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.12320517267346012;  // std dev = 0.020, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.885625
   AUC PR    = 0.772285
   CLL	      = -0.438065
   Precision = 0.799065 at threshold = 0.5
   Recall    = 0.915663
   F1        = 0.8534


Total learning time: 1249.1829948425293 seconds
Total inference time: 6.047 seconds
AUC ROC: 0.885625


Results scoring model
   AUC ROC   = 0.88191
   AUC PR    = 0.762489
   CLL	      = -0.433351
   Precision = 0.785124 at threshold = 0.5
   Recall    = 0.837004
   F1        = 0.810235


Total scoring time: 17.264 seconds
Parameter learned model CLL: -0.433351


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,true': 'samebib(E, F), venue(F, B)', 'true,true,false': 'title(G, D), venue(G, B)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'title(J, I), venue(J, B)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)'}, {'true,true,true,true': [8.784, 98, 363], 'true,true,true,false': [4.056, 508, 17], 'true,true,false,true': [2.422, 22, 8], 'true,true,false,false': [3.158, 19, 21], 'true,false,true,true': [1.414, 4, 4], 'true,false,true,false': [0.894, 4, 1], 'true,false,false,true': [1.664, 4, 9], 'true,false,false,false': [0.0, 0, 4], 'false': [0.376, 131, 27]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,true': 'samebib(E, F), venue(F, B)', 'true,true,false': 'title(G, D), venue(G, B)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'title(J, I), venue(J, B)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)'}, {'true,true,true,true': [8.784, 98, 363], 'true,true,true,false': [4.056, 508, 17], 'true,true,false,true': [2.422, 22, 8], 'true,true,false,false': [3.158, 19, 21], 'true,false,true,true': [1.414, 4, 4], 'true,false,true,false': [0.894, 4, 1], 'true,false,false,true': [1.664, 4, 9], 'true,false,false,false': [0.0, 0, 4], 'false': [0.376, 131, 27]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,true': 'samebib(E, F), venue(F, B)', 'true,true,false': 'title(G, D), venue(G, B)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'title(J, I), venue(J, B)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)'}, {'true,true,true,true': [8.784, 98, 363], 'true,true,true,false': [4.056, 508, 17], 'true,true,false,true': [2.422, 22, 8], 'true,true,false,false': [3.158, 19, 21], 'true,false,true,true': [1.414, 4, 4], 'true,false,true,false': [0.894, 4, 1], 'true,false,false,true': [1.664, 4, 9], 'true,false,false,false': [0.0, 0, 4], 'false': [0.376, 131, 27]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'title(I, H), venue(I, B)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(A, L), haswordauthor(M, L)'}, {'true,true,true': [0.369, 606, 380], 'true,true,false,true': [2.422, 22, 8], 'true,true,false,false': [3.158, 19, 21], 'true,false,true,true': [1.414, 4, 4], 'true,false,true,false': [0.894, 4, 1], 'true,false,false,true': [1.664, 4, 9], 'true,false,false,false': [0.0, 0, 4], 'false,true': [0.445, 8, 3], 'false,false': [0.37, 123, 24]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,false': 'haswordvenue(A, F), haswordtitle(G, F)', 'true,false,true': 'title(H, G), venue(H, B)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false': 'haswordvenue(A, M), haswordauthor(N, M)'}, {'true,true,true': [0.365, 606, 380], 'true,true,false': [0.478, 41, 29], 'true,false,true,true': [1.414, 4, 4], 'true,false,true,false': [0.894, 4, 1], 'true,false,false,true': [1.664, 4, 9], 'true,false,false,false': [0.0, 0, 4], 'false,true': [0.366, 90, 17], 'false,false,true': [0.484, 5, 3], 'false,false,false': [0.369, 36, 7]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true,true': [0.363, 605, 383], 'true,true,false,true': [2.027, 23, 5], 'true,true,false,false': [3.158, 19, 21], 'true,false,true': [0.626, 2, 1], 'true,false,false,true': [1.706, 5, 8], 'true,false,false,false': [1.483, 5, 9], 'false,true': [0.44, 8, 3], 'false,false,true': [0.355, 75, 13], 'false,false,false': [0.389, 48, 11]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, B)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordauthor(K, J)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)', 'false,false,false': 'haswordvenue(A, N), haswordtitle(P, N)'}, {'true,true': [0.368, 647, 409], 'true,false,true,true': [1.384, 4, 4], 'true,false,true,false': [0.887, 4, 1], 'true,false,false,true': [1.67, 4, 9], 'true,false,false,false': [0.0, 0, 4], 'false,true': [0.44, 8, 3], 'false,false,true': [0.355, 75, 13], 'false,false,false,true': [2.96, 43, 11], 'false,false,false,false': [0.0, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, B)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)', 'false,false,true': 'title(N, M), venue(N, B)'}, {'true,true': [0.366, 647, 409], 'true,false,true,true': [1.384, 4, 4], 'true,false,true,false': [0.887, 4, 1], 'true,false,false,true': [1.67, 4, 9], 'true,false,false,false': [0.0, 0, 4], 'false,true': [0.365, 90, 17], 'false,false,true,true': [2.728, 31, 10], 'false,false,true,false': [0.0, 5, 0], 'false,false,false': [3.73e-09, 5, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, B)', 'false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,true': 'haswordauthor(I, J), haswordtitle(K, J)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)', 'false,false,false': 'haswordvenue(A, N), haswordauthor(P, N)'}, {'true,true': [0.364, 647, 409], 'true,false,true,true': [1.383, 4, 4], 'true,false,true,false': [0.887, 4, 1], 'true,false,false': [0.406, 4, 13], 'false,true,true': [0.443, 8, 3], 'false,true,false': [0.034, 3, 0], 'false,false,true': [0.354, 81, 14], 'false,false,false,true': [1.369, 5, 3], 'false,false,false,false': [2.392, 34, 7]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordtitle(J, K), haswordauthor(L, K)', 'false,false': 'haswordvenue(B, M), haswordtitle(N, M)', 'false,false,true': 'title(P, N), venue(P, B)'}, {'true,true': [0.363, 647, 409], 'true,false,true': [0.586, 2, 1], 'true,false,false,true': [1.696, 5, 8], 'true,false,false,false': [1.461, 5, 9], 'false,true,true': [0.345, 80, 13], 'false,true,false': [0.453, 10, 4], 'false,false,true,true': [2.723, 31, 10], 'false,false,true,false': [0.0, 5, 0], 'false,false,false': [0.02, 5, 0]}]]
[{'': [0.23859077019082958, 0.14168402499599525], 'true': [0.23730110049355768, 0.23999999999999957], 'true,false': [0.2366863905325442, 0.17993079584775054], 'true,true': [0.23686581718088262, 0.24265306122449123], 'true,true,false': [0.19555555555555568, 0.24937500000000004], 'true,true,true': [0.1673905167018765, 0.0313324263038555], 'true,false,true': [0.24999999999999986, 0.16000000000000003], 'true,false,false': [0.2130177514792898, 0.0]}, {'': [0.20255941209348088, 0.14168402499599486], 'true': [0.20102581854991952, 0.22377852982231514], 'true,false': [0.231117323079768, 0.17413664697588668], 'true,false,true': [0.24999999999999994, 0.16], 'true,true': [0.1983205104593449, 0.2382610406891157], 'true,true,false': [0.19555555555555537, 0.24937500000000012], 'true,true,true': [0.16739051670187416, 0.03133242630385415], 'true,false,false': [0.2130177514792899, 0.0]}, {'': [0.16907341445565274, 0.14168402499599325], 'true': [0.1673094327189791, 0.20818622060086261], 'true,false': [0.22602888012654648, 0.16855691774418247], 'true,false,true': [0.25, 0.15999999999999998], 'true,false,false': [0.21301775147929, 0.0], 'true,true': [0.16246434997930526, 0.2341477411738483], 'true,true,false': [0.1955555555555552, 0.2493749999999996], 'true,true,true': [0.16739051670188054, 0.0313324263038556]}, {'': [0.14470948356519886, 0.14168402499599447], 'true': [0.14274750125415098, 0.19805736413286876], 'true,false': [0.22204170962972244, 0.16575396344109267], 'true,false,true': [0.24999999999999994, 0.16000000000000003], 'true,false,false': [0.21301775147929009, 0.0], 'true,true': [0.13634598087358946, 0.23096812453985385], 'true,true,false': [0.19555555555555568, 0.24937500000000004], 'false': [0.1983471074380164, 0.13660974593919223]}, {'': [0.14114355934005848, 0.14148921992022473], 'false': [0.1337732542811028, 0.1568336267129951], 'false,false': [0.23437499999999992, 0.13628988642509496], 'true': [0.13945418819840835, 0.19261062375031765], 'true,false': [0.2192912363296807, 0.16472401899235695], 'true,false,true': [0.24999999999999997, 0.16000000000000003], 'true,false,false': [0.21301775147929, 0.0], 'true,true': [0.13303803452426324, 0.22886566854080043]}, {'': [0.1386250376107566, 0.1409521714374536], 'false': [0.194037005732573, 0.13660996807276968], 'true': [0.1370558148703789, 0.1898039924688688], 'true,false': [0.13065463330305768, 0.19288180070335398], 'true,false,false': [0.22394573827478, 0.15705799453595384], 'true,true': [0.1320505764392456, 0.2092143502986955], 'true,true,false': [0.14668367346938763, 0.24937499999999999], 'false,false': [0.1258862512217972, 0.1516983802194137]}, {'': [0.13670104002577696, 0.1407522761894996], 'false': [0.1938212196632059, 0.1365209127596585], 'true': [0.135203956131181, 0.18710099120312898], 'true,false': [0.2093560118394324, 0.16502781387468538], 'true,false,true': [0.2394364828770404, 0.1572548392438685], 'true,false,false': [0.21455082723110686, 0.0], 'false,false': [0.1258863267451381, 0.15169878631268213], 'false,false,false': [0.16220850480109728, -5.551115123125783e-18]}, {'': [0.1352998122837101, 0.14030935375310535], 'false': [0.1335013415116741, 0.1538098927071081], 'false,false': [0.16695895310197195, 2.7755575615628915e-18], 'false,false,true': [0.18156887921550569, -2.7755575615628915e-18], 'true': [0.13383303496714402, 0.18571777082308316], 'true,false': [0.2086042550536528, 0.16502867164922919], 'true,false,true': [0.2392913258964572, 0.1572511428361861], 'true,false,false': [0.21452626109464817, 0.0]}, {'': [0.13425233268784217, 0.13960936674862665], 'false': [0.16604802426455226, 0.13680080849024218], 'false,true': [0.19644046491183043, 0.0003789026216266256], 'false,false': [0.12562162404816385, 0.15710392945273716], 'false,false,false': [0.23437500000000008, 0.13954892532285587], 'true': [0.13279404773296788, 0.18490811824883382], 'true,false': [0.20817039216510513, 0.16501937197776897], 'true,false,true': [0.2392032443811614, 0.1572480320355387]}, {'': [0.13346366193708728, 0.1389365361416089], 'false': [0.13297774554396044, 0.15108564250656237], 'false,false': [0.16493588624219982, 7.998375203190634e-05], 'false,false,true': [0.1808999508413744, -2.7755575615628915e-18], 'true': [0.1320020902586841, 0.18454233334867232], 'true,false': [0.11450346173840381, 0.19061034671222674], 'true,false,false': [0.22125189632514441, 0.1525317465045501], 'false,true': [0.11901574282926296, 0.20534027770656094]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
1;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
3;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,false;haswordvenue(A, F), haswordtitle(G, F).;true;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
6;true,false,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
6;false;haswordvenue(A, J), haswordauthor(K, J).;true;true
6;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
6;false,false,false;haswordvenue(A, N), haswordtitle(P, N).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
7;true,false,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
7;false;haswordvenue(A, J), haswordtitle(K, J).;true;true
7;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
7;false,false,true;title(N, M), venue(N, B).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(B, H), haswordauthor(I, H).;true;true
8;false,true;haswordauthor(I, J), haswordtitle(K, J).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
9;false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true
9;false,false,true;title(P, N), venue(P, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.645567590197122;  // std dev = 8.784, 461.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=363 */
%   | | | else return -0.109470112519535;  // std dev = 4.056, 525.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=17 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.12481560176617904;  // std dev = 2.422, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | | else return 0.38314893509951164;  // std dev = 3.158, 40.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=21 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.3581489350995123;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.5504566274072047;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.029035011048878824;  // std dev = 0.376, 158.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=27 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.5477382382997596;  // std dev = 8.784, 461.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=363 */
%   | | | else return -0.09665944156845033;  // std dev = 4.056, 525.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=17 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.10893247925776725;  // std dev = 2.422, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | | else return 0.3298442880375027;  // std dev = 3.158, 40.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=21 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.30874113578563506;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.050922032513554226;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.46952849908361544;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.025463711763229282;  // std dev = 0.376, 158.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=27 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.4346049847059449;  // std dev = 8.784, 461.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=363 */
%   | | | else return -0.08617990644098363;  // std dev = 4.056, 525.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=17 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.09391529972732654;  // std dev = 2.422, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | | else return 0.27281765923568413;  // std dev = 3.158, 40.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=21 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.2564123687585864;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.04434629760466851;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.37799101181885475;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.022270558611941566;  // std dev = 0.376, 158.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=27 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.11319983530422645;  // std dev = 0.369, 986.000 (wgt'ed) examples reached here.  /* #neg=606 #pos=380 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.08007894754642039;  // std dev = 2.422, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | | else return 0.2180014607516632;  // std dev = 3.158, 40.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=21 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.20613740734453972;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.038428662236904595;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.2914815096729242;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.007423010098154774;  // std dev = 0.366, 107.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=17 */
%   | else return 0.044622936797806594;  // std dev = 0.397, 51.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=10 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.09385679536646976;  // std dev = 0.365, 986.000 (wgt'ed) examples reached here.  /* #neg=606 #pos=380 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.06761908965918997;  // std dev = 2.422, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | | else return 0.1697836186604309;  // std dev = 3.158, 40.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=21 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.1616285754841467;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.03315494592188569;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.2199151733112511;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.11677498967616873;  // std dev = 0.445, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | else return 0.009429398188577963;  // std dev = 0.370, 147.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=24 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.07736551932651402;  // std dev = 0.361, 986.000 (wgt'ed) examples reached here.  /* #neg=606 #pos=380 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.05661907716341751;  // std dev = 2.422, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | | else return 0.1300146598473721;  // std dev = 3.158, 40.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=21 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return -0.024754965494063513;  // std dev = 0.626, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.09975109338277262;  // std dev = 1.706, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | | else return 0.22014323296469723;  // std dev = 1.483, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then return 0.004838389199949597;  // std dev = 0.366, 107.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=17 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return 0.2016161894283135;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return 0.004256945289077047;  // std dev = 0.369, 43.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=7 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.1211746007403736;  // std dev = 0.329, 35.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=16 */
%   | else if ( haswordtitle(F, C) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.06175477044525725;  // std dev = 11.110, 954.000 (wgt'ed) examples reached here.  /* #neg=588 #pos=366 */
%   | | | else return 0.0764927328459693;  // std dev = 3.986, 70.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=29 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.04399061071892465;  // std dev = 1.661, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | | else return 0.15362419328077112;  // std dev = 1.514, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then return 0.004206862068951711;  // std dev = 0.366, 107.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=17 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, B) )
%   | | | then return 0.0759994652394776;  // std dev = 2.735, 41.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=10 */
%   | | | else return -0.15910245811347595;  // std dev = 5.27e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.15910245811347595;  // std dev = 5.27e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.052419793342050595;  // std dev = 0.366, 1,056.000 (wgt'ed) examples reached here.  /* #neg=647 #pos=409 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.04930304186435468;  // std dev = 1.372, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return -0.023124519664994368;  // std dev = 0.886, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.1433899238400838;  // std dev = 0.404, 17.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=13 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( haswordauthor(I, J), haswordtitle(K, J) )
%   | | then return 0.11935538388933638;  // std dev = 0.445, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | else return -0.14952651514276027;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return -0.007905643643038527;  // std dev = 0.355, 95.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=14 */
%   | | else if ( haswordvenue(A, N), haswordauthor(P, N) )
%   | | | then return 0.15816677141700164;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.007163672675516693;  // std dev = 2.393, 41.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=7 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04263414010170233;  // std dev = 0.364, 1,056.000 (wgt'ed) examples reached here.  /* #neg=647 #pos=409 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.015470166504786506;  // std dev = 0.454, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
%   | | else return 0.11173259020293007;  // std dev = 0.405, 17.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=13 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.4303218132321692;  // std dev = 2.326, 23.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=14 */
%   | | | else return -0.1708414464171812;  // std dev = 0.164, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.08955222754814648;  // std dev = 0.242, 32.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return 0.06322559117540204;  // std dev = 2.923, 50.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=11 */
%   | | | else return -0.15666559574638114;  // std dev = 0.016, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.1390595411905773;  // std dev = 0.023, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.03420998019467218;  // std dev = 0.356, 988.000 (wgt'ed) examples reached here.  /* #neg=605 #pos=383 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.04953518712830718;  // std dev = 3.513, 61.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=23 */
%   | | | else return -0.04025836702511502;  // std dev = 1.309, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.03326954125776209;  // std dev = 1.371, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return -0.021802538045706678;  // std dev = 0.886, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.0673946777936433;  // std dev = 1.663, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0.15445166224484763;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return -0.004840200892858125;  // std dev = 0.342, 97.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=16 */
%   | else return 0.021243443499384545;  // std dev = 0.381, 61.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=11 */


Results
   AUC ROC   = 0.888025
   AUC PR    = 0.776554
   CLL	      = -0.435714
   Precision = 0.804556 at threshold = 0.5
   Recall    = 0.89826
   F1        = 0.84883


Total learning time: 1285.1369791030884 seconds
Total inference time: 6.934 seconds
AUC ROC: 0.888025


Results scoring model
   AUC ROC   = 0.891963
   AUC PR    = 0.775835
   CLL	      = -0.429272
   Precision = 0.786611 at threshold = 0.5
   Recall    = 0.828194
   F1        = 0.806867


Total scoring time: 19.435 seconds
Refined model CLL: -0.429272


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.888025
   AUC PR    = 0.776554
   CLL	      = -0.435714
   Precision = 0.804556 at threshold = 0.5
   Recall    = 0.89826
   F1        = 0.84883


Total learning time: 2571.0189739456177 seconds
Total inference time: 6.934 seconds
AUC ROC: 0.888025
Total revision time: 2571.0189739456177
Best scored revision CLL: -0.429272


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 20:51:22
{'AUC ROC': 0.888025, 'AUC PR': 0.776554, 'CLL': -0.435714, 'Precision': [0.804556, 0.5], 'Recall': 0.89826, 'F1': 0.84883, 'Learning time': 2571.0189739456177, 'Inference time': 6.934, 'parameter_0.2': {'AUC ROC': 0.885625, 'AUC PR': 0.772285, 'CLL': -0.438065, 'Precision': [0.799065, 0.5], 'Recall': 0.915663, 'F1': 0.8534, 'Learning time': 1249.1829948425293, 'Inference time': 6.047}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.645567590197122;  // std dev = 8.784, 461.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=363 */
%   | | | else return -0.109470112519535;  // std dev = 4.056, 525.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=17 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.12481560176617904;  // std dev = 2.422, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | | else return 0.38314893509951164;  // std dev = 3.158, 40.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=21 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.3581489350995123;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.5504566274072047;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.029035011048878824;  // std dev = 0.376, 158.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=27 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.5477382382997596;  // std dev = 8.784, 461.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=363 */
%   | | | else return -0.09665944156845033;  // std dev = 4.056, 525.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=17 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.10893247925776725;  // std dev = 2.422, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | | else return 0.3298442880375027;  // std dev = 3.158, 40.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=21 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.30874113578563506;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.050922032513554226;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.46952849908361544;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.025463711763229282;  // std dev = 0.376, 158.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=27 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.4346049847059449;  // std dev = 8.784, 461.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=363 */
%   | | | else return -0.08617990644098363;  // std dev = 4.056, 525.000 (wgt'ed) examples reached here.  /* #neg=508 #pos=17 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.09391529972732654;  // std dev = 2.422, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | | else return 0.27281765923568413;  // std dev = 3.158, 40.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=21 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.2564123687585864;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.04434629760466851;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.37799101181885475;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return 0.022270558611941566;  // std dev = 0.376, 158.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=27 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.11319983530422645;  // std dev = 0.369, 986.000 (wgt'ed) examples reached here.  /* #neg=606 #pos=380 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.08007894754642039;  // std dev = 2.422, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | | else return 0.2180014607516632;  // std dev = 3.158, 40.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=21 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.20613740734453972;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.038428662236904595;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.2914815096729242;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.12127177815253015;  // std dev = 0.445, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | else return 0.011809811547706177;  // std dev = 0.370, 147.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=24 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.09385679536646976;  // std dev = 0.365, 986.000 (wgt'ed) examples reached here.  /* #neg=606 #pos=380 */
%   | | else return 0.12599882051704175;  // std dev = 0.478, 70.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=29 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 0.1616285754841467;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.03315494592188569;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.2199151733112511;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then return 0.005486047788045262;  // std dev = 0.366, 107.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=17 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return 0.20729199603048926;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return 0.009811189263162877;  // std dev = 0.369, 43.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=7 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07888502807194256;  // std dev = 0.370, 1,056.000 (wgt'ed) examples reached here.  /* #neg=647 #pos=409 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.12455597792081965;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.02849510592572117;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.16499171197896098;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then return 0.004772289132577451;  // std dev = 0.366, 107.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=17 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, B) )
%   | | | then return 0.08098220132069911;  // std dev = 2.735, 41.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=10 */
%   | | | else return -0.15425514361017295;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.15425514361017295;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.0630214382639835;  // std dev = 0.361, 988.000 (wgt'ed) examples reached here.  /* #neg=605 #pos=383 */
%   | | else return 0.08696596886004013;  // std dev = 0.457, 68.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=26 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return -0.049609278882561926;  // std dev = 0.612, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.059766084274163966;  // std dev = 1.703, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | | else return 0.19330227423393362;  // std dev = 1.473, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return 0.07250894933161525;  // std dev = 0.439, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return -0.009551234468589027;  // std dev = 0.354, 88.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=13 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.04939021597015117;  // std dev = 2.960, 54.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
%   | | | else return -0.1351857644930115;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.05143176909209008;  // std dev = 0.359, 988.000 (wgt'ed) examples reached here.  /* #neg=605 #pos=383 */
%   | | else return 0.07008166738470784;  // std dev = 0.457, 68.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=26 */
%   | else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 0.05912665054287427;  // std dev = 1.383, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.0020169580930429975;  // std dev = 0.887, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.11160596776447299;  // std dev = 1.669, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0.17950735974930188;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then return 0.0011284537236338579;  // std dev = 0.365, 107.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=17 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return 0.15076861187360002;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | else return 0.007518890152674992;  // std dev = 0.366, 43.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=7 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04278292972611443;  // std dev = 0.364, 1,056.000 (wgt'ed) examples reached here.  /* #neg=647 #pos=409 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.04453116975377013;  // std dev = 1.382, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.0016969371451057702;  // std dev = 0.887, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.08470711882607541;  // std dev = 1.669, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0.15457028926554695;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then return 9.78496039809921E-4;  // std dev = 0.365, 107.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=17 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, B) )
%   | | | then return 0.0621463638584227;  // std dev = 2.725, 41.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=10 */
%   | | | else return -0.13494833806969686;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.12094285605459024;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03471279193124911;  // std dev = 0.363, 1,056.000 (wgt'ed) examples reached here.  /* #neg=647 #pos=409 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.06364883282887117;  // std dev = 0.590, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.0684786551237171;  // std dev = 0.436, 27.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=17 */
%   else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( title(J, H), venue(J, A) )
%   | | | then return 0.3801426632709905;  // std dev = 2.448, 25.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=14 */
%   | | | else return -0.1754778538711472;  // std dev = 0.195, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else return -0.08645715431432853;  // std dev = 0.241, 32.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return 0.05809634228227937;  // std dev = 2.932, 50.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=11 */
%   | | | else return -0.16115417625891928;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.10866267467341748;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.897047
   AUC PR    = 0.777698
   CLL	      = -0.435866
   Precision = 0.804556 at threshold = 0.5
   Recall    = 0.89826
   F1        = 0.84883


Total learning time: 1250.0928819179535 seconds
Total inference time: 6.32 seconds
AUC ROC: 0.897047


Dataset: 3_imdb_cora, Fold: 4, Type: Scratch (RDN-B), Time: 21:12:19
{'AUC ROC': 0.897047, 'AUC PR': 0.777698, 'CLL': -0.435866, 'Precision': [0.804556, 0.5], 'Recall': 0.89826, 'F1': 0.84883, 'Learning time': 1250.0928819179535, 'Inference time': 6.32}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.640987918150355;  // std dev = 12.668, 944.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=739 */
%   | | | else return -0.1099052759363074;  // std dev = 5.652, 1,033.000 (wgt'ed) examples reached here.  /* #neg=1,000 #pos=33 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.09814893509951236;  // std dev = 3.020, 50.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=12 */
%   | | | else return 0.2714822684328444;  // std dev = 4.265, 75.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=31 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.3966104735610508;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.1438632208137979;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.43709630352056494;  // std dev = 2.152, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.7956489350995123;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else return 0.03284773028023537;  // std dev = 0.380, 332.000 (wgt'ed) examples reached here.  /* #neg=274 #pos=58 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.543992141674265;  // std dev = 12.668, 944.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=739 */
%   | | | else return -0.09704570531128437;  // std dev = 5.652, 1,033.000 (wgt'ed) examples reached here.  /* #neg=1,000 #pos=33 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.08577634002911495;  // std dev = 3.020, 50.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=12 */
%   | | | else return 0.23512267046316226;  // std dev = 4.265, 75.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=31 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.3411827428099923;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.12543301544918353;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.3751785876229692;  // std dev = 2.152, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.6694131893798132;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else return 0.02880196559787699;  // std dev = 0.380, 332.000 (wgt'ed) examples reached here.  /* #neg=274 #pos=58 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.4319240491553207;  // std dev = 12.668, 944.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=739 */
%   | | | else return -0.0865292541776904;  // std dev = 5.652, 1,033.000 (wgt'ed) examples reached here.  /* #neg=1,000 #pos=33 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.07425307474542266;  // std dev = 3.020, 50.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=12 */
%   | | | else return 0.1980546174468884;  // std dev = 4.265, 75.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=31 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.2815735770744797;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.10782354562777509;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.30758572307646626;  // std dev = 2.152, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.5204603507259603;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else return 0.025176197370205707;  // std dev = 0.380, 332.000 (wgt'ed) examples reached here.  /* #neg=274 #pos=58 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11661629570569816;  // std dev = 0.379, 2,102.000 (wgt'ed) examples reached here.  /* #neg=1,287 #pos=815 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.2242781068616906;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.09150383240113759;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.5587608803477292;  // std dev = 0.210, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2786004538130679;  // std dev = 2.332, 31.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=22 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then return 0.0014531348515956384;  // std dev = 0.361, 214.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=33 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, A) )
%   | | | then return 0.07273772345339106;  // std dev = 4.221, 102.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=23 */
%   | | | else return 0.3472475273749598;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.1527524726250402;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.09432044742524928;  // std dev = 0.368, 1,983.000 (wgt'ed) examples reached here.  /* #neg=1,210 #pos=773 */
%   | | else return 0.1327700460101637;  // std dev = 0.468, 119.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=42 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.050111595723231366;  // std dev = 0.910, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.13962035934907635;  // std dev = 2.278, 21.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=11 */
%   | | | else return 0.28073340623443704;  // std dev = 2.011, 28.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=21 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then return 0.0012649764562466736;  // std dev = 0.361, 214.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=33 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, A) )
%   | | | then return 0.06308450349975939;  // std dev = 4.221, 102.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=23 */
%   | | | else return 0.29672123391141425;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.13401375520323128;  // std dev = 1.29e-08, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07935305062417673;  // std dev = 0.371, 2,102.000 (wgt'ed) examples reached here.  /* #neg=1,287 #pos=815 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.10987328608162707;  // std dev = 1.937, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   | | | else return 0.014418326642972448;  // std dev = 0.870, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.3971314925410885;  // std dev = 0.222, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.16665469217962497;  // std dev = 2.317, 31.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=22 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then return 0.0011010270608968302;  // std dev = 0.361, 214.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=33 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then if ( title(P, N), venue(P, A) )
%   | | | then return 0.05431934864608477;  // std dev = 4.221, 102.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=23 */
%   | | | else return 0.2444457651369416;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.11920918665082597;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06492340278196812;  // std dev = 0.369, 2,102.000 (wgt'ed) examples reached here.  /* #neg=1,287 #pos=815 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.06951003350080968;  // std dev = 0.475, 20.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=9 */
%   | | else return 0.1489083035516607;  // std dev = 0.398, 35.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=26 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, A) )
%   | | then return 0.5134192686203735;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordauthor(H, J), haswordtitle(K, J) )
%   | | | then return 0.12157068940571229;  // std dev = 2.083, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
%   | | | else return -0.141076344504055;  // std dev = 0.085, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return -0.015884760683655807;  // std dev = 0.344, 182.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=25 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.054289788116145536;  // std dev = 4.341, 105.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=25 */
%   | | | else return -0.10724947410217281;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05292034018492954;  // std dev = 0.367, 2,102.000 (wgt'ed) examples reached here.  /* #neg=1,287 #pos=815 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.02922421833994974;  // std dev = 0.826, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.10802197425419925;  // std dev = 0.437, 49.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=32 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( haswordauthor(H, I), haswordvenue(A, I) )
%   | | then return -0.1398000927302504;  // std dev = 0.058, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( author(J, H), venue(J, A) )
%   | | | then return 0.4344676448085955;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.040401819947366725;  // std dev = 2.159, 31.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=6 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return -0.01383484651135797;  // std dev = 0.344, 182.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=25 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.046037882387620965;  // std dev = 4.341, 105.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=25 */
%   | | | else return -0.0974047721590413;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04301367381595231;  // std dev = 0.365, 2,102.000 (wgt'ed) examples reached here.  /* #neg=1,287 #pos=815 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.23165599834549305;  // std dev = 1.671, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | | | else return -0.5282261060296362;  // std dev = 0.066, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return -0.10568244298364712;  // std dev = 0.690, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.14139621467024702;  // std dev = 1.991, 28.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=21 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then return 3.915827237870224E-4;  // std dev = 0.357, 214.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=33 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, A) )
%   | | | then return 0.031770554047057;  // std dev = 4.218, 102.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=23 */
%   | | | else return 0.17358220623120735;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.09375759375695703;  // std dev = 0.035, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.034885060808718484;  // std dev = 0.364, 2,102.000 (wgt'ed) examples reached here.  /* #neg=1,287 #pos=815 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.01423753015754588;  // std dev = 0.456, 20.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=9 */
%   | | else return 0.08225062119687898;  // std dev = 0.365, 35.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=26 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, A) )
%   | | then return 0.34825406858799907;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordauthor(H, J), haswordtitle(K, J) )
%   | | | then return 0.10112131517616353;  // std dev = 2.079, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
%   | | | else return -0.12281783694872829;  // std dev = 0.090, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return -0.01211765882152466;  // std dev = 0.344, 182.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=25 */
%   | | else if ( haswordvenue(A, N), haswordauthor(P, N) )
%   | | | then return 0.09204684950454053;  // std dev = 2.057, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | | else return 0.009959570341223231;  // std dev = 3.814, 91.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=19 */


Results
   AUC ROC   = 0.882843
   AUC PR    = 0.770988
   CLL	      = -0.438384
   Precision = 0.799065 at threshold = 0.5
   Recall    = 0.915663
   F1        = 0.8534


Total learning time: 2235.1556870937347 seconds
Total inference time: 5.467 seconds
AUC ROC: 0.882843


Results scoring model
   AUC ROC   = 0.8849
   AUC PR    = 0.771555
   CLL	      = -0.434071
   Precision = 0.784553 at threshold = 0.5
   Recall    = 0.85022
   F1        = 0.816068


Total scoring time: 27.476 seconds
Parameter learned model CLL: -0.434071


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,true': 'samebib(E, F), venue(F, B)', 'true,true,false': 'title(G, D), venue(G, B)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'title(J, I), venue(J, B)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)'}, {'true,true,true,true': [12.668, 205, 739], 'true,true,true,false': [5.652, 1, 33], 'true,true,false,true': [3.02, 38, 12], 'true,true,false,false': [4.265, 44, 31], 'true,false,true,true': [1.797, 6, 7], 'true,false,true,false': [1.195, 5, 2], 'true,false,false,true': [2.152, 8, 11], 'true,false,false,false': [0.968, 1, 15], 'false': [0.38, 274, 58]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,true': 'samebib(E, F), venue(F, B)', 'true,true,false': 'title(G, D), venue(G, B)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'title(J, I), venue(J, B)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)'}, {'true,true,true,true': [12.668, 205, 739], 'true,true,true,false': [5.652, 1, 33], 'true,true,false,true': [3.02, 38, 12], 'true,true,false,false': [4.265, 44, 31], 'true,false,true,true': [1.797, 6, 7], 'true,false,true,false': [1.195, 5, 2], 'true,false,false,true': [2.152, 8, 11], 'true,false,false,false': [0.968, 1, 15], 'false': [0.38, 274, 58]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,true': 'samebib(E, F), venue(F, B)', 'true,true,false': 'title(G, D), venue(G, B)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'title(J, I), venue(J, B)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)'}, {'true,true,true,true': [12.668, 205, 739], 'true,true,true,false': [5.652, 1, 33], 'true,true,false,true': [3.02, 38, 12], 'true,true,false,false': [4.265, 44, 31], 'true,false,true,true': [1.797, 6, 7], 'true,false,true,false': [1.195, 5, 2], 'true,false,false,true': [2.152, 8, 11], 'true,false,false,false': [0.968, 1, 15], 'false': [0.38, 274, 58]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, B)', 'true,false,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)', 'false,false,true': 'title(N, M), venue(N, A)'}, {'true,true': [0.379, 1, 815], 'true,false,true,true': [1.797, 6, 7], 'true,false,true,false': [1.195, 5, 2], 'true,false,false,true': [0.21, 0, 4], 'true,false,false,false': [2.332, 9, 22], 'false,true': [0.361, 181, 33], 'false,false,true,true': [4.221, 79, 23], 'false,false,true,false': [1.0, 2, 2], 'false,false,false': [0.0, 12, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,false': 'haswordvenue(B, F), haswordauthor(G, F)', 'true,false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)', 'false,false,true': 'title(N, M), venue(N, A)'}, {'true,true,true': [0.368, 1, 773], 'true,true,false': [0.468, 77, 42], 'true,false,true': [0.91, 3, 3], 'true,false,false,true': [2.278, 10, 11], 'true,false,false,false': [2.011, 7, 21], 'false,true': [0.361, 181, 33], 'false,false,true,true': [4.221, 79, 23], 'false,false,true,false': [1.0, 2, 2], 'false,false,false': [1.29e-08, 12, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false': 'haswordvenue(B, M), haswordtitle(N, M)', 'false,false,true': 'title(P, N), venue(P, A)'}, {'true,true': [0.371, 1, 815], 'true,false,true,true': [1.937, 8, 8], 'true,false,true,false': [0.87, 3, 1], 'true,false,false,true': [0.222, 0, 4], 'true,false,false,false': [2.317, 9, 22], 'false,true': [0.361, 181, 33], 'false,false,true,true': [4.221, 79, 23], 'false,false,true,false': [1.0, 2, 2], 'false,false,false': [0.0, 12, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false,true': 'author(I, H), venue(I, A)', 'false,true,false': 'haswordauthor(H, J), haswordtitle(K, J)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)', 'false,false,false': 'haswordvenue(B, N), haswordtitle(P, N)'}, {'true,true': [0.369, 1, 815], 'true,false,true': [0.475, 11, 9], 'true,false,false': [0.398, 9, 26], 'false,true,true': [0.816, 1, 2], 'false,true,false,true': [2.083, 16, 6], 'false,true,false,false': [0.085, 13, 0], 'false,false,true': [0.344, 157, 25], 'false,false,false,true': [4.341, 80, 25], 'false,false,false,false': [5.27e-09, 7, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false,true': 'haswordauthor(H, I), haswordvenue(A, I)', 'false,true,false': 'author(J, H), venue(J, A)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true': [0.367, 1, 815], 'true,false,true': [0.826, 3, 3], 'true,false,false': [0.437, 17, 32], 'false,true,true': [0.058, 4, 0], 'false,true,false,true': [0.816, 1, 2], 'false,true,false,false': [2.159, 25, 6], 'false,false,true': [0.344, 157, 25], 'false,false,false,true': [4.341, 80, 25], 'false,false,false,false': [0.0, 7, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, B)', 'true,false,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)', 'false,false,true': 'title(N, M), venue(N, A)'}, {'true,true': [0.365, 1, 815], 'true,false,true,true': [1.671, 4, 12], 'true,false,true,false': [0.066, 6, 0], 'true,false,false,true': [0.69, 3, 2], 'true,false,false,false': [1.991, 7, 21], 'false,true': [0.357, 181, 33], 'false,false,true,true': [4.218, 79, 23], 'false,false,true,false': [1.0, 2, 2], 'false,false,false': [0.035, 12, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false,true': 'author(I, H), venue(I, A)', 'false,true,false': 'haswordauthor(H, J), haswordtitle(K, J)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)', 'false,false,false': 'haswordvenue(A, N), haswordauthor(P, N)'}, {'true,true': [0.364, 1, 815], 'true,false,true': [0.456, 11, 9], 'true,false,false': [0.365, 9, 26], 'false,true,true': [0.816, 1, 2], 'false,true,false,true': [2.079, 16, 6], 'false,true,false,false': [0.09, 13, 0], 'false,false,true': [0.344, 157, 25], 'false,false,false,true': [2.057, 15, 6], 'false,false,false,false': [3.814, 72, 19]}]]
[{'': [0.23877795208710417, 0.14417912614312767], 'true': [0.23739454336907784, 0.23140495867768768], 'true,true': [0.2380077005953119, 0.22566400000000106], 'true,true,true': [0.1700021096667815, 0.03092525553163872], 'true,false': [0.2475, 0.19102040816326651], 'true,false,true': [0.24852071005917156, 0.20408163265306126], 'true,true,false': [0.18239999999999948, 0.24248888888889036], 'true,false,false': [0.24376731301939022, 0.05859374999999978]}, {'': [0.20288807968786465, 0.14417912614312528], 'true': [0.2013449527386063, 0.2172726717773903], 'true,false': [0.24355669042183298, 0.1806010281001474], 'true,false,true': [0.24852071005917173, 0.20408163265306117], 'true,true': [0.19985740582999828, 0.2238063716727219], 'true,true,false': [0.18239999999999995, 0.2424888888888895], 'true,true,true': [0.17000210966676457, 0.0309252555316389], 'true,false,false': [0.2437673130193907, 0.05859375]}, {'': [0.16953048733386003, 0.1441791261431259], 'true': [0.16783763866618795, 0.20347132831342624], 'true,false': [0.23983504717184173, 0.17036221037988203], 'true,false,true': [0.2485207100591716, 0.2040816326530612], 'true,false,false': [0.24376731301939072, 0.05859375000000022], 'true,true': [0.16439549527028785, 0.22213177060739647], 'true,true,false': [0.18240000000000037, 0.24248888888888975], 'true,true,true': [0.17000210966675386, 0.030925255531639263]}, {'': [0.14525299566336036, 0.1441791261431255], 'true': [0.14341010688584985, 0.194995572508343], 'true,false': [0.2369776322775977, 0.16459166346027065], 'true,false,true': [0.24852071005917173, 0.20408163265306117], 'true,false,false': [0.011026874499454886, 0.1754362046995332], 'false': [0.1304262380993961, 0.1669778799195622], 'false,false': [0.18022427910288247, -1.3877787807814457e-17], 'false,false,true': [0.17464436755094084, 0.25000000000000006]}, {'': [0.14175015206600097, 0.14331311578309794], 'false': [0.1304262380993979, 0.16509235316602214], 'false,false': [0.17947009964882002, 1.3877787807814457e-17], 'false,false,true': [0.1746443675509418, 0.25000000000000006], 'true': [0.1402022256594485, 0.1901246565166038], 'true,false': [0.13801727292026147, 0.1933470524992264], 'true,false,false': [0.24714024058651468, 0.14446806486178726], 'true,true': [0.13540393594654834, 0.218765603338927]}, {'': [0.1392010963987393, 0.1426215234675842], 'false': [0.13042623809939666, 0.1636004772380423], 'false,false': [0.17880057921803433, -2.3129646346357427e-18], 'false,false,true': [0.17464436755094248, 0.25], 'true': [0.13780505971728263, 0.18685598438342504], 'true,false': [0.22684295177779296, 0.16020722823365305], 'true,false,true': [0.23447052593678722, 0.1890433357166678], 'true,false,false': [0.01232943032355513, 0.17321742807218882]}, {'': [0.1372881585929091, 0.1420981811055593], 'false': [0.16420912945580063, 0.13888582438077984], 'false,true': [0.2222222222222222, 0.14032746147723393], 'false,true,false': [0.1972984646731841, 0.0005539597509509651], 'false,false': [0.11849414321941643, 0.16978791113207267], 'false,false,false': [0.17947617188016673, 3.96508223080413e-18], 'true': [0.13597786004036133, 0.18440541521036466], 'true,false': [0.22603758801796486, 0.15832320752760737]}, {'': [0.1359029598991699, 0.14070887390846037], 'false': [0.1557715852389455, 0.13850931528576083], 'false,true': [0.0008352734412690951, 0.1691348451307228], 'false,true,false': [0.2222222222222222, 0.15029548576125026], 'false,false': [0.1184941432194184, 0.1694296584838406], 'false,false,false': [0.17943898185296797, 0.0], 'true': [0.13459981643293564, 0.18413743296129206], 'true,false': [0.11368762098197356, 0.190709047745332]}, {'': [0.1348545073888676, 0.13977888740662917], 'false': [0.12761190126730879, 0.16149087239770532], 'false,false': [0.17801942814912167, 0.00010115644669800652], 'false,false,true': [0.17443777214649372, 0.24999999999999997], 'true': [0.133556070213047, 0.18365157891343722], 'true,false': [0.24165274721730803, 0.142453194113129], 'true,false,true': [0.17451948293652222, 0.0007323761724397452], 'true,false,false': [0.09520550239167977, 0.1416406056980988]}, {'': [0.13351067803521982, 0.13951904311904184], 'false': [0.15017830225558043, 0.13794070855616], 'false,true': [0.22222222222222218, 0.13538957250837744], 'false,false': [0.11849414321941755, 0.1686722990389311], 'false,false,false': [0.20151188955566365, 0.15983049673402627], 'false,true,false': [0.19639585842695395, 0.0006260980036152791], 'true': [0.13276103535354125, 0.1616614440060319], 'true,false': [0.20793457577222077, 0.13353755240617993]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(A, J), haswordtitle(K, J).;true;true
3;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(A, J), haswordtitle(K, J).;true;true
4;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;true
5;false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(B, G), haswordauthor(H, G).;true;true
6;false,true;author(I, H), venue(I, A).;true;true
6;false,true,false;haswordauthor(H, J), haswordtitle(K, J).;true;true
6;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
6;false,false,false;haswordvenue(B, N), haswordtitle(P, N).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(B, G), haswordauthor(H, G).;true;true
7;false,true;haswordauthor(H, I), haswordvenue(A, I).;true;true
7;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;true
7;false,false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,false;haswordvenue(B, E), haswordtitle(F, E).;true;true
8;true,false,true;title(G, F), venue(G, B).;true;true
8;false;haswordvenue(A, J), haswordtitle(K, J).;true;true
8;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(B, G), haswordauthor(H, G).;true;true
9;false,true;author(I, H), venue(I, A).;true;true
9;false,true,false;haswordauthor(H, J), haswordtitle(K, J).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.640987918150355;  // std dev = 12.668, 944.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=739 */
%   | | | else return -0.1099052759363074;  // std dev = 5.652, 1,033.000 (wgt'ed) examples reached here.  /* #neg=1,000 #pos=33 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.09814893509951236;  // std dev = 3.020, 50.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=12 */
%   | | | else return 0.2714822684328444;  // std dev = 4.265, 75.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=31 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.3966104735610508;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.1438632208137979;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.43709630352056494;  // std dev = 2.152, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.7956489350995123;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else return 0.03284773028023537;  // std dev = 0.380, 332.000 (wgt'ed) examples reached here.  /* #neg=274 #pos=58 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.543992141674265;  // std dev = 12.668, 944.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=739 */
%   | | | else return -0.09704570531128437;  // std dev = 5.652, 1,033.000 (wgt'ed) examples reached here.  /* #neg=1,000 #pos=33 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.08577634002911495;  // std dev = 3.020, 50.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=12 */
%   | | | else return 0.23512267046316226;  // std dev = 4.265, 75.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=31 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.3411827428099923;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.12543301544918353;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.3751785876229692;  // std dev = 2.152, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.6694131893798132;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else return 0.02880196559787699;  // std dev = 0.380, 332.000 (wgt'ed) examples reached here.  /* #neg=274 #pos=58 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.4319240491553207;  // std dev = 12.668, 944.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=739 */
%   | | | else return -0.0865292541776904;  // std dev = 5.652, 1,033.000 (wgt'ed) examples reached here.  /* #neg=1,000 #pos=33 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.07425307474542266;  // std dev = 3.020, 50.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=12 */
%   | | | else return 0.1980546174468884;  // std dev = 4.265, 75.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=31 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.2815735770744797;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.10782354562777509;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.30758572307646626;  // std dev = 2.152, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.5204603507259603;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else return 0.025176197370205707;  // std dev = 0.380, 332.000 (wgt'ed) examples reached here.  /* #neg=274 #pos=58 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11661629570569816;  // std dev = 0.379, 2,102.000 (wgt'ed) examples reached here.  /* #neg=1,287 #pos=815 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.2242781068616906;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.09150383240113759;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.5587608803477292;  // std dev = 0.210, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2786004538130679;  // std dev = 2.332, 31.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=22 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then return 0.0014531348515956384;  // std dev = 0.361, 214.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=33 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, A) )
%   | | | then return 0.07273772345339106;  // std dev = 4.221, 102.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=23 */
%   | | | else return 0.3472475273749598;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.1527524726250402;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.09432044742524928;  // std dev = 0.368, 1,983.000 (wgt'ed) examples reached here.  /* #neg=1,210 #pos=773 */
%   | | else return 0.1327700460101637;  // std dev = 0.468, 119.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=42 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.050111595723231366;  // std dev = 0.910, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.13962035934907635;  // std dev = 2.278, 21.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=11 */
%   | | | else return 0.28073340623443704;  // std dev = 2.011, 28.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=21 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then return 0.0012649764562466736;  // std dev = 0.361, 214.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=33 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, A) )
%   | | | then return 0.06308450349975939;  // std dev = 4.221, 102.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=23 */
%   | | | else return 0.29672123391141425;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.13401375520323128;  // std dev = 1.29e-08, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07935305062417673;  // std dev = 0.371, 2,102.000 (wgt'ed) examples reached here.  /* #neg=1,287 #pos=815 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.11809827138350222;  // std dev = 1.755, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.040052622270341946;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | | then return 0.3971314925410885;  // std dev = 0.222, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.16665469217962497;  // std dev = 2.317, 31.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=22 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then return 0.0011010270608968302;  // std dev = 0.361, 214.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=33 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, A) )
%   | | | then return 0.05431934864608477;  // std dev = 4.221, 102.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=23 */
%   | | | else return 0.2444457651369416;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.11920918665082597;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06492340278196812;  // std dev = 0.369, 2,102.000 (wgt'ed) examples reached here.  /* #neg=1,287 #pos=815 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return -0.007376122099972293;  // std dev = 0.848, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.13556707029425757;  // std dev = 0.436, 49.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=32 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, A) )
%   | | then return 0.5134192686203735;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordauthor(H, J), haswordtitle(K, J) )
%   | | | then return 0.12157068940571229;  // std dev = 2.083, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
%   | | | else return -0.141076344504055;  // std dev = 0.085, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return -0.015884760683655807;  // std dev = 0.344, 182.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=25 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.054289788116145536;  // std dev = 4.341, 105.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=25 */
%   | | | else return -0.10724947410217281;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.08875854393067668;  // std dev = 0.305, 71.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=30 */
%   | else return 0.052749176843838154;  // std dev = 0.371, 2,086.000 (wgt'ed) examples reached here.  /* #neg=1,266 #pos=820 */
%   else if ( haswordvenue(A, F), haswordtitle(G, F) )
%   | then if ( haswordtitle(G, H), haswordvenue(B, H) )
%   | | then if ( haswordtitle(G, I), haswordauthor(J, I) )
%   | | | then return -0.15119748387399498;  // std dev = 4.34e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return 0.02622187096471474;  // std dev = 3.008, 62.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=11 */
%   | | else if ( title(K, G), venue(K, A) )
%   | | | then return 0.046014339089872035;  // std dev = 4.054, 104.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=21 */
%   | | | else return -0.061970063681647765;  // std dev = 0.955, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, A) )
%   | | | then return 0.038630160870434006;  // std dev = 4.219, 102.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=23 */
%   | | | else return 0.18362251046305408;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.0982645791305487;  // std dev = 0.023, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04284271428231081;  // std dev = 0.365, 2,102.000 (wgt'ed) examples reached here.  /* #neg=1,287 #pos=815 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.030289645173647912;  // std dev = 0.471, 20.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=9 */
%   | | else return 0.10866000612936391;  // std dev = 0.400, 35.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=26 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, A) )
%   | | then return 0.4261632195283526;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordauthor(H, J), haswordtitle(K, J) )
%   | | | then return 0.10017244872354084;  // std dev = 2.079, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
%   | | | else return -0.1261952050244113;  // std dev = 0.098, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return -0.013230561263171884;  // std dev = 0.342, 182.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=25 */
%   | | else if ( haswordvenue(A, N), haswordauthor(P, N) )
%   | | | then return 0.09758458602070495;  // std dev = 2.058, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | | else return 0.015344925072759296;  // std dev = 3.816, 91.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=19 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.06425793658082553;  // std dev = 0.298, 71.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=30 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.0322451634459608;  // std dev = 0.296, 66.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=23 */
%   | | else return 0.03454869491512209;  // std dev = 0.370, 2,020.000 (wgt'ed) examples reached here.  /* #neg=1,223 #pos=797 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, A) )
%   | | then return 0.3401007145831089;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordauthor(I, K), haswordtitle(L, K) )
%   | | | then return 0.08541969760097104;  // std dev = 2.079, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
%   | | | else return -0.11300415140810541;  // std dev = 0.089, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return -0.01154716375852081;  // std dev = 0.342, 182.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=25 */
%   | | else if ( haswordvenue(B, P), haswordtitle(Q, P) )
%   | | | then return 0.03378545521951221;  // std dev = 4.333, 105.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=25 */
%   | | | else return -0.09135282603807302;  // std dev = 0.006, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */


Results
   AUC ROC   = 0.887849
   AUC PR    = 0.794394
   CLL	      = -0.438264
   Precision = 0.799065 at threshold = 0.5
   Recall    = 0.915663
   F1        = 0.8534


Total learning time: 2270.149644136429 seconds
Total inference time: 5.504 seconds
AUC ROC: 0.887849


Results scoring model
   AUC ROC   = 0.885546
   AUC PR    = 0.781411
   CLL	      = -0.434582
   Precision = 0.780586 at threshold = 0.5
   Recall    = 0.85022
   F1        = 0.813917


Total scoring time: 28.301 seconds
Refined model CLL: -0.434582


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.882843
   AUC PR    = 0.770988
   CLL	      = -0.438384
   Precision = 0.799065 at threshold = 0.5
   Recall    = 0.915663
   F1        = 0.8534


Total learning time: 4561.0823312301645 seconds
Total inference time: 5.467 seconds
AUC ROC: 0.882843
Total revision time: 4561.0823312301645
Best scored revision CLL: -0.434071


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 22:28:36
{'AUC ROC': 0.882843, 'AUC PR': 0.770988, 'CLL': -0.438384, 'Precision': [0.799065, 0.5], 'Recall': 0.915663, 'F1': 0.8534, 'Learning time': 4561.0823312301645, 'Inference time': 5.467, 'parameter_0.4': {'AUC ROC': 0.882843, 'AUC PR': 0.770988, 'CLL': -0.438384, 'Precision': [0.799065, 0.5], 'Recall': 0.915663, 'F1': 0.8534, 'Learning time': 2235.1556870937347, 'Inference time': 5.467}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.640987918150355;  // std dev = 12.668, 944.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=739 */
%   | | | else return -0.1099052759363074;  // std dev = 5.652, 1,033.000 (wgt'ed) examples reached here.  /* #neg=1,000 #pos=33 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.09814893509951236;  // std dev = 3.020, 50.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=12 */
%   | | | else return 0.2714822684328444;  // std dev = 4.265, 75.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=31 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.3966104735610508;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.1438632208137979;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.43709630352056494;  // std dev = 2.152, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.7956489350995123;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else return 0.03284773028023537;  // std dev = 0.380, 332.000 (wgt'ed) examples reached here.  /* #neg=274 #pos=58 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.543992141674265;  // std dev = 12.668, 944.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=739 */
%   | | | else return -0.09704570531128437;  // std dev = 5.652, 1,033.000 (wgt'ed) examples reached here.  /* #neg=1,000 #pos=33 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.08577634002911495;  // std dev = 3.020, 50.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=12 */
%   | | | else return 0.23512267046316226;  // std dev = 4.265, 75.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=31 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.3411827428099923;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.12543301544918353;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.3751785876229692;  // std dev = 2.152, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.6694131893798132;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else return 0.02880196559787699;  // std dev = 0.380, 332.000 (wgt'ed) examples reached here.  /* #neg=274 #pos=58 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.4319240491553207;  // std dev = 12.668, 944.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=739 */
%   | | | else return -0.0865292541776904;  // std dev = 5.652, 1,033.000 (wgt'ed) examples reached here.  /* #neg=1,000 #pos=33 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.07425307474542266;  // std dev = 3.020, 50.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=12 */
%   | | | else return 0.1980546174468884;  // std dev = 4.265, 75.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=31 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.2815735770744797;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.10782354562777509;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.30758572307646626;  // std dev = 2.152, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.5204603507259603;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else return 0.025176197370205707;  // std dev = 0.380, 332.000 (wgt'ed) examples reached here.  /* #neg=274 #pos=58 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.11661629570569816;  // std dev = 0.379, 2,102.000 (wgt'ed) examples reached here.  /* #neg=1,287 #pos=815 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.2242781068616906;  // std dev = 1.797, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.09150383240113759;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.24271717457728084;  // std dev = 2.152, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.3912519545392304;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then return 0.0014531348515956384;  // std dev = 0.361, 214.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=33 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, A) )
%   | | | then return 0.07273772345339106;  // std dev = 4.221, 102.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=23 */
%   | | | else return 0.3472475273749598;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.1527524726250402;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.09432044742524928;  // std dev = 0.368, 1,983.000 (wgt'ed) examples reached here.  /* #neg=1,210 #pos=773 */
%   | | else return 0.1327700460101637;  // std dev = 0.468, 119.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=42 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.06488010519841338;  // std dev = 0.955, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.15025468689208638;  // std dev = 2.292, 21.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=11 */
%   | | | else return 0.26985044140928865;  // std dev = 2.009, 28.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=21 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then return 0.0012649764562466736;  // std dev = 0.361, 214.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=33 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, A) )
%   | | | then return 0.06308450349975939;  // std dev = 4.221, 102.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=23 */
%   | | | else return 0.29672123391141425;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.13401375520323128;  // std dev = 1.29e-08, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07935305062417673;  // std dev = 0.371, 2,102.000 (wgt'ed) examples reached here.  /* #neg=1,287 #pos=815 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.11133801859025147;  // std dev = 1.941, 16.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=8 */
%   | | | else return 0.013355820679410886;  // std dev = 0.868, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | | then return 0.45209740621387395;  // std dev = 0.262, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.15996301833445353;  // std dev = 2.303, 31.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=22 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then return 0.0011010270608968302;  // std dev = 0.361, 214.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=33 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then if ( title(P, N), venue(P, A) )
%   | | | then return 0.05431934864608477;  // std dev = 4.221, 102.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=23 */
%   | | | else return 0.2444457651369416;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.11920918665082597;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.063077633374737;  // std dev = 0.362, 1,983.000 (wgt'ed) examples reached here.  /* #neg=1,210 #pos=773 */
%   | | else return 0.0956810560133695;  // std dev = 0.467, 119.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=42 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.0010614983746311906;  // std dev = 0.877, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.07606645886279703;  // std dev = 2.282, 21.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=11 */
%   | | | else return 0.17980315991050352;  // std dev = 1.993, 28.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=21 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then return 9.582094303423434E-4;  // std dev = 0.361, 214.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=33 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, A) )
%   | | | then return 0.04647479830475275;  // std dev = 4.221, 102.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=23 */
%   | | | else return 0.19524573183420624;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.1072494741021728;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05291308540034611;  // std dev = 0.367, 2,102.000 (wgt'ed) examples reached here.  /* #neg=1,287 #pos=815 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.056166617648254466;  // std dev = 1.727, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.004325839024703816;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else return 0.12639337223284602;  // std dev = 0.399, 35.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=26 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( haswordauthor(I, J), haswordtitle(K, J) )
%   | | then return 0.12189944844763487;  // std dev = 0.444, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
%   | | else return -0.01641603598214075;  // std dev = 0.327, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return -0.016009141779886136;  // std dev = 0.344, 182.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=25 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.04598835538128006;  // std dev = 4.337, 105.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=25 */
%   | | | else return -0.0974047721590413;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.043003899604782625;  // std dev = 0.365, 2,102.000 (wgt'ed) examples reached here.  /* #neg=1,287 #pos=815 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.016522559536616053;  // std dev = 1.761, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | else return 0.05692068096855684;  // std dev = 1.144, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0.0992093754518942;  // std dev = 0.399, 35.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=26 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( haswordauthor(I, J), haswordtitle(K, J) )
%   | | then return 0.10563259262533474;  // std dev = 0.444, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
%   | | else return -0.01444593986278964;  // std dev = 0.327, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return -0.013941888501505208;  // std dev = 0.344, 182.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=25 */
%   | | else if ( haswordvenue(A, N), haswordauthor(P, N) )
%   | | | then return 0.0976490323945532;  // std dev = 2.058, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | | else return 0.015370113577130803;  // std dev = 3.816, 91.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=19 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.05480417912752361;  // std dev = 0.303, 76.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=30 */
%   | else return 0.03475831119957126;  // std dev = 0.368, 2,081.000 (wgt'ed) examples reached here.  /* #neg=1,261 #pos=820 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, A) )
%   | | then return 0.5172595532031351;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( haswordauthor(G, I), haswordtitle(J, I) )
%   | | | then return 0.09042928790679641;  // std dev = 2.081, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
%   | | | else return -0.1350367968308289;  // std dev = 0.101, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordvenue(B, M) )
%   | | | then return -0.038411806506893575;  // std dev = 3.127, 99.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=11 */
%   | | | else return 0.019151781177176225;  // std dev = 3.412, 83.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=14 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.03382073171389276;  // std dev = 4.333, 105.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=25 */
%   | | | else return -0.09142680171066155;  // std dev = 0.006, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */


Results
   AUC ROC   = 0.888307
   AUC PR    = 0.795455
   CLL	      = -0.438528
   Precision = 0.799065 at threshold = 0.5
   Recall    = 0.915663
   F1        = 0.8534


Total learning time: 2278.3072187900543 seconds
Total inference time: 5.687 seconds
AUC ROC: 0.888307


Dataset: 3_imdb_cora, Fold: 4, Type: Scratch (RDN-B), Time: 23:06:42
{'AUC ROC': 0.888307, 'AUC PR': 0.795455, 'CLL': -0.438528, 'Precision': [0.799065, 0.5], 'Recall': 0.915663, 'F1': 0.8534, 'Learning time': 2278.3072187900543, 'Inference time': 5.687}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2515460347601058;  // std dev = 0.489, 3,241.000 (wgt'ed) examples reached here.  /* #neg=1,966 #pos=1,275 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.051697322196286546;  // std dev = 2.200, 31.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=6 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.004815601766178767;  // std dev = 4.333, 150.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=22 */
%   | | | else return 0.06476050534744562;  // std dev = 4.454, 121.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=25 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.06834001790205903;  // std dev = 5.105, 157.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=33 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21808742386740057;  // std dev = 0.489, 3,241.000 (wgt'ed) examples reached here.  /* #neg=1,966 #pos=1,275 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.04528697921890131;  // std dev = 2.200, 31.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=6 */
%   | | else return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.24971597818465793;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.0436465726755166;  // std dev = 2.534, 42.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=8 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.022533814940950976;  // std dev = 6.114, 267.000 (wgt'ed) examples reached here.  /* #neg=222 #pos=45 */
%   | | | else return 0.04711470944222787;  // std dev = 4.476, 128.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=25 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C), haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.20909874143578192;  // std dev = 1.29e-08, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.38181034947330944;  // std dev = 3.261, 44.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=26 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return -0.013020310063233023;  // std dev = 2.835, 51.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=10 */
%   | | | else return 0.3742345918975513;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | else return 0.18501514212145498;  // std dev = 0.489, 3,126.000 (wgt'ed) examples reached here.  /* #neg=1,894 #pos=1,232 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then return 0.02104077774521734;  // std dev = 0.375, 311.000 (wgt'ed) examples reached here.  /* #neg=258 #pos=53 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return 0.047364942216057436;  // std dev = 5.041, 159.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=32 */
%   | | | else return 0.17959621232362413;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return -0.12980071019519257;  // std dev = 0.035, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, C), haswordtitle(F, C) )
%   | | then return 0.7208247238742216;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.2737885348624758;  // std dev = 2.957, 38.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=20 */
%   | | | else return 0.02917321781829377;  // std dev = 3.676, 73.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=19 */
%   | else return 0.15277469058474422;  // std dev = 0.489, 3,126.000 (wgt'ed) examples reached here.  /* #neg=1,894 #pos=1,232 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return -0.006977364357372877;  // std dev = 0.339, 51.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=7 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordauthor(K, L), haswordtitle(M, L) )
%   | | | then return 0.09933135758197756;  // std dev = 2.425, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
%   | | | else return -0.0378264744047425;  // std dev = 1.282, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.015097838188563266;  // std dev = 6.109, 267.000 (wgt'ed) examples reached here.  /* #neg=222 #pos=45 */
%   | | | else return 0.03946371979845585;  // std dev = 4.470, 128.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=25 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12311748870521926;  // std dev = 0.488, 3,241.000 (wgt'ed) examples reached here.  /* #neg=1,966 #pos=1,275 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.38271879211320814;  // std dev = 4.277, 74.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=40 */
%   | | | else return -0.1493490753068059;  // std dev = 1.015, 145.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=1 */
%   | | else if ( haswordtitle(E, H), haswordauthor(I, H) )
%   | | | then return -0.1018646914535585;  // std dev = 1.361, 40.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=2 */
%   | | | else return 0.04203743214962767;  // std dev = 2.844, 52.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=10 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, B) )
%   | | | then return 0.037964402331527;  // std dev = 5.032, 159.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=32 */
%   | | | else return 0.15036788415499489;  // std dev = 1.159, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return -0.11847293222176154;  // std dev = 0.037, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D), haswordtitle(F, C) )
%   | | then if ( haswordauthor(G, C) )
%   | | | then return 0.5261296687332604;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2687357245655573;  // std dev = 3.097, 39.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=22 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return -0.11255213738560255;  // std dev = 2.886, 55.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=10 */
%   | | | else return 0.35447923298269896;  // std dev = 1.409, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.2053726779634107;  // std dev = 2.707, 35.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=18 */
%   | | | else return -0.03341637811550991;  // std dev = 3.334, 64.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=15 */
%   | | else return 0.10002031038063092;  // std dev = 0.489, 3,035.000 (wgt'ed) examples reached here.  /* #neg=1,835 #pos=1,200 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.043086717822306914;  // std dev = 0.401, 52.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=11 */
%   | else return 0.012127257739859024;  // std dev = 0.364, 441.000 (wgt'ed) examples reached here.  /* #neg=365 #pos=76 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( haswordauthor(D, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, C) )
%   | | | then return 0.39615411591896743;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.07880631008001102;  // std dev = 1.363, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | else return 0.4226125452113285;  // std dev = 0.748, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.07641204074045138;  // std dev = 0.487, 3,226.000 (wgt'ed) examples reached here.  /* #neg=1,961 #pos=1,265 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( haswordauthor(H, I), haswordtitle(J, I) )
%   | | then return 0.09376074007536228;  // std dev = 0.440, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
%   | | else return -0.06157947626861524;  // std dev = 0.298, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then return -0.01947649660028709;  // std dev = 0.313, 46.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=6 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.007128561084326769;  // std dev = 6.017, 267.000 (wgt'ed) examples reached here.  /* #neg=222 #pos=45 */
%   | | | else return 0.028304879728285035;  // std dev = 4.203, 128.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=25 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06033255770968227;  // std dev = 0.487, 3,241.000 (wgt'ed) examples reached here.  /* #neg=1,966 #pos=1,275 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then return 0.07962258167610622;  // std dev = 0.440, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return 0.19982514871111107;  // std dev = 1.116, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.1436644790708697;  // std dev = 0.098, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return -0.017059146061224134;  // std dev = 5.368, 234.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=34 */
%   | | | else return 0.10924008894955305;  // std dev = 2.648, 41.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.03023602767541533;  // std dev = 4.669, 155.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=31 */
%   | | | else return -0.10835998213117876;  // std dev = 0.031, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.56959221724529;  // std dev = 0.181, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.3331965085362715;  // std dev = 0.336, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return -0.05277937043812356;  // std dev = 3.266, 66.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=17 */
%   | | | else return 0.17905889121220195;  // std dev = 1.675, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | else return 0.047430846578833924;  // std dev = 0.488, 3,126.000 (wgt'ed) examples reached here.  /* #neg=1,894 #pos=1,232 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then return -0.012390600579806836;  // std dev = 0.319, 51.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=7 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then return 0.0052283348592963245;  // std dev = 0.360, 271.000 (wgt'ed) examples reached here.  /* #neg=224 #pos=47 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.03370696324273693;  // std dev = 5.060, 157.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=33 */
%   | | | else return -0.10424509718171518;  // std dev = 0.056, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.42646795786183395;  // std dev = 0.410, 1,483.000 (wgt'ed) examples reached here.  /* #neg=324 #pos=1,159 */
%   | | else return -0.30355245941435666;  // std dev = 0.184, 1,731.000 (wgt'ed) examples reached here.  /* #neg=1,675 #pos=56 */
%   | else if ( title(G, D), venue(G, A) )
%   | | then return -0.1253983812037397;  // std dev = 0.404, 82.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=17 */
%   | | else if ( haswordvenue(A, C) )
%   | | | then return 0.06600644163069756;  // std dev = 5.368, 118.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=50 */
%   | | | else return -0.031889012145630516;  // std dev = 3.293, 90.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=12 */
%   else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.4414390108337675;  // std dev = 3.758, 66.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=44 */
%   | | | else return -0.183287577195373;  // std dev = 0.481, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | | else return -0.08833875559649727;  // std dev = 0.368, 19.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
%   | else return 0.26723192307225907;  // std dev = 0.376, 40.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=21 */


Results
   AUC ROC   = 0.899051
   AUC PR    = 0.820551
   CLL	      = -0.551112
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.022758
   F1        = 0.044503


Total learning time: 1443.9890418052673 seconds
Total inference time: 3.916 seconds
AUC ROC: 0.899051


Results scoring model
   AUC ROC   = 0.889972
   AUC PR    = 0.788458
   CLL	      = -0.527898
   Precision = 0.980392 at threshold = 0.5
   Recall    = 0.036711
   F1        = 0.070771


Total scoring time: 19.062 seconds
Parameter learned model CLL: -0.527898


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'haswordauthor(E, F), haswordtitle(G, F)', 'false,true,true': 'haswordtitle(G, D)', 'false,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'false,false,true': 'haswordtitle(I, J), haswordvenue(A, J)', 'false,false,false': 'haswordvenue(A, K), haswordtitle(L, K)'}, {'true': [0.489, 1, 1], 'false,true,true,true': [0.866, 3, 1], 'false,true,true,false': [2.2, 25, 6], 'false,true,false': [0.0, 16, 0], 'false,false,true,true': [4.333, 128, 22], 'false,false,true,false': [4.454, 96, 25], 'false,false,false,true': [5.105, 124, 33], 'false,false,false,false': [0.0, 14, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'haswordauthor(E, F), haswordtitle(G, F)', 'false,true,true': 'haswordtitle(G, D)', 'false,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,false,true': 'author(J, I), venue(J, A)', 'false,false,false': 'haswordvenue(A, K), haswordtitle(L, K)'}, {'true': [0.489, 1, 1], 'false,true,true,true': [0.866, 3, 1], 'false,true,true,false': [2.2, 25, 6], 'false,true,false': [7.45e-09, 16, 0], 'false,false,true,true': [1.095, 3, 2], 'false,false,true,false': [2.534, 34, 8], 'false,false,false,true': [6.114, 222, 45], 'false,false,false,false': [4.476, 103, 25]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, C), haswordtitle(F, D)', 'true,true,true': 'author(G, E), venue(G, A)', 'true,true,false': 'haswordtitle(H, C)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false,true': 'title(M, L), venue(M, B)'}, {'true,true,true,true': [1.29e-08, 8, 0], 'true,true,true,false': [3.261, 18, 26], 'true,true,false,true': [2.835, 41, 10], 'true,true,false,false': [1.708, 5, 7], 'true,false': [0.489, 1, 1], 'false,true': [0.375, 258, 53], 'false,false,true,true': [5.041, 127, 32], 'false,false,true,false': [1.155, 4, 2], 'false,false,false': [0.035, 17, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordauthor(E, C), haswordtitle(F, C)', 'true,true,false': 'author(G, E), venue(G, B)', 'false': 'haswordvenue(A, H), haswordauthor(I, H)', 'false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,false,true': 'haswordauthor(K, L), haswordtitle(M, L)', 'false,false,false': 'haswordvenue(A, N), haswordtitle(P, N)'}, {'true,true,true': [0.0, 0, 4], 'true,true,false,true': [2.957, 18, 20], 'true,true,false,false': [3.676, 54, 19], 'true,false': [0.489, 1, 1], 'false,true': [0.339, 44, 7], 'false,false,true,true': [2.425, 23, 8], 'false,false,true,false': [1.282, 14, 2], 'false,false,false,true': [6.109, 222, 45], 'false,false,false,false': [4.47, 103, 25]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordtitle(E, D)', 'false,true': 'title(F, E), venue(F, A)', 'false,true,true': 'samebib(F, G), venue(G, B)', 'false,true,false': 'haswordtitle(E, H), haswordauthor(I, H)', 'false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,false,true': 'title(L, K), venue(L, B)'}, {'true': [0.488, 1, 1], 'false,true,true,true': [4.277, 34, 40], 'false,true,true,false': [1.015, 144, 1], 'false,true,false,true': [1.361, 38, 2], 'false,true,false,false': [2.844, 42, 10], 'false,false,true,true': [5.032, 127, 32], 'false,false,true,false': [1.159, 4, 2], 'false,false,false': [0.037, 17, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D), haswordtitle(F, C)', 'true,true,true': 'haswordauthor(G, C)', 'true,true,false': 'haswordtitle(H, C)', 'true,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'true,false,true': 'author(K, J), venue(K, A)', 'false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true,true': [0.0, 0, 4], 'true,true,true,false': [3.097, 17, 22], 'true,true,false,true': [2.886, 45, 10], 'true,true,false,false': [1.409, 3, 6], 'true,false,true,true': [2.707, 17, 18], 'true,false,true,false': [3.334, 49, 15], 'true,false,false': [0.489, 1, 1], 'false,true': [0.401, 41, 11], 'false,false': [0.364, 365, 76]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordauthor(D, C)', 'true,true': 'haswordauthor(D, E), haswordtitle(F, E)', 'true,true,true': 'haswordtitle(F, C)', 'false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false,true': 'haswordauthor(H, I), haswordtitle(J, I)', 'false,false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true,true,true': [0.0, 0, 4], 'true,true,true,false': [1.363, 4, 3], 'true,true,false': [0.748, 1, 3], 'true,false': [0.487, 1, 1], 'false,true,true': [0.44, 24, 9], 'false,true,false': [0.298, 17, 2], 'false,false,true': [0.313, 40, 6], 'false,false,false,true': [6.017, 222, 45], 'false,false,false,false': [4.203, 103, 25]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,true': 'haswordauthor(E, F), haswordtitle(G, F)', 'false,true,false': 'author(H, E), venue(H, A)', 'false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false,true': 'haswordtitle(J, K), haswordauthor(L, K)', 'false,false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true': [0.487, 1, 1], 'false,true,true': [0.44, 24, 9], 'false,true,false,true': [1.116, 3, 2], 'false,true,false,false': [0.098, 14, 0], 'false,false,true,true': [5.368, 200, 34], 'false,false,true,false': [2.648, 30, 11], 'false,false,false,true': [4.669, 124, 31], 'false,false,false,false': [0.031, 11, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, A)', 'true,true,true': 'samebib(F, G), venue(G, B)', 'true,true,false': 'haswordtitle(H, C)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true,true,true': [0.181, 0, 19], 'true,true,true,false': [0.336, 18, 0], 'true,true,false,true': [3.266, 49, 17], 'true,true,false,false': [1.675, 5, 7], 'true,false': [0.488, 1, 1], 'false,true': [0.319, 44, 7], 'false,false,true': [0.36, 224, 47], 'false,false,false,true': [5.06, 124, 33], 'false,false,false,false': [0.056, 14, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordtitle(D, C)', 'true': 'title(E, D), venue(E, B)', 'true,true': 'samebib(E, F), venue(F, A)', 'true,false': 'title(G, D), venue(G, A)', 'true,false,false': 'haswordvenue(A, C)', 'false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false,true': 'title(J, I), venue(J, A)', 'false,true,true': 'samebib(J, K), venue(K, B)'}, {'true,true,true': [0.41, 324, 1], 'true,true,false': [0.184, 1, 56], 'true,false,true': [0.404, 65, 17], 'true,false,false,true': [5.368, 68, 50], 'true,false,false,false': [3.293, 78, 12], 'false,true,true,true': [3.758, 22, 44], 'false,true,true,false': [0.481, 105, 0], 'false,true,false': [0.368, 16, 3], 'false,false': [0.376, 19, 21]}]]
[{'': [0.23863582163925326, 0.14532871972318426], 'false': [0.11841599384852003, 0.14823611310169818], 'false,false': [0.14335316784902274, 0.15574022776238952], 'false,false,false': [0.1660107915128414, -1.1895246692412391e-17], 'false,false,true': [0.12515555555555652, 0.163923229287618], 'false,true': [0.16000000000000017, -6.938893903907228e-18], 'false,true,true': [0.18750000000000003, 0.15608740894901163]}, {'': [0.23863582163921512, 0.14469491161160142], 'false': [0.1164464761987229, 0.14779983726927137], 'false,false': [0.16620420150568208, 0.14547917227779508], 'false,false,true': [0.23992695245343656, 0.1529101729094463], 'false,false,false': [0.1399844085202843, 0.15653248367351674], 'false,true': [0.15992225280072522, 3.469446951953614e-18], 'false,true,true': [0.18749999999999997, 0.15608740894901166]}, {'': [0.23863582163923638, 0.1443532361517087], 'true': [0.23410207939508507, 0.23878813034468407], 'true,true': [0.25000000000000006, 0.19702695893172073], 'true,true,true': [2.0816681711721685e-17, 0.24173553719008264], 'true,true,false': [0.15763168012302947, 0.24305555555555558], 'false': [0.14079193277634808, 0.15031272106140628], 'false,false': [0.16269903982906259, 7.112716957697427e-05], 'false,false,true': [0.15980544683422665, 0.22252996753592882]}, {'': [0.23809585956820128, 0.1440474542926128], 'true': [0.2189403243553327, 0.23878813034467303], 'true,true': [0.0, 0.2139760223660833], 'true,true,false': [0.23015092569243029, 0.1850715896158386], 'false': [0.11471599016913704, 0.14731835504254587], 'false,false': [0.1643131396533647, 0.1452027364818084], 'false,false,true': [0.18973585848665678, 0.10264852835781409], 'false,false,false': [0.1397748307472405, 0.15612370003841486]}, {'': [0.23771377212510356, 0.14386432064548366], 'false': [0.1407346723956357, 0.1491259137199682], 'false,false': [0.16207516216106269, 8.076046450987336e-05], 'false,false,true': [0.15927718013819128, 0.2240465809584272], 'false,true': [0.15156447372468768, 0.11312596852992977], 'false,true,true': [0.24720169181468507, 0.007098432184138074], 'false,true,false': [0.04629862428049144, 0.15552821744061535]}, {'': [0.2376744807578183, 0.13575587711485404], 'true': [0.23176686991500461, 0.2378735666641535], 'true,false': [0.19929287061785061, 0.23905615159764806], 'true,true': [0.22860693920393177, 0.18755534552929884], 'true,true,true': [0.0, 0.24589086127547616], 'true,false,true': [0.20929092955155593, 0.17366652086972084], 'true,true,false': [0.1514755600800721, 0.22059750843168366], 'false': [0.16119479712535928, 0.1326551784258537]}, {'': [0.23687134964916384, 0.13565232890204973], 'true': [0.1884191984809302, 0.23694883976250736], 'true,true': [0.19222159646890982, 0.13970477068045314], 'true,true,true': [0.0, 0.2654408251474765], 'false': [0.16104889213230852, 0.13258364079950255], 'false,true': [0.19387326038160174, 0.08872450818490399], 'false,false': [0.0981783844556098, 0.13647349750628404], 'false,false,false': [0.1355823816458915, 0.13802918914735898]}, {'': [0.23672441184861664, 0.13534312833912437], 'false': [0.15944800468827763, 0.13244961142685588], 'false,true': [0.19361471750595102, 0.08889781652742769], 'false,false': [0.13227721448458973, 0.13250338674247053], 'false,false,false': [0.14062786723364726, 8.609265924230947e-05], 'false,false,true': [0.12312061953676096, 0.1709635315520854], 'false,true,false': [0.24895103461467194, 0.0006872359791026365]}, {'': [0.23670139193579956, 0.13434052574207014], 'true': [0.19340871033593093, 0.2382836978372246], 'true,true': [0.207545803589543, 0.17970190061312147], 'true,true,true': [0.0017295623879590774, 0.006268653803501538], 'true,true,false': [0.16160303952123747, 0.2337657308326769], 'false': [0.101880934268723, 0.1380249430263618], 'false,false': [0.12960470566548132, 0.15118824056236968], 'false,false,false': [0.16309160545898396, 0.000227809491682922]}, {'': [0.22517565584073101, 0.17573213892091943], 'true': [0.2281995407475195, 0.18920255104671954], 'true,true': [0.1682250624160122, 0.03367765898655529], 'true,false': [0.16359555901336673, 0.19301619646661342], 'true,false,false': [0.24418270611893175, 0.12049441260301186], 'false': [0.17425192015165997, 0.14130813556402694], 'false,true': [0.17642114305956258, 0.13549883290138448], 'false,true,true': [0.21393186830328648, 0.002207309478441084]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
0;false,true;haswordauthor(E, F), haswordtitle(G, F).;true;true
0;false,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
0;false,false,false;haswordvenue(A, K), haswordtitle(L, K).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
1;false,true;haswordauthor(E, F), haswordtitle(G, F).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
2;true,true;haswordtitle(F, C), haswordtitle(F, D).;true;true
2;true,true,true;author(G, E), venue(G, A).;true;true
2;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
2;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
3;true,true;haswordauthor(E, C), haswordtitle(F, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(B, D), haswordtitle(E, D).;true;true
4;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
5;true,true;haswordtitle(F, D), haswordtitle(F, C).;true;true
5;true,true,true;haswordauthor(G, C).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordauthor(D, C).;true;true
6;true,true;haswordauthor(D, E), haswordtitle(F, E).;true;true
6;true,true,true;haswordtitle(F, C).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
7;false,true;haswordauthor(E, F), haswordtitle(G, F).;true;true
7;false,true,false;author(H, E), venue(H, A).;true;true
7;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
7;false,false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
8;true,true;author(F, E), venue(F, A).;true;true
8;true,true,true;samebib(F, G), venue(G, B).;true;true
8;false;haswordvenue(A, I), haswordauthor(J, I).;true;true
8;false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
8;false,false,false;haswordvenue(A, M), haswordtitle(N, M).;true;true
9;;samevenue(A, B) :- haswordvenue(B, C), haswordtitle(D, C).;true;true
9;false;haswordvenue(A, H), haswordtitle(I, H).;true;true
9;false,true;title(J, I), venue(J, A).;true;true
9;false,true,true;samebib(J, K), venue(K, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2515460347601058;  // std dev = 0.489, 3,241.000 (wgt'ed) examples reached here.  /* #neg=1,966 #pos=1,275 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.051697322196286546;  // std dev = 2.200, 31.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=6 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, A) )
%   | | | then return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.04862512557570285;  // std dev = 2.545, 42.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=8 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.02668826094220851;  // std dev = 6.117, 267.000 (wgt'ed) examples reached here.  /* #neg=222 #pos=45 */
%   | | | else return 0.053461435099511775;  // std dev = 4.485, 128.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=25 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21808742386740057;  // std dev = 0.489, 3,241.000 (wgt'ed) examples reached here.  /* #neg=1,966 #pos=1,275 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.04528697921890131;  // std dev = 2.200, 31.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=6 */
%   | | else return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordvenue(A, J) )
%   | | | then return 0.0014808434389315234;  // std dev = 4.333, 150.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=22 */
%   | | | else return 0.05790269349372324;  // std dev = 4.455, 121.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=25 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.06369032541210382;  // std dev = 5.098, 157.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=33 */
%   | | | else return -0.14826630104770103;  // std dev = 0.001, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1842983582247918;  // std dev = 0.489, 3,241.000 (wgt'ed) examples reached here.  /* #neg=1,966 #pos=1,275 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then return 0.11992489995322922;  // std dev = 0.443, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return 0.2144693320781112;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.151113085350944;  // std dev = 0.043, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | | then return 0.03855555999844793;  // std dev = 2.202, 31.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=6 */
%   | | | else return -0.11231637819360635;  // std dev = 1.39e-08, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.01967485816086202;  // std dev = 6.114, 267.000 (wgt'ed) examples reached here.  /* #neg=222 #pos=45 */
%   | | | else return 0.04113311350444844;  // std dev = 4.476, 128.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=25 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.15218912160621986;  // std dev = 0.489, 3,241.000 (wgt'ed) examples reached here.  /* #neg=1,966 #pos=1,275 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then return 0.04090807713719585;  // std dev = 0.398, 35.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=7 */
%   | | else return -0.10304907942050553;  // std dev = 0.023, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.007875011461542665;  // std dev = 5.479, 220.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=36 */
%   | | | else return 0.06764274520214346;  // std dev = 2.938, 51.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=11 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.051042998630128816;  // std dev = 5.078, 157.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=33 */
%   | | | else return -0.13211330131093163;  // std dev = 0.037, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12325052807132376;  // std dev = 0.489, 3,241.000 (wgt'ed) examples reached here.  /* #neg=1,966 #pos=1,275 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then return 0.09909509375285958;  // std dev = 0.441, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return 0.17247419691158697;  // std dev = 1.092, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.1346185690922673;  // std dev = 0.066, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return -0.011970788378600694;  // std dev = 5.371, 234.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=34 */
%   | | | else return 0.11952270228189835;  // std dev = 2.837, 41.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.04157440479877227;  // std dev = 4.956, 155.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=31 */
%   | | | else return -0.11558816577754513;  // std dev = 0.036, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.09827356556701083;  // std dev = 0.489, 3,241.000 (wgt'ed) examples reached here.  /* #neg=1,966 #pos=1,275 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( title(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.3755678674313296;  // std dev = 4.265, 74.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=40 */
%   | | | else return -0.15344253241982567;  // std dev = 1.027, 145.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=1 */
%   | | else if ( haswordtitle(E, H), haswordauthor(I, H) )
%   | | | then return -0.10527839819787055;  // std dev = 1.361, 40.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=2 */
%   | | | else return 0.03650574030030528;  // std dev = 2.845, 52.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=10 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, B) )
%   | | | then return 0.035566425557218874;  // std dev = 4.991, 159.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=32 */
%   | | | else return 0.1666685348432395;  // std dev = 1.165, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return -0.10716139559636319;  // std dev = 0.068, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C), haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.3159698997219759;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.2749391911871151;  // std dev = 3.261, 44.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=26 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return -0.11989146834942695;  // std dev = 2.835, 51.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=10 */
%   | | | else return 0.26736343361135734;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.24813266438058812;  // std dev = 3.097, 39.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=22 */
%   | | | else return -0.12366220741428366;  // std dev = 2.842, 52.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=10 */
%   | | else return 0.07941725019567442;  // std dev = 0.489, 3,035.000 (wgt'ed) examples reached here.  /* #neg=1,835 #pos=1,200 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return -0.01306856866878345;  // std dev = 0.316, 51.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=7 */
%   | else return 0.015303194287897276;  // std dev = 0.372, 442.000 (wgt'ed) examples reached here.  /* #neg=362 #pos=80 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06035874823215072;  // std dev = 0.487, 3,241.000 (wgt'ed) examples reached here.  /* #neg=1,966 #pos=1,275 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(A, F) )
%   | | then if ( haswordtitle(E, G), haswordauthor(H, G) )
%   | | | then return -0.1479470868897314;  // std dev = 0.209, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | | else return 0.0699772352606194;  // std dev = 3.963, 93.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=22 */
%   | | else if ( title(I, E), venue(I, A) )
%   | | | then return 0.01895681825514306;  // std dev = 4.519, 152.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=29 */
%   | | | else return 0.16959192460829894;  // std dev = 1.168, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, B) )
%   | | | then return 0.028614419532541308;  // std dev = 4.990, 159.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=32 */
%   | | | else return 0.13987642584922513;  // std dev = 1.166, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return -0.09830543572881216;  // std dev = 0.064, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D), haswordtitle(F, C) )
%   | | then if ( haswordvenue(B, D) )
%   | | | then return 0.607557556560199;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.17803288178767232;  // std dev = 3.097, 39.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=22 */
%   | | else if ( haswordtitle(G, C) )
%   | | | then return -0.12394765352881366;  // std dev = 2.874, 55.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=10 */
%   | | | else return 0.2956263017726361;  // std dev = 1.459, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | else return 0.04676131626462412;  // std dev = 0.488, 3,134.000 (wgt'ed) examples reached here.  /* #neg=1,901 #pos=1,233 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( haswordauthor(I, J), haswordtitle(K, J) )
%   | | then return 0.07747930390389364;  // std dev = 0.438, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
%   | | else return -0.05885908627358965;  // std dev = 0.277, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return -9.26346305039679E-4;  // std dev = 0.360, 275.000 (wgt'ed) examples reached here.  /* #neg=230 #pos=45 */
%   | | else return 0.018063233952071833;  // std dev = 0.362, 166.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=31 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.4284117433045132;  // std dev = 0.410, 1,483.000 (wgt'ed) examples reached here.  /* #neg=324 #pos=1,159 */
%   | | else return -0.3051428704397193;  // std dev = 0.184, 1,731.000 (wgt'ed) examples reached here.  /* #neg=1,675 #pos=56 */
%   | else if ( title(G, D), venue(G, A) )
%   | | then return -0.1241953587553451;  // std dev = 0.404, 82.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=17 */
%   | | else if ( haswordvenue(A, C) )
%   | | | then return 0.06613376035472834;  // std dev = 5.368, 118.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=50 */
%   | | | else return -0.03753305607842656;  // std dev = 3.259, 90.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=12 */
%   else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | then if ( title(J, I), venue(J, A) )
%   | | then if ( samebib(J, K), venue(K, B) )
%   | | | then return 0.4391068045430143;  // std dev = 3.751, 66.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=44 */
%   | | | else return -0.18214555176652902;  // std dev = 0.513, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | | else return -0.08969472197920585;  // std dev = 0.369, 19.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=3 */
%   | else return 0.27150744584145015;  // std dev = 0.377, 40.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=21 */


Results
   AUC ROC   = 0.897704
   AUC PR    = 0.81476
   CLL	      = -0.55216
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.016064
   F1        = 0.031621


Total learning time: 1547.9872889518738 seconds
Total inference time: 3.292 seconds
AUC ROC: 0.897704


Results scoring model
   AUC ROC   = 0.889723
   AUC PR    = 0.78827
   CLL	      = -0.528917
   Precision = 0.981818 at threshold = 0.5
   Recall    = 0.039648
   F1        = 0.076217


Total scoring time: 19.19 seconds
Refined model CLL: -0.528917


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.899051
   AUC PR    = 0.820551
   CLL	      = -0.551112
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.022758
   F1        = 0.044503


Total learning time: 3030.228330757141 seconds
Total inference time: 3.916 seconds
AUC ROC: 0.899051
Total revision time: 3030.228330757141
Best scored revision CLL: -0.527898


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 23:57:24
{'AUC ROC': 0.899051, 'AUC PR': 0.820551, 'CLL': -0.551112, 'Precision': [1.0, 0.5], 'Recall': 0.022758, 'F1': 0.044503, 'Learning time': 3030.228330757141, 'Inference time': 3.916, 'parameter_0.6': {'AUC ROC': 0.899051, 'AUC PR': 0.820551, 'CLL': -0.551112, 'Precision': [1.0, 0.5], 'Recall': 0.022758, 'F1': 0.044503, 'Learning time': 1443.9890418052673, 'Inference time': 3.916}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2515460347601058;  // std dev = 0.489, 3,241.000 (wgt'ed) examples reached here.  /* #neg=1,966 #pos=1,275 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then return 0.1308762078267851;  // std dev = 0.445, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.0034480803986568706;  // std dev = 5.391, 234.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=34 */
%   | | | else return 0.12644161802634163;  // std dev = 2.837, 41.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.058148935099511405;  // std dev = 4.980, 155.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=31 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21808742386740057;  // std dev = 0.489, 3,241.000 (wgt'ed) examples reached here.  /* #neg=1,966 #pos=1,275 */
%   else if ( haswordvenue(B, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordvenue(A, F) )
%   | | then if ( haswordtitle(E, G), haswordauthor(H, G) )
%   | | | then return -0.14281363998360921;  // std dev = 0.023, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | | else return 0.08720062681228027;  // std dev = 4.095, 93.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=22 */
%   | | else if ( title(I, E), venue(I, A) )
%   | | | then return 0.04162586069352369;  // std dev = 4.845, 152.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=29 */
%   | | | else return 0.1842553658468876;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, B) )
%   | | | then return 0.05642332099226594;  // std dev = 5.031, 159.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=32 */
%   | | | else return 0.18835039747714521;  // std dev = 1.159, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return -0.1293383322379696;  // std dev = 0.044, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(A, D), haswordtitle(F, D) )
%   | | then return 0.7909012585642181;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.31721704803790274;  // std dev = 3.078, 38.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=20 */
%   | | | else return 0.05117523116695813;  // std dev = 3.749, 73.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=19 */
%   | else return 0.18501514212145498;  // std dev = 0.489, 3,126.000 (wgt'ed) examples reached here.  /* #neg=1,894 #pos=1,232 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then return -0.012950526174013122;  // std dev = 0.342, 51.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=7 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | | then return -7.978962860791122E-4;  // std dev = 4.266, 150.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=22 */
%   | | | else return 0.051056096324107195;  // std dev = 4.451, 121.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=25 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.057513898046887675;  // std dev = 5.081, 157.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=33 */
%   | | | else return -0.11623013070602602;  // std dev = 0.039, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.15214050832113196;  // std dev = 0.488, 3,241.000 (wgt'ed) examples reached here.  /* #neg=1,966 #pos=1,275 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.10833014552101136;  // std dev = 0.840, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.0434273318983149;  // std dev = 2.193, 31.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=6 */
%   | | else return -0.14726395136762652;  // std dev = 0.057, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.035059310990013456;  // std dev = 5.275, 183.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=35 */
%   | | | else return -0.01327785897205606;  // std dev = 3.192, 88.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=12 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.049929948508124725;  // std dev = 5.080, 157.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=33 */
%   | | | else return -0.10482430722511575;  // std dev = 0.036, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C), haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.244705775543423;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.30428633000300703;  // std dev = 3.138, 44.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=26 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return -0.06301791873502381;  // std dev = 2.854, 51.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=10 */
%   | | | else return 0.3342589905115077;  // std dev = 1.696, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | else return 0.12383555027355324;  // std dev = 0.489, 3,126.000 (wgt'ed) examples reached here.  /* #neg=1,894 #pos=1,232 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then return 0.014462630269975286;  // std dev = 0.372, 311.000 (wgt'ed) examples reached here.  /* #neg=258 #pos=53 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return 0.03589463194179977;  // std dev = 5.023, 159.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=32 */
%   | | | else return 0.14772580461515902;  // std dev = 1.161, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return -0.09673363640632182;  // std dev = 0.038, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0981546857694843;  // std dev = 0.488, 3,241.000 (wgt'ed) examples reached here.  /* #neg=1,966 #pos=1,275 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then return 0.09349670818139766;  // std dev = 0.441, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return 0.1946922269873086;  // std dev = 1.092, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.13090864514842718;  // std dev = 0.101, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return -0.010445568205623078;  // std dev = 5.333, 234.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=34 */
%   | | | else return 0.09327188917291236;  // std dev = 2.830, 41.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=11 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.03472536501176413;  // std dev = 4.968, 155.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=31 */
%   | | | else return -0.08489021576343349;  // std dev = 0.006, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07734436563425465;  // std dev = 0.487, 3,241.000 (wgt'ed) examples reached here.  /* #neg=1,966 #pos=1,275 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then return 0.039824371514109065;  // std dev = 0.395, 35.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=7 */
%   | | else return -0.13313462546801802;  // std dev = 0.081, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return -0.001340464873381721;  // std dev = 5.404, 220.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=36 */
%   | | | else return 0.06293059182044605;  // std dev = 2.938, 51.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=11 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.03609164307382666;  // std dev = 5.060, 157.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=33 */
%   | | | else return -0.08260655275233954;  // std dev = 0.053, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.06040506688987176;  // std dev = 0.487, 3,241.000 (wgt'ed) examples reached here.  /* #neg=1,966 #pos=1,275 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(H, D) )
%   | | | then return 0.08617085385991409;  // std dev = 0.818, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.02772852519335143;  // std dev = 2.188, 31.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=6 */
%   | | else return -0.11855256165118959;  // std dev = 0.073, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return -0.0011565965816586986;  // std dev = 5.404, 220.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=36 */
%   | | | else return 0.05460849156433278;  // std dev = 2.938, 51.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=11 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.03085624049436617;  // std dev = 5.059, 157.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=33 */
%   | | | else return -0.0765730767722993;  // std dev = 0.049, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0468661318769545;  // std dev = 0.487, 3,241.000 (wgt'ed) examples reached here.  /* #neg=1,966 #pos=1,275 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(H, D) )
%   | | | then return 0.07409410235339878;  // std dev = 0.815, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.02386537907419252;  // std dev = 2.188, 31.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=6 */
%   | | else return -0.10674762848689313;  // std dev = 0.066, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.023962384328631896;  // std dev = 5.797, 219.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=43 */
%   | | | else return -0.03285026395029207;  // std dev = 3.136, 88.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=12 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.032659347768442884;  // std dev = 4.456, 121.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=25 */
%   | | | else return -0.07134312337089198;  // std dev = 0.046, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, B) )
%   | then if ( samebib(E, F), venue(F, A) )
%   | | then return 0.4318165292743508;  // std dev = 0.410, 1,486.000 (wgt'ed) examples reached here.  /* #neg=325 #pos=1,161 */
%   | | else return -0.30736529979641036;  // std dev = 0.182, 1,741.000 (wgt'ed) examples reached here.  /* #neg=1,685 #pos=56 */
%   | else if ( title(G, D), venue(G, A) )
%   | | then return -0.12150019199966845;  // std dev = 0.410, 77.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=17 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.05784005453758992;  // std dev = 5.353, 118.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=49 */
%   | | | else return -0.022829431444148677;  // std dev = 3.344, 89.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=14 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.32061527864146894;  // std dev = 2.027, 19.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=13 */
%   | | | else return -0.35741418275054526;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.552538114928502;  // std dev = 0.281, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | else return 0.013799890378157641;  // std dev = 0.377, 175.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=31 */


Results
   AUC ROC   = 0.880976
   AUC PR    = 0.792352
   CLL	      = -0.555694
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.004016
   F1        = 0.008


Total learning time: 1273.5296902656555 seconds
Total inference time: 3.041 seconds
AUC ROC: 0.880976


Dataset: 3_imdb_cora, Fold: 4, Type: Scratch (RDN-B), Time: 00:18:41
{'AUC ROC': 0.880976, 'AUC PR': 0.792352, 'CLL': -0.555694, 'Precision': [1.0, 0.5], 'Recall': 0.004016, 'F1': 0.008, 'Learning time': 1273.5296902656555, 'Inference time': 3.041}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.24700969459317806;  // std dev = 0.487, 3,950.000 (wgt'ed) examples reached here.  /* #neg=2,414 #pos=1,536 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.08891816586874284;  // std dev = 4.019, 91.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=21 */
%   | | | else return 0.2661949121110079;  // std dev = 6.483, 174.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=71 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.5248156017661785;  // std dev = 2.582, 30.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=20 */
%   | | | else return -0.030739953789376676;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.4634120929942483;  // std dev = 3.013, 38.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=23 */
%   | | | else return 0.6706489350995116;  // std dev = 2.208, 32.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=26 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.0714822684328457;  // std dev = 0.410, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | else return 0.03401100406502835;  // std dev = 0.381, 580.000 (wgt'ed) examples reached here.  /* #neg=478 #pos=102 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.21445114261734255;  // std dev = 0.487, 3,950.000 (wgt'ed) examples reached here.  /* #neg=2,415 #pos=1,535 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.06710344705698508;  // std dev = 4.084, 91.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
%   | | | else return 0.2306083390165165;  // std dev = 6.483, 174.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=71 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.448295606241962;  // std dev = 2.582, 30.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=20 */
%   | | | else return -0.027039036105351237;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.39719142187971057;  // std dev = 3.013, 38.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=23 */
%   | | | else return 0.568219120539126;  // std dev = 2.208, 32.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=26 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.026721846715742834;  // std dev = 0.379, 415.000 (wgt'ed) examples reached here.  /* #neg=343 #pos=72 */
%   | else return 0.045407780160300816;  // std dev = 0.394, 240.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=46 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1816450871697685;  // std dev = 0.487, 3,950.000 (wgt'ed) examples reached here.  /* #neg=2,414 #pos=1,536 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.04784064875665864;  // std dev = 4.019, 91.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=21 */
%   | | | else return 0.19441847604547471;  // std dev = 6.483, 174.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=71 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.362363346322623;  // std dev = 2.582, 30.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=20 */
%   | | | else return -0.023851027745157634;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.3242408920006814;  // std dev = 3.013, 38.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=23 */
%   | | | else return 0.44921440988959904;  // std dev = 2.208, 32.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=26 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.05874266687734211;  // std dev = 0.410, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | else return 0.025512280142416622;  // std dev = 0.381, 580.000 (wgt'ed) examples reached here.  /* #neg=478 #pos=102 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.15050536946786267;  // std dev = 0.487, 3,950.000 (wgt'ed) examples reached here.  /* #neg=2,415 #pos=1,535 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.09538230280524618;  // std dev = 7.330, 245.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=81 */
%   | | | else return 0.3519012735762753;  // std dev = 2.191, 20.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.26158260520031584;  // std dev = 2.741, 34.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=21 */
%   | | | else return -0.13220175852170518;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.2543791215408971;  // std dev = 3.013, 38.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=23 */
%   | | | else return 0.34045021542416626;  // std dev = 2.208, 32.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=26 */
%   else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | then return 0.01937121949499642;  // std dev = 0.378, 415.000 (wgt'ed) examples reached here.  /* #neg=343 #pos=72 */
%   | else return 0.036121179752999985;  // std dev = 0.394, 240.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=46 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.12214680195070124;  // std dev = 0.487, 3,950.000 (wgt'ed) examples reached here.  /* #neg=2,415 #pos=1,535 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.011855324664489852;  // std dev = 4.084, 91.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
%   | | | else return 0.13563721909119886;  // std dev = 6.455, 174.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=71 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.20164927726020873;  // std dev = 2.735, 34.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=21 */
%   | | | else return -0.11775830621791798;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.1944915408246244;  // std dev = 3.013, 38.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=23 */
%   | | | else return 0.25561419664155544;  // std dev = 2.208, 32.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=26 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.047912109007586766;  // std dev = 0.410, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | else return 0.018804945497487822;  // std dev = 0.381, 580.000 (wgt'ed) examples reached here.  /* #neg=478 #pos=102 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.09795021650788509;  // std dev = 0.487, 3,950.000 (wgt'ed) examples reached here.  /* #neg=2,414 #pos=1,536 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.004978096916415252;  // std dev = 4.019, 91.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=21 */
%   | | | else return 0.10798318479276785;  // std dev = 6.454, 174.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=71 */
%   | else if ( haswordauthor(G, C) )
%   | | then if ( haswordauthor(G, H), haswordtitle(I, H) )
%   | | | then return -0.1103688091856301;  // std dev = 1.127, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.4743574926527425;  // std dev = 0.118, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.20998932809333087;  // std dev = 1.132, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.15604498546426357;  // std dev = 4.292, 92.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=59 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.04119120252138821;  // std dev = 0.410, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | else return 0.0162993713154282;  // std dev = 0.381, 580.000 (wgt'ed) examples reached here.  /* #neg=478 #pos=102 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( haswordauthor(E, C) )
%   | | then return 0.6870345299335519;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.07651433775275296;  // std dev = 30.570, 3,944.000 (wgt'ed) examples reached here.  /* #neg=2,415 #pos=1,529 */
%   | | | else return 0.052919498242174005;  // std dev = 7.671, 265.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=93 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.11808517024235494;  // std dev = 2.690, 34.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=21 */
%   | | | else return -0.12179453484137703;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.10745299203309155;  // std dev = 2.979, 38.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=23 */
%   | | | else return 0.16067414380467024;  // std dev = 2.220, 32.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=26 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.01094166320168541;  // std dev = 0.378, 415.000 (wgt'ed) examples reached here.  /* #neg=343 #pos=72 */
%   | else return 0.026171767508166466;  // std dev = 0.394, 240.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=46 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.06059921700394261;  // std dev = 0.487, 3,950.000 (wgt'ed) examples reached here.  /* #neg=2,415 #pos=1,535 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.027827389155269187;  // std dev = 7.306, 245.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=81 */
%   | | | else return 0.21309414190004272;  // std dev = 2.191, 20.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=12 */
%   | else if ( haswordauthor(H, C) )
%   | | then if ( haswordauthor(H, I), haswordtitle(J, I) )
%   | | | then return -0.1157678616730253;  // std dev = 1.113, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.33337429115818046;  // std dev = 0.111, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.15488800548307716;  // std dev = 0.920, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.09100023067944575;  // std dev = 4.322, 93.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=60 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.009447120127755962;  // std dev = 0.378, 415.000 (wgt'ed) examples reached here.  /* #neg=343 #pos=72 */
%   | else return 0.022525943046650107;  // std dev = 0.394, 240.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=46 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.047255212110731186;  // std dev = 0.487, 3,950.000 (wgt'ed) examples reached here.  /* #neg=2,414 #pos=1,536 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.029609233356286967;  // std dev = 4.019, 91.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=21 */
%   | | | else return 0.06181368628897629;  // std dev = 6.436, 174.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=71 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.06804874491641888;  // std dev = 2.661, 34.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=21 */
%   | | | else return -0.11990689790985332;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.059313558665115174;  // std dev = 2.956, 38.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=23 */
%   | | | else return 0.10891907852393756;  // std dev = 2.233, 32.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=26 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.03160454217887838;  // std dev = 0.410, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | else return 0.009744662784190053;  // std dev = 0.381, 580.000 (wgt'ed) examples reached here.  /* #neg=478 #pos=102 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.03676359712924298;  // std dev = 0.487, 3,950.000 (wgt'ed) examples reached here.  /* #neg=2,415 #pos=1,535 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.03291265853171508;  // std dev = 4.084, 91.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
%   | | | else return 0.04776198285441894;  // std dev = 6.435, 174.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=71 */
%   | else if ( haswordauthor(G, C) )
%   | | then if ( haswordauthor(G, H), haswordtitle(I, H) )
%   | | | then return -0.10768221716120747;  // std dev = 1.098, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.2507037380053205;  // std dev = 0.098, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.05157209302489792;  // std dev = 2.959, 38.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=23 */
%   | | | else return 0.061542816097971714;  // std dev = 3.270, 61.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=41 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.026857860131204305;  // std dev = 0.410, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | else return 0.008390598038018005;  // std dev = 0.381, 580.000 (wgt'ed) examples reached here.  /* #neg=478 #pos=102 */


Results
   AUC ROC   = 0.539082
   AUC PR    = 0.450342
   CLL	      = -0.678697
   Precision = 0.575758 at threshold = 0.5
   Recall    = 0.05087
   F1        = 0.093481


Total learning time: 10365.696422100067 seconds
Total inference time: 5.751 seconds
AUC ROC: 0.539082


Results scoring model
   AUC ROC   = 0.57823
   AUC PR    = 0.438016
   CLL	      = -0.638199
   Precision = 0.735294 at threshold = 0.5
   Recall    = 0.0413
   F1        = 0.078206


Total scoring time: 44.436 seconds
Parameter learned model CLL: -0.638199


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'title(I, H), venue(I, B)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true': [0.487, 2, 1], 'true,true,false,true': [4.019, 70, 21], 'true,true,false,false': [6.483, 103, 71], 'true,false,true,true': [2.582, 10, 20], 'true,false,true,false': [0.943, 8, 1], 'true,false,false,true': [3.013, 15, 23], 'true,false,false,false': [2.208, 6, 26], 'false,true': [0.41, 59, 16], 'false,false': [0.381, 478, 102]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'title(I, H), venue(I, B)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true': [0.487, 2, 1], 'true,true,false,true': [4.084, 69, 22], 'true,true,false,false': [6.483, 103, 71], 'true,false,true,true': [2.582, 10, 20], 'true,false,true,false': [0.943, 8, 1], 'true,false,false,true': [3.013, 15, 23], 'true,false,false,false': [2.208, 6, 26], 'false,true': [0.379, 343, 72], 'false,false': [0.394, 194, 46]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'title(I, H), venue(I, B)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true': [0.487, 2, 1], 'true,true,false,true': [4.019, 70, 21], 'true,true,false,false': [6.483, 103, 71], 'true,false,true,true': [2.582, 10, 20], 'true,false,true,false': [0.943, 8, 1], 'true,false,false,true': [3.013, 15, 23], 'true,false,false,false': [2.208, 6, 26], 'false,true': [0.41, 59, 16], 'false,false': [0.381, 478, 102]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'true,false,true': 'haswordtitle(I, J), haswordauthor(K, J)', 'true,false,false': 'haswordvenue(A, L), haswordtitle(M, L)', 'false': 'haswordvenue(A, N), haswordtitle(P, N)'}, {'true,true,true': [0.487, 2, 1], 'true,true,false,true': [7.33, 164, 81], 'true,true,false,false': [2.191, 8, 12], 'true,false,true,true': [2.741, 13, 21], 'true,false,true,false': [0.0, 5, 0], 'true,false,false,true': [3.013, 15, 23], 'true,false,false,false': [2.208, 6, 26], 'false,true': [0.378, 343, 72], 'false,false': [0.394, 194, 46]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false': 'haswordvenue(B, M), haswordauthor(N, M)'}, {'true,true,true': [0.487, 2, 1], 'true,true,false,true': [4.084, 69, 22], 'true,true,false,false': [6.455, 103, 71], 'true,false,true,true': [2.735, 13, 21], 'true,false,true,false': [3.73e-09, 5, 0], 'true,false,false,true': [3.013, 15, 23], 'true,false,false,false': [2.208, 6, 26], 'false,true': [0.41, 59, 16], 'false,false': [0.381, 478, 102]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordauthor(G, C)', 'true,false,true': 'haswordauthor(G, H), haswordtitle(I, H)', 'true,false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true': [0.487, 2, 1], 'true,true,false,true': [4.019, 70, 21], 'true,true,false,false': [6.454, 103, 71], 'true,false,true,true': [1.127, 4, 3], 'true,false,true,false': [0.118, 0, 3], 'true,false,false,true': [1.132, 2, 5], 'true,false,false,false': [4.292, 33, 59], 'false,true': [0.41, 59, 16], 'false,false': [0.381, 478, 102]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'haswordauthor(E, C)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true,true': [0.0, 0, 6], 'true,true,false,true': [30.57, 2, 1], 'true,true,false,false': [7.671, 172, 93], 'true,false,true,true': [2.69, 13, 21], 'true,false,true,false': [0.0, 5, 0], 'true,false,false,true': [2.979, 15, 23], 'true,false,false,false': [2.22, 6, 26], 'false,true': [0.378, 343, 72], 'false,false': [0.394, 194, 46]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordauthor(H, C)', 'true,false,true': 'haswordauthor(H, I), haswordtitle(J, I)', 'true,false,false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true,true': [0.487, 2, 1], 'true,true,false,true': [7.306, 164, 81], 'true,true,false,false': [2.191, 8, 12], 'true,false,true,true': [1.113, 4, 3], 'true,false,true,false': [0.111, 0, 3], 'true,false,false,true': [0.92, 2, 4], 'true,false,false,false': [4.322, 33, 60], 'false,true': [0.378, 343, 72], 'false,false': [0.394, 194, 46]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false': 'haswordvenue(B, M), haswordauthor(N, M)'}, {'true,true,true': [0.487, 2, 1], 'true,true,false,true': [4.019, 70, 21], 'true,true,false,false': [6.436, 103, 71], 'true,false,true,true': [2.661, 13, 21], 'true,false,true,false': [0.006, 5, 0], 'true,false,false,true': [2.956, 15, 23], 'true,false,false,false': [2.233, 6, 26], 'false,true': [0.41, 59, 16], 'false,false': [0.381, 478, 102]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordauthor(G, C)', 'true,false,true': 'haswordauthor(G, H), haswordtitle(I, H)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true': [0.487, 2, 1], 'true,true,false,true': [4.084, 69, 22], 'true,true,false,false': [6.435, 103, 71], 'true,false,true,true': [1.098, 4, 3], 'true,false,true,false': [0.098, 0, 3], 'true,false,false,true': [2.959, 15, 23], 'true,false,false,false': [3.27, 20, 41], 'false,true': [0.41, 59, 16], 'false,false': [0.381, 478, 102]}]]
[{'': [0.2384849828121429, 0.14769768661500038], 'true': [0.2370585760339696, 0.22977863816177005], 'true,true': [0.2376480692196287, 0.22664293342826763], 'true,false': [0.24852071005917173, 0.21000000000000005], 'true,false,true': [0.22222222222222232, 0.09876543209876548], 'true,true,false': [0.17751479289940866, 0.24154445765622917], 'true,false,false': [0.23891966759002883, 0.15234375000000117], 'false': [0.16782222222222168, 0.14493460166468597]}, {'': [0.23763905039943178, 0.14766397751649685], 'true': [0.2369186507848583, 0.22064561924829892], 'true,true': [0.23744494847239747, 0.22757519642782503], 'true,true,false': [0.18331119430020518, 0.24154445765622945], 'true,false': [0.2338404225278353, 0.20660099833046902], 'true,false,true': [0.22222222222222204, 0.0987654320987654], 'true,false,false': [0.23891966759002758, 0.15234374999999944], 'false': [0.14330782033741388, 0.15497527319067134]}, {'': [0.23679375652818532, 0.1476441635855557], 'true': [0.23676229125591167, 0.2119847476937718], 'true,true': [0.23750287627482428, 0.22440126172548663], 'true,true,false': [0.1775147928994081, 0.24154445765623084], 'true,false': [0.2202105740996319, 0.2032180134858138], 'true,false,true': [0.22222222222222252, 0.09876543209876538], 'true,false,false': [0.23891966759002758, 0.15234374999999953], 'false': [0.16791107408058836, 0.1448970005761335]}, {'': [0.23617548012978826, 0.14761547193818578], 'true': [0.2366205070558826, 0.20587116132975164], 'true,true': [0.2372891926775621, 0.22545471556873403], 'true,true,false': [0.21930115806274553, 0.24], 'true,false': [0.20990558477041418, 0.2011805566047804], 'true,false,true': [0.22089378066875381, -2.7755575615628915e-18], 'true,false,false': [0.23891966759002767, 0.15234375000000022], 'false': [0.14322927599806953, 0.15502217562155512]}, {'': [0.23575517919415676, 0.14759864679984666], 'true': [0.23646202349666798, 0.2021795190290441], 'true,true': [0.23726837057391892, 0.22365390206101302], 'true,true,false': [0.18331119430020554, 0.23949117216234542], 'true,false': [0.20316076229071958, 0.2002692380243421], 'true,false,true': [0.21995770339292403, 2.7755575615628915e-18], 'true,false,false': [0.23891966759002795, 0.15234374999999983], 'false': [0.16800242094937895, 0.14486321700730476]}, {'': [0.23550462282094783, 0.14757548562302536], 'true': [0.23634534543957542, 0.20004334454081346], 'true,true': [0.23732123771191055, 0.22102402601973253], 'true,true,false': [0.17751479289940847, 0.23939703273723453], 'true,false': [0.2002525649150492, 0.1991975355140154], 'true,false,true': [0.18152596193359025, 0.004614578228680981], 'true,false,false': [0.18316386197401854, 0.2002117319182462], 'false': [0.1680083015353988, 0.1448623642133395]}, {'': [0.2352762322163966, 0.147557903960707], 'true': [0.2362460369647625, 0.1962161909655534], 'true,true': [0.0, 0.23604964094339975], 'true,true,false': [0.23695559191206608, 0.22204469017944203], 'true,false': [0.1920224954846291, 0.19784569860266243], 'true,false,false': [0.23350038793124828, 0.15396811705576752], 'true,false,true': [0.2128838832860038, 0.0], 'false': [0.1431056342695344, 0.15510965576422456]}, {'': [0.23498491969830756, 0.1475438375642008], 'true': [0.2359942952367229, 0.1951613575471293], 'true,true': [0.23691376109390389, 0.22195820275182634], 'true,true,false': [0.21789492979362793, 0.23999999999999985], 'true,false': [0.16739961769366024, 0.19743709476605859], 'true,false,false': [0.14113684701535967, 0.20082199622240834], 'true,false,true': [0.1768725745410494, 0.004085980301523777], 'false': [0.14310383261192458, 0.15511296738290575]}, {'': [0.23484086333182055, 0.14753325737738573], 'true': [0.23591051506141866, 0.19299802152621837], 'true,true': [0.23701734800073626, 0.2191468149837874], 'true,true,false': [0.17751479289940836, 0.23804972675391567], 'true,false': [0.18550260659354764, 0.19665633041598105], 'true,false,false': [0.22990770733220695, 0.15583450763056814], 'true,false,true': [0.2082521568356553, 7.4853372653060916e-06], 'false': [0.1681790548684704, 0.14480882604024306]}, {'': [0.2347627383529833, 0.14751961259853533], 'true': [0.2358518279550094, 0.19237634251969438], 'true,true': [0.2368508273141801, 0.2206995708486217], 'true,true,false': [0.18331119430020537, 0.23801830280024058], 'true,false': [0.14848496745604522, 0.19650244433037523], 'true,false,false': [0.23045394269245092, 0.17531417118140313], 'true,false,true': [0.17220744620598674, 0.0032241720370777918], 'false': [0.16818640819737982, 0.144808131777914]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
3;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
4;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
8;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.24700969459317806;  // std dev = 0.487, 3,950.000 (wgt'ed) examples reached here.  /* #neg=2,414 #pos=1,536 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.08891816586874284;  // std dev = 4.019, 91.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=21 */
%   | | | else return 0.2661949121110079;  // std dev = 6.483, 174.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=71 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.5248156017661785;  // std dev = 2.582, 30.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=20 */
%   | | | else return -0.030739953789376676;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.4634120929942483;  // std dev = 3.013, 38.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=23 */
%   | | | else return 0.6706489350995116;  // std dev = 2.208, 32.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=26 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.0714822684328457;  // std dev = 0.410, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | else return 0.03401100406502835;  // std dev = 0.381, 580.000 (wgt'ed) examples reached here.  /* #neg=478 #pos=102 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( haswordauthor(E, C) )
%   | | then return 0.825345205298743;  // std dev = 2.98e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.21352179059500678;  // std dev = 30.589, 3,944.000 (wgt'ed) examples reached here.  /* #neg=2,415 #pos=1,529 */
%   | | | else return 0.17446137611720525;  // std dev = 7.766, 265.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=93 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.448295606241962;  // std dev = 2.582, 30.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=20 */
%   | | | else return -0.027039036105351237;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.39719142187971057;  // std dev = 3.013, 38.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=23 */
%   | | | else return 0.568219120539126;  // std dev = 2.208, 32.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=26 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.06255605699492194;  // std dev = 0.410, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | else return 0.029820223018767286;  // std dev = 0.381, 580.000 (wgt'ed) examples reached here.  /* #neg=478 #pos=102 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.18140222672319695;  // std dev = 0.487, 3,950.000 (wgt'ed) examples reached here.  /* #neg=2,415 #pos=1,535 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.040512877686606254;  // std dev = 4.084, 91.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
%   | | | else return 0.20369898999071007;  // std dev = 6.483, 174.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=71 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.362363346322623;  // std dev = 2.582, 30.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=20 */
%   | | | else return -0.023851027745157634;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.3242408920006814;  // std dev = 3.013, 38.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=23 */
%   | | | else return 0.44921440988959904;  // std dev = 2.208, 32.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=26 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.022280644148078906;  // std dev = 0.378, 415.000 (wgt'ed) examples reached here.  /* #neg=343 #pos=72 */
%   | else return 0.04144646513030748;  // std dev = 0.394, 240.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=46 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1503663072079676;  // std dev = 0.487, 3,950.000 (wgt'ed) examples reached here.  /* #neg=2,414 #pos=1,536 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.019310987880570014;  // std dev = 4.019, 91.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=21 */
%   | | | else return 0.16858641460251264;  // std dev = 6.483, 174.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=71 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.26158260520031584;  // std dev = 2.741, 34.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=21 */
%   | | | else return -0.13220175852170518;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.2543791215408971;  // std dev = 3.013, 38.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=23 */
%   | | | else return 0.34045021542416626;  // std dev = 2.208, 32.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=26 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.019398943897154592;  // std dev = 0.378, 415.000 (wgt'ed) examples reached here.  /* #neg=343 #pos=72 */
%   | else return 0.03607876286624238;  // std dev = 0.394, 240.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=46 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.12218740032013961;  // std dev = 0.487, 3,950.000 (wgt'ed) examples reached here.  /* #neg=2,415 #pos=1,535 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.07316392449011398;  // std dev = 7.327, 245.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=81 */
%   | | | else return 0.32850649152670036;  // std dev = 2.191, 20.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.20164927726020873;  // std dev = 2.735, 34.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=21 */
%   | | | else return -0.11775830621791798;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.1944915408246244;  // std dev = 3.013, 38.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=23 */
%   | | | else return 0.25561419664155544;  // std dev = 2.208, 32.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=26 */
%   else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | then return 0.01685351786544669;  // std dev = 0.378, 415.000 (wgt'ed) examples reached here.  /* #neg=343 #pos=72 */
%   | else return 0.03127975584585058;  // std dev = 0.394, 240.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=46 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.09764890444726591;  // std dev = 0.487, 3,950.000 (wgt'ed) examples reached here.  /* #neg=2,415 #pos=1,535 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.005277297495672701;  // std dev = 4.084, 91.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
%   | | | else return 0.11553647982446262;  // std dev = 6.455, 174.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=71 */
%   | else if ( haswordauthor(G, C) )
%   | | then if ( haswordauthor(G, H), haswordtitle(I, H) )
%   | | | then return -0.1103688091856301;  // std dev = 1.127, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.4743574926527425;  // std dev = 0.118, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return 0.21275046808675138;  // std dev = 0.941, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.15644689409510815;  // std dev = 4.338, 93.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=60 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.014614390206609047;  // std dev = 0.378, 415.000 (wgt'ed) examples reached here.  /* #neg=343 #pos=72 */
%   | else return 0.027022787240753427;  // std dev = 0.394, 240.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=46 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.07754895004903826;  // std dev = 0.487, 3,950.000 (wgt'ed) examples reached here.  /* #neg=2,414 #pos=1,536 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.023302933206520732;  // std dev = 4.019, 91.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=21 */
%   | | | else return 0.09110477447256338;  // std dev = 6.454, 174.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=71 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.11635567814226162;  // std dev = 2.689, 34.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=21 */
%   | | | else return -0.12306822787624765;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.10913470283583357;  // std dev = 2.978, 38.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=23 */
%   | | | else return 0.16095613682421137;  // std dev = 2.221, 32.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=26 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.043027091099682;  // std dev = 0.410, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | else return 0.0131187431822201;  // std dev = 0.381, 580.000 (wgt'ed) examples reached here.  /* #neg=478 #pos=102 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D), haswordtitle(F, C) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.32952930096577704;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.27659887754797846;  // std dev = 3.450, 53.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=33 */
%   | | else if ( haswordauthor(H, C) )
%   | | | then return 0.1418493289602493;  // std dev = 1.972, 18.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=11 */
%   | | | else return -0.14217614167136594;  // std dev = 3.216, 71.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=15 */
%   | else return 0.06139946391806547;  // std dev = 0.485, 4,172.000 (wgt'ed) examples reached here.  /* #neg=2,533 #pos=1,639 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, I) )
%   | | | then return 0.15205674202731628;  // std dev = 0.813, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.08962342617831115;  // std dev = 3.093, 49.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=13 */
%   | | else return -0.09057076620171915;  // std dev = 0.283, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | else return 0.011323525973855674;  // std dev = 0.381, 580.000 (wgt'ed) examples reached here.  /* #neg=478 #pos=102 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.04724791474896507;  // std dev = 0.486, 3,950.000 (wgt'ed) examples reached here.  /* #neg=2,415 #pos=1,535 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.013131349932067318;  // std dev = 7.305, 245.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=81 */
%   | | | else return 0.1964057295426981;  // std dev = 2.191, 20.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.07234748374754077;  // std dev = 2.695, 34.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=21 */
%   | | | else return -0.11656633737963966;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.07177781475593445;  // std dev = 2.985, 38.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=23 */
%   | | | else return 0.11302436311542198;  // std dev = 2.221, 32.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=26 */
%   else if ( haswordvenue(B, N), haswordauthor(P, N) )
%   | then return 0.031124718276958632;  // std dev = 0.408, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | else return 0.009761216771094018;  // std dev = 0.381, 580.000 (wgt'ed) examples reached here.  /* #neg=478 #pos=102 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.03670439884388398;  // std dev = 0.486, 3,950.000 (wgt'ed) examples reached here.  /* #neg=2,414 #pos=1,536 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.03981389077350043;  // std dev = 4.019, 91.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=21 */
%   | | | else return 0.04911430653419491;  // std dev = 6.436, 174.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=71 */
%   | else if ( haswordauthor(G, C) )
%   | | then if ( haswordauthor(G, H), haswordtitle(I, H) )
%   | | | then return -0.17075736056946447;  // std dev = 1.108, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.2861647732042186;  // std dev = 0.107, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.15654296167535892;  // std dev = 1.127, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.06005308474708951;  // std dev = 4.263, 92.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=59 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.006053639721234312;  // std dev = 0.378, 415.000 (wgt'ed) examples reached here.  /* #neg=343 #pos=72 */
%   | else return 0.018108533469711346;  // std dev = 0.394, 240.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=46 */


Results
   AUC ROC   = 0.539482
   AUC PR    = 0.451292
   CLL	      = -0.679234
   Precision = 0.569231 at threshold = 0.5
   Recall    = 0.049531
   F1        = 0.091133


Total learning time: 9322.170554876328 seconds
Total inference time: 5.595 seconds
AUC ROC: 0.539482


Results scoring model
   AUC ROC   = 0.588557
   AUC PR    = 0.448437
   CLL	      = -0.636978
   Precision = 0.721154 at threshold = 0.5
   Recall    = 0.0413
   F1        = 0.078125


Total scoring time: 40.355 seconds
Refined model CLL: -0.636978


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.539482
   AUC PR    = 0.451292
   CLL	      = -0.679234
   Precision = 0.569231 at threshold = 0.5
   Recall    = 0.049531
   F1        = 0.091133


Total learning time: 19772.657976976396 seconds
Total inference time: 5.595 seconds
AUC ROC: 0.539482
Total revision time: 19772.657976976396
Best scored revision CLL: -0.636978


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 05:48:30
{'AUC ROC': 0.539482, 'AUC PR': 0.451292, 'CLL': -0.679234, 'Precision': [0.569231, 0.5], 'Recall': 0.049531, 'F1': 0.091133, 'Learning time': 19772.657976976396, 'Inference time': 5.595, 'parameter_0.8': {'AUC ROC': 0.539082, 'AUC PR': 0.450342, 'CLL': -0.678697, 'Precision': [0.575758, 0.5], 'Recall': 0.05087, 'F1': 0.093481, 'Learning time': 10365.696422100067, 'Inference time': 5.751}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.24700969459317806;  // std dev = 0.487, 3,950.000 (wgt'ed) examples reached here.  /* #neg=2,414 #pos=1,536 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.08891816586874284;  // std dev = 4.019, 91.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=21 */
%   | | | else return 0.2661949121110079;  // std dev = 6.483, 174.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=71 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.5248156017661785;  // std dev = 2.582, 30.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=20 */
%   | | | else return -0.030739953789376676;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.4634120929942483;  // std dev = 3.013, 38.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=23 */
%   | | | else return 0.6706489350995116;  // std dev = 2.208, 32.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=26 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.0714822684328457;  // std dev = 0.410, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | else return 0.03401100406502835;  // std dev = 0.381, 580.000 (wgt'ed) examples reached here.  /* #neg=478 #pos=102 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.21445114261734255;  // std dev = 0.487, 3,950.000 (wgt'ed) examples reached here.  /* #neg=2,415 #pos=1,535 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.06710344705698508;  // std dev = 4.084, 91.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
%   | | | else return 0.2306083390165165;  // std dev = 6.483, 174.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=71 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.448295606241962;  // std dev = 2.582, 30.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=20 */
%   | | | else return -0.027039036105351237;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.39719142187971057;  // std dev = 3.013, 38.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=23 */
%   | | | else return 0.568219120539126;  // std dev = 2.208, 32.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=26 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.06255605699492194;  // std dev = 0.410, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | else return 0.029820223018767286;  // std dev = 0.381, 580.000 (wgt'ed) examples reached here.  /* #neg=478 #pos=102 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1816450871697685;  // std dev = 0.487, 3,950.000 (wgt'ed) examples reached here.  /* #neg=2,414 #pos=1,536 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.04784064875665864;  // std dev = 4.019, 91.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=21 */
%   | | | else return 0.19441847604547471;  // std dev = 6.483, 174.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=71 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.362363346322623;  // std dev = 2.582, 30.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=20 */
%   | | | else return -0.023851027745157634;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.3242408920006814;  // std dev = 3.013, 38.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=23 */
%   | | | else return 0.44921440988959904;  // std dev = 2.208, 32.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=26 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.022280644148078906;  // std dev = 0.378, 415.000 (wgt'ed) examples reached here.  /* #neg=343 #pos=72 */
%   | else return 0.04144646513030748;  // std dev = 0.394, 240.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=46 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.15050536946786267;  // std dev = 0.487, 3,950.000 (wgt'ed) examples reached here.  /* #neg=2,415 #pos=1,535 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.09538230280524618;  // std dev = 7.330, 245.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=81 */
%   | | | else return 0.3519012735762753;  // std dev = 2.191, 20.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.26158260520031584;  // std dev = 2.741, 34.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=21 */
%   | | | else return -0.13220175852170518;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.2543791215408971;  // std dev = 3.013, 38.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=23 */
%   | | | else return 0.34045021542416626;  // std dev = 2.208, 32.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=26 */
%   else if ( haswordvenue(B, N), haswordauthor(P, N) )
%   | then return 0.05098450938119485;  // std dev = 0.410, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | else return 0.02221659758901423;  // std dev = 0.381, 580.000 (wgt'ed) examples reached here.  /* #neg=478 #pos=102 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.12214680195070124;  // std dev = 0.487, 3,950.000 (wgt'ed) examples reached here.  /* #neg=2,415 #pos=1,535 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.011855324664489852;  // std dev = 4.084, 91.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
%   | | | else return 0.13563721909119886;  // std dev = 6.455, 174.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=71 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.20164927726020873;  // std dev = 2.735, 34.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=21 */
%   | | | else return -0.11775830621791798;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.1944915408246244;  // std dev = 3.013, 38.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=23 */
%   | | | else return 0.25561419664155544;  // std dev = 2.208, 32.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=26 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.015863814079686817;  // std dev = 0.378, 415.000 (wgt'ed) examples reached here.  /* #neg=343 #pos=72 */
%   | else return 0.03295187892168757;  // std dev = 0.394, 240.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=46 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.09795021650788509;  // std dev = 0.487, 3,950.000 (wgt'ed) examples reached here.  /* #neg=2,414 #pos=1,536 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.004978096916415252;  // std dev = 4.019, 91.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=21 */
%   | | | else return 0.10798318479276785;  // std dev = 6.454, 174.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=71 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.15382501204545537;  // std dev = 2.731, 34.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=21 */
%   | | | else return -0.10606413429196046;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.1467388653117468;  // std dev = 3.013, 38.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=23 */
%   | | | else return 0.19377337978413436;  // std dev = 2.208, 32.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=26 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.04132517831321323;  // std dev = 0.410, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | else return 0.016286131763890207;  // std dev = 0.381, 580.000 (wgt'ed) examples reached here.  /* #neg=478 #pos=102 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.07744171019657163;  // std dev = 0.487, 3,950.000 (wgt'ed) examples reached here.  /* #neg=2,415 #pos=1,535 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.03882561355928033;  // std dev = 7.307, 245.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=81 */
%   | | | else return 0.22556958560762244;  // std dev = 2.191, 20.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=12 */
%   | else if ( haswordauthor(H, C) )
%   | | then if ( haswordauthor(H, I), haswordtitle(J, I) )
%   | | | then return -0.15088122397829648;  // std dev = 1.118, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.4345176324327838;  // std dev = 0.124, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.18134491890852647;  // std dev = 0.925, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.1195787742082978;  // std dev = 4.326, 93.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=60 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.010990069022197993;  // std dev = 0.378, 415.000 (wgt'ed) examples reached here.  /* #neg=343 #pos=72 */
%   | else return 0.026096943653840462;  // std dev = 0.394, 240.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=46 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.060680018131671606;  // std dev = 0.487, 3,950.000 (wgt'ed) examples reached here.  /* #neg=2,414 #pos=1,536 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.01828285157668448;  // std dev = 4.019, 91.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=21 */
%   | | | else return 0.0711534780570747;  // std dev = 6.436, 174.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=71 */
%   | else if ( haswordauthor(G, C) )
%   | | then if ( haswordauthor(G, H), haswordtitle(I, H) )
%   | | | then return -0.11459912477846837;  // std dev = 1.114, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.334149840675069;  // std dev = 0.110, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.1423121124729926;  // std dev = 1.131, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.09149551995629944;  // std dev = 4.271, 92.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=59 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.009489244034584126;  // std dev = 0.378, 415.000 (wgt'ed) examples reached here.  /* #neg=343 #pos=72 */
%   | else return 0.022460318530475802;  // std dev = 0.394, 240.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=46 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.04745758893447091;  // std dev = 0.487, 3,950.000 (wgt'ed) examples reached here.  /* #neg=2,415 #pos=1,535 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.027271999373117608;  // std dev = 4.084, 91.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=22 */
%   | | | else return 0.055158137970287034;  // std dev = 6.436, 174.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=71 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return -0.21962394801434706;  // std dev = 0.618, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.06638904264876591;  // std dev = 2.573, 36.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=20 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.05865855955909214;  // std dev = 2.956, 38.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=23 */
%   | | | else return 0.10965786856333097;  // std dev = 2.234, 32.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=26 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.008184431130216817;  // std dev = 0.378, 415.000 (wgt'ed) examples reached here.  /* #neg=343 #pos=72 */
%   | else return 0.019279775764418514;  // std dev = 0.394, 240.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=46 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.03676449722312896;  // std dev = 0.487, 3,950.000 (wgt'ed) examples reached here.  /* #neg=2,414 #pos=1,536 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.009920338281563138;  // std dev = 7.260, 245.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=80 */
%   | | | else return 0.14025652290460253;  // std dev = 2.191, 20.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.14079780981405832;  // std dev = 2.468, 32.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=22 */
%   | | | else return -0.35108527574512594;  // std dev = 1.231, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.047340797455017486;  // std dev = 2.558, 36.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=20 */
%   | | | else return 0.08741614143956722;  // std dev = 2.232, 32.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=26 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.007052362238454546;  // std dev = 0.378, 415.000 (wgt'ed) examples reached here.  /* #neg=343 #pos=72 */
%   | else return 0.01651202804059814;  // std dev = 0.394, 240.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=46 */


Results
   AUC ROC   = 0.538558
   AUC PR    = 0.450321
   CLL	      = -0.677727
   Precision = 0.569231 at threshold = 0.5
   Recall    = 0.049531
   F1        = 0.091133


Total learning time: 11230.687845230103 seconds
Total inference time: 5.651 seconds
AUC ROC: 0.538558


Dataset: 3_imdb_cora, Fold: 4, Type: Scratch (RDN-B), Time: 08:55:48
{'AUC ROC': 0.538558, 'AUC PR': 0.450321, 'CLL': -0.677727, 'Precision': [0.569231, 0.5], 'Recall': 0.049531, 'F1': 0.091133, 'Learning time': 11230.687845230103, 'Inference time': 5.651}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.2517856350625112;  // std dev = 0.489, 5,406.000 (wgt'ed) examples reached here.  /* #neg=3,278 #pos=2,128 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then return 0.13234248348660915;  // std dev = 0.446, 62.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=17 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | | then return 0.12130682983635448;  // std dev = 3.325, 57.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=15 */
%   | | | else return -0.06185106490048781;  // std dev = 1.356, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.020992971796760535;  // std dev = 7.710, 436.000 (wgt'ed) examples reached here.  /* #neg=365 #pos=71 */
%   | | | else return 0.024815601766178093;  // std dev = 5.401, 210.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=35 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C), haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.17534431898782632;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.5058151013020294;  // std dev = 3.871, 69.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=47 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return 0.024655681012174087;  // std dev = 3.688, 85.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=17 */
%   | | | else return 0.4717145045415857;  // std dev = 1.970, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else return 0.21757434129930542;  // std dev = 0.488, 5,225.000 (wgt'ed) examples reached here.  /* #neg=3,172 #pos=2,053 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | then return 0.11545680573570644;  // std dev = 0.446, 62.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=17 */
%   | | else return -0.06287675357983284;  // std dev = 0.249, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return 0.05699395382397416;  // std dev = 0.403, 82.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=17 */
%   | | else return 0.019507138614972493;  // std dev = 0.370, 646.000 (wgt'ed) examples reached here.  /* #neg=540 #pos=106 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D), haswordtitle(F, C) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return -0.2090535175055525;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.4669922861411291;  // std dev = 3.829, 69.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=47 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return -0.0077883358721528954;  // std dev = 3.724, 85.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=17 */
%   | | | else return 0.4114668122792115;  // std dev = 1.983, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else return 0.1837700178639813;  // std dev = 0.488, 5,225.000 (wgt'ed) examples reached here.  /* #neg=3,172 #pos=2,053 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, I) )
%   | | | then return 0.08958749581038657;  // std dev = 1.210, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.1143391260497015;  // std dev = 3.282, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | else return -0.07342239035639045;  // std dev = 0.259, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | else return 0.020419748157889796;  // std dev = 0.374, 728.000 (wgt'ed) examples reached here.  /* #neg=605 #pos=123 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D), haswordtitle(F, C) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.17656599861470454;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.3774170681908433;  // std dev = 3.820, 69.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=47 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return -0.006281353404484032;  // std dev = 3.724, 85.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=17 */
%   | | | else return 0.3276513655096825;  // std dev = 1.985, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else return 0.1517791524911939;  // std dev = 0.488, 5,225.000 (wgt'ed) examples reached here.  /* #neg=3,172 #pos=2,053 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(M, I) )
%   | | | then return 0.07216161217101338;  // std dev = 1.213, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.10034581756696843;  // std dev = 3.287, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | else return -0.05903624423615535;  // std dev = 0.249, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | else return 0.01749663679135409;  // std dev = 0.374, 728.000 (wgt'ed) examples reached here.  /* #neg=605 #pos=123 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.12298519383447734;  // std dev = 0.487, 5,406.000 (wgt'ed) examples reached here.  /* #neg=3,278 #pos=2,128 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.06136804229749106;  // std dev = 1.213, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.08522449654447525;  // std dev = 3.287, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return 0.18017104187816282;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.11595359666669934;  // std dev = 0.015, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return -0.008211348605563306;  // std dev = 6.799, 374.000 (wgt'ed) examples reached here.  /* #neg=320 #pos=54 */
%   | | | else return 0.08832612276762444;  // std dev = 3.699, 75.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=18 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.03724057982264946;  // std dev = 6.387, 264.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=51 */
%   | | | else return -0.15288786352428457;  // std dev = 0.054, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.0980885538221156;  // std dev = 0.486, 5,406.000 (wgt'ed) examples reached here.  /* #neg=3,278 #pos=2,128 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then return 0.0898742903870274;  // std dev = 0.442, 62.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=17 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return 0.1952158348498195;  // std dev = 1.153, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.1424297565961561;  // std dev = 0.093, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return -0.01307935854014325;  // std dev = 6.783, 374.000 (wgt'ed) examples reached here.  /* #neg=320 #pos=54 */
%   | | | else return 0.0893074121486806;  // std dev = 3.699, 75.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=18 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.03460536392689773;  // std dev = 6.357, 264.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=51 */
%   | | | else return -0.13720297250814423;  // std dev = 0.115, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.5739965092954266;  // std dev = 1.350, 38.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=36 */
%   | | | else return -0.28841513152295567;  // std dev = 0.277, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( haswordauthor(H, C) )
%   | | | then return 0.25079577435264416;  // std dev = 2.264, 23.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   | | | else return -0.0650619846062033;  // std dev = 4.115, 99.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=24 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, A) )
%   | | | then return 0.23215077381460858;  // std dev = 3.164, 54.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=32 */
%   | | | else return -0.05696193357968298;  // std dev = 4.008, 98.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=24 */
%   | | else return 0.07804190402915913;  // std dev = 0.489, 5,073.000 (wgt'ed) examples reached here.  /* #neg=3,076 #pos=1,997 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.032927054176858955;  // std dev = 0.397, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 0.010505464526995259;  // std dev = 0.372, 728.000 (wgt'ed) examples reached here.  /* #neg=605 #pos=123 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, D), haswordtitle(F, C) )
%   | | then if ( haswordvenue(B, D) )
%   | | | then return 0.4127191655943417;  // std dev = 0.094, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.14948276510911815;  // std dev = 3.500, 71.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=39 */
%   | | else if ( haswordtitle(G, C), haswordvenue(B, D) )
%   | | | then return 0.3362936469839648;  // std dev = 1.449, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return -0.059926940367448896;  // std dev = 3.863, 94.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=23 */
%   | else return 0.06018200424616615;  // std dev = 0.487, 5,225.000 (wgt'ed) examples reached here.  /* #neg=3,172 #pos=2,053 */
%   else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | then if ( haswordauthor(I, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, H) )
%   | | | then return 0.05141913305876347;  // std dev = 1.197, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.06636307900200203;  // std dev = 3.273, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | else return -0.05236063693711688;  // std dev = 0.242, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | else return 0.009103040104892093;  // std dev = 0.373, 728.000 (wgt'ed) examples reached here.  /* #neg=605 #pos=123 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.04669089440959914;  // std dev = 0.485, 5,406.000 (wgt'ed) examples reached here.  /* #neg=3,278 #pos=2,128 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then return 0.06928430718757471;  // std dev = 0.441, 62.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=17 */
%   | | else if ( haswordauthor(E, H), haswordvenue(A, H) )
%   | | | then return -0.18165070682228426;  // std dev = 0.008, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.054606168016002356;  // std dev = 1.307, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return -0.014105417219466506;  // std dev = 6.784, 374.000 (wgt'ed) examples reached here.  /* #neg=320 #pos=54 */
%   | | | else return 0.07483150469239165;  // std dev = 3.699, 75.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=18 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.026075417016432626;  // std dev = 6.350, 264.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=51 */
%   | | | else return -0.12413165711034588;  // std dev = 0.121, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(B, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, B) )
%   | then if ( haswordvenue(A, C) )
%   | | then return 0.03133534902119215;  // std dev = 0.483, 4,955.000 (wgt'ed) examples reached here.  /* #neg=3,030 #pos=1,925 */
%   | | else return 0.040498201753600346;  // std dev = 0.406, 425.000 (wgt'ed) examples reached here.  /* #neg=325 #pos=100 */
%   | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | then if ( haswordvenue(A, C) )
%   | | | then return -0.008408798444291458;  // std dev = 8.072, 287.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=100 */
%   | | | else return -0.12853665014379098;  // std dev = 1.641, 75.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=3 */
%   | | else if ( haswordtitle(D, H), haswordvenue(A, H) )
%   | | | then return 0.11855767595862644;  // std dev = 4.313, 94.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=30 */
%   | | | else return -0.3040670163208549;  // std dev = 0.180, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( haswordvenue(A, I), haswordvenue(B, I) )
%   | then if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then return 0.20429611156624164;  // std dev = 0.501, 43.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=25 */
%   | | else return 0.43321047597694295;  // std dev = 0.387, 42.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=34 */
%   | else return 0.016029627015900313;  // std dev = 0.378, 297.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=53 */


Results
   AUC ROC   = 0.546595
   AUC PR    = 0.467377
   CLL	      = -0.677917
   Precision = nan at threshold = 0.5
   Recall    = 0.0
   F1        = nan


Total learning time: 3686.2845480442047 seconds
Total inference time: 3.104 seconds
AUC ROC: 0.546595


Results scoring model
   AUC ROC   = 0.594511
   AUC PR    = 0.462849
   CLL	      = -0.634095
   Precision = 0.850575 at threshold = 0.5
   Recall    = 0.032599
   F1        = 0.062792


Total scoring time: 20.083 seconds
Parameter learned model CLL: -0.634095


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'haswordauthor(E, F), haswordtitle(G, F)', 'false,true,false': 'author(H, E), venue(H, B)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false,true': 'haswordauthor(J, K), haswordtitle(L, K)', 'false,false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true': [0.489, 3, 2], 'false,true,true': [0.446, 45, 17], 'false,true,false,true': [1.155, 4, 2], 'false,true,false,false': [1.05e-08, 22, 0], 'false,false,true,true': [3.325, 42, 15], 'false,false,true,false': [1.356, 23, 2], 'false,false,false,true': [7.71, 365, 71], 'false,false,false,false': [5.401, 175, 35]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, C), haswordtitle(F, D)', 'true,true,true': 'author(G, E), venue(G, A)', 'true,true,false': 'haswordtitle(H, C)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,true': 'haswordauthor(J, K), haswordtitle(L, K)', 'false,false': 'haswordvenue(B, M), haswordauthor(N, M)'}, {'true,true,true,true': [0.0, 10, 0], 'true,true,true,false': [3.871, 22, 47], 'true,true,false,true': [3.688, 68, 17], 'true,true,false,false': [1.97, 6, 11], 'true,false': [0.488, 3, 2], 'false,true,true': [0.446, 45, 17], 'false,true,false': [0.249, 26, 2], 'false,false,true': [0.403, 65, 17], 'false,false,false': [0.37, 540, 106]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D), haswordtitle(F, C)', 'true,true,true': 'author(G, E), venue(G, B)', 'true,true,false': 'haswordtitle(H, C)', 'false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,true': 'haswordauthor(J, K), haswordtitle(L, K)', 'false,true,true': 'haswordtitle(L, I)'}, {'true,true,true,true': [0.0, 10, 0], 'true,true,true,false': [3.829, 22, 47], 'true,true,false,true': [3.724, 68, 17], 'true,true,false,false': [1.983, 6, 11], 'true,false': [0.488, 3, 2], 'false,true,true,true': [1.21, 6, 2], 'false,true,true,false': [3.282, 39, 15], 'false,true,false': [0.259, 26, 2], 'false,false': [0.374, 605, 123]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D), haswordtitle(F, C)', 'true,true,true': 'author(G, E), venue(G, A)', 'true,true,false': 'haswordtitle(H, C)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,true': 'haswordauthor(J, K), haswordtitle(L, K)', 'false,true,true': 'haswordtitle(M, I)'}, {'true,true,true,true': [0.0, 10, 0], 'true,true,true,false': [3.82, 22, 47], 'true,true,false,true': [3.724, 68, 17], 'true,true,false,false': [1.985, 6, 11], 'true,false': [0.488, 3, 2], 'false,true,true,true': [1.213, 6, 2], 'false,true,true,false': [3.287, 39, 15], 'false,true,false': [0.249, 26, 2], 'false,false': [0.374, 605, 123]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(A, D), haswordauthor(E, D)', 'false,true': 'haswordauthor(E, F), haswordtitle(G, F)', 'false,true,true': 'haswordtitle(G, D)', 'false,true,false': 'author(H, E), venue(H, B)', 'false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,false,true': 'haswordtitle(J, K), haswordauthor(L, K)', 'false,false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true': [0.487, 3, 2], 'false,true,true,true': [1.213, 6, 2], 'false,true,true,false': [3.287, 39, 15], 'false,true,false,true': [1.155, 4, 2], 'false,true,false,false': [0.015, 22, 0], 'false,false,true,true': [6.799, 320, 54], 'false,false,true,false': [3.699, 57, 18], 'false,false,false,true': [6.387, 213, 51], 'false,false,false,false': [0.054, 15, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,true': 'haswordauthor(E, F), haswordtitle(G, F)', 'false,true,false': 'author(H, E), venue(H, A)', 'false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false,true': 'haswordtitle(J, K), haswordauthor(L, K)', 'false,false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true': [0.486, 3, 2], 'false,true,true': [0.442, 45, 17], 'false,true,false,true': [1.153, 4, 2], 'false,true,false,false': [0.093, 22, 0], 'false,false,true,true': [6.783, 320, 54], 'false,false,true,false': [3.699, 57, 18], 'false,false,false,true': [6.357, 213, 51], 'false,false,false,false': [0.115, 15, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'author(F, E), venue(F, B)', 'true,true,true': 'samebib(F, G), venue(G, A)', 'true,true,false': 'haswordauthor(H, C)', 'true,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'true,false,true': 'author(K, J), venue(K, A)', 'false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true,true': [1.35, 2, 36], 'true,true,true,false': [0.277, 21, 0], 'true,true,false,true': [2.264, 8, 15], 'true,true,false,false': [4.115, 75, 24], 'true,false,true,true': [3.164, 22, 32], 'true,false,true,false': [4.008, 74, 24], 'true,false,false': [0.489, 3, 1], 'false,true': [0.397, 71, 19], 'false,false': [0.372, 605, 123]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,true': 'haswordtitle(F, D), haswordtitle(F, C)', 'true,true,true': 'haswordvenue(B, D)', 'true,true,false': 'haswordtitle(G, C), haswordvenue(B, D)', 'false': 'haswordvenue(A, H), haswordauthor(I, H)', 'false,true': 'haswordauthor(I, J), haswordtitle(K, J)', 'false,true,true': 'haswordtitle(K, H)'}, {'true,true,true,true': [0.094, 0, 8], 'true,true,true,false': [3.5, 32, 39], 'true,true,false,true': [1.449, 3, 5], 'true,true,false,false': [3.863, 71, 23], 'true,false': [0.487, 3, 2], 'false,true,true,true': [1.197, 6, 2], 'false,true,true,false': [3.273, 39, 15], 'false,true,false': [0.242, 26, 2], 'false,false': [0.373, 605, 123]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'false': 'haswordvenue(B, D), haswordauthor(E, D)', 'false,true': 'haswordauthor(E, F), haswordtitle(G, F)', 'false,true,false': 'haswordauthor(E, H), haswordvenue(A, H)', 'false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,false,true': 'haswordtitle(J, K), haswordauthor(L, K)', 'false,false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true': [0.485, 3, 2], 'false,true,true': [0.441, 45, 17], 'false,true,false,true': [0.008, 3, 0], 'false,true,false,false': [1.307, 23, 2], 'false,false,true,true': [6.784, 320, 54], 'false,false,true,false': [3.699, 57, 18], 'false,false,false,true': [6.35, 213, 51], 'false,false,false,false': [0.121, 15, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(B, C), haswordtitle(D, C)', 'true': 'title(E, D), venue(E, B)', 'true,true': 'haswordvenue(A, C)', 'true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false,true': 'haswordvenue(A, C)', 'true,false,false': 'haswordtitle(D, H), haswordvenue(A, H)', 'false': 'haswordvenue(A, I), haswordvenue(B, I)', 'false,true': 'haswordvenue(A, J), haswordtitle(K, J)'}, {'true,true,true': [0.483, 3, 1], 'true,true,false': [0.406, 325, 100], 'true,false,true,true': [8.072, 187, 100], 'true,false,true,false': [1.641, 72, 3], 'true,false,false,true': [4.313, 64, 30], 'true,false,false,false': [0.18, 6, 0], 'false,true,true': [0.501, 18, 25], 'false,true,false': [0.387, 8, 34], 'false,false': [0.378, 244, 53]}]]
[{'': [0.23868684840518212, 0.14345920935432135], 'false': [0.16654320987654267, 0.14040989916676855], 'false,true': [0.19901144640998908, 0.06632653061224494], 'false,false': [0.16433670434265266, 0.13716224635528101], 'false,false,true': [0.1939058171745147, 0.07360000000000004], 'false,false,false': [0.13632585640939404, 0.13888888888888998], 'false,true,false': [0.22222222222222224, 5.046468293750712e-18]}, {'': [0.23868684840528745, 0.14283718365203812], 'true': [0.24266658526906806, 0.23853358668533434], 'true,true': [0.2409870213106857, 0.1991541714725102], 'true,true,true': [0.0, 0.21718126444024205], 'true,true,false': [0.15999999999999956, 0.22837370242214533], 'false': [0.16319331269248102, 0.14017608453742314], 'false,true': [0.19901144640998966, 0.061973095117813105], 'false,false': [0.16267813605282014, 0.13716150204836253]}, {'': [0.23802943316773717, 0.14258572848025491], 'true': [0.24025386045844024, 0.23794189503441632], 'true,true': [0.2361168940081771, 0.19895120111120398], 'true,true,true': [-1.6653345369377347e-17, 0.212483831361496], 'true,true,false': [0.1631727386918662, 0.23136444716504123], 'false': [0.16413476533669838, 0.13979966092403817], 'false,true': [0.1974280185065116, 0.06694681329934599], 'false,true,true': [0.18303018494688872, 0.1994819801502952]}, {'': [0.23726353419897145, 0.1423353757607181], 'true': [0.21889490834411976, 0.23789638351482656], 'true,true': [0.21866601688298487, 0.19003773694055076], 'true,true,true': [0.0, 0.21150899228300932], 'true,true,false': [0.16312549648330155, 0.2316730552589637], 'false': [0.16102718472296992, 0.13992048344493005], 'false,true': [0.1980988080248276, 0.06222989832834598], 'false,true,true': [0.18406381383904377, 0.20007556972158597]}, {'': [0.23669465542093382, 0.14215502128772606], 'false': [0.15971176858286837, 0.13991566289564272], 'false,true': [0.1980229873944745, 0.062390808626208334], 'false,true,true': [0.1839073409237138, 0.20004075809719452], 'false,false': [0.13470826189832918, 0.14807092530852373], 'false,false,false': [0.154529439307412, 0.00019573917197765283], 'false,false,true': [0.12358707138261803, 0.18240315513535113], 'false,true,false': [0.22222222222222218, 9.75133859587837e-06]}, {'': [0.2366173509246265, 0.14155733377871396], 'false': [0.1607263310853102, 0.1391018461201153], 'false,true': [0.19509636135952857, 0.06699641600536857], 'false,false': [0.13439929408483578, 0.14638874529470236], 'false,false,false': [0.1530694602697324, 0.0008770521294986048], 'false,false,true': [0.12301474389015625, 0.18243826663755028], 'false,true,false': [0.2216316187060852, 0.0003936334574082066]}, {'': [0.23656185640520036, 0.14085711126586523], 'true': [0.2145584894683135, 0.23732278078360042], 'true,false': [0.19067115731953693, 0.23869024561527263], 'true,true': [0.202690040109902, 0.1960839299304765], 'true,true,true': [0.04795581382627544, 0.003657410916265871], 'true,true,false': [0.22280499899811942, 0.17106763717409307], 'true,false,true': [0.1853411542760083, 0.16391301547505083], 'false': [0.1578104053586328, 0.13870592465945725]}, {'': [0.23519613190520902, 0.14081663607126033], 'true': [0.18126191019316348, 0.23706446885200086], 'true,true': [0.16145868954236453, 0.1782590076385555], 'true,true,false': [0.26262015049247217, 0.15876633560504455], 'true,true,true': [0.0011100409901577124, 0.17250908947854532], 'false': [0.15609637665450252, 0.13888795746890828], 'false,true': [0.19585818320785908, 0.05865511867603609], 'false,true,true': [0.178957981869012, 0.19833310105949448]}, {'': [0.2349065985809138, 0.1407104404140356], 'false': [0.15734565092462335, 0.13861356356259577], 'false,true': [0.1942590472906667, 0.06258408633947757], 'false,false': [0.1340671956904323, 0.1457466094117228], 'false,false,false': [0.15275931032060114, 0.000973927927723837], 'false,false,true': [0.12304528649957845, 0.18244123886082575], 'false,true,false': [2.1714075050587495e-05, 0.06836225156401228]}, {'': [0.22551682765552442, 0.17425311724751955], 'true': [0.22811396479229326, 0.19394498629980142], 'true,true': [0.23355583876962868, 0.16459079091065484], 'true,false': [0.18980366053155073, 0.19639854941384974], 'true,false,false': [0.19787272185574514, 0.005408248464621753], 'true,false,true': [0.22702715827556288, 0.03592082781166281], 'false': [0.21411515602238, 0.1426343344365128], 'false,true': [0.25133496727607824, 0.14950001986829978]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
0;false,true;haswordauthor(E, F), haswordtitle(G, F).;true;true
0;false,true,false;author(H, E), venue(H, B).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
1;true,true;haswordtitle(F, C), haswordtitle(F, D).;true;true
1;true,true,true;author(G, E), venue(G, A).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
2;true,true;haswordtitle(F, D), haswordtitle(F, C).;true;true
2;true,true,true;author(G, E), venue(G, B).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordvenue(B, D), haswordauthor(E, D).;true;true
3;true,true;haswordtitle(F, D), haswordtitle(F, C).;true;true
3;true,true,true;author(G, E), venue(G, A).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(A, D), haswordauthor(E, D).;true;true
4;false,true;haswordauthor(E, F), haswordtitle(G, F).;true;true
4;false,true,false;author(H, E), venue(H, B).;true;true
4;false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
4;false,false,false;haswordvenue(A, M), haswordtitle(N, M).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
5;false,true;haswordauthor(E, F), haswordtitle(G, F).;true;true
5;false,true,false;author(H, E), venue(H, A).;true;true
5;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
5;false,false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordvenue(A, D), haswordauthor(E, D).;true;true
7;true,true;haswordtitle(F, D), haswordtitle(F, C).;true;true
7;true,true,true;haswordvenue(B, D).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(B, D), haswordauthor(E, D).;true;true
8;false,true;haswordauthor(E, F), haswordtitle(G, F).;true;true
8;false,true,false;haswordauthor(E, H), haswordvenue(A, H).;true;true
8;false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
8;false,false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C), haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.5393083553893678;  // std dev = 3.871, 69.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=47 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return 0.058148935099512376;  // std dev = 3.688, 85.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=17 */
%   | | | else return 0.5052077586289241;  // std dev = 1.970, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.4233663264038595;  // std dev = 4.118, 69.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=39 */
%   | | | else return 0.06296821220794611;  // std dev = 3.677, 83.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=17 */
%   | | else return 0.25180160610285823;  // std dev = 0.489, 5,073.000 (wgt'ed) examples reached here.  /* #neg=3,076 #pos=1,997 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.06926004621062345;  // std dev = 0.408, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 0.027104979055554243;  // std dev = 0.375, 728.000 (wgt'ed) examples reached here.  /* #neg=605 #pos=123 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C), haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return -0.20155019071979852;  // std dev = 1.05e-08, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.47889194192926215;  // std dev = 3.841, 69.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=47 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return 0.04868562690168165;  // std dev = 3.697, 85.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=17 */
%   | | | else return 0.458925870310532;  // std dev = 1.990, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else return 0.21748257349507408;  // std dev = 0.488, 5,225.000 (wgt'ed) examples reached here.  /* #neg=3,172 #pos=2,053 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then return 0.02490880321722059;  // std dev = 0.376, 521.000 (wgt'ed) examples reached here.  /* #neg=432 #pos=89 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return 0.05226533709386718;  // std dev = 6.397, 258.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=51 */
%   | | | else return -0.027535615320667426;  // std dev = 1.328, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else return -0.1468723092849256;  // std dev = 0.012, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.1841633571074408;  // std dev = 0.487, 5,406.000 (wgt'ed) examples reached here.  /* #neg=3,278 #pos=2,128 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordauthor(G, F) )
%   | | then if ( author(H, G), title(H, E) )
%   | | | then return 0.030045563277541494;  // std dev = 7.626, 393.000 (wgt'ed) examples reached here.  /* #neg=322 #pos=71 */
%   | | | else return -0.14791121151442252;  // std dev = 0.011, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | else return 0.0826345923627981;  // std dev = 0.421, 78.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=18 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, B) )
%   | | | then return 0.04799066553516039;  // std dev = 6.394, 258.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=51 */
%   | | | else return -0.030972189126102202;  // std dev = 1.329, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else return -0.12940710623501228;  // std dev = 0.010, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, B) )
%   | | then if ( samebib(F, G), venue(G, A) )
%   | | | then return 0.6361860292187617;  // std dev = 1.330, 38.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=36 */
%   | | | else return -0.23530774255707548;  // std dev = 0.279, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( haswordvenue(B, D) )
%   | | | then return 0.3558035810614102;  // std dev = 2.258, 23.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   | | | else return 0.020759520968398695;  // std dev = 4.104, 99.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=24 */
%   | else return 0.15170913938700073;  // std dev = 0.488, 5,225.000 (wgt'ed) examples reached here.  /* #neg=3,172 #pos=2,053 */
%   else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | then return 0.01795341813179778;  // std dev = 0.375, 521.000 (wgt'ed) examples reached here.  /* #neg=432 #pos=89 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, A) )
%   | | | then return 0.04173566829609451;  // std dev = 6.397, 258.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=51 */
%   | | | else return -0.02496745475350948;  // std dev = 1.325, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else return -0.1155142138061659;  // std dev = 0.009, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6163094138019908;  // std dev = 1.345, 38.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=36 */
%   | | | else return -0.24663184194192989;  // std dev = 0.255, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( haswordauthor(H, C), haswordtitle(I, C) )
%   | | | then return 0.5601652557197115;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.008985674308693674;  // std dev = 4.679, 116.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=33 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return 0.23122370062101572;  // std dev = 2.751, 54.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=32 */
%   | | | else return 0.02014413961369141;  // std dev = 4.093, 98.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=24 */
%   | | else return 0.1236961783754608;  // std dev = 0.489, 5,073.000 (wgt'ed) examples reached here.  /* #neg=3,076 #pos=1,997 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.055541056995389707;  // std dev = 0.405, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 0.013462642723005815;  // std dev = 0.373, 728.000 (wgt'ed) examples reached here.  /* #neg=605 #pos=123 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordvenue(B, D), haswordtitle(F, C) )
%   | | then if ( haswordtitle(F, D) )
%   | | | then return 0.40128548657521235;  // std dev = 0.097, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.2717469814787685;  // std dev = 1.515, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | else if ( author(G, E), venue(G, B) )
%   | | | then return 0.17999206517012992;  // std dev = 2.743, 56.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=33 */
%   | | | else return 0.0222646364938482;  // std dev = 4.357, 108.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=29 */
%   | else return 0.09773274758892403;  // std dev = 0.487, 5,225.000 (wgt'ed) examples reached here.  /* #neg=3,172 #pos=2,053 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( haswordauthor(I, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(L, H) )
%   | | | then return 0.08991165072192536;  // std dev = 1.214, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.11288744161148728;  // std dev = 3.273, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | else return -0.08873118845943817;  // std dev = 0.256, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | else return 0.011688131499573437;  // std dev = 0.373, 728.000 (wgt'ed) examples reached here.  /* #neg=605 #pos=123 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( haswordauthor(D, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, C) )
%   | | | then return 0.3101195639845042;  // std dev = 0.085, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.012889539108692638;  // std dev = 1.589, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | else return 0.38446273171380935;  // std dev = 0.378, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordtitle(I, G) )
%   | | | then return 0.1717032407856511;  // std dev = 3.477, 70.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=39 */
%   | | | else return -0.06252025486583068;  // std dev = 3.517, 84.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=17 */
%   | | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return 0.05851248518746589;  // std dev = 4.940, 152.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=56 */
%   | | | else return 0.07791170433598817;  // std dev = 34.798, 5,073.000 (wgt'ed) examples reached here.  /* #neg=3,076 #pos=1,997 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.04093659702442182;  // std dev = 0.402, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 0.010134204054363776;  // std dev = 0.373, 728.000 (wgt'ed) examples reached here.  /* #neg=605 #pos=123 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.060195271144545794;  // std dev = 0.484, 5,406.000 (wgt'ed) examples reached here.  /* #neg=3,278 #pos=2,128 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.0778777474754494;  // std dev = 1.204, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.11343240338808974;  // std dev = 3.273, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return 0.1652145558988773;  // std dev = 1.156, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.16064270917029153;  // std dev = 0.108, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | | then return 0.07668109517307936;  // std dev = 3.306, 57.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=15 */
%   | | | else return -0.0747439190203833;  // std dev = 1.349, 25.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=2 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.0023997830130915217;  // std dev = 7.681, 436.000 (wgt'ed) examples reached here.  /* #neg=365 #pos=71 */
%   | | | else return 0.008544434775121509;  // std dev = 5.385, 210.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=35 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then return 0.16016051878492096;  // std dev = 0.356, 59.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=36 */
%   | | else if ( haswordtitle(G, C) )
%   | | | then return -0.05112601906971256;  // std dev = 4.105, 106.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=29 */
%   | | | else return 0.20392395386588147;  // std dev = 1.939, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | else return 0.04699526062363646;  // std dev = 0.486, 5,225.000 (wgt'ed) examples reached here.  /* #neg=3,172 #pos=2,053 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( haswordauthor(I, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(L, H) )
%   | | | then return 0.06373458064931165;  // std dev = 1.201, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.07986724911612593;  // std dev = 3.265, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | else return -0.07532420912667247;  // std dev = 0.257, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return -9.122142894525317E-4;  // std dev = 0.366, 449.000 (wgt'ed) examples reached here.  /* #neg=377 #pos=72 */
%   | | else return 0.02065719582329603;  // std dev = 0.384, 279.000 (wgt'ed) examples reached here.  /* #neg=228 #pos=51 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( haswordvenue(B, C) )
%   | | then return 0.031290878170095925;  // std dev = 0.482, 4,955.000 (wgt'ed) examples reached here.  /* #neg=3,030 #pos=1,925 */
%   | | else return 0.04038908216744862;  // std dev = 0.407, 425.000 (wgt'ed) examples reached here.  /* #neg=325 #pos=100 */
%   | else if ( title(F, D), venue(F, B) )
%   | | then return -0.11173116122669363;  // std dev = 0.414, 127.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=28 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.08568611693803281;  // std dev = 6.883, 192.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=85 */
%   | | | else return -0.02993613391806326;  // std dev = 4.128, 143.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=20 */
%   else if ( haswordvenue(A, G), haswordvenue(B, G) )
%   | then if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.31800840432281247;  // std dev = 2.812, 35.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=24 */
%   | | | else return -0.2244295527242463;  // std dev = 0.929, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return 0.4380276843751033;  // std dev = 0.389, 42.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=34 */
%   | else return 0.014050424498443828;  // std dev = 0.379, 297.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=53 */


Results
   AUC ROC   = 0.555631
   AUC PR    = 0.483876
   CLL	      = -0.675676
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.001339
   F1        = 0.002674


Total learning time: 3949.877429008484 seconds
Total inference time: 3.669 seconds
AUC ROC: 0.555631


Results scoring model
   AUC ROC   = 0.600014
   AUC PR    = 0.472474
   CLL	      = -0.632294
   Precision = 0.925926 at threshold = 0.5
   Recall    = 0.03304
   F1        = 0.063803


Total scoring time: 22.096 seconds
Refined model CLL: -0.632294


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.555631
   AUC PR    = 0.483876
   CLL	      = -0.675676
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.001339
   F1        = 0.002674


Total learning time: 7678.340977052689 seconds
Total inference time: 3.669 seconds
AUC ROC: 0.555631
Total revision time: 7678.340977052689
Best scored revision CLL: -0.632294


Dataset: 3_imdb_cora, Fold: 4, Type: Transfer (trRDN-B), Time: 11:04:00
{'AUC ROC': 0.555631, 'AUC PR': 0.483876, 'CLL': -0.675676, 'Precision': [1.0, 0.5], 'Recall': 0.001339, 'F1': 0.002674, 'Learning time': 7678.340977052689, 'Inference time': 3.669, 'parameter_1.0': {'AUC ROC': 0.546595, 'AUC PR': 0.467377, 'CLL': -0.677917, 'Precision': [nan, 0.5], 'Recall': 0.0, 'F1': nan, 'Learning time': 3686.2845480442047, 'Inference time': 3.104}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C), haswordtitle(E, C) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.2508869862295553;  // std dev = 0.488, 5,398.000 (wgt'ed) examples reached here.  /* #neg=3,278 #pos=2,120 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( haswordauthor(G, H), haswordtitle(I, H) )
%   | | then return 0.13234248348660915;  // std dev = 0.446, 62.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=17 */
%   | | else if ( author(J, G), venue(J, B) )
%   | | | then return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | | then return 0.002533961837480248;  // std dev = 6.797, 374.000 (wgt'ed) examples reached here.  /* #neg=320 #pos=54 */
%   | | | else return 0.09814893509951238;  // std dev = 3.699, 75.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=18 */
%   | | else if ( haswordvenue(A, P), haswordtitle(Q, P) )
%   | | | then return 0.05133075328133034;  // std dev = 6.415, 264.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=51 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.21826644163423856;  // std dev = 0.488, 5,406.000 (wgt'ed) examples reached here.  /* #neg=3,278 #pos=2,128 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then return 0.11545680573570644;  // std dev = 0.446, 62.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=17 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return 0.16653882456488173;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.002225224309551388;  // std dev = 6.797, 374.000 (wgt'ed) examples reached here.  /* #neg=320 #pos=54 */
%   | | | else return 0.08577634002911495;  // std dev = 3.699, 75.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=18 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.044966694644638504;  // std dev = 6.415, 264.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=51 */
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.18444332694458548;  // std dev = 0.488, 5,406.000 (wgt'ed) examples reached here.  /* #neg=3,278 #pos=2,128 */
%   else if ( haswordvenue(A, D), haswordtitle(E, D) )
%   | then if ( haswordtitle(E, F), haswordauthor(G, F) )
%   | | then if ( haswordauthor(G, D) )
%   | | | then return 0.07523135559918881;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.0050640085137795615;  // std dev = 7.590, 435.000 (wgt'ed) examples reached here.  /* #neg=366 #pos=69 */
%   | | else return 0.08804166769645887;  // std dev = 0.421, 78.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=18 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.050282462040439374;  // std dev = 6.350, 258.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=51 */
%   | | | else return -0.028058020759307755;  // std dev = 1.334, 17.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=2 */
%   | | else return -0.12083259631277064;  // std dev = 0.101, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.15230174635942137;  // std dev = 0.488, 5,406.000 (wgt'ed) examples reached here.  /* #neg=3,278 #pos=2,128 */
%   else if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then return 0.12337946933687173;  // std dev = 0.442, 62.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=17 */
%   | | else if ( author(H, E), venue(H, A) )
%   | | | then return 0.17968332664699738;  // std dev = 1.153, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.14958559418435716;  // std dev = 0.100, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return -0.010466954734682992;  // std dev = 6.766, 374.000 (wgt'ed) examples reached here.  /* #neg=320 #pos=54 */
%   | | | else return 0.08630895689034139;  // std dev = 3.699, 75.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=18 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.040038031039104416;  // std dev = 6.370, 264.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=51 */
%   | | | else return -0.10844811959919616;  // std dev = 0.075, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C), haswordtitle(F, D) )
%   | | then if ( author(G, E), venue(G, B) )
%   | | | then return -0.2701027164490589;  // std dev = 1.83e-08, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.39547692074402035;  // std dev = 3.798, 69.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=47 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return -0.07010271644905909;  // std dev = 3.688, 85.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=17 */
%   | | | else return 0.3769561070803529;  // std dev = 1.970, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.2951146748552883;  // std dev = 4.118, 69.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=39 */
%   | | | else return -0.06528343934062536;  // std dev = 3.677, 83.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=17 */
%   | | else return 0.12354995455434067;  // std dev = 0.489, 5,073.000 (wgt'ed) examples reached here.  /* #neg=3,076 #pos=1,997 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.05181055298751456;  // std dev = 0.400, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 0.013609730133404708;  // std dev = 0.372, 728.000 (wgt'ed) examples reached here.  /* #neg=605 #pos=123 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.6157349599659042;  // std dev = 1.354, 38.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=36 */
%   | | | else return -0.31422882349809295;  // std dev = 0.146, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( haswordvenue(A, D) )
%   | | | then return 0.2905634346030873;  // std dev = 2.163, 23.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=15 */
%   | | | else return -0.03331851504437582;  // std dev = 4.204, 99.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=24 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( author(J, I), venue(J, B) )
%   | | | then return 0.27736540037574836;  // std dev = 3.358, 54.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=32 */
%   | | | else return -0.041353327194992136;  // std dev = 4.104, 98.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=24 */
%   | | else return 0.098513120931636;  // std dev = 0.489, 5,073.000 (wgt'ed) examples reached here.  /* #neg=3,076 #pos=1,997 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then return 0.03980283632210417;  // std dev = 0.397, 90.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=19 */
%   | else return 0.012433861277618464;  // std dev = 0.373, 728.000 (wgt'ed) examples reached here.  /* #neg=605 #pos=123 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then return 0.07718188450885495;  // std dev = 0.486, 5,406.000 (wgt'ed) examples reached here.  /* #neg=3,278 #pos=2,128 */
%   else if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( haswordauthor(E, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, D) )
%   | | | then return 0.055907407667101894;  // std dev = 1.205, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.08520909623768302;  // std dev = 3.269, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | else if ( author(H, E), venue(H, B) )
%   | | | then return 0.12148720521558798;  // std dev = 1.150, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return -0.1230259347348365;  // std dev = 0.055, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return -0.012225334423022404;  // std dev = 6.764, 374.000 (wgt'ed) examples reached here.  /* #neg=320 #pos=54 */
%   | | | else return 0.07134658789483192;  // std dev = 3.699, 75.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=18 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.0323060947699297;  // std dev = 6.387, 264.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=51 */
%   | | | else return -0.09695083121361052;  // std dev = 0.034, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then if ( haswordtitle(F, C), haswordtitle(F, D) )
%   | | then if ( haswordvenue(A, D) )
%   | | | then return 0.38811666486896157;  // std dev = 0.093, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.15675367990021222;  // std dev = 3.616, 71.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=39 */
%   | | else if ( haswordtitle(G, C) )
%   | | | then return -0.07987060004526463;  // std dev = 3.544, 85.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=17 */
%   | | | else return 0.2751777091185059;  // std dev = 2.031, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordtitle(J, H) )
%   | | | then return 0.1734556058656597;  // std dev = 3.871, 69.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=39 */
%   | | | else return -0.07299935068460658;  // std dev = 3.569, 83.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=17 */
%   | | else return 0.06069908678464637;  // std dev = 0.489, 5,073.000 (wgt'ed) examples reached here.  /* #neg=3,076 #pos=1,997 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then return 0.006411022660639092;  // std dev = 0.373, 521.000 (wgt'ed) examples reached here.  /* #neg=432 #pos=89 */
%   | else return 0.01927332959124387;  // std dev = 0.377, 297.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=53 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then if ( author(F, E), venue(F, A) )
%   | | then if ( samebib(F, G), venue(G, B) )
%   | | | then return 0.4660987053178543;  // std dev = 1.347, 38.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=36 */
%   | | | else return -0.31968843322595003;  // std dev = 0.479, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return -0.04386764936838478;  // std dev = 4.215, 104.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=29 */
%   | | | else return 0.1904925402380341;  // std dev = 2.015, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | else return 0.04657176894830313;  // std dev = 0.487, 5,225.000 (wgt'ed) examples reached here.  /* #neg=3,172 #pos=2,053 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( haswordauthor(J, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(M, I) )
%   | | | then return 0.07481193792388399;  // std dev = 1.178, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.09641420784173706;  // std dev = 3.257, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | else return -0.08285183057017156;  // std dev = 0.248, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | else return 0.005981558474973946;  // std dev = 0.371, 728.000 (wgt'ed) examples reached here.  /* #neg=605 #pos=123 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordtitle(D, C) )
%   then if ( title(E, D), venue(E, A) )
%   | then if ( haswordvenue(B, C) )
%   | | then return 0.031159115773456817;  // std dev = 0.483, 4,955.000 (wgt'ed) examples reached here.  /* #neg=3,030 #pos=1,925 */
%   | | else return 0.041538014053970035;  // std dev = 0.406, 425.000 (wgt'ed) examples reached here.  /* #neg=325 #pos=100 */
%   | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | then if ( haswordvenue(B, C) )
%   | | | then return -0.008756946498560571;  // std dev = 8.072, 287.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=100 */
%   | | | else return -0.12547341762301503;  // std dev = 1.636, 75.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=3 */
%   | | else if ( haswordvenue(B, C) )
%   | | | then return 0.33031099775231;  // std dev = 1.854, 16.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=11 */
%   | | | else return 0.0429509797784295;  // std dev = 3.882, 84.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=19 */
%   else if ( haswordvenue(A, H), haswordvenue(B, H) )
%   | then if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then return 0.20712595019808563;  // std dev = 0.503, 43.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=25 */
%   | | else return 0.43337132248391325;  // std dev = 0.388, 42.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=34 */
%   | else return 0.015798529639234008;  // std dev = 0.377, 297.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=53 */


Results
   AUC ROC   = 0.556106
   AUC PR    = 0.484588
   CLL	      = -0.674447
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.013387
   F1        = 0.02642


Total learning time: 3935.1942172050476 seconds
Total inference time: 3.24 seconds
AUC ROC: 0.556106


Dataset: 3_imdb_cora, Fold: 4, Type: Scratch (RDN-B), Time: 12:09:40
{'AUC ROC': 0.556106, 'AUC PR': 0.484588, 'CLL': -0.674447, 'Precision': [1.0, 0.5], 'Recall': 0.013387, 'F1': 0.02642, 'Learning time': 3935.1942172050476, 'Inference time': 3.24}


Starting fold 5

Target train facts examples: 33914
Target train pos examples: 2467
Target train neg examples: 4522

Target test facts examples: 8644
Target test pos  examples: 550
Target test neg examples: 500

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.6072331841837569;  // std dev = 10.130, 546.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=409 */
%   | | | else return -0.11549192157264582;  // std dev = 3.947, 607.000 (wgt'ed) examples reached here.  /* #neg=591 #pos=16 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.04862512557570276;  // std dev = 1.799, 21.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
%   | | | else return 0.24839283753853675;  // std dev = 3.123, 41.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=16 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.524815601766179;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.5854216623722396;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.6359267128772901;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return 0.01787115732173424;  // std dev = 0.366, 144.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=23 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.5163197908694921;  // std dev = 10.130, 546.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=409 */
%   | | | else return -0.10200597620138768;  // std dev = 3.947, 607.000 (wgt'ed) examples reached here.  /* #neg=591 #pos=16 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.04260232039124624;  // std dev = 1.799, 21.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
%   | | | else return 0.21538963726453592;  // std dev = 3.123, 41.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=16 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.448295606241962;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.16653882456488173;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.498380757744019;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.5398498420741675;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return 0.015681758072392728;  // std dev = 0.366, 144.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=23 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.41202949850797277;  // std dev = 10.130, 546.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=409 */
%   | | | else return -0.09101881821543281;  // std dev = 3.947, 607.000 (wgt'ed) examples reached here.  /* #neg=591 #pos=16 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.03715320154661483;  // std dev = 1.799, 21.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
%   | | | else return 0.18211112909257343;  // std dev = 3.123, 41.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=16 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.36236334632262296;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.1420942428155648;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.3990418766037683;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.4289562725350853;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return 0.013737496911495426;  // std dev = 0.366, 144.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=23 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.3143457591163584;  // std dev = 10.127, 545.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=408 */
%   | | | else return -0.0805735393719802;  // std dev = 4.145, 612.000 (wgt'ed) examples reached here.  /* #neg=594 #pos=18 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.09843917483303583;  // std dev = 3.120, 50.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=15 */
%   | | | else return 0.2602601674728952;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.2807538536965853;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.11914890490746428;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.30590364655137575;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.32644004768013724;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return 0.012016456572143983;  // std dev = 0.366, 144.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=23 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0739681875306794;  // std dev = 0.362, 1,215.000 (wgt'ed) examples reached here.  /* #neg=770 #pos=445 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.23933694341299513;  // std dev = 1.673, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return 0.09181380120750746;  // std dev = 1.495, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.24902504036811815;  // std dev = 1.040, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.24503149911444544;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, A) )
%   | | then return -0.010336026508112044;  // std dev = 0.346, 72.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=10 */
%   | | else if ( haswordtitle(K, M), haswordauthor(N, M) )
%   | | | then return 0.07299730682522139;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return 0.1507750846029992;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0.001718480829414201;  // std dev = 0.358, 53.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=8 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.061554878246471836;  // std dev = 0.360, 1,215.000 (wgt'ed) examples reached here.  /* #neg=770 #pos=445 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.17327291225922967;  // std dev = 1.618, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.05238880829696139;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.17716029001614453;  // std dev = 1.467, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.18482045881522163;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( title(M, L), venue(M, A) )
%   | | then return -0.009028549300693077;  // std dev = 0.346, 72.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=10 */
%   | | else if ( haswordauthor(N, K) )
%   | | | then return 0.04126837287975944;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.11936565830358756;  // std dev = 1.690, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | else return 0.0015001763934278844;  // std dev = 0.358, 53.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=8 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05107644729535299;  // std dev = 0.358, 1,215.000 (wgt'ed) examples reached here.  /* #neg=770 #pos=445 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.15313601539195806;  // std dev = 1.665, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return 0.025513825004017616;  // std dev = 1.495, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.15165489566599746;  // std dev = 1.019, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.1410881440687913;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, A) )
%   | | then return -0.007894223674338324;  // std dev = 0.346, 72.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=10 */
%   | | else if ( haswordtitle(K, M), haswordauthor(N, M) )
%   | | | then return 0.05300977085575563;  // std dev = 1.246, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return 0.11314133180033333;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0.001309388757385241;  // std dev = 0.358, 53.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=8 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04228588152735382;  // std dev = 0.356, 1,215.000 (wgt'ed) examples reached here.  /* #neg=770 #pos=445 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.11826883563684062;  // std dev = 1.664, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return 0.019172024442155117;  // std dev = 1.495, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | else return 0.11165044844340813;  // std dev = 0.415, 15.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=11 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then return -0.14694106388378328;  // std dev = 0.005, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, A) )
%   | | | then return 0.003456520045365956;  // std dev = 2.917, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return 0.07169681117542262;  // std dev = 1.914, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.01686597131821882;  // std dev = 2.582, 48.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=8 */
%   | | | else return -0.14980069534844764;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.034946054145124424;  // std dev = 0.355, 1,215.000 (wgt'ed) examples reached here.  /* #neg=770 #pos=445 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.09153235266931643;  // std dev = 1.664, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return 0.01441416556994716;  // std dev = 1.495, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.08914392962292449;  // std dev = 1.016, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.08486689062885472;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, A) )
%   | | then return -0.006103487943003485;  // std dev = 0.345, 72.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=10 */
%   | | else if ( haswordauthor(M, J) )
%   | | | then return 0.017830997503776307;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.07555945572108895;  // std dev = 1.689, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | else return 8.805530585510883E-4;  // std dev = 0.357, 53.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=8 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.028839768794410598;  // std dev = 0.354, 1,215.000 (wgt'ed) examples reached here.  /* #neg=770 #pos=445 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.08639430022390215;  // std dev = 1.599, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return -0.03806885595987212;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0.06493705667833705;  // std dev = 0.428, 20.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordauthor(K, I) )
%   | | then return -0.129002760874271;  // std dev = 0.005, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( title(L, J), venue(L, B) )
%   | | | then return 0.030896669385961376;  // std dev = 3.079, 61.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=12 */
%   | | | else return -0.03489738118467885;  // std dev = 1.647, 25.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=3 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.018668835065475155;  // std dev = 0.371, 48.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=8 */
%   | | else return -0.1318058649697032;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.898298
   AUC PR    = 0.877624
   CLL	      = -0.46849
   Precision = 0.897059 at threshold = 0.5
   Recall    = 0.887273
   F1        = 0.892139


Total learning time: 1780.3591842651367 seconds
Total inference time: 3.703 seconds
AUC ROC: 0.898298


Results scoring model
   AUC ROC   = 0.889156
   AUC PR    = 0.737331
   CLL	      = -0.413527
   Precision = 0.747405 at threshold = 0.5
   Recall    = 0.876268
   F1        = 0.806723


Total scoring time: 21.174 seconds
Parameter learned model CLL: -0.413527


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,true': 'samebib(E, F), venue(F, B)', 'true,true,false': 'title(G, D), venue(G, B)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'haswordtitle(I, J), haswordauthor(K, J)', 'true,false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true,true': [10.13, 137, 409], 'true,true,true,false': [3.947, 591, 16], 'true,true,false,true': [1.799, 17, 4], 'true,true,false,false': [3.123, 25, 16], 'true,false,true,true': [1.633, 4, 8], 'true,false,true,false': [1.155, 4, 2], 'true,false,false,true': [1.477, 3, 8], 'true,false,false,false': [1.247, 2, 7], 'false': [0.366, 121, 23]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,true': 'samebib(E, F), venue(F, B)', 'true,true,false': 'title(G, D), venue(G, B)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'haswordtitle(I, J), haswordauthor(K, J)', 'true,false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true,true': [10.13, 137, 409], 'true,true,true,false': [3.947, 591, 16], 'true,true,false,true': [1.799, 17, 4], 'true,true,false,false': [3.123, 25, 16], 'true,false,true,true': [1.633, 4, 8], 'true,false,true,false': [1.155, 4, 2], 'true,false,false,true': [1.477, 3, 8], 'true,false,false,false': [1.247, 2, 7], 'false': [0.366, 121, 23]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,true': 'samebib(E, F), venue(F, B)', 'true,true,false': 'title(G, D), venue(G, B)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'haswordtitle(I, J), haswordauthor(K, J)', 'true,false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true,true': [10.13, 137, 409], 'true,true,true,false': [3.947, 591, 16], 'true,true,false,true': [1.799, 17, 4], 'true,true,false,false': [3.123, 25, 16], 'true,false,true,true': [1.633, 4, 8], 'true,false,true,false': [1.155, 4, 2], 'true,false,false,true': [1.477, 3, 8], 'true,false,false,false': [1.247, 2, 7], 'false': [0.366, 121, 23]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,true': 'samebib(E, F), venue(F, A)', 'true,true,false': 'haswordtitle(D, G), haswordauthor(H, G)', 'true,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'true,false,true': 'haswordtitle(J, K), haswordauthor(L, K)', 'true,false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true,true,true': [10.127, 137, 408], 'true,true,true,false': [4.145, 594, 18], 'true,true,false,true': [3.12, 35, 15], 'true,true,false,false': [1.414, 4, 4], 'true,false,true,true': [1.633, 4, 8], 'true,false,true,false': [1.155, 4, 2], 'true,false,false,true': [1.477, 3, 8], 'true,false,false,false': [1.247, 2, 7], 'false': [0.366, 121, 23]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, A)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'title(L, K), venue(L, A)', 'false,true,false': 'haswordtitle(K, M), haswordauthor(N, M)'}, {'true,true': [0.362, 770, 445], 'true,false,true,true': [1.673, 5, 9], 'true,false,true,false': [1.495, 4, 5], 'true,false,false,true': [1.04, 2, 4], 'true,false,false,false': [1.247, 2, 7], 'false,true,true': [0.346, 62, 10], 'false,true,false,true': [1.247, 7, 2], 'false,true,false,false': [1.449, 7, 3], 'false,false': [0.358, 45, 8]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,true': 'title(M, L), venue(M, A)', 'false,true,false': 'haswordauthor(N, K)'}, {'true,true': [0.36, 770, 445], 'true,false,true,true': [1.618, 4, 8], 'true,false,true,false': [1.155, 4, 2], 'true,false,false,true': [1.467, 3, 8], 'true,false,false,false': [1.247, 2, 7], 'false,true,true': [0.346, 62, 10], 'false,true,false,true': [0.894, 4, 1], 'false,true,false,false': [1.69, 10, 4], 'false,false': [0.358, 45, 8]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, A)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'title(L, K), venue(L, A)', 'false,true,false': 'haswordtitle(K, M), haswordauthor(N, M)'}, {'true,true': [0.358, 770, 445], 'true,false,true,true': [1.665, 5, 9], 'true,false,true,false': [1.495, 4, 5], 'true,false,false,true': [1.019, 2, 4], 'true,false,false,false': [1.247, 2, 7], 'false,true,true': [0.346, 62, 10], 'false,true,false,true': [1.246, 7, 2], 'false,true,false,false': [1.449, 7, 3], 'false,false': [0.358, 45, 8]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, A)', 'false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,false,true': 'title(L, K), venue(L, A)', 'false,false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true': [0.356, 770, 445], 'true,false,true,true': [1.664, 5, 9], 'true,false,true,false': [1.495, 4, 5], 'true,false,false': [0.415, 4, 11], 'false,true': [0.005, 7, 0], 'false,false,true,true': [2.917, 57, 10], 'false,false,true,false': [1.914, 14, 5], 'false,false,false,true': [2.582, 40, 8], 'false,false,false,false': [0.0, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, A)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'title(L, K), venue(L, A)', 'false,true,false': 'haswordauthor(M, J)'}, {'true,true': [0.355, 770, 445], 'true,false,true,true': [1.664, 5, 9], 'true,false,true,false': [1.495, 4, 5], 'true,false,false,true': [1.016, 2, 4], 'true,false,false,false': [1.247, 2, 7], 'false,true,true': [0.345, 62, 10], 'false,true,false,true': [0.894, 4, 1], 'false,true,false,false': [1.689, 10, 4], 'false,false': [0.357, 45, 8]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordauthor(K, I)', 'false,true,false': 'title(L, J), venue(L, B)', 'false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.354, 770, 445], 'true,false,true,true': [1.599, 4, 8], 'true,false,true,false': [1.155, 4, 2], 'true,false,false': [0.428, 5, 15], 'false,true,true': [0.005, 7, 0], 'false,true,false,true': [3.079, 49, 12], 'false,true,false,false': [1.647, 22, 3], 'false,false,true': [0.371, 40, 8], 'false,false,false': [2.63e-09, 3, 0]}]]
[{'': [0.23439993019146907, 0.13421103395061829], 'true': [0.23211231350233094, 0.2250692520775636], 'true,true': [0.23273499728073177, 0.2185223725286156], 'true,true,true': [0.1879570368581341, 0.02566433889086468], 'true,false': [0.24691358024691354, 0.18749999999999964], 'true,false,true': [0.2222222222222221, 0.22222222222222224], 'true,true,false': [0.15419501133786834, 0.2379535990481851], 'true,false,false': [0.19834710743801634, 0.17283950617283939]}, {'': [0.20128543939434426, 0.1342110339506167], 'true': [0.19882845596702867, 0.2187922890951576], 'true,false': [0.23986375200467236, 0.1872943088950943], 'true,false,true': [0.2222222222222222, 0.2222222222222222], 'true,true': [0.1978317591740833, 0.21627094222409401], 'true,true,false': [0.15419501133786834, 0.23795359904818547], 'true,true,true': [0.1879570368581455, 0.0256643388908641], 'true,false,false': [0.1983471074380164, 0.1728395061728397]}, {'': [0.17071615764040943, 0.1342110339506166], 'true': [0.16809903073725743, 0.2126452584010485], 'true,false': [0.23300410621328954, 0.18709016746196105], 'true,false,true': [0.22222222222222218, 0.22222222222222224], 'true,false,false': [0.19834710743801642, 0.17283950617283944], 'true,true': [0.16560492855820763, 0.21429031607580412], 'true,true,false': [0.15419501133786845, 0.237953599048185], 'true,true,true': [0.18795703685812937, 0.025664338890864172]}, {'': [0.14810780697389664, 0.13421103395061726], 'true': [0.14537596769847022, 0.20836114526782898], 'true,false': [0.22802581321625207, 0.186973068452089], 'true,false,true': [0.22222222222222232, 0.22222222222222218], 'true,false,false': [0.19834710743801648, 0.17283950617283966], 'true,true': [0.14235551853701864, 0.20540557896583728], 'true,true,false': [0.1946586048887921, 0.25000000000000006], 'true,true,true': [0.1881861796145076, 0.028077372299218417]}, {'': [0.1337906654599372, 0.1342110339506161], 'false': [0.13766453326892922, 0.12815948736205088], 'false,true': [0.11959876543209907, 0.1939058171745152], 'false,true,false': [0.1728395061728395, 0.21000000000000002], 'true': [0.13099385386276627, 0.20598309491229005], 'true,false': [0.22401395912879785, 0.17577708343635778], 'true,false,true': [0.19988877645353806, 0.24829493042432882], 'true,false,false': [0.1801738803085883, 0.1728395061728395]}, {'': [0.13184150008692438, 0.13375070543630033], 'false': [0.13695423689286929, 0.12815948736205043], 'false,true': [0.11959876543209898, 0.1935206129967513], 'false,true,false': [0.16, 0.20388721155070397], 'true': [0.12931226445669314, 0.2036822724417841], 'true,false': [0.22288264382920497, 0.18532736831489147], 'true,false,true': [0.21823271564413557, 0.22244052247217028], 'true,false,false': [0.19551830488376576, 0.1728395061728395]}, {'': [0.13041818241073963, 0.13337688659942704], 'false': [0.13637789395920988, 0.12815948736205052], 'false,true': [0.11959876543209871, 0.19318453914762554], 'false,true,false': [0.17259763869208175, 0.21000000000000005], 'true': [0.12801242939501312, 0.20275628981986862], 'true,false': [0.22152498978594687, 0.17290392721914805], 'true,false,true': [0.19792307400565784, 0.24832499714269396], 'true,false,false': [0.1729335650450207, 0.1728395061728395]}, {'': [0.12933529240515684, 0.13308265404173156], 'false': [3.270996845474875e-06, 0.1386190903453396], 'false,false': [0.14234307989645653, 0.13225682429834698], 'false,false,true': [0.12697705502339046, 0.19290061275633733], 'false,false,false': [0.1388888888888891, 0.0], 'true': [0.12700301891314938, 0.20149216049003402], 'true,false': [0.21991638879561726, 0.17261572771894693], 'true,false,true': [0.19781362182867981, 0.2483209710987355]}, {'': [0.12851551666367025, 0.13252938992145322], 'false': [0.13537066954420315, 0.1276209268751517], 'false,true': [0.1192759428461146, 0.19286531509197674], 'false,true,false': [0.15999999999999998, 0.20372593423320765], 'true': [0.12621485702108196, 0.20079372525050154], 'true,false': [0.21898356760475501, 0.17251759483328674], 'true,false,true': [0.19779881250384, 0.24831758731502795], 'true,false,false': [0.1720237519864235, 0.1728395061728395]}, {'': [0.12788563599076488, 0.13235867582432437], 'false': [0.13333852347404074, 0.13052365318395334], 'false,true': [3.920475966948904e-06, 0.14269972966525055], 'false,true,false': [0.15546146127931007, 0.10849063612554952], 'false,false': [0.13734946178144003, 2.3129646346357427e-18], 'true': [0.12559593068382902, 0.20040937570340905], 'true,false': [0.21952661026061318, 0.18301381305327896], 'true,false,true': [0.21302548268114854, 0.22220148058805825]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(B, H), haswordauthor(I, H).;true;true
7;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;true
7;false,false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
9;false,true;haswordauthor(K, I).;true;true
9;false,false;haswordvenue(A, M), haswordtitle(N, M).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.6072331841837569;  // std dev = 10.130, 546.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=409 */
%   | | | else return -0.11549192157264582;  // std dev = 3.947, 607.000 (wgt'ed) examples reached here.  /* #neg=591 #pos=16 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.04862512557570276;  // std dev = 1.799, 21.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
%   | | | else return 0.24839283753853675;  // std dev = 3.123, 41.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=16 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.524815601766179;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.5854216623722396;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.6359267128772901;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return 0.01787115732173424;  // std dev = 0.366, 144.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=23 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.5163197908694921;  // std dev = 10.130, 546.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=409 */
%   | | | else return -0.10200597620138768;  // std dev = 3.947, 607.000 (wgt'ed) examples reached here.  /* #neg=591 #pos=16 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.04260232039124624;  // std dev = 1.799, 21.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
%   | | | else return 0.21538963726453592;  // std dev = 3.123, 41.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=16 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.448295606241962;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.16653882456488173;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.498380757744019;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.5398498420741675;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return 0.015681758072392728;  // std dev = 0.366, 144.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=23 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.41202949850797277;  // std dev = 10.130, 546.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=409 */
%   | | | else return -0.09101881821543281;  // std dev = 3.947, 607.000 (wgt'ed) examples reached here.  /* #neg=591 #pos=16 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.03715320154661483;  // std dev = 1.799, 21.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
%   | | | else return 0.18211112909257343;  // std dev = 3.123, 41.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=16 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.36236334632262296;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.1420942428155648;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.3990418766037683;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.4289562725350853;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return 0.013737496911495426;  // std dev = 0.366, 144.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=23 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.3143457591163584;  // std dev = 10.127, 545.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=408 */
%   | | | else return -0.0805735393719802;  // std dev = 4.145, 612.000 (wgt'ed) examples reached here.  /* #neg=594 #pos=18 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.09843917483303583;  // std dev = 3.120, 50.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=15 */
%   | | | else return 0.2602601674728952;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.2807538536965853;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.11914890490746428;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.30590364655137575;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.32644004768013724;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return 0.012016456572143983;  // std dev = 0.366, 144.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=23 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0739681875306794;  // std dev = 0.362, 1,215.000 (wgt'ed) examples reached here.  /* #neg=770 #pos=445 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.23933694341299513;  // std dev = 1.673, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return 0.09181380120750746;  // std dev = 1.495, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.24902504036811815;  // std dev = 1.040, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.24503149911444544;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, A) )
%   | | then return -0.010336026508112044;  // std dev = 0.346, 72.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=10 */
%   | | else if ( haswordtitle(K, M), haswordauthor(N, M) )
%   | | | then return 0.07299730682522139;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return 0.1507750846029992;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | else return 0.001718480829414201;  // std dev = 0.358, 53.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=8 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.061554878246471836;  // std dev = 0.360, 1,215.000 (wgt'ed) examples reached here.  /* #neg=770 #pos=445 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.17327291225922967;  // std dev = 1.618, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.05238880829696139;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.17716029001614453;  // std dev = 1.467, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.18482045881522163;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( title(M, L), venue(M, A) )
%   | | then return -0.009028549300693077;  // std dev = 0.346, 72.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=10 */
%   | | else if ( haswordauthor(N, K) )
%   | | | then return 0.04126837287975944;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.11936565830358756;  // std dev = 1.690, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | else return 0.0015001763934278844;  // std dev = 0.358, 53.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=8 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05107644729535299;  // std dev = 0.358, 1,215.000 (wgt'ed) examples reached here.  /* #neg=770 #pos=445 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.15313601539195806;  // std dev = 1.665, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return 0.025513825004017616;  // std dev = 1.495, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.15165489566599746;  // std dev = 1.019, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.1410881440687913;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return -0.016452569668380747;  // std dev = 0.348, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, A) )
%   | | | then return -0.00392596970608436;  // std dev = 2.928, 70.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=10 */
%   | | | else return 0.10215021558981034;  // std dev = 1.689, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | else return 0.001309388757385241;  // std dev = 0.358, 53.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=8 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04228588152735382;  // std dev = 0.356, 1,215.000 (wgt'ed) examples reached here.  /* #neg=770 #pos=445 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.11826883563684062;  // std dev = 1.664, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return 0.019172024442155117;  // std dev = 1.495, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.1154435741518854;  // std dev = 1.017, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.10912169797108993;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return -0.014262421587376974;  // std dev = 0.348, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return -0.14729456591548673;  // std dev = 0.004, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.021517350285579252;  // std dev = 3.374, 79.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=14 */
%   | | | else return 0.007062049749591381;  // std dev = 2.597, 51.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=8 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.034946054145124424;  // std dev = 0.355, 1,215.000 (wgt'ed) examples reached here.  /* #neg=770 #pos=445 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.09153235266931643;  // std dev = 1.664, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return 0.01441416556994716;  // std dev = 1.495, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.08825774376733149;  // std dev = 1.016, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.08540523411308514;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return -0.01238369205991934;  // std dev = 0.348, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, A) )
%   | | | then return -0.004702606143789082;  // std dev = 2.923, 70.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=10 */
%   | | | else return 0.08289085566224533;  // std dev = 1.689, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | else return 9.470999056321599E-4;  // std dev = 0.358, 53.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=8 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.08293091899681207;  // std dev = 0.303, 30.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=12 */
%   | else if ( haswordtitle(F, C) )
%   | | then return 0.027470372586754572;  // std dev = 0.355, 1,185.000 (wgt'ed) examples reached here.  /* #neg=752 #pos=433 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.04468372555514008;  // std dev = 1.988, 18.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=10 */
%   | | | else return 0.0651213033603778;  // std dev = 1.913, 20.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.12939331565016227;  // std dev = 0.005, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, A) )
%   | | | then return 0.0010561824378447812;  // std dev = 2.916, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return 0.06188508321095001;  // std dev = 1.912, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.015843058842359408;  // std dev = 2.582, 48.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=8 */
%   | | | else return -0.15082360782430723;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.896016
   AUC PR    = 0.879939
   CLL	      = -0.47046
   Precision = 0.897059 at threshold = 0.5
   Recall    = 0.887273
   F1        = 0.892139


Total learning time: 1786.2675988674164 seconds
Total inference time: 3.823 seconds
AUC ROC: 0.896016


Results scoring model
   AUC ROC   = 0.890495
   AUC PR    = 0.746886
   CLL	      = -0.413598
   Precision = 0.747405 at threshold = 0.5
   Recall    = 0.876268
   F1        = 0.806723


Total scoring time: 21.3 seconds
Refined model CLL: -0.413598


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.898298
   AUC PR    = 0.877624
   CLL	      = -0.46849
   Precision = 0.897059 at threshold = 0.5
   Recall    = 0.887273
   F1        = 0.892139


Total learning time: 3609.1007831325533 seconds
Total inference time: 3.703 seconds
AUC ROC: 0.898298
Total revision time: 3609.1007831325533
Best scored revision CLL: -0.413527


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 13:10:02
{'AUC ROC': 0.898298, 'AUC PR': 0.877624, 'CLL': -0.46849, 'Precision': [0.897059, 0.5], 'Recall': 0.887273, 'F1': 0.892139, 'Learning time': 3609.1007831325533, 'Inference time': 3.703, 'parameter_0.2': {'AUC ROC': 0.898298, 'AUC PR': 0.877624, 'CLL': -0.46849, 'Precision': [0.897059, 0.5], 'Recall': 0.887273, 'F1': 0.892139, 'Learning time': 1780.3591842651367, 'Inference time': 3.703}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( haswordauthor(E, C) )
%   | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.22707254621061856;  // std dev = 16.377, 1,152.000 (wgt'ed) examples reached here.  /* #neg=727 #pos=425 */
%   | | | else return 0.18573514199606403;  // std dev = 3.574, 58.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=19 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.524815601766179;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.5854216623722396;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.6359267128772901;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.022984099934677215;  // std dev = 0.371, 91.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=15 */
%   | else return 0.009092331325927433;  // std dev = 0.358, 53.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=8 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.5772847886598269;  // std dev = 10.130, 546.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=409 */
%   | | | else return -0.1454028846535074;  // std dev = 3.947, 607.000 (wgt'ed) examples reached here.  /* #neg=591 #pos=16 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.02447885467564217;  // std dev = 1.799, 21.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
%   | | | else return 0.2258972367179001;  // std dev = 3.121, 41.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=16 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.448295606241962;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.16653882456488173;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.498380757744019;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.5398498420741675;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return 0.01567978904984081;  // std dev = 0.366, 144.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=23 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.47928526164126223;  // std dev = 10.130, 546.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=409 */
%   | | | else return -0.12569338876587166;  // std dev = 3.947, 607.000 (wgt'ed) examples reached here.  /* #neg=591 #pos=16 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.02106218357987971;  // std dev = 1.799, 21.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
%   | | | else return 0.1924886248712952;  // std dev = 3.120, 41.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=16 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.36236334632262296;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.1420942428155648;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.3990418766037683;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.4289562725350853;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return 0.013735762181426827;  // std dev = 0.366, 144.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=23 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.37537986077298174;  // std dev = 10.130, 546.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=409 */
%   | | | else return -0.11018611483953922;  // std dev = 3.947, 607.000 (wgt'ed) examples reached here.  /* #neg=591 #pos=16 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.018077793047497476;  // std dev = 1.799, 21.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
%   | | | else return 0.1601778716513403;  // std dev = 3.120, 41.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=16 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.2807538536965853;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.11914890490746428;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.30590364655137575;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.32644004768013724;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return 0.01201493301173608;  // std dev = 0.366, 144.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=23 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.2838099821330932;  // std dev = 10.127, 545.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=408 */
%   | | | else return -0.09640162828673765;  // std dev = 4.145, 612.000 (wgt'ed) examples reached here.  /* #neg=594 #pos=18 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.07999908769305182;  // std dev = 3.113, 50.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=15 */
%   | | | else return 0.23801968392258838;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.23933694341299513;  // std dev = 1.673, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return 0.09181380120750746;  // std dev = 1.495, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.24902504036811815;  // std dev = 1.040, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.24503149911444544;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return 0.010495972400102038;  // std dev = 0.366, 144.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=23 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05610218187603113;  // std dev = 0.360, 1,215.000 (wgt'ed) examples reached here.  /* #neg=770 #pos=445 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.17327291225922967;  // std dev = 1.618, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.05238880829696139;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0.18060736597572924;  // std dev = 0.430, 20.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.15070980455252866;  // std dev = 0.002, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return 0.046871689504574994;  // std dev = 3.104, 61.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=12 */
%   | | | else return -0.031145796612776593;  // std dev = 1.625, 25.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=3 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.015449894602221667;  // std dev = 2.582, 48.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=8 */
%   | | | else return -0.14944238577273822;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.046421630704707686;  // std dev = 0.358, 1,215.000 (wgt'ed) examples reached here.  /* #neg=770 #pos=445 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.15260434112944882;  // std dev = 1.664, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return 0.025325507649695617;  // std dev = 1.495, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | else return 0.1458999141040827;  // std dev = 0.416, 15.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=11 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then return -0.13241714824169518;  // std dev = 0.002, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, A) )
%   | | | then return -0.002092444833833309;  // std dev = 2.917, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return 0.10784995031071343;  // std dev = 1.916, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.011375799617576156;  // std dev = 2.581, 48.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=8 */
%   | | | else return -0.1314243143138136;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.038331207845371106;  // std dev = 0.357, 1,215.000 (wgt'ed) examples reached here.  /* #neg=770 #pos=445 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.11787674494100323;  // std dev = 1.664, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return 0.01903111920910995;  // std dev = 1.495, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | else return 0.11211708610343968;  // std dev = 0.415, 15.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=11 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then return -0.11793101417265775;  // std dev = 0.002, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | | then return 0.004579265612449605;  // std dev = 3.176, 76.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=12 */
%   | | | else return 0.13000336786179176;  // std dev = 1.445, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.009877737121915328;  // std dev = 2.581, 48.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=8 */
%   | | | else return -0.1171347180029949;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03159873887575761;  // std dev = 0.356, 1,215.000 (wgt'ed) examples reached here.  /* #neg=770 #pos=445 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.0912451408824109;  // std dev = 1.664, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return 0.01430865452543907;  // std dev = 1.495, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | else return 0.08693628207104011;  // std dev = 0.415, 15.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=11 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then return -0.10620540427727534;  // std dev = 0.002, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, A) )
%   | | | then return -0.002412111398865958;  // std dev = 2.917, 67.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=10 */
%   | | | else return 0.08279429703713168;  // std dev = 1.913, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.008567428427269628;  // std dev = 2.581, 48.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=8 */
%   | | | else return -0.10555392747029264;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.026014873021911963;  // std dev = 0.355, 1,215.000 (wgt'ed) examples reached here.  /* #neg=770 #pos=445 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.07083886865426632;  // std dev = 1.664, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | | else return 0.010762858677719027;  // std dev = 1.495, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
%   | | else return 0.0679569555456833;  // std dev = 0.415, 15.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=11 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then return -0.0965372426960889;  // std dev = 0.001, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | | then return 0.002832075944346991;  // std dev = 3.174, 76.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=12 */
%   | | | else return 0.09784568616904601;  // std dev = 1.444, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | | then return 0.007423745471058271;  // std dev = 2.581, 48.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=8 */
%   | | | else return -0.09599519325753121;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.898131
   AUC PR    = 0.87706
   CLL	      = -0.473408
   Precision = 0.897059 at threshold = 0.5
   Recall    = 0.887273
   F1        = 0.892139


Total learning time: 1829.586590051651 seconds
Total inference time: 3.993 seconds
AUC ROC: 0.898131


Dataset: 3_imdb_cora, Fold: 5, Type: Scratch (RDN-B), Time: 13:40:37
{'AUC ROC': 0.898131, 'AUC PR': 0.87706, 'CLL': -0.473408, 'Precision': [0.897059, 0.5], 'Recall': 0.887273, 'F1': 0.892139, 'Learning time': 1829.586590051651, 'Inference time': 3.993}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.6212317134058823;  // std dev = 13.784, 1,051.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=802 */
%   | | | else return -0.104932926858756;  // std dev = 6.656, 1,246.000 (wgt'ed) examples reached here.  /* #neg=1,200 #pos=46 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.14762261931003723;  // std dev = 4.842, 114.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=33 */
%   | | | else return 0.4735335504841277;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.48777856472914194;  // std dev = 2.509, 27.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=17 */
%   | | | else return 0.26991364098186527;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.5854216623722396;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return 0.4581489350995123;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   else return 0.024238900497435927;  // std dev = 0.372, 289.000 (wgt'ed) examples reached here.  /* #neg=241 #pos=48 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.5278090444532907;  // std dev = 13.784, 1,051.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=802 */
%   | | | else return -0.09263304437210537;  // std dev = 6.656, 1,246.000 (wgt'ed) examples reached here.  /* #neg=1,200 #pos=46 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.12868578561052385;  // std dev = 4.842, 114.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=33 */
%   | | | else return 0.40564015880039006;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.4175142745911553;  // std dev = 2.509, 27.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=17 */
%   | | | else return 0.2337836550996701;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.49838075774401863;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return 0.3927941835770486;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   else return 0.021262623381151292;  // std dev = 0.372, 289.000 (wgt'ed) examples reached here.  /* #neg=241 #pos=48 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.4204652751946712;  // std dev = 13.788, 1,051.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=802 */
%   | | | else return -0.08755776649482673;  // std dev = 6.353, 1,251.000 (wgt'ed) examples reached here.  /* #neg=1,208 #pos=43 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.1754920640729109;  // std dev = 4.907, 109.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=36 */
%   | | | else return 0.3305950535941956;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.3394902389164593;  // std dev = 2.509, 27.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=17 */
%   | | | else return 0.19697678246055136;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.39904187660376833;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return 0.32092546969114216;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   else return 0.018609258820325023;  // std dev = 0.372, 289.000 (wgt'ed) examples reached here.  /* #neg=241 #pos=48 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.3206366073574387;  // std dev = 13.789, 1,051.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=802 */
%   | | | else return -0.07850073163192138;  // std dev = 6.358, 1,251.000 (wgt'ed) examples reached here.  /* #neg=1,208 #pos=43 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.2098952549041282;  // std dev = 3.274, 48.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=17 */
%   | | | else return 0.13227538897105606;  // std dev = 4.051, 74.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=27 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.26497473723106385;  // std dev = 2.509, 27.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=17 */
%   | | | else return 0.16189848815690908;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.30590364655137575;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return 0.2520656448143302;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   else return 0.016254132003518544;  // std dev = 0.372, 289.000 (wgt'ed) examples reached here.  /* #neg=241 #pos=48 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07472294544694855;  // std dev = 0.360, 2,424.000 (wgt'ed) examples reached here.  /* #neg=1,535 #pos=889 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.2016850523103508;  // std dev = 2.509, 27.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=17 */
%   | | | else return 0.1303444240371668;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.23008571177589465;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return 0.1929238643816141;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, A) )
%   | | | then return 0.03286443575008836;  // std dev = 3.723, 92.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=17 */
%   | | | else return -0.028841249868640565;  // std dev = 2.649, 65.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=8 */
%   | | else return 0.1695103984830076;  // std dev = 0.467, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
%   | else return -0.017302788330179113;  // std dev = 0.341, 104.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=14 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06227451013503196;  // std dev = 0.358, 2,424.000 (wgt'ed) examples reached here.  /* #neg=1,535 #pos=889 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.16527433130960528;  // std dev = 2.253, 20.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=11 */
%   | | | else return 0.10613217673315785;  // std dev = 2.308, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.17278159685181976;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return 0.14565792934085842;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordauthor(M, J) )
%   | | | then return -0.0675599876391287;  // std dev = 0.952, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | | else return 0.01244594038720983;  // std dev = 4.473, 145.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=24 */
%   | | else return 0.14636031118461398;  // std dev = 0.467, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
%   | else return -0.015086914679885675;  // std dev = 0.341, 104.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=14 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05174816104937371;  // std dev = 0.356, 2,424.000 (wgt'ed) examples reached here.  /* #neg=1,535 #pos=889 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.12031056473561595;  // std dev = 2.513, 27.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=17 */
%   | | | else return 0.0715985590515501;  // std dev = 2.020, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.1306012495124933;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return 0.10936989620321738;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordauthor(M, J) )
%   | | | then return -0.059107378653306696;  // std dev = 0.952, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | | else return 0.010825657340602313;  // std dev = 4.473, 145.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=24 */
%   | | else return 0.12420913011117932;  // std dev = 0.467, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
%   | else return -0.013176610388398211;  // std dev = 0.341, 104.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=14 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.042902230818182514;  // std dev = 0.354, 2,424.000 (wgt'ed) examples reached here.  /* #neg=1,535 #pos=889 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.15143575238558604;  // std dev = 2.560, 32.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=22 */
%   | | | else return -0.08338247590912197;  // std dev = 1.631, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.07140038519614218;  // std dev = 2.260, 23.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=13 */
%   | | | else return 0.08203625432353104;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then if ( author(P, N), venue(P, A) )
%   | | | then return 0.02631887735639022;  // std dev = 3.724, 92.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=17 */
%   | | | else return -0.025878368469287472;  // std dev = 2.642, 65.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=8 */
%   | | else return 0.10380263128899221;  // std dev = 0.467, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
%   | else return -0.01152471282333814;  // std dev = 0.341, 104.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=14 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09212381919202936;  // std dev = 0.289, 61.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=25 */
%   | else if ( haswordtitle(F, C) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.03041933859509821;  // std dev = 16.440, 2,246.000 (wgt'ed) examples reached here.  /* #neg=1,425 #pos=821 */
%   | | | else return 0.09992311569586117;  // std dev = 5.141, 118.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=43 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.0800702617163308;  // std dev = 3.052, 42.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=27 */
%   | | | else return 0.05698570849458503;  // std dev = 2.950, 38.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=22 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then return -0.06902300405248817;  // std dev = 0.278, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then return -0.05973053822253949;  // std dev = 0.265, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.02677290979804707;  // std dev = 5.023, 162.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=32 */
%   | | | else return -0.007452961977953898;  // std dev = 3.475, 102.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=14 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.07364933149920197;  // std dev = 0.312, 53.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=22 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.08520752447378174;  // std dev = 0.269, 52.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=22 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return 0.02687483003062866;  // std dev = 17.079, 2,320.000 (wgt'ed) examples reached here.  /* #neg=1,475 #pos=845 */
%   | | | else return 0.05269646737932996;  // std dev = 4.246, 80.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=49 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then return -0.06032497587406568;  // std dev = 0.278, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | | then return 0.005263625572473031;  // std dev = 4.468, 147.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=24 */
%   | | | else return 0.0807530778840706;  // std dev = 2.471, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
%   | | else if ( haswordvenue(B, P), haswordtitle(Q, P) )
%   | | | then return 5.420270422434011E-4;  // std dev = 3.461, 97.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=14 */
%   | | | else return -0.14378786986497322;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */


Results
   AUC ROC   = 0.892273
   AUC PR    = 0.874195
   CLL	      = -0.467713
   Precision = 0.897059 at threshold = 0.5
   Recall    = 0.887273
   F1        = 0.892139


Total learning time: 4419.8251080513 seconds
Total inference time: 4.109 seconds
AUC ROC: 0.892273


Results scoring model
   AUC ROC   = 0.893422
   AUC PR    = 0.760342
   CLL	      = -0.414486
   Precision = 0.756951 at threshold = 0.5
   Recall    = 0.855984
   F1        = 0.803427


Total scoring time: 48.784 seconds
Parameter learned model CLL: -0.414486


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,true': 'samebib(E, F), venue(F, B)', 'true,true,false': 'haswordtitle(D, G), haswordauthor(H, G)', 'true,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'true,false,true': 'title(K, J), venue(K, A)', 'true,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true,true': [13.784, 249, 802], 'true,true,true,false': [6.656, 1, 46], 'true,true,false,true': [4.842, 81, 33], 'true,true,false,false': [1.754, 5, 8], 'true,false,true,true': [2.509, 10, 17], 'true,false,true,false': [2.029, 10, 7], 'true,false,false,true': [2.089, 6, 16], 'true,false,false,false': [1.897, 6, 9], 'false': [0.372, 241, 48]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,true': 'samebib(E, F), venue(F, B)', 'true,true,false': 'haswordtitle(D, G), haswordauthor(H, G)', 'true,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'true,false,true': 'title(K, J), venue(K, A)', 'true,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true,true': [13.784, 249, 802], 'true,true,true,false': [6.656, 1, 46], 'true,true,false,true': [4.842, 81, 33], 'true,true,false,false': [1.754, 5, 8], 'true,false,true,true': [2.509, 10, 17], 'true,false,true,false': [2.029, 10, 7], 'true,false,false,true': [2.089, 6, 16], 'true,false,false,false': [1.897, 6, 9], 'false': [0.372, 241, 48]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,true': 'samebib(E, F), venue(F, A)', 'true,true,false': 'haswordtitle(D, G), haswordauthor(H, G)', 'true,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'true,false,true': 'title(K, J), venue(K, A)', 'true,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true,true': [13.788, 249, 802], 'true,true,true,false': [6.353, 1, 43], 'true,true,false,true': [4.907, 73, 36], 'true,true,false,false': [1.754, 5, 8], 'true,false,true,true': [2.509, 10, 17], 'true,false,true,false': [2.029, 10, 7], 'true,false,false,true': [2.089, 6, 16], 'true,false,false,false': [1.897, 6, 9], 'false': [0.372, 241, 48]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,true': 'samebib(E, F), venue(F, A)', 'true,true,false': 'title(G, D), venue(G, A)', 'true,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'true,false,true': 'title(J, I), venue(J, A)', 'true,false,false': 'haswordvenue(A, K), haswordtitle(L, K)'}, {'true,true,true,true': [13.789, 249, 802], 'true,true,true,false': [6.358, 1, 43], 'true,true,false,true': [3.274, 31, 17], 'true,true,false,false': [4.051, 47, 27], 'true,false,true,true': [2.509, 10, 17], 'true,false,true,false': [2.029, 10, 7], 'true,false,false,true': [2.089, 6, 16], 'true,false,false,false': [1.897, 6, 9], 'false': [0.372, 241, 48]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, A)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordauthor(M, L)', 'false,true,true': 'author(N, M), venue(N, A)'}, {'true,true': [0.36, 1, 889], 'true,false,true,true': [2.509, 10, 17], 'true,false,true,false': [2.029, 10, 7], 'true,false,false,true': [2.089, 6, 16], 'true,false,false,false': [1.897, 6, 9], 'false,true,true,true': [3.723, 75, 17], 'false,true,true,false': [2.649, 57, 8], 'false,true,false': [0.467, 19, 9], 'false,false': [0.341, 90, 14]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordvenue(A, G)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordauthor(M, L)', 'false,true,true': 'haswordauthor(M, J)'}, {'true,true': [0.358, 1, 889], 'true,false,true,true': [2.253, 9, 11], 'true,false,true,false': [2.308, 11, 13], 'true,false,false,true': [2.089, 6, 16], 'true,false,false,false': [1.897, 6, 9], 'false,true,true,true': [0.952, 11, 1], 'false,true,true,false': [4.473, 121, 24], 'false,true,false': [0.467, 19, 9], 'false,false': [0.341, 90, 14]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'true,false,true': 'title(G, F), venue(G, A)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,true': 'haswordtitle(K, L), haswordauthor(M, L)', 'false,true,true': 'haswordauthor(M, J)'}, {'true,true': [0.356, 1, 889], 'true,false,true,true': [2.513, 10, 17], 'true,false,true,false': [2.02, 10, 7], 'true,false,false,true': [2.089, 6, 16], 'true,false,false,false': [1.897, 6, 9], 'false,true,true,true': [0.952, 11, 1], 'false,true,true,false': [4.473, 121, 24], 'false,true,false': [0.467, 19, 9], 'false,false': [0.341, 90, 14]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,true': 'haswordtitle(L, M), haswordauthor(N, M)', 'false,true,true': 'author(P, N), venue(P, A)'}, {'true,true': [0.354, 1, 889], 'true,false,true,true': [2.56, 10, 22], 'true,false,true,false': [1.631, 6, 5], 'true,false,false,true': [2.26, 10, 13], 'true,false,false,false': [1.897, 6, 9], 'false,true,true,true': [3.724, 75, 17], 'false,true,true,false': [2.642, 57, 8], 'false,true,false': [0.467, 19, 9], 'false,false': [0.341, 90, 14]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,false': 'haswordtitle(F, C)', 'true,false,true': 'title(G, F), venue(G, B)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,false': 'haswordvenue(A, L), haswordauthor(M, L)', 'false,false,false': 'haswordvenue(A, N), haswordtitle(P, N)'}, {'true,true': [0.289, 36, 25], 'true,false,true,true': [16.44, 1, 821], 'true,false,true,false': [5.141, 75, 43], 'true,false,false,true': [3.052, 15, 27], 'true,false,false,false': [2.95, 16, 22], 'false,true': [0.278, 11, 1], 'false,false,true': [0.265, 12, 1], 'false,false,false,true': [5.023, 130, 32], 'false,false,false,false': [3.475, 88, 14]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,false': 'haswordvenue(B, F), haswordauthor(G, F)', 'true,false,false': 'haswordtitle(H, C)', 'false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false,true': 'haswordtitle(L, M), haswordauthor(N, M)', 'false,false,false': 'haswordvenue(B, P), haswordtitle(Q, P)'}, {'true,true': [0.312, 31, 22], 'true,false,true': [0.269, 30, 22], 'true,false,false,true': [17.079, 1, 845], 'true,false,false,false': [4.246, 31, 49], 'false,true': [0.278, 11, 1], 'false,false,true,true': [4.468, 123, 24], 'false,false,true,false': [2.471, 19, 9], 'false,false,false,true': [3.461, 83, 14], 'false,false,false,false': [0.0, 5, 0]}]]
[{'': [0.2342374731575023, 0.13850408879204137], 'true': [0.23224421761485556, 0.23898795915256826], 'true,false': [0.2479338842975219, 0.21913805697589603], 'true,false,true': [0.23319615912208463, 0.24221453287197234], 'true,true': [0.2328853917652105, 0.21861243722487567], 'true,true,true': [0.1807874517586188, 0.03555518912526582], 'true,false,false': [0.19834710743801612, 0.2399999999999999], 'true,true,false': [0.20567867036011217, 0.23668639053254428]}, {'': [0.20110017401433206, 0.1385040887920414], 'true': [0.19856977295324874, 0.23540941142236846], 'true,false': [0.24468385502714216, 0.21792078786498914], 'true,false,true': [0.23319615912208486, 0.2422145328719722], 'true,false,false': [0.19834710743801678, 0.24000000000000019], 'true,true': [0.19755022186375398, 0.21590054810834486], 'true,true,false': [0.2056786703601117, 0.23668639053254437], 'true,true,true': [0.1807874517586148, 0.035555189125267166]}, {'': [0.17037060238736448, 0.13850408879203985], 'true': [0.16731894272826936, 0.23187842033542763], 'true,false': [0.2414957834528235, 0.21670435540839672], 'true,false,true': [0.23319615912208475, 0.2422145328719721], 'true,false,false': [0.19834710743801642, 0.2400000000000001], 'true,true': [0.1641550904607863, 0.22486236484013414], 'true,true,false': [0.22088871579628763, 0.23668639053254414], 'true,true,true': [0.18088684561046245, 0.032266013435764476]}, {'': [0.14750754431422305, 0.13850408879203974], 'true': [0.14408667050182944, 0.2294328243010095], 'true,false': [0.23919950978761365, 0.21593211139283303], 'true,false,true': [0.2331961591220851, 0.2422145328719721], 'true,false,false': [0.19834710743801667, 0.2399999999999999], 'true,true': [0.13968403925825726, 0.22384392151715657], 'true,true,false': [0.2233788229112941, 0.221775176835415], 'true,true,true': [0.18091027647620767, 0.03231395020911271]}, {'': [0.13310270635609744, 0.1385040887920398], 'false': [0.15000730460189873, 0.11649408284023618], 'false,true': [0.13387967057487074, 0.21811224489795947], 'false,true,true': [0.15063799621928126, 0.10792899408284051], 'true': [0.12947722899793127, 0.22810627477922574], 'true,false': [0.2378871804501751, 0.21556630855524084], 'true,false,true': [0.2331961591220848, 0.2422145328719724], 'true,false,false': [0.1983471074380165, 0.24000000000000005]}, {'': [0.13125707053014812, 0.13769356943516603], 'false': [0.1489577065889703, 0.1164940828402363], 'false,true': [0.13365667747224935, 0.21811224489795908], 'false,true,true': [0.07551836090165621, 0.1379788798880332], 'true': [0.12781441147265413, 0.22747306664066932], 'true,false': [0.23723826844874774, 0.21541075548319666], 'true,false,true': [0.25375241118193015, 0.22188657627051486], 'true,false,false': [0.1983471074380164, 0.23999999999999996]}, {'': [0.12989280074096474, 0.13707432368298864], 'false': [0.14816099362586185, 0.11649408284023598], 'false,true': [0.1335520872441306, 0.21811224489795905], 'false,true,true': [0.07555817987105323, 0.13797777694851415], 'true': [0.12653055249348752, 0.2271304262724075], 'true,false': [0.2368513190353623, 0.21534207426913718], 'true,false,true': [0.23397436997105683, 0.23996451820504258], 'true,false,false': [0.1983471074380165, 0.23999999999999996]}, {'': [0.1288653186972844, 0.1365964956139071], 'false': [0.14754630483570408, 0.1164940828402364], 'false,true': [0.1334750811748584, 0.2181122448979589], 'false,true,true': [0.15076126574114268, 0.10741192844024965], 'true': [0.12553449961527335, 0.2269112166522754], 'true,false': [0.2248183061470125, 0.229147534530357], 'true,false,false': [0.22202518635144494, 0.24000000000000007], 'true,false,true': [0.20483947384082307, 0.24190442440034118]}, {'': [0.12800999964388732, 0.1361886693301611], 'false': [0.07718617013970917, 0.13848471809098195], 'false,false': [0.07005816801110118, 0.14160218885852152], 'false,false,false': [0.1557483138924611, 0.11841599384851977], 'true': [0.08349584007066994, 0.12904168592481272], 'true,false': [0.12574018093891678, 0.22540155548439805], 'true,false,false': [0.2218413883818042, 0.22905670630518385], 'true,false,true': [0.12033609049424208, 0.2240114439196869]}, {'': [0.12733987335229624, 0.13599387147433786], 'false': [0.07714623034938693, 0.13834625232912406], 'false,false': [0.149752850048674, 0.11841599384851917], 'false,false,true': [0.1358202277488759, 0.21811224489795888], 'true': [0.09732941814433634, 0.12794628415738868], 'true,false': [0.07257675797409031, 0.12907590932886465], 'true,false,false': [0.12573388723045087, 0.22535001845928856], 'false,false,false': [0.12349877776596813, -5.551115123125783e-18]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(B, I), haswordauthor(J, I).;true;true
9;false,false;haswordvenue(A, K), haswordtitle(L, K).;true;true
9;false,false,false;haswordvenue(B, P), haswordtitle(Q, P).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.6212317134058823;  // std dev = 13.784, 1,051.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=802 */
%   | | | else return -0.104932926858756;  // std dev = 6.656, 1,246.000 (wgt'ed) examples reached here.  /* #neg=1,200 #pos=46 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.14762261931003723;  // std dev = 4.842, 114.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=33 */
%   | | | else return 0.4735335504841277;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.48777856472914194;  // std dev = 2.509, 27.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=17 */
%   | | | else return 0.26991364098186527;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.5854216623722396;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return 0.4581489350995123;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   else return 0.024238900497435927;  // std dev = 0.372, 289.000 (wgt'ed) examples reached here.  /* #neg=241 #pos=48 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.5278090444532907;  // std dev = 13.784, 1,051.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=802 */
%   | | | else return -0.09263304437210537;  // std dev = 6.656, 1,246.000 (wgt'ed) examples reached here.  /* #neg=1,200 #pos=46 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.12868578561052385;  // std dev = 4.842, 114.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=33 */
%   | | | else return 0.40564015880039006;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.4175142745911553;  // std dev = 2.509, 27.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=17 */
%   | | | else return 0.2337836550996701;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.49838075774401863;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return 0.3927941835770486;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   else return 0.021262623381151292;  // std dev = 0.372, 289.000 (wgt'ed) examples reached here.  /* #neg=241 #pos=48 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.4204652751946712;  // std dev = 13.788, 1,051.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=802 */
%   | | | else return -0.08755776649482673;  // std dev = 6.353, 1,251.000 (wgt'ed) examples reached here.  /* #neg=1,208 #pos=43 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.1754920640729109;  // std dev = 4.907, 109.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=36 */
%   | | | else return 0.3305950535941956;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.3394902389164593;  // std dev = 2.509, 27.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=17 */
%   | | | else return 0.19697678246055136;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.39904187660376833;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return 0.32092546969114216;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   else return 0.018609258820325023;  // std dev = 0.372, 289.000 (wgt'ed) examples reached here.  /* #neg=241 #pos=48 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.3206366073574387;  // std dev = 13.789, 1,051.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=802 */
%   | | | else return -0.07850073163192138;  // std dev = 6.358, 1,251.000 (wgt'ed) examples reached here.  /* #neg=1,208 #pos=43 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.2098952549041282;  // std dev = 3.274, 48.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=17 */
%   | | | else return 0.13227538897105606;  // std dev = 4.051, 74.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=27 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.26497473723106385;  // std dev = 2.509, 27.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=17 */
%   | | | else return 0.16189848815690908;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.30590364655137575;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return 0.2520656448143302;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   else return 0.016254132003518544;  // std dev = 0.372, 289.000 (wgt'ed) examples reached here.  /* #neg=241 #pos=48 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07472294544694855;  // std dev = 0.360, 2,424.000 (wgt'ed) examples reached here.  /* #neg=1,535 #pos=889 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.2016850523103508;  // std dev = 2.509, 27.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=17 */
%   | | | else return 0.1303444240371668;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.23008571177589465;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return 0.1929238643816141;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( title(N, K), venue(N, B) )
%   | | | then return -0.046655015050826726;  // std dev = 2.317, 57.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=6 */
%   | | | else return 0.038081827054436176;  // std dev = 3.923, 100.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=19 */
%   | | else return 0.1695103984830076;  // std dev = 0.467, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
%   | else return -0.017302788330179113;  // std dev = 0.341, 104.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=14 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06227451013503196;  // std dev = 0.358, 2,424.000 (wgt'ed) examples reached here.  /* #neg=1,535 #pos=889 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.16527433130960528;  // std dev = 2.253, 20.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=11 */
%   | | | else return 0.10613217673315785;  // std dev = 2.308, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.17278159685181976;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return 0.14565792934085842;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, A) )
%   | | | then return 0.03096907342188307;  // std dev = 3.715, 92.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=17 */
%   | | | else return -0.028621382927412887;  // std dev = 2.650, 65.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=8 */
%   | | else return 0.14636031118461398;  // std dev = 0.467, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
%   | else return -0.015086914679885675;  // std dev = 0.341, 104.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=14 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05174816104937371;  // std dev = 0.356, 2,424.000 (wgt'ed) examples reached here.  /* #neg=1,535 #pos=889 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.12031056473561595;  // std dev = 2.513, 27.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=17 */
%   | | | else return 0.0715985590515501;  // std dev = 2.020, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.1306012495124933;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return 0.10936989620321738;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordauthor(M, J) )
%   | | | then return -0.07243738057014402;  // std dev = 0.952, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | | else return 0.011863707729144064;  // std dev = 4.465, 145.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=24 */
%   | | else return 0.12420913011117932;  // std dev = 0.467, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
%   | else return -0.013176610388398211;  // std dev = 0.341, 104.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=14 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09894333047168213;  // std dev = 0.292, 61.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=25 */
%   | else if ( haswordtitle(F, C) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.03778884349441096;  // std dev = 16.494, 2,246.000 (wgt'ed) examples reached here.  /* #neg=1,425 #pos=821 */
%   | | | else return 0.1079496985908499;  // std dev = 5.141, 118.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=43 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.10181891103977588;  // std dev = 3.077, 42.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=27 */
%   | | | else return 0.07559875458853256;  // std dev = 2.951, 38.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=22 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( title(N, K), venue(N, B) )
%   | | | then return -0.042084720221799606;  // std dev = 2.320, 57.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=6 */
%   | | | else return 0.03136754346974622;  // std dev = 3.915, 100.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=19 */
%   | | else return 0.10380263128899221;  // std dev = 0.467, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
%   | else return -0.01152471282333814;  // std dev = 0.341, 104.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=14 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.08204329911251156;  // std dev = 0.287, 61.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=25 */
%   | else if ( haswordtitle(F, C) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.03130038183414318;  // std dev = 16.446, 2,246.000 (wgt'ed) examples reached here.  /* #neg=1,425 #pos=821 */
%   | | | else return 0.08745594417435758;  // std dev = 5.141, 118.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=43 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.0779190421724808;  // std dev = 3.078, 42.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=27 */
%   | | | else return 0.05699776892004727;  // std dev = 2.950, 38.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=22 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then return -0.07479327982996935;  // std dev = 0.265, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, A) )
%   | | | then return 0.007143205974321196;  // std dev = 4.278, 135.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=22 */
%   | | | else return 0.08153752179053;  // std dev = 2.762, 37.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=11 */
%   | | else return -0.010092479323353597;  // std dev = 0.341, 104.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=14 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.02927562305733485;  // std dev = 0.352, 2,424.000 (wgt'ed) examples reached here.  /* #neg=1,535 #pos=889 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.06112623848177758;  // std dev = 2.260, 20.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=11 */
%   | | | else return 0.02120545495003903;  // std dev = 2.297, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.058651769886714916;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return 0.04905677249882093;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordauthor(M, J) )
%   | | | then return -0.05780220998196445;  // std dev = 0.952, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | | else return 0.008291992079060064;  // std dev = 4.457, 145.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=24 */
%   | | else return 0.0706031911257876;  // std dev = 0.467, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
%   | else return -0.008847832002768756;  // std dev = 0.341, 104.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=14 */


Results
   AUC ROC   = 0.90678
   AUC PR    = 0.878555
   CLL	      = -0.466765
   Precision = 0.897059 at threshold = 0.5
   Recall    = 0.887273
   F1        = 0.892139


Total learning time: 4655.5120668411255 seconds
Total inference time: 4.122 seconds
AUC ROC: 0.90678


Results scoring model
   AUC ROC   = 0.892124
   AUC PR    = 0.750256
   CLL	      = -0.414468
   Precision = 0.756951 at threshold = 0.5
   Recall    = 0.855984
   F1        = 0.803427


Total scoring time: 62.479 seconds
Refined model CLL: -0.414468


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.90678
   AUC PR    = 0.878555
   CLL	      = -0.466765
   Precision = 0.897059 at threshold = 0.5
   Recall    = 0.887273
   F1        = 0.892139


Total learning time: 9186.600174892425 seconds
Total inference time: 4.122 seconds
AUC ROC: 0.90678
Total revision time: 9186.600174892425
Best scored revision CLL: -0.414468


Dataset: 3_imdb_cora, Fold: 5, Type: Transfer (trRDN-B), Time: 16:13:56
{'AUC ROC': 0.90678, 'AUC PR': 0.878555, 'CLL': -0.466765, 'Precision': [0.897059, 0.5], 'Recall': 0.887273, 'F1': 0.892139, 'Learning time': 9186.600174892425, 'Inference time': 4.122, 'parameter_0.4': {'AUC ROC': 0.892273, 'AUC PR': 0.874195, 'CLL': -0.467713, 'Precision': [0.897059, 0.5], 'Recall': 0.887273, 'F1': 0.892139, 'Learning time': 4419.8251080513, 'Inference time': 4.109}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.6212317134058823;  // std dev = 13.784, 1,051.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=802 */
%   | | | else return -0.104932926858756;  // std dev = 6.656, 1,246.000 (wgt'ed) examples reached here.  /* #neg=1,200 #pos=46 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.14762261931003723;  // std dev = 4.842, 114.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=33 */
%   | | | else return 0.4735335504841277;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.48777856472914194;  // std dev = 2.509, 27.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=17 */
%   | | | else return 0.26991364098186527;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.5854216623722396;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return 0.4581489350995123;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   else return 0.024238900497435927;  // std dev = 0.372, 289.000 (wgt'ed) examples reached here.  /* #neg=241 #pos=48 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.5278090444532907;  // std dev = 13.784, 1,051.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=802 */
%   | | | else return -0.09263304437210537;  // std dev = 6.656, 1,246.000 (wgt'ed) examples reached here.  /* #neg=1,200 #pos=46 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.12868578561052385;  // std dev = 4.842, 114.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=33 */
%   | | | else return 0.40564015880039006;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.4175142745911553;  // std dev = 2.509, 27.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=17 */
%   | | | else return 0.2337836550996701;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.49838075774401863;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return 0.3927941835770486;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   else return 0.021262623381151292;  // std dev = 0.372, 289.000 (wgt'ed) examples reached here.  /* #neg=241 #pos=48 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.4204652751946712;  // std dev = 13.788, 1,051.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=802 */
%   | | | else return -0.08755776649482673;  // std dev = 6.353, 1,251.000 (wgt'ed) examples reached here.  /* #neg=1,208 #pos=43 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.1754920640729109;  // std dev = 4.907, 109.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=36 */
%   | | | else return 0.3305950535941956;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.3394902389164593;  // std dev = 2.509, 27.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=17 */
%   | | | else return 0.19697678246055136;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.39904187660376833;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return 0.32092546969114216;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   else return 0.018609258820325023;  // std dev = 0.372, 289.000 (wgt'ed) examples reached here.  /* #neg=241 #pos=48 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.3206366073574387;  // std dev = 13.789, 1,051.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=802 */
%   | | | else return -0.07850073163192138;  // std dev = 6.358, 1,251.000 (wgt'ed) examples reached here.  /* #neg=1,208 #pos=43 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.2098952549041282;  // std dev = 3.274, 48.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=17 */
%   | | | else return 0.13227538897105606;  // std dev = 4.051, 74.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=27 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, A) )
%   | | | then return 0.26497473723106385;  // std dev = 2.509, 27.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=17 */
%   | | | else return 0.16189848815690908;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.30590364655137575;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return 0.2520656448143302;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   else return 0.016254132003518544;  // std dev = 0.372, 289.000 (wgt'ed) examples reached here.  /* #neg=241 #pos=48 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.07472294544694855;  // std dev = 0.360, 2,424.000 (wgt'ed) examples reached here.  /* #neg=1,535 #pos=889 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.2016850523103508;  // std dev = 2.509, 27.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=17 */
%   | | | else return 0.1303444240371668;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.23008571177589465;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return 0.1929238643816141;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordauthor(M, J) )
%   | | | then return -0.0685848396122302;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | | else return 0.013599068433746543;  // std dev = 4.475, 145.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=24 */
%   | | else return 0.1695103984830076;  // std dev = 0.467, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
%   | else return -0.017302788330179113;  // std dev = 0.341, 104.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=14 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06227451013503196;  // std dev = 0.358, 2,424.000 (wgt'ed) examples reached here.  /* #neg=1,535 #pos=889 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordvenue(A, G) )
%   | | | then return 0.16527433130960528;  // std dev = 2.253, 20.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=11 */
%   | | | else return 0.10613217673315785;  // std dev = 2.308, 24.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=13 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.17278159685181976;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return 0.14565792934085842;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordauthor(M, J) )
%   | | | then return -0.059957771241706585;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | | else return 0.011838671624616466;  // std dev = 4.475, 145.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=24 */
%   | | else return 0.14636031118461398;  // std dev = 0.467, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
%   | else return -0.015086914679885675;  // std dev = 0.341, 104.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=14 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05174816104937371;  // std dev = 0.356, 2,424.000 (wgt'ed) examples reached here.  /* #neg=1,535 #pos=889 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.12031056473561595;  // std dev = 2.513, 27.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=17 */
%   | | | else return 0.0715985590515501;  // std dev = 2.020, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.1306012495124933;  // std dev = 2.089, 22.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=16 */
%   | | | else return 0.10936989620321738;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( author(N, M), venue(N, A) )
%   | | | then return 0.03039003472976334;  // std dev = 3.724, 92.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=17 */
%   | | | else return -0.029792319772050428;  // std dev = 2.642, 65.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=8 */
%   | | else return 0.12420913011117932;  // std dev = 0.467, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
%   | else return -0.013176610388398211;  // std dev = 0.341, 104.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=14 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.042902230818182514;  // std dev = 0.354, 2,424.000 (wgt'ed) examples reached here.  /* #neg=1,535 #pos=889 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.15143575238558604;  // std dev = 2.560, 32.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=22 */
%   | | | else return -0.08338247590912197;  // std dev = 1.631, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.07140038519614218;  // std dev = 2.260, 23.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=13 */
%   | | | else return 0.08203625432353104;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then return -0.06978619864580528;  // std dev = 0.277, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then if ( haswordtitle(N, P), haswordauthor(Q, P) )
%   | | | then return 0.008733570380179008;  // std dev = 4.473, 147.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=24 */
%   | | | else return 0.10380263128899221;  // std dev = 2.471, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
%   | | else return -0.008885195477938444;  // std dev = 0.344, 102.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=14 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09212381919202936;  // std dev = 0.289, 61.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=25 */
%   | else if ( haswordtitle(F, C) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.03041933859509821;  // std dev = 16.440, 2,246.000 (wgt'ed) examples reached here.  /* #neg=1,425 #pos=821 */
%   | | | else return 0.09992311569586117;  // std dev = 5.141, 118.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=43 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.0800702617163308;  // std dev = 3.052, 42.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=27 */
%   | | | else return 0.05698570849458503;  // std dev = 2.950, 38.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=22 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then return -0.060955573369481895;  // std dev = 0.277, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then if ( haswordtitle(M, N), haswordauthor(P, N) )
%   | | | then return 0.007589494881546785;  // std dev = 4.473, 147.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=24 */
%   | | | else return 0.08561182470092217;  // std dev = 2.471, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
%   | | else return -0.0077799548998960895;  // std dev = 0.344, 102.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=14 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.02930423021072547;  // std dev = 0.352, 2,424.000 (wgt'ed) examples reached here.  /* #neg=1,535 #pos=889 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.09821431016821933;  // std dev = 2.560, 32.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=22 */
%   | | | else return -0.0828214654192541;  // std dev = 1.632, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.04009734179969315;  // std dev = 2.259, 23.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=13 */
%   | | | else return 0.04746761370242942;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then if ( title(P, L), venue(P, B) )
%   | | | then return -0.051844658656016895;  // std dev = 2.320, 57.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=6 */
%   | | | else return 0.035418564999724816;  // std dev = 3.909, 100.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=19 */
%   | | else return 0.06983680369480923;  // std dev = 0.467, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
%   | else return -0.009197719751272392;  // std dev = 0.341, 104.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=14 */


Results
   AUC ROC   = 0.906225
   AUC PR    = 0.878255
   CLL	      = -0.466996
   Precision = 0.897059 at threshold = 0.5
   Recall    = 0.887273
   F1        = 0.892139


Total learning time: 4331.195584058762 seconds
Total inference time: 3.952 seconds
AUC ROC: 0.906225


Dataset: 3_imdb_cora, Fold: 5, Type: Scratch (RDN-B), Time: 17:26:12
{'AUC ROC': 0.906225, 'AUC PR': 0.878255, 'CLL': -0.466996, 'Precision': [0.897059, 0.5], 'Recall': 0.887273, 'F1': 0.892139, 'Learning time': 4331.195584058762, 'Inference time': 3.952}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


Starting experiment #2 for 3_imdb_cora

Loading pre-trained trees.
Starting fold 1

Target train facts examples: 35095
Target train pos examples: 2649
Target train neg examples: 4334

Target test facts examples: 7463
Target test pos  examples: 368
Target test neg examples: 688

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.6521098587229537;  // std dev = 9.597, 563.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=447 */
%   | | | else return -0.11741825512736359;  // std dev = 3.696, 573.000 (wgt'ed) examples reached here.  /* #neg=559 #pos=14 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.0399671169176941;  // std dev = 1.809, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   | | | else return 0.14386322081379807;  // std dev = 2.928, 42.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.4581489350995123;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.4945125714631487;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.05567979929704223;  // std dev = 0.398, 162.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.5530862552831768;  // std dev = 9.597, 563.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=447 */
%   | | | else return -0.10371693133486745;  // std dev = 3.696, 573.000 (wgt'ed) examples reached here.  /* #neg=559 #pos=14 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.03503196034273708;  // std dev = 1.809, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   | | | else return 0.12543301544918353;  // std dev = 2.928, 42.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.3927941835770486;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | | | else return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.42312069605298835;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.04876584447019631;  // std dev = 0.398, 162.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.4384275431192111;  // std dev = 9.597, 563.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=447 */
%   | | | else return -0.09256885141021194;  // std dev = 3.696, 573.000 (wgt'ed) examples reached here.  /* #neg=559 #pos=14 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.030590047750322546;  // std dev = 1.809, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   | | | else return 0.10782354562777491;  // std dev = 2.928, 42.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.35732780033471473;  // std dev = 1.895, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | | | else return 0.054258803024475444;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.3597663351308571;  // std dev = 1.322, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.04248408016136117;  // std dev = 0.398, 162.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.12011726541444923;  // std dev = 0.373, 1,200.000 (wgt'ed) examples reached here.  /* #neg=723 #pos=477 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.2828639271962643;  // std dev = 1.889, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | | | else return 0.043212667521607656;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.284695678701915;  // std dev = 1.314, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then return 0.008948432511544563;  // std dev = 0.375, 112.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=19 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return -0.16069442463131225;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( haswordvenue(A, P), haswordauthor(Q, P) )
%   | | | then return 0.17263890870202112;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.13198850219795566;  // std dev = 2.913, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09930177544827617;  // std dev = 0.368, 1,200.000 (wgt'ed) examples reached here.  /* #neg=723 #pos=477 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.16768350661590944;  // std dev = 0.478, 22.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | | else return 0.24661778090119937;  // std dev = 0.397, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | then if ( author(K, J), venue(K, B) )
%   | | | then return 0.1073257865743438;  // std dev = 3.199, 52.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=14 */
%   | | | else return -0.0666668874183303;  // std dev = 1.902, 42.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=4 */
%   | | else return -0.10634942710087004;  // std dev = 0.229, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then if ( title(N, M), venue(N, B) )
%   | | | then return 0.11078040505897474;  // std dev = 2.909, 42.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=12 */
%   | | | else return 0.02069772206107683;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return -0.1682827644853759;  // std dev = 0.035, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08159492731905846;  // std dev = 0.365, 1,200.000 (wgt'ed) examples reached here.  /* #neg=723 #pos=477 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.17740050251182177;  // std dev = 1.883, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | | | else return -0.002057661818484787;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0.189049041106634;  // std dev = 0.396, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordauthor(K, I) )
%   | | then return 0.16630684793204253;  // std dev = 0.464, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else return -0.012921213947008743;  // std dev = 0.355, 100.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=15 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return -0.14858004161074925;  // std dev = 0.030, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( haswordvenue(A, N), haswordauthor(P, N) )
%   | | | then return 0.14445489892727548;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.09916514329360927;  // std dev = 2.908, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06673761988121175;  // std dev = 0.362, 1,200.000 (wgt'ed) examples reached here.  /* #neg=723 #pos=477 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.13402542190315914;  // std dev = 1.882, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | | | else return -0.0015991564865908692;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0.14539016759736284;  // std dev = 0.397, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( haswordtitle(K, I) )
%   | | then return 0.14189923686063952;  // std dev = 0.464, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else return 0.01066915273893656;  // std dev = 0.855, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return -0.009512676278004365;  // std dev = 0.356, 99.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=15 */
%   | | else if ( haswordvenue(B, N), haswordauthor(P, N) )
%   | | | then return -0.12978255141160813;  // std dev = 0.026, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.08322300591419178;  // std dev = 2.907, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.054396175217511215;  // std dev = 0.360, 1,200.000 (wgt'ed) examples reached here.  /* #neg=723 #pos=477 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.07322595644177814;  // std dev = 0.473, 22.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | | else return 0.11253304766115618;  // std dev = 0.397, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | then if ( haswordauthor(J, G) )
%   | | | then return 0.11899740136985688;  // std dev = 1.604, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.007579327104163951;  // std dev = 3.393, 82.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=14 */
%   | | else return -0.08962586017914881;  // std dev = 0.229, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordauthor(M, K) )
%   | | | then return -0.1251178627674462;  // std dev = 0.014, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.07990982676432262;  // std dev = 3.000, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | | else return -0.15307536709015698;  // std dev = 0.072, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordauthor(D, C) )
%   then return 0.10387712164127602;  // std dev = 0.353, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
%   else if ( haswordvenue(A, E), haswordvenue(B, E) )
%   | then if ( haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.04536382444590705;  // std dev = 11.820, 1,106.000 (wgt'ed) examples reached here.  /* #neg=658 #pos=448 */
%   | | | else return -0.001634911350930874;  // std dev = 3.448, 64.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=16 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.018166011293578647;  // std dev = 2.146, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
%   | | | else return 0.0877203395243265;  // std dev = 1.319, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | then if ( title(L, K), venue(L, B) )
%   | | | then return 0.037668878663806506;  // std dev = 3.330, 69.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=14 */
%   | | | else return -0.11014016396618749;  // std dev = 0.995, 30.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=1 */
%   | | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | | then return -0.1075012491026506;  // std dev = 0.034, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.05576853163610799;  // std dev = 2.904, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0358664248942151;  // std dev = 0.357, 1,200.000 (wgt'ed) examples reached here.  /* #neg=723 #pos=477 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.03832165718767104;  // std dev = 0.462, 19.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=10 */
%   | | else return 0.0798292265944157;  // std dev = 0.428, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( haswordtitle(I, G) )
%   | | then return 0.07914519422917653;  // std dev = 0.462, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else return -0.005988027648502719;  // std dev = 0.836, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | then if ( haswordtitle(K, L), haswordvenue(A, L) )
%   | | | then return -0.03748249561539683;  // std dev = 2.450, 61.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=7 */
%   | | | else return 0.036843751114622465;  // std dev = 2.911, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | | then return -0.022356666048337377;  // std dev = 0.915, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0.04615962273308937;  // std dev = 2.338, 33.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=7 */


Results
   AUC ROC   = 0.831305
   AUC PR    = 0.653249
   CLL	      = -0.469202
   Precision = 0.705607 at threshold = 0.5
   Recall    = 0.820652
   F1        = 0.758794


Total learning time: 1727.1878218650818 seconds
Total inference time: 3.282 seconds
AUC ROC: 0.831305


Results scoring model
   AUC ROC   = 0.89586
   AUC PR    = 0.780433
   CLL	      = -0.429435
   Precision = 0.791809 at threshold = 0.5
   Recall    = 0.877127
   F1        = 0.832287


Total scoring time: 22.546 seconds
Parameter learned model CLL: -0.429435


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,true': 'samebib(E, F), venue(F, A)', 'true,true,false': 'title(G, D), venue(G, A)', 'true,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'true,false,true': 'haswordtitle(I, J), haswordauthor(K, J)', 'true,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true,true': [9.597, 116, 447], 'true,true,true,false': [3.696, 559, 14], 'true,true,false,true': [1.809, 18, 4], 'true,true,false,false': [2.928, 30, 12], 'true,false,true,true': [1.897, 6, 9], 'true,false,true,false': [0.866, 3, 1], 'true,false,false,true': [1.595, 4, 7], 'true,false,false,false': [2.11e-08, 0, 3], 'false': [0.398, 130, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,true': 'samebib(E, F), venue(F, A)', 'true,true,false': 'title(G, D), venue(G, A)', 'true,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'true,false,true': 'haswordtitle(I, J), haswordauthor(K, J)', 'true,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true,true': [9.597, 116, 447], 'true,true,true,false': [3.696, 559, 14], 'true,true,false,true': [1.809, 18, 4], 'true,true,false,false': [2.928, 30, 12], 'true,false,true,true': [1.897, 6, 9], 'true,false,true,false': [0.866, 3, 1], 'true,false,false,true': [1.595, 4, 7], 'true,false,false,false': [0.0, 0, 3], 'false': [0.398, 130, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,true': 'samebib(E, F), venue(F, A)', 'true,true,false': 'title(G, D), venue(G, A)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'haswordtitle(I, J), haswordauthor(K, J)', 'true,false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true,true': [9.597, 116, 447], 'true,true,true,false': [3.696, 559, 14], 'true,true,false,true': [1.809, 18, 4], 'true,true,false,false': [2.928, 30, 12], 'true,false,true,true': [1.895, 6, 10], 'true,false,true,false': [1.155, 4, 2], 'true,false,false,true': [1.322, 3, 5], 'true,false,false,false': [1.05e-08, 0, 3], 'false': [0.398, 130, 32]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false': 'haswordvenue(B, M), haswordauthor(N, M)', 'false,false,false': 'haswordvenue(A, P), haswordauthor(Q, P)'}, {'true,true': [0.373, 723, 477], 'true,false,true,true': [1.889, 6, 10], 'true,false,true,false': [1.155, 4, 2], 'true,false,false,true': [1.314, 3, 5], 'true,false,false,false': [0.0, 0, 3], 'false,true': [0.375, 93, 19], 'false,false,true': [5.27e-09, 6, 0], 'false,false,false,true': [0.816, 2, 1], 'false,false,false,false': [2.913, 29, 12]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'false,true,true': 'author(K, J), venue(K, B)', 'false,false': 'haswordvenue(B, L), haswordtitle(M, L)', 'false,false,true': 'title(N, M), venue(N, B)'}, {'true,true': [0.368, 723, 477], 'true,false,true': [0.478, 10, 12], 'true,false,false': [0.397, 3, 8], 'false,true,true,true': [3.199, 38, 14], 'false,true,true,false': [1.902, 38, 4], 'false,true,false': [0.229, 17, 1], 'false,false,true,true': [2.909, 30, 12], 'false,false,true,false': [0.894, 4, 1], 'false,false,false': [0.035, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false,true': 'haswordauthor(K, I)', 'false,false': 'haswordvenue(B, L), haswordauthor(M, L)', 'false,false,false': 'haswordvenue(A, N), haswordauthor(P, N)'}, {'true,true': [0.365, 723, 477], 'true,false,true,true': [1.883, 6, 10], 'true,false,true,false': [1.155, 4, 2], 'true,false,false': [0.396, 3, 8], 'false,true,true': [0.464, 8, 4], 'false,true,false': [0.355, 85, 15], 'false,false,true': [0.03, 6, 0], 'false,false,false,true': [0.8, 2, 1], 'false,false,false,false': [2.908, 29, 12]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,true': 'haswordtitle(F, G), haswordauthor(H, G)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,true': 'haswordtitle(K, I)', 'false,false': 'haswordvenue(A, L), haswordtitle(M, L)', 'false,false,false': 'haswordvenue(B, N), haswordauthor(P, N)'}, {'true,true': [0.362, 723, 477], 'true,false,true,true': [1.882, 6, 10], 'true,false,true,false': [1.155, 4, 2], 'true,false,false': [0.397, 3, 8], 'false,true,true': [0.464, 8, 4], 'false,true,false': [0.855, 4, 1], 'false,false,true': [0.356, 84, 15], 'false,false,false,true': [0.026, 5, 0], 'false,false,false,false': [2.907, 29, 12]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'false,true,true': 'haswordauthor(J, G)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,false,true': 'haswordauthor(M, K)'}, {'true,true': [0.36, 723, 477], 'true,false,true': [0.473, 10, 12], 'true,false,false': [0.397, 3, 8], 'false,true,true,true': [1.604, 8, 4], 'false,true,true,false': [3.393, 68, 14], 'false,true,false': [0.229, 17, 1], 'false,false,true,true': [0.014, 4, 0], 'false,false,true,false': [3.0, 30, 13], 'false,false,false': [0.072, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordauthor(D, C)', 'false': 'haswordvenue(A, E), haswordvenue(B, E)', 'false,true': 'haswordtitle(F, E)', 'false,true,true': 'title(G, F), venue(G, B)', 'false,true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false,false,true': 'title(L, K), venue(L, B)', 'false,false,false': 'haswordvenue(B, M), haswordauthor(N, M)'}, {'true': [0.353, 29, 20], 'false,true,true,true': [11.82, 658, 448], 'false,true,true,false': [3.448, 48, 16], 'false,true,false,true': [2.146, 10, 10], 'false,true,false,false': [1.319, 3, 8], 'false,false,true,true': [3.33, 55, 14], 'false,false,true,false': [0.995, 29, 1], 'false,false,false,true': [0.034, 5, 0], 'false,false,false,false': [2.904, 29, 12]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false,true': 'haswordtitle(I, G)', 'false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,false,true': 'haswordtitle(K, L), haswordvenue(A, L)', 'false,false,false': 'haswordvenue(B, M), haswordauthor(N, M)'}, {'true,true': [0.357, 723, 477], 'true,false,true': [0.462, 9, 10], 'true,false,false': [0.428, 4, 10], 'false,true,true': [0.462, 8, 4], 'false,true,false': [0.836, 4, 1], 'false,false,true,true': [2.45, 54, 7], 'false,false,true,false': [2.911, 32, 12], 'false,false,false,true': [0.915, 6, 1], 'false,false,false,false': [2.338, 26, 7]}]]
[{'': [0.24060688461205806, 0.1585124218869086], 'true': [0.2394937499999871, 0.23875114784205692], 'true,true': [0.241128217367573, 0.18749999999999947], 'true,true,true': [0.163586975382452, 0.02383584757971457], 'true,false': [0.2493074792243767, 0.20408163265306115], 'true,false,true': [0.2399999999999999, 0.18750000000000003], 'true,false,false': [0.23140495867768587, 1.4802973661668753e-16], 'true,true,false': [0.14876033057851223, 0.2040816326530607]}, {'': [0.20263380943869136, 0.158512421886908], 'true': [0.20100738758055248, 0.22973593483293386], 'true,false': [0.24373942059134476, 0.19660503267710408], 'true,false,true': [0.24000000000000019, 0.18749999999999997], 'true,true': [0.2009355591077695, 0.18690850247369153], 'true,true,true': [0.16358697538243738, 0.023835847579713625], 'true,false,false': [0.23140495867768598, 0.0], 'true,true,false': [0.14876033057851226, 0.20408163265306117]}, {'': [0.16732133525027737, 0.1585124218869075], 'true': [0.16520054514879826, 0.2210618720386318], 'true,false': [0.24198641504214746, 0.16643584497726138], 'true,false,true': [0.2243477644958101, 0.2222222222222223], 'true,false,false': [0.21841490509319839, 3.700743415417188e-17], 'true,true': [0.16358014025091733, 0.18641055815859048], 'true,true,false': [0.14876033057851232, 0.20408163265306117], 'true,true,true': [0.16358697538245517, 0.023835847579713867]}, {'': [0.14161207693049838, 0.1585124218869082], 'false': [0.140864158163266, 0.19240000000000068], 'false,false': [4.625929269271485e-18, 0.2081611570247941], 'false,false,false': [0.22222222222222224, 0.20701963117192218], 'true': [0.13921340774192228, 0.21191504649521253], 'true,false': [0.23413550943905437, 0.16034444905562634], 'true,false,true': [0.22293952134618938, 0.22222222222222224], 'true,false,false': [0.21566254581244335, -3.700743415417188e-17]}, {'': [0.13788015706213386, 0.1573267025915224], 'false': [0.14086415816326484, 0.1900727557362836], 'false,false': [0.197822304888961, 0.0004008980970173816], 'false,false,true': [0.2014616740864912, 0.16000000000000006], 'false,true': [0.15482118605703893, 0.0524691358024691], 'false,true,true': [0.19674556213017705, 0.08616780045351465], 'true': [0.13575454249273336, 0.20644842571464658], 'true,false': [0.22879298081988841, 0.15760556906619946]}, {'': [0.13520934209029997, 0.15499450387867703], 'false': [0.13862840530864023, 0.18865474148193087], 'false,false': [0.00015102233645157095, 0.20680972343414006], 'false,false,false': [0.2134044412409517, 0.206187331154629], 'false,true': [0.21571150316752832, 0.1259367159050465], 'true': [0.13315995316838894, 0.20535593467223304], 'true,false': [0.22822448433593126, 0.15717126801346734], 'true,false,true': [0.22169208733453477, 0.22222222222222218]}, {'': [0.13319879055099218, 0.1535240606941347], 'false': [0.1983093522081386, 0.1474093312828793], 'false,true': [0.21499044363379158, 0.14611849633109675], 'false,false': [0.12694679222917007, 0.18814250661210322], 'false,false,false': [0.00013956015676875878, 0.20613802482903512], 'true': [0.13121766540859167, 0.2031428276794697], 'true,false': [0.22527587440922703, 0.15731804192885177], 'true,false,true': [0.22140444136206364, 0.2222222222222223]}, {'': [0.13172033741507763, 0.15252693824973568], 'false': [0.13702847733260348, 0.18580377753048094], 'false,false': [0.19476653436510008, 0.0017188208647769636], 'false,false,true': [4.663064660911931e-05, 0.20930245178292387], 'false,true': [0.1512252034623627, 0.05246913580246914], 'false,true,true': [0.214365353439124, 0.1404004171818109], 'true': [0.12976045947523396, 0.201996254475347], 'true,false': [0.2236094457604237, 0.15773984029177446]}, {'': [0.12427490051900793, 0.13331147951057634], 'false': [0.1316578479562051, 0.1458776172542371], 'false,false': [0.1266226601170573, 0.1859262121152679], 'false,false,false': [0.00022985161960794171, 0.20567460742120264], 'false,true': [0.12969129044306715, 0.20587953194088182], 'false,true,false': [0.2303552165711082, 0.15825712291630997], 'false,true,true': [0.1263281803807002, 0.18572198272960833], 'false,false,true': [0.1607111977198401, 0.03299196905752017]}, {'': [0.1296735977074231, 0.15008771186681402], 'false': [0.19323923122405648, 0.1447738443735337], 'false,true': [0.2133949884162595, 0.13974941480939918], 'false,false': [0.13920908180565433, 0.1581932544238383], 'false,false,false': [0.11949903662300788, 0.16557958448586613], 'false,false,true': [0.09842972386838453, 0.19253469268670165], 'true': [0.1276988925287833, 0.2010892491845883], 'true,false': [0.21340400474228757, 0.1833844063982673]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
0;true,false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
1;true,false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,false;haswordvenue(A, E), haswordtitle(F, E).;true;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false;haswordvenue(A, K), haswordtitle(L, K).;true;true
3;false,false;haswordvenue(B, M), haswordauthor(N, M).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(A, I), haswordtitle(J, I).;true;true
5;false,false;haswordvenue(B, L), haswordauthor(M, L).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(A, I), haswordauthor(J, I).;true;true
6;false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
6;false,false,false;haswordvenue(B, N), haswordauthor(P, N).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(A, G), haswordtitle(H, G).;true;true
7;false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
7;false,false,true;haswordauthor(M, K).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordauthor(D, C).;true;true
8;false;haswordvenue(A, E), haswordvenue(B, E).;true;true
8;false,false;haswordvenue(A, J), haswordtitle(K, J).;true;true
8;false,false,false;haswordvenue(B, M), haswordauthor(N, M).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.6521098587229537;  // std dev = 9.597, 563.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=447 */
%   | | | else return -0.11741825512736359;  // std dev = 3.696, 573.000 (wgt'ed) examples reached here.  /* #neg=559 #pos=14 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.0399671169176941;  // std dev = 1.809, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   | | | else return 0.14386322081379807;  // std dev = 2.928, 42.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.4581489350995123;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.4945125714631487;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.05567979929704223;  // std dev = 0.398, 162.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.5530862552831768;  // std dev = 9.597, 563.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=447 */
%   | | | else return -0.10371693133486745;  // std dev = 3.696, 573.000 (wgt'ed) examples reached here.  /* #neg=559 #pos=14 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.03503196034273708;  // std dev = 1.809, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   | | | else return 0.12543301544918353;  // std dev = 2.928, 42.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.3927941835770486;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | | | else return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.42312069605298835;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.04876584447019631;  // std dev = 0.398, 162.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.4384275431192111;  // std dev = 9.597, 563.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=447 */
%   | | | else return -0.09256885141021194;  // std dev = 3.696, 573.000 (wgt'ed) examples reached here.  /* #neg=559 #pos=14 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.030590047750322546;  // std dev = 1.809, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   | | | else return 0.10782354562777491;  // std dev = 2.928, 42.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.35732780033471473;  // std dev = 1.895, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | | | else return 0.054258803024475444;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.3597663351308571;  // std dev = 1.322, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.04248408016136117;  // std dev = 0.398, 162.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.12011726541444923;  // std dev = 0.373, 1,200.000 (wgt'ed) examples reached here.  /* #neg=723 #pos=477 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.2828639271962643;  // std dev = 1.889, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | | | else return 0.043212667521607656;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.284695678701915;  // std dev = 1.314, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then return 0.008948432511544563;  // std dev = 0.375, 112.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=19 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then if ( title(P, N), venue(P, B) )
%   | | | then return 0.12501986108297308;  // std dev = 2.928, 42.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=12 */
%   | | | else return 0.03930557536868775;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return -0.16069442463131228;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09930177544827617;  // std dev = 0.368, 1,200.000 (wgt'ed) examples reached here.  /* #neg=723 #pos=477 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.21434862188641443;  // std dev = 1.695, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | | else return 0.10027834011406926;  // std dev = 1.446, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else return 0.24661778090119937;  // std dev = 0.397, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | then if ( haswordauthor(J, H) )
%   | | then return 0.17142835067690787;  // std dev = 0.471, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else return -0.011904982656425448;  // std dev = 0.357, 100.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=15 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then return -0.17192988417372324;  // std dev = 0.035, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then return 0.16775267741926556;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.11682230172385934;  // std dev = 2.908, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08159492731905846;  // std dev = 0.365, 1,200.000 (wgt'ed) examples reached here.  /* #neg=723 #pos=477 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.16300528839900036;  // std dev = 1.693, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | | else return 0.0777298446341475;  // std dev = 1.445, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else return 0.189049041106634;  // std dev = 0.396, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | then if ( haswordauthor(K, H) )
%   | | | then return 0.1467997718451406;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.010435637798708665;  // std dev = 3.407, 82.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=14 */
%   | | else return -0.10474051396280883;  // std dev = 0.229, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return -0.14884204840734225;  // std dev = 0.031, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.10225631108043015;  // std dev = 0.455, 44.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=13 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06673761988121175;  // std dev = 0.362, 1,200.000 (wgt'ed) examples reached here.  /* #neg=723 #pos=477 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.09731122191676303;  // std dev = 0.475, 22.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=12 */
%   | | else return 0.14539016759736284;  // std dev = 0.397, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | then if ( haswordvenue(B, I) )
%   | | | then return 0.13829429629897017;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.009989482099779368;  // std dev = 3.488, 84.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=15 */
%   | | else return -0.09113870635382515;  // std dev = 0.229, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordauthor(M, K) )
%   | | | then return -0.13601122619359848;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.09267440814982886;  // std dev = 3.001, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | | else return -0.15016688956112303;  // std dev = 0.055, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.054396175217511215;  // std dev = 0.360, 1,200.000 (wgt'ed) examples reached here.  /* #neg=723 #pos=477 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.12183508983890093;  // std dev = 1.778, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | | | else return -0.13826436770656797;  // std dev = 0.874, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.08751546161790623;  // std dev = 1.588, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return 0.2089015461254239;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.12183280484939714;  // std dev = 0.471, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else return 0.013441637968861681;  // std dev = 0.842, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | then return -0.008226092494746581;  // std dev = 0.357, 99.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=15 */
%   | | else return 0.04738000110800912;  // std dev = 0.432, 46.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=12 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04422027929252812;  // std dev = 0.359, 1,200.000 (wgt'ed) examples reached here.  /* #neg=723 #pos=477 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.09258192107505157;  // std dev = 1.777, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | | | else return -0.10599197798742407;  // std dev = 0.874, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.08965839122423334;  // std dev = 0.427, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( haswordtitle(K, I) )
%   | | then return 0.10080177935543659;  // std dev = 0.471, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else return 0.011421962020980642;  // std dev = 0.841, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return -0.007126313868674686;  // std dev = 0.357, 99.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=15 */
%   | | else if ( haswordvenue(B, N), haswordauthor(P, N) )
%   | | | then return -0.12551114960124993;  // std dev = 0.040, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.059486145521259366;  // std dev = 2.904, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.11279491281638891;  // std dev = 0.292, 32.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=15 */
%   | else if ( haswordtitle(F, C) )
%   | | then return 0.03444060630372056;  // std dev = 0.359, 1,170.000 (wgt'ed) examples reached here.  /* #neg=706 #pos=464 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.0026233737545726583;  // std dev = 2.141, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
%   | | | else return 0.07259848064296855;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.535401622232529;  // std dev = 2.048, 20.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=14 */
%   | | | else return -0.16629721250482155;  // std dev = 0.129, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else return -0.046733742107939104;  // std dev = 0.313, 40.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=5 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return -0.11424955340891609;  // std dev = 0.038, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.05348551905575147;  // std dev = 0.454, 44.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=13 */


Results
   AUC ROC   = 0.844972
   AUC PR    = 0.662026
   CLL	      = -0.467113
   Precision = 0.705607 at threshold = 0.5
   Recall    = 0.820652
   F1        = 0.758794


Total learning time: 1608.2817778587341 seconds
Total inference time: 3.222 seconds
AUC ROC: 0.844972


Results scoring model
   AUC ROC   = 0.903607
   AUC PR    = 0.790269
   CLL	      = -0.42531
   Precision = 0.791809 at threshold = 0.5
   Recall    = 0.877127
   F1        = 0.832287


Total scoring time: 19.581 seconds
Refined model CLL: -0.42531


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.844972
   AUC PR    = 0.662026
   CLL	      = -0.467113
   Precision = 0.705607 at threshold = 0.5
   Recall    = 0.820652
   F1        = 0.758794


Total learning time: 3377.5965997238163 seconds
Total inference time: 3.222 seconds
AUC ROC: 0.844972
Total revision time: 3377.5965997238163
Best scored revision CLL: -0.42531


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 00:56:33
{'AUC ROC': 0.844972, 'AUC PR': 0.662026, 'CLL': -0.467113, 'Precision': [0.705607, 0.5], 'Recall': 0.820652, 'F1': 0.758794, 'Learning time': 3377.5965997238163, 'Inference time': 3.222, 'parameter_0.2': {'AUC ROC': 0.831305, 'AUC PR': 0.653249, 'CLL': -0.469202, 'Precision': [0.705607, 0.5], 'Recall': 0.820652, 'F1': 0.758794, 'Learning time': 1727.1878218650818, 'Inference time': 3.282}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.6521098587229537;  // std dev = 9.597, 563.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=447 */
%   | | | else return -0.11741825512736359;  // std dev = 3.696, 573.000 (wgt'ed) examples reached here.  /* #neg=559 #pos=14 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.0399671169176941;  // std dev = 1.809, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   | | | else return 0.14386322081379807;  // std dev = 2.928, 42.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.4581489350995123;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.4945125714631487;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.05567979929704223;  // std dev = 0.398, 162.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=32 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.5530862552831768;  // std dev = 9.597, 563.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=447 */
%   | | | else return -0.10371693133486745;  // std dev = 3.696, 573.000 (wgt'ed) examples reached here.  /* #neg=559 #pos=14 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.03503196034273708;  // std dev = 1.809, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   | | | else return 0.12543301544918353;  // std dev = 2.928, 42.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=12 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.3927941835770486;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | | | else return 0.09446743783575562;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.42312069605298835;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.04876584447019631;  // std dev = 0.398, 162.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=32 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.4384275431192111;  // std dev = 9.597, 563.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=447 */
%   | | | else return -0.09256885141021194;  // std dev = 3.696, 573.000 (wgt'ed) examples reached here.  /* #neg=559 #pos=14 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.030590047750322546;  // std dev = 1.809, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   | | | else return 0.10782354562777491;  // std dev = 2.928, 42.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=12 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.3524380372000986;  // std dev = 1.706, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | | else return 0.1623447933223341;  // std dev = 1.490, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.3597663351308571;  // std dev = 1.322, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return 0.04248408016136117;  // std dev = 0.398, 162.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=32 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.12011726541444923;  // std dev = 0.373, 1,200.000 (wgt'ed) examples reached here.  /* #neg=723 #pos=477 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.2919812744304498;  // std dev = 1.891, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | | | else return 0.02045824982747818;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.284695678701915;  // std dev = 1.314, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then return 0.008948432511544563;  // std dev = 0.375, 112.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=19 */
%   | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | then return -0.16069442463131225;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( haswordvenue(A, P), haswordauthor(Q, P) )
%   | | | then return 0.17263890870202112;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.13198850219795566;  // std dev = 2.913, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09930177544827617;  // std dev = 0.368, 1,200.000 (wgt'ed) examples reached here.  /* #neg=723 #pos=477 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.22535063322675183;  // std dev = 1.887, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | | | else return 0.016043300474986994;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0.24661778090119937;  // std dev = 0.397, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordauthor(K, I) )
%   | | then return 0.17142835067690787;  // std dev = 0.471, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else return -0.011904982656425448;  // std dev = 0.357, 100.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=15 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return -0.140183742875446;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( haswordvenue(A, N), haswordauthor(P, N) )
%   | | | then return 0.1479710606915748;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.11338064889034505;  // std dev = 2.913, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.1607001747017292;  // std dev = 0.311, 32.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=15 */
%   | else if ( haswordtitle(F, C) )
%   | | then return 0.08020649323205117;  // std dev = 0.366, 1,170.000 (wgt'ed) examples reached here.  /* #neg=706 #pos=464 */
%   | | else return 0.12334629471712144;  // std dev = 0.456, 31.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=18 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | then if ( haswordauthor(J, G) )
%   | | | then return 0.1467997718451406;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.010435637798708665;  // std dev = 3.407, 82.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=14 */
%   | | else return -0.10474051396280883;  // std dev = 0.229, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordauthor(M, K) )
%   | | | then return -0.12412345846843176;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.10684872220313195;  // std dev = 3.004, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | | else return -0.17649101794657018;  // std dev = 0.065, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.12358125307551455;  // std dev = 0.332, 38.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=18 */
%   | else if ( haswordtitle(F, C) )
%   | | then return 0.06547936457550792;  // std dev = 0.363, 1,164.000 (wgt'ed) examples reached here.  /* #neg=703 #pos=461 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.0598043044776447;  // std dev = 2.159, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
%   | | | else return 0.16046968867062186;  // std dev = 1.315, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, B) )
%   | | | then return 0.10104552907280964;  // std dev = 3.169, 52.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=14 */
%   | | | else return -0.07219781077178426;  // std dev = 1.917, 42.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=4 */
%   | | else return -0.09113870635382515;  // std dev = 0.229, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | else if ( haswordvenue(B, N), haswordauthor(P, N) )
%   | | then return -0.11456214782476813;  // std dev = 0.024, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.0825895123909988;  // std dev = 0.455, 44.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=13 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.11716141979715036;  // std dev = 0.295, 32.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=15 */
%   | else if ( haswordtitle(F, C) )
%   | | then return 0.05319177864898547;  // std dev = 0.362, 1,170.000 (wgt'ed) examples reached here.  /* #neg=706 #pos=464 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.04273655181774507;  // std dev = 2.147, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
%   | | | else return 0.1238822138243958;  // std dev = 1.317, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( haswordtitle(K, I) )
%   | | then return 0.11831780444036767;  // std dev = 0.463, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else return 0.009302517797119308;  // std dev = 0.843, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | then return -0.00818166186993749;  // std dev = 0.356, 99.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=15 */
%   | | else if ( haswordvenue(B, N), haswordauthor(P, N) )
%   | | | then return -0.10406210334500113;  // std dev = 0.022, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return 0.0655639419181974;  // std dev = 2.909, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0439526706351048;  // std dev = 0.358, 1,200.000 (wgt'ed) examples reached here.  /* #neg=723 #pos=477 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.054543681598327926;  // std dev = 0.465, 19.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=10 */
%   | | else return 0.11132743584865865;  // std dev = 0.424, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | then if ( haswordvenue(A, I) )
%   | | | then return 0.09770235048813736;  // std dev = 1.602, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.006651903039783374;  // std dev = 3.393, 82.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=14 */
%   | | else return -0.079137273595737;  // std dev = 0.229, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordauthor(M, K) )
%   | | | then return -0.09386205083256435;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.06513297669512466;  // std dev = 3.001, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | | else return -0.158140919909069;  // std dev = 0.087, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.035657030457298115;  // std dev = 0.357, 1,200.000 (wgt'ed) examples reached here.  /* #neg=723 #pos=477 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.04147969354577358;  // std dev = 0.465, 19.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=10 */
%   | | else return 0.08620245325812943;  // std dev = 0.425, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.5290851552982748;  // std dev = 2.064, 20.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=14 */
%   | | | else return -0.16828804591861776;  // std dev = 0.166, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else return -0.041680811597453446;  // std dev = 0.307, 40.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=5 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordauthor(M, K) )
%   | | | then return -0.08617900856675138;  // std dev = 0.008, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.05317300511923147;  // std dev = 3.001, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | | else return -0.13854254673025365;  // std dev = 0.077, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */


Results
   AUC ROC   = 0.845559
   AUC PR    = 0.660435
   CLL	      = -0.466392
   Precision = 0.705607 at threshold = 0.5
   Recall    = 0.820652
   F1        = 0.758794


Total learning time: 1828.1462857723236 seconds
Total inference time: 3.197 seconds
AUC ROC: 0.845559


Dataset: 3_imdb_cora, Fold: 1, Type: Scratch (RDN-B), Time: 01:27:05
{'AUC ROC': 0.845559, 'AUC PR': 0.660435, 'CLL': -0.466392, 'Precision': [0.705607, 0.5], 'Recall': 0.820652, 'F1': 0.758794, 'Learning time': 1828.1462857723236, 'Inference time': 3.197}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.6565287730833058;  // std dev = 13.373, 1,111.000 (wgt'ed) examples reached here.  /* #neg=224 #pos=887 */
%   | | | else return -0.1196098330784198;  // std dev = 5.042, 1,169.000 (wgt'ed) examples reached here.  /* #neg=1,143 #pos=26 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.04419544672741935;  // std dev = 2.552, 43.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=8 */
%   | | | else return 0.233148935099511;  // std dev = 4.330, 80.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=30 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.572434649385226;  // std dev = 2.390, 28.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   | | | else return 0.22178529873587596;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else return 0.6658412427918196;  // std dev = 0.394, 26.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=21 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.2510060779566552;  // std dev = 0.488, 28.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=11 */
%   | else return 0.033824610775187905;  // std dev = 0.381, 296.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=52 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.5566962282367578;  // std dev = 13.373, 1,111.000 (wgt'ed) examples reached here.  /* #neg=224 #pos=887 */
%   | | | else return -0.10566384949320234;  // std dev = 5.042, 1,169.000 (wgt'ed) examples reached here.  /* #neg=1,143 #pos=26 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.03872994272834216;  // std dev = 2.552, 43.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=8 */
%   | | | else return 0.20233423921810748;  // std dev = 4.330, 80.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=30 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.48767788391726324;  // std dev = 2.390, 28.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   | | | else return 0.19258789115538322;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else return 0.5642978738811567;  // std dev = 0.394, 26.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=21 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.2176255182773883;  // std dev = 0.488, 28.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=11 */
%   | else return 0.029657073978195968;  // std dev = 0.381, 296.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=52 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.44100467698121343;  // std dev = 13.373, 1,111.000 (wgt'ed) examples reached here.  /* #neg=224 #pos=887 */
%   | | | else return -0.0943335491538715;  // std dev = 5.042, 1,169.000 (wgt'ed) examples reached here.  /* #neg=1,143 #pos=26 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.03379815547193543;  // std dev = 2.552, 43.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=8 */
%   | | | else return 0.171492819615289;  // std dev = 4.330, 80.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=30 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.39125696209925315;  // std dev = 2.390, 28.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   | | | else return 0.16352953408429413;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.37557317934609336;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.6387310740829358;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return 0.03957463547893303;  // std dev = 0.394, 324.000 (wgt'ed) examples reached here.  /* #neg=261 #pos=63 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1187011231190852;  // std dev = 0.371, 2,403.000 (wgt'ed) examples reached here.  /* #neg=1,452 #pos=951 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.25417305022870085;  // std dev = 0.466, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   | | else return 0.33844228012141664;  // std dev = 0.386, 26.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=21 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then return 0.38445064831746306;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordtitle(J, G) )
%   | | | then return 0.25503888361158095;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
%   | | | else return -0.2155493516825369;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return -0.0076567379298487824;  // std dev = 0.354, 197.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=29 */
%   | | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | | then return -0.012007716900116986;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0.08426557502534916;  // std dev = 4.091, 92.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09820050108501868;  // std dev = 0.366, 2,403.000 (wgt'ed) examples reached here.  /* #neg=1,452 #pos=951 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.1957044140725405;  // std dev = 0.465, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   | | else return 0.25435946428696393;  // std dev = 0.387, 26.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=21 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( haswordtitle(I, G) )
%   | | then if ( author(J, H), title(J, I) )
%   | | | then return 0.219398235113474;  // std dev = 1.049, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.20249758790504535;  // std dev = 2.227, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
%   | | else return -0.05375225776755491;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return -0.017135927943394247;  // std dev = 0.349, 190.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=28 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then return 0.17618274427589437;  // std dev = 0.979, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.07291330889925185;  // std dev = 4.091, 92.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=22 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08075622680079832;  // std dev = 0.362, 2,403.000 (wgt'ed) examples reached here.  /* #neg=1,452 #pos=951 */
%   | else return 0.166617747503051;  // std dev = 0.436, 65.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=45 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( author(G, F), venue(G, A) )
%   | | then return -0.058196923406580045;  // std dev = 0.818, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( haswordtitle(H, E) )
%   | | | then return 0.20929508298789562;  // std dev = 2.046, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
%   | | | else return 0.08450273008433222;  // std dev = 1.023, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | then if ( haswordtitle(K, I) )
%   | | | then return 0.16552547189546515;  // std dev = 2.284, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
%   | | | else return -0.046887830392805106;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return -0.02884062899815763;  // std dev = 4.292, 171.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=21 */
%   | | | else return 0.06256096563941471;  // std dev = 4.091, 92.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=22 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06611080400782775;  // std dev = 0.360, 2,403.000 (wgt'ed) examples reached here.  /* #neg=1,452 #pos=951 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.43343138121403096;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.11233863724909142;  // std dev = 0.441, 62.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=42 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( haswordauthor(I, G) )
%   | | then if ( author(J, I), title(J, H) )
%   | | | then return 0.045763882830644;  // std dev = 0.779, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.16696555467219004;  // std dev = 2.045, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
%   | | else return -0.007803163257964298;  // std dev = 0.350, 199.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=29 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return 0.061450853785951505;  // std dev = 4.192, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return -0.04299299290760578;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else return -0.1832722980246175;  // std dev = 0.058, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0539361775037087;  // std dev = 0.358, 2,403.000 (wgt'ed) examples reached here.  /* #neg=1,452 #pos=951 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.07631141417311518;  // std dev = 0.461, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   | | else return 0.12942731568743843;  // std dev = 0.387, 26.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=21 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( haswordtitle(I, G) )
%   | | then if ( author(J, H), title(J, I) )
%   | | | then return 0.14099466887501416;  // std dev = 1.017, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.15054613290306476;  // std dev = 2.228, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
%   | | else return -0.03904014737076586;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return -0.017141432450228592;  // std dev = 0.346, 190.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=28 */
%   | | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | | then return 0.12463700557139563;  // std dev = 0.946, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.04539892871964892;  // std dev = 4.087, 92.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.043889104615117684;  // std dev = 0.356, 2,403.000 (wgt'ed) examples reached here.  /* #neg=1,452 #pos=951 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.31483575295205224;  // std dev = 7.45e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.0368226090179595;  // std dev = 2.840, 36.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=21 */
%   | | | else return 0.1019321079135116;  // std dev = 1.977, 26.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=21 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.23882326300950385;  // std dev = 1.223, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( haswordtitle(L, I) )
%   | | | then return 0.1243217677049671;  // std dev = 2.226, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
%   | | | else return -0.1343012605735574;  // std dev = 0.021, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return -0.014848252355716761;  // std dev = 0.346, 190.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=28 */
%   | | else return 0.04138116702685929;  // std dev = 0.426, 97.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=24 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0719597296048953;  // std dev = 0.306, 68.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=29 */
%   | else return 0.035263761587233135;  // std dev = 0.359, 2,400.000 (wgt'ed) examples reached here.  /* #neg=1,433 #pos=967 */
%   else if ( haswordvenue(A, F), haswordauthor(G, F) )
%   | then if ( author(H, G), venue(H, B) )
%   | | then return 0.25304250752971713;  // std dev = 0.964, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordtitle(I, F) )
%   | | | then return 0.13178760261345174;  // std dev = 2.023, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
%   | | | else return -0.2473676270133454;  // std dev = 0.115, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.08639932964548132;  // std dev = 2.289, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
%   | | | else return -0.024113820477091232;  // std dev = 0.905, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return -0.020220370577995018;  // std dev = 4.292, 171.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=21 */
%   | | | else return 0.03148564558590073;  // std dev = 4.087, 92.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=22 */


Results
   AUC ROC   = 0.827939
   AUC PR    = 0.651649
   CLL	      = -0.462847
   Precision = 0.705607 at threshold = 0.5
   Recall    = 0.820652
   F1        = 0.758794


Total learning time: 2666.23432803154 seconds
Total inference time: 3.029 seconds
AUC ROC: 0.827939


Results scoring model
   AUC ROC   = 0.892311
   AUC PR    = 0.783084
   CLL	      = -0.423823
   Precision = 0.796741 at threshold = 0.5
   Recall    = 0.877243
   F1        = 0.835056


Total scoring time: 33.924 seconds
Parameter learned model CLL: -0.423823


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,true': 'samebib(E, F), venue(F, A)', 'true,true,false': 'title(G, D), venue(G, A)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'haswordtitle(I, J), haswordauthor(K, J)', 'false': 'haswordvenue(A, L), haswordauthor(M, L)'}, {'true,true,true,true': [13.373, 224, 887], 'true,true,true,false': [5.042, 1, 26], 'true,true,false,true': [2.552, 35, 8], 'true,true,false,false': [4.33, 50, 30], 'true,false,true,true': [2.39, 8, 20], 'true,false,true,false': [1.595, 7, 4], 'true,false,false': [0.394, 5, 21], 'false,true': [0.488, 17, 11], 'false,false': [0.381, 244, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,true': 'samebib(E, F), venue(F, A)', 'true,true,false': 'title(G, D), venue(G, A)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'haswordtitle(I, J), haswordauthor(K, J)', 'false': 'haswordvenue(A, L), haswordauthor(M, L)'}, {'true,true,true,true': [13.373, 224, 887], 'true,true,true,false': [5.042, 1, 26], 'true,true,false,true': [2.552, 35, 8], 'true,true,false,false': [4.33, 50, 30], 'true,false,true,true': [2.39, 8, 20], 'true,false,true,false': [1.595, 7, 4], 'true,false,false': [0.394, 5, 21], 'false,true': [0.488, 17, 11], 'false,false': [0.381, 244, 52]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,true': 'samebib(E, F), venue(F, A)', 'true,true,false': 'title(G, D), venue(G, A)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'haswordtitle(I, J), haswordauthor(K, J)', 'true,false,false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true,true': [13.373, 224, 887], 'true,true,true,false': [5.042, 1, 26], 'true,true,false,true': [2.552, 35, 8], 'true,true,false,false': [4.33, 50, 30], 'true,false,true,true': [2.39, 8, 20], 'true,false,true,false': [1.595, 7, 4], 'true,false,false,true': [1.919, 5, 14], 'true,false,false,false': [0.0, 0, 7], 'false': [0.394, 261, 63]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false,true': 'author(I, H), venue(I, B)', 'false,true,false': 'haswordtitle(J, G)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false,false': 'haswordvenue(B, M), haswordauthor(N, M)'}, {'true,true': [0.371, 1, 951], 'true,false,true': [0.466, 15, 24], 'true,false,false': [0.386, 5, 21], 'false,true,true': [1.095, 2, 3], 'false,true,false,true': [2.058, 9, 8], 'false,true,false,false': [0.0, 6, 0], 'false,false,true': [0.354, 168, 29], 'false,false,false,true': [0.926, 6, 1], 'false,false,false,false': [4.091, 70, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false,true': 'haswordtitle(I, G)', 'false,true,true': 'author(J, H), title(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false,false': 'haswordvenue(A, M), haswordauthor(N, M)'}, {'true,true': [0.366, 1, 951], 'true,false,true': [0.465, 15, 24], 'true,false,false': [0.387, 5, 21], 'false,true,true,true': [1.049, 3, 2], 'false,true,true,false': [2.227, 14, 8], 'false,true,false': [0.3, 9, 1], 'false,false,true': [0.349, 162, 28], 'false,false,false,true': [0.979, 3, 2], 'false,false,false,false': [4.091, 70, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'false': 'haswordvenue(A, E), haswordauthor(F, E)', 'false,true': 'author(G, F), venue(G, A)', 'false,true,false': 'haswordtitle(H, E)', 'false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,false,true': 'haswordtitle(K, I)', 'false,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true': [0.362, 1, 951], 'true,false': [0.436, 20, 45], 'false,true,true': [0.818, 4, 1], 'false,true,false,true': [2.046, 9, 8], 'false,true,false,false': [1.023, 4, 2], 'false,false,true,true': [2.284, 15, 8], 'false,false,true,false': [0.949, 9, 1], 'false,false,false,true': [4.292, 150, 21], 'false,false,false,false': [4.091, 70, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false,true': 'haswordauthor(I, G)', 'false,true,true': 'author(J, I), title(J, H)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,false,true': 'title(M, L), venue(M, B)'}, {'true,true': [0.36, 1, 951], 'true,false,true': [1.05e-08, 0, 3], 'true,false,false': [0.441, 20, 42], 'false,true,true,true': [0.779, 2, 1], 'false,true,true,false': [2.045, 9, 8], 'false,true,false': [0.35, 170, 29], 'false,false,true,true': [4.192, 71, 24], 'false,false,true,false': [0.926, 6, 1], 'false,false,false': [0.058, 3, 0]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false,true': 'haswordtitle(I, G)', 'false,true,true': 'author(J, H), title(J, I)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false,false': 'haswordvenue(A, M), haswordauthor(N, M)'}, {'true,true': [0.358, 1, 951], 'true,false,true': [0.461, 15, 24], 'true,false,false': [0.387, 5, 21], 'false,true,true,true': [1.017, 3, 2], 'false,true,true,false': [2.228, 14, 8], 'false,true,false': [0.3, 9, 1], 'false,false,true': [0.346, 162, 28], 'false,false,false,true': [0.946, 3, 2], 'false,false,false,false': [4.087, 70, 22]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, A)', 'false,true,false': 'haswordtitle(L, I)', 'false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.356, 1, 951], 'true,false,true': [7.45e-09, 0, 3], 'true,false,false,true': [2.84, 15, 21], 'true,false,false,false': [1.977, 5, 21], 'false,true,true': [1.223, 3, 3], 'false,true,false,true': [2.226, 14, 8], 'false,true,false,false': [0.021, 9, 0], 'false,false,true': [0.346, 162, 28], 'false,false,false': [0.426, 73, 24]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'false': 'haswordvenue(A, F), haswordauthor(G, F)', 'false,true': 'author(H, G), venue(H, B)', 'false,true,false': 'haswordtitle(I, F)', 'false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,false,true': 'haswordtitle(L, J)', 'false,false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.306, 39, 29], 'true,false': [0.359, 1, 967], 'false,true,true': [0.964, 2, 3], 'false,true,false,true': [2.023, 9, 8], 'false,true,false,false': [0.115, 6, 0], 'false,false,true,true': [2.289, 15, 8], 'false,false,true,false': [0.905, 9, 1], 'false,false,false,true': [4.292, 150, 21], 'false,false,false,false': [4.087, 70, 22]}]]
[{'': [0.24070041424892613, 0.15663580246913666], 'true': [0.23913304374528074, 0.21301775147929028], 'true,true': [0.24008752693138802, 0.21349725692379012], 'true,true,true': [0.16096947228478262, 0.021746559429107703], 'true,true,false': [0.15143320713899425, 0.23437500000000142], 'true,false': [0.2366863905325456, 0.15532544378698251], 'true,false,true': [0.20408163265306145, 0.2314049586776858], 'false': [0.23852040816326484, 0.1448137326515715]}, {'': [0.20189685242276267, 0.15570136128900433], 'true': [0.2000758590605489, 0.20591553214806516], 'true,false': [0.22942138468702006, 0.1553254437869819], 'true,false,true': [0.20408163265306103, 0.23140495867768582], 'true,true': [0.19919643974517107, 0.21146516828693548], 'true,true,false': [0.15143320713899433, 0.23437500000000053], 'true,true,true': [0.16096947228475872, 0.02174655942910682], 'false': [0.23852040816326517, 0.14481373265157105]}, {'': [0.16582281518494948, 0.1548828843202758], 'true': [0.1637607533310271, 0.19892538469526888], 'true,false': [0.2222897322963349, 0.15532544378698238], 'true,false,true': [0.20408163265306167, 0.23140495867768607], 'true,true': [0.16118758799154836, 0.20969013253972837], 'true,true,false': [0.1514332071389942, 0.23437500000000008], 'true,true,true': [0.16096947228477296, 0.021746559429107824], 'true,false,false': [0.1939058171745155, 0.0]}, {'': [0.13960261243888564, 0.1548454625869537], 'false': [0.2385204081632651, 0.144813732651569], 'false,true': [0.24000000000000005, 0.22684310018903572], 'false,true,false': [0.2491349480968856, -9.25185853854297e-18], 'false,false': [0.12553789069545862, 0.17834914804611893], 'false,false,false': [0.12244897959183673, 0.18194706994329016], 'true': [0.13743645476915858, 0.1918158658583587], 'true,false': [0.21726802587809826, 0.14937684396472228]}, {'': [0.1358331611378981, 0.15252507212384672], 'false': [0.201360863651135, 0.14457300613811935], 'false,true': [0.22443080607392357, 0.08997742699220466], 'false,true,true': [0.22021606960058948, 0.22533580593509042], 'false,false': [0.12189481649378196, 0.18297252945482906], 'false,false,false': [0.1917261286110915, 0.18194706994328974], 'true': [0.13397169786171978, 0.19040265420308886], 'true,false': [0.21631656003842606, 0.14946754650068933]}, {'': [0.13309599819774154, 0.15106200898052521], 'false': [0.22138176937576529, 0.14315058381382514], 'false,true': [0.13396591106373248, 0.2305288562460924], 'false,true,false': [0.24628163756335314, 0.17438540050655524], 'false,false': [0.19487623871174511, 0.13558902443416893], 'false,false,true': [0.22681150744158038, 0.08997825842866404], 'false,false,false': [0.10772545398584195, 0.18194706994328896], 'true': [0.13136676444563505, 0.1898464015951725]}, {'': [0.13109886573283627, 0.14934883349524838], 'false': [0.13517952531458186, 0.17776580326441094], 'false,false': [0.18134831371190008, 0.0011402220646677165], 'false,false,true': [0.18493964092368023, 0.12244897959183673], 'false,true': [0.2413762083305763, 0.12226722718393765], 'false,true,true': [0.2024070542802717, 0.24604964108028746], 'true': [0.12941201180928152, 0.18983191373508798], 'true,false': [3.700743415417188e-17, 0.1942588419822672]}, {'': [0.12957389924884574, 0.14845514939952154], 'false': [0.19333619111261793, 0.14168903969821794], 'false,true': [0.22214900644971008, 0.0898000744503554], 'false,true,true': [0.20685630284981155, 0.22560772637366233], 'false,false': [0.11974850128082232, 0.18172673147790896], 'false,false,false': [0.17884977329587132, 0.18155944497181722], 'true': [0.1279418977644522, 0.1880550104070496], 'true,false': [0.2122036120379988, 0.15013932856441883]}, {'': [0.1284670420479627, 0.14756231355517288], 'false': [0.19084196760562006, 0.141326133074499], 'false,true': [0.24947529856517414, 0.17366503504880623], 'false,true,false': [0.22527160278991543, 4.825508781918416e-05], 'false,false': [0.11977435904638871, 0.1814478051679381], 'true': [0.12683101779626405, 0.18796445572552725], 'true,false': [1.850371707708594e-17, 0.19415850619612887], 'true,false,false': [0.2240009111831466, 0.15037675496828645]}, {'': [0.1276010002514089, 0.1466324553604172], 'false': [0.2097645284202343, 0.14025867086577598], 'false,true': [0.18596005434770718, 0.20628359056429807], 'false,true,false': [0.24081096305622202, 0.0021996134919511265], 'false,false': [0.18621502753123936, 0.134154502492564], 'false,false,true': [0.2279001195531435, 0.08182711600054708], 'false,false,false': [0.10772545398584153, 0.18153976890093848], 'true': [0.0934554560591763, 0.1285313550691587]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(A, G), haswordauthor(H, G).;true;true
3;false,true;author(I, H), venue(I, B).;true;true
3;false,true,false;haswordtitle(J, G).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,false;haswordvenue(B, E), haswordauthor(F, E).;true;true
6;false;haswordvenue(A, G), haswordtitle(H, G).;true;true
6;false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,false;haswordvenue(B, E), haswordauthor(F, E).;true;true
8;false;haswordvenue(B, I), haswordauthor(J, I).;true;true
8;false,true;author(K, J), venue(K, A).;true;true
8;false,true,false;haswordtitle(L, I).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(A, F), haswordauthor(G, F).;true;true
9;false,true;author(H, G), venue(H, B).;true;true
9;false,true,false;haswordtitle(I, F).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.6565287730833058;  // std dev = 13.373, 1,111.000 (wgt'ed) examples reached here.  /* #neg=224 #pos=887 */
%   | | | else return -0.1196098330784198;  // std dev = 5.042, 1,169.000 (wgt'ed) examples reached here.  /* #neg=1,143 #pos=26 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.04419544672741935;  // std dev = 2.552, 43.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=8 */
%   | | | else return 0.233148935099511;  // std dev = 4.330, 80.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=30 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.572434649385226;  // std dev = 2.390, 28.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   | | | else return 0.22178529873587596;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else return 0.6658412427918196;  // std dev = 0.394, 26.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=21 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.2510060779566552;  // std dev = 0.488, 28.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=11 */
%   | else return 0.033824610775187905;  // std dev = 0.381, 296.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=52 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.5566962282367578;  // std dev = 13.373, 1,111.000 (wgt'ed) examples reached here.  /* #neg=224 #pos=887 */
%   | | | else return -0.10566384949320234;  // std dev = 5.042, 1,169.000 (wgt'ed) examples reached here.  /* #neg=1,143 #pos=26 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.03872994272834216;  // std dev = 2.552, 43.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=8 */
%   | | | else return 0.20233423921810748;  // std dev = 4.330, 80.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=30 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.48767788391726324;  // std dev = 2.390, 28.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   | | | else return 0.19258789115538322;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else return 0.5642978738811567;  // std dev = 0.394, 26.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=21 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.2176255182773883;  // std dev = 0.488, 28.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=11 */
%   | else return 0.029657073978195968;  // std dev = 0.381, 296.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=52 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.44100467698121343;  // std dev = 13.373, 1,111.000 (wgt'ed) examples reached here.  /* #neg=224 #pos=887 */
%   | | | else return -0.0943335491538715;  // std dev = 5.042, 1,169.000 (wgt'ed) examples reached here.  /* #neg=1,143 #pos=26 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.03379815547193543;  // std dev = 2.552, 43.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=8 */
%   | | | else return 0.171492819615289;  // std dev = 4.330, 80.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=30 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.6769712478135391;  // std dev = 1.49e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.2978640575073807;  // std dev = 2.876, 36.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=21 */
%   | | | else return 0.4464233817752431;  // std dev = 2.010, 26.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=21 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.18392403758779943;  // std dev = 0.488, 28.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=11 */
%   | else return 0.02591996230647257;  // std dev = 0.381, 296.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=52 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1187011231190852;  // std dev = 0.371, 2,403.000 (wgt'ed) examples reached here.  /* #neg=1,452 #pos=951 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.2562374453616571;  // std dev = 0.465, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   | | else return 0.33851255947034803;  // std dev = 0.394, 26.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=21 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then return 0.35904381045664147;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordtitle(J, G) )
%   | | | then return 0.22963204575075913;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
%   | | | else return -0.24095618954335848;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then return -0.005878000918972585;  // std dev = 0.354, 197.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=29 */
%   | | else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | | | then return -0.01022897988924081;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0.08604431203622495;  // std dev = 4.091, 92.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=22 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09820050108501868;  // std dev = 0.366, 2,403.000 (wgt'ed) examples reached here.  /* #neg=1,452 #pos=951 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.22519748937463524;  // std dev = 2.367, 30.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=21 */
%   | | | else return 0.033828877547074636;  // std dev = 1.452, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.20662506810389553;  // std dev = 2.036, 20.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=13 */
%   | | | else return 0.4464375476310628;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.20378050953189902;  // std dev = 0.473, 27.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=10 */
%   | | else return -0.05221339652336758;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | then return -0.018099078955676338;  // std dev = 0.348, 190.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=28 */
%   | | else return 0.0787095992998303;  // std dev = 0.427, 97.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=24 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08075622680079832;  // std dev = 0.362, 2,403.000 (wgt'ed) examples reached here.  /* #neg=1,452 #pos=951 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.17193278312749036;  // std dev = 2.365, 30.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=21 */
%   | | | else return 0.025438458888637876;  // std dev = 1.452, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else return 0.20363800100520318;  // std dev = 0.400, 27.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=20 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( haswordtitle(K, I) )
%   | | then if ( author(L, J), title(L, K) )
%   | | | then return 0.17947570177163158;  // std dev = 1.040, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.17265457433715034;  // std dev = 2.222, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
%   | | else return -0.04559719595796571;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return -0.01564342396989243;  // std dev = 0.348, 190.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=28 */
%   | | else return 0.06742083672919075;  // std dev = 0.427, 97.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=24 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06611080400782775;  // std dev = 0.360, 2,403.000 (wgt'ed) examples reached here.  /* #neg=1,452 #pos=951 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.3555288748547995;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.09411959278000587;  // std dev = 2.853, 36.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=21 */
%   | | | else return 0.14745020071755863;  // std dev = 1.945, 26.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=21 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return -0.09399600539966298;  // std dev = 0.783, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( haswordtitle(L, I) )
%   | | | then return 0.18666995601467262;  // std dev = 2.036, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
%   | | | else return 0.06174640758553679;  // std dev = 1.029, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return -0.00592576778222837;  // std dev = 0.351, 197.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=29 */
%   | | else return 0.04648746894963477;  // std dev = 0.422, 99.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=23 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0539361775037087;  // std dev = 0.358, 2,403.000 (wgt'ed) examples reached here.  /* #neg=1,452 #pos=951 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.07714966645271155;  // std dev = 0.451, 38.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=25 */
%   | | else return 0.12821423197164436;  // std dev = 0.398, 27.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=20 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.4853497821722752;  // std dev = 2.967, 40.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=26 */
%   | | | else return -0.15698606722532688;  // std dev = 0.312, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | | else return -0.028061046114803756;  // std dev = 0.335, 76.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordauthor(M, K) )
%   | | | then return -0.05937642174751628;  // std dev = 0.926, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.05336083570889991;  // std dev = 4.193, 96.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=24 */
%   | | else return -0.1910101126805451;  // std dev = 0.063, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.043889104615117684;  // std dev = 0.356, 2,403.000 (wgt'ed) examples reached here.  /* #neg=1,452 #pos=951 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.2603193967898588;  // std dev = 0.010, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.045750050165452125;  // std dev = 2.854, 36.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=21 */
%   | | | else return 0.0966434551024524;  // std dev = 1.945, 26.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=21 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( haswordtitle(K, I) )
%   | | then if ( author(L, J), title(L, K) )
%   | | | then return 0.14142269008930208;  // std dev = 1.019, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.11990063557486498;  // std dev = 1.991, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
%   | | else return -0.033483302333016884;  // std dev = 0.275, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return -0.016919187247676812;  // std dev = 0.330, 190.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=28 */
%   | | else return 0.042148982057332654;  // std dev = 0.426, 97.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=24 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.035642594965927865;  // std dev = 0.355, 2,403.000 (wgt'ed) examples reached here.  /* #neg=1,452 #pos=951 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.21339420265497147;  // std dev = 0.009, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.03219006205848047;  // std dev = 2.768, 36.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=23 */
%   | | | else return 0.08071262427242973;  // std dev = 2.065, 26.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=19 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, A) )
%   | | then return 0.2281342360381856;  // std dev = 1.192, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( haswordtitle(L, I) )
%   | | | then return 0.0978520884139733;  // std dev = 1.977, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
%   | | | else return -0.1215464413109146;  // std dev = 0.028, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return -0.014659926104983888;  // std dev = 0.330, 190.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=28 */
%   | | else return 0.03521495598828173;  // std dev = 0.426, 97.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=24 */


Results
   AUC ROC   = 0.84341
   AUC PR    = 0.657594
   CLL	      = -0.461076
   Precision = 0.705607 at threshold = 0.5
   Recall    = 0.820652
   F1        = 0.758794


Total learning time: 2814.5800969600677 seconds
Total inference time: 3.066 seconds
AUC ROC: 0.84341


Results scoring model
   AUC ROC   = 0.904448
   AUC PR    = 0.787585
   CLL	      = -0.420286
   Precision = 0.796741 at threshold = 0.5
   Recall    = 0.877243
   F1        = 0.835056


Total scoring time: 34.81 seconds
Refined model CLL: -0.420286


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.84341
   AUC PR    = 0.657594
   CLL	      = -0.461076
   Precision = 0.705607 at threshold = 0.5
   Recall    = 0.820652
   F1        = 0.758794


Total learning time: 5549.548424991608 seconds
Total inference time: 3.066 seconds
AUC ROC: 0.84341
Total revision time: 5549.548424991608
Best scored revision CLL: -0.420286


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 02:59:46
{'AUC ROC': 0.84341, 'AUC PR': 0.657594, 'CLL': -0.461076, 'Precision': [0.705607, 0.5], 'Recall': 0.820652, 'F1': 0.758794, 'Learning time': 5549.548424991608, 'Inference time': 3.066, 'parameter_0.4': {'AUC ROC': 0.827939, 'AUC PR': 0.651649, 'CLL': -0.462847, 'Precision': [0.705607, 0.5], 'Recall': 0.820652, 'F1': 0.758794, 'Learning time': 2666.23432803154, 'Inference time': 3.029}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.6565287730833058;  // std dev = 13.373, 1,111.000 (wgt'ed) examples reached here.  /* #neg=224 #pos=887 */
%   | | | else return -0.1196098330784198;  // std dev = 5.042, 1,169.000 (wgt'ed) examples reached here.  /* #neg=1,143 #pos=26 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.04419544672741935;  // std dev = 2.552, 43.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=8 */
%   | | | else return 0.233148935099511;  // std dev = 4.330, 80.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=30 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.572434649385226;  // std dev = 2.390, 28.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   | | | else return 0.22178529873587596;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else return 0.6658412427918196;  // std dev = 0.394, 26.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=21 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.2510060779566552;  // std dev = 0.488, 28.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=11 */
%   | else return 0.033824610775187905;  // std dev = 0.381, 296.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=52 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.5566962282367578;  // std dev = 13.373, 1,111.000 (wgt'ed) examples reached here.  /* #neg=224 #pos=887 */
%   | | | else return -0.10566384949320234;  // std dev = 5.042, 1,169.000 (wgt'ed) examples reached here.  /* #neg=1,143 #pos=26 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.03872994272834216;  // std dev = 2.552, 43.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=8 */
%   | | | else return 0.20233423921810748;  // std dev = 4.330, 80.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=30 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.48767788391726324;  // std dev = 2.390, 28.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   | | | else return 0.19258789115538322;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else return 0.5642978738811567;  // std dev = 0.394, 26.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=21 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.2176255182773883;  // std dev = 0.488, 28.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=11 */
%   | else return 0.029657073978195968;  // std dev = 0.381, 296.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=52 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.44100467698121343;  // std dev = 13.373, 1,111.000 (wgt'ed) examples reached here.  /* #neg=224 #pos=887 */
%   | | | else return -0.0943335491538715;  // std dev = 5.042, 1,169.000 (wgt'ed) examples reached here.  /* #neg=1,143 #pos=26 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.03379815547193543;  // std dev = 2.552, 43.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=8 */
%   | | | else return 0.171492819615289;  // std dev = 4.330, 80.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=30 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.6769712478135391;  // std dev = 1.49e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.2978640575073807;  // std dev = 2.876, 36.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=21 */
%   | | | else return 0.4464233817752431;  // std dev = 2.010, 26.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=21 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.18392403758779943;  // std dev = 0.488, 28.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=11 */
%   | else return 0.02591996230647257;  // std dev = 0.381, 296.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=52 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.1187011231190852;  // std dev = 0.371, 2,403.000 (wgt'ed) examples reached here.  /* #neg=1,452 #pos=951 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.31306064918191945;  // std dev = 2.362, 28.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=20 */
%   | | | else return 0.11159656291008052;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else return 0.33851255947034803;  // std dev = 0.394, 26.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=21 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then return 0.35904381045664147;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( haswordtitle(L, I) )
%   | | | then return 0.22963204575075913;  // std dev = 2.058, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
%   | | | else return -0.24095618954335848;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return -0.005878000918972585;  // std dev = 0.354, 197.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=29 */
%   | | else return 0.07923710957684858;  // std dev = 0.422, 99.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=23 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09820050108501868;  // std dev = 0.366, 2,403.000 (wgt'ed) examples reached here.  /* #neg=1,452 #pos=951 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.1882257771190393;  // std dev = 0.456, 38.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=25 */
%   | | else return 0.26158806787601535;  // std dev = 0.403, 27.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=20 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( title(I, H), venue(I, B) )
%   | | then if ( samebib(I, J), venue(J, A) )
%   | | | then return 0.4936697461155264;  // std dev = 3.002, 40.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=26 */
%   | | | else return -0.15764720760047768;  // std dev = 0.266, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | | else return -0.02244732959016191;  // std dev = 0.342, 76.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=12 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( title(M, L), venue(M, B) )
%   | | | then return 0.08471609094023297;  // std dev = 4.194, 95.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=24 */
%   | | | else return -0.020786826996410785;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else return -0.17565038716382744;  // std dev = 0.029, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08075622680079832;  // std dev = 0.362, 2,403.000 (wgt'ed) examples reached here.  /* #neg=1,452 #pos=951 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.14120631672683034;  // std dev = 0.461, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   | | else return 0.2035059206547582;  // std dev = 0.392, 26.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=21 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, A) )
%   | | then return -0.06750448461350189;  // std dev = 0.724, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( haswordtitle(J, G) )
%   | | | then return 0.1912980835486491;  // std dev = 2.052, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
%   | | | else return 0.08738424066735366;  // std dev = 1.008, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( haswordtitle(M, K) )
%   | | | then return 0.1712686114347378;  // std dev = 2.132, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
%   | | | else return -0.04754711317350315;  // std dev = 0.865, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | else return 0.0017090678005190524;  // std dev = 0.357, 263.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=43 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06611080400782775;  // std dev = 0.360, 2,403.000 (wgt'ed) examples reached here.  /* #neg=1,452 #pos=951 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.35346255685641154;  // std dev = 0.014, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.08692725066986841;  // std dev = 2.841, 36.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=21 */
%   | | | else return 0.15602062812555756;  // std dev = 1.999, 26.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=21 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( haswordtitle(K, I) )
%   | | then if ( author(L, J), title(L, K) )
%   | | | then return 0.16902129352556222;  // std dev = 1.044, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.15321351502650696;  // std dev = 2.025, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
%   | | else return -0.041705779633727166;  // std dev = 0.274, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return -0.023055175218792686;  // std dev = 0.329, 190.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=28 */
%   | | else return 0.06822997022493109;  // std dev = 0.426, 97.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=24 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.05481646777345264;  // std dev = 0.352, 2,280.000 (wgt'ed) examples reached here.  /* #neg=1,367 #pos=913 */
%   | | else return 0.03761860177187336;  // std dev = 0.455, 123.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=38 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.2774339380089543;  // std dev = 0.012, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.061095088075336305;  // std dev = 2.790, 36.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=23 */
%   | | | else return 0.12838815854010607;  // std dev = 2.064, 26.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=19 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then return 2.0013713134913315E-4;  // std dev = 0.345, 219.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=38 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then return -0.08743194842142157;  // std dev = 0.326, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( haswordvenue(A, N), haswordauthor(P, N) )
%   | | | then return 0.11784226115885828;  // std dev = 0.942, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.054773874744144684;  // std dev = 4.087, 92.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.07829228641380816;  // std dev = 0.307, 68.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=29 */
%   | else if ( haswordtitle(F, C) )
%   | | then return 0.04313273287155014;  // std dev = 0.357, 2,338.000 (wgt'ed) examples reached here.  /* #neg=1,413 #pos=925 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.043003927787513295;  // std dev = 2.842, 36.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=21 */
%   | | | else return 0.10482460032635169;  // std dev = 1.991, 26.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=21 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( haswordtitle(K, I) )
%   | | then if ( author(L, J), title(L, K) )
%   | | | then return 0.15041548019692735;  // std dev = 1.032, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.12865930353287422;  // std dev = 2.002, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
%   | | else return -0.03464099081358533;  // std dev = 0.274, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return -0.01992032437686887;  // std dev = 0.330, 190.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=28 */
%   | | else return 0.04885056497098393;  // std dev = 0.426, 97.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=24 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.06415547618408712;  // std dev = 0.304, 68.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=29 */
%   | else if ( haswordtitle(F, C) )
%   | | then return 0.035021896912875064;  // std dev = 0.356, 2,338.000 (wgt'ed) examples reached here.  /* #neg=1,413 #pos=925 */
%   | | else return 0.05403761982428686;  // std dev = 0.441, 62.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=42 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, A) )
%   | | then return -0.07303285257735823;  // std dev = 0.668, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else if ( haswordtitle(J, G) )
%   | | | then return 0.15560166032700384;  // std dev = 2.032, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
%   | | | else return 0.02450009143020108;  // std dev = 0.988, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | then if ( author(M, L), venue(M, A) )
%   | | | then return 0.26711283656919216;  // std dev = 1.018, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.031296429108975045;  // std dev = 1.996, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
%   | | else return -0.004095557616059768;  // std dev = 0.355, 263.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=43 */


Results
   AUC ROC   = 0.845231
   AUC PR    = 0.659695
   CLL	      = -0.459893
   Precision = 0.705607 at threshold = 0.5
   Recall    = 0.820652
   F1        = 0.758794


Total learning time: 2871.442530155182 seconds
Total inference time: 3.199 seconds
AUC ROC: 0.845231


Dataset: 3_imdb_cora, Fold: 1, Type: Scratch (RDN-B), Time: 03:47:41
{'AUC ROC': 0.845231, 'AUC PR': 0.659695, 'CLL': -0.459893, 'Precision': [0.705607, 0.5], 'Recall': 0.820652, 'F1': 0.758794, 'Learning time': 2871.442530155182, 'Inference time': 3.199}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.2551353158587074;  // std dev = 0.489, 3,451.000 (wgt'ed) examples reached here.  /* #neg=2,081 #pos=1,370 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.0803711573217346;  // std dev = 3.055, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | else return 0.2649285961164623;  // std dev = 5.336, 118.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=48 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.4581489350995113;  // std dev = 3.286, 45.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=27 */
%   | | | else return 0.19148226843284566;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.5456489350995116;  // std dev = 2.622, 32.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=22 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.07064893509951312;  // std dev = 0.409, 320.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=68 */
%   | else return 0.04308044194882675;  // std dev = 0.388, 146.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=27 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.22146787725786277;  // std dev = 0.489, 3,444.000 (wgt'ed) examples reached here.  /* #neg=2,077 #pos=1,367 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.07007243404841818;  // std dev = 3.363, 61.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=15 */
%   | | | else return 0.22952677081426315;  // std dev = 5.336, 118.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=48 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.3927941835770484;  // std dev = 3.286, 45.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=27 */
%   | | | else return 0.16653882456488167;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.46555214248586185;  // std dev = 2.622, 32.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=22 */
%   | | | else return 0.7194734122109542;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return 0.14794514895863572;  // std dev = 0.457, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | else return 0.043780922007018046;  // std dev = 0.395, 419.000 (wgt'ed) examples reached here.  /* #neg=338 #pos=81 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.18715757592520244;  // std dev = 0.489, 3,451.000 (wgt'ed) examples reached here.  /* #neg=2,081 #pos=1,370 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.03952225272579528;  // std dev = 3.055, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | else return 0.19354631777551037;  // std dev = 5.336, 118.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=48 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.6811432447182861;  // std dev = 0.144, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.2589629748299028;  // std dev = 3.628, 54.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=28 */
%   | | | else return 0.4114253433752717;  // std dev = 2.655, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.1937427032873632;  // std dev = 0.481, 33.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=12 */
%   | | else return -0.02663491644147508;  // std dev = 0.349, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else return 0.03812734609615424;  // std dev = 0.395, 419.000 (wgt'ed) examples reached here.  /* #neg=338 #pos=81 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.1547626283349185;  // std dev = 0.489, 3,444.000 (wgt'ed) examples reached here.  /* #neg=2,077 #pos=1,367 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.029648203511087674;  // std dev = 3.363, 61.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=15 */
%   | | | else return 0.15928113246618755;  // std dev = 5.336, 118.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=48 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.2684702177014837;  // std dev = 3.090, 41.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=25 */
%   | | | else return 0.11561418636281595;  // std dev = 1.918, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.2786660009503414;  // std dev = 2.615, 32.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=22 */
%   | | | else return 0.4469147309811424;  // std dev = 0.063, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.04764242803127309;  // std dev = 0.407, 320.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=68 */
%   | else return 0.02548156085744443;  // std dev = 0.389, 146.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=27 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.12529388413619658;  // std dev = 0.489, 3,451.000 (wgt'ed) examples reached here.  /* #neg=2,081 #pos=1,370 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.008708821160869733;  // std dev = 3.055, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | else return 0.12844095800603236;  // std dev = 5.336, 118.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=48 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.20601726549278154;  // std dev = 3.089, 41.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=25 */
%   | | | else return 0.09302591516358248;  // std dev = 1.918, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.21005357891183898;  // std dev = 2.615, 32.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=22 */
%   | | | else return 0.3408620616677594;  // std dev = 0.056, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.10209481818146195;  // std dev = 0.453, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | else return 0.027527073877376275;  // std dev = 0.395, 419.000 (wgt'ed) examples reached here.  /* #neg=338 #pos=81 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.10008855323583346;  // std dev = 0.489, 3,444.000 (wgt'ed) examples reached here.  /* #neg=2,077 #pos=1,367 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.05715980282855368;  // std dev = 6.037, 165.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=56 */
%   | | | else return 0.19514330923846668;  // std dev = 1.871, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.20638425750529565;  // std dev = 2.930, 43.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=29 */
%   | | | else return -0.10080645472989495;  // std dev = 1.828, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.16096350966557466;  // std dev = 2.683, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return 0.2689565945710303;  // std dev = 0.048, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( haswordvenue(A, N), haswordauthor(P, N) )
%   | then return 0.08554860774407573;  // std dev = 0.453, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | else return 0.023685156952311767;  // std dev = 0.395, 419.000 (wgt'ed) examples reached here.  /* #neg=338 #pos=81 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.07879367228494327;  // std dev = 0.489, 3,444.000 (wgt'ed) examples reached here.  /* #neg=2,077 #pos=1,367 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.00845068703126368;  // std dev = 3.363, 61.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=15 */
%   | | | else return 0.08604547070295994;  // std dev = 5.330, 118.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=48 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.3787047788883855;  // std dev = 0.277, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.08689159299410565;  // std dev = 3.493, 55.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=32 */
%   | | | else return 0.13935139584457967;  // std dev = 2.682, 41.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=28 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordauthor(M, K) )
%   | | then return 0.12517362916921632;  // std dev = 0.456, 36.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return 0.018955497766001028;  // std dev = 0.398, 284.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=57 */
%   | else return 0.013416494142943158;  // std dev = 0.390, 146.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=27 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.061609061778800996;  // std dev = 0.489, 3,451.000 (wgt'ed) examples reached here.  /* #neg=2,081 #pos=1,370 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.024478798708333274;  // std dev = 3.055, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | else return 0.06702630169935746;  // std dev = 5.330, 118.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=48 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.2966413045903907;  // std dev = 0.204, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.05943600678553435;  // std dev = 3.561, 54.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=28 */
%   | | | else return 0.11119639416872353;  // std dev = 2.586, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.12071312681300111;  // std dev = 0.478, 33.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=12 */
%   | | else return -0.06241156226231578;  // std dev = 0.350, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else return 0.016620746848306275;  // std dev = 0.395, 419.000 (wgt'ed) examples reached here.  /* #neg=338 #pos=81 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.04786268518668295;  // std dev = 0.489, 3,444.000 (wgt'ed) examples reached here.  /* #neg=2,077 #pos=1,367 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.018663513225680526;  // std dev = 3.363, 61.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=15 */
%   | | | else return 0.05184053522137989;  // std dev = 5.330, 118.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=48 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.24064322956497475;  // std dev = 0.174, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.040953157867220036;  // std dev = 3.488, 54.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | | else return 0.09228223338574025;  // std dev = 2.683, 41.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=28 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.09783585142709188;  // std dev = 0.478, 33.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=12 */
%   | | else return -0.05242125437042759;  // std dev = 0.350, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else return 0.014190486376819925;  // std dev = 0.395, 419.000 (wgt'ed) examples reached here.  /* #neg=338 #pos=81 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.037029935522452755;  // std dev = 0.489, 3,451.000 (wgt'ed) examples reached here.  /* #neg=2,081 #pos=1,370 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.010672021159060666;  // std dev = 5.856, 158.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=53 */
%   | | | else return 0.1044927618645044;  // std dev = 1.871, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.063355148753284;  // std dev = 3.014, 41.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=25 */
%   | | | else return -0.022566606890593404;  // std dev = 1.905, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | else return 0.07904449988018225;  // std dev = 0.395, 43.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=33 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then return 0.008166361161675907;  // std dev = 0.396, 321.000 (wgt'ed) examples reached here.  /* #neg=257 #pos=64 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then return 0.0409059663459131;  // std dev = 0.418, 138.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=31 */
%   | | else return -0.17637842674449722;  // std dev = 0.006, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */


Results
   AUC ROC   = 0.583015
   AUC PR    = 0.415353
   CLL	      = -0.627755
   Precision = 0.594595 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108642


Total learning time: 10056.12728881836 seconds
Total inference time: 3.218 seconds
AUC ROC: 0.583015


Results scoring model
   AUC ROC   = 0.562618
   AUC PR    = 0.44125
   CLL	      = -0.64947
   Precision = 0.739726 at threshold = 0.5
   Recall    = 0.033984
   F1        = 0.064982


Total scoring time: 39.907 seconds
Parameter learned model CLL: -0.64947


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [3.055, 42, 12], 'true,true,false,false': [5.336, 70, 48], 'true,false,true,true': [3.286, 18, 27], 'true,false,true,false': [1.633, 8, 4], 'true,false,false,true': [2.622, 10, 22], 'true,false,false,false': [0.0, 0, 11], 'false,true': [0.409, 252, 68], 'false,false': [0.388, 119, 27]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(A, M), haswordauthor(N, M)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [3.363, 46, 15], 'true,true,false,false': [5.336, 70, 48], 'true,false,true,true': [3.286, 18, 27], 'true,false,true,false': [1.633, 8, 4], 'true,false,false,true': [2.622, 10, 22], 'true,false,false,false': [4.21e-08, 0, 11], 'false,true': [0.457, 33, 14], 'false,false': [0.395, 338, 81]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,true': 'haswordtitle(M, K)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [3.055, 42, 12], 'true,true,false,false': [5.336, 70, 48], 'true,false,true': [0.144, 0, 5], 'true,false,false,true': [3.628, 26, 28], 'true,false,false,false': [2.655, 10, 31], 'false,true,true': [0.481, 21, 12], 'false,true,false': [0.349, 12, 2], 'false,false': [0.395, 338, 81]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'title(I, H), venue(I, B)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [3.363, 46, 15], 'true,true,false,false': [5.336, 70, 48], 'true,false,true,true': [3.09, 16, 25], 'true,false,true,false': [1.918, 10, 6], 'true,false,false,true': [2.615, 10, 22], 'true,false,false,false': [0.063, 0, 11], 'false,true': [0.407, 252, 68], 'false,false': [0.389, 119, 27]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'title(I, H), venue(I, B)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(A, L), haswordauthor(M, L)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [3.055, 42, 12], 'true,true,false,false': [5.336, 70, 48], 'true,false,true,true': [3.089, 16, 25], 'true,false,true,false': [1.918, 10, 6], 'true,false,false,true': [2.615, 10, 22], 'true,false,false,false': [0.056, 0, 11], 'false,true': [0.453, 33, 14], 'false,false': [0.395, 338, 81]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'true,false,true': 'haswordtitle(I, J), haswordauthor(K, J)', 'true,false,false': 'haswordvenue(A, L), haswordtitle(M, L)', 'false': 'haswordvenue(A, N), haswordauthor(P, N)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [6.037, 109, 56], 'true,true,false,false': [1.871, 7, 7], 'true,false,true,true': [2.93, 14, 29], 'true,false,true,false': [1.828, 9, 5], 'true,false,false,true': [2.683, 13, 19], 'true,false,false,false': [0.048, 0, 11], 'false,true': [0.453, 33, 14], 'false,false': [0.395, 338, 81]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,true': 'haswordauthor(M, K)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [3.363, 46, 15], 'true,true,false,false': [5.33, 70, 48], 'true,false,true': [0.277, 0, 4], 'true,false,false,true': [3.493, 23, 32], 'true,false,false,false': [2.682, 13, 28], 'false,true,true': [0.456, 25, 11], 'false,true,false': [0.398, 227, 57], 'false,false': [0.39, 119, 27]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,true': 'haswordtitle(M, K)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [3.055, 42, 12], 'true,true,false,false': [5.33, 70, 48], 'true,false,true': [0.204, 0, 5], 'true,false,false,true': [3.561, 26, 28], 'true,false,false,false': [2.586, 10, 31], 'false,true,true': [0.478, 21, 12], 'false,true,false': [0.35, 12, 2], 'false,false': [0.395, 338, 81]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,true': 'haswordtitle(M, K)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [3.363, 46, 15], 'true,true,false,false': [5.33, 70, 48], 'true,false,true': [0.174, 0, 5], 'true,false,false,true': [3.488, 23, 31], 'true,false,false,false': [2.683, 13, 28], 'false,true,true': [0.478, 21, 12], 'false,true,false': [0.35, 12, 2], 'false,false': [0.395, 338, 81]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'title(J, I), venue(J, B)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [5.856, 105, 53], 'true,true,false,false': [1.871, 7, 7], 'true,false,true,true': [3.014, 16, 25], 'true,false,true,false': [1.905, 10, 6], 'true,false,false': [0.395, 10, 33], 'false,true': [0.396, 257, 64], 'false,false,true': [0.418, 107, 31], 'false,false,false': [0.006, 7, 0]}]]
[{'': [0.24025619431700682, 0.1623026764169547], 'true': [0.23891202044406387, 0.23039999999999938], 'true,true': [0.23938819425089344, 0.22714981070849125], 'true,false': [0.24807633117882583, 0.178474851270959], 'true,false,true': [0.2400000000000014, 0.22222222222222207], 'true,true,false': [0.172839506172839, 0.24130996839988547], 'true,false,false': [0.21484375000000094, -1.6148698540002277e-16], 'false': [0.16734375000000073, 0.15073184462375783]}, {'': [0.23945011760554377, 0.16226385512186886], 'true': [0.23879645675312683, 0.22196449272892851], 'true,true': [0.23925279742184313, 0.22798031694481258], 'true,true,false': [0.18543402311206708, 0.2413099683998855], 'true,false': [0.24476559040939752, 0.17215822387724106], 'true,false,true': [0.24000000000000024, 0.2222222222222224], 'true,false,false': [0.21484375000000014, 1.6148698540002277e-16], 'false': [0.2087035697392497, 0.15596029490838864]}, {'': [0.23864730539902373, 0.16200975688837432], 'true': [0.23866837925191908, 0.21376947444623023], 'true,true': [0.23926983480163996, 0.224923135382525], 'true,true,false': [0.17283950617284002, 0.24130996839988506], 'true,false': [0.004121805661216627, 0.2184532013492284], 'true,false,false': [0.24376127810346998, 0.17190779364905204], 'false': [0.20865695495042388, 0.15596082929306648], 'false,true': [0.23089605275501482, 0.12213648517374388]}, {'': [0.2380702112544211, 0.16150913953677581], 'true': [0.23855052145341737, 0.2079991065034637], 'true,true': [0.23912285619695167, 0.22604361457665922], 'true,true,false': [0.1854340231120662, 0.2413099683998847], 'true,false': [0.23684065883999234, 0.16449848743839768], 'true,false,true': [0.23294671881741402, 0.2300125008674828], 'true,false,false': [0.21368110125267364, 0.0003556456123938532], 'false': [0.16596113465450807, 0.15141410319688445]}, {'': [0.23770328740445892, 0.16145799263155963], 'true': [0.23844173507020433, 0.20465809387518052], 'true,true': [0.2391599660641698, 0.22290116520440775], 'true,true,false': [0.17283950617283964, 0.24130996839988586], 'true,false': [0.23452466839474875, 0.16233674549228352], 'true,false,true': [0.23274731627539733, 0.22989581995115038], 'true,false,false': [0.2136663279188758, 0.0002806612562799722], 'false': [0.20530151086129622, 0.15597917693972393]}, {'': [0.23749442433179935, 0.1612787261592169], 'true': [0.23835697942421447, 0.20305730149242154], 'true,true': [0.2390261184673437, 0.22450085000964823], 'true,true,false': [0.22084816692683312, 0.24999999999999997], 'true,false': [0.22677164634226793, 0.1697272220392323], 'true,false,true': [0.19970328820464037, 0.23872168809392177], 'true,false,false': [0.2250158648365834, 0.00020845938063024876], 'false': [0.2050753122448147, 0.1559799889054088]}, {'': [0.2372656405965289, 0.16114541993616252], 'true': [0.23829687277388564, 0.1981453967990797], 'true,true': [0.23901476105810407, 0.22389275689424307], 'true,true,false': [0.1854340231120671, 0.24073094464465364], 'true,false': [0.019195464895211595, 0.20269840683180915], 'true,false,false': [0.22180111126345545, 0.17549614333773697], 'false': [0.1651665653978875, 0.15212192526331475], 'false,true': [0.2083540847422238, 0.15842283332793847]}, {'': [0.23715520822505132, 0.16087908505432857], 'true': [0.23823888382131012, 0.19689617107086238], 'true,true': [0.23906178522501667, 0.22121061867869726], 'true,true,false': [0.17283950617283933, 0.24071776138295473], 'true,false': [0.008336236937135177, 0.2045119952483049], 'true,false,false': [0.23483494873751792, 0.16305156847756802], 'false': [0.2039949884140564, 0.15579512118803848], 'false,true': [0.22857005412284087, 0.12252244126765774]}, {'': [0.23707636433403215, 0.16054945598816003], 'true': [0.23819175707185122, 0.19605208776434713], 'true,true': [0.23896207176197498, 0.2229886400850537], 'true,true,false': [0.18543402311206655, 0.2407085006223261], 'true,false': [0.006052075351138886, 0.2044761098084135], 'true,false,false': [0.22525081696290372, 0.17561669622065101], 'false': [0.20158429610712178, 0.15579397737082168], 'false,true': [0.22840221586549467, 0.12251855302423663]}, {'': [0.23702377413872028, 0.1603230654019846], 'true': [0.23815849770767503, 0.1955151503523439], 'true,true': [0.2390262523972024, 0.2204140585777704], 'true,true,false': [0.21707605063062257, 0.25000000000000006], 'true,false': [0.22460352292106062, 0.15605289090093236], 'true,false,true': [0.22162931748030398, 0.22691467047159583], 'false': [0.15666401199228838, 0.1680824327352741], 'false,false': [0.17432888917060146, 4.722885790497162e-06]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
1;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
3;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
5;true,false,false;haswordvenue(A, L), haswordtitle(M, L).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(A, K), haswordtitle(L, K).;true;true
9;false,false;haswordvenue(B, M), haswordtitle(N, M).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.2551353158587074;  // std dev = 0.489, 3,451.000 (wgt'ed) examples reached here.  /* #neg=2,081 #pos=1,370 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.0803711573217346;  // std dev = 3.055, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | else return 0.2649285961164623;  // std dev = 5.336, 118.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=48 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.4581489350995113;  // std dev = 3.286, 45.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=27 */
%   | | | else return 0.19148226843284566;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.5456489350995116;  // std dev = 2.622, 32.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=22 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return 0.15602127552504427;  // std dev = 0.457, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | else return 0.05146635753388009;  // std dev = 0.395, 419.000 (wgt'ed) examples reached here.  /* #neg=338 #pos=81 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.22146787725786277;  // std dev = 0.489, 3,444.000 (wgt'ed) examples reached here.  /* #neg=2,077 #pos=1,367 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.07007243404841818;  // std dev = 3.363, 61.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=15 */
%   | | | else return 0.22952677081426315;  // std dev = 5.336, 118.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=48 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.3927941835770484;  // std dev = 3.286, 45.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=27 */
%   | | | else return 0.16653882456488167;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.46555214248586185;  // std dev = 2.622, 32.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=22 */
%   | | | else return 0.7194734122109542;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return 0.1359479367489864;  // std dev = 0.457, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | else return 0.045085178396098664;  // std dev = 0.395, 419.000 (wgt'ed) examples reached here.  /* #neg=338 #pos=81 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.18715757592520244;  // std dev = 0.489, 3,451.000 (wgt'ed) examples reached here.  /* #neg=2,081 #pos=1,370 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.03952225272579528;  // std dev = 3.055, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | else return 0.19354631777551037;  // std dev = 5.336, 118.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=48 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.33068156725211795;  // std dev = 3.123, 41.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=25 */
%   | | | else return 0.16180204953445904;  // std dev = 1.920, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.37507337777171845;  // std dev = 2.622, 32.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=22 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.11664152673823952;  // std dev = 0.457, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | else return 0.0393020101023874;  // std dev = 0.395, 419.000 (wgt'ed) examples reached here.  /* #neg=338 #pos=81 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.1547626283349185;  // std dev = 0.489, 3,444.000 (wgt'ed) examples reached here.  /* #neg=2,077 #pos=1,367 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.029648203511087674;  // std dev = 3.363, 61.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=15 */
%   | | | else return 0.15928113246618755;  // std dev = 5.336, 118.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=48 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.25960504656304795;  // std dev = 3.123, 41.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=25 */
%   | | | else return 0.13367030648400136;  // std dev = 1.919, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.28948085723018985;  // std dev = 2.622, 32.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=22 */
%   | | | else return 0.4175135841583098;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.09868627856370865;  // std dev = 0.457, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | else return 0.03411125265146104;  // std dev = 0.395, 419.000 (wgt'ed) examples reached here.  /* #neg=338 #pos=81 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.12529388413619658;  // std dev = 0.489, 3,451.000 (wgt'ed) examples reached here.  /* #neg=2,081 #pos=1,370 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.008708821160869733;  // std dev = 3.055, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | else return 0.12844095800603236;  // std dev = 5.336, 118.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=48 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.5235922554940796;  // std dev = 0.232, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.15018446889034057;  // std dev = 3.603, 54.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=28 */
%   | | | else return 0.23582385470618952;  // std dev = 2.621, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, A) )
%   | | then return 0.3232819321104471;  // std dev = 0.500, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else return 0.023274876662191656;  // std dev = 0.393, 47.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=9 */
%   | else return 0.03054337888081129;  // std dev = 0.399, 411.000 (wgt'ed) examples reached here.  /* #neg=329 #pos=82 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.10008855323583346;  // std dev = 0.489, 3,444.000 (wgt'ed) examples reached here.  /* #neg=2,077 #pos=1,367 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.0022371033755865175;  // std dev = 3.363, 61.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=15 */
%   | | | else return 0.10192297025541659;  // std dev = 5.336, 118.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=48 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.39933776610547794;  // std dev = 0.208, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.1145604143350088;  // std dev = 3.556, 54.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | | else return 0.1804326904145377;  // std dev = 2.685, 41.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=28 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.1414991018954387;  // std dev = 0.479, 33.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=12 */
%   | | else return -0.08154137936984959;  // std dev = 0.352, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else return 0.024724732477819398;  // std dev = 0.394, 419.000 (wgt'ed) examples reached here.  /* #neg=338 #pos=81 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.07882460349517612;  // std dev = 0.489, 3,451.000 (wgt'ed) examples reached here.  /* #neg=2,081 #pos=1,370 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.01012962110002139;  // std dev = 3.055, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | else return 0.07990467014252585;  // std dev = 5.336, 118.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=48 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.35671568830869343;  // std dev = 0.315, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.07979567408853445;  // std dev = 3.581, 55.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=29 */
%   | | | else return 0.14949420215794268;  // std dev = 2.622, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.11610636409945614;  // std dev = 0.479, 33.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=12 */
%   | | else return -0.06768409670516363;  // std dev = 0.352, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | else return 0.021231362635310443;  // std dev = 0.394, 419.000 (wgt'ed) examples reached here.  /* #neg=338 #pos=81 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.06171825721151694;  // std dev = 0.489, 3,444.000 (wgt'ed) examples reached here.  /* #neg=2,077 #pos=1,367 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.013010410813113478;  // std dev = 3.363, 61.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=15 */
%   | | | else return 0.06208641754288464;  // std dev = 5.336, 118.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=48 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.14298652580367807;  // std dev = 2.907, 43.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=29 */
%   | | | else return -0.15306791277278498;  // std dev = 1.835, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0932170293028022;  // std dev = 2.667, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return 0.20277247791378566;  // std dev = 0.091, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.02869140404255511;  // std dev = 0.405, 320.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=68 */
%   | else return 0.005088656276866803;  // std dev = 0.390, 146.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=27 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.0478605629200198;  // std dev = 0.489, 3,451.000 (wgt'ed) examples reached here.  /* #neg=2,081 #pos=1,370 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.016638912717911;  // std dev = 5.855, 158.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=53 */
%   | | | else return 0.14115073667106204;  // std dev = 1.871, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.2624404636023001;  // std dev = 0.272, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.04414426186321149;  // std dev = 3.485, 55.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=32 */
%   | | | else return 0.09217485021479932;  // std dev = 2.678, 41.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=28 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.011754746512499095;  // std dev = 0.396, 321.000 (wgt'ed) examples reached here.  /* #neg=257 #pos=64 */
%   | else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | | then return 0.04310267755374648;  // std dev = 0.417, 138.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=31 */
%   | | else return -0.184228932598307;  // std dev = 0.029, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.03698725953790382;  // std dev = 0.489, 3,444.000 (wgt'ed) examples reached here.  /* #neg=2,077 #pos=1,367 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.019753310600277994;  // std dev = 3.363, 61.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=15 */
%   | | | else return 0.04062380563317968;  // std dev = 5.330, 118.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=48 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.06488817891995875;  // std dev = 3.021, 41.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=25 */
%   | | | else return -0.018119210669056893;  // std dev = 1.894, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | else return 0.0768766244844046;  // std dev = 0.395, 43.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=33 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( haswordtitle(L, J) )
%   | | then return 0.11135902498928092;  // std dev = 0.453, 36.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return -0.08575672484566821;  // std dev = 0.297, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | else return 0.011595525163014991;  // std dev = 0.398, 411.000 (wgt'ed) examples reached here.  /* #neg=329 #pos=82 */


Results
   AUC ROC   = 0.605032
   AUC PR    = 0.440022
   CLL	      = -0.627703
   Precision = 0.594595 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108642


Total learning time: 10059.49034690857 seconds
Total inference time: 3.325 seconds
AUC ROC: 0.605032


Results scoring model
   AUC ROC   = 0.562332
   AUC PR    = 0.440897
   CLL	      = -0.64933
   Precision = 0.739726 at threshold = 0.5
   Recall    = 0.033984
   F1        = 0.064982


Total scoring time: 37.637 seconds
Refined model CLL: -0.64933


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.605032
   AUC PR    = 0.440022
   CLL	      = -0.627703
   Precision = 0.594595 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108642


Total learning time: 20193.161635726927 seconds
Total inference time: 3.325 seconds
AUC ROC: 0.605032
Total revision time: 20193.161635726927
Best scored revision CLL: -0.64933


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 09:24:25
{'AUC ROC': 0.605032, 'AUC PR': 0.440022, 'CLL': -0.627703, 'Precision': [0.594595, 0.5], 'Recall': 0.059783, 'F1': 0.108642, 'Learning time': 20193.161635726927, 'Inference time': 3.325, 'parameter_0.6': {'AUC ROC': 0.583015, 'AUC PR': 0.415353, 'CLL': -0.627755, 'Precision': [0.594595, 0.5], 'Recall': 0.059783, 'F1': 0.108642, 'Learning time': 10056.12728881836, 'Inference time': 3.218}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.2551353158587074;  // std dev = 0.489, 3,451.000 (wgt'ed) examples reached here.  /* #neg=2,081 #pos=1,370 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.19359197307419687;  // std dev = 5.935, 158.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=53 */
%   | | | else return 0.35814893509951234;  // std dev = 1.871, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.4581489350995113;  // std dev = 3.286, 45.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=27 */
%   | | | else return 0.19148226843284566;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.5456489350995116;  // std dev = 2.622, 32.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=22 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( haswordvenue(A, N), haswordauthor(P, N) )
%   | then return 0.15602127552504427;  // std dev = 0.457, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | else return 0.05146635753388009;  // std dev = 0.395, 419.000 (wgt'ed) examples reached here.  /* #neg=338 #pos=81 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.2212300368610477;  // std dev = 0.489, 3,444.000 (wgt'ed) examples reached here.  /* #neg=2,077 #pos=1,367 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.07007243404841818;  // std dev = 3.363, 61.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=15 */
%   | | | else return 0.23682401137828404;  // std dev = 5.331, 118.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=48 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.3927941835770484;  // std dev = 3.286, 45.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=27 */
%   | | | else return 0.16653882456488167;  // std dev = 1.633, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.46555214248586185;  // std dev = 2.622, 32.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=22 */
%   | | | else return 0.7194734122109542;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return 0.1359479367489864;  // std dev = 0.457, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | else return 0.045085178396098664;  // std dev = 0.395, 419.000 (wgt'ed) examples reached here.  /* #neg=338 #pos=81 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1871963678822079;  // std dev = 0.489, 3,451.000 (wgt'ed) examples reached here.  /* #neg=2,081 #pos=1,370 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.022043543030274153;  // std dev = 3.055, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | else return 0.20078301246430577;  // std dev = 5.330, 118.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=48 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.33068156725211795;  // std dev = 3.123, 41.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=25 */
%   | | | else return 0.16180204953445904;  // std dev = 1.920, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.37507337777171845;  // std dev = 2.622, 32.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=22 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.11664152673823952;  // std dev = 0.457, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | else return 0.0393020101023874;  // std dev = 0.395, 419.000 (wgt'ed) examples reached here.  /* #neg=338 #pos=81 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.15456260331609964;  // std dev = 0.489, 3,444.000 (wgt'ed) examples reached here.  /* #neg=2,077 #pos=1,367 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.029641628671880194;  // std dev = 3.363, 61.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=15 */
%   | | | else return 0.16602564272046025;  // std dev = 5.330, 118.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=48 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.25960504656304795;  // std dev = 3.123, 41.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=25 */
%   | | | else return 0.13367030648400136;  // std dev = 1.919, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.28948085723018985;  // std dev = 2.622, 32.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=22 */
%   | | | else return 0.4175135841583098;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.04867115519546854;  // std dev = 0.407, 320.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=68 */
%   | else return 0.02298698829387808;  // std dev = 0.390, 146.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=27 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1253715119748534;  // std dev = 0.489, 3,451.000 (wgt'ed) examples reached here.  /* #neg=2,081 #pos=1,370 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.007731622072827542;  // std dev = 3.055, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | else return 0.13440731652386864;  // std dev = 5.329, 118.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=48 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.5235922554940796;  // std dev = 0.232, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.15018446889034057;  // std dev = 3.603, 54.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=28 */
%   | | | else return 0.23582385470618952;  // std dev = 2.621, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, A) )
%   | | then return 0.3251827007458487;  // std dev = 0.501, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else return 0.023302691424590884;  // std dev = 0.393, 47.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=9 */
%   | else return 0.030680152500850055;  // std dev = 0.399, 411.000 (wgt'ed) examples reached here.  /* #neg=329 #pos=82 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.09994138917113933;  // std dev = 0.489, 3,444.000 (wgt'ed) examples reached here.  /* #neg=2,077 #pos=1,367 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.0022168592446081344;  // std dev = 3.363, 61.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=15 */
%   | | | else return 0.10698877643047554;  // std dev = 5.329, 118.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=48 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.20785441593985668;  // std dev = 2.931, 43.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=29 */
%   | | | else return -0.10230238144809346;  // std dev = 1.827, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.16063264257658455;  // std dev = 2.681, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return 0.2668127640020622;  // std dev = 0.051, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return 0.08446617169330495;  // std dev = 0.456, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | else return 0.023823991726295027;  // std dev = 0.394, 419.000 (wgt'ed) examples reached here.  /* #neg=338 #pos=81 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.07892438603167805;  // std dev = 0.489, 3,451.000 (wgt'ed) examples reached here.  /* #neg=2,081 #pos=1,370 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.0244644820994465;  // std dev = 3.055, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | else return 0.08407567133184927;  // std dev = 5.329, 118.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=48 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.1464554427107165;  // std dev = 2.907, 41.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=27 */
%   | | | else return -0.016476558399548445;  // std dev = 1.937, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.12127136793577374;  // std dev = 2.679, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return 0.21799779888490559;  // std dev = 0.044, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.06995564242046087;  // std dev = 0.456, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | else return 0.020444704738256776;  // std dev = 0.394, 419.000 (wgt'ed) examples reached here.  /* #neg=338 #pos=81 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.06161717831212984;  // std dev = 0.489, 3,444.000 (wgt'ed) examples reached here.  /* #neg=2,077 #pos=1,367 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.013046750707890173;  // std dev = 3.363, 61.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=15 */
%   | | | else return 0.06544500460259449;  // std dev = 5.329, 118.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=48 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.12593422666441195;  // std dev = 2.936, 43.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=29 */
%   | | | else return -0.07307026125687267;  // std dev = 1.827, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.0913119986534606;  // std dev = 2.677, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return 0.1831478551466625;  // std dev = 0.038, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return 0.05742182444756078;  // std dev = 0.456, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | else return 0.01750245349755139;  // std dev = 0.394, 419.000 (wgt'ed) examples reached here.  /* #neg=338 #pos=81 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.04796516337024182;  // std dev = 0.489, 3,451.000 (wgt'ed) examples reached here.  /* #neg=2,081 #pos=1,370 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.0314334410138203;  // std dev = 3.055, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | | | else return 0.05059227864670126;  // std dev = 5.328, 118.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=48 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.3101651286238809;  // std dev = 0.219, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.04303689832680361;  // std dev = 3.453, 54.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=31 */
%   | | | else return 0.08382855515068044;  // std dev = 2.674, 41.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=28 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.1123971947056669;  // std dev = 0.457, 36.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return -0.0839838431055759;  // std dev = 0.297, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | else return 0.014631363562481117;  // std dev = 0.399, 411.000 (wgt'ed) examples reached here.  /* #neg=329 #pos=82 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.03702310925557127;  // std dev = 0.489, 3,444.000 (wgt'ed) examples reached here.  /* #neg=2,077 #pos=1,367 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.019803575427984395;  // std dev = 3.363, 61.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=15 */
%   | | | else return 0.03891598321942862;  // std dev = 5.328, 118.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=48 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.0827578207549781;  // std dev = 2.922, 43.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=29 */
%   | | | else return -0.06574716260651789;  // std dev = 1.827, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.04659793810090625;  // std dev = 2.671, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   | | | else return 0.14460780224707806;  // std dev = 0.052, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.03710884478328269;  // std dev = 0.416, 55.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=13 */
%   | else return 0.012422984314729872;  // std dev = 0.399, 411.000 (wgt'ed) examples reached here.  /* #neg=329 #pos=82 */


Results
   AUC ROC   = 0.60473
   AUC PR    = 0.438914
   CLL	      = -0.629252
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total learning time: 10144.683073043823 seconds
Total inference time: 3.284 seconds
AUC ROC: 0.60473


Dataset: 3_imdb_cora, Fold: 1, Type: Scratch (RDN-B), Time: 12:13:34
{'AUC ROC': 0.60473, 'AUC PR': 0.438914, 'CLL': -0.629252, 'Precision': [0.578947, 0.5], 'Recall': 0.059783, 'F1': 0.108374, 'Learning time': 10144.683073043823, 'Inference time': 3.284}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.2567564198688718;  // std dev = 0.490, 4,596.000 (wgt'ed) examples reached here.  /* #neg=2,764 #pos=1,832 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.18672036367094227;  // std dev = 6.807, 210.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=69 */
%   | | | else return 0.47719655414713136;  // std dev = 2.225, 21.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.4483128695257407;  // std dev = 3.841, 61.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=36 */
%   | | | else return 0.1914822684328457;  // std dev = 1.826, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.4945125714631477;  // std dev = 3.191, 44.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=28 */
%   | | | else return 0.7470378239884012;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   else if ( haswordvenue(A, N), haswordauthor(P, N) )
%   | then return 0.10814893509951237;  // std dev = 0.433, 68.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=17 */
%   | else return 0.04440571629300114;  // std dev = 0.389, 553.000 (wgt'ed) examples reached here.  /* #neg=450 #pos=103 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.22254323648140897;  // std dev = 0.490, 4,596.000 (wgt'ed) examples reached here.  /* #neg=2,764 #pos=1,832 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.05008243925230048;  // std dev = 3.541, 74.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=16 */
%   | | | else return 0.2483338156445549;  // std dev = 6.158, 157.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=66 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.38456925093881017;  // std dev = 3.841, 61.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=36 */
%   | | | else return 0.1665388245648817;  // std dev = 1.826, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.42312069605298924;  // std dev = 3.191, 44.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=28 */
%   | | | else return 0.6302322013528497;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return 0.09446743783575523;  // std dev = 0.433, 68.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=17 */
%   | else return 0.03891379745035965;  // std dev = 0.389, 553.000 (wgt'ed) examples reached here.  /* #neg=450 #pos=103 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.18833394624724328;  // std dev = 0.489, 4,588.000 (wgt'ed) examples reached here.  /* #neg=2,760 #pos=1,828 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.033200640881268034;  // std dev = 3.889, 82.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=20 */
%   | | | else return 0.21010729274971648;  // std dev = 6.154, 157.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=66 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.580185557920151;  // std dev = 0.326, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.2634635839559334;  // std dev = 4.163, 71.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=37 */
%   | | | else return 0.3724989728806837;  // std dev = 3.461, 59.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=41 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.1377748421884532;  // std dev = 0.461, 49.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=15 */
%   | | else return -0.06308444889640141;  // std dev = 0.307, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | else return 0.03395754891866211;  // std dev = 0.389, 553.000 (wgt'ed) examples reached here.  /* #neg=450 #pos=103 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.15537255207036657;  // std dev = 0.489, 4,596.000 (wgt'ed) examples reached here.  /* #neg=2,764 #pos=1,832 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.014380964865934686;  // std dev = 3.541, 74.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=16 */
%   | | | else return 0.17317531187559945;  // std dev = 6.151, 157.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=66 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.44854856314526004;  // std dev = 0.325, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.2021441218157149;  // std dev = 4.170, 72.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=39 */
%   | | | else return 0.2988568969473803;  // std dev = 3.425, 58.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=39 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.1510629554433202;  // std dev = 0.460, 42.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=13 */
%   | | else return -0.06603885188345794;  // std dev = 0.295, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | else return 0.028844922034002816;  // std dev = 0.390, 558.000 (wgt'ed) examples reached here.  /* #neg=453 #pos=105 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.12606018459366355;  // std dev = 0.489, 4,588.000 (wgt'ed) examples reached here.  /* #neg=2,760 #pos=1,828 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 1.336825806423971E-4;  // std dev = 3.889, 82.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=20 */
%   | | | else return 0.13963332862355501;  // std dev = 6.149, 157.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=66 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.1952115078001058;  // std dev = 3.596, 55.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=33 */
%   | | | else return 0.07259539254082255;  // std dev = 2.213, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.20756333946620123;  // std dev = 3.169, 44.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=28 */
%   | | | else return 0.32231782544125953;  // std dev = 1.329, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.06747805798336792;  // std dev = 0.422, 63.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=15 */
%   | else return 0.024945479993079174;  // std dev = 0.390, 558.000 (wgt'ed) examples reached here.  /* #neg=453 #pos=105 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.10038443579891324;  // std dev = 0.489, 4,588.000 (wgt'ed) examples reached here.  /* #neg=2,760 #pos=1,828 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.05531343793077677;  // std dev = 6.919, 218.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=73 */
%   | | | else return 0.2535436044473917;  // std dev = 2.225, 21.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.3247803336248571;  // std dev = 0.835, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.11208318431640461;  // std dev = 4.136, 72.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=38 */
%   | | | else return 0.17667598275855464;  // std dev = 3.442, 60.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=42 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then if ( haswordtitle(N, L) )
%   | | then return 0.10861023938932585;  // std dev = 0.459, 49.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=15 */
%   | | else return -0.06560776330076494;  // std dev = 0.308, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | else return 0.0209137691035437;  // std dev = 0.389, 553.000 (wgt'ed) examples reached here.  /* #neg=450 #pos=103 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.07909350446884031;  // std dev = 0.489, 4,596.000 (wgt'ed) examples reached here.  /* #neg=2,764 #pos=1,832 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.027200517746741742;  // std dev = 3.541, 74.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=16 */
%   | | | else return 0.09237065012200205;  // std dev = 6.127, 157.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=66 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.24035843593648504;  // std dev = 0.320, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.07498838112206413;  // std dev = 4.157, 72.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=39 */
%   | | | else return 0.14376183058436287;  // std dev = 3.386, 58.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=39 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( title(M, L), venue(M, A) )
%   | | then return 0.034665623215847444;  // std dev = 0.403, 289.000 (wgt'ed) examples reached here.  /* #neg=229 #pos=60 */
%   | | else return 0.004621756345289448;  // std dev = 0.381, 134.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=24 */
%   | else return 0.013625248162736758;  // std dev = 0.386, 198.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=36 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C), haswordtitle(E, C) )
%   | then return 0.4135303528550898;  // std dev = 0.432, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | else if ( haswordtitle(F, C) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.06103863116636447;  // std dev = 33.091, 4,580.000 (wgt'ed) examples reached here.  /* #neg=2,759 #pos=1,821 */
%   | | | else return 0.03625039296274049;  // std dev = 7.218, 235.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=84 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.06312077096744433;  // std dev = 4.219, 76.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=41 */
%   | | | else return 0.11517880174002189;  // std dev = 3.442, 62.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=44 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then if ( haswordtitle(L, J) )
%   | | then if ( author(M, K), title(M, L) )
%   | | | then return 0.11324932934492538;  // std dev = 1.136, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.0825593106065157;  // std dev = 2.999, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | | else return -0.06019620402496518;  // std dev = 0.308, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | else return 0.015072327251532404;  // std dev = 0.389, 553.000 (wgt'ed) examples reached here.  /* #neg=450 #pos=103 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.047969696964726916;  // std dev = 0.489, 4,588.000 (wgt'ed) examples reached here.  /* #neg=2,760 #pos=1,828 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.03270831958155751;  // std dev = 3.889, 82.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=20 */
%   | | | else return 0.0613505476074754;  // std dev = 6.123, 157.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=66 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.1992808321717794;  // std dev = 0.828, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.035243386203917766;  // std dev = 4.168, 74.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=41 */
%   | | | else return 0.09165369964774626;  // std dev = 3.384, 58.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=39 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.0711562900626947;  // std dev = 0.458, 49.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=15 */
%   | | else return -0.05205422406818252;  // std dev = 0.308, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | else return 0.012923858641862537;  // std dev = 0.389, 553.000 (wgt'ed) examples reached here.  /* #neg=450 #pos=103 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.037135548043386;  // std dev = 0.489, 4,596.000 (wgt'ed) examples reached here.  /* #neg=2,764 #pos=1,832 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.0425809211488751;  // std dev = 3.541, 74.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=16 */
%   | | | else return 0.04721988208899121;  // std dev = 6.123, 157.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=66 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.05169004327853951;  // std dev = 3.574, 55.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=33 */
%   | | | else return -0.028063707015026442;  // std dev = 2.207, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.05372453301895803;  // std dev = 3.161, 44.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=28 */
%   | | | else return 0.13289773410744996;  // std dev = 1.328, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.0465474200961803;  // std dev = 0.420, 63.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=15 */
%   | else return 0.009272985297100664;  // std dev = 0.390, 558.000 (wgt'ed) examples reached here.  /* #neg=453 #pos=105 */


Results
   AUC ROC   = 0.583044
   AUC PR    = 0.415358
   CLL	      = -0.624541
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total learning time: 11815.686544179916 seconds
Total inference time: 3.249 seconds
AUC ROC: 0.583044


Results scoring model
   AUC ROC   = 0.566662
   AUC PR    = 0.44215
   CLL	      = -0.64909
   Precision = 0.650407 at threshold = 0.5
   Recall    = 0.037754
   F1        = 0.071365


Total scoring time: 51.516 seconds
Parameter learned model CLL: -0.64909


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'haswordtitle(I, J), haswordauthor(K, J)', 'true,false,false': 'haswordvenue(B, L), haswordtitle(M, L)', 'false': 'haswordvenue(A, N), haswordauthor(P, N)'}, {'true,true,true': [0.49, 2, 1], 'true,true,false,true': [6.807, 141, 69], 'true,true,false,false': [2.225, 8, 13], 'true,false,true,true': [3.841, 25, 36], 'true,false,true,false': [1.826, 10, 5], 'true,false,false,true': [3.191, 16, 28], 'true,false,false,false': [1.333, 2, 16], 'false,true': [0.433, 51, 17], 'false,false': [0.389, 450, 103]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(A, M), haswordauthor(N, M)'}, {'true,true,true': [0.49, 2, 1], 'true,true,false,true': [3.541, 58, 16], 'true,true,false,false': [6.158, 91, 66], 'true,false,true,true': [3.841, 25, 36], 'true,false,true,false': [1.826, 10, 5], 'true,false,false,true': [3.191, 16, 28], 'true,false,false,false': [1.333, 2, 16], 'false,true': [0.433, 51, 17], 'false,false': [0.389, 450, 103]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,true': 'haswordtitle(M, K)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [3.889, 62, 20], 'true,true,false,false': [6.154, 91, 66], 'true,false,true': [0.326, 1, 7], 'true,false,false,true': [4.163, 34, 37], 'true,false,false,false': [3.461, 18, 41], 'false,true,true': [0.461, 34, 15], 'false,true,false': [0.307, 17, 2], 'false,false': [0.389, 450, 103]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false,true': 'haswordtitle(M, K)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [3.541, 58, 16], 'true,true,false,false': [6.151, 91, 66], 'true,false,true': [0.325, 1, 7], 'true,false,false,true': [4.17, 33, 39], 'true,false,false,false': [3.425, 19, 39], 'false,true,true': [0.46, 29, 13], 'false,true,false': [0.295, 19, 2], 'false,false': [0.39, 453, 105]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'title(I, H), venue(I, B)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [3.889, 62, 20], 'true,true,false,false': [6.149, 91, 66], 'true,false,true,true': [3.596, 22, 33], 'true,false,true,false': [2.213, 13, 8], 'true,false,false,true': [3.169, 16, 28], 'true,false,false,false': [1.329, 2, 16], 'false,true': [0.422, 48, 15], 'false,false': [0.39, 453, 105]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(A, L), haswordauthor(M, L)', 'false,true': 'haswordtitle(N, L)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [6.919, 145, 73], 'true,true,false,false': [2.225, 8, 13], 'true,false,true': [0.835, 1, 5], 'true,false,false,true': [4.136, 34, 38], 'true,false,false,false': [3.442, 18, 42], 'false,true,true': [0.459, 34, 15], 'false,true,false': [0.308, 17, 2], 'false,false': [0.389, 450, 103]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,true': 'title(M, L), venue(M, A)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [3.541, 58, 16], 'true,true,false,false': [6.127, 91, 66], 'true,false,true': [0.32, 1, 7], 'true,false,false,true': [4.157, 33, 39], 'true,false,false,false': [3.386, 19, 39], 'false,true,true': [0.403, 229, 60], 'false,true,false': [0.381, 110, 24], 'false,false': [0.386, 162, 36]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordauthor(D, C), haswordtitle(E, C)', 'true,false': 'haswordtitle(F, C)', 'true,false,true': 'title(G, F), venue(G, A)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(A, J), haswordauthor(K, J)', 'false,true': 'haswordtitle(L, J)', 'false,true,true': 'author(M, K), title(M, L)'}, {'true,true': [0.432, 3, 9], 'true,false,true,true': [33.091, 2, 1], 'true,false,true,false': [7.218, 151, 84], 'true,false,false,true': [4.219, 35, 41], 'true,false,false,false': [3.442, 18, 44], 'false,true,true,true': [1.136, 4, 2], 'false,true,true,false': [2.999, 30, 13], 'false,true,false': [0.308, 17, 2], 'false,false': [0.389, 450, 103]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,true': 'haswordtitle(M, K)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [3.889, 62, 20], 'true,true,false,false': [6.123, 91, 66], 'true,false,true': [0.828, 1, 5], 'true,false,false,true': [4.168, 33, 41], 'true,false,false,false': [3.384, 19, 39], 'false,true,true': [0.458, 34, 15], 'false,true,false': [0.308, 17, 2], 'false,false': [0.389, 450, 103]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'title(I, H), venue(I, B)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true': [0.489, 2, 1], 'true,true,false,true': [3.541, 58, 16], 'true,true,false,false': [6.123, 91, 66], 'true,false,true,true': [3.574, 22, 33], 'true,false,true,false': [2.207, 13, 8], 'true,false,false,true': [3.161, 16, 28], 'true,false,false,false': [1.328, 2, 16], 'false,true': [0.42, 48, 15], 'false,false': [0.39, 453, 105]}]]
[{'': [0.24051681001648537, 0.1558962869611906], 'true': [0.23929180213376314, 0.2365574459147258], 'true,true': [0.2397195578551524, 0.22896872247521657], 'true,false': [0.24844182825484848, 0.20603537981269557], 'true,false,true': [0.24187046492878436, 0.22222222222222202], 'true,true,false': [0.22061224489795933, 0.23582766439909256], 'true,false,false': [0.2314049586776874, 0.09876543209876518], 'false': [0.18749999999999947, 0.15156519265293153]}, {'': [0.2398632524610348, 0.15580102020025274], 'true': [0.23917602671122531, 0.23081898409474494], 'true,true': [0.2397195578552361, 0.2270072716932981], 'true,false': [0.24552309693349347, 0.20173463282830062], 'true,false,true': [0.24187046492878228, 0.22222222222222238], 'true,true,false': [0.1694667640613581, 0.2415375090140433], 'true,false,false': [0.231404958677685, 0.09876543209876518], 'false': [0.18749999999999986, 0.1515651926529257]}, {'': [0.23918851728487314, 0.1557218994219431], 'true': [0.23902780098671886, 0.22519712849782264], 'true,true': [0.23948550685712305, 0.22880141803061563], 'true,true,false': [0.18441403926234368, 0.24124710774944233], 'true,false': [0.10604695867436703, 0.22838942088761624], 'true,false,false': [0.24405298471792927, 0.20304697947473047], 'false': [0.18750000000000047, 0.15156519265293528], 'false,true': [0.21241149521032954, 0.09418282548476449]}, {'': [0.23867414898975173, 0.15541914958895436], 'true': [0.23886554318778697, 0.22160808677446447], 'true,true': [0.23958123504745996, 0.22358500012260998], 'true,true,false': [0.16946676406135838, 0.24101521954460953], 'true,false': [0.10577038804513286, 0.2263416118325226], 'true,false,false': [0.2415663484777047, 0.20226161581032776], 'false': [0.18072961513708125, 0.15230940491945363], 'false,true': [0.21180503316724847, 0.08715664924704455]}, {'': [0.23833970459578233, 0.1550642056754416], 'true': [0.2387401140500742, 0.21919463895836488], 'true,true': [0.23935244928693425, 0.22586782822745718], 'true,true,false': [0.18441403926234384, 0.24084214715174568], 'true,false': [0.23759072265379572, 0.19315964238923655], 'true,false,true': [0.23512466137303548, 0.2331690710970921], 'true,false,false': [0.22822679312740404, 0.09809448816125377], 'false': [0.17790193281960834, 0.15230222882333577]}, {'': [0.23809523800015248, 0.15499891101616226], 'true': [0.23862056161769213, 0.2172508253093732], 'true,true': [0.23933621468128646, 0.22415557705977862], 'true,true,false': [0.2195784854510306, 0.2358276643990928], 'true,false': [0.11612380587318573, 0.2203861003049216], 'true,false,false': [0.23762623205861721, 0.197422180594711], 'false': [0.18442262770003115, 0.1512141010692184], 'false,true': [0.21059082362573886, 0.09506499664279346]}, {'': [0.23794094488565054, 0.15474371631679157], 'true': [0.23852494303351526, 0.216282677024467], 'true,true': [0.23942973235747048, 0.21992678262221896], 'true,true,false': [0.16946676406135924, 0.23913040966532273], 'true,false': [0.10213308791431455, 0.222255646396325], 'true,false,false': [0.23998829668758517, 0.19762312667434467], 'false': [0.15738731657125915, 0.14900558189522822], 'false,true': [0.1627500817644239, 0.14520465967144888]}, {'': [0.23782955466791703, 0.1546853272677576], 'true': [0.18665513383298482, 0.23765244031713667], 'true,false': [0.23826709090054854, 0.2155144724010887], 'true,false,true': [0.2390874475232682, 0.2216943962653419], 'true,false,false': [0.2342034395016077, 0.19111293094687204], 'false': [0.18210940906965037, 0.1512125270318505], 'false,true': [0.20996308176753276, 0.09480796293804138], 'false,true,true': [0.21524105702103105, 0.20911128819607058]}, {'': [0.23767016932389823, 0.15449670753345643], 'true': [0.2382976646995786, 0.2153686655771734], 'true,true': [0.2391218238928473, 0.22213738856949386], 'true,true,false': [0.18441403926234343, 0.23880463303674326], 'true,false': [0.11422983516252579, 0.21912280393404113], 'true,false,false': [0.23474318287820542, 0.1974094372374539], 'false': [0.18072495704142413, 0.15120947726841438], 'false,true': [0.20980833053774212, 0.09478133942729762]}, {'': [0.23760199274402447, 0.15436440931695686], 'true': [0.23824587019263604, 0.2148743724513287], 'true,true': [0.23923047563486438, 0.2183237070016301], 'true,true,false': [0.1694667640613581, 0.2387684884796435], 'true,false': [0.23343044080879807, 0.19090869605611402], 'true,false,true': [0.23221724191618923, 0.23200475677302376], 'true,false,false': [0.22707936237290935, 0.09804297279219641], 'false': [0.17628451476907464, 0.15174860675317578]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, B).;true;true
0;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;true;true
0;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
0;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;true;true
0;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;true;true
0;false;haswordvenue(A, N), haswordauthor(P, N).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;true;true
1;true,true,false;title(F, D), venue(F, A).;true;true
1;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;true;true
1;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
1;false;haswordvenue(A, M), haswordauthor(N, M).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;true;true
2;true,true,false;title(F, D), venue(F, B).;true;true
2;true,false;haswordvenue(B, G), haswordauthor(H, G).;true;true
2;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
2;false;haswordvenue(A, K), haswordauthor(L, K).;true;true
2;false,true;haswordtitle(M, K).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;true;true
3;true,true,false;title(F, D), venue(F, A).;true;true
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;true;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
3;false;haswordvenue(B, K), haswordauthor(L, K).;true;true
3;false,true;haswordtitle(M, K).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;true;true
4;true,true,false;title(F, D), venue(F, B).;true;true
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, B).;true;true
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;true;true
4;false;haswordvenue(B, L), haswordauthor(M, L).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;true;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;true;true
5;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
5;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;true;true
5;false;haswordvenue(A, L), haswordauthor(M, L).;true;true
5;false,true;haswordtitle(N, L).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;true;true
6;true,true,false;title(F, D), venue(F, A).;true;true
6;true,false;haswordvenue(B, G), haswordauthor(H, G).;true;true
6;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
6;false;haswordvenue(B, K), haswordtitle(L, K).;true;true
6;false,true;title(M, L), venue(M, A).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordauthor(D, C), haswordtitle(E, C).;true;true
7;true,false;haswordtitle(F, C).;true;true
7;true,false,true;title(G, F), venue(G, A).;true;true
7;true,false,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;false;haswordvenue(A, J), haswordauthor(K, J).;true;true
7;false,true;haswordtitle(L, J).;true;true
7;false,true,true;author(M, K), title(M, L).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;true;true
8;true,true,false;title(F, D), venue(F, B).;true;true
8;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;true
8;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
8;false;haswordvenue(A, K), haswordauthor(L, K).;true;true
8;false,true;haswordtitle(M, K).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;true;true
9;true,true,false;title(F, D), venue(F, A).;true;true
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, B).;true;true
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;true;true
9;false;haswordvenue(B, L), haswordauthor(M, L).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.2567564198688718;  // std dev = 0.490, 4,596.000 (wgt'ed) examples reached here.  /* #neg=2,764 #pos=1,832 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.07436515131572859;  // std dev = 3.541, 74.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=16 */
%   | | | else return 0.27853110070460907;  // std dev = 6.185, 157.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=66 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.4483128695257407;  // std dev = 3.841, 61.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=36 */
%   | | | else return 0.1914822684328457;  // std dev = 1.826, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.4945125714631477;  // std dev = 3.191, 44.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=28 */
%   | | | else return 0.7470378239884012;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.09624417319475047;  // std dev = 0.426, 63.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=15 */
%   | else return 0.046320978110263665;  // std dev = 0.391, 558.000 (wgt'ed) examples reached here.  /* #neg=453 #pos=105 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.22276833507523222;  // std dev = 0.489, 4,588.000 (wgt'ed) examples reached here.  /* #neg=2,760 #pos=1,828 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.0678381907364559;  // std dev = 3.889, 82.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=20 */
%   | | | else return 0.24113684724993054;  // std dev = 6.185, 157.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=66 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.38456925093881017;  // std dev = 3.841, 61.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=36 */
%   | | | else return 0.1665388245648817;  // std dev = 1.826, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.42312069605298924;  // std dev = 3.191, 44.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=28 */
%   | | | else return 0.6302322013528497;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.08411986922925806;  // std dev = 0.426, 63.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=15 */
%   | else return 0.04058827656602728;  // std dev = 0.391, 558.000 (wgt'ed) examples reached here.  /* #neg=453 #pos=105 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.18830745238976357;  // std dev = 0.489, 4,596.000 (wgt'ed) examples reached here.  /* #neg=2,764 #pos=1,832 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.12358559825742547;  // std dev = 6.767, 210.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=69 */
%   | | | else return 0.40155391277395613;  // std dev = 2.225, 21.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=13 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.580185557920151;  // std dev = 0.326, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.2634635839559334;  // std dev = 4.163, 71.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=37 */
%   | | | else return 0.3724989728806837;  // std dev = 3.461, 59.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=41 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then if ( haswordtitle(N, L) )
%   | | then return 0.15208451189443603;  // std dev = 0.461, 49.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=15 */
%   | | else return -0.049472496351240874;  // std dev = 0.308, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | else return 0.03225111437624045;  // std dev = 0.389, 553.000 (wgt'ed) examples reached here.  /* #neg=450 #pos=103 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.15533538081959633;  // std dev = 0.489, 4,596.000 (wgt'ed) examples reached here.  /* #neg=2,764 #pos=1,832 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.015091703489999072;  // std dev = 3.541, 74.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=16 */
%   | | | else return 0.17387724612074626;  // std dev = 6.153, 157.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=66 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.44854856314526004;  // std dev = 0.325, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.2021441218157149;  // std dev = 4.170, 72.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=39 */
%   | | | else return 0.2988568969473803;  // std dev = 3.425, 58.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=39 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.1312106770872399;  // std dev = 0.461, 49.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=15 */
%   | | else return -0.043112783315893674;  // std dev = 0.308, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | else return 0.028002604822772528;  // std dev = 0.389, 553.000 (wgt'ed) examples reached here.  /* #neg=450 #pos=103 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.12603832902117337;  // std dev = 0.489, 4,588.000 (wgt'ed) examples reached here.  /* #neg=2,760 #pos=1,828 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 6.646492595923593E-5;  // std dev = 3.889, 82.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=20 */
%   | | | else return 0.1402473654629531;  // std dev = 6.151, 157.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=66 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.1952115078001058;  // std dev = 3.596, 55.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=33 */
%   | | | else return 0.07259539254082255;  // std dev = 2.213, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.20756333946620123;  // std dev = 3.169, 44.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=28 */
%   | | | else return 0.32231782544125953;  // std dev = 1.329, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.0626248914301225;  // std dev = 0.424, 63.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=15 */
%   | else return 0.02545193642292886;  // std dev = 0.390, 558.000 (wgt'ed) examples reached here.  /* #neg=453 #pos=105 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.10036612832799899;  // std dev = 0.489, 4,588.000 (wgt'ed) examples reached here.  /* #neg=2,760 #pos=1,828 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.0553705200315473;  // std dev = 6.919, 218.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=73 */
%   | | | else return 0.25657621062383074;  // std dev = 2.225, 21.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.3247803336248571;  // std dev = 0.835, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.11208318431640461;  // std dev = 4.136, 72.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=38 */
%   | | | else return 0.17667598275855464;  // std dev = 3.442, 60.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=42 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then if ( haswordtitle(N, L) )
%   | | then return 0.10680142739967799;  // std dev = 0.460, 49.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=15 */
%   | | else return -0.04167884160713289;  // std dev = 0.308, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | else return 0.020205968495124526;  // std dev = 0.389, 553.000 (wgt'ed) examples reached here.  /* #neg=450 #pos=103 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.07906635739960102;  // std dev = 0.489, 4,596.000 (wgt'ed) examples reached here.  /* #neg=2,764 #pos=1,832 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.02651109865043484;  // std dev = 3.541, 74.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=16 */
%   | | | else return 0.09279927852307962;  // std dev = 6.128, 157.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=66 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.24035843593648504;  // std dev = 0.320, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.07498838112206413;  // std dev = 4.157, 72.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=39 */
%   | | | else return 0.14376183058436287;  // std dev = 3.386, 58.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=39 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.08921347479927319;  // std dev = 0.460, 49.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=15 */
%   | | else return -0.036532406924586126;  // std dev = 0.308, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | else return 0.017389622014785465;  // std dev = 0.389, 553.000 (wgt'ed) examples reached here.  /* #neg=450 #pos=103 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.06185647880840014;  // std dev = 0.489, 4,588.000 (wgt'ed) examples reached here.  /* #neg=2,760 #pos=1,828 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.025578194749494437;  // std dev = 3.889, 82.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=20 */
%   | | | else return 0.07217808188698759;  // std dev = 6.127, 157.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=66 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.08572351367386713;  // std dev = 3.581, 55.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=33 */
%   | | | else return 0.003923111498242903;  // std dev = 2.208, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.09121957016225188;  // std dev = 3.162, 44.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=28 */
%   | | | else return 0.17374581226346006;  // std dev = 1.328, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.022611787723046572;  // std dev = 0.397, 423.000 (wgt'ed) examples reached here.  /* #neg=339 #pos=84 */
%   | else return 0.008556484025051712;  // std dev = 0.387, 198.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=36 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.048000044635207954;  // std dev = 0.489, 4,596.000 (wgt'ed) examples reached here.  /* #neg=2,764 #pos=1,832 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.033066891994167937;  // std dev = 3.541, 74.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=16 */
%   | | | else return 0.05573267522669486;  // std dev = 6.127, 157.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=66 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.16772116610702736;  // std dev = 0.320, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.039211236212819;  // std dev = 4.159, 72.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=39 */
%   | | | else return 0.08608308440283029;  // std dev = 3.372, 58.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=39 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( author(M, L), venue(M, B) )
%   | | then return 0.17021748064435507;  // std dev = 0.485, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | else return 0.015907000366249237;  // std dev = 0.409, 57.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=13 */
%   | else return 0.012375617388707374;  // std dev = 0.389, 553.000 (wgt'ed) examples reached here.  /* #neg=450 #pos=103 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( haswordauthor(E, C) )
%   | | then return 0.3871887133579221;  // std dev = 0.433, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.03633868658042707;  // std dev = 33.088, 4,580.000 (wgt'ed) examples reached here.  /* #neg=2,759 #pos=1,821 */
%   | | | else return 0.015780872075790955;  // std dev = 7.203, 235.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=84 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.04484796412662993;  // std dev = 3.575, 55.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=33 */
%   | | | else return -0.008771324419330791;  // std dev = 2.214, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.21205492950740112;  // std dev = 0.093, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.07023212267293044;  // std dev = 3.426, 59.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=41 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.04022706673844007;  // std dev = 0.423, 63.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=15 */
%   | else return 0.010124466887978287;  // std dev = 0.390, 558.000 (wgt'ed) examples reached here.  /* #neg=453 #pos=105 */


Results
   AUC ROC   = 0.582709
   AUC PR    = 0.415272
   CLL	      = -0.62459
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total learning time: 11913.296519994736 seconds
Total inference time: 3.394 seconds
AUC ROC: 0.582709


Results scoring model
   AUC ROC   = 0.566336
   AUC PR    = 0.442179
   CLL	      = -0.649165
   Precision = 0.650407 at threshold = 0.5
   Recall    = 0.037754
   F1        = 0.071365


Total scoring time: 52.706 seconds
Refined model CLL: -0.649165


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.583044
   AUC PR    = 0.415358
   CLL	      = -0.624541
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total learning time: 23833.20506417465 seconds
Total inference time: 3.249 seconds
AUC ROC: 0.583044
Total revision time: 23833.20506417465
Best scored revision CLL: -0.64909


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 18:51:00
{'AUC ROC': 0.583044, 'AUC PR': 0.415358, 'CLL': -0.624541, 'Precision': [0.578947, 0.5], 'Recall': 0.059783, 'F1': 0.108374, 'Learning time': 23833.20506417465, 'Inference time': 3.249, 'parameter_0.8': {'AUC ROC': 0.583044, 'AUC PR': 0.415358, 'CLL': -0.624541, 'Precision': [0.578947, 0.5], 'Recall': 0.059783, 'F1': 0.108374, 'Learning time': 11815.686544179916, 'Inference time': 3.249}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.2567564198688718;  // std dev = 0.490, 4,596.000 (wgt'ed) examples reached here.  /* #neg=2,764 #pos=1,832 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.07436515131572859;  // std dev = 3.541, 74.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=16 */
%   | | | else return 0.27853110070460907;  // std dev = 6.185, 157.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=66 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.4483128695257407;  // std dev = 3.841, 61.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=36 */
%   | | | else return 0.1914822684328457;  // std dev = 1.826, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.4945125714631477;  // std dev = 3.191, 44.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=28 */
%   | | | else return 0.7470378239884012;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.09624417319475047;  // std dev = 0.426, 63.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=15 */
%   | else return 0.046320978110263665;  // std dev = 0.391, 558.000 (wgt'ed) examples reached here.  /* #neg=453 #pos=105 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.22276833507523222;  // std dev = 0.489, 4,588.000 (wgt'ed) examples reached here.  /* #neg=2,760 #pos=1,828 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.0678381907364559;  // std dev = 3.889, 82.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=20 */
%   | | | else return 0.24113684724993054;  // std dev = 6.185, 157.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=66 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.38456925093881017;  // std dev = 3.841, 61.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=36 */
%   | | | else return 0.1665388245648817;  // std dev = 1.826, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.42312069605298924;  // std dev = 3.191, 44.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=28 */
%   | | | else return 0.6302322013528497;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return 0.10166428032924608;  // std dev = 0.433, 68.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=17 */
%   | else return 0.038037321922057436;  // std dev = 0.389, 553.000 (wgt'ed) examples reached here.  /* #neg=450 #pos=103 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.18830745238976357;  // std dev = 0.489, 4,596.000 (wgt'ed) examples reached here.  /* #neg=2,764 #pos=1,832 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.12358559825742547;  // std dev = 6.767, 210.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=69 */
%   | | | else return 0.40155391277395613;  // std dev = 2.225, 21.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=13 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.580185557920151;  // std dev = 0.326, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.2634635839559334;  // std dev = 4.163, 71.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=37 */
%   | | | else return 0.3724989728806837;  // std dev = 3.461, 59.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=41 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then if ( haswordtitle(N, L) )
%   | | then return 0.14949300310556526;  // std dev = 0.462, 42.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=13 */
%   | | else return -0.06499970277325488;  // std dev = 0.294, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | else return 0.034835054404710394;  // std dev = 0.391, 558.000 (wgt'ed) examples reached here.  /* #neg=453 #pos=105 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.15533538081959633;  // std dev = 0.489, 4,596.000 (wgt'ed) examples reached here.  /* #neg=2,764 #pos=1,832 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.015091703489999072;  // std dev = 3.541, 74.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=16 */
%   | | | else return 0.17387724612074626;  // std dev = 6.153, 157.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=66 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.44854856314526004;  // std dev = 0.325, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.2021441218157149;  // std dev = 4.170, 72.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=39 */
%   | | | else return 0.2988568969473803;  // std dev = 3.425, 58.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=39 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( title(M, L), venue(M, A) )
%   | | then return 0.048279744740006014;  // std dev = 0.405, 289.000 (wgt'ed) examples reached here.  /* #neg=229 #pos=60 */
%   | | else return 0.01653194726251714;  // std dev = 0.381, 134.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=24 */
%   | else return 0.024857674420617374;  // std dev = 0.386, 198.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=36 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.12603832902117337;  // std dev = 0.489, 4,588.000 (wgt'ed) examples reached here.  /* #neg=2,760 #pos=1,828 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 6.646492595923593E-5;  // std dev = 3.889, 82.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=20 */
%   | | | else return 0.1402473654629531;  // std dev = 6.151, 157.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=66 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.1952115078001058;  // std dev = 3.596, 55.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=33 */
%   | | | else return 0.07259539254082255;  // std dev = 2.213, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.20756333946620123;  // std dev = 3.169, 44.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=28 */
%   | | | else return 0.32231782544125953;  // std dev = 1.329, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.07736103242854078;  // std dev = 0.432, 68.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=17 */
%   | else return 0.023454289882811355;  // std dev = 0.389, 553.000 (wgt'ed) examples reached here.  /* #neg=450 #pos=103 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.10036612832799899;  // std dev = 0.489, 4,588.000 (wgt'ed) examples reached here.  /* #neg=2,760 #pos=1,828 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.0553705200315473;  // std dev = 6.919, 218.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=73 */
%   | | | else return 0.25657621062383074;  // std dev = 2.225, 21.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.3247803336248571;  // std dev = 0.835, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.11208318431640461;  // std dev = 4.136, 72.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=38 */
%   | | | else return 0.17667598275855464;  // std dev = 3.442, 60.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=42 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then if ( haswordtitle(N, L) )
%   | | then return 0.12314176509935681;  // std dev = 0.459, 49.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=15 */
%   | | else return -0.08124598993006053;  // std dev = 0.308, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | else return 0.02023307509420449;  // std dev = 0.389, 553.000 (wgt'ed) examples reached here.  /* #neg=450 #pos=103 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.07906635739960102;  // std dev = 0.489, 4,596.000 (wgt'ed) examples reached here.  /* #neg=2,764 #pos=1,832 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.02651109865043484;  // std dev = 3.541, 74.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=16 */
%   | | | else return 0.09279927852307962;  // std dev = 6.128, 157.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=66 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.13067610227346918;  // std dev = 3.708, 62.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=38 */
%   | | | else return -0.0850383529616892;  // std dev = 1.965, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.12461823403594245;  // std dev = 3.109, 42.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=25 */
%   | | | else return 0.20471925439421634;  // std dev = 1.329, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return 0.05560550183661431;  // std dev = 0.429, 68.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=17 */
%   | else return 0.017413432797222666;  // std dev = 0.389, 553.000 (wgt'ed) examples reached here.  /* #neg=450 #pos=103 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.06185647880840014;  // std dev = 0.489, 4,588.000 (wgt'ed) examples reached here.  /* #neg=2,760 #pos=1,828 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.025578194749494437;  // std dev = 3.889, 82.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=20 */
%   | | | else return 0.07217808188698759;  // std dev = 6.127, 157.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=66 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.20978218175271154;  // std dev = 0.320, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.05505913528879332;  // std dev = 4.128, 72.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=39 */
%   | | | else return 0.109280846118764;  // std dev = 3.381, 58.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=39 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.11352745745411008;  // std dev = 0.460, 42.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=13 */
%   | | else return -0.07252340386896937;  // std dev = 0.296, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   | else return 0.014705032275345753;  // std dev = 0.390, 558.000 (wgt'ed) examples reached here.  /* #neg=453 #pos=105 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.048000044635207954;  // std dev = 0.489, 4,596.000 (wgt'ed) examples reached here.  /* #neg=2,764 #pos=1,832 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.033066891994167937;  // std dev = 3.541, 74.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=16 */
%   | | | else return 0.05573267522669486;  // std dev = 6.127, 157.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=66 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.07564487690996836;  // std dev = 3.560, 55.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=33 */
%   | | | else return -0.020653601008802484;  // std dev = 2.206, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.2396553014701817;  // std dev = 0.101, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.08030771133327153;  // std dev = 3.410, 59.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=41 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.04370614355601631;  // std dev = 0.428, 68.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=17 */
%   | else return 0.012166181254539126;  // std dev = 0.389, 553.000 (wgt'ed) examples reached here.  /* #neg=450 #pos=103 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.037167739809952714;  // std dev = 0.489, 4,588.000 (wgt'ed) examples reached here.  /* #neg=2,760 #pos=1,828 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.005972372007133348;  // std dev = 6.902, 218.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=73 */
%   | | | else return 0.14087555670694968;  // std dev = 2.225, 21.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=13 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.1792257946546013;  // std dev = 0.826, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.027516518344819548;  // std dev = 4.141, 74.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=41 */
%   | | | else return 0.06816637236197008;  // std dev = 3.372, 58.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=39 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then if ( author(N, M), venue(N, A) )
%   | | then return 0.2406853706253237;  // std dev = 0.503, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | else return 0.006396271043713018;  // std dev = 0.394, 54.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=11 */
%   | else return 0.010261561209239467;  // std dev = 0.390, 558.000 (wgt'ed) examples reached here.  /* #neg=453 #pos=105 */


Results
   AUC ROC   = 0.583005
   AUC PR    = 0.415347
   CLL	      = -0.624614
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total learning time: 13042.654976129532 seconds
Total inference time: 3.279 seconds
AUC ROC: 0.583005


Dataset: 3_imdb_cora, Fold: 1, Type: Scratch (RDN-B), Time: 22:28:28
{'AUC ROC': 0.583005, 'AUC PR': 0.415347, 'CLL': -0.624614, 'Precision': [0.578947, 0.5], 'Recall': 0.059783, 'F1': 0.108374, 'Learning time': 13042.654976129532, 'Inference time': 3.279}


Amount of data: 1.0
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.2559515161947286;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.10324697431519789;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.29692444530359235;  // std dev = 6.947, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.4765699877310918;  // std dev = 4.235, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return 0.24703782398840124;  // std dev = 2.068, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.48777856472914083;  // std dev = 3.549, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.7711924133603816;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.05551735615214257;  // std dev = 0.398, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.03153603187370529;  // std dev = 0.379, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.22222965384560173;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.06915052434230415;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.2568082465168603;  // std dev = 6.947, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.40888125283707843;  // std dev = 3.965, 67.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=41 */
%   | | | else return 0.2707492080580629;  // std dev = 2.597, 27.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=13 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.4206995586697572;  // std dev = 3.536, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.6497281345945147;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.04994835668198884;  // std dev = 0.398, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.02481262230908174;  // std dev = 0.379, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.18771929258357153;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.05884198209418326;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.21542855580470746;  // std dev = 6.947, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.33789529469789653;  // std dev = 4.220, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return 0.1470756801940812;  // std dev = 2.069, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.3448296831859416;  // std dev = 3.538, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.5066945370494556;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.04362485237097857;  // std dev = 0.398, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.021505999002746835;  // std dev = 0.378, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1552522670020862;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.0287673056703666;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.17585398336442742;  // std dev = 6.947, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.2785369935206744;  // std dev = 4.187, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return 0.059900523569630146;  // std dev = 2.070, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | | then return 0.5810935273083594;  // std dev = 0.138, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.29234957553420066;  // std dev = 3.761, 74.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=52 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.03907855596307323;  // std dev = 0.398, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.016107343915001623;  // std dev = 0.378, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.12561094264210446;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.08260567652739083;  // std dev = 7.763, 270.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=95 */
%   | | | else return 0.27304033640502706;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.20568652083216787;  // std dev = 4.179, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return 0.060528313622970696;  // std dev = 2.070, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return 0.5008179389730576;  // std dev = 0.211, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.22489911673119667;  // std dev = 3.756, 74.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=52 */
%   else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | then return 0.03392112072608524;  // std dev = 0.398, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.013706296500967262;  // std dev = 0.378, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.10016792098007674;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.0018250199440457999;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.11673645072487956;  // std dev = 6.928, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.3535521469021706;  // std dev = 0.317, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.11851323340523451;  // std dev = 4.572, 88.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=49 */
%   | | | else return 0.17542263960147883;  // std dev = 3.756, 75.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=53 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( title(M, L), venue(M, A) )
%   | | then return 0.040214276042337425;  // std dev = 0.404, 360.000 (wgt'ed) examples reached here.  /* #neg=286 #pos=74 */
%   | | else return 0.009622274965167254;  // std dev = 0.384, 172.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=31 */
%   | else return 0.00951316562082825;  // std dev = 0.378, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.07901111444727832;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.009234377456444577;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.09076611960288186;  // std dev = 6.927, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.2703992151302832;  // std dev = 0.316, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.08608578369743883;  // std dev = 4.572, 89.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=50 */
%   | | | else return 0.13806002126660538;  // std dev = 3.752, 74.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=52 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordauthor(M, K) )
%   | | then return 0.1166330671868128;  // std dev = 0.453, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | else return 0.016406003708588458;  // std dev = 0.390, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | else return 0.00672242654789199;  // std dev = 0.378, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), venue(E, A) )
%   | | then return 0.5899877310125117;  // std dev = 0.324, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordtitle(F, C) )
%   | | | then return 0.22319779961052985;  // std dev = 1.871, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | | else return 0.2500579236543213;  // std dev = 1.103, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, A) )
%   | | | then return 0.2240548942824484;  // std dev = 4.239, 73.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=41 */
%   | | | else return -0.12458523224965805;  // std dev = 3.805, 89.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=20 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.035097857047553874;  // std dev = 6.077, 160.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=61 */
%   | | | else return 0.06197009139301342;  // std dev = 37.335, 5,855.000 (wgt'ed) examples reached here.  /* #neg=3,494 #pos=2,361 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.044299427241444714;  // std dev = 0.411, 83.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=18 */
%   | else return 0.014246033771733472;  // std dev = 0.389, 697.000 (wgt'ed) examples reached here.  /* #neg=567 #pos=130 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.0478779959842887;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.01431146411563766;  // std dev = 7.747, 270.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=95 */
%   | | | else return 0.1489170488513135;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.18177073431002227;  // std dev = 0.313, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.04767804729739258;  // std dev = 4.576, 88.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=49 */
%   | | | else return 0.09603582647554253;  // std dev = 3.759, 75.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=53 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then if ( haswordauthor(N, L) )
%   | | then return 0.10999368874376415;  // std dev = 0.453, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | else return 0.01018203052917168;  // std dev = 0.389, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | else return 0.003005630680789317;  // std dev = 0.379, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), venue(E, B) )
%   | | then return 0.4508625959095555;  // std dev = 0.260, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordtitle(F, C) )
%   | | | then return 0.1629958714462527;  // std dev = 1.866, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | | else return 0.17489318571425194;  // std dev = 1.099, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, B) )
%   | | | then return 0.20404021832453637;  // std dev = 4.252, 73.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=41 */
%   | | | else return -0.1488117724309813;  // std dev = 3.764, 89.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=20 */
%   | | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return 0.018506217121321136;  // std dev = 5.916, 160.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=61 */
%   | | | else return 0.03712529310751553;  // std dev = 37.330, 5,855.000 (wgt'ed) examples reached here.  /* #neg=3,494 #pos=2,361 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.017915421676345227;  // std dev = 0.397, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.0015315564024435877;  // std dev = 0.379, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */


Results
   AUC ROC   = 0.610447
   AUC PR    = 0.444439
   CLL	      = -0.622897
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total learning time: 13248.396196126938 seconds
Total inference time: 3.148 seconds
AUC ROC: 0.610447


Results scoring model
   AUC ROC   = 0.582298
   AUC PR    = 0.460281
   CLL	      = -0.647449
   Precision = 0.71223 at threshold = 0.5
   Recall    = 0.037373
   F1        = 0.071019


Total scoring time: 52.163 seconds
Parameter learned model CLL: -0.647449


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true,true': [0.489, 3, 2], 'true,true,false,true': [4.344, 77, 25], 'true,true,false,false': [6.947, 110, 86], 'true,false,true,true': [4.235, 29, 47], 'true,false,true,false': [2.068, 11, 7], 'true,false,false,true': [3.549, 20, 34], 'true,false,false,false': [1.351, 2, 21], 'false,true': [0.398, 427, 105], 'false,false': [0.379, 205, 43]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'title(I, H), venue(I, A)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true': [0.489, 3, 2], 'true,true,false,true': [4.344, 77, 25], 'true,true,false,false': [6.947, 110, 86], 'true,false,true,true': [3.965, 26, 41], 'true,false,true,false': [2.597, 14, 13], 'true,false,false,true': [3.536, 20, 34], 'true,false,false,false': [1.351, 2, 21], 'false,true': [0.398, 427, 105], 'false,false': [0.379, 205, 43]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true,true': [0.489, 3, 2], 'true,true,false,true': [4.344, 77, 25], 'true,true,false,false': [6.947, 110, 86], 'true,false,true,true': [4.22, 29, 47], 'true,false,true,false': [2.069, 11, 7], 'true,false,false,true': [3.538, 20, 34], 'true,false,false,false': [1.351, 2, 21], 'false,true': [0.398, 427, 105], 'false,false': [0.378, 205, 43]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true,true': [0.489, 3, 2], 'true,true,false,true': [4.344, 77, 25], 'true,true,false,false': [6.947, 110, 86], 'true,false,true,true': [4.187, 29, 47], 'true,false,true,false': [2.07, 11, 7], 'true,false,false,true': [0.138, 0, 3], 'true,false,false,false': [3.761, 22, 52], 'false,true': [0.398, 427, 105], 'false,false': [0.378, 205, 43]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'haswordtitle(I, J), haswordauthor(K, J)', 'true,false,false': 'haswordvenue(B, L), haswordauthor(M, L)', 'false': 'haswordvenue(A, N), haswordtitle(P, N)'}, {'true,true,true': [0.489, 3, 2], 'true,true,false,true': [7.763, 175, 95], 'true,true,false,false': [2.619, 12, 16], 'true,false,true,true': [4.179, 29, 47], 'true,false,true,false': [2.07, 11, 7], 'true,false,false,true': [0.211, 0, 3], 'true,false,false,false': [3.756, 22, 52], 'false,true': [0.398, 427, 105], 'false,false': [0.378, 205, 43]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,true': 'title(M, L), venue(M, A)'}, {'true,true,true': [0.489, 3, 2], 'true,true,false,true': [4.344, 77, 25], 'true,true,false,false': [6.928, 110, 86], 'true,false,true': [0.317, 1, 7], 'true,false,false,true': [4.572, 39, 49], 'true,false,false,false': [3.756, 22, 53], 'false,true,true': [0.404, 286, 74], 'false,true,false': [0.384, 141, 31], 'false,false': [0.378, 205, 43]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,true': 'haswordauthor(M, K)'}, {'true,true,true': [0.489, 3, 2], 'true,true,false,true': [4.344, 77, 25], 'true,true,false,false': [6.927, 110, 86], 'true,false,true': [0.316, 1, 7], 'true,false,false,true': [4.572, 39, 50], 'true,false,false,false': [3.752, 22, 52], 'false,true,true': [0.453, 39, 16], 'false,true,false': [0.39, 388, 89], 'false,false': [0.378, 205, 43]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordauthor(D, C)', 'true,true': 'author(E, D), venue(E, A)', 'true,true,false': 'haswordtitle(F, C)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'true,false,true': 'author(I, H), venue(I, A)', 'true,false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true': [0.324, 0, 5], 'true,true,false,true': [1.871, 6, 8], 'true,true,false,false': [1.103, 2, 5], 'true,false,true,true': [4.239, 32, 41], 'true,false,true,false': [3.805, 69, 20], 'true,false,false,true': [6.077, 99, 61], 'true,false,false,false': [37.335, 3, 2], 'false,true': [0.411, 65, 18], 'false,false': [0.389, 567, 130]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordtitle(M, L)', 'false,true': 'haswordauthor(N, L)'}, {'true,true,true': [0.489, 3, 2], 'true,true,false,true': [7.747, 175, 95], 'true,true,false,false': [2.619, 12, 16], 'true,false,true': [0.313, 1, 7], 'true,false,false,true': [4.576, 39, 49], 'true,false,false,false': [3.759, 22, 53], 'false,true,true': [0.453, 39, 16], 'false,true,false': [0.389, 388, 89], 'false,false': [0.379, 205, 43]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordauthor(D, C)', 'true,true': 'author(E, D), venue(E, B)', 'true,true,false': 'haswordtitle(F, C)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'true,false,true': 'author(I, H), venue(I, B)', 'true,false,false': 'haswordvenue(A, J), haswordauthor(K, J)', 'false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true': [0.26, 0, 5], 'true,true,false,true': [1.866, 6, 8], 'true,true,false,false': [1.099, 2, 5], 'true,false,true,true': [4.252, 32, 41], 'true,false,true,false': [3.764, 69, 20], 'true,false,false,true': [5.916, 99, 61], 'true,false,false,false': [37.33, 3, 2], 'false,true': [0.397, 427, 105], 'false,false': [0.379, 205, 43]}]]
[{'': [0.24062821188505737, 0.1537409598948076], 'true': [0.23929845422110457, 0.23111384699566015], 'true,true': [0.23955568756914178, 0.23373947119499386], 'true,true,false': [0.18502499038831322, 0.2462515618492307], 'true,false': [0.24445450430058835, 0.20408163265306092], 'true,false,true': [0.23597645429362898, 0.23765432098765438], 'true,false,false': [0.23319615912208677, 0.07939508506616269], 'false': [0.15841412742382383, 0.14332401144641108]}, {'': [0.2399129948937479, 0.15371160841346576], 'true': [0.23918272629623277, 0.22582369812454683], 'true,true': [0.23944903274422907, 0.2332226872978986], 'true,true,false': [0.18502499038831138, 0.24625156184923094], 'true,false': [0.24286947220955446, 0.19711122261596062], 'true,false,true': [0.2346327028442599, 0.249708959237045], 'true,false,false': [0.23158147311422037, 0.07939508506616208], 'false': [0.15838031736159208, 0.1432655511947327]}, {'': [0.23918944664429068, 0.15367763995572664], 'true': [0.239039569329648, 0.22073153105955787], 'true,true': [0.23943391157955712, 0.23081473558421572], 'true,true,false': [0.1850249903883126, 0.2462515618492287], 'true,false': [0.24063526862603343, 0.19179856612853208], 'true,false,true': [0.234324183518632, 0.2378424817614202], 'true,false,false': [0.23184807987635964, 0.07939508506616277], 'false': [0.15837765091620673, 0.14326166910389893]}, {'': [0.23866130337386784, 0.1536500565232035], 'true': [0.23892345831564166, 0.21699130230337488], 'true,true': [0.23933492148457605, 0.23016528052236868], 'true,true,false': [0.18502499038831116, 0.24625156184922922], 'true,false': [0.239490581973417, 0.18706224595110008], 'true,false,true': [0.23068937898322572, 0.23800286729491615], 'true,false,false': [0.006379311106944193, 0.19113892837978966], 'false': [0.1583500065970098, 0.14320800306850623]}, {'': [0.23828994314216428, 0.15361959683592474], 'true': [0.23880741891299595, 0.21388565901959652], 'true,true': [0.23931962975793453, 0.22835219528472686], 'true,true,false': [0.22322885482768137, 0.244897959183674], 'true,false': [0.23469539687710866, 0.18664768707450025], 'true,false,true': [0.2298429026775091, 0.23814765477162622], 'true,false,false': [0.014796093814235892, 0.1906484930463102], 'false': [0.15834616525163053, 0.1432016323998592]}, {'': [0.2380679325635085, 0.15359516821654], 'true': [0.23871790449215613, 0.21215289874573462], 'true,true': [0.23928293833441563, 0.22735316284216972], 'true,true,false': [0.18502499038831155, 0.24486138138279578], 'true,false': [0.10079308156435093, 0.2155777175443375], 'true,false,false': [0.2375083699127679, 0.18809726200547588], 'false': [0.15832484541914232, 0.14315386814131636], 'false,true': [0.16305395598548214, 0.1477934111771628]}, {'': [0.23792245665521655, 0.15353123038577085], 'true': [0.23864158862638696, 0.21105330330642774], 'true,true': [0.23924220813317948, 0.2266046014404893], 'true,true,false': [0.18502499038831266, 0.2448201176385287], 'true,false': [0.1001158270115124, 0.21528965700586356], 'true,false,false': [0.23488081369433236, 0.19025236529401313], 'false': [0.1582493415794843, 0.14313606043053972], 'false,true': [0.20535694961936124, 0.15177911189388582]}, {'': [0.23782786287821142, 0.15332554912787633], 'true': [0.2054969146582702, 0.23772158253496614], 'true,false': [0.23042514542507425, 0.23789643658178167], 'true,false,false': [0.23084485276904335, 0.2380699272807595], 'true,false,true': [0.2462000375304932, 0.1627136861304925], 'true,true': [0.020980553553624447, 0.22480495825607483], 'true,true,false': [0.2501164955841479, 0.17370090609083005], 'false': [0.1685530994843145, 0.15141611490991297]}, {'': [0.23735588991681564, 0.15329644308034904], 'true': [0.23808617710078486, 0.21081540106505833], 'true,true': [0.2386960764892797, 0.22593474389097462], 'true,true,false': [0.2222657634780481, 0.24489795918367346], 'true,false': [0.0981635978245306, 0.21575912288789797], 'true,false,false': [0.23799158356294667, 0.188410546229462], 'false': [0.15786061333652918, 0.14329679631521614], 'false,true': [0.2050319518870633, 0.15139162613871926]}, {'': [0.23728978020869845, 0.15309137761325878], 'true': [0.1955416203474827, 0.23732108492001566], 'true,false': [0.2298491868906294, 0.23750398812378296], 'true,false,false': [0.21871436248377046, 0.2380082320760657], 'true,false,true': [0.24761948415905966, 0.15916965783769743], 'true,true': [0.01354165476518716, 0.22337499334432037], 'true,true,false': [0.2487114996072943, 0.17260761676051165], 'false': [0.15758210867120528, 0.14327495144663274]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Pruning resulted in null theory

Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;true;true
0;true,true,false;title(F, D), venue(F, B).;true;true
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;true;true
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
0;false;haswordvenue(A, M), haswordtitle(N, M).;true;true
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;true;true
1;true,true,false;title(F, D), venue(F, A).;true;true
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;title(I, H), venue(I, A).;true;true
1;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;true;true
1;false;haswordvenue(B, L), haswordtitle(M, L).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;true;true
2;true,true,false;title(F, D), venue(F, B).;true;true
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
2;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;true;true
2;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;true;true
2;false;haswordvenue(A, M), haswordtitle(N, M).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;true;true
3;true,true,false;title(F, D), venue(F, A).;true;true
3;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;true;true
3;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;true;true
3;false;haswordvenue(B, M), haswordtitle(N, M).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;true;true
4;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;true;true
4;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
4;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;true;true
4;true,false,false;haswordvenue(B, L), haswordauthor(M, L).;true;true
4;false;haswordvenue(A, N), haswordtitle(P, N).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;true;true
5;true,true,false;title(F, D), venue(F, B).;true;true
5;true,false;haswordvenue(B, G), haswordauthor(H, G).;true;true
5;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;true;true
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;true
5;false,true;title(M, L), venue(M, A).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, B).;true;true
6;true,true,false;title(F, D), venue(F, A).;true;true
6;true,false;haswordvenue(B, G), haswordauthor(H, G).;true;true
6;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;true;true
6;false;haswordvenue(A, K), haswordtitle(L, K).;true;true
6;false,true;haswordauthor(M, K).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordauthor(D, C).;true;true
7;true,true;author(E, D), venue(E, A).;true;true
7;true,true,false;haswordtitle(F, C).;true;true
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;true
7;true,false,true;author(I, H), venue(I, A).;true;true
7;true,false,false;haswordvenue(B, J), haswordauthor(K, J).;true;true
7;false;haswordvenue(B, L), haswordauthor(M, L).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;true;true
8;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;true;true
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;true;true
8;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;true;true
8;false;haswordvenue(B, L), haswordtitle(M, L).;true;true
8;false,true;haswordauthor(N, L).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordauthor(D, C).;true;true
9;true,true;author(E, D), venue(E, B).;true;true
9;true,true,false;haswordtitle(F, C).;true;true
9;true,false;haswordvenue(B, G), haswordauthor(H, G).;true;true
9;true,false,true;author(I, H), venue(I, B).;true;true
9;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;true;true
9;false;haswordvenue(A, L), haswordtitle(M, L).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.2559515161947286;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.10324697431519789;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.29692444530359235;  // std dev = 6.947, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.4765699877310918;  // std dev = 4.235, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return 0.24703782398840124;  // std dev = 2.068, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.48777856472914083;  // std dev = 3.549, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.7711924133603816;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.05551735615214257;  // std dev = 0.398, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.03153603187370529;  // std dev = 0.379, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.22222965384560173;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.06915052434230415;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.2568082465168603;  // std dev = 6.947, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.4143878208613061;  // std dev = 4.212, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return 0.17843323178848147;  // std dev = 2.069, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.4206995586697572;  // std dev = 3.536, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.6497281345945147;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.04994835668198884;  // std dev = 0.398, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.02481262230908174;  // std dev = 0.379, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.18771929258357153;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.05884198209418326;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.21542855580470746;  // std dev = 6.947, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.3390438318181077;  // std dev = 4.207, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return 0.1472560332512732;  // std dev = 2.069, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.3427971745112513;  // std dev = 3.533, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.5066945370494556;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.04362485237097857;  // std dev = 0.398, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.021505999002746835;  // std dev = 0.378, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1552522670020862;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.0287673056703666;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.17585398336442742;  // std dev = 6.947, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.49152966501360906;  // std dev = 0.327, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.22136534696281662;  // std dev = 4.601, 88.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=49 */
%   | | | else return 0.2960089199462827;  // std dev = 3.777, 75.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=53 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordauthor(M, K) )
%   | | then return 0.13103753328651985;  // std dev = 0.454, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | else return 0.02847531958405861;  // std dev = 0.390, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | else return 0.016107343915001623;  // std dev = 0.378, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.12561094264210446;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.08260567652739083;  // std dev = 7.763, 270.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=95 */
%   | | | else return 0.27304033640502706;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.4117928603614258;  // std dev = 0.321, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.15778726744827629;  // std dev = 4.573, 88.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=49 */
%   | | | else return 0.23586895658415338;  // std dev = 3.774, 75.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=53 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then if ( haswordauthor(N, L) )
%   | | then return 0.11264489326273429;  // std dev = 0.454, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | else return 0.0246482556401142;  // std dev = 0.390, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | else return 0.01396065846011841;  // std dev = 0.378, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.10016792098007674;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.0018250199440457999;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.11673645072487956;  // std dev = 6.928, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.16331276099913655;  // std dev = 4.152, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return -0.009900937659260608;  // std dev = 2.076, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.15646263464369117;  // std dev = 3.498, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.2505078176987608;  // std dev = 1.348, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.029596198319789484;  // std dev = 0.397, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.01070232177029813;  // std dev = 0.379, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.07901111444727832;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.009234377456444577;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.09076611960288186;  // std dev = 6.927, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.1231566388584829;  // std dev = 4.151, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return -0.007529960399417575;  // std dev = 2.076, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.11748617444340194;  // std dev = 3.498, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.19701292137502543;  // std dev = 1.349, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | then return 0.04659932939974523;  // std dev = 0.410, 83.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=18 */
%   | else return 0.017145153868531295;  // std dev = 0.389, 697.000 (wgt'ed) examples reached here.  /* #neg=567 #pos=130 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), venue(E, B) )
%   | | then return 0.5999542224271399;  // std dev = 0.279, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordtitle(F, C) )
%   | | | then return 0.22319779961052985;  // std dev = 1.871, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | | else return 0.2636083246885908;  // std dev = 1.101, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then if ( author(I, H), venue(I, A) )
%   | | | then return 0.2240548942824484;  // std dev = 4.239, 73.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=41 */
%   | | | else return -0.12731245698510588;  // std dev = 3.786, 89.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=20 */
%   | | else if ( haswordtitle(J, C) )
%   | | | then return 0.06069578060913091;  // std dev = 37.362, 5,852.000 (wgt'ed) examples reached here.  /* #neg=3,532 #pos=2,320 */
%   | | | else return 0.08257319061658175;  // std dev = 5.905, 163.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=102 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then return 0.022934439598764293;  // std dev = 0.397, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.0055345109201229;  // std dev = 0.378, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.04799792579468699;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.014585959646600808;  // std dev = 7.747, 270.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=95 */
%   | | | else return 0.14922794425263605;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.23117104069011407;  // std dev = 0.317, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.19012863456738438;  // std dev = 0.891, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.05896071529472458;  // std dev = 5.831, 158.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=98 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then if ( title(N, M), venue(N, B) )
%   | | then return 0.029831721981013113;  // std dev = 0.403, 360.000 (wgt'ed) examples reached here.  /* #neg=286 #pos=74 */
%   | | else return 1.8444357147683104E-4;  // std dev = 0.384, 172.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=31 */
%   | else return 0.0033941018028059104;  // std dev = 0.379, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.03702242289319172;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.011169311587695992;  // std dev = 7.747, 270.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=95 */
%   | | | else return 0.1124655877753791;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.18251417908045514;  // std dev = 0.316, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.027345700512982584;  // std dev = 4.550, 88.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=49 */
%   | | | else return 0.0726138441921416;  // std dev = 3.752, 75.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=53 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then if ( haswordauthor(N, L) )
%   | | then return 0.08093807360993588;  // std dev = 0.453, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | else return 0.011000055186462663;  // std dev = 0.390, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | else return 8.937594347142019E-4;  // std dev = 0.378, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */


Results
   AUC ROC   = 0.607973
   AUC PR    = 0.442953
   CLL	      = -0.624453
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total learning time: 14558.448810100555 seconds
Total inference time: 3.263 seconds
AUC ROC: 0.607973


Results scoring model
   AUC ROC   = 0.574983
   AUC PR    = 0.452795
   CLL	      = -0.6481
   Precision = 0.71223 at threshold = 0.5
   Recall    = 0.037373
   F1        = 0.071019


Total scoring time: 57.13 seconds
Refined model CLL: -0.6481


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.610447
   AUC PR    = 0.444439
   CLL	      = -0.622897
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total learning time: 27916.138006227495 seconds
Total inference time: 3.148 seconds
AUC ROC: 0.610447
Total revision time: 27916.138006227495
Best scored revision CLL: -0.647449


Dataset: 3_imdb_cora, Fold: 1, Type: Transfer (trRDN-B), Time: 06:13:56
{'AUC ROC': 0.610447, 'AUC PR': 0.444439, 'CLL': -0.622897, 'Precision': [0.578947, 0.5], 'Recall': 0.059783, 'F1': 0.108374, 'Learning time': 27916.138006227495, 'Inference time': 3.148, 'parameter_1.0': {'AUC ROC': 0.610447, 'AUC PR': 0.444439, 'CLL': -0.622897, 'Precision': [0.578947, 0.5], 'Recall': 0.059783, 'F1': 0.108374, 'Learning time': 13248.396196126938, 'Inference time': 3.148}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.2559515161947286;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.10324697431519789;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.29692444530359235;  // std dev = 6.947, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.4765699877310918;  // std dev = 4.235, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return 0.24703782398840124;  // std dev = 2.068, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.48777856472914083;  // std dev = 3.549, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.7711924133603816;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.05551735615214257;  // std dev = 0.398, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.03153603187370529;  // std dev = 0.379, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.22222965384560173;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.06915052434230415;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.2568082465168603;  // std dev = 6.947, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.4143878208613061;  // std dev = 4.212, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return 0.17843323178848147;  // std dev = 2.069, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.4206995586697572;  // std dev = 3.536, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.6497281345945147;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.04994835668198884;  // std dev = 0.398, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.02481262230908174;  // std dev = 0.379, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.18771929258357153;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.05884198209418326;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.21542855580470746;  // std dev = 6.947, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.3390438318181077;  // std dev = 4.207, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return 0.1472560332512732;  // std dev = 2.069, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.3427971745112513;  // std dev = 3.533, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.5066945370494556;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.04362485237097857;  // std dev = 0.398, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.021505999002746835;  // std dev = 0.378, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1552522670020862;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.0287673056703666;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.17585398336442742;  // std dev = 6.947, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.491496586376178;  // std dev = 0.327, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.222139668562328;  // std dev = 4.591, 88.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=49 */
%   | | | else return 0.2951039109908483;  // std dev = 3.789, 75.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=53 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( title(M, L), venue(M, A) )
%   | | then return 0.04840063341931859;  // std dev = 0.404, 360.000 (wgt'ed) examples reached here.  /* #neg=286 #pos=74 */
%   | | else return 0.01956723105464887;  // std dev = 0.384, 172.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=31 */
%   | else return 0.016107343915001623;  // std dev = 0.378, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.12561094264210446;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.08260567652739083;  // std dev = 7.763, 270.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=95 */
%   | | | else return 0.27304033640502706;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.20727150711024317;  // std dev = 4.169, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return 0.027207547656291284;  // std dev = 2.076, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.21420510206886845;  // std dev = 3.503, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.3069148761775558;  // std dev = 1.349, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | then return 0.03441565175265381;  // std dev = 0.398, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.012660322610336635;  // std dev = 0.378, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.10016792098007674;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.0018250199440457999;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.11673645072487956;  // std dev = 6.928, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.35839474945686056;  // std dev = 0.321, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.11569312088924848;  // std dev = 4.563, 88.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=49 */
%   | | | else return 0.17888534660131658;  // std dev = 3.753, 75.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=53 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordauthor(M, K) )
%   | | then return 0.12324607114398209;  // std dev = 0.454, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | else return 0.01965095617000381;  // std dev = 0.389, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | else return 0.00945681225878836;  // std dev = 0.378, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.07901111444727832;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.009234377456444577;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.09076611960288186;  // std dev = 6.927, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.12308696004211056;  // std dev = 3.912, 67.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=41 */
%   | | | else return 0.03834640706195664;  // std dev = 2.521, 27.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=13 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.11618126166540815;  // std dev = 3.498, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.19728101662971853;  // std dev = 1.349, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.04569772427292411;  // std dev = 0.410, 83.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=18 */
%   | else return 0.017338685489616826;  // std dev = 0.389, 697.000 (wgt'ed) examples reached here.  /* #neg=567 #pos=130 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.06172574127613092;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.013363132973430773;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.069920163998474;  // std dev = 6.927, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.25569605299378695;  // std dev = 0.320, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return 0.20556049008586913;  // std dev = 0.891, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.0778223447220776;  // std dev = 5.831, 158.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=98 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordauthor(M, K) )
%   | | then return 0.11065101267182398;  // std dev = 0.452, 55.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=16 */
%   | | else return 0.013235671969848187;  // std dev = 0.389, 477.000 (wgt'ed) examples reached here.  /* #neg=388 #pos=89 */
%   | else return 0.004938563889717665;  // std dev = 0.379, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.04797599302029744;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.01630959852551058;  // std dev = 7.740, 270.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=95 */
%   | | | else return 0.14697608113692365;  // std dev = 2.619, 28.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=16 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.07535233015481806;  // std dev = 4.141, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return -0.05055317985716602;  // std dev = 2.075, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | | then return 0.266388177914218;  // std dev = 0.149, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.08294067236758046;  // std dev = 3.735, 74.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=52 */
%   else if ( haswordvenue(B, N), haswordtitle(P, N) )
%   | then return 0.020374682809683423;  // std dev = 0.397, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.003118424717967855;  // std dev = 0.379, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.03699474740250878;  // std dev = 0.489, 5,734.000 (wgt'ed) examples reached here.  /* #neg=3,453 #pos=2,281 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.022501310722410846;  // std dev = 4.344, 102.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=25 */
%   | | | else return 0.045043338067525716;  // std dev = 6.916, 196.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.057771394033215816;  // std dev = 4.132, 76.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=47 */
%   | | | else return -0.05315821956676018;  // std dev = 2.077, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.049662173812277305;  // std dev = 3.484, 54.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=34 */
%   | | | else return 0.12849656017901942;  // std dev = 1.348, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.017940018020088155;  // std dev = 0.397, 532.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=105 */
%   | else return 0.0014956147141152217;  // std dev = 0.379, 248.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=43 */


Results
   AUC ROC   = 0.604466
   AUC PR    = 0.44001
   CLL	      = -0.625038
   Precision = 0.578947 at threshold = 0.5
   Recall    = 0.059783
   F1        = 0.108374


Total learning time: 15756.346400022507 seconds
Total inference time: 3.43 seconds
AUC ROC: 0.604466


Dataset: 3_imdb_cora, Fold: 1, Type: Scratch (RDN-B), Time: 10:36:36
{'AUC ROC': 0.604466, 'AUC PR': 0.44001, 'CLL': -0.625038, 'Precision': [0.578947, 0.5], 'Recall': 0.059783, 'F1': 0.108374, 'Learning time': 15756.346400022507, 'Inference time': 3.43}


Starting fold 2

Target train facts examples: 33542
Target train pos examples: 2246
Target train neg examples: 4478

Target test facts examples: 9016
Target test pos  examples: 771
Target test neg examples: 544

Amount of data: 0.2
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.6727029257098368;  // std dev = 8.022, 426.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=347 */
%   | | | else return -0.10515381719406565;  // std dev = 4.808, 654.000 (wgt'ed) examples reached here.  /* #neg=630 #pos=24 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.15814893509951236;  // std dev = 2.049, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
%   | | | else return 0.3465210281227675;  // std dev = 3.278, 43.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.5248156017661789;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.4581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | | else return 0.4735335504841277;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   else return 0.033906510857087374;  // std dev = 0.381, 165.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=29 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.5694573859162513;  // std dev = 8.020, 425.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=346 */
%   | | | else return -0.09504130818920743;  // std dev = 4.675, 648.000 (wgt'ed) examples reached here.  /* #neg=625 #pos=23 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.16250579943050034;  // std dev = 2.341, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
%   | | | else return 0.29890536680643803;  // std dev = 3.278, 43.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.3335858817946705;  // std dev = 1.794, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.5905611347766981;  // std dev = 0.892, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.3816289395752953;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.40564015880039006;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   else return 0.029728761055608104;  // std dev = 0.381, 165.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=29 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.45071340141421823;  // std dev = 8.024, 426.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=347 */
%   | | | else return -0.08366967826653897;  // std dev = 4.773, 654.000 (wgt'ed) examples reached here.  /* #neg=630 #pos=24 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.15029190877972537;  // std dev = 2.049, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
%   | | | else return 0.24871740581779708;  // std dev = 3.278, 43.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.3745726485155707;  // std dev = 1.404, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | | else return 0.2518055464998272;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.3113921847406983;  // std dev = 1.531, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | | else return 0.3305950535941956;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   else return 0.025982305246228243;  // std dev = 0.381, 165.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=29 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09414943322216611;  // std dev = 0.359, 1,143.000 (wgt'ed) examples reached here.  /* #neg=745 #pos=398 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.38941202026295596;  // std dev = 0.868, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.25483218050708795;  // std dev = 1.858, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | | | else return 0.22679810696548208;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then return -0.15311412034538407;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordtitle(L, I) )
%   | | | then return 0.27545730822604464;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return 0.09688587965461593;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return -0.01978078701205074;  // std dev = 0.340, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else return 0.001924639344538497;  // std dev = 0.362, 129.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0788619456086866;  // std dev = 0.356, 1,143.000 (wgt'ed) examples reached here.  /* #neg=745 #pos=398 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.29572451257858823;  // std dev = 0.868, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.19566171634689838;  // std dev = 1.857, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | | | else return 0.173006436463164;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then return -0.1342960216875733;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordtitle(L, I) )
%   | | | then return 0.23623897451551018;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return 0.08389626969258601;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.004348088024032927;  // std dev = 0.364, 89.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=14 */
%   | | else return -0.007807595314961496;  // std dev = 0.353, 55.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=8 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06570408138965107;  // std dev = 0.353, 1,143.000 (wgt'ed) examples reached here.  /* #neg=745 #pos=398 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.22195282630111784;  // std dev = 0.868, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.1387780781477394;  // std dev = 0.486, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then return -0.11943488343959953;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordtitle(J, G) )
%   | | | then return 0.19686240124261406;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return 0.07194782192770435;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then return -0.017583282466607363;  // std dev = 0.340, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.003965459725464206;  // std dev = 3.179, 76.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=12 */
%   | | | else return -0.0014094358885845914;  // std dev = 2.606, 53.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=8 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05450632880794941;  // std dev = 0.350, 1,143.000 (wgt'ed) examples reached here.  /* #neg=745 #pos=398 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.16720595023848406;  // std dev = 0.868, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.1043379812221394;  // std dev = 0.486, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then return -0.1074336458383333;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordtitle(J, G) )
%   | | | then return 0.15998842489066314;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return 0.061173360759360966;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then return -0.015343954345762977;  // std dev = 0.340, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.003633123022751465;  // std dev = 3.311, 83.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=13 */
%   | | | else return -0.002272514961418588;  // std dev = 2.436, 46.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=7 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0450609113420767;  // std dev = 0.349, 1,143.000 (wgt'ed) examples reached here.  /* #neg=745 #pos=398 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.1271986160325384;  // std dev = 0.868, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.07836057093716507;  // std dev = 0.486, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then return -0.09755767030045086;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordtitle(J, G) )
%   | | | then return 0.12742304205569369;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return 0.05162457893777272;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | | then return -0.0021406723417528527;  // std dev = 3.322, 86.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=13 */
%   | | | else return 0.17841184999826096;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return -0.006923513790374777;  // std dev = 0.352, 55.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=8 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03714907263981743;  // std dev = 0.347, 1,143.000 (wgt'ed) examples reached here.  /* #neg=745 #pos=398 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.097816386985667;  // std dev = 0.868, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.05889747692396616;  // std dev = 0.486, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, B) )
%   | | then return -0.08929945367615998;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordtitle(J, G) )
%   | | | then return 0.09994680512929552;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return 0.043287130649985156;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | | then return -0.0018630316247176088;  // std dev = 3.322, 86.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=13 */
%   | | | else return 0.15359175015481638;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return -0.006031442885283589;  // std dev = 0.352, 55.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=8 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0305582407214865;  // std dev = 0.346, 1,143.000 (wgt'ed) examples reached here.  /* #neg=745 #pos=398 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.07597080729930833;  // std dev = 0.868, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.044334619047226666;  // std dev = 0.486, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | then if ( author(I, H), venue(I, A) )
%   | | then return 0.1019000356932675;  // std dev = 0.797, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( haswordtitle(J, G) )
%   | | | then return 0.07753018981333937;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return -0.17003375868652038;  // std dev = 0.107, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | | then return -0.0016217357194268454;  // std dev = 3.322, 86.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=13 */
%   | | | else return 0.12982464336356522;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return -0.005257812759629585;  // std dev = 0.352, 55.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=8 */


Results
   AUC ROC   = 0.741877
   AUC PR    = 0.739211
   CLL	      = -0.558944
   Precision = 0.745158 at threshold = 0.5
   Recall    = 0.948119
   F1        = 0.834475


Total learning time: 1156.4783840179443 seconds
Total inference time: 3.802 seconds
AUC ROC: 0.741877


Results scoring model
   AUC ROC   = 0.884039
   AUC PR    = 0.765056
   CLL	      = -0.410849
   Precision = 0.798265 at threshold = 0.5
   Recall    = 0.819599
   F1        = 0.808791


Total scoring time: 17.099 seconds
Parameter learned model CLL: -0.410849


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,true': 'samebib(E, F), venue(F, B)', 'true,true,false': 'title(G, D), venue(G, B)', 'true,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'true,false,true': 'haswordtitle(I, J), haswordauthor(K, J)', 'true,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true,true': [8.022, 79, 347], 'true,true,true,false': [4.808, 630, 24], 'true,true,false,true': [2.049, 14, 6], 'true,true,false,false': [3.278, 22, 21], 'true,false,true,true': [1.414, 3, 6], 'true,false,true,false': [1.0, 2, 2], 'true,false,false,true': [1.549, 4, 6], 'true,false,false,false': [1.754, 5, 8], 'false': [0.381, 136, 29]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,true': 'samebib(E, F), venue(F, A)', 'true,true,false': 'title(G, D), venue(G, A)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'title(J, I), venue(J, B)', 'true,false,false': 'haswordvenue(B, K), haswordtitle(L, K)'}, {'true,true,true,true': [8.02, 79, 346], 'true,true,true,false': [4.675, 625, 23], 'true,true,false,true': [2.341, 19, 8], 'true,true,false,false': [3.278, 22, 21], 'true,false,true,true': [1.794, 6, 7], 'true,false,true,false': [0.892, 1, 4], 'true,false,false,true': [1.095, 2, 3], 'true,false,false,false': [1.754, 5, 8], 'false': [0.381, 136, 29]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,true': 'samebib(E, F), venue(F, B)', 'true,true,false': 'title(G, D), venue(G, B)', 'true,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'true,false,true': 'haswordtitle(I, J), haswordauthor(K, J)', 'true,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true,true': [8.024, 79, 347], 'true,true,true,false': [4.773, 630, 24], 'true,true,false,true': [2.049, 14, 6], 'true,true,false,false': [3.278, 22, 21], 'true,false,true,true': [1.404, 3, 6], 'true,false,true,false': [1.0, 2, 2], 'true,false,false,true': [1.531, 4, 6], 'true,false,false,false': [1.754, 5, 8], 'false': [0.381, 136, 29]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, B)', 'false,true,false': 'haswordtitle(L, I)', 'false,false': 'haswordvenue(A, M), haswordauthor(N, M)'}, {'true,true': [0.359, 745, 398], 'true,false,true': [0.868, 1, 3], 'true,false,false,true': [1.858, 6, 9], 'true,false,false,false': [2.029, 7, 10], 'false,true,true': [0.0, 3, 0], 'false,true,false,true': [1.852, 8, 6], 'false,true,false,false': [0.866, 3, 1], 'false,false,true': [0.34, 13, 2], 'false,false,false': [0.362, 109, 20]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false,true': 'author(K, J), venue(K, B)', 'false,true,false': 'haswordtitle(L, I)', 'false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.356, 745, 398], 'true,false,true': [0.868, 1, 3], 'true,false,false,true': [1.857, 6, 9], 'true,false,false,false': [2.029, 7, 10], 'false,true,true': [0.0, 3, 0], 'false,true,false,true': [1.852, 8, 6], 'false,true,false,false': [0.866, 3, 1], 'false,false,true': [0.364, 75, 14], 'false,false,false': [0.353, 47, 8]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false,true': 'author(I, H), venue(I, B)', 'false,true,false': 'haswordtitle(J, G)', 'false,false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.353, 745, 398], 'true,false,true': [0.868, 1, 3], 'true,false,false': [0.486, 13, 19], 'false,true,true': [0.0, 3, 0], 'false,true,false,true': [1.852, 8, 6], 'false,true,false,false': [0.866, 3, 1], 'false,false,true': [0.34, 13, 2], 'false,false,false,true': [3.179, 64, 12], 'false,false,false,false': [2.606, 45, 8]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false,true': 'author(I, H), venue(I, B)', 'false,true,false': 'haswordtitle(J, G)', 'false,false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,false,false': 'haswordvenue(B, M), haswordtitle(N, M)'}, {'true,true': [0.35, 745, 398], 'true,false,true': [0.868, 1, 3], 'true,false,false': [0.486, 13, 19], 'false,true,true': [0.0, 3, 0], 'false,true,false,true': [1.852, 8, 6], 'false,true,false,false': [0.866, 3, 1], 'false,false,true': [0.34, 13, 2], 'false,false,false,true': [3.311, 70, 13], 'false,false,false,false': [2.436, 39, 7]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false,true': 'author(I, H), venue(I, B)', 'false,true,false': 'haswordtitle(J, G)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false,true': 'haswordtitle(L, M), haswordauthor(N, M)'}, {'true,true': [0.349, 745, 398], 'true,false,true': [0.868, 1, 3], 'true,false,false': [0.486, 13, 19], 'false,true,true': [2.63e-09, 3, 0], 'false,true,false,true': [1.852, 8, 6], 'false,true,false,false': [0.866, 3, 1], 'false,false,true,true': [3.322, 73, 13], 'false,false,true,false': [0.816, 2, 1], 'false,false,false': [0.352, 47, 8]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false,true': 'author(I, H), venue(I, B)', 'false,true,false': 'haswordtitle(J, G)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false,true': 'haswordtitle(L, M), haswordauthor(N, M)'}, {'true,true': [0.347, 745, 398], 'true,false,true': [0.868, 1, 3], 'true,false,false': [0.486, 13, 19], 'false,true,true': [0.0, 3, 0], 'false,true,false,true': [1.852, 8, 6], 'false,true,false,false': [0.866, 3, 1], 'false,false,true,true': [3.322, 73, 13], 'false,false,true,false': [0.816, 2, 1], 'false,false,false': [0.352, 47, 8]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false,true': 'author(I, H), venue(I, A)', 'false,true,false': 'haswordtitle(J, G)', 'false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false,false,true': 'haswordtitle(L, M), haswordauthor(N, M)'}, {'true,true': [0.346, 745, 398], 'true,false,true': [0.868, 1, 3], 'true,false,false': [0.486, 13, 19], 'false,true,true': [0.797, 3, 1], 'false,true,false,true': [1.852, 8, 6], 'false,true,false,false': [0.107, 3, 0], 'false,false,true,true': [3.322, 73, 13], 'false,false,true,false': [0.816, 2, 1], 'false,false,false': [0.352, 47, 8]}]]
[{'': [0.22933136504605164, 0.14486685032139682], 'true': [0.2269587255223733, 0.23765432098765535], 'true,false': [0.23668639053254428, 0.2381852551984873], 'true,false,false': [0.23999999999999994, 0.23668639053254428], 'true,false,true': [0.22222222222222218, 0.25], 'true,true': [0.22551354595334408, 0.24489795918367485], 'true,true,false': [0.2100000000000001, 0.24986479177934012], 'true,true,true': [0.15105578699111635, 0.03535055971719667]}, {'': [0.19236877472344222, 0.14486685032139432], 'true': [0.1893614230355716, 0.2370005884570422], 'true,false': [0.23626069056140628, 0.2377225012246274], 'true,false,false': [0.24, 0.23668639053254437], 'true,false,true': [0.24758418852252823, 0.15912672650763865], 'true,true': [0.18593270130402445, 0.23618735318188122], 'true,true,false': [0.2029760771408606, 0.24986479177933985], 'true,true,true': [0.15133010380622702, 0.033732274784810036]}, {'': [0.15790547266515623, 0.14486685032139685], 'true': [0.15433080749837255, 0.23438353463192493], 'true,false': [0.23185447464996287, 0.2357365323307602], 'true,false,false': [0.2342932926580644, 0.23668639053254414], 'true,false,true': [0.219152331689738, 0.25], 'true,true': [0.14892378108213303, 0.23930839970068454], 'true,true,false': [0.21000000000000013, 0.24986479177934], 'true,true,true': [0.15115070255380814, 0.034833580969782216]}, {'': [0.13298286382924193, 0.14486685032139565], 'false': [0.22222222222222207, 0.1294367283950616], 'false,true': [0.0, 0.23765432098765416], 'false,true,false': [0.2448979591836733, 0.18750000000000003], 'true': [0.1290094807292907, 0.2335700312852789], 'true,false': [0.18817304652752814, 0.23676219213685318], 'true,false,false': [0.2302307119096865, 0.24215686795084104], 'false,false': [0.11555555555555559, 0.13100174268373282]}, {'': [0.13004449852568284, 0.1431367460501876], 'false': [0.21629795691473636, 0.12942612745367332], 'false,true': [-2.3129646346357427e-18, 0.23615416820432275], 'false,true,false': [0.24489795918367355, 0.1875], 'true': [0.12640227707850862, 0.232364165424486], 'true,false': [0.1882249061880666, 0.23648534456822592], 'true,false,false': [0.22978484690024775, 0.24215695696793915], 'false,false': [0.13255717118516933, 0.12426820513257403]}, {'': [0.12785486019172249, 0.1416866063246559], 'false': [0.21148566765187377, 0.12941773439422502], 'false,true': [-2.3129646346357427e-18, 0.23483978467070749], 'false,true,false': [0.24489795918367355, 0.18750000000000003], 'false,false': [0.11550062382523775, 0.13099703920318978], 'false,false,false': [0.132963988919667, 0.1281594873620503], 'true': [0.12437751311972939, 0.23169166249502865], 'true,false': [0.1882293816652404, 0.23635577662871013]}, {'': [0.12621759346827274, 0.14056843658029625], 'false': [0.2078039884417021, 0.1294079366918], 'false,true': [-2.3129646346357427e-18, 0.23383053413779312], 'false,true,false': [0.24489795918367352, 0.1875], 'false,false': [0.1155012938950335, 0.13099533848351907], 'false,false,false': [0.13207932310417722, 0.12901701323251427], 'true': [0.12280653447323864, 0.23138911714276647], 'true,false': [0.1882119282836496, 0.23634711224701824]}, {'': [0.12497856096795115, 0.13976868236165163], 'false': [0.2051353569016489, 0.1293999524733483], 'false,true': [2.3129646346357427e-18, 0.23313589045340707], 'false,true,false': [0.24489795918367346, 0.1875], 'false,false': [0.13255402583180104, 0.12422307581063029], 'false,false,true': [0.12832721560529667, 0.22222222222222218], 'true': [0.12158571077600921, 0.2312476357581296], 'true,false': [0.18818797076756516, 0.23636507669875703]}, {'': [0.12402967084709149, 0.13907986573721332], 'false': [0.20327646809028374, 0.1292233110060936], 'false,true': [0.0, 0.23269772704371416], 'false,true,false': [0.2448979591836735, 0.1875], 'false,false': [0.13227931673005092, 0.12422342837271746], 'false,false,true': [0.1283271828687542, 0.22222222222222224], 'true': [0.12063400188164061, 0.23118313023318782], 'true,false': [0.18816435163916362, 0.23639217960628633]}, {'': [0.12329537252397518, 0.1386077300910545], 'false': [0.2020118884818386, 0.12907921290120167], 'false,true': [0.1589291304533715, 0.21126675332812012], 'false,true,false': [0.24489795918367355, 0.0038487306871585053], 'false,false': [0.1320549344955796, 0.12422373489286653], 'false,false,true': [0.1283271544235763, 0.22222222222222224], 'true': [0.11988909361086762, 0.23115486134380245], 'true,false': [0.18814348619163043, 0.23642007785925492]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;false;haswordvenue(B, I), haswordauthor(J, I).;true;true
3;false,true;author(K, J), venue(K, B).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;false;haswordvenue(B, I), haswordauthor(J, I).;true;true
4;false,true;author(K, J), venue(K, B).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;false;haswordvenue(B, G), haswordauthor(H, G).;true;true
5;false,true;author(I, H), venue(I, B).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(B, G), haswordauthor(H, G).;true;true
6;false,true;author(I, H), venue(I, B).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(B, G), haswordauthor(H, G).;true;true
7;false,true;author(I, H), venue(I, B).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(B, G), haswordauthor(H, G).;true;true
8;false,true;author(I, H), venue(I, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.6727029257098368;  // std dev = 8.022, 426.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=347 */
%   | | | else return -0.10515381719406565;  // std dev = 4.808, 654.000 (wgt'ed) examples reached here.  /* #neg=630 #pos=24 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.15814893509951236;  // std dev = 2.049, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
%   | | | else return 0.3465210281227675;  // std dev = 3.278, 43.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.4581489350995123;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | | | else return 0.44638422921715937;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.1914822684328457;  // std dev = 0.471, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
%   | else return 0.010926712877289876;  // std dev = 0.360, 144.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=22 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.5694573859162513;  // std dev = 8.020, 425.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=346 */
%   | | | else return -0.09504130818920743;  // std dev = 4.675, 648.000 (wgt'ed) examples reached here.  /* #neg=625 #pos=23 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.16250579943050034;  // std dev = 2.341, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
%   | | | else return 0.29890536680643803;  // std dev = 3.278, 43.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.5170719622367217;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.3927941835770486;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | | | else return 0.382955427940009;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.16653882456488167;  // std dev = 0.471, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
%   | else return 0.009591399008086492;  // std dev = 0.360, 144.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.45071340141421823;  // std dev = 8.024, 426.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=347 */
%   | | | else return -0.08366967826653897;  // std dev = 4.773, 654.000 (wgt'ed) examples reached here.  /* #neg=630 #pos=24 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.15029190877972537;  // std dev = 2.049, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
%   | | | else return 0.24871740581779708;  // std dev = 3.278, 43.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.41257245288266;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.3230882841242567;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | | else return 0.31419399452726726;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.1420942428155646;  // std dev = 0.471, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
%   | else return 0.008410655575590916;  // std dev = 0.360, 144.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=22 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09414943322216611;  // std dev = 0.359, 1,143.000 (wgt'ed) examples reached here.  /* #neg=745 #pos=398 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.3151786576185065;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.25291912279326084;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | | | else return 0.24611232317817291;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then return -0.21418442842586902;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordtitle(L, I) )
%   | | | then return 0.21438700014555953;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return 0.03581557157413104;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return -0.01207582796015654;  // std dev = 0.340, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else return 0.009629598396432824;  // std dev = 0.362, 129.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=20 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0788619456086866;  // std dev = 0.356, 1,143.000 (wgt'ed) examples reached here.  /* #neg=745 #pos=398 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.23676009386434207;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.19561697980877893;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | | else return 0.1889768848987937;  // std dev = 2.306, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then return -0.1803365365799634;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordtitle(L, I) )
%   | | | then return 0.1761043832199636;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return 0.02972578404701276;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.011087131586309607;  // std dev = 0.364, 89.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=14 */
%   | | else return -0.0010573351761137884;  // std dev = 0.353, 55.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=8 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.0602507787646001;  // std dev = 0.342, 1,073.000 (wgt'ed) examples reached here.  /* #neg=704 #pos=369 */
%   | | else return 0.14929542019934935;  // std dev = 0.480, 70.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=29 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.1780694542720751;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.14680909152619367;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | | | else return 0.14222535878532347;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, A) )
%   | | then if ( samebib(L, M), venue(M, B) )
%   | | | then return 0.457309285482569;  // std dev = 2.461, 28.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=18 */
%   | | | else return -0.16766093086448663;  // std dev = 0.337, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | else return -0.03237224653645598;  // std dev = 0.328, 25.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=3 */
%   | else return -0.008904763961789875;  // std dev = 0.345, 58.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=8 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05437166634342617;  // std dev = 0.350, 1,143.000 (wgt'ed) examples reached here.  /* #neg=745 #pos=398 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.019635042644027673;  // std dev = 1.781, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.31076096935152536;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.11589898743525309;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.12480524369647734;  // std dev = 1.729, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, B) )
%   | | then return -0.1540334030950981;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordtitle(M, J) )
%   | | | then return 0.1052153641400746;  // std dev = 1.644, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return 0.023136435416192258;  // std dev = 0.764, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.0036002215857582503;  // std dev = 0.348, 144.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.040741115088398894;  // std dev = 0.338, 1,073.000 (wgt'ed) examples reached here.  /* #neg=704 #pos=369 */
%   | | else return 0.10931911170523195;  // std dev = 0.479, 70.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=29 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.12438245817165694;  // std dev = 0.859, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.08760711937629015;  // std dev = 1.532, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | | else return 0.07453523239924928;  // std dev = 2.290, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( haswordtitle(K, L), haswordauthor(M, L) )
%   | | then if ( haswordauthor(M, J) )
%   | | | then return 0.014507894667387658;  // std dev = 1.297, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | | else return 0.01033171654075217;  // std dev = 3.384, 91.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=18 */
%   | | else return 0.18892230957330933;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return -0.007233390575535916;  // std dev = 0.345, 58.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=8 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.03366499023794951;  // std dev = 0.337, 1,073.000 (wgt'ed) examples reached here.  /* #neg=704 #pos=369 */
%   | | else return 0.08659216720433606;  // std dev = 0.479, 70.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=29 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.09574734694424972;  // std dev = 0.859, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.06579285063847679;  // std dev = 1.532, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | | else return 0.05599716174750314;  // std dev = 2.290, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, B) )
%   | | then return -0.13417043505302498;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordtitle(M, J) )
%   | | | then return 0.07996706146315567;  // std dev = 1.636, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return 0.01730143048672468;  // std dev = 0.763, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.002131519755541803;  // std dev = 0.347, 144.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=22 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.351478746510782;  // std dev = 0.608, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(E, C) )
%   | | then return 0.029062812729480858;  // std dev = 0.346, 1,139.000 (wgt'ed) examples reached here.  /* #neg=744 #pos=395 */
%   | | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | | then return -0.003196534508826917;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.04443028543288693;  // std dev = 2.755, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return -0.11933447641277635;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordtitle(K, H) )
%   | | | then return 0.06198280012374439;  // std dev = 1.631, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return 0.014244803431427193;  // std dev = 0.762, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0034304183149903955;  // std dev = 0.356, 97.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=15 */
%   | | else return -0.0013802465667246174;  // std dev = 0.328, 47.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=7 */


Results
   AUC ROC   = 0.75447
   AUC PR    = 0.749431
   CLL	      = -0.558168
   Precision = 0.745158 at threshold = 0.5
   Recall    = 0.948119
   F1        = 0.834475


Total learning time: 1368.4827718734741 seconds
Total inference time: 4.603 seconds
AUC ROC: 0.75447


Results scoring model
   AUC ROC   = 0.903918
   AUC PR    = 0.78451
   CLL	      = -0.405259
   Precision = 0.799569 at threshold = 0.5
   Recall    = 0.826281
   F1        = 0.812705


Total scoring time: 20.044 seconds
Refined model CLL: -0.405259


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.75447
   AUC PR    = 0.749431
   CLL	      = -0.558168
   Precision = 0.745158 at threshold = 0.5
   Recall    = 0.948119
   F1        = 0.834475


Total learning time: 2562.1041558914185 seconds
Total inference time: 4.603 seconds
AUC ROC: 0.75447
Total revision time: 2562.1041558914185
Best scored revision CLL: -0.405259


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 11:19:32
{'AUC ROC': 0.75447, 'AUC PR': 0.749431, 'CLL': -0.558168, 'Precision': [0.745158, 0.5], 'Recall': 0.948119, 'F1': 0.834475, 'Learning time': 2562.1041558914185, 'Inference time': 4.603, 'parameter_0.2': {'AUC ROC': 0.741877, 'AUC PR': 0.739211, 'CLL': -0.558944, 'Precision': [0.745158, 0.5], 'Recall': 0.948119, 'F1': 0.834475, 'Learning time': 1156.4783840179443, 'Inference time': 3.802}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.6727029257098368;  // std dev = 8.022, 426.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=347 */
%   | | | else return -0.10515381719406565;  // std dev = 4.808, 654.000 (wgt'ed) examples reached here.  /* #neg=630 #pos=24 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.15814893509951236;  // std dev = 2.049, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
%   | | | else return 0.3465210281227675;  // std dev = 3.278, 43.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.5248156017661789;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.4581489350995123;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | | else return 0.4735335504841277;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   else return 0.033906510857087374;  // std dev = 0.381, 165.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=29 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.5694573859162513;  // std dev = 8.020, 425.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=346 */
%   | | | else return -0.09504130818920743;  // std dev = 4.675, 648.000 (wgt'ed) examples reached here.  /* #neg=625 #pos=23 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.16250579943050034;  // std dev = 2.341, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
%   | | | else return 0.29890536680643803;  // std dev = 3.278, 43.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.5337855905354152;  // std dev = 0.869, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.396302354565888;  // std dev = 1.892, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | | | else return 0.37595360110975135;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.18730451863136502;  // std dev = 0.471, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
%   | else return 0.006748963075809988;  // std dev = 0.360, 144.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=22 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.45071340141421823;  // std dev = 8.024, 426.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=347 */
%   | | | else return -0.08366967826653897;  // std dev = 4.773, 654.000 (wgt'ed) examples reached here.  /* #neg=630 #pos=24 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.15029190877972537;  // std dev = 2.049, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
%   | | | else return 0.24871740581779708;  // std dev = 3.278, 43.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=21 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.3658280567667494;  // std dev = 1.414, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | | else return 0.23991921371216485;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.32021910723736424;  // std dev = 1.549, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | | else return 0.33407894802581095;  // std dev = 1.747, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   else return 0.025818536814691914;  // std dev = 0.379, 165.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=29 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.09414943322216611;  // std dev = 0.359, 1,143.000 (wgt'ed) examples reached here.  /* #neg=745 #pos=398 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.34777389902561373;  // std dev = 0.872, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.2603019212764786;  // std dev = 1.885, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | | | else return 0.23201568921971932;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then return -0.1746576592366521;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordtitle(L, I) )
%   | | | then return 0.25391376933477655;  // std dev = 1.852, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return 0.07534234076334789;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return 0.007166248271902412;  // std dev = 0.364, 89.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=14 */
%   | | else return -0.004682577060068998;  // std dev = 0.353, 55.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=8 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.0788619456086866;  // std dev = 0.356, 1,143.000 (wgt'ed) examples reached here.  /* #neg=745 #pos=398 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.2621312435942751;  // std dev = 0.872, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.1998417820243584;  // std dev = 1.884, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | | | else return 0.17724512519851082;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( haswordtitle(K, I) )
%   | | then return 0.1686052530715588;  // std dev = 0.478, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | | else return 0.021192995818391742;  // std dev = 0.887, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | | then return -0.01751871081790911;  // std dev = 0.340, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | | | then return 0.006840935571923428;  // std dev = 3.179, 76.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=12 */
%   | | | else return 0.0014027733482782738;  // std dev = 2.606, 53.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=8 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.0602507787646001;  // std dev = 0.342, 1,073.000 (wgt'ed) examples reached here.  /* #neg=704 #pos=369 */
%   | | else return 0.14929542019934935;  // std dev = 0.480, 70.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=29 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.19682381181335273;  // std dev = 0.872, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.1511561760876289;  // std dev = 1.884, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | | | else return 0.1337814223386945;  // std dev = 2.029, 17.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=10 */
%   else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, A) )
%   | | then if ( samebib(L, M), venue(M, B) )
%   | | | then return 0.4665635392329456;  // std dev = 2.484, 28.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=18 */
%   | | | else return -0.16411618417625673;  // std dev = 0.217, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | else return -0.03424957902297207;  // std dev = 0.327, 25.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=3 */
%   | else return -0.012602862405949471;  // std dev = 0.345, 58.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=8 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.05437166634342617;  // std dev = 0.350, 1,143.000 (wgt'ed) examples reached here.  /* #neg=745 #pos=398 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.030485691893360714;  // std dev = 1.782, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.2978975515098031;  // std dev = 0.888, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.09759014456036211;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.1256856075192641;  // std dev = 1.734, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, B) )
%   | | then return -0.16532154635390559;  // std dev = 0.016, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordtitle(M, J) )
%   | | | then return 0.14947386254900455;  // std dev = 1.659, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return 0.0584189961237204;  // std dev = 0.774, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -1.8931729608087105E-4;  // std dev = 0.347, 144.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=22 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.044940992396515236;  // std dev = 0.349, 1,143.000 (wgt'ed) examples reached here.  /* #neg=745 #pos=398 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.02296790286580867;  // std dev = 1.782, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.22405248029335817;  // std dev = 0.889, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.07321824666414459;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.09437447293720237;  // std dev = 1.734, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, B) )
%   | | then return -0.14376371519954656;  // std dev = 0.015, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordtitle(M, J) )
%   | | | then return 0.11904344062406125;  // std dev = 1.647, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return 0.04933680331048018;  // std dev = 0.771, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return -1.6494507906969337E-4;  // std dev = 0.347, 144.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=22 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.37902834011084047;  // std dev = 0.630, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( haswordtitle(E, C) )
%   | | then return 0.03582735380306179;  // std dev = 0.347, 1,139.000 (wgt'ed) examples reached here.  /* #neg=744 #pos=395 */
%   | | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | | then return 0.0699170552704964;  // std dev = 1.718, 13.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=8 */
%   | | | else return 0.04565356354328305;  // std dev = 2.283, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | then if ( author(J, I), venue(J, B) )
%   | | then return -0.1269653685569849;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordtitle(K, H) )
%   | | | then return 0.0935775341863471;  // std dev = 1.638, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return 0.04142146231139702;  // std dev = 0.769, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | then return 0.0016212430530132217;  // std dev = 0.356, 97.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=15 */
%   | | else return -0.0037862820523324216;  // std dev = 0.328, 47.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=7 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.030421292787675695;  // std dev = 0.346, 1,143.000 (wgt'ed) examples reached here.  /* #neg=745 #pos=398 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.09347202986629469;  // std dev = 0.844, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.059360553015083806;  // std dev = 1.512, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | | else return 0.03442769223499386;  // std dev = 2.283, 22.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=13 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( author(K, J), venue(K, B) )
%   | | then return -0.11355176296118341;  // std dev = 0.012, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( haswordtitle(L, I) )
%   | | | then return 0.07286837571462258;  // std dev = 1.632, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | | | else return 0.03460246096430883;  // std dev = 0.767, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return -0.009433917633721482;  // std dev = 0.339, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else return 9.55613983613172E-4;  // std dev = 0.348, 129.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=20 */


Results
   AUC ROC   = 0.746402
   AUC PR    = 0.744564
   CLL	      = -0.558464
   Precision = 0.744898 at threshold = 0.5
   Recall    = 0.946822
   F1        = 0.833809


Total learning time: 1215.006828069687 seconds
Total inference time: 4.07 seconds
AUC ROC: 0.746402


Dataset: 3_imdb_cora, Fold: 2, Type: Scratch (RDN-B), Time: 11:39:52
{'AUC ROC': 0.746402, 'AUC PR': 0.744564, 'CLL': -0.558464, 'Precision': [0.744898, 0.5], 'Recall': 0.946822, 'F1': 0.833809, 'Learning time': 1215.006828069687, 'Inference time': 4.07}


Amount of data: 0.4
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.6692349079501864;  // std dev = 11.638, 884.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=717 */
%   | | | else return -0.10956760033356068;  // std dev = 6.299, 1,270.000 (wgt'ed) examples reached here.  /* #neg=1,229 #pos=41 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.1604745164948612;  // std dev = 3.012, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | | | else return 0.31493905855630117;  // std dev = 4.483, 81.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=37 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.40360348055405665;  // std dev = 3.693, 55.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=30 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.12285481745245355;  // std dev = 0.441, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
%   | else return -0.006802833389234166;  // std dev = 0.342, 311.000 (wgt'ed) examples reached here.  /* #neg=269 #pos=42 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.567066039334071;  // std dev = 11.638, 884.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=717 */
%   | | | else return -0.09674597322363056;  // std dev = 6.299, 1,270.000 (wgt'ed) examples reached here.  /* #neg=1,229 #pos=41 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.13979594093445463;  // std dev = 3.012, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | | | else return 0.2721259127835068;  // std dev = 4.483, 81.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=37 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.539188001315861;  // std dev = 0.410, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.3150404050422539;  // std dev = 2.469, 25.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=13 */
%   | | | else return 0.39536144789714966;  // std dev = 2.778, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.10723201841692384;  // std dev = 0.441, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
%   | else return -0.005976744859364556;  // std dev = 0.342, 311.000 (wgt'ed) examples reached here.  /* #neg=269 #pos=42 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.4485978455134028;  // std dev = 11.643, 884.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=717 */
%   | | | else return -0.08613756497408814;  // std dev = 6.426, 1,275.000 (wgt'ed) examples reached here.  /* #neg=1,231 #pos=44 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.13819125553513578;  // std dev = 2.658, 38.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
%   | | | else return 0.22760797996779203;  // std dev = 4.483, 81.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=37 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.6255466294997267;  // std dev = 0.052, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.25324761601199774;  // std dev = 2.572, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return 0.3256343652700986;  // std dev = 2.896, 35.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=21 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.016541557866068316;  // std dev = 0.366, 230.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=37 */
%   | else return -0.01995149127665093;  // std dev = 0.327, 115.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=14 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.0933670250942896;  // std dev = 0.351, 2,154.000 (wgt'ed) examples reached here.  /* #neg=1,396 #pos=758 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.13028868387707981;  // std dev = 2.992, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | | | else return 0.18495406296959713;  // std dev = 4.483, 81.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=37 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.4724123234222736;  // std dev = 0.056, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return 0.3139292209896975;  // std dev = 1.198, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.22206775115406455;  // std dev = 3.681, 55.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=30 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordauthor(M, K) )
%   | | then return 0.11111444890289159;  // std dev = 0.452, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
%   | | else return 0.001094878406547326;  // std dev = 0.351, 202.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=29 */
%   | else return -0.017543233082195017;  // std dev = 0.327, 115.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=14 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.07818982235059144;  // std dev = 0.347, 2,154.000 (wgt'ed) examples reached here.  /* #neg=1,396 #pos=758 */
%   | | else if ( haswordauthor(F, C) )
%   | | | then return 0.4400542607364536;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.12421101541622637;  // std dev = 5.286, 120.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=47 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.3586002538450981;  // std dev = 0.051, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.1482557780168538;  // std dev = 2.563, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return 0.2029259213744882;  // std dev = 2.896, 35.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=21 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordauthor(M, K) )
%   | | then return 0.0945182275642833;  // std dev = 0.452, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
%   | | else return 9.610682637291628E-4;  // std dev = 0.351, 202.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=29 */
%   | else return -0.015454090101486162;  // std dev = 0.327, 115.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=14 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.06504140413531599;  // std dev = 0.345, 2,159.000 (wgt'ed) examples reached here.  /* #neg=1,398 #pos=761 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.10937513688144367;  // std dev = 5.096, 115.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=45 */
%   | | | else return 0.16288155133517468;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.2082828624856935;  // std dev = 0.401, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.10778535097736612;  // std dev = 2.413, 25.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=13 */
%   | | | else return 0.1560266832277416;  // std dev = 2.778, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then if ( title(N, M), venue(N, B) )
%   | | then return 0.02357942328368223;  // std dev = 0.375, 154.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=26 */
%   | | else return -0.01625745743060081;  // std dev = 0.344, 76.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=11 */
%   | else return -0.013635617641879929;  // std dev = 0.327, 115.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=14 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.053944698986876954;  // std dev = 0.343, 2,159.000 (wgt'ed) examples reached here.  /* #neg=1,398 #pos=761 */
%   | | else return 0.0889221577571704;  // std dev = 0.476, 119.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=47 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.1597866506631218;  // std dev = 0.401, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.08219998765642506;  // std dev = 2.414, 25.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=13 */
%   | | | else return 0.11732758848509071;  // std dev = 2.778, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.41834434632328865;  // std dev = 3.354, 46.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=26 */
%   | | | else return -0.14876514214952025;  // std dev = 0.144, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | else return -0.014086905825445856;  // std dev = 0.344, 76.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=11 */
%   | else return -0.012048039839153944;  // std dev = 0.327, 115.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=14 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( haswordauthor(E, C) )
%   | | then return 0.31611731817690575;  // std dev = 0.340, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.043892661645319936;  // std dev = 15.758, 2,149.000 (wgt'ed) examples reached here.  /* #neg=1,395 #pos=754 */
%   | | | else return 0.06258611535919498;  // std dev = 5.284, 120.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=47 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.22971642763797673;  // std dev = 0.071, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.060764725009788155;  // std dev = 2.555, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return 0.0838130524091174;  // std dev = 2.897, 35.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=21 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( title(M, L), venue(M, B) )
%   | | then return 0.015100359623259573;  // std dev = 0.351, 154.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=26 */
%   | | else return -0.012225286531946003;  // std dev = 0.344, 76.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=11 */
%   | else return -0.010658424185367624;  // std dev = 0.327, 115.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=14 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.0366938317543356;  // std dev = 0.339, 2,159.000 (wgt'ed) examples reached here.  /* #neg=1,398 #pos=761 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.06573063501626632;  // std dev = 2.647, 38.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
%   | | | else return 0.05155367249159267;  // std dev = 4.454, 81.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=37 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.0152161387336363;  // std dev = 2.063, 18.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=9 */
%   | | | else return 0.12816021219141083;  // std dev = 1.498, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.05623905739784029;  // std dev = 1.897, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | | | else return 0.07750412968295828;  // std dev = 2.193, 21.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=13 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.07118325649655269;  // std dev = 0.435, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
%   | else return -0.007358821219098358;  // std dev = 0.329, 311.000 (wgt'ed) examples reached here.  /* #neg=269 #pos=42 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.030197050999101565;  // std dev = 0.338, 2,159.000 (wgt'ed) examples reached here.  /* #neg=1,398 #pos=761 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.05527410840385575;  // std dev = 2.646, 38.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
%   | | | else return 0.03911826774516231;  // std dev = 4.454, 81.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=37 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.10256971329968481;  // std dev = 2.282, 25.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=17 */
%   | | | else return -0.13360314895605765;  // std dev = 1.183, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.015035756320417145;  // std dev = 1.806, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | else return 0.058665124452681294;  // std dev = 2.193, 21.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=13 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.059868925426615094;  // std dev = 0.434, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
%   | else return -0.0064678433290262845;  // std dev = 0.329, 311.000 (wgt'ed) examples reached here.  /* #neg=269 #pos=42 */


Results
   AUC ROC   = 0.746767
   AUC PR    = 0.74319
   CLL	      = -0.561959
   Precision = 0.745587 at threshold = 0.5
   Recall    = 0.931258
   F1        = 0.828143


Total learning time: 2963.583060979843 seconds
Total inference time: 6.004 seconds
AUC ROC: 0.746767


Results scoring model
   AUC ROC   = 0.907533
   AUC PR    = 0.788809
   CLL	      = -0.402717
   Precision = 0.80235 at threshold = 0.5
   Recall    = 0.836303
   F1        = 0.818975


Total scoring time: 44.982 seconds
Parameter learned model CLL: -0.402717


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,true': 'samebib(E, F), venue(F, A)', 'true,true,false': 'title(G, D), venue(G, A)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'true,false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true,true': [11.638, 167, 717], 'true,true,true,false': [6.299, 1, 41], 'true,true,false,true': [3.012, 30, 13], 'true,true,false,false': [4.483, 44, 37], 'true,false,true': [0.0, 0, 4], 'true,false,false,true': [1.195, 2, 5], 'true,false,false,false': [3.693, 25, 30], 'false,true': [0.441, 25, 9], 'false,false': [0.342, 269, 42]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,true': 'samebib(E, F), venue(F, A)', 'true,true,false': 'title(G, D), venue(G, A)', 'true,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true,true': [11.638, 167, 717], 'true,true,true,false': [6.299, 1, 41], 'true,true,false,true': [3.012, 30, 13], 'true,true,false,false': [4.483, 44, 37], 'true,false,true': [0.41, 2, 7], 'true,false,false,true': [2.469, 12, 13], 'true,false,false,false': [2.778, 13, 19], 'false,true': [0.441, 25, 9], 'false,false': [0.342, 269, 42]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,true': 'samebib(E, F), venue(F, B)', 'true,true,false': 'title(G, D), venue(G, B)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordtitle(M, L)'}, {'true,true,true,true': [11.643, 167, 717], 'true,true,true,false': [6.426, 1, 44], 'true,true,false,true': [2.658, 28, 10], 'true,true,false,false': [4.483, 44, 37], 'true,false,true': [0.052, 0, 4], 'true,false,false,true': [2.572, 13, 14], 'true,false,false,false': [2.896, 14, 21], 'false,true': [0.366, 193, 37], 'false,false': [0.327, 101, 14]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(B, I), haswordauthor(J, I)', 'false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,true': 'haswordauthor(M, K)'}, {'true,true,true': [0.351, 1, 758], 'true,true,false,true': [2.992, 30, 13], 'true,true,false,false': [4.483, 44, 37], 'true,false,true': [0.056, 0, 4], 'true,false,false,true': [1.198, 2, 5], 'true,false,false,false': [3.681, 25, 30], 'false,true,true': [0.452, 20, 8], 'false,true,false': [0.351, 173, 29], 'false,false': [0.327, 101, 14]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'haswordauthor(F, C)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,true': 'haswordauthor(M, K)'}, {'true,true,true': [0.347, 1, 758], 'true,true,false,true': [0.866, 1, 3], 'true,true,false,false': [5.286, 73, 47], 'true,false,true': [0.051, 0, 4], 'true,false,false,true': [2.563, 13, 14], 'true,false,false,false': [2.896, 14, 21], 'false,true,true': [0.452, 20, 8], 'false,true,false': [0.351, 173, 29], 'false,false': [0.327, 101, 14]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordtitle(M, L)', 'false,true': 'title(N, M), venue(N, B)'}, {'true,true,true': [0.345, 1, 761], 'true,true,false,true': [5.096, 70, 45], 'true,true,false,false': [1.0, 2, 2], 'true,false,true': [0.401, 2, 7], 'true,false,false,true': [2.413, 12, 13], 'true,false,false,false': [2.778, 13, 19], 'false,true,true': [0.375, 128, 26], 'false,true,false': [0.344, 65, 11], 'false,false': [0.327, 101, 14]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,false': 'haswordvenue(B, F), haswordauthor(G, F)', 'true,false,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false,true': 'title(L, K), venue(L, B)', 'false,true,true': 'samebib(L, M), venue(M, A)'}, {'true,true,true': [0.343, 1, 761], 'true,true,false': [0.476, 72, 47], 'true,false,true': [0.401, 2, 7], 'true,false,false,true': [2.414, 12, 13], 'true,false,false,false': [2.778, 13, 19], 'false,true,true,true': [3.354, 20, 26], 'false,true,true,false': [0.144, 108, 0], 'false,true,false': [0.344, 65, 11], 'false,false': [0.327, 101, 14]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'haswordauthor(E, C)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,true': 'title(M, L), venue(M, B)'}, {'true,true,true': [0.34, 2, 7], 'true,true,false,true': [15.758, 1, 754], 'true,true,false,false': [5.284, 73, 47], 'true,false,true': [0.071, 0, 4], 'true,false,false,true': [2.555, 13, 14], 'true,false,false,false': [2.897, 14, 21], 'false,true,true': [0.351, 128, 26], 'false,true,false': [0.344, 65, 11], 'false,false': [0.327, 101, 14]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'title(I, H), venue(I, B)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true': [0.339, 1, 761], 'true,true,false,true': [2.647, 28, 10], 'true,true,false,false': [4.454, 44, 37], 'true,false,true,true': [2.063, 9, 9], 'true,false,true,false': [1.498, 4, 7], 'true,false,false,true': [1.897, 6, 10], 'true,false,false,false': [2.193, 8, 13], 'false,true': [0.435, 25, 9], 'false,false': [0.329, 269, 42]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'true,false,true': 'haswordtitle(H, I), haswordauthor(J, I)', 'true,false,false': 'haswordvenue(A, K), haswordtitle(L, K)', 'false': 'haswordvenue(B, M), haswordauthor(N, M)'}, {'true,true,true': [0.338, 1, 761], 'true,true,false,true': [2.646, 28, 10], 'true,true,false,false': [4.454, 44, 37], 'true,false,true,true': [2.282, 8, 17], 'true,false,true,false': [1.183, 4, 2], 'true,false,false,true': [1.806, 7, 7], 'true,false,false,false': [2.193, 8, 13], 'false,true': [0.434, 25, 9], 'false,false': [0.329, 269, 42]}]]
[{'': [0.23077565696749075, 0.12597353497164565], 'true': [0.22888706804255218, 0.2417355371900839], 'true,false': [0.0, 0.24583766909469476], 'true,false,false': [0.20408163265306106, 0.2479338842975222], 'true,true': [0.22806740757410862, 0.24063475546305957], 'true,true,false': [0.2109248242293126, 0.24813290656912218], 'true,true,true': [0.15322551749556518, 0.031241242482485658], 'false': [0.19463667820069216, 0.11681020667693784]}, {'': [0.19332173279512388, 0.1256186356996017], 'true': [0.19084978733533164, 0.23735386587408297], 'true,false': [0.1680166814106195, 0.24392992572825004], 'true,false,false': [0.24378835280761, 0.24121093749999944], 'true,true': [0.1879274569800859, 0.23919677813994594], 'true,true,false': [0.21092482422931313, 0.24813290656911988], 'true,true,true': [0.15322551749553445, 0.031241242482485217], 'false': [0.19463667820069208, 0.11681020667693809]}, {'': [0.1584971970029223, 0.12532859611408295], 'true': [0.15539637839576836, 0.23475534855104324], 'true,false': [0.0006874521242079545, 0.2431989572260688], 'true,false,false': [0.24492254691583093, 0.23958746444815604], 'true,true': [0.1510540861118522, 0.23001874606000158], 'true,true,false': [0.18596476943027046, 0.24813290656912096], 'true,true,true': [0.1533392496314574, 0.03239110859193947], 'false': [0.13417706144715422, 0.10674383702412685]}, {'': [0.13327337118412216, 0.12525594858912573], 'true': [0.12980760342538858, 0.23112670296902338], 'true,false': [0.000778615587763265, 0.24249774284223802], 'true,false,false': [0.20486566940036166, 0.24633454224465332], 'true,true': [0.12346668210598154, 0.23496750241529707], 'true,true,false': [0.20821551798014393, 0.24813290656912018], 'false': [0.13416908256806062, 0.10674565656167825], 'false,true': [0.2040816326530612, 0.12300466636759373]}, {'': [0.13026767966731875, 0.12496141790789954], 'true': [0.1270682154186747, 0.22920492547702465], 'true,false': [0.0006627659050560675, 0.2419972236399038], 'true,false,false': [0.24336876089931236, 0.23963759571576376], 'true,true': [0.12071065429621146, 0.23451766080278239], 'true,true,false': [0.1875, 0.23286694985273268], 'false': [0.1338107959588864, 0.10674725996271348], 'false,true': [0.20408163265306153, 0.12300470838718112]}, {'': [0.12796870491910953, 0.12473546008807945], 'true': [0.12489570185335824, 0.22820758074940775], 'true,false': [0.16064727583205396, 0.2381400365804609], 'true,false,false': [0.2329027704842703, 0.24121093749999975], 'true,true': [0.11917074771152496, 0.22674571477821506], 'true,true,false': [0.22584063691895978, 0.25], 'false': [0.13353602708197018, 0.10674867473167915], 'false,true': [0.14056638328406007, 0.11822772066049884]}, {'': [0.1262953103467049, 0.12466477386693794], 'true': [0.12327164237058695, 0.22781960906094428], 'true,false': [0.16095636773667604, 0.23792035437416986], 'true,false,false': [0.23301566504539994, 0.24121093750000003], 'false': [0.1334722838502901, 0.106749924552007], 'false,true': [0.14057259014791718, 0.11827776281565713], 'false,true,true': [0.24461330420526906, 0.00019268054832320022], 'true,true': [0.11751550089876174, 0.22654498230293332]}, {'': [0.12503257448971875, 0.11679334944757098], 'true': [0.12202025027275891, 0.22765317634979898], 'true,false': [0.001250528473042134, 0.24078601363259533], 'true,false,false': [0.24180120195527288, 0.2397715282633349], 'true,true': [0.11563501278130528, 0.12175491852132712], 'true,true,false': [0.11554454259100422, 0.23264143661121445], 'false': [0.1217212178535945, 0.10675102986346796], 'false,true': [0.12315245225737916, 0.11832112670267592]}, {'': [0.12395516985328825, 0.11669108118282392], 'true': [0.1209431734699178, 0.22725278284396946], 'true,false': [0.22714707311086002, 0.22728945972400033], 'true,false,false': [0.22489400610267166, 0.22891901987234617], 'true,false,true': [0.2364475425914901, 0.2040103800472943], 'true,true': [0.11515261456956374, 0.22564423714181178], 'true,true,false': [0.18439813956043832, 0.24493007774093134], 'false': [0.18898657557857726, 0.10817944826929796]}, {'': [0.12319954013772742, 0.1165489440418664], 'true': [0.12018985375874905, 0.22677727626879968], 'true,false': [0.22182851759021102, 0.23104548991295978], 'true,false,false': [0.2329793020502999, 0.2289948731159514], 'true,false,true': [0.20831832555466018, 0.23313903209365927], 'true,true': [0.11436903696470474, 0.22560820506633225], 'true,true,false': [0.18425794828169023, 0.24492374285504132], 'false': [0.18878718073874234, 0.10821783718005683]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(B, J), haswordtitle(K, J).;true;true
6;false,true;title(L, K), venue(L, B).;true;true
6;false,true,true;samebib(L, M), venue(M, A).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,false;haswordvenue(A, G), haswordauthor(H, G).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.6692349079501864;  // std dev = 11.638, 884.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=717 */
%   | | | else return -0.10956760033356068;  // std dev = 6.299, 1,270.000 (wgt'ed) examples reached here.  /* #neg=1,229 #pos=41 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.1604745164948612;  // std dev = 3.012, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | | | else return 0.31493905855630117;  // std dev = 4.483, 81.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=37 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.35814893509951234;  // std dev = 2.121, 18.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=9 */
%   | | | else return 0.4945125714631487;  // std dev = 1.595, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.45189893509951223;  // std dev = 2.778, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   else return 0.0059750220560339535;  // std dev = 0.355, 345.000 (wgt'ed) examples reached here.  /* #neg=294 #pos=51 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.567066039334071;  // std dev = 11.638, 884.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=717 */
%   | | | else return -0.09674597322363056;  // std dev = 6.299, 1,270.000 (wgt'ed) examples reached here.  /* #neg=1,229 #pos=41 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.13979594093445463;  // std dev = 3.012, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | | | else return 0.2721259127835068;  // std dev = 4.483, 81.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=37 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.7723881971556034;  // std dev = 0.029, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.501288935286872;  // std dev = 1.203, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.3419163183081102;  // std dev = 3.686, 55.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=30 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.018289607199117264;  // std dev = 0.367, 230.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=37 */
%   | else return -0.02084082758349139;  // std dev = 0.327, 115.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=14 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( haswordauthor(E, C) )
%   | | then return 0.5015513093822409;  // std dev = 0.367, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.1319890481585457;  // std dev = 18.029, 2,154.000 (wgt'ed) examples reached here.  /* #neg=1,397 #pos=757 */
%   | | | else return 0.18786297966680224;  // std dev = 5.118, 115.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=44 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.24335128156577168;  // std dev = 2.107, 18.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=9 */
%   | | | else return 0.34317612852702084;  // std dev = 1.557, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.4294599846183077;  // std dev = 0.868, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.3260228345248581;  // std dev = 2.778, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.12057821430049863;  // std dev = 0.441, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
%   | else return -0.008091815752334579;  // std dev = 0.342, 311.000 (wgt'ed) examples reached here.  /* #neg=269 #pos=42 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.41717302835202236;  // std dev = 11.639, 884.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=717 */
%   | | | else return -0.1008745086220143;  // std dev = 6.419, 1,275.000 (wgt'ed) examples reached here.  /* #neg=1,231 #pos=44 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.11649822029942239;  // std dev = 2.654, 38.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
%   | | | else return 0.1895271699712734;  // std dev = 4.468, 81.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=37 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.3664475606997512;  // std dev = 0.411, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.19098805563463878;  // std dev = 2.441, 25.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=13 */
%   | | | else return 0.25752483354215416;  // std dev = 2.778, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.10505747708045075;  // std dev = 0.441, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
%   | else return -0.007102251587399791;  // std dev = 0.342, 311.000 (wgt'ed) examples reached here.  /* #neg=269 #pos=42 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.07564443725708109;  // std dev = 0.347, 2,154.000 (wgt'ed) examples reached here.  /* #neg=1,396 #pos=758 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.1130417239821173;  // std dev = 2.992, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | | | else return 0.15086217116295428;  // std dev = 4.467, 81.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=37 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.44735469517934234;  // std dev = 0.105, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return 0.24450071643971652;  // std dev = 1.220, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.16419030068533266;  // std dev = 3.672, 55.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=30 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.11064241388084935;  // std dev = 0.452, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
%   | | else return -0.0037555136814064936;  // std dev = 0.914, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else return -0.006238412169687439;  // std dev = 0.342, 311.000 (wgt'ed) examples reached here.  /* #neg=269 #pos=42 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.06294487505773387;  // std dev = 0.344, 2,154.000 (wgt'ed) examples reached here.  /* #neg=1,396 #pos=758 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.09510684537122205;  // std dev = 2.991, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | | | else return 0.11796407388928101;  // std dev = 4.466, 81.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=37 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.3421004607811602;  // std dev = 0.095, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.10735280773760063;  // std dev = 2.560, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return 0.15029114042363526;  // std dev = 2.900, 35.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=21 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( title(M, L), venue(M, B) )
%   | | then return 0.024499067144428125;  // std dev = 0.375, 154.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=26 */
%   | | else return -0.011768949786882851;  // std dev = 0.345, 76.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=11 */
%   | else return -0.017119005842983436;  // std dev = 0.327, 115.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=14 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.05218220916806428;  // std dev = 0.343, 2,159.000 (wgt'ed) examples reached here.  /* #neg=1,398 #pos=761 */
%   | | else return 0.0882452607870908;  // std dev = 0.476, 119.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=47 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.170413982859623;  // std dev = 0.409, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.07360725407103935;  // std dev = 2.408, 25.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=13 */
%   | | | else return 0.12076258252659029;  // std dev = 2.778, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( haswordtitle(L, J) )
%   | | then if ( author(M, K), title(M, L) )
%   | | | then return 0.054546803993984476;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.1013837218084462;  // std dev = 2.228, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
%   | | else return -0.0018263911916135227;  // std dev = 0.915, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else return -0.005946364746871039;  // std dev = 0.341, 311.000 (wgt'ed) examples reached here.  /* #neg=269 #pos=42 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0832876312625805;  // std dev = 0.316, 67.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=29 */
%   | else if ( haswordtitle(F, C) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.042585863146018796;  // std dev = 15.663, 2,100.000 (wgt'ed) examples reached here.  /* #neg=1,361 #pos=739 */
%   | | | else return 0.06287202059318765;  // std dev = 5.284, 120.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=47 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.055779144631005015;  // std dev = 2.409, 25.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=13 */
%   | | | else return 0.09059830546523899;  // std dev = 2.778, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( haswordauthor(L, J) )
%   | | then if ( author(M, L), title(M, K) )
%   | | | then return 0.04582655194058526;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.08527111026563965;  // std dev = 2.228, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
%   | | else return 1.0803834174037782E-4;  // std dev = 0.350, 202.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=29 */
%   | else return -0.01440956415656164;  // std dev = 0.327, 115.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=14 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03649920655600325;  // std dev = 0.348, 2,278.000 (wgt'ed) examples reached here.  /* #neg=1,470 #pos=808 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.10292883277594679;  // std dev = 1.910, 17.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=11 */
%   | | | else return 0.030849780049115712;  // std dev = 1.801, 14.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=8 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.02896419809812174;  // std dev = 1.815, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | else return 0.07959211854894498;  // std dev = 2.194, 21.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=13 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.14530687025175668;  // std dev = 1.156, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( haswordtitle(M, J) )
%   | | | then return 0.05964749007574785;  // std dev = 2.246, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
%   | | | else return -0.16883369752452113;  // std dev = 0.011, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.004645182850968771;  // std dev = 0.341, 311.000 (wgt'ed) examples reached here.  /* #neg=269 #pos=42 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.029934412864024033;  // std dev = 0.347, 2,278.000 (wgt'ed) examples reached here.  /* #neg=1,470 #pos=808 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.0960403118526716;  // std dev = 2.299, 25.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=17 */
%   | | | else return -0.12375296668564943;  // std dev = 1.184, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.021893742386989927;  // std dev = 1.815, 14.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=7 */
%   | | | else return 0.06017869117968876;  // std dev = 2.194, 21.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=13 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then return -0.006146817276235039;  // std dev = 0.345, 225.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=32 */
%   | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | then if ( title(P, N), venue(P, B) )
%   | | | then return 0.03864193292359765;  // std dev = 3.948, 103.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=19 */
%   | | | else return -0.1395034457878354;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return -0.13257064471931296;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */


Results
   AUC ROC   = 0.738082
   AUC PR    = 0.748382
   CLL	      = -0.566184
   Precision = 0.745587 at threshold = 0.5
   Recall    = 0.931258
   F1        = 0.828143


Total learning time: 2674.0088131427765 seconds
Total inference time: 5.35 seconds
AUC ROC: 0.738082


Results scoring model
   AUC ROC   = 0.886892
   AUC PR    = 0.77979
   CLL	      = -0.407317
   Precision = 0.801282 at threshold = 0.5
   Recall    = 0.835189
   F1        = 0.817884


Total scoring time: 40.284 seconds
Refined model CLL: -0.407317


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.746767
   AUC PR    = 0.74319
   CLL	      = -0.561959
   Precision = 0.745587 at threshold = 0.5
   Recall    = 0.931258
   F1        = 0.828143


Total learning time: 5722.857874122619 seconds
Total inference time: 6.004 seconds
AUC ROC: 0.746767
Total revision time: 5722.857874122619
Best scored revision CLL: -0.402717


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 13:15:30
{'AUC ROC': 0.746767, 'AUC PR': 0.74319, 'CLL': -0.561959, 'Precision': [0.745587, 0.5], 'Recall': 0.931258, 'F1': 0.828143, 'Learning time': 5722.857874122619, 'Inference time': 6.004, 'parameter_0.4': {'AUC ROC': 0.746767, 'AUC PR': 0.74319, 'CLL': -0.561959, 'Precision': [0.745587, 0.5], 'Recall': 0.931258, 'F1': 0.828143, 'Learning time': 2963.583060979843, 'Inference time': 6.004}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.6692349079501864;  // std dev = 11.638, 884.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=717 */
%   | | | else return -0.10956760033356068;  // std dev = 6.299, 1,270.000 (wgt'ed) examples reached here.  /* #neg=1,229 #pos=41 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.1604745164948612;  // std dev = 3.012, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | | | else return 0.31493905855630117;  // std dev = 4.483, 81.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=37 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.40360348055405665;  // std dev = 3.693, 55.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=30 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.12285481745245355;  // std dev = 0.441, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
%   | else return -0.006802833389234166;  // std dev = 0.342, 311.000 (wgt'ed) examples reached here.  /* #neg=269 #pos=42 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( samebib(E, F), venue(F, A) )
%   | | | then return 0.567066039334071;  // std dev = 11.638, 884.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=717 */
%   | | | else return -0.09674597322363056;  // std dev = 6.299, 1,270.000 (wgt'ed) examples reached here.  /* #neg=1,229 #pos=41 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.2232673436528227;  // std dev = 5.350, 120.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=48 */
%   | | | else return 0.31533578932671597;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.48767788391726297;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.3470659933516941;  // std dev = 3.693, 55.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=30 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.10723201841692384;  // std dev = 0.441, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
%   | else return -0.005976744859364556;  // std dev = 0.342, 311.000 (wgt'ed) examples reached here.  /* #neg=269 #pos=42 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.44858338511241547;  // std dev = 11.642, 884.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=717 */
%   | | | else return -0.08655865185083744;  // std dev = 6.411, 1,275.000 (wgt'ed) examples reached here.  /* #neg=1,231 #pos=44 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.13819125553513578;  // std dev = 2.658, 38.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
%   | | | else return 0.23532288993768316;  // std dev = 4.483, 81.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=37 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.24973149542414852;  // std dev = 2.576, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return 0.3351884576713857;  // std dev = 2.896, 35.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=21 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.016541557866068316;  // std dev = 0.366, 230.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=37 */
%   | else return -0.01995149127665093;  // std dev = 0.327, 115.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=14 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.09337249077504034;  // std dev = 0.352, 2,159.000 (wgt'ed) examples reached here.  /* #neg=1,398 #pos=761 */
%   | | else if ( haswordauthor(F, C) )
%   | | | then return 0.4862310970551821;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.15889089351219057;  // std dev = 5.109, 115.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=44 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.19807455094243723;  // std dev = 2.575, 27.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=14 */
%   | | | else return 0.2651872183982939;  // std dev = 2.896, 35.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=21 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.11111444890289159;  // std dev = 0.452, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
%   | | else return -0.0036024226534478823;  // std dev = 0.914, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else return -0.0057064045993862784;  // std dev = 0.342, 311.000 (wgt'ed) examples reached here.  /* #neg=269 #pos=42 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.0780655312731432;  // std dev = 0.347, 2,154.000 (wgt'ed) examples reached here.  /* #neg=1,396 #pos=758 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.10372390469045926;  // std dev = 2.990, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
%   | | | else return 0.15649352963308272;  // std dev = 4.466, 81.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=37 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.28176784945671307;  // std dev = 0.401, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.13998155298563067;  // std dev = 2.410, 25.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=13 */
%   | | | else return 0.20414071146293888;  // std dev = 2.778, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.0945182275642833;  // std dev = 0.452, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
%   | | else return -0.00309409912416328;  // std dev = 0.914, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else return -0.005017695061168845;  // std dev = 0.342, 311.000 (wgt'ed) examples reached here.  /* #neg=269 #pos=42 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.06500370074922152;  // std dev = 0.345, 2,159.000 (wgt'ed) examples reached here.  /* #neg=1,398 #pos=761 */
%   | | else if ( haswordauthor(F, C) )
%   | | | then return 0.3447762934919887;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.10476492689077357;  // std dev = 5.100, 115.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=44 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.21434326901258935;  // std dev = 0.401, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.10759052422895955;  // std dev = 2.411, 25.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=13 */
%   | | | else return 0.1546496748007834;  // std dev = 2.778, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( title(M, L), venue(M, B) )
%   | | then return 0.0250719884955349;  // std dev = 0.375, 154.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=26 */
%   | | else return -0.015152537838779132;  // std dev = 0.344, 76.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=11 */
%   | else return -0.016287499271976258;  // std dev = 0.327, 115.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=14 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.05391195062022886;  // std dev = 0.343, 2,159.000 (wgt'ed) examples reached here.  /* #neg=1,398 #pos=761 */
%   | | else return 0.08988425133899422;  // std dev = 0.475, 119.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=47 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.16428867052949625;  // std dev = 0.401, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.08211525535818179;  // std dev = 2.411, 25.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=13 */
%   | | | else return 0.116275857432676;  // std dev = 2.778, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( haswordtitle(L, J) )
%   | | then if ( author(M, K), title(M, L) )
%   | | | then return 0.039625073854763465;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.08734555499696543;  // std dev = 2.228, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
%   | | else return -0.0013718843211374214;  // std dev = 0.915, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | else return -0.004870250450130506;  // std dev = 0.341, 311.000 (wgt'ed) examples reached here.  /* #neg=269 #pos=42 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0867265690488839;  // std dev = 0.317, 67.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=29 */
%   | else if ( haswordtitle(F, C) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.04384088246097816;  // std dev = 15.638, 2,100.000 (wgt'ed) examples reached here.  /* #neg=1,361 #pos=739 */
%   | | | else return 0.06646284708579517;  // std dev = 5.283, 120.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=47 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.06241796644362342;  // std dev = 2.412, 25.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=13 */
%   | | | else return 0.08722252244999866;  // std dev = 2.778, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.14181516141892878;  // std dev = 1.156, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( haswordtitle(M, J) )
%   | | | then return 0.06118633352706505;  // std dev = 2.247, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
%   | | | else return -0.1696902715501953;  // std dev = 0.009, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.004285271353863427;  // std dev = 0.341, 311.000 (wgt'ed) examples reached here.  /* #neg=269 #pos=42 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.03661634935906711;  // std dev = 0.339, 2,159.000 (wgt'ed) examples reached here.  /* #neg=1,398 #pos=761 */
%   | | else return 0.05813571995190473;  // std dev = 0.475, 119.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=47 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.10844637403975017;  // std dev = 0.402, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | | then return 0.047338499369189616;  // std dev = 2.413, 25.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=13 */
%   | | | else return 0.06544680969389993;  // std dev = 2.778, 32.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=19 */
%   else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | then if ( title(L, K), venue(L, B) )
%   | | then if ( samebib(L, M), venue(M, A) )
%   | | | then return 0.42011737152101175;  // std dev = 3.351, 46.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=26 */
%   | | | else return -0.14738925145586115;  // std dev = 0.205, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | else return -0.019647004493200417;  // std dev = 0.341, 76.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=11 */
%   | else return -0.013486891471542629;  // std dev = 0.326, 115.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=14 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.06371245831426134;  // std dev = 0.285, 62.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=25 */
%   | else if ( haswordtitle(F, C) )
%   | | then if ( title(G, F), venue(G, B) )
%   | | | then return 0.029739213442177108;  // std dev = 15.522, 2,100.000 (wgt'ed) examples reached here.  /* #neg=1,360 #pos=740 */
%   | | | else return 0.040621864776115506;  // std dev = 5.283, 120.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=47 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.06224900437885413;  // std dev = 1.200, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.03642692016333433;  // std dev = 3.670, 55.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=30 */
%   else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | then if ( author(L, K), venue(L, A) )
%   | | then return 0.11450995034168703;  // std dev = 1.096, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( haswordtitle(M, J) )
%   | | | then return 0.05662190494504622;  // std dev = 2.239, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
%   | | | else return -0.1399349635386934;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.005815968889239695;  // std dev = 0.329, 311.000 (wgt'ed) examples reached here.  /* #neg=269 #pos=42 */


Results
   AUC ROC   = 0.752693
   AUC PR    = 0.760467
   CLL	      = -0.561883
   Precision = 0.745322 at threshold = 0.5
   Recall    = 0.929961
   F1        = 0.827467


Total learning time: 2917.288465976715 seconds
Total inference time: 5.951 seconds
AUC ROC: 0.752693


Dataset: 3_imdb_cora, Fold: 2, Type: Scratch (RDN-B), Time: 14:04:15
{'AUC ROC': 0.752693, 'AUC PR': 0.760467, 'CLL': -0.561883, 'Precision': [0.745322, 0.5], 'Recall': 0.929961, 'F1': 0.827467, 'Learning time': 2917.288465976715, 'Inference time': 5.951}


Amount of data: 0.6
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( title(F, D), venue(F, A) )
%   | | | then return 0.649815601766174;  // std dev = 14.620, 1,296.000 (wgt'ed) examples reached here.  /* #neg=270 #pos=1,026 */
%   | | | else return -0.08406865990309281;  // std dev = 10.227, 1,921.000 (wgt'ed) examples reached here.  /* #neg=1,810 #pos=111 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.14847151574467365;  // std dev = 3.574, 62.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=18 */
%   | | | else return 0.2708473477979261;  // std dev = 5.526, 126.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=52 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.35814893509951234;  // std dev = 2.739, 30.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return 0.4581489350995123;  // std dev = 1.897, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.4295775065280827;  // std dev = 3.464, 49.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=28 */
%   else return 0.016939105231837316;  // std dev = 0.365, 529.000 (wgt'ed) examples reached here.  /* #neg=445 #pos=84 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( title(F, D), venue(F, A) )
%   | | | then return 0.5512112630945113;  // std dev = 14.620, 1,296.000 (wgt'ed) examples reached here.  /* #neg=270 #pos=1,026 */
%   | | | else return -0.07413983247209854;  // std dev = 10.227, 1,921.000 (wgt'ed) examples reached here.  /* #neg=1,810 #pos=111 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.12942010309038157;  // std dev = 3.574, 62.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=18 */
%   | | | else return 0.23458071598828809;  // std dev = 5.526, 126.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=52 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.7754067590994517;  // std dev = 0.035, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.31785857484700236;  // std dev = 3.524, 50.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=26 */
%   | | | else return 0.3783257683305271;  // std dev = 3.314, 45.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=26 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.0760744130488669;  // std dev = 0.414, 50.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=11 */
%   | else return 0.008475248121934988;  // std dev = 0.359, 479.000 (wgt'ed) examples reached here.  /* #neg=406 #pos=73 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( title(F, D), venue(F, A) )
%   | | | then return 0.4370880072722592;  // std dev = 14.620, 1,296.000 (wgt'ed) examples reached here.  /* #neg=270 #pos=1,026 */
%   | | | else return -0.06587865560423371;  // std dev = 10.227, 1,921.000 (wgt'ed) examples reached here.  /* #neg=1,810 #pos=111 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.1111713212860947;  // std dev = 3.574, 62.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=18 */
%   | | | else return 0.19761844416557925;  // std dev = 5.526, 126.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=52 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.3466937745630329;  // std dev = 3.013, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   | | | else return 0.06138533168758083;  // std dev = 1.667, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.3126495688839814;  // std dev = 2.137, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.33168392487358256;  // std dev = 2.567, 28.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=17 */
%   else return 0.013006030990401709;  // std dev = 0.365, 529.000 (wgt'ed) examples reached here.  /* #neg=445 #pos=84 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.37560299032226074;  // std dev = 14.118, 1,321.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=1,077 */
%   | | | else return -0.09490092279435089;  // std dev = 8.179, 1,896.000 (wgt'ed) examples reached here.  /* #neg=1,832 #pos=64 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.10910941964823563;  // std dev = 3.292, 62.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=14 */
%   | | | else return 0.1623872593685047;  // std dev = 5.526, 126.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=52 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.5328636504606377;  // std dev = 0.053, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.20533538638121968;  // std dev = 3.483, 50.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=26 */
%   | | | else return 0.24316750994103375;  // std dev = 3.314, 45.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=26 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.06474691092136398;  // std dev = 0.414, 50.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=11 */
%   | else return 0.005808220614980897;  // std dev = 0.359, 479.000 (wgt'ed) examples reached here.  /* #neg=406 #pos=73 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.06982709000956853;  // std dev = 0.349, 3,405.000 (wgt'ed) examples reached here.  /* #neg=2,198 #pos=1,207 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.33467103979930735;  // std dev = 0.403, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.13980220683092176;  // std dev = 3.243, 44.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=22 */
%   | | | else return 0.1923662363899977;  // std dev = 3.322, 46.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=27 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordauthor(K, I) )
%   | | then if ( author(L, K), title(L, J) )
%   | | | then return 0.0027312810259785547;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.1007704967122533;  // std dev = 2.572, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
%   | | else if ( title(M, J), venue(M, B) )
%   | | | then return 0.03587414380425121;  // std dev = 5.996, 240.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=44 */
%   | | | else return -0.06837336567852043;  // std dev = 2.351, 76.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=6 */
%   | else return -0.009360717985867224;  // std dev = 0.346, 173.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=24 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.058598569723213416;  // std dev = 0.347, 3,405.000 (wgt'ed) examples reached here.  /* #neg=2,198 #pos=1,207 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.34397528208811307;  // std dev = 0.085, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.12994467892252642;  // std dev = 0.492, 95.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=52 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( haswordtitle(I, G) )
%   | | then if ( author(J, H), title(J, I) )
%   | | | then return 0.18718458999723006;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.15467065181993406;  // std dev = 2.756, 36.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return -0.15368048118784294;  // std dev = 0.030, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | then if ( haswordauthor(M, K) )
%   | | | then return 0.06652820257816211;  // std dev = 2.605, 37.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=9 */
%   | | | else return -0.00422296112634386;  // std dev = 5.842, 277.000 (wgt'ed) examples reached here.  /* #neg=237 #pos=40 */
%   | | else return -0.0066094374040236116;  // std dev = 0.347, 164.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=23 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04903560127864359;  // std dev = 0.346, 3,405.000 (wgt'ed) examples reached here.  /* #neg=2,198 #pos=1,207 */
%   | else if ( haswordvenue(A, E), haswordtitle(F, E) )
%   | | then return 0.09164590036593355;  // std dev = 0.483, 45.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=24 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.16490749768175855;  // std dev = 0.826, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.11169076648329544;  // std dev = 3.450, 49.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=28 */
%   else if ( haswordvenue(A, I), haswordauthor(J, I) )
%   | then if ( haswordtitle(K, I) )
%   | | then return 0.13596475354594217;  // std dev = 0.460, 39.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=12 */
%   | | else return -0.13474771328442314;  // std dev = 0.027, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | then if ( haswordtitle(N, L) )
%   | | | then return 0.056641528475058336;  // std dev = 2.604, 37.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=9 */
%   | | | else return -0.03757843138000734;  // std dev = 0.936, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return -0.003856453636913597;  // std dev = 0.350, 433.000 (wgt'ed) examples reached here.  /* #neg=371 #pos=62 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.09787204288589889;  // std dev = 0.341, 105.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=44 */
%   | else if ( haswordtitle(F, C) )
%   | | then return 0.039523165401546816;  // std dev = 0.345, 3,309.000 (wgt'ed) examples reached here.  /* #neg=2,139 #pos=1,170 */
%   | | else return 0.06909150479770287;  // std dev = 0.489, 90.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=49 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( haswordtitle(I, G) )
%   | | then return 0.11576158236490149;  // std dev = 0.460, 39.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=12 */
%   | | else return -0.11980297066082972;  // std dev = 0.025, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return -0.17722791401324312;  // std dev = 0.016, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.0541639511297457;  // std dev = 2.740, 41.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=10 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return -0.013031145754387238;  // std dev = 5.432, 258.000 (wgt'ed) examples reached here.  /* #neg=224 #pos=34 */
%   | | | else return 0.01086459691850547;  // std dev = 4.843, 175.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=28 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03408062714962724;  // std dev = 0.343, 3,405.000 (wgt'ed) examples reached here.  /* #neg=2,198 #pos=1,207 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.052862688757057096;  // std dev = 0.481, 52.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=28 */
%   | | else return 0.07227996141052415;  // std dev = 0.485, 47.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=28 */
%   else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | then if ( haswordtitle(I, G) )
%   | | then return 0.09717220621732851;  // std dev = 0.460, 39.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=12 */
%   | | else return -0.10773912418537034;  // std dev = 0.022, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | then if ( author(L, K), venue(L, B) )
%   | | | then return -0.15285337286089948;  // std dev = 0.014, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.04570977913470547;  // std dev = 2.739, 41.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=10 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return -0.01142500988094738;  // std dev = 5.432, 258.000 (wgt'ed) examples reached here.  /* #neg=224 #pos=34 */
%   | | | else return 0.009480874295838939;  // std dev = 4.843, 175.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=28 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.071022589808594;  // std dev = 0.341, 89.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=36 */
%   | else if ( haswordtitle(F, C) )
%   | | then return 0.027445952131567655;  // std dev = 0.342, 3,320.000 (wgt'ed) examples reached here.  /* #neg=2,145 #pos=1,175 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.026382595403383325;  // std dev = 3.220, 43.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=22 */
%   | | | else return 0.050322751072643064;  // std dev = 3.545, 52.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=30 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.38909822070138134;  // std dev = 4.431, 81.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=45 */
%   | | | else return -0.15588886217381565;  // std dev = 0.337, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | | else return -0.022934726853407826;  // std dev = 0.339, 108.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=15 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return -1.1180404736999566E-4;  // std dev = 0.353, 165.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=24 */
%   | | else return -0.14055020758236478;  // std dev = 0.051, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.730859
   AUC PR    = 0.739941
   CLL	      = -0.635066
   Precision = 0.722892 at threshold = 0.5
   Recall    = 0.77821
   F1        = 0.749532


Total learning time: 4525.737477064133 seconds
Total inference time: 4.742 seconds
AUC ROC: 0.730859


Results scoring model
   AUC ROC   = 0.913411
   AUC PR    = 0.807088
   CLL	      = -0.398346
   Precision = 0.780029 at threshold = 0.5
   Recall    = 0.800297
   F1        = 0.790033


Total scoring time: 57.342 seconds
Parameter learned model CLL: -0.398346


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,true': 'title(F, D), venue(F, A)', 'true,true,false': 'title(G, D), venue(G, A)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'title(J, I), venue(J, B)', 'true,false,false': 'haswordvenue(B, K), haswordauthor(L, K)'}, {'true,true,true,true': [14.62, 270, 1], 'true,true,true,false': [10.227, 1, 111], 'true,true,false,true': [3.574, 44, 18], 'true,true,false,false': [5.526, 74, 52], 'true,false,true,true': [2.739, 15, 15], 'true,false,true,false': [1.897, 6, 9], 'true,false,false,true': [0.894, 1, 4], 'true,false,false,false': [3.464, 21, 28], 'false': [0.365, 445, 84]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,true': 'title(F, D), venue(F, A)', 'true,true,false': 'title(G, D), venue(G, A)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true,true': [14.62, 270, 1], 'true,true,true,false': [10.227, 1, 111], 'true,true,false,true': [3.574, 44, 18], 'true,true,false,false': [5.526, 74, 52], 'true,false,true': [0.035, 0, 4], 'true,false,false,true': [3.524, 24, 26], 'true,false,false,false': [3.314, 19, 26], 'false,true': [0.414, 39, 11], 'false,false': [0.359, 406, 73]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,true': 'title(F, D), venue(F, A)', 'true,true,false': 'title(G, D), venue(G, A)', 'true,false': 'haswordvenue(B, H), haswordtitle(I, H)', 'true,false,true': 'haswordtitle(I, J), haswordauthor(K, J)', 'true,false,false': 'haswordvenue(A, L), haswordtitle(M, L)'}, {'true,true,true,true': [14.62, 270, 1], 'true,true,true,false': [10.227, 1, 111], 'true,true,false,true': [3.574, 44, 18], 'true,true,false,false': [5.526, 74, 52], 'true,false,true,true': [3.013, 15, 24], 'true,false,true,false': [1.667, 9, 4], 'true,false,false,true': [2.137, 8, 11], 'true,false,false,false': [2.567, 11, 17], 'false': [0.365, 445, 84]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,true': 'samebib(E, F), venue(F, B)', 'true,true,false': 'title(G, D), venue(G, B)', 'true,false': 'haswordvenue(A, H), haswordauthor(I, H)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true,true': [14.118, 244, 1], 'true,true,true,false': [8.179, 1, 64], 'true,true,false,true': [3.292, 48, 14], 'true,true,false,false': [5.526, 74, 52], 'true,false,true': [0.053, 0, 4], 'true,false,false,true': [3.483, 24, 26], 'true,false,false,false': [3.314, 19, 26], 'false,true': [0.414, 39, 11], 'false,false': [0.359, 406, 73]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordauthor(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'haswordauthor(K, I)', 'false,true,true': 'author(L, K), title(L, J)', 'false,true,false': 'title(M, J), venue(M, B)'}, {'true,true': [0.349, 2, 1], 'true,false,true': [0.403, 2, 7], 'true,false,false,true': [3.243, 22, 22], 'true,false,false,false': [3.322, 19, 27], 'false,true,true,true': [0.913, 5, 1], 'false,true,true,false': [2.572, 25, 9], 'false,true,false,true': [5.996, 196, 44], 'false,true,false,false': [2.351, 70, 6], 'false,false': [0.346, 149, 24]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordauthor(F, E)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false,true': 'haswordtitle(I, G)', 'false,true,true': 'author(J, H), title(J, I)', 'false,false': 'haswordvenue(B, K), haswordtitle(L, K)', 'false,false,true': 'haswordauthor(M, K)'}, {'true,true': [0.347, 2, 1], 'true,false,true': [0.085, 0, 4], 'true,false,false': [0.492, 43, 52], 'false,true,true,true': [0.816, 2, 1], 'false,true,true,false': [2.756, 25, 11], 'false,true,false': [0.03, 12, 0], 'false,false,true,true': [2.605, 28, 9], 'false,false,true,false': [5.842, 237, 40], 'false,false,false': [0.347, 141, 23]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(A, E), haswordtitle(F, E)', 'true,false,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'false': 'haswordvenue(A, I), haswordauthor(J, I)', 'false,true': 'haswordtitle(K, I)', 'false,false': 'haswordvenue(B, L), haswordauthor(M, L)', 'false,false,true': 'haswordtitle(N, L)'}, {'true,true': [0.346, 2, 1], 'true,false,true': [0.483, 21, 24], 'true,false,false,true': [0.826, 1, 4], 'true,false,false,false': [3.45, 21, 28], 'false,true,true': [0.46, 27, 12], 'false,true,false': [0.027, 12, 0], 'false,false,true,true': [2.604, 28, 9], 'false,false,true,false': [0.936, 7, 1], 'false,false,false': [0.35, 371, 62]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(B, D), haswordauthor(E, D)', 'true,false': 'haswordtitle(F, C)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false,true': 'haswordtitle(I, G)', 'false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,false,true': 'author(L, K), venue(L, B)', 'false,false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.341, 61, 44], 'true,false,true': [0.345, 2, 1], 'true,false,false': [0.489, 41, 49], 'false,true,true': [0.46, 27, 12], 'false,true,false': [0.025, 12, 0], 'false,false,true,true': [0.016, 4, 0], 'false,false,true,false': [2.74, 31, 10], 'false,false,false,true': [5.432, 224, 34], 'false,false,false,false': [4.843, 147, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,false': 'haswordvenue(B, E), haswordtitle(F, E)', 'false': 'haswordvenue(A, G), haswordauthor(H, G)', 'false,true': 'haswordtitle(I, G)', 'false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false,false,true': 'author(L, K), venue(L, B)', 'false,false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.343, 2, 1], 'true,false,true': [0.481, 24, 28], 'true,false,false': [0.485, 19, 28], 'false,true,true': [0.46, 27, 12], 'false,true,false': [0.022, 12, 0], 'false,false,true,true': [0.014, 4, 0], 'false,false,true,false': [2.739, 31, 10], 'false,false,false,true': [5.432, 224, 34], 'false,false,false,false': [4.843, 147, 28]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordvenue(A, D), haswordauthor(E, D)', 'true,false': 'haswordtitle(F, C)', 'true,false,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false,true': 'title(K, J), venue(K, B)', 'false,true,true': 'samebib(K, L), venue(L, A)', 'false,false': 'haswordvenue(A, M), haswordtitle(N, M)'}, {'true,true': [0.341, 53, 36], 'true,false,true': [0.342, 2, 1], 'true,false,false,true': [3.22, 21, 22], 'true,false,false,false': [3.545, 22, 30], 'false,true,true,true': [4.431, 36, 45], 'false,true,true,false': [0.337, 167, 0], 'false,true,false': [0.339, 93, 15], 'false,false,true': [0.353, 141, 24], 'false,false,false': [0.051, 8, 0]}]]
[{'': [0.23052445932635343, 0.13357585200167327], 'true': [0.22882355351142492, 0.24568921538618485], 'true,false': [0.24888888888889013, 0.24142661179698377], 'true,false,true': [0.24999999999999953, 0.2399999999999999], 'true,false,false': [0.15999999999999986, 0.2448979591836749], 'true,true': [0.22851866478298374, 0.2337030330466274], 'true,true,false': [0.20603537981269457, 0.2423784328546235], 'true,true,true': [0.16493055555557715, 0.05444359867011471]}, {'': [0.19757931997534875, 0.13357585200167418], 'true': [0.1952535537365156, 0.24437800972542148], 'true,false': [0.00030232252996409414, 0.24722214498618214], 'true,false,false': [0.2483880363674087, 0.24400235144038027], 'true,true': [0.19303018629582472, 0.23283724804070274], 'true,true,false': [0.20603537981269565, 0.24237843285462082], 'true,true,true': [0.16493055555553085, 0.054443598670118644], 'false': [0.17160000000000028, 0.12917482054210197]}, {'': [0.16673782005133095, 0.13348285419743497], 'true': [0.1638539521816817, 0.24107453827840003], 'true,false': [0.24326667989913686, 0.23740741456278985], 'true,false,true': [0.2327827283167709, 0.21366785396422402], 'true,false,false': [0.2403162534308112, 0.23528709520278454], 'true,true': [0.1598110874340717, 0.23204472049683453], 'true,true,false': [0.20603537981269485, 0.24237843285462563], 'true,true,true': [0.16493055555555147, 0.05444359867011545]}, {'': [0.14432221948257998, 0.13348206204481378], 'true': [0.1410979247309605, 0.23753600601504474], 'true,false': [0.0006891824277522884, 0.24363549454839847], 'true,false,false': [0.24263863117998072, 0.24398982073801992], 'true,true': [0.13632508426880263, 0.2207252240593756], 'true,true,false': [0.17481789802289308, 0.24237843285462296], 'true,true,true': [0.1508753351822396, 0.03528448436336507], 'false': [0.17159999999999953, 0.12917482054210172]}, {'': [0.12560124515873522, 0.1334072315188881], 'false': [0.13988986576789192, 0.11951604591971346], 'false,true': [0.1874999999999999, 0.13322680948166998], 'false,true,true': [0.13888888888888892, 0.19463667820069191], 'false,true,false': [0.14977527043184996, 0.07271468144044309], 'true': [0.12205170285724846, 0.2354695378195174], 'true,false': [0.1624761443885443, 0.24020297426484583], 'true,false,false': [0.23904797501150377, 0.23995696730430788]}, {'': [0.12400339947565597, 0.13296111569088864], 'false': [0.17942535403235285, 0.12732991726645063], 'false,true': [0.21187361917231934, 7.565615039113738e-05], 'false,true,true': [0.2222222222222222, 0.21092991587899682], 'false,false': [0.13081433051009408, 0.12058300251174266], 'false,false,true': [0.18336312391438828, 0.12320533076888691], 'true': [0.12062113139449401, 0.2341147071191412], 'true,false': [0.0018096500263695414, 0.24204509999037951]}, {'': [0.12281595168779871, 0.13229601314475192], 'false': [0.175111536619654, 0.12722797062223115], 'false,true': [0.21172963142999718, 6.107459980551667e-05], 'false,false': [0.17151949414059903, 0.1224447496780074], 'false,false,true': [0.18333258398523022, 0.10958475736699469], 'true': [0.11951194095492561, 0.2333812434886946], 'true,false': [0.23311228172559112, 0.23332191564290614], 'true,false,false': [0.13654341741226386, 0.24293504848674904]}, {'': [0.12192775266938072, 0.13176941767600267], 'false': [0.17181964883328052, 0.12714656586018136], 'false,true': [0.2116151790659599, 5.0142497733332105e-05], 'false,false': [0.17114468754373371, 0.12244534584021943], 'false,false,true': [6.630105278205428e-05, 0.18307595559070264], 'false,false,false': [0.11436558090377949, 0.1340169976492194], 'true': [0.11626375922785506, 0.12200341988470957], 'true,false': [0.1187964112891654, 0.23906329891139688]}, {'': [0.12121092286411948, 0.13126238809760257], 'false': [0.16931272218840202, 0.12697103677728772], 'false,true': [0.21151640142639008, 4.179447339656741e-05], 'false,false': [0.16996525597200735, 0.12241213751700954], 'false,false,true': [5.2114135257554095e-05, 0.1830374967180369], 'false,false,false': [0.11436589967927833, 0.13401417427993376], 'true': [0.11793274484561127, 0.2331985098990971], 'true,false': [0.23157363856053081, 0.234798203680404]}, {'': [0.12068081199424142, 0.13088815800232367], 'false': [0.1363660519564633, 0.11946327006433322], 'false,true': [0.14496282909632313, 0.11521176498029603], 'false,true,true': [0.2424328337769699, 0.0006793595280542864], 'true': [0.11611847837644865, 0.1207522200589421], 'true,false': [0.11729015799479549, 0.24160123246362802], 'true,false,false': [0.2411831289583837, 0.24168755468698208], 'false,false': [0.12432752603725808, 0.00032708914339105513]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,false;haswordvenue(A, E), haswordauthor(F, E).;true;true
5;false;haswordvenue(A, G), haswordauthor(H, G).;true;true
5;false,true;haswordtitle(I, G).;true;true
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;false;haswordvenue(A, I), haswordauthor(J, I).;true;true
6;false,true;haswordtitle(K, I).;true;true
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;false;haswordvenue(A, G), haswordauthor(H, G).;true;true
7;false,true;haswordtitle(I, G).;true;true
7;false,false;haswordvenue(B, J), haswordauthor(K, J).;true;true
7;false,false,true;author(L, K), venue(L, B).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(A, G), haswordauthor(H, G).;true;true
8;false,true;haswordtitle(I, G).;true;true
8;false,false;haswordvenue(B, J), haswordauthor(K, J).;true;true
8;false,false,true;author(L, K), venue(L, B).;true;true
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;false;haswordvenue(B, I), haswordtitle(J, I).;true;true
9;false,true;title(K, J), venue(K, B).;true;true
9;false,true,true;samebib(K, L), venue(L, A).;true;true
9;false,false;haswordvenue(A, M), haswordtitle(N, M).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( title(F, D), venue(F, A) )
%   | | | then return 0.649815601766174;  // std dev = 14.620, 1,296.000 (wgt'ed) examples reached here.  /* #neg=270 #pos=1,026 */
%   | | | else return -0.08406865990309281;  // std dev = 10.227, 1,921.000 (wgt'ed) examples reached here.  /* #neg=1,810 #pos=111 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.14847151574467365;  // std dev = 3.574, 62.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=18 */
%   | | | else return 0.2708473477979261;  // std dev = 5.526, 126.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=52 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.6359267128772901;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.35814893509951146;  // std dev = 3.317, 44.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=22 */
%   | | | else return 0.4451054568386418;  // std dev = 3.339, 46.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=27 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.09344305274657119;  // std dev = 0.424, 51.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=12 */
%   | else return 0.008776550162274322;  // std dev = 0.358, 478.000 (wgt'ed) examples reached here.  /* #neg=406 #pos=72 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( title(F, D), venue(F, A) )
%   | | | then return 0.5512112630945113;  // std dev = 14.620, 1,296.000 (wgt'ed) examples reached here.  /* #neg=270 #pos=1,026 */
%   | | | else return -0.07413983247209854;  // std dev = 10.227, 1,921.000 (wgt'ed) examples reached here.  /* #neg=1,810 #pos=111 */
%   | | else if ( haswordauthor(G, C) )
%   | | | then return 0.5718823032898749;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.19181351844004646;  // std dev = 6.516, 184.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=67 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.2960727775043089;  // std dev = 2.718, 30.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return 0.404136981916997;  // std dev = 1.898, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.5620720642963899;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.37255875898237645;  // std dev = 3.462, 49.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=28 */
%   else return 0.014836963866631282;  // std dev = 0.365, 529.000 (wgt'ed) examples reached here.  /* #neg=445 #pos=84 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.47412369128184095;  // std dev = 14.047, 1,321.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=1,077 */
%   | | | else return -0.09832538382107261;  // std dev = 7.975, 1,896.000 (wgt'ed) examples reached here.  /* #neg=1,832 #pos=64 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.10214539101127407;  // std dev = 3.292, 62.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=14 */
%   | | | else return 0.2025448137744922;  // std dev = 5.511, 126.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=52 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.4497653340024433;  // std dev = 0.415, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.24698011963004485;  // std dev = 3.307, 44.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=22 */
%   | | | else return 0.31837567157224295;  // std dev = 3.339, 46.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=27 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.07974433817309493;  // std dev = 0.424, 51.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=12 */
%   | else return 0.005877711447270613;  // std dev = 0.358, 478.000 (wgt'ed) examples reached here.  /* #neg=406 #pos=72 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.09694917222961737;  // std dev = 0.360, 3,217.000 (wgt'ed) examples reached here.  /* #neg=2,080 #pos=1,137 */
%   | | else if ( haswordauthor(F, C) )
%   | | | then return 0.43020749661179947;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.14368892687397883;  // std dev = 6.484, 184.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=67 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.1806660193138437;  // std dev = 2.693, 30.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=15 */
%   | | | else return 0.27633572070919005;  // std dev = 1.898, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.2475359641942426;  // std dev = 2.492, 26.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=15 */
%   | | | else return 0.2629292762214591;  // std dev = 2.568, 28.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=17 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.02060214373866944;  // std dev = 0.374, 356.000 (wgt'ed) examples reached here.  /* #neg=296 #pos=60 */
%   | else return -0.007834669809044542;  // std dev = 0.346, 173.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=24 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.08334878425848218;  // std dev = 0.364, 3,405.000 (wgt'ed) examples reached here.  /* #neg=2,198 #pos=1,207 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then if ( haswordtitle(F, G), haswordauthor(H, G) )
%   | | | then return 0.22658345648549308;  // std dev = 3.012, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   | | | else return -0.02259912445226544;  // std dev = 1.670, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.20263358254641894;  // std dev = 2.152, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.2015574319521052;  // std dev = 2.568, 28.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=17 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordauthor(L, M), haswordvenue(A, M) )
%   | | then return -0.1682008149147369;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordtitle(N, K) )
%   | | | then return 0.11454282058305583;  // std dev = 2.709, 38.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
%   | | | else return -0.01995170186763062;  // std dev = 0.936, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.00354259066498138;  // std dev = 0.359, 479.000 (wgt'ed) examples reached here.  /* #neg=406 #pos=73 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.06699127291902278;  // std dev = 0.354, 3,217.000 (wgt'ed) examples reached here.  /* #neg=2,080 #pos=1,137 */
%   | | else return 0.10692779852081;  // std dev = 0.478, 188.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=70 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.23493535174176644;  // std dev = 0.415, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | | then return 0.10898408490880293;  // std dev = 3.260, 44.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=22 */
%   | | | else return 0.1471800479659493;  // std dev = 3.339, 46.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=27 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then if ( haswordtitle(L, J) )
%   | | then if ( author(M, K), title(M, L) )
%   | | | then return 0.16761309333840066;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.13700345781185727;  // std dev = 2.754, 36.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return -0.16488942363820788;  // std dev = 0.029, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.0022617372341063482;  // std dev = 0.357, 478.000 (wgt'ed) examples reached here.  /* #neg=406 #pos=72 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.05544385177719566;  // std dev = 0.351, 3,217.000 (wgt'ed) examples reached here.  /* #neg=2,080 #pos=1,137 */
%   | | else return 0.08579521582497156;  // std dev = 0.478, 188.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=70 */
%   | else if ( haswordvenue(B, F), haswordtitle(G, F) )
%   | | then if ( haswordtitle(G, H), haswordauthor(I, H) )
%   | | | then return 0.13922813642492043;  // std dev = 3.010, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   | | | else return -0.04197279267278097;  // std dev = 1.671, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.11789395905055633;  // std dev = 2.152, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.11497918660207697;  // std dev = 2.566, 28.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=17 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then if ( haswordtitle(N, L) )
%   | | then return 0.08729289428499558;  // std dev = 0.430, 40.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=10 */
%   | | else return -0.04680071111598601;  // std dev = 0.302, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | else return 0.0017503256747750764;  // std dev = 0.358, 479.000 (wgt'ed) examples reached here.  /* #neg=406 #pos=73 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.046963806805341395;  // std dev = 0.358, 3,405.000 (wgt'ed) examples reached here.  /* #neg=2,198 #pos=1,207 */
%   | else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | | then return 0.4137388897532283;  // std dev = 0.157, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.056599610322199755;  // std dev = 3.430, 50.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=26 */
%   | | | else return 0.07305532977822374;  // std dev = 3.316, 45.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=26 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( haswordtitle(K, I) )
%   | | then if ( author(L, J), title(L, K) )
%   | | | then return -0.010402914600399058;  // std dev = 0.864, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.09014015620601572;  // std dev = 2.569, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
%   | | else return -0.04103823693056722;  // std dev = 0.302, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return 0.05856308692063893;  // std dev = 0.422, 46.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=11 */
%   | | else return -0.004532871987392403;  // std dev = 0.350, 433.000 (wgt'ed) examples reached here.  /* #neg=371 #pos=62 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.07800694899599396;  // std dev = 0.348, 89.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=36 */
%   | else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | | then return 0.049200387072818694;  // std dev = 0.344, 89.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=32 */
%   | | else if ( haswordtitle(H, C) )
%   | | | then return 0.0375917609280536;  // std dev = 20.325, 3,238.000 (wgt'ed) examples reached here.  /* #neg=2,090 #pos=1,148 */
%   | | | else return 0.046227526928786844;  // std dev = 4.614, 88.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=47 */
%   else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | then if ( haswordtitle(K, I) )
%   | | then if ( author(L, J), title(L, K) )
%   | | | then return -0.008898354986678384;  // std dev = 0.864, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.07677256104072205;  // std dev = 2.569, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
%   | | else return -0.036141906434426545;  // std dev = 0.301, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | else if ( haswordvenue(A, M), haswordauthor(N, M) )
%   | | then return 0.04975496205286985;  // std dev = 0.421, 46.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=11 */
%   | | else return -0.003963113131366264;  // std dev = 0.350, 433.000 (wgt'ed) examples reached here.  /* #neg=371 #pos=62 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.2695319800180848;  // std dev = 0.295, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | else if ( haswordtitle(E, C) )
%   | | then if ( title(F, E), venue(F, A) )
%   | | | then return 0.029494414070041147;  // std dev = 19.696, 3,208.000 (wgt'ed) examples reached here.  /* #neg=2,074 #pos=1,134 */
%   | | | else return 0.04899424704873568;  // std dev = 6.338, 184.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=63 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.03868507278976026;  // std dev = 3.447, 51.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=27 */
%   | | | else return 0.05007609479992358;  // std dev = 3.330, 46.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=27 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.3964642584547539;  // std dev = 4.440, 81.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=45 */
%   | | | else return -0.1538667441657566;  // std dev = 0.216, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | | else return -0.027183803283304244;  // std dev = 0.341, 108.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=15 */
%   | else return -0.007011380111985131;  // std dev = 0.346, 173.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=24 */


Results
   AUC ROC   = 0.728804
   AUC PR    = 0.73949
   CLL	      = -0.633505
   Precision = 0.722892 at threshold = 0.5
   Recall    = 0.77821
   F1        = 0.749532


Total learning time: 3822.5511231422424 seconds
Total inference time: 5.083 seconds
AUC ROC: 0.728804


Results scoring model
   AUC ROC   = 0.904878
   AUC PR    = 0.800385
   CLL	      = -0.418753
   Precision = 0.810345 at threshold = 0.5
   Recall    = 0.802524
   F1        = 0.806416


Total scoring time: 55.1 seconds
Refined model CLL: -0.418753


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.730859
   AUC PR    = 0.739941
   CLL	      = -0.635066
   Precision = 0.722892 at threshold = 0.5
   Recall    = 0.77821
   F1        = 0.749532


Total learning time: 8460.730600206376 seconds
Total inference time: 4.742 seconds
AUC ROC: 0.730859
Total revision time: 8460.730600206376
Best scored revision CLL: -0.398346


Dataset: 3_imdb_cora, Fold: 2, Type: Transfer (trRDN-B), Time: 16:25:30
{'AUC ROC': 0.730859, 'AUC PR': 0.739941, 'CLL': -0.635066, 'Precision': [0.722892, 0.5], 'Recall': 0.77821, 'F1': 0.749532, 'Learning time': 8460.730600206376, 'Inference time': 4.742, 'parameter_0.6': {'AUC ROC': 0.730859, 'AUC PR': 0.739941, 'CLL': -0.635066, 'Precision': [0.722892, 0.5], 'Recall': 0.77821, 'F1': 0.749532, 'Learning time': 4525.737477064133, 'Inference time': 4.742}}


Start learning from scratch in target domain

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( title(F, D), venue(F, A) )
%   | | | then return 0.649815601766174;  // std dev = 14.620, 1,296.000 (wgt'ed) examples reached here.  /* #neg=270 #pos=1,026 */
%   | | | else return -0.08406865990309281;  // std dev = 10.227, 1,921.000 (wgt'ed) examples reached here.  /* #neg=1,810 #pos=111 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.14847151574467365;  // std dev = 3.574, 62.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=18 */
%   | | | else return 0.2708473477979261;  // std dev = 5.526, 126.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=52 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.3922398441904221;  // std dev = 4.680, 88.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=47 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.07814893509951236;  // std dev = 0.414, 50.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=11 */
%   | else return 0.010549770172581742;  // std dev = 0.359, 479.000 (wgt'ed) examples reached here.  /* #neg=406 #pos=73 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( title(F, D), venue(F, A) )
%   | | | then return 0.5512112630945113;  // std dev = 14.620, 1,296.000 (wgt'ed) examples reached here.  /* #neg=270 #pos=1,026 */
%   | | | else return -0.07413983247209854;  // std dev = 10.227, 1,921.000 (wgt'ed) examples reached here.  /* #neg=1,810 #pos=111 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.12942010309038157;  // std dev = 3.574, 62.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=18 */
%   | | | else return 0.23458071598828809;  // std dev = 5.526, 126.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=52 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.4091042216020712;  // std dev = 3.013, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   | | | else return 0.11110472871357567;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | | | then return 0.3779419468733569;  // std dev = 2.137, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.40755745642089936;  // std dev = 2.573, 28.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=17 */
%   else return 0.014847312767103538;  // std dev = 0.365, 529.000 (wgt'ed) examples reached here.  /* #neg=445 #pos=84 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then if ( title(F, D), venue(F, A) )
%   | | | then return 0.4370880072722592;  // std dev = 14.620, 1,296.000 (wgt'ed) examples reached here.  /* #neg=270 #pos=1,026 */
%   | | | else return -0.06587865560423371;  // std dev = 10.227, 1,921.000 (wgt'ed) examples reached here.  /* #neg=1,810 #pos=111 */
%   | | else if ( title(G, D), venue(G, A) )
%   | | | then return 0.1111713212860947;  // std dev = 3.574, 62.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=18 */
%   | | | else return 0.19761844416557925;  // std dev = 5.526, 126.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=52 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.6320219010412617;  // std dev = 0.006, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.4081952971909954;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.27427121242134506;  // std dev = 4.649, 88.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=47 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then return 0.02255600955071419;  // std dev = 0.374, 356.000 (wgt'ed) examples reached here.  /* #neg=296 #pos=60 */
%   | else return -0.006639371955039511;  // std dev = 0.346, 173.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=24 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then if ( samebib(E, F), venue(F, B) )
%   | | | then return 0.37560299032226074;  // std dev = 14.118, 1,321.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=1,077 */
%   | | | else return -0.09490092279435089;  // std dev = 8.179, 1,896.000 (wgt'ed) examples reached here.  /* #neg=1,832 #pos=64 */
%   | | else if ( haswordtitle(D, G), haswordauthor(H, G) )
%   | | | then return 0.14015593291811845;  // std dev = 6.277, 180.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=62 */
%   | | | else return 0.24968884667009292;  // std dev = 1.414, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | then if ( haswordtitle(J, K), haswordauthor(L, K) )
%   | | | then return 0.2657851142779747;  // std dev = 2.987, 39.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=24 */
%   | | | else return 0.04312906302315887;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | | then return 0.24894364431806001;  // std dev = 2.122, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.27397167131452643;  // std dev = 2.561, 28.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=17 */
%   else return 0.01136980159052101;  // std dev = 0.365, 529.000 (wgt'ed) examples reached here.  /* #neg=445 #pos=84 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then return 0.37471114287939766;  // std dev = 0.293, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | else if ( haswordtitle(E, C) )
%   | | then return 0.06872788876001387;  // std dev = 0.349, 3,392.000 (wgt'ed) examples reached here.  /* #neg=2,195 #pos=1,197 */
%   | | else return 0.17676792628968344;  // std dev = 0.487, 97.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=54 */
%   else if ( haswordvenue(B, F), haswordauthor(G, F) )
%   | then if ( haswordauthor(G, H), haswordvenue(A, H) )
%   | | then return -0.1570528278610185;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( haswordtitle(I, F) )
%   | | | then return 0.10514365401239946;  // std dev = 2.714, 38.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
%   | | | else return -0.029649295702458695;  // std dev = 0.936, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | then if ( haswordtitle(L, J) )
%   | | | then return 0.15683815603112086;  // std dev = 2.763, 36.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | | else return -0.14812632106837395;  // std dev = 0.005, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.00470963868335673;  // std dev = 0.350, 433.000 (wgt'ed) examples reached here.  /* #neg=371 #pos=62 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.058576958537116794;  // std dev = 0.347, 3,405.000 (wgt'ed) examples reached here.  /* #neg=2,198 #pos=1,207 */
%   | else if ( haswordvenue(B, E), haswordtitle(F, E) )
%   | | then return 0.11943763892081069;  // std dev = 0.479, 52.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=28 */
%   | | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | | then return 0.14999689760223972;  // std dev = 2.121, 19.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=11 */
%   | | | else return 0.16669694330337423;  // std dev = 2.558, 28.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=17 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordauthor(K, I) )
%   | | then if ( author(L, K), title(L, J) )
%   | | | then return -1.2967833967104472E-4;  // std dev = 0.907, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.09320328921209795;  // std dev = 2.569, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
%   | | else if ( title(M, J), venue(M, B) )
%   | | | then return 0.032884519631300874;  // std dev = 5.973, 240.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=44 */
%   | | | else return -0.07110517213479384;  // std dev = 2.355, 76.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=6 */
%   | else return -0.006723092925852486;  // std dev = 0.345, 173.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=24 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.04901933893471419;  // std dev = 0.346, 3,405.000 (wgt'ed) examples reached here.  /* #neg=2,198 #pos=1,207 */
%   | else if ( haswordvenue(B, E), haswordauthor(F, E) )
%   | | then return 0.20209540098938214;  // std dev = 0.401, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | | then return 0.07257245378175275;  // std dev = 3.221, 44.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=22 */
%   | | | else return 0.11702404122914434;  // std dev = 3.320, 46.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=27 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( haswordauthor(K, I) )
%   | | then if ( author(L, K), title(L, J) )
%   | | | then return -1.1167820153183221E-4;  // std dev = 0.907, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return 0.07955543806974023;  // std dev = 2.569, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
%   | | else if ( title(M, J), venue(M, B) )
%   | | | then return 0.028634855943271895;  // std dev = 5.972, 240.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=44 */
%   | | | else return -0.06226235496377745;  // std dev = 2.355, 76.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=6 */
%   | else return -0.005889564312175048;  // std dev = 0.345, 173.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=24 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(B, D), haswordauthor(E, D) )
%   | then return 0.0875497719369929;  // std dev = 0.335, 105.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=44 */
%   | else if ( haswordtitle(F, C) )
%   | | then return 0.03975639463751586;  // std dev = 0.345, 3,309.000 (wgt'ed) examples reached here.  /* #neg=2,139 #pos=1,170 */
%   | | else return 0.07184079616550877;  // std dev = 0.488, 90.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=49 */
%   else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | then if ( haswordauthor(I, G) )
%   | | then return 0.13610438382133053;  // std dev = 0.458, 39.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=12 */
%   | | else if ( title(J, H), venue(J, A) )
%   | | | then return 0.015172457175915302;  // std dev = 5.525, 226.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=37 */
%   | | | else return -0.061949168982622246;  // std dev = 2.517, 75.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=7 */
%   | else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | | then return -0.13949269141049753;  // std dev = 0.024, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | | | then return 0.008692966691685676;  // std dev = 4.833, 172.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=28 */
%   | | | else return -0.14341699571071523;  // std dev = 7.45e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then return 0.03408053389732921;  // std dev = 0.343, 3,405.000 (wgt'ed) examples reached here.  /* #neg=2,198 #pos=1,207 */
%   | else return 0.061464057780725;  // std dev = 0.481, 99.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=56 */
%   else if ( haswordvenue(A, E), haswordauthor(F, E) )
%   | then if ( haswordtitle(G, E) )
%   | | then if ( author(H, F), title(H, G) )
%   | | | then return 0.14934294347431873;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.11312184427194921;  // std dev = 2.737, 36.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | else return -0.12438032808982853;  // std dev = 0.023, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | then if ( title(K, J), venue(K, A) )
%   | | | then return 0.014514171648330788;  // std dev = 5.521, 224.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=37 */
%   | | | else return -0.05400054448915624;  // std dev = 2.517, 75.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=7 */
%   | | else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | | | then return 0.00755699024571181;  // std dev = 4.833, 172.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=28 */
%   | | | else return -0.12668288089738308;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordvenue(A, D), haswordauthor(E, D) )
%   | then return 0.06386402425623251;  // std dev = 0.335, 89.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=36 */
%   | else if ( haswordtitle(F, C) )
%   | | then return 0.027683624881219494;  // std dev = 0.342, 3,320.000 (wgt'ed) examples reached here.  /* #neg=2,145 #pos=1,175 */
%   | | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | | then return 0.09116059565871125;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.033217194920132094;  // std dev = 4.613, 88.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=47 */
%   else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | then if ( title(K, J), venue(K, B) )
%   | | then if ( samebib(K, L), venue(L, A) )
%   | | | then return 0.38913251947115807;  // std dev = 4.436, 81.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=45 */
%   | | | else return -0.15727087589068123;  // std dev = 0.275, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | | else return -0.018436500942149096;  // std dev = 0.340, 108.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=15 */
%   | else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | | then return -0.0017788643014677924;  // std dev = 0.352, 165.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=24 */
%   | | else return -0.11168355777016434;  // std dev = 0.012, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */


Results
   AUC ROC   = 0.730532
   AUC PR    = 0.739794
   CLL	      = -0.634755
   Precision = 0.722892 at threshold = 0.5
   Recall    = 0.77821
   F1        = 0.749532


Total learning time: 4519.534044981003 seconds
Total inference time: 4.527 seconds
AUC ROC: 0.730532


Dataset: 3_imdb_cora, Fold: 2, Type: Scratch (RDN-B), Time: 17:40:54
{'AUC ROC': 0.730532, 'AUC PR': 0.739794, 'CLL': -0.634755, 'Precision': [0.722892, 0.5], 'Recall': 0.77821, 'F1': 0.749532, 'Learning time': 4519.534044981003, 'Inference time': 4.527}


Amount of data: 0.8
******************************************
Performing Parameter Learning
******************************************
Refine
0;;workedunder(A, B) :- director(B), actor(A).;true;false
0;true;movie(C, A), movie(C, B).;false;false
1;;workedunder(A, B) :- director(B), actor(A).;true;false
1;true;movie(C, A), movie(C, B).;false;false
2;;workedunder(A, B) :- director(B), actor(A).;true;false
2;true;movie(C, A), movie(C, B).;false;false
3;;workedunder(A, B) :- actor(A), director(B).;true;false
3;true;movie(C, A), movie(C, B).;false;false
4;;workedunder(A, B) :- director(B), actor(A).;true;false
4;true;movie(C, A), movie(C, B).;false;false
5;;workedunder(A, B) :- actor(A), director(B).;true;false
5;true;movie(C, A), movie(C, B).;false;false
6;;workedunder(A, B) :- director(B), actor(A).;true;false
6;true;movie(C, A), movie(C, B).;false;false
7;;workedunder(A, B) :- actor(A), director(B).;true;false
7;true;movie(C, A), movie(C, B).;false;false
8;;workedunder(A, B) :- director(B), actor(A).;true;false
8;true;movie(C, A), movie(C, B).;false;false
9;;workedunder(A, B) :- actor(A), director(B).;true;false
9;true;movie(C, A), movie(C, B).;false;false


WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.21026817124296315;  // std dev = 0.478, 4,294.000 (wgt'ed) examples reached here.  /* #neg=2,782 #pos=1,512 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.1366299477577397;  // std dev = 3.984, 79.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=22 */
%   | | | else return 0.283298635698316;  // std dev = 6.389, 167.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=71 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.7331489350995123;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.3844647245731954;  // std dev = 3.770, 57.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=30 */
%   | | | else return 0.4905018762759833;  // std dev = 3.976, 68.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=43 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.13814893509951237;  // std dev = 0.449, 50.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=14 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0.010664658369951693;  // std dev = 0.360, 636.000 (wgt'ed) examples reached here.  /* #neg=539 #pos=97 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.1826976060495564;  // std dev = 0.478, 4,294.000 (wgt'ed) examples reached here.  /* #neg=2,782 #pos=1,512 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.1191708865769961;  // std dev = 3.984, 79.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=22 */
%   | | | else return 0.24520192662438314;  // std dev = 6.389, 167.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=71 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.6189976143448207;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.33095332360970464;  // std dev = 3.770, 57.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=30 */
%   | | | else return 0.4197821028742037;  // std dev = 3.976, 68.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=43 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.12254086503961535;  // std dev = 0.441, 49.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=13 */
%   | | else return -0.09310572209709135;  // std dev = 0.224, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | else return 0.008413317476819226;  // std dev = 0.359, 637.000 (wgt'ed) examples reached here.  /* #neg=540 #pos=97 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( haswordauthor(E, C) )
%   | | then if ( author(F, E), title(F, D) )
%   | | | then return 0.8032977412377694;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.43659841736277405;  // std dev = 1.804, 14.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=9 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.15421999199655353;  // std dev = 31.234, 4,283.000 (wgt'ed) examples reached here.  /* #neg=2,780 #pos=1,503 */
%   | | | else return 0.1701781771631137;  // std dev = 7.463, 240.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=90 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.3194505255862945;  // std dev = 3.471, 51.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=30 */
%   | | | else return 0.16402676212497816;  // std dev = 1.708, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return 0.46935044007578136;  // std dev = 0.856, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.33960079653142333;  // std dev = 3.891, 65.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=41 */
%   else return 0.01188439076585201;  // std dev = 0.363, 705.000 (wgt'ed) examples reached here.  /* #neg=594 #pos=111 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.12971619761186412;  // std dev = 0.477, 4,294.000 (wgt'ed) examples reached here.  /* #neg=2,782 #pos=1,512 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.07651004063868122;  // std dev = 3.984, 79.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=22 */
%   | | | else return 0.1737488805430941;  // std dev = 6.386, 167.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=71 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.5071028728072181;  // std dev = 0.031, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.36293990218806915;  // std dev = 1.209, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.20679271879888225;  // std dev = 3.714, 58.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=32 */
%   | | | else return 0.2684593470476325;  // std dev = 3.922, 65.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=40 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.05259981651116979;  // std dev = 0.401, 68.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=14 */
%   | else return 0.005895769004334932;  // std dev = 0.359, 637.000 (wgt'ed) examples reached here.  /* #neg=540 #pos=97 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.10648134938316056;  // std dev = 0.477, 4,294.000 (wgt'ed) examples reached here.  /* #neg=2,782 #pos=1,512 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.06389679427425198;  // std dev = 3.984, 79.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=22 */
%   | | | else return 0.139682034531175;  // std dev = 6.386, 167.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=71 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.38270916873982586;  // std dev = 0.029, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.27713053714543445;  // std dev = 1.210, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.15669305914410783;  // std dev = 3.744, 58.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=31 */
%   | | | else return 0.20789678817447593;  // std dev = 3.889, 65.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=41 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.0488299248638093;  // std dev = 0.397, 69.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=14 */
%   | else return 0.004749655981442971;  // std dev = 0.359, 636.000 (wgt'ed) examples reached here.  /* #neg=539 #pos=97 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.08727644896551423;  // std dev = 0.477, 4,293.000 (wgt'ed) examples reached here.  /* #neg=2,780 #pos=1,513 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.0031869532377990055;  // std dev = 3.935, 80.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=21 */
%   | | | else return 0.11037624986943888;  // std dev = 6.386, 167.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=71 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then if ( haswordauthor(I, C) )
%   | | | then return 0.2972681657925842;  // std dev = 0.026, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.20868274857267716;  // std dev = 1.211, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.11472479932558718;  // std dev = 3.707, 58.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=32 */
%   | | | else return 0.16089143172849532;  // std dev = 3.921, 65.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=40 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.042369792930687815;  // std dev = 0.397, 69.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=14 */
%   | else return 0.004150677160554974;  // std dev = 0.359, 636.000 (wgt'ed) examples reached here.  /* #neg=539 #pos=97 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.06993073986831129;  // std dev = 0.477, 4,293.000 (wgt'ed) examples reached here.  /* #neg=2,780 #pos=1,513 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.002565651439260201;  // std dev = 3.935, 80.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=21 */
%   | | | else return 0.08611178109294282;  // std dev = 6.386, 167.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=71 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.21660581580352686;  // std dev = 0.323, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.07876659008326337;  // std dev = 3.862, 62.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=34 */
%   | | | else return 0.12845989296145538;  // std dev = 3.841, 63.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=39 */
%   else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | then if ( haswordtitle(M, K) )
%   | | then return 0.09615113665134493;  // std dev = 0.440, 49.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=13 */
%   | | else return -0.09243604601973314;  // std dev = 0.225, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | else return 0.0029440763545800492;  // std dev = 0.359, 637.000 (wgt'ed) examples reached here.  /* #neg=540 #pos=97 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.05554708417008823;  // std dev = 0.477, 4,293.000 (wgt'ed) examples reached here.  /* #neg=2,780 #pos=1,513 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.0020661488790321174;  // std dev = 3.935, 80.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=21 */
%   | | | else return 0.06656771496479871;  // std dev = 6.386, 167.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=71 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, A) )
%   | | | then return 0.09411038477029045;  // std dev = 3.172, 43.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=25 */
%   | | | else return 0.016977544078602524;  // std dev = 2.151, 20.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=10 */
%   | | else if ( haswordvenue(B, J), haswordauthor(K, J) )
%   | | | then return 0.10305666538762184;  // std dev = 0.833, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.09576382483729955;  // std dev = 3.888, 65.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=41 */
%   else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | then return 0.03650707687183046;  // std dev = 0.399, 68.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=14 */
%   | else return 0.0025698656652942595;  // std dev = 0.359, 637.000 (wgt'ed) examples reached here.  /* #neg=540 #pos=97 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), venue(E, A) )
%   | | then return 0.4266520134753747;  // std dev = 0.274, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.25297401855942103;  // std dev = 0.449, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | else if ( haswordtitle(F, C) )
%   | | then if ( title(G, F), venue(G, A) )
%   | | | then return 0.04285586336092828;  // std dev = 31.231, 4,282.000 (wgt'ed) examples reached here.  /* #neg=2,778 #pos=1,504 */
%   | | | else return 0.03327610251851325;  // std dev = 7.410, 241.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=89 */
%   | | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | | then return 0.11441880820754043;  // std dev = 1.210, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.05724713932884346;  // std dev = 5.389, 123.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=72 */
%   else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | then if ( haswordtitle(L, J) )
%   | | then return 0.10337117796736785;  // std dev = 0.447, 50.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=14 */
%   | | else return -0.14359132040027134;  // std dev = 0.051, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0.0017587567625651792;  // std dev = 0.359, 636.000 (wgt'ed) examples reached here.  /* #neg=539 #pos=97 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.034459003106903835;  // std dev = 0.477, 4,293.000 (wgt'ed) examples reached here.  /* #neg=2,780 #pos=1,513 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.018748027465332044;  // std dev = 7.311, 236.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=86 */
%   | | | else return 0.1659280510768442;  // std dev = 1.651, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordauthor(J, H) )
%   | | | then return 0.1355231646323401;  // std dev = 0.911, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.02821635584980018;  // std dev = 3.719, 58.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=31 */
%   | | else if ( haswordvenue(B, K), haswordauthor(L, K) )
%   | | | then return 0.05348592096029179;  // std dev = 0.833, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.05803191393316489;  // std dev = 3.888, 65.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=41 */
%   else if ( haswordvenue(B, M), haswordauthor(N, M) )
%   | then return 0.03078159733889338;  // std dev = 0.398, 68.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=14 */
%   | else return 0.001356793057339337;  // std dev = 0.358, 637.000 (wgt'ed) examples reached here.  /* #neg=540 #pos=97 */


Results
   AUC ROC   = 0.506538
   AUC PR    = 0.609688
   CLL	      = -0.825732
   Precision = 0.75 at threshold = 0.5
   Recall    = 0.038911
   F1        = 0.073983


Total learning time: 9257.50186085701 seconds
Total inference time: 5.413 seconds
AUC ROC: 0.506538


Results scoring model
   AUC ROC   = 0.574889
   AUC PR    = 0.404557
   CLL	      = -0.620932
   Precision = 0.649573 at threshold = 0.5
   Recall    = 0.042316
   F1        = 0.079456


Total scoring time: 46.16 seconds
Parameter learned model CLL: -0.620932


Structure after Parameter Learning
[['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(A, K), haswordauthor(L, K)', 'false,true': 'haswordtitle(M, K)'}, {'true,true,true': [0.478, 2, 1], 'true,true,false,true': [3.984, 57, 22], 'true,true,false,false': [6.389, 96, 71], 'true,false,true': [0.331, 1, 7], 'true,false,false,true': [3.77, 27, 30], 'true,false,false,false': [3.976, 25, 43], 'false,true,true': [0.449, 36, 14], 'false,true,false': [0.0, 19, 0], 'false,false': [0.36, 539, 97]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(A, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false,true': 'haswordtitle(M, K)'}, {'true,true,true': [0.478, 2, 1], 'true,true,false,true': [3.984, 57, 22], 'true,true,false,false': [6.389, 96, 71], 'true,false,true': [0.331, 1, 7], 'true,false,false,true': [3.77, 27, 30], 'true,false,false,false': [3.976, 25, 43], 'false,true,true': [0.441, 36, 13], 'false,true,false': [0.224, 18, 1], 'false,false': [0.359, 540, 97]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'haswordauthor(E, C)', 'true,true,true': 'author(F, E), title(F, D)', 'true,true,false': 'title(G, D), venue(G, B)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'haswordtitle(I, J), haswordauthor(K, J)', 'true,false,false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true,true': [2.11e-08, 0, 3], 'true,true,true,false': [1.804, 5, 9], 'true,true,false,true': [31.234, 2, 1], 'true,true,false,false': [7.463, 150, 90], 'true,false,true,true': [3.471, 21, 30], 'true,false,true,false': [1.708, 7, 5], 'true,false,false,true': [0.856, 1, 4], 'true,false,false,false': [3.891, 24, 41], 'false': [0.363, 594, 111]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'true,false,true': 'haswordauthor(I, C)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true': [0.477, 2, 1], 'true,true,false,true': [3.984, 57, 22], 'true,true,false,false': [6.386, 96, 71], 'true,false,true,true': [0.031, 0, 3], 'true,false,true,false': [1.209, 2, 5], 'true,false,false,true': [3.714, 26, 32], 'true,false,false,false': [3.922, 25, 40], 'false,true': [0.401, 54, 14], 'false,false': [0.359, 540, 97]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, B)', 'true,true,false': 'title(F, D), venue(F, A)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'true,false,true': 'haswordauthor(I, C)', 'true,false,false': 'haswordvenue(A, J), haswordtitle(K, J)', 'false': 'haswordvenue(A, L), haswordauthor(M, L)'}, {'true,true,true': [0.477, 2, 1], 'true,true,false,true': [3.984, 57, 22], 'true,true,false,false': [6.386, 96, 71], 'true,false,true,true': [0.029, 0, 3], 'true,false,true,false': [1.21, 2, 5], 'true,false,false,true': [3.744, 27, 31], 'true,false,false,false': [3.889, 24, 41], 'false,true': [0.397, 55, 14], 'false,false': [0.359, 539, 97]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(B, G), haswordauthor(H, G)', 'true,false,true': 'haswordauthor(I, C)', 'true,false,false': 'haswordvenue(B, J), haswordtitle(K, J)', 'false': 'haswordvenue(A, L), haswordauthor(M, L)'}, {'true,true,true': [0.477, 2, 1], 'true,true,false,true': [3.935, 59, 21], 'true,true,false,false': [6.386, 96, 71], 'true,false,true,true': [0.026, 0, 3], 'true,false,true,false': [1.211, 2, 5], 'true,false,false,true': [3.707, 26, 32], 'true,false,false,false': [3.921, 25, 40], 'false,true': [0.397, 55, 14], 'false,false': [0.359, 539, 97]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordauthor(H, G)', 'true,false,false': 'haswordvenue(B, I), haswordtitle(J, I)', 'false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false,true': 'haswordtitle(M, K)'}, {'true,true,true': [0.477, 2, 1], 'true,true,false,true': [3.935, 59, 21], 'true,true,false,false': [6.386, 96, 71], 'true,false,true': [0.323, 1, 7], 'true,false,false,true': [3.862, 28, 34], 'true,false,false,false': [3.841, 24, 39], 'false,true,true': [0.44, 36, 13], 'false,true,false': [0.225, 18, 1], 'false,false': [0.359, 540, 97]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'title(F, D), venue(F, B)', 'true,false': 'haswordvenue(A, G), haswordtitle(H, G)', 'true,false,true': 'title(I, H), venue(I, A)', 'true,false,false': 'haswordvenue(B, J), haswordauthor(K, J)', 'false': 'haswordvenue(B, L), haswordauthor(M, L)'}, {'true,true,true': [0.477, 2, 1], 'true,true,false,true': [3.935, 59, 21], 'true,true,false,false': [6.386, 96, 71], 'true,false,true,true': [3.172, 18, 25], 'true,false,true,false': [2.151, 10, 10], 'true,false,false,true': [0.833, 1, 4], 'true,false,false,false': [3.888, 24, 41], 'false,true': [0.399, 54, 14], 'false,false': [0.359, 540, 97]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordauthor(D, C)', 'true,true': 'author(E, D), venue(E, A)', 'true,false': 'haswordtitle(F, C)', 'true,false,true': 'title(G, F), venue(G, A)', 'true,false,false': 'haswordvenue(B, H), haswordauthor(I, H)', 'false': 'haswordvenue(A, J), haswordauthor(K, J)', 'false,true': 'haswordtitle(L, J)'}, {'true,true,true': [0.274, 0, 3], 'true,true,false': [0.449, 5, 12], 'true,false,true,true': [31.231, 2, 1], 'true,false,true,false': [7.41, 152, 89], 'true,false,false,true': [1.21, 2, 5], 'true,false,false,false': [5.389, 51, 72], 'false,true,true': [0.447, 36, 14], 'false,true,false': [0.051, 19, 0], 'false,false': [0.359, 539, 97]}], ['samevenue(A, B)', {'': 'haswordvenue(A, C), haswordvenue(B, C)', 'true': 'haswordtitle(D, C)', 'true,true': 'title(E, D), venue(E, A)', 'true,true,false': 'haswordtitle(D, F), haswordauthor(G, F)', 'true,false': 'haswordvenue(A, H), haswordtitle(I, H)', 'true,false,true': 'haswordauthor(J, H)', 'true,false,false': 'haswordvenue(B, K), haswordauthor(L, K)', 'false': 'haswordvenue(B, M), haswordauthor(N, M)'}, {'true,true,true': [0.477, 2, 1], 'true,true,false,true': [7.311, 150, 86], 'true,true,false,false': [1.651, 5, 6], 'true,false,true,true': [0.911, 1, 4], 'true,false,true,false': [3.719, 27, 31], 'true,false,false,true': [0.833, 1, 4], 'true,false,false,false': [3.888, 24, 41], 'false,true': [0.398, 54, 14], 'false,false': [0.358, 540, 97]}]]
[{'': [0.23056264001219365, 0.1326573110004538], 'true': [0.22854484853184212, 0.23969698682797308], 'true,false': [0.10937499999999978, 0.24294399999999924], 'true,false,false': [0.24930747922437826, 0.23248269896193802], 'true,true': [0.2281312796811544, 0.23512790005949005], 'true,true,false': [0.2009293382470767, 0.24439743267955086], 'false': [0.16173072883847878, 0.12925467742573574], 'false,true': [0.20159999999999947, 0.0]}, {'': [0.22993946595135922, 0.13224960239005062], 'true': [0.22846878504732016, 0.23737667687662606], 'true,false': [0.10937500000000017, 0.24211216065929417], 'true,false,false': [0.24930747922437765, 0.23248269896193777], 'true,true': [0.22813127968119376, 0.23390097439363394], 'true,true,false': [0.2009293382470753, 0.24439743267955008], 'false': [0.16322019560408307, 0.12866353756113344], 'false,true': [0.19406276883320137, 0.050168983177136375]}, {'': [0.22933743024475012, 0.13196826739438997], 'true': [0.22839867993340537, 0.2350768009600254], 'true,false': [0.24127541266253663, 0.22784789060633578], 'true,false,true': [0.23625530860676602, 0.2430555555555556], 'true,true': [0.21096660981320728, 0.22801529312519977], 'true,true,false': [0.2277758246812017, 0.23204765638702113], 'true,false,false': [0.14654568865363493, 0.232899408284024], 'true,true,true': [1.4802973661668753e-16, 0.2324440238762223]}, {'': [0.2287586075213194, 0.1319628636374175], 'true': [0.22819955657393295, 0.23349691506999287], 'true,false': [0.15063621416299786, 0.2381414585328256], 'true,false,false': [0.2378549125088717, 0.23660396822334448], 'true,true': [0.2279516395372253, 0.2323719216335095], 'true,true,false': [0.20092933824707648, 0.2442094704154881], 'true,false,true': [0.00031134672771219546, 0.20882626872022753], 'false': [0.16095257268919347, 0.1286578090064491]}, {'': [0.22845760414697194, 0.1319056564387083], 'true': [0.22814230812761746, 0.23200259339762913], 'true,false': [0.14894161609808665, 0.23757972520128717], 'true,false,false': [0.2416634439100596, 0.23269948533818172], 'true,true': [0.22794234102001962, 0.2315584920139428], 'true,true,false': [0.20092933824707615, 0.24420330636731605], 'true,false,true': [0.0002815878534149219, 0.20930900253957127], 'false': [0.15764547075237387, 0.1289229565953503]}, {'': [0.22829047590104085, 0.13184923738664633], 'true': [0.2281042865177273, 0.23116975747457294], 'true,false': [0.14829271511311803, 0.23721282307692393], 'true,false,false': [0.23691074220554934, 0.23647734158531575], 'true,true': [0.22794860204975187, 0.23063316329134664], 'true,true,false': [0.19359375000000043, 0.2441995580146455], 'true,false,true': [0.00022201973717796605, 0.20939737171674203], 'false': [0.15751321320125128, 0.1289219759167805]}, {'': [0.2281576932753226, 0.13180408692609857], 'true': [0.22803565204422807, 0.2306626037807778], 'true,false': [0.10435164143909526, 0.23798124572795432], 'true,false,false': [0.24054744851073928, 0.23423094184460522], 'true,true': [0.22794114656575196, 0.22952950519045295], 'true,true,false': [0.19359375000000031, 0.2441972950448075], 'false': [0.16088932378350632, 0.12854091182908242], 'false,true': [0.19378896315892796, 0.05041507439539451]}, {'': [0.22807587673496024, 0.13158353016961719], 'true': [0.22799120673184686, 0.2301648315612249], 'true,false': [0.23450806684853492, 0.22591922151339508], 'true,false,true': [0.234054998195786, 0.2314214115969247], 'true,true': [0.227935644898675, 0.22883809760791737], 'true,true,false': [0.19359375000000031, 0.24419591466183163], 'true,false,false': [0.13882899379682473, 0.23261467083333573], 'false': [0.15905428091540524, 0.12853992747995774]}, {'': [0.22802796234227427, 0.1315469205837097], 'true': [0.1791324937771232, 0.227999396596089], 'true,false': [0.2277946753391154, 0.23480786660463698], 'true,false,false': [0.20925571282841066, 0.23608605269440563], 'true,false,true': [0.22778635640992595, 0.22785560111531622], 'true,true': [0.025073253428503122, 0.2017948116568228], 'false': [0.15698371313778717, 0.12867672030398805], 'false,true': [0.1997905695590023, 0.0001380941651108937]}, {'': [0.22791079594545519, 0.13121225804370107], 'true': [0.22785424729761636, 0.2296557856808635], 'true,false': [0.23358112004048515, 0.22591459840111072], 'true,false,true': [0.1658851201060192, 0.2385031129600637], 'true,true': [0.22781949052550984, 0.22837906136218689], 'true,true,false': [0.2265029051076641, 0.2479338842975207], 'true,false,false': [0.13881371959689037, 0.2326131898548561], 'false': [0.15857327769850632, 0.12820794682713763]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;false;haswordvenue(A, K), haswordauthor(L, K).;true;true
0;false,true;haswordtitle(M, K).;true;true
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;haswordauthor(E, C).;true;true
2;true,true,true;author(F, E), title(F, D).;true;true
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;true;true
3;true,false,true;haswordauthor(I, C).;true;true
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;true;true
4;true,false,true;haswordauthor(I, C).;true;true
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,false;haswordvenue(B, G), haswordauthor(H, G).;true;true
5;true,false,true;haswordauthor(I, C).;true;true
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;false;haswordvenue(A, J), haswordauthor(K, J).;true;true
8;false,true;haswordtitle(L, J).;true;true


Refining candidate
***************************
