Starting experiment #1 for 7_yeast_twitter

Start learning from source dataset

Source train facts examples: 15015
Source train pos examples: 369
Source train neg examples: 51477

WILL Produced-Tree #1
% FOR proteinclass(A, B):
%   if ( interaction(C, A), phenotype(A, D) )
%   then if ( interaction(E, C), recursion_proteinclass(E, B) )
%   | then if ( phenotype(E, D), interaction(A, F) )
%   | | then return 0.8373156017661788;  // std dev = 0.143, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | else return 0.35814893509951223;  // std dev = 0.500, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else if ( interaction(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.94e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | | else if ( recursion_proteinclass(C, B) )
%   | | | then return 0.7867203636709409;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.15115968778768132;  // std dev = 8.778, 372.000 (wgt'ed) examples reached here.  /* #neg=263 #pos=109 */
%   else if ( interaction(A, G), recursion_proteinclass(G, B) )
%   | then return 0.7936328060672536;  // std dev = 0.246, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | else if ( interaction(A, A) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( interaction(H, A), recursion_proteinclass(H, B) )
%   | | | then return 0.6763307532813305;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.1754180114047299;  // std dev = 10.386, 498.000 (wgt'ed) examples reached here.  /* #neg=340 #pos=158 */
WILL Produced-Tree #2
% FOR proteinclass(A, B):
%   if ( location(A, C), phenotype(A, D) )
%   then if ( location(E, C), recursion_proteinclass(E, B) )
%   | then if ( phenotype(E, D) )
%   | | then if ( enzyme(E, F), enzyme(A, F) )
%   | | | then return 0.8110999061309233;  // std dev = 0.403, 73.000 (wgt'ed) examples reached here.  /* #pos=73 */
%   | | | else return 0.6416128066947957;  // std dev = 4.325, 147.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=123 */
%   | | else return -0.15605221004015118;  // std dev = 0.196, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else return -0.1541113294789068;  // std dev = 0.257, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
%   else if ( interaction(A, G), recursion_proteinclass(G, B) )
%   | then return 0.731999685353802;  // std dev = 0.008, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else if ( interaction(A, H), location(A, I) )
%   | | then if ( interaction(H, J), recursion_proteinclass(J, B) )
%   | | | then return 0.7639975016167194;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.059901089845925515;  // std dev = 5.187, 158.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=35 */
%   | | else if ( interaction(K, A), recursion_proteinclass(K, B) )
%   | | | then return 0.7546686895771392;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.18644900743254472;  // std dev = 7.597, 254.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=89 */
WILL Produced-Tree #3
% FOR proteinclass(A, B):
%   if ( location(A, C) )
%   then if ( location(D, C), recursion_proteinclass(D, B) )
%   | then if ( interaction(E, D), interaction(E, A) )
%   | | then return 0.6557340048212852;  // std dev = 0.226, 326.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=308 */
%   | | else if ( interaction(D, F), interaction(A, F) )
%   | | | then return 0.6842407662262249;  // std dev = 1.318, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | | | else return -0.17488392406887893;  // std dev = 0.664, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   | else return -0.15686231422074953;  // std dev = 0.678, 568.000 (wgt'ed) examples reached here.  /* #neg=568 */
%   else if ( interaction(G, A), phenotype(G, H) )
%   | then if ( interaction(G, I), recursion_proteinclass(I, B) )
%   | | then return 0.6028350567812747;  // std dev = 0.366, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else return -0.18731585756306107;  // std dev = 0.073, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else if ( enzyme(A, J) )
%   | | then return 0.2681652729960182;  // std dev = 1.144, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( interaction(K, A), interaction(L, K) )
%   | | | then return 0.09387965207903516;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.20816536636474944;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #4
% FOR proteinclass(A, B):
%   if ( interaction(A, C), recursion_proteinclass(C, B) )
%   then return 0.3788591967217911;  // std dev = 0.201, 61.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=57 */
%   else if ( interaction(D, A), interaction(A, D) )
%   | then if ( complex(A, E), complex(D, E) )
%   | | then if ( interaction(A, A) )
%   | | | then return -0.12445417271303234;  // std dev = 0.472, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return -0.038196057842114606;  // std dev = 1.184, 21.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
%   | | else if ( enzyme(D, F), enzyme(A, F) )
%   | | | then return -0.11566080305829529;  // std dev = 0.574, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | | | else return 0.029882062197572456;  // std dev = 3.059, 121.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=34 */
%   | else if ( interaction(A, G), enzyme(G, H) )
%   | | then if ( phenotype(G, I) )
%   | | | then return 0.09662496969121084;  // std dev = 3.230, 80.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=26 */
%   | | | else return -0.016945471135723894;  // std dev = 1.937, 45.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=8 */
%   | | else if ( interaction(J, A), enzyme(J, K) )
%   | | | then return 0.0664408564372482;  // std dev = 4.422, 161.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=48 */
%   | | | else return 0.10587674417935022;  // std dev = 8.851, 568.000 (wgt'ed) examples reached here.  /* #neg=377 #pos=191 */
WILL Produced-Tree #5
% FOR proteinclass(A, B):
%   if ( interaction(C, A), recursion_proteinclass(C, B) )
%   then if ( location(A, D), location(C, D) )
%   | then return 0.3581202600075088;  // std dev = 0.059, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else if ( interaction(C, E), interaction(E, A) )
%   | | then return 0.3892699522712094;  // std dev = 0.081, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.021405380099701443;  // std dev = 0.521, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( interaction(A, F), interaction(F, A) )
%   | then if ( interaction(A, A) )
%   | | then return -0.10397951656256725;  // std dev = 0.156, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | else if ( enzyme(A, G), location(F, H) )
%   | | | then return -0.014331500596165274;  // std dev = 1.822, 46.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=11 */
%   | | | else return 0.0649525042942975;  // std dev = 2.785, 85.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=31 */
%   | else if ( interaction(A, I), recursion_proteinclass(I, B) )
%   | | then return 0.3785776097114873;  // std dev = 0.084, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( interaction(A, J), location(A, K) )
%   | | | then return 0.048861588286994335;  // std dev = 6.096, 328.000 (wgt'ed) examples reached here.  /* #neg=239 #pos=89 */
%   | | | else return 0.08879421210957285;  // std dev = 8.258, 491.000 (wgt'ed) examples reached here.  /* #neg=329 #pos=162 */
WILL Produced-Tree #6
% FOR proteinclass(A, B):
%   if ( interaction(A, C), interaction(C, A) )
%   then if ( recursion_proteinclass(C, B) )
%   | then return 0.21449137878163954;  // std dev = 0.181, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | else return -0.01210908490040865;  // std dev = 0.248, 195.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=43 */
%   else if ( interaction(D, A), complex(D, E) )
%   | then if ( complex(A, E) )
%   | | then if ( phenotype(A, F) )
%   | | | then return 0.03398621070070823;  // std dev = 2.006, 50.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=17 */
%   | | | else return -0.04535689563805574;  // std dev = 2.117, 53.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=12 */
%   | | else if ( location(A, G), phenotype(A, H) )
%   | | | then return 0.05278464289216082;  // std dev = 4.369, 195.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=60 */
%   | | | else return 0.09098126151424003;  // std dev = 5.111, 170.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=59 */
%   | else if ( interaction(I, A), recursion_proteinclass(I, B) )
%   | | then return 0.3316377498598449;  // std dev = 0.129, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( enzyme(A, J), location(A, K) )
%   | | | then return 0.09158569204351406;  // std dev = 4.011, 134.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=48 */
%   | | | else return 0.06623375438500742;  // std dev = 6.062, 283.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=91 */
WILL Produced-Tree #7
% FOR proteinclass(A, B):
%   if ( interaction(C, A), complex(A, D) )
%   then return 0.03227550664624652;  // std dev = 0.307, 395.000 (wgt'ed) examples reached here.  /* #neg=267 #pos=128 */
%   else if ( interaction(E, A), complex(E, F) )
%   | then if ( interaction(G, E), recursion_proteinclass(G, B) )
%   | | then if ( interaction(A, H), interaction(G, H) )
%   | | | then return 0.3876871230328064;  // std dev = 0.522, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.18871020706666203;  // std dev = 1.027, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( interaction(A, E) )
%   | | | then return -0.1067897093703548;  // std dev = 0.145, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return 0.04835394864182611;  // std dev = 5.839, 277.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=88 */
%   | else if ( interaction(A, I), complex(I, J) )
%   | | then if ( interaction(I, I), location(A, K) )
%   | | | then return 0.11708326588319759;  // std dev = 1.785, 31.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=14 */
%   | | | else return 0.03372432899098441;  // std dev = 3.232, 94.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=31 */
%   | | else if ( interaction(L, A), location(L, M) )
%   | | | then return 0.07301293437700188;  // std dev = 5.069, 209.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=75 */
%   | | | else return 0.1261525167147457;  // std dev = 2.239, 37.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=15 */
WILL Produced-Tree #8
% FOR proteinclass(A, B):
%   if ( location(A, C), complex(A, D) )
%   then if ( location(E, C), recursion_proteinclass(E, B) )
%   | then return 0.16374466836565021;  // std dev = 0.335, 259.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=146 */
%   | else return -0.15994122822068568;  // std dev = 0.563, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   else if ( location(A, F) )
%   | then if ( location(G, F), recursion_proteinclass(G, B) )
%   | | then if ( interaction(H, G), interaction(H, A) )
%   | | | then return 0.4422041598419386;  // std dev = 3.494, 193.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=182 */
%   | | | else return -0.06648206127588362;  // std dev = 3.237, 133.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=24 */
%   | | else return -0.17501087165006354;  // std dev = 0.711, 323.000 (wgt'ed) examples reached here.  /* #neg=323 */
%   | else if ( enzyme(A, I), interaction(J, A) )
%   | | then if ( interaction(J, K), recursion_proteinclass(K, B) )
%   | | | then return 0.5432880019039787;  // std dev = 0.323, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.16920941186272198;  // std dev = 0.027, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( interaction(L, A), phenotype(L, M) )
%   | | | then return -0.01236172484464029;  // std dev = 1.748, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
%   | | | else return 0.12185964048235694;  // std dev = 1.881, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #9
% FOR proteinclass(A, B):
%   if ( interaction(A, C), recursion_proteinclass(C, B) )
%   then if ( complex(A, D), complex(C, D) )
%   | then return 0.21207007701167918;  // std dev = 0.051, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else return 0.07836642526006286;  // std dev = 0.229, 31.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=26 */
%   else if ( interaction(E, A), location(A, F) )
%   | then if ( interaction(A, A) )
%   | | then return -0.0939687293530796;  // std dev = 0.341, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | else if ( interaction(G, E), interaction(G, A) )
%   | | | then return 1.5009669363415064E-4;  // std dev = 4.971, 320.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=93 */
%   | | | else return 0.02536652740652224;  // std dev = 6.848, 526.000 (wgt'ed) examples reached here.  /* #neg=359 #pos=167 */
%   | else if ( interaction(A, H), enzyme(H, I) )
%   | | then if ( location(A, J), location(H, J) )
%   | | | then return -0.042828894742295155;  // std dev = 1.533, 32.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=7 */
%   | | | else return 0.0512698698190608;  // std dev = 2.035, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
%   | | else if ( phenotype(A, K) )
%   | | | then return 0.05258719681372339;  // std dev = 2.102, 48.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=16 */
%   | | | else return 0.129204776023368;  // std dev = 2.885, 49.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=20 */
WILL Produced-Tree #10
% FOR proteinclass(A, B):
%   if ( location(A, C) )
%   then if ( location(D, C), recursion_proteinclass(D, B) )
%   | then if ( complex(D, E), complex(A, E) )
%   | | then if ( interaction(A, F), recursion_proteinclass(F, B) )
%   | | | then return 0.18444922126985622;  // std dev = 0.283, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.4545351281691383;  // std dev = 1.101, 112.000 (wgt'ed) examples reached here.  /* #pos=112 */
%   | | else if ( interaction(G, A), interaction(G, D) )
%   | | | then return 0.33284010743768366;  // std dev = 3.483, 194.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=182 */
%   | | | else return -0.10208819172364483;  // std dev = 3.373, 194.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=24 */
%   | else return -0.14600331483754703;  // std dev = 0.807, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
%   else if ( interaction(H, A), recursion_proteinclass(H, B) )
%   | then return 0.19347324305046343;  // std dev = 0.048, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( interaction(A, A) )
%   | | then return -0.32146804466602524;  // std dev = 0.484, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( interaction(I, A), complex(I, J) )
%   | | | then return 0.0070733535860149355;  // std dev = 1.436, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
%   | | | else return -0.08313880896937022;  // std dev = 2.499, 41.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=9 */


Starting fold 1

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos	 examples: 156
Target test neg examples: 24648

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), phenotype(A, D).;true;true
0;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
0;true,true;phenotype(E, D), interaction(A, F).;false;false
0;true,false;interaction(A, C).;false;true
0;true,false,false;recursion_proteinclass(C, B).;false;false
0;false;interaction(A, G), recursion_proteinclass(G, B).;false;true
0;false,false;interaction(A, A).;false;true
0;false,false,false;interaction(H, A), recursion_proteinclass(H, B).;false;false
1;;proteinclass(A, B) :- location(A, C), phenotype(A, D).;true;true
1;true;location(E, C), recursion_proteinclass(E, B).;true;false
1;true,true;phenotype(E, D).;true;false
1;true,true,true;enzyme(E, F), enzyme(A, F).;false;false
1;false;interaction(A, G), recursion_proteinclass(G, B).;false;true
1;false,false;interaction(A, H), location(A, I).;true;true
1;false,false,true;interaction(H, J), recursion_proteinclass(J, B).;false;false
1;false,false,false;interaction(K, A), recursion_proteinclass(K, B).;false;false
2;;proteinclass(A, B) :- location(A, C).;true;true
2;true;location(D, C), recursion_proteinclass(D, B).;true;false
2;true,true;interaction(E, D), interaction(E, A).;false;true
2;true,true,false;interaction(D, F), interaction(A, F).;false;false
2;false;interaction(G, A), phenotype(G, H).;true;true
2;false,true;interaction(G, I), recursion_proteinclass(I, B).;false;false
2;false,false;enzyme(A, J).;false;true
2;false,false,false;interaction(K, A), interaction(L, K).;false;false
3;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
3;false;interaction(D, A), interaction(A, D).;true;true
3;false,true;complex(A, E), complex(D, E).;true;true
3;false,true,true;interaction(A, A).;false;false
3;false,true,false;enzyme(D, F), enzyme(A, F).;false;false
3;false,false;interaction(A, G), enzyme(G, H).;true;true
3;false,false,true;phenotype(G, I).;false;false
3;false,false,false;interaction(J, A), enzyme(J, K).;false;false
4;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
4;true;location(A, D), location(C, D).;false;true
4;true,false;interaction(C, E), interaction(E, A).;false;false
4;false;interaction(A, F), interaction(F, A).;true;true
4;false,true;interaction(A, A).;false;true
4;false,true,false;enzyme(A, G), location(F, H).;false;false
4;false,false;interaction(A, I), recursion_proteinclass(I, B).;false;true
4;false,false,false;interaction(A, J), location(A, K).;false;false
5;;proteinclass(A, B) :- interaction(A, C), interaction(C, A).;true;true
5;true;recursion_proteinclass(C, B).;false;false
5;false;interaction(D, A), complex(D, E).;true;true
5;false,true;complex(A, E).;true;true
5;false,true,true;phenotype(A, F).;false;false
5;false,true,false;location(A, G), phenotype(A, H).;false;false
5;false,false;interaction(I, A), recursion_proteinclass(I, B).;false;true
5;false,false,false;enzyme(A, J), location(A, K).;false;false
6;;proteinclass(A, B) :- interaction(C, A), complex(A, D).;false;true
6;false;interaction(E, A), complex(E, F).;true;true
6;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
6;false,true,true;interaction(A, H), interaction(G, H).;false;false
6;false,true,false;interaction(A, E).;false;false
6;false,false;interaction(A, I), complex(I, J).;true;true
6;false,false,true;interaction(I, I), location(A, K).;false;false
6;false,false,false;interaction(L, A), location(L, M).;false;false
7;;proteinclass(A, B) :- location(A, C), complex(A, D).;true;true
7;true;location(E, C), recursion_proteinclass(E, B).;false;false
7;false;location(A, F).;true;true
7;false,true;location(G, F), recursion_proteinclass(G, B).;true;false
7;false,true,true;interaction(H, G), interaction(H, A).;false;false
7;false,false;enzyme(A, I), interaction(J, A).;true;true
7;false,false,true;interaction(J, K), recursion_proteinclass(K, B).;false;false
7;false,false,false;interaction(L, A), phenotype(L, M).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;complex(A, D), complex(C, D).;false;false
8;false;interaction(E, A), location(A, F).;true;true
8;false,true;interaction(A, A).;false;true
8;false,true,false;interaction(G, E), interaction(G, A).;false;false
8;false,false;interaction(A, H), enzyme(H, I).;true;true
8;false,false,true;location(A, J), location(H, J).;false;false
8;false,false,false;phenotype(A, K).;false;false
9;;proteinclass(A, B) :- location(A, C).;true;true
9;true;location(D, C), recursion_proteinclass(D, B).;true;false
9;true,true;complex(D, E), complex(A, E).;true;true
9;true,true,true;interaction(A, F), recursion_proteinclass(F, B).;false;false
9;true,true,false;interaction(G, A), interaction(G, D).;false;false
9;false;interaction(H, A), recursion_proteinclass(H, B).;false;true
9;false,false;interaction(A, A).;false;true
9;false,false,false;interaction(I, A), complex(I, J).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then return 0.8333555466697585;  // std dev = 1.710, 121.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=118 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048832;  // std dev = 0.000, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
%   else if ( recursion_accounttype(F, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(A, D) )
%   then if ( tweets(E, C), recursion_accounttype(E, B) )
%   | then if ( follows(E, D) )
%   | | then return 0.7024721391954645;  // std dev = 0.147, 91.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=89 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839124;  // std dev = 5.58e-08, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
%   else if ( recursion_accounttype(F, B) )
%   | then return 0.64845481138098;  // std dev = 1.664, 40.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=37 */
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( recursion_accounttype(I, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1254446385283912;  // std dev = 5.58e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.566252648810692;  // std dev = 0.002, 97.000 (wgt'ed) examples reached here.  /* #pos=97 */
%   | else return -0.11231637819360656;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.5788829907720161;  // std dev = 9.42e-08, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return -0.11231637819360632;  // std dev = 2.11e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4199422325056674;  // std dev = 1.000, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.10159632948783659;  // std dev = 0.000, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.28785571888540223;  // std dev = 1.961, 101.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=97 */
%   | else return 0.3361194621944196;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( tweets(E, F) )
%   | then return -0.09269127618926051;  // std dev = 1.13e-07, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23626837361830053;  // std dev = 1.971, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( follows(A, D) )
%   | then return -0.08518475138839678;  // std dev = 9.54e-08, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08518475138839683;  // std dev = 1.29e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19485322906072522;  // std dev = 0.161, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( tweets(A, D) )
%   | then return -0.07877675473109147;  // std dev = 7.60e-08, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else if ( tweets(E, F) )
%   | | then return -0.07877675473109164;  // std dev = 4.08e-08, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.1453605876512328;  // std dev = 2.069, 102.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=97 */
%   | else return -0.07324622576333668;  // std dev = 1.12e-07, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   else if ( tweets(A, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(F, B) )
%   | | then return 0.09657856734777062;  // std dev = 1.649, 32.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=29 */
%   | | else if ( follows(G, H) )
%   | | | then return -0.07324622576333704;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14076618619076592;  // std dev = 0.173, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( tweets(A, D) )
%   | then return -0.06842697784420262;  // std dev = 5.67e-09, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | else if ( tweets(A, E), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G) )
%   | | | then return -0.0684269778442027;  // std dev = 1.39e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then return 0.11165123464743502;  // std dev = 1.961, 101.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=97 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   else if ( recursion_accounttype(F, B) )
%   | then return 0.12307197342754413;  // std dev = 0.983, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */


Results
   AUC ROC   = 0.994066
   AUC PR    = 0.348817
   CLL	      = -0.086772
   Precision = 0.333333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.5


Total learning time: 8.071 seconds
Total inference time: 38.34 seconds
AUC ROC: 0.994066


Results scoring model
   AUC ROC   = 0.993032
   AUC PR    = 0.359698
   CLL	      = -0.091427
   Precision = 0.336 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.502994


Total scoring time: 27.764 seconds
Parameter learned model CLL: -0.091427


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'recursion_accounttype(D, B)', 'true,true': 'follows(D, C)', 'true,false': 'recursion_accounttype(E, B)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'recursion_accounttype(G, B)'}, {'true,true,true': [1.71, 3, 118], 'true,true,false': [0.0, 1, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 243, 0], 'false,true': [0.0, 0, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 14, 0]}], ['accounttype(A, B)', {'': 'tweets(A, C), follows(A, D)', 'true': 'tweets(E, C), recursion_accounttype(E, B)', 'true,true': 'follows(E, D)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'tweets(A, G)', 'false,false,true': 'recursion_accounttype(H, B)', 'false,false,false': 'recursion_accounttype(I, B)'}, {'true,true,true': [0.147, 2, 89], 'true,true,false': [0.0, 0, 0], 'true,false': [5.58e-08, 145, 0], 'false,true': [1.664, 3, 37], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 17, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.58e-08, 54, 0]}], ['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.002, 0, 97], 'true,false': [0.0, 188, 0], 'false,true,true': [9.42e-08, 0, 29], 'false,true,false': [2.11e-08, 49, 0], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.0, 1, 126], 'false,true': [0.0, 234, 0], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'tweets(A, D), tweets(C, D)', 'false': 'tweets(E, F)'}, {'true,true': [1.961, 4, 97], 'true,false': [0.0, 0, 29], 'false,true': [1.13e-07, 241, 0], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,false': 'tweets(A, E), follows(A, F)', 'false,false,false': 'recursion_accounttype(G, B)'}, {'true': [1.971, 4, 126], 'false,true': [9.54e-08, 256, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.29e-08, 19, 0]}], ['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'tweets(E, F)'}, {'true': [0.161, 4, 126], 'false,true': [7.6e-08, 200, 0], 'false,false,true': [4.08e-08, 77, 0], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'tweets(A, E)', 'false,false': 'recursion_accounttype(F, B)', 'false,false,false': 'follows(G, H)'}, {'true,true': [2.069, 5, 97], 'true,false': [1.12e-07, 185, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [1.649, 3, 29], 'false,false,false,true': [0.0, 60, 0], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'tweets(A, E), tweets(F, E)', 'false,false,false': 'follows(A, G)'}, {'true': [0.173, 4, 126], 'false,true': [5.67e-09, 180, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.39e-08, 50, 0], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'true,true': 'recursion_accounttype(E, B)', 'false': 'recursion_accounttype(F, B)'}, {'true,true,true': [1.961, 4, 97], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 208, 0], 'false,true': [0.983, 1, 29], 'false,false': [0.0, 62, 0]}]]
[{'': [0.21877275286170264, 0.23140495867768604], 'false': [-2.220446049250313e-16, -1.1895246692412391e-17], 'true': [0.03171190540177734, -1.5716737467944603e-16], 'true,true': [0.02417867631992703, 0.0], 'false,false': [nan, -1.1895246692412391e-17], 'true,false': [nan, -1.5716737467944603e-16]}, {'': [0.17067812521035727, 0.1629992298178516], 'true': [0.02149498852795564, 2.1438789441037505e-17], 'false': [0.0692296604159619, 6.254777603522009e-17], 'true,true': [0.02149498852795564, nan], 'false,false': [0.0, 5.756711979537848e-17], 'false,false,false': [nan, 5.756711979537848e-17], 'false,false,true': [nan, 0.0]}, {'': [0.10337927552704033, 0.11158646986237593], 'false': [0.11158646986237593, nan], 'false,true': [3.062684205862501e-16, 9.063045098980869e-18], 'true': [3.885590561971755e-06, -1.1810883240693155e-17]}, {'': [0.007874661471019324, -7.211705117223239e-17], 'false': [-7.211705117223239e-17, nan]}, {'': [0.029988232089442794, 5.3438120687351934e-17], 'true': [0.03807908165804884, -3.062684205862501e-17], 'false': [5.3438120687351934e-17, nan]}, {'': [0.0298683882480563, 3.633457171500512e-17], 'false': [3.5561831257524545e-17, 8.764918615461762e-18], 'false,false': [nan, 8.764918615461762e-18], 'false,false,false': [nan, 8.764918615461762e-18]}, {'': [0.025865557152764507, 8.817655791246731e-18], 'false': [2.886579864025407e-17, 2.1627721258931622e-17], 'false,false': [2.1627721258931622e-17, nan]}, {'': [0.025867943209375428, 0.036093889872642115], 'false': [nan, 0.036093889872642115], 'false,false': [0.08496093750000001, 0.0], 'true': [0.04198057449313827, 6.721350203136083e-17], 'false,false,false': [0.0, nan]}, {'': [0.029837818396993215, 2.703151712130816e-17], 'false': [3.20731096002823e-17, 3.885780586188048e-18], 'false,false': [nan, 3.885780586188048e-18], 'false,false,false': [3.885780586188048e-18, nan]}, {'': [0.019243691228957648, 0.018213530483767386], 'true': [0.03806027076805237, -1.0675221390626506e-18], 'true,true': [0.03806027076805237, nan], 'false': [0.032222222222222215, -3.581364595565021e-18]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(A, C).;true;true
0;true;recursion_accounttype(D, B).;true;true
0;true,true;follows(D, C).;true;true
0;false;recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- tweets(A, C), follows(A, D).;true;true
1;true;tweets(E, C), recursion_accounttype(E, B).;true;true
1;false;recursion_accounttype(F, B).;true;true
1;false,false;tweets(A, G).;true;true
2;;accounttype(A, B) :- tweets(A, C).;true;true
2;true;tweets(D, C), recursion_accounttype(D, B).;true;true
2;false;recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;true;tweets(A, D), tweets(C, D).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;false;follows(A, D).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;false;tweets(A, D).;true;true
7;;accounttype(A, B) :- tweets(A, C).;true;true
7;true;tweets(D, C), recursion_accounttype(D, B).;true;true
7;false;recursion_accounttype(F, B).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;tweets(A, D).;true;true
9;;accounttype(A, B) :- tweets(A, C).;true;true
9;true;tweets(D, C), recursion_accounttype(D, B).;true;true
9;false;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.8191878961384739;  // std dev = 1.698, 77.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=74 */
%   | | | else return 0.8581489350995121;  // std dev = 8.43e-08, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004884;  // std dev = 0.000, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
%   else if ( recursion_accounttype(F, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(A, D) )
%   then if ( tweets(E, C), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.7272693257751327;  // std dev = 1.58e-07, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5376552303927725;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.6740188667564088;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else return -0.1254446385283915;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( tweets(A, I) )
%   | | then return 0.6083623010998431;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.7235057812958744;  // std dev = 0.021, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( tweets(A, J) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return -0.12544463852839116;  // std dev = 2.58e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5630483063694074;  // std dev = 1.88e-07, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | | else return 0.5996953357065604;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.4995375048423324;  // std dev = 1.358, 28.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=26 */
%   | | | else return 0.5665606355632441;  // std dev = 3.65e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.11231637819360657;  // std dev = 0.000, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(A, I), follows(I, J) )
%   | | then if ( follows(K, A), recursion_accounttype(K, B) )
%   | | | then return 0.5639740113165461;  // std dev = 5.16e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.5543704844651816;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.4115133416080386;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return -0.11231637819360629;  // std dev = 4.56e-09, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( tweets(D, E), follows(D, A) )
%   | | | then return 0.3994259145818113;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.43525462139582477;  // std dev = 0.064, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( follows(D, F), tweets(D, G) )
%   | | | then return 0.36557488256209403;  // std dev = 1.681, 47.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=44 */
%   | | | else return 0.43977973961747224;  // std dev = 0.044, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.3474718231739506;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else return -0.1015963294878366;  // std dev = 0.000, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.31431789329484056;  // std dev = 0.994, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | | | else return 0.005547744415377087;  // std dev = 0.806, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.3461208863780798;  // std dev = 0.059, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.37436858641701193;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.3379948735768609;  // std dev = 2.98e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.33658585432233973;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(I, A), follows(A, I) )
%   | | | then return 0.1642368352088639;  // std dev = 0.912, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.34073108206619757;  // std dev = 0.021, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.0926912761892605;  // std dev = 8.01e-09, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.26409655747549116;  // std dev = 0.020, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | | else return 0.25748568130113425;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(F, A), follows(F, D) )
%   | | | then return 0.058439310994455665;  // std dev = 1.215, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.2969069235871997;  // std dev = 0.066, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(A, H), tweets(A, I) )
%   | | | then return 0.2784437348612684;  // std dev = 0.017, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.29116169922817764;  // std dev = 0.029, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.26055647143972915;  // std dev = 0.021, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.2691050610957676;  // std dev = 0.018, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.08518475138839678;  // std dev = 5.82e-09, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(D, B), follows(E, A) )
%   | | then if ( tweets(E, F) )
%   | | | then return 0.21890670074912277;  // std dev = 0.062, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   | | | else return -0.1170309486872529;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(D, G), follows(A, H) )
%   | | | then return 0.15360277621177937;  // std dev = 1.666, 38.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=35 */
%   | | | else return -0.44733198816124037;  // std dev = 0.807, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.24201701234593082;  // std dev = 0.055, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.21356460917391373;  // std dev = 0.019, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.2195623367085784;  // std dev = 0.016, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( tweets(A, K) )
%   | then return -0.07877675473109147;  // std dev = 5.67e-09, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | else return -0.07877675473109172;  // std dev = 2.95e-09, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(A, G) )
%   | | | then return 0.16671618279390793;  // std dev = 0.998, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | | else return 0.0664717870764516;  // std dev = 1.330, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.2222265998878551;  // std dev = 0.071, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.19237653170082375;  // std dev = 0.052, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.07324622576333671;  // std dev = 7.62e-09, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else if ( recursion_accounttype(I, B) )
%   | then if ( follows(J, A) )
%   | | then return 0.19619389121207326;  // std dev = 0.014, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.07381298074643428;  // std dev = 0.872, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.18695185722958776;  // std dev = 0.006, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.07324622576333704;  // std dev = 1.05e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(D, E) )
%   | | then if ( follows(A, F), follows(D, F) )
%   | | | then return 0.15768218535405062;  // std dev = 0.021, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return 0.18631735018264733;  // std dev = 0.043, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.19503766417066754;  // std dev = 0.102, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.1651487694820865;  // std dev = 0.038, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.17243342667794817;  // std dev = 0.019, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.07725160710281466;  // std dev = 1.233, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else if ( follows(J, A), tweets(A, K) )
%   | | | then return 0.18441563329710303;  // std dev = 0.019, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.16180166488322026;  // std dev = 0.055, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.06842697784420262;  // std dev = 5.82e-09, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.1274910998011748;  // std dev = 0.999, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | | else return -0.23641634488928237;  // std dev = 1.082, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.15139855170268324;  // std dev = 0.015, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(H, A) )
%   | | then if ( recursion_accounttype(H, B), follows(A, H) )
%   | | | then return 0.138251752875265;  // std dev = 0.011, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.1638518179481609;  // std dev = 0.046, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.08465541149147793;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.13952738140450419;  // std dev = 0.005, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */


Results
   AUC ROC   = 0.995385
   AUC PR    = 0.435056
   CLL	      = -0.085923
   Precision = 0.333333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.5


Total learning time: 25.019 seconds
Total inference time: 43.453 seconds
AUC ROC: 0.995385


Results scoring model
   AUC ROC   = 0.994316
   AUC PR    = 0.421361
   CLL	      = -0.091546
   Precision = 0.335106 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.501992


Total scoring time: 37.229 seconds
Refined model CLL: -0.091546


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.994066
   AUC PR    = 0.348817
   CLL	      = -0.086772
   Precision = 0.333333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.5


Total learning time: 98.083 seconds
Total inference time: 38.34 seconds
AUC ROC: 0.994066
Total revision time: 98.083
Best scored revision CLL: -0.091427


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:07:04
{'AUC ROC': 0.994066, 'AUC PR': 0.348817, 'CLL': -0.086772, 'Precision': [0.333333, 0.5], 'Recall': 1.0, 'F1': 0.5, 'Learning time': 98.083, 'Inference time': 38.34, 'parameter': {'AUC ROC': 0.994066, 'AUC PR': 0.348817, 'CLL': -0.086772, 'Precision': [0.333333, 0.5], 'Recall': 1.0, 'F1': 0.5, 'Learning time': 8.071, 'Inference time': 38.34}}


Starting fold 2

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos	 examples: 126
Target test neg examples: 16128

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), phenotype(A, D).;true;true
0;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
0;true,true;phenotype(E, D), interaction(A, F).;false;false
0;true,false;interaction(A, C).;false;true
0;true,false,false;recursion_proteinclass(C, B).;false;false
0;false;interaction(A, G), recursion_proteinclass(G, B).;false;true
0;false,false;interaction(A, A).;false;true
0;false,false,false;interaction(H, A), recursion_proteinclass(H, B).;false;false
1;;proteinclass(A, B) :- location(A, C), phenotype(A, D).;true;true
1;true;location(E, C), recursion_proteinclass(E, B).;true;false
1;true,true;phenotype(E, D).;true;false
1;true,true,true;enzyme(E, F), enzyme(A, F).;false;false
1;false;interaction(A, G), recursion_proteinclass(G, B).;false;true
1;false,false;interaction(A, H), location(A, I).;true;true
1;false,false,true;interaction(H, J), recursion_proteinclass(J, B).;false;false
1;false,false,false;interaction(K, A), recursion_proteinclass(K, B).;false;false
2;;proteinclass(A, B) :- location(A, C).;true;true
2;true;location(D, C), recursion_proteinclass(D, B).;true;false
2;true,true;interaction(E, D), interaction(E, A).;false;true
2;true,true,false;interaction(D, F), interaction(A, F).;false;false
2;false;interaction(G, A), phenotype(G, H).;true;true
2;false,true;interaction(G, I), recursion_proteinclass(I, B).;false;false
2;false,false;enzyme(A, J).;false;true
2;false,false,false;interaction(K, A), interaction(L, K).;false;false
3;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
3;false;interaction(D, A), interaction(A, D).;true;true
3;false,true;complex(A, E), complex(D, E).;true;true
3;false,true,true;interaction(A, A).;false;false
3;false,true,false;enzyme(D, F), enzyme(A, F).;false;false
3;false,false;interaction(A, G), enzyme(G, H).;true;true
3;false,false,true;phenotype(G, I).;false;false
3;false,false,false;interaction(J, A), enzyme(J, K).;false;false
4;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
4;true;location(A, D), location(C, D).;false;true
4;true,false;interaction(C, E), interaction(E, A).;false;false
4;false;interaction(A, F), interaction(F, A).;true;true
4;false,true;interaction(A, A).;false;true
4;false,true,false;enzyme(A, G), location(F, H).;false;false
4;false,false;interaction(A, I), recursion_proteinclass(I, B).;false;true
4;false,false,false;interaction(A, J), location(A, K).;false;false
5;;proteinclass(A, B) :- interaction(A, C), interaction(C, A).;true;true
5;true;recursion_proteinclass(C, B).;false;false
5;false;interaction(D, A), complex(D, E).;true;true
5;false,true;complex(A, E).;true;true
5;false,true,true;phenotype(A, F).;false;false
5;false,true,false;location(A, G), phenotype(A, H).;false;false
5;false,false;interaction(I, A), recursion_proteinclass(I, B).;false;true
5;false,false,false;enzyme(A, J), location(A, K).;false;false
6;;proteinclass(A, B) :- interaction(C, A), complex(A, D).;false;true
6;false;interaction(E, A), complex(E, F).;true;true
6;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
6;false,true,true;interaction(A, H), interaction(G, H).;false;false
6;false,true,false;interaction(A, E).;false;false
6;false,false;interaction(A, I), complex(I, J).;true;true
6;false,false,true;interaction(I, I), location(A, K).;false;false
6;false,false,false;interaction(L, A), location(L, M).;false;false
7;;proteinclass(A, B) :- location(A, C), complex(A, D).;true;true
7;true;location(E, C), recursion_proteinclass(E, B).;false;false
7;false;location(A, F).;true;true
7;false,true;location(G, F), recursion_proteinclass(G, B).;true;false
7;false,true,true;interaction(H, G), interaction(H, A).;false;false
7;false,false;enzyme(A, I), interaction(J, A).;true;true
7;false,false,true;interaction(J, K), recursion_proteinclass(K, B).;false;false
7;false,false,false;interaction(L, A), phenotype(L, M).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;complex(A, D), complex(C, D).;false;false
8;false;interaction(E, A), location(A, F).;true;true
8;false,true;interaction(A, A).;false;true
8;false,true,false;interaction(G, E), interaction(G, A).;false;false
8;false,false;interaction(A, H), enzyme(H, I).;true;true
8;false,false,true;location(A, J), location(H, J).;false;false
8;false,false,false;phenotype(A, K).;false;false
9;;proteinclass(A, B) :- location(A, C).;true;true
9;true;location(D, C), recursion_proteinclass(D, B).;true;false
9;true,true;complex(D, E), complex(A, E).;true;true
9;true,true,true;interaction(A, F), recursion_proteinclass(F, B).;false;false
9;true,true,false;interaction(G, A), interaction(G, D).;false;false
9;false;interaction(H, A), recursion_proteinclass(H, B).;false;true
9;false,false;interaction(A, A).;false;true
9;false,false,false;interaction(I, A), complex(I, J).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(A, D) )
%   then if ( follows(E, C), recursion_accounttype(E, B) )
%   | then if ( tweets(E, D), follows(A, F) )
%   | | then return 0.8055173561521445;  // std dev = 1.947, 76.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=72 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048793;  // std dev = 0.000, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   | | else if ( recursion_accounttype(C, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.07733493586822972;  // std dev = 1.368, 31.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.0941039912792868;  // std dev = 5.665, 178.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=42 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, C) )
%   | | then return 0.725097794936441;  // std dev = 0.161, 118.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=115 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1328416445476752;  // std dev = 0.165, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return 0.7285554015677006;  // std dev = 8.43e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.7711812325320735;  // std dev = 0.965, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return -0.12988725649260852;  // std dev = 1.397, 84.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=2 */
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.142599515994164;  // std dev = 2.373, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(D, A) )
%   | then return 0.526937051522015;  // std dev = 2.246, 113.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=108 */
%   | else if ( follows(C, E), follows(A, E) )
%   | | then return 0.6667152027814481;  // std dev = 1.208, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | else return 0.7906224880837237;  // std dev = 0.159, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(F, A), tweets(F, G) )
%   | then if ( follows(F, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.11788108146727679;  // std dev = 0.187, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14387709187581668;  // std dev = 0.141, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.3974276462292481;  // std dev = 1.715, 81.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=78 */
%   else if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.062233170358778914;  // std dev = 0.151, 189.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=15 */
%   | else if ( follows(A, E) )
%   | | then if ( tweets(E, F) )
%   | | | then return 0.05857627063040198;  // std dev = 3.510, 135.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=35 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(G, A) )
%   | | | then return 0.06412308131379141;  // std dev = 1.987, 51.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=17 */
%   | | | else return 0.10616305690425272;  // std dev = 2.142, 34.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.35817089562926846;  // std dev = 0.240, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else return 0.35954587362305634;  // std dev = 0.150, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04971408337695369;  // std dev = 0.173, 184.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=19 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.3369044105144254;  // std dev = 0.233, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.04014925822881897;  // std dev = 3.381, 125.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=30 */
%   | | | else return -0.010315039348420641;  // std dev = 2.573, 68.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, A) )
%   then if ( recursion_accounttype(C, B) )
%   | then return 0.2330735131133938;  // std dev = 1.390, 61.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=59 */
%   | else return -0.03208698478338458;  // std dev = 2.408, 178.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=23 */
%   else if ( follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then return 0.021099813719379655;  // std dev = 1.867, 73.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=22 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03780045674686361;  // std dev = 1.008, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.06822561217973688;  // std dev = 0.322, 151.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=48 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then return 0.02867142784829236;  // std dev = 3.833, 311.000 (wgt'ed) examples reached here.  /* #neg=203 #pos=108 */
%   else if ( follows(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05087833654269367;  // std dev = 3.387, 113.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=37 */
%   | | else if ( follows(F, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07187969004337477;  // std dev = 2.114, 35.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3143576398946423;  // std dev = 3.113, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1019531106976152;  // std dev = 0.259, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | | else if ( follows(G, A), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1523199097683968;  // std dev = 0.144, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13538162895887704;  // std dev = 0.209, 82.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(E, D), follows(E, A) )
%   | | | then return -0.054749284278549436;  // std dev = 1.398, 164.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=17 */
%   | | | else return 0.02060484468629498;  // std dev = 1.956, 86.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=21 */
%   | else if ( follows(A, F) )
%   | | then return 0.022345928719530752;  // std dev = 0.268, 108.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=29 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.05015973629147482;  // std dev = 0.884, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.08421169601321782;  // std dev = 1.634, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.16278938610767119;  // std dev = 0.306, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( follows(E, A), follows(E, C) )
%   | | then return 0.30382199235771;  // std dev = 1.135, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | else return 0.45958901251672035;  // std dev = 0.378, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(G, A) )
%   | | | then return -0.09194346664486217;  // std dev = 0.265, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | | | else return -0.13562382180530957;  // std dev = 0.137, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */


Results
   AUC ROC   = 0.992489
   AUC PR    = 0.336076
   CLL	      = -0.115866
   Precision = 0.333333 at threshold = 0.5
   Recall    = 0.960317
   F1        = 0.494888


Total learning time: 5.992 seconds
Total inference time: 16.109 seconds
AUC ROC: 0.992489


Results scoring model
   AUC ROC   = 0.99393
   AUC PR    = 0.357327
   CLL	      = -0.120575
   Precision = 0.333333 at threshold = 0.5
   Recall    = 0.980769
   F1        = 0.497561


Total scoring time: 17.497 seconds
Parameter learned model CLL: -0.120575


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), tweets(A, D)', 'true': 'follows(E, C), recursion_accounttype(E, B)', 'true,true': 'tweets(E, D), follows(A, F)', 'true,false': 'follows(A, C)', 'true,false,false': 'recursion_accounttype(C, B)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(A, A)', 'false,false,false': 'follows(H, A), recursion_accounttype(H, B)'}, {'true,true,true': [1.947, 4, 72], 'true,true,false': [0.0, 0, 14], 'true,false,true': [0.0, 136, 0], 'true,false,false,true': [0.0, 0, 2], 'true,false,false,false': [1.368, 29, 2], 'false,true': [0.977, 1, 21], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.11e-08, 0, 3], 'false,false,false,false': [5.665, 136, 42]}], ['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'recursion_accounttype(D, B)', 'true,true': 'tweets(D, C)', 'false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false': 'follows(A, F)', 'false,false,true': 'follows(F, G), recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A), recursion_accounttype(H, B)'}, {'true,true,true': [0.161, 3, 115], 'true,true,false': [0.0, 0, 0], 'true,false': [0.165, 210, 0], 'false,true': [8.43e-08, 0, 15], 'false,false,true,true': [0.965, 1, 14], 'false,false,true,false': [1.397, 82, 2], 'false,false,false,true': [0.0, 0, 2], 'false,false,false,false': [2.373, 19, 8]}], ['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, C), follows(D, A)', 'true,false': 'follows(C, E), follows(A, E)', 'false': 'follows(F, A), tweets(F, G)', 'false,true': 'follows(F, H), recursion_accounttype(H, B)', 'false,false': 'follows(I, A), follows(J, I)'}, {'true,true': [2.246, 5, 108], 'true,false,true': [1.208, 1, 37], 'true,false,false': [0.159, 0, 11], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.187, 223, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.141, 104, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(A, D)', 'false,true': 'follows(A, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'tweets(E, F)', 'false,false,false': 'follows(G, A)'}, {'true': [1.715, 3, 78], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.151, 174, 15], 'false,false,true,true': [3.51, 100, 35], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [1.987, 34, 17], 'false,false,false,false': [2.142, 23, 11]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(C, D), follows(D, A)', 'false': 'follows(A, E), follows(E, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(A, F), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, G)'}, {'true,true': [0.24, 0, 63], 'true,false': [0.15, 0, 22], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.173, 165, 19], 'false,false,true': [0.233, 0, 9], 'false,false,false,true': [3.381, 95, 30], 'false,false,false,false': [2.573, 55, 13]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(C, A)', 'true': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'tweets(A, E)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)'}, {'true,true': [1.39, 2, 59], 'true,false': [2.408, 155, 23], 'false,true,true': [1.867, 51, 22], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [1.008, 8, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.322, 103, 48]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'false': 'follows(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(F, A)'}, {'true': [3.833, 203, 108], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [3.387, 76, 37], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.114, 24, 11]}], ['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(E, A)', 'false,false,true': 'follows(E, F), recursion_accounttype(F, B)', 'false,false,false': 'follows(G, A), tweets(G, H)'}, {'true': [3.113, 6, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.259, 182, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.144, 105, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'follows(E, D), follows(E, A)', 'false,false': 'follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true': [0.209, 4, 78], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [1.398, 147, 17], 'false,true,false,false': [1.956, 65, 21], 'false,false,true': [0.268, 79, 29], 'false,false,false,true': [0.884, 8, 4], 'false,false,false,false': [1.634, 11, 7]}], ['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(A, D), recursion_accounttype(D, B)', 'true,false': 'follows(E, A), follows(E, C)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false': 'follows(A, A)', 'false,false,false': 'follows(G, A)'}, {'true,true': [0.306, 0, 78], 'true,false,true': [1.135, 1, 38], 'true,false,false': [0.378, 0, 40], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.265, 189, 0], 'false,false,false,false': [0.137, 108, 0]}]]
[{'': [0.22674080589138623, 0.21941808828168644], 'true': [0.04246913580246922, 0.023108434578621093], 'false': [0.04338842975206614, 0.18680748450902065], 'false,false': [nan, 0.186807484509021], 'false,false,false': [1.4802973661668753e-16, 0.1802802676429753], 'true,true': [0.04986149584487405, -2.5376526277146434e-16], 'true,false': [-6.204187490552346e-17, 0.10651974288337909], 'true,false,false': [0.0, 0.060353798126951116]}, {'': [0.17899449796803024, 0.18465957992289733], 'false': [4.736951571734001e-16, 0.15749586992451145], 'true': [0.026056674777236916, 0.00012888648748093657], 'false,false': [0.1335090970680292, 0.21549294629562613], 'false,false,false': [0.0, 0.20850480109739367], 'false,false,true': [0.06209574038207345, 0.023242630385487482], 'true,true': [0.026056674777236916, nan]}, {'': [0.047041431368790826, 0.00031407224126386613], 'true': [0.0446466584843964, 0.03297198221971734], 'true,false': [0.03840594276797875, 0.002293698439436508], 'false': [0.0001561267707005132, 0.00019188218813725156], 'false,false': [nan, 0.00019188218813725156], 'false,true': [nan, 0.0001561267707005132]}, {'': [0.03632034541502986, 0.06586477601932399], 'false': [0.0228376298100126, 0.09508545778984381], 'false,false': [0.09126016955382714, 0.1008540391820458], 'false,false,false': [0.07740515385988894, 0.13496695143669288], 'false,false,true': [0.09126016955382714, nan], 'false,true': [nan, 0.0228376298100126]}, {'': [0.0009443357138580081, 0.06551465266540388], 'false': [0.029902517539738025, 0.09441990711598724], 'false,false': [0.0060401105470069515, 0.09413336258265922], 'false,false,false': [0.09146331013901124, 0.09739216553132671], 'false,true': [nan, 0.029902517539738025], 'true': [0.0009177201759709329, 0.0010191516940785733]}, {'': [0.045710215098276975, 0.08591495886725611], 'false': [0.05301018694177574, 0.10371566837810225], 'false,false': [nan, 0.10371566837810225], 'false,true': [0.04775401223557209, 0.08474571399832102], 'false,true,false': [nan, 0.08474571399832102], 'true': [0.031679690137331795, 0.03257317570289408]}, {'': [0.04723259590543693, 0.10777609536433364], 'false': [nan, 0.10777609536433364], 'false,false': [0.10151484511715828, 0.12765423615516744], 'false,false,false': [nan, 0.12765423615516744], 'false,false,true': [nan, 0.10151484511715828]}, {'': [0.059812804156905375, 0.0008941481709770728], 'false': [nan, 0.0008941481709770728], 'false,false': [0.0003676335780250384, 0.00019806186385288357], 'false,false,true': [nan, 0.0003676335780250384], 'false,false,false': [nan, 0.00019806186385288357]}, {'': [0.04369461545246673, 0.045634657621731654], 'false': [0.024403399075131667, 0.0816472550388165], 'false,false': [0.07178214129307037, 0.11534008140926484], 'false,false,false': [0.06507644795294304, 0.14838535599578961], 'false,true': [nan, 0.024403399075131667], 'false,true,false': [0.01190913274592954, 0.04450474584324176]}, {'': [0.024847071976228038, 0.0007415793348530595], 'true': [0.0011997092733657107, 0.024170662600402546], 'true,false': [0.03301561762943118, 0.003568714761030245], 'false': [nan, 0.000741579334853064], 'false,false': [nan, 0.0007415793348530595], 'false,false,false': [0.0003720860411775797, 0.00017402769073063365]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), tweets(A, D).;true;true
0;true;follows(E, C), recursion_accounttype(E, B).;true;true
0;true,true;tweets(E, D), follows(A, F).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;recursion_accounttype(C, B).;true;true
0;false;follows(A, G), recursion_accounttype(G, B).;true;true
0;false,false;follows(H, A), recursion_accounttype(H, B).;true;true
1;;accounttype(A, B) :- tweets(A, C).;true;true
1;true;recursion_accounttype(D, B).;true;true
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
1;false,false;follows(A, F).;true;true
1;false,false,false;follows(H, A), recursion_accounttype(H, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;true;follows(D, C), follows(D, A).;true;true
2;true,false;follows(C, E), follows(A, E).;true;true
2;false;follows(F, A), tweets(F, G).;true;true
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), follows(D, A).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(E, A).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;true;follows(A, D), recursion_accounttype(D, B).;true;true
9;false;follows(G, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(A, D) )
%   then if ( follows(E, C), recursion_accounttype(E, B) )
%   | then if ( tweets(E, D), follows(A, F) )
%   | | then return 0.8311219080724858;  // std dev = 0.162, 74.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=72 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048785;  // std dev = 0.000, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | | else if ( recursion_accounttype(C, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.09056901361843647;  // std dev = 1.377, 39.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.15502393509951232;  // std dev = 3.655, 64.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=19 */
%   | | | else return 0.06723984419042099;  // std dev = 4.265, 110.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.7079690269131861;  // std dev = 0.991, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | | | else return 0.350427290678874;  // std dev = 1.158, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.7675030295865983;  // std dev = 0.057, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else return -0.1352627872110895;  // std dev = 0.230, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.7194734122109543;  // std dev = 4.21e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, A), follows(A, I) )
%   | | | then return -0.10023486595755873;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | | | else return 0.2038058073321674;  // std dev = 3.081, 42.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.0719873562646636;  // std dev = 2.494, 36.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A), follows(A, F) )
%   | | | then return 0.5630863714758148;  // std dev = 0.100, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | | | else return 0.5284404578647935;  // std dev = 1.042, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.6979521962426544;  // std dev = 0.297, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(C, H), follows(A, H) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.4461479860809043;  // std dev = 0.945, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.7620834577724476;  // std dev = 0.311, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.7062982983857456;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.8403417149251854;  // std dev = 4.21e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.12974807336888644;  // std dev = 0.023, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4226667976165132;  // std dev = 0.146, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else return 0.11771876909623757;  // std dev = 0.852, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), follows(F, E) )
%   | | | then return 0.41445298528496133;  // std dev = 0.028, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.7145583058606312;  // std dev = 0.084, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.10351171460381342;  // std dev = 0.137, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), follows(H, J) )
%   | | | then return 0.44713186994325266;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.14161152770284385;  // std dev = 0.741, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.04537397799809795;  // std dev = 2.471, 72.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=19 */
%   | | | else return 0.12602803215081967;  // std dev = 3.147, 63.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=21 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.27632717142604;  // std dev = 1.378, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | | else return 0.3226476486881906;  // std dev = 0.011, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.31533844281125106;  // std dev = 0.028, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.3394189634985898;  // std dev = 0.043, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(G, A) )
%   | then return -0.0505530842586288;  // std dev = 0.141, 226.000 (wgt'ed) examples reached here.  /* #neg=203 #pos=23 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.4755580324603514;  // std dev = 1.737, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | | else return -0.15262677070007974;  // std dev = 0.192, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.13206374275887459;  // std dev = 1.031, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.11620869157753151;  // std dev = 1.785, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.26228209314774953;  // std dev = 0.069, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else return 0.22442832776641292;  // std dev = 0.210, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return -0.14578954389973656;  // std dev = 0.960, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.3741782862783984;  // std dev = 0.435, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.09149749569485091;  // std dev = 0.158, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.2432476762510248;  // std dev = 1.29e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.0319964648488151;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.016230081182712054;  // std dev = 2.669, 97.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=25 */
%   | | | else return 0.07222987905926657;  // std dev = 2.315, 46.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=15 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then if ( follows(C, D) )
%   | | then return 0.19732243989379897;  // std dev = 0.130, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | else return -0.038821407624550996;  // std dev = 0.860, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.22688268508628628;  // std dev = 0.033, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.1931022803340146;  // std dev = 0.309, 26.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=23 */
%   | | else return -0.08271793280852771;  // std dev = 0.118, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | else if ( follows(A, G), tweets(A, H) )
%   | | then if ( follows(G, I), recursion_accounttype(I, B) )
%   | | | then return 0.2779144293058794;  // std dev = 1.173, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.11148550532621365;  // std dev = 0.938, 47.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.032472898771862525;  // std dev = 2.150, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | | | else return 0.06441831357000773;  // std dev = 2.229, 39.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=13 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.19219008997487635;  // std dev = 0.163, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.05558871476649348;  // std dev = 1.512, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( recursion_accounttype(D, B), follows(F, D) )
%   | | | then return 0.18298498156521514;  // std dev = 0.100, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.28183492619011785;  // std dev = 0.362, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.1602838037089498;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.34222256331044476;  // std dev = 0.102, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.4320623728215231;  // std dev = 0.981, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.5486185096896331;  // std dev = 0.239, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.09853455673723625;  // std dev = 0.036, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( recursion_accounttype(C, B) )
%   | | then return 0.16158320526909048;  // std dev = 0.069, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else if ( follows(D, A) )
%   | | | then return 0.15714363607668927;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2107909706922717;  // std dev = 0.255, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return -0.06999698211927517;  // std dev = 0.080, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.16103723972978862;  // std dev = 0.115, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(G, F), follows(G, A) )
%   | | | then return -0.09530748127584321;  // std dev = 0.657, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.0480255400953496;  // std dev = 0.984, 29.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=4 */
%   | | else if ( follows(A, H), tweets(A, I) )
%   | | | then return -0.003585835983799778;  // std dev = 1.543, 65.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=21 */
%   | | | else return 0.01650445792441294;  // std dev = 2.456, 86.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=27 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.14175555037794343;  // std dev = 0.098, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.21451576628487704;  // std dev = 0.205, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.1591875204816059;  // std dev = 0.093, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(G, A) )
%   | | then if ( tweets(A, H), tweets(G, H) )
%   | | | then return 0.14946994623145432;  // std dev = 0.146, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.24035053047667168;  // std dev = 0.264, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.283196471355126;  // std dev = 0.139, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.43024374965218243;  // std dev = 0.141, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(J, A) )
%   | then return -0.06688170426567168;  // std dev = 0.126, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else return -0.13483743478048502;  // std dev = 0.033, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */


Results
   AUC ROC   = 0.993399
   AUC PR    = 0.374444
   CLL	      = -0.100972
   Precision = 0.336 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.502994


Total learning time: 20.065 seconds
Total inference time: 16.389 seconds
AUC ROC: 0.993399


Results scoring model
   AUC ROC   = 0.994877
   AUC PR    = 0.389097
   CLL	      = -0.10513
   Precision = 0.336207 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.503226


Total scoring time: 19.446 seconds
Refined model CLL: -0.10513


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.993399
   AUC PR    = 0.374444
   CLL	      = -0.100972
   Precision = 0.336 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.502994


Total learning time: 63.0 seconds
Total inference time: 16.389 seconds
AUC ROC: 0.993399
Total revision time: 63.0
Best scored revision CLL: -0.10513


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:08:40
{'AUC ROC': 0.993399, 'AUC PR': 0.374444, 'CLL': -0.100972, 'Precision': [0.336, 0.5], 'Recall': 1.0, 'F1': 0.502994, 'Learning time': 63.0, 'Inference time': 16.389, 'parameter': {'AUC ROC': 0.992489, 'AUC PR': 0.336076, 'CLL': -0.115866, 'Precision': [0.333333, 0.5], 'Recall': 0.960317, 'F1': 0.494888, 'Learning time': 5.992, 'Inference time': 16.109}}


Starting fold 1

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos	 examples: 156
Target test neg examples: 24648

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), phenotype(A, D).;true;true
0;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
0;true,true;phenotype(E, D), interaction(A, F).;false;false
0;true,false;interaction(A, C).;false;true
0;true,false,false;recursion_proteinclass(C, B).;false;false
0;false;interaction(A, G), recursion_proteinclass(G, B).;false;true
0;false,false;interaction(A, A).;false;true
0;false,false,false;interaction(H, A), recursion_proteinclass(H, B).;false;false
1;;proteinclass(A, B) :- location(A, C), phenotype(A, D).;true;true
1;true;location(E, C), recursion_proteinclass(E, B).;true;false
1;true,true;phenotype(E, D).;true;false
1;true,true,true;enzyme(E, F), enzyme(A, F).;false;false
1;false;interaction(A, G), recursion_proteinclass(G, B).;false;true
1;false,false;interaction(A, H), location(A, I).;true;true
1;false,false,true;interaction(H, J), recursion_proteinclass(J, B).;false;false
1;false,false,false;interaction(K, A), recursion_proteinclass(K, B).;false;false
2;;proteinclass(A, B) :- location(A, C).;true;true
2;true;location(D, C), recursion_proteinclass(D, B).;true;false
2;true,true;interaction(E, D), interaction(E, A).;false;true
2;true,true,false;interaction(D, F), interaction(A, F).;false;false
2;false;interaction(G, A), phenotype(G, H).;true;true
2;false,true;interaction(G, I), recursion_proteinclass(I, B).;false;false
2;false,false;enzyme(A, J).;false;true
2;false,false,false;interaction(K, A), interaction(L, K).;false;false
3;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
3;false;interaction(D, A), interaction(A, D).;true;true
3;false,true;complex(A, E), complex(D, E).;true;true
3;false,true,true;interaction(A, A).;false;false
3;false,true,false;enzyme(D, F), enzyme(A, F).;false;false
3;false,false;interaction(A, G), enzyme(G, H).;true;true
3;false,false,true;phenotype(G, I).;false;false
3;false,false,false;interaction(J, A), enzyme(J, K).;false;false
4;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
4;true;location(A, D), location(C, D).;false;true
4;true,false;interaction(C, E), interaction(E, A).;false;false
4;false;interaction(A, F), interaction(F, A).;true;true
4;false,true;interaction(A, A).;false;true
4;false,true,false;enzyme(A, G), location(F, H).;false;false
4;false,false;interaction(A, I), recursion_proteinclass(I, B).;false;true
4;false,false,false;interaction(A, J), location(A, K).;false;false
5;;proteinclass(A, B) :- interaction(A, C), interaction(C, A).;true;true
5;true;recursion_proteinclass(C, B).;false;false
5;false;interaction(D, A), complex(D, E).;true;true
5;false,true;complex(A, E).;true;true
5;false,true,true;phenotype(A, F).;false;false
5;false,true,false;location(A, G), phenotype(A, H).;false;false
5;false,false;interaction(I, A), recursion_proteinclass(I, B).;false;true
5;false,false,false;enzyme(A, J), location(A, K).;false;false
6;;proteinclass(A, B) :- interaction(C, A), complex(A, D).;false;true
6;false;interaction(E, A), complex(E, F).;true;true
6;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
6;false,true,true;interaction(A, H), interaction(G, H).;false;false
6;false,true,false;interaction(A, E).;false;false
6;false,false;interaction(A, I), complex(I, J).;true;true
6;false,false,true;interaction(I, I), location(A, K).;false;false
6;false,false,false;interaction(L, A), location(L, M).;false;false
7;;proteinclass(A, B) :- location(A, C), complex(A, D).;true;true
7;true;location(E, C), recursion_proteinclass(E, B).;false;false
7;false;location(A, F).;true;true
7;false,true;location(G, F), recursion_proteinclass(G, B).;true;false
7;false,true,true;interaction(H, G), interaction(H, A).;false;false
7;false,false;enzyme(A, I), interaction(J, A).;true;true
7;false,false,true;interaction(J, K), recursion_proteinclass(K, B).;false;false
7;false,false,false;interaction(L, A), phenotype(L, M).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;complex(A, D), complex(C, D).;false;false
8;false;interaction(E, A), location(A, F).;true;true
8;false,true;interaction(A, A).;false;true
8;false,true,false;interaction(G, E), interaction(G, A).;false;false
8;false,false;interaction(A, H), enzyme(H, I).;true;true
8;false,false,true;location(A, J), location(H, J).;false;false
8;false,false,false;phenotype(A, K).;false;false
9;;proteinclass(A, B) :- location(A, C).;true;true
9;true;location(D, C), recursion_proteinclass(D, B).;true;false
9;true,true;complex(D, E), complex(A, E).;true;true
9;true,true,true;interaction(A, F), recursion_proteinclass(F, B).;false;false
9;true,true,false;interaction(G, A), interaction(G, D).;false;false
9;false;interaction(H, A), recursion_proteinclass(H, B).;false;true
9;false,false;interaction(A, A).;false;true
9;false,false,false;interaction(I, A), complex(I, J).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(A, D) )
%   then if ( follows(E, C), recursion_accounttype(E, B) )
%   | then if ( tweets(E, D), follows(A, F) )
%   | | then return 0.8321749091254866;  // std dev = 1.396, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.141851064900488;  // std dev = 0.000, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   | | else if ( recursion_accounttype(C, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.10185106490048777;  // std dev = 0.980, 25.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.8055173561521439;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.06648226843284565;  // std dev = 3.979, 96.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=20 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( tweets(D, C) )
%   | | then return 0.7286737156570111;  // std dev = 0.095, 98.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=97 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1292223607482767;  // std dev = 0.109, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return 0.7299724186538795;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.8063990199603224;  // std dev = 0.184, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.07201317616499378;  // std dev = 2.147, 64.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(D, A) )
%   | then return 0.5300067183998357;  // std dev = 1.932, 109.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=105 */
%   | else if ( follows(C, E), follows(A, E) )
%   | | then return 0.6755301890023634;  // std dev = 1.217, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return -0.2679900966689774;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( follows(F, A), tweets(F, G) )
%   | then if ( follows(F, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1196138424860562;  // std dev = 0.182, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.13670428058167353;  // std dev = 0.021, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.404395100110792;  // std dev = 1.448, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   else if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04916054955943759;  // std dev = 0.171, 195.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=20 */
%   | else if ( follows(A, E) )
%   | | then if ( tweets(E, F) )
%   | | | then return 0.07419121716999783;  // std dev = 2.819, 77.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=21 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(G, A) )
%   | | | then return 0.04593745819915956;  // std dev = 1.257, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.3338554068342289;  // std dev = 1.044, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else return 0.3582777833012335;  // std dev = 0.133, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.046325432171622334;  // std dev = 0.165, 210.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=22 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.3574383423735178;  // std dev = 0.226, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.08325469396246757;  // std dev = 2.601, 60.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=17 */
%   | | | else return -0.1086360212619062;  // std dev = 5.27e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, A) )
%   then if ( recursion_accounttype(C, B) )
%   | then return 0.23299076853732484;  // std dev = 1.403, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | else return -0.035344065583132106;  // std dev = 2.712, 208.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=27 */
%   else if ( follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then return 0.015657594118315372;  // std dev = 1.367, 47.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=13 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.004205765911575306;  // std dev = 0.368, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.05313896634772363;  // std dev = 0.320, 71.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=21 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then return 0.02598059345266289;  // std dev = 3.575, 319.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=105 */
%   else if ( follows(D, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08878022891685282;  // std dev = 2.532, 59.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=21 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.30329470217815185;  // std dev = 2.119, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09738292373956998;  // std dev = 0.149, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | | else if ( follows(G, A), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15719029573609947;  // std dev = 0.023, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1473817662223257;  // std dev = 0.183, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(E, D), follows(E, A) )
%   | | | then return -0.05903785005443439;  // std dev = 1.668, 161.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=15 */
%   | | | else return 0.002195866238450114;  // std dev = 1.863, 75.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=17 */
%   | else if ( follows(A, F) )
%   | | then return 0.030772409342664876;  // std dev = 0.281, 63.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.14875488766614098;  // std dev = 1.060, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   | else if ( follows(E, A), follows(E, C) )
%   | | then return 0.34083536853864244;  // std dev = 0.483, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return 0.4791922909281621;  // std dev = 0.380, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(G, A) )
%   | | | then return -0.08794240271679173;  // std dev = 0.192, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   | | | else return -0.14129101858360898;  // std dev = 0.023, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */


Results
   AUC ROC   = 0.993275
   AUC PR    = 0.292611
   CLL	      = -0.117626
   Precision = 0.337292 at threshold = 0.5
   Recall    = 0.910256
   F1        = 0.492201


Total learning time: 5.78 seconds
Total inference time: 18.279 seconds
AUC ROC: 0.993275


Results scoring model
   AUC ROC   = 0.992131
   AUC PR    = 0.308195
   CLL	      = -0.117783
   Precision = 0.336111 at threshold = 0.5
   Recall    = 0.960317
   F1        = 0.497942


Total scoring time: 17.468 seconds
Parameter learned model CLL: -0.117783


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(C, A), tweets(A, D)', 'true': 'follows(E, C), recursion_accounttype(E, B)', 'true,true': 'tweets(E, D), follows(A, F)', 'true,false': 'follows(A, C)', 'true,false,false': 'recursion_accounttype(C, B)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(A, A)', 'false,false,false': 'follows(H, A), recursion_accounttype(H, B)'}, {'true,true,true': [1.396, 2, 75], 'true,true,false': [0.0, 0, 8], 'true,false,true': [0.0, 140, 0], 'true,false,false,true': [0.0, 0, 1], 'true,false,false,false': [0.98, 24, 1], 'false,true': [0.973, 1, 18], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.11e-08, 0, 3], 'false,false,false,false': [3.979, 76, 20]}], ['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'recursion_accounttype(D, B)', 'true,true': 'tweets(D, C)', 'false': 'follows(A, E), recursion_accounttype(E, B)', 'false,false': 'follows(A, F)', 'false,false,true': 'follows(F, G), recursion_accounttype(G, B)'}, {'true,true,true': [0.095, 1, 97], 'true,true,false': [0.0, 0, 0], 'true,false': [0.109, 181, 0], 'false,true': [0.0, 0, 15], 'false,false,true,true': [0.184, 0, 9], 'false,false,true,false': [2.147, 59, 5], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, C), follows(D, A)', 'true,false': 'follows(C, E), follows(A, E)', 'false': 'follows(F, A), tweets(F, G)', 'false,true': 'follows(F, H), recursion_accounttype(H, B)', 'false,false': 'follows(I, A), follows(J, I)'}, {'true,true': [1.932, 4, 105], 'true,false,true': [1.217, 1, 21], 'true,false,false': [0.0, 1, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.182, 213, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.021, 41, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A), follows(A, D)', 'false,true': 'follows(A, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'tweets(E, F)', 'false,false,false': 'follows(G, A)'}, {'true': [1.448, 2, 77], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.171, 175, 20], 'false,false,true,true': [2.819, 56, 21], 'false,false,true,false': [0.0, 0, 0], 'false,false,false,true': [1.257, 20, 8], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(C, D), follows(D, A)', 'false': 'follows(A, E), follows(E, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(A, F), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, G)'}, {'true,true': [1.044, 1, 67], 'true,false': [0.133, 0, 15], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.165, 188, 22], 'false,false,true': [0.226, 0, 5], 'false,false,false,true': [2.601, 43, 17], 'false,false,false,false': [5.27e-09, 16, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), follows(C, A)', 'true': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'tweets(A, E)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)'}, {'true,true': [1.403, 2, 64], 'true,false': [2.712, 181, 27], 'false,true,true': [1.367, 34, 13], 'false,true,false,true': [0.0, 0, 0], 'false,true,false,false': [0.368, 2, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.32, 50, 21]}], ['accounttype(A, B)', {'': 'follows(C, A)', 'false': 'follows(D, A)', 'false,false': 'follows(A, E)', 'false,false,true': 'follows(E, E)'}, {'true': [3.575, 214, 105], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [2.532, 38, 21], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(E, A)', 'false,false,true': 'follows(E, F), recursion_accounttype(F, B)', 'false,false,false': 'follows(G, A), tweets(G, H)'}, {'true': [2.119, 2, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.149, 180, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.023, 39, 0]}], ['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'follows(E, D), follows(E, A)', 'false,false': 'follows(A, F)'}, {'true': [0.183, 3, 77], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [1.668, 146, 15], 'false,true,false,false': [1.863, 58, 17], 'false,false,true': [0.281, 46, 17], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(A, D), recursion_accounttype(D, B)', 'true,false': 'follows(E, A), follows(E, C)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false': 'follows(A, A)', 'false,false,false': 'follows(G, A)'}, {'true,true': [1.06, 1, 77], 'true,false,true': [0.483, 0, 32], 'true,false,false': [0.38, 0, 17], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.192, 220, 0], 'false,false,false,false': [0.023, 45, 0]}]]
[{'': [0.22396469897303295, 0.2267308244757252], 'false': [0.04986149584487499, 0.17834914804611868], 'true': [0.022975778546712552, 0.011903033822034961], 'false,false': [nan, 0.17834914804611868], 'false,false,false': [1.4802973661668753e-16, 0.1649305555555552], 'true,true': [0.025299375948725576, -2.220446049250313e-16], 'true,false': [-7.930164461608261e-17, 0.07100591715976336], 'true,false,false': [0.0, 0.03840000000000005]}, {'': [0.17092266058278155, 0.18999297486183805], 'false': [-4.144832625267251e-16, 0.14700933406663846], 'true': [0.009016923142936246, 6.606378451861723e-05], 'false,false': [0.14700933406663846, nan], 'false,false,true': [0.003778030641298496, 0.07202148437499999], 'true,true': [0.009016923142936246, nan]}, {'': [0.04752977557132473, 0.00017156931233326908], 'true': [0.03426020618956412, 0.1013983699104336], 'true,false': [0.0673017115300517, 0.0], 'false': [0.00015544853111277386, 1.0382930321271076e-05], 'false,true': [nan, 0.00015544853111277386], 'false,false': [nan, 1.0382930321271076e-05]}, {'': [0.026543629012176783, 0.05375647995944173], 'false': [0.029072224117431197, 0.09087977911949897], 'false,false': [0.10320374852833811, 0.05640346165480353], 'false,false,true': [0.10320374852833811, nan], 'false,false,false': [0.05640346165480353, nan], 'false,true': [nan, 0.029072224117431197]}, {'': [0.013422447985360368, 0.048741950061072736], 'false': [0.02736726162686833, 0.09564659347979615], 'false,false': [0.01019833852131764, 0.09515944586589359], 'false,false,false': [0.11278328828852029, 1.734723475976807e-18], 'false,true': [nan, 0.02736726162686833], 'true': [0.016017024311042682, 0.0011717087854456723]}, {'': [0.04718969495487392, 0.07712183195905706], 'false': [0.04010554207453612, 0.10258764462440288], 'false,false': [nan, 0.10258764462440288], 'true': [0.029828705986974697, 0.03535454149986642], 'false,true': [0.03978393977006791, 0.04502070247075152], 'false,true,false': [nan, 0.04502070247075152]}, {'': [0.04006534677180904, 0.10866741464652124], 'false': [nan, 0.10866741464652124], 'false,false': [0.10866741464652124, nan], 'false,false,true': [nan, 0.10866741464652124]}, {'': [0.03508596503057279, 0.0006277473653896187], 'false': [nan, 0.0006277473653896187], 'false,false': [0.0001238782849947088, 1.3361286281915037e-05], 'false,false,true': [nan, 0.0001238782849947088], 'false,false,false': [nan, 1.3361286281915037e-05]}, {'': [0.03337104487336551, 0.03903954342590244], 'false': [0.0273056188703498, 0.07908882298815437], 'false,false': [0.07908882298815437, nan], 'false,true': [nan, 0.0273056188703498], 'false,true,false': [0.017280923525783257, 0.04626733020248944]}, {'': [0.0271496190582877, 0.0005428042654677116], 'true': [0.014397229740171236, 0.012048825553636141], 'true,false': [0.007291039422914536, 0.008503343675611282], 'false': [nan, 0.0005428042654676899], 'false,false': [nan, 0.0005428042654677116], 'false,false,false': [0.00016819765452539875, 1.143527178834653e-05]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A), tweets(A, D).;true;true
0;true;follows(E, C), recursion_accounttype(E, B).;true;true
0;true,true;tweets(E, D), follows(A, F).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;recursion_accounttype(C, B).;true;true
0;false;follows(A, G), recursion_accounttype(G, B).;true;true
0;false,false;follows(H, A), recursion_accounttype(H, B).;true;true
1;;accounttype(A, B) :- tweets(A, C).;true;true
1;true;recursion_accounttype(D, B).;true;true
1;false;follows(A, E), recursion_accounttype(E, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;true;follows(D, C), follows(D, A).;true;true
2;true,false;follows(C, E), follows(A, E).;true;true
2;false;follows(F, A), tweets(F, G).;true;true
4;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), follows(D, A).;true;true
4;false;follows(A, E), follows(E, A).;true;true
4;false,false;follows(A, F), recursion_accounttype(F, B).;true;true
4;false,false,false;follows(A, G).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(E, A).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;follows(G, A).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(A, D) )
%   then if ( follows(E, C), recursion_accounttype(E, B) )
%   | then if ( tweets(E, D), follows(A, F) )
%   | | then return 0.8581489350995127;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048807;  // std dev = 0.000, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   | | else if ( recursion_accounttype(C, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.11154803459745743;  // std dev = 0.985, 33.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.08062657510456937;  // std dev = 1.678, 49.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=3 */
%   | | | else return 0.15125238337537444;  // std dev = 3.467, 58.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=17 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.6891737326929678;  // std dev = 1.403, 61.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=59 */
%   | | | else return 0.31947341221095443;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.7501372615988738;  // std dev = 0.052, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else return -0.1286049683879087;  // std dev = 0.009, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.7194734122109542;  // std dev = 1.49e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.8083992126379353;  // std dev = 0.162, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.1323169204107441;  // std dev = 2.11e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.39311481493259093;  // std dev = 1.274, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.1018796101230391;  // std dev = 1.919, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(D, A) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(A, G), follows(F, G) )
%   | | | then return 0.5352514063444658;  // std dev = 1.411, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | | else return 0.42842713430918217;  // std dev = 0.926, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( follows(A, H), follows(H, A) )
%   | | | then return 0.5829904205717856;  // std dev = 0.307, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.48318043755800566;  // std dev = 0.708, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( follows(C, I), follows(A, I) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.41260204383640975;  // std dev = 0.962, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.7560646704739052;  // std dev = 0.208, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(K, A), tweets(K, L) )
%   | then return -0.11434682395354892;  // std dev = 0.007, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else return -0.163816463222946;  // std dev = 0.031, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.42940778713449795;  // std dev = 0.006, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( follows(C, E), follows(E, A) )
%   | | then return 0.3086771643093834;  // std dev = 0.299, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.4248497547110408;  // std dev = 0.102, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.09124942888164578;  // std dev = 0.074, 145.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=3 */
%   | | else if ( follows(F, H), recursion_accounttype(H, B) )
%   | | | then return 0.46674905113024917;  // std dev = 0.373, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.10630823040809345;  // std dev = 0.111, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.5273360158011116;  // std dev = 0.086, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.04673164748494068;  // std dev = 1.744, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
%   | | | else return 0.10878505383086157;  // std dev = 1.894, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), tweets(F, E) )
%   | | | then return 0.23669603527515728;  // std dev = 1.906, 43.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=39 */
%   | | | else return 0.32552867872216534;  // std dev = 0.020, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.3321108402096095;  // std dev = 0.006, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.32853787483173763;  // std dev = 0.026, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, G), follows(G, A) )
%   | then if ( tweets(A, H) )
%   | | then return -0.04923805638656712;  // std dev = 0.134, 164.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=17 */
%   | | else return -0.04979996390630032;  // std dev = 0.185, 45.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=5 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.24575727516184387;  // std dev = 1.018, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.043285291076795414;  // std dev = 2.576, 66.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=17 */
%   | | | else return -0.09571675656721132;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then return 0.274668708314094;  // std dev = 0.008, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | else return 0.2123460296198731;  // std dev = 0.227, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else return 0.3455722859149663;  // std dev = 0.050, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( recursion_accounttype(F, B) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.34472614213963565;  // std dev = 0.440, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.5460733267243076;  // std dev = 0.120, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.09782373475678818;  // std dev = 0.022, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.259912323185465;  // std dev = 0.004, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.0361897244162801;  // std dev = 1.171, 31.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=4 */
%   | | | else return 0.2403106971756177;  // std dev = 1.310, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.22214398424366727;  // std dev = 0.011, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | else if ( tweets(A, E) )
%   | | then return 0.21728191948503994;  // std dev = 0.017, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.06664968137395003;  // std dev = 0.351, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.3006706986651352;  // std dev = 0.069, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.08310924485533214;  // std dev = 0.005, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.37770389153752376;  // std dev = 0.219, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.13681710550073184;  // std dev = 0.108, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.004940973708015078;  // std dev = 1.314, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return 0.0017954710807009124;  // std dev = 1.582, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.15219743997690793;  // std dev = 1.633, 74.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=71 */
%   | | | else return 0.21244346621273913;  // std dev = 0.348, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return -0.004216778588791881;  // std dev = 0.662, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.21642989339858532;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.30144771952943683;  // std dev = 0.895, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.3742033701941631;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5336261521172981;  // std dev = 0.352, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(K, A) )
%   | then return -0.0765343066359128;  // std dev = 0.005, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   | else return -0.1500286149933724;  // std dev = 0.040, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | then return 0.1658893722803316;  // std dev = 0.004, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( tweets(C, E), follows(D, A) )
%   | | | then return 0.019624992207566617;  // std dev = 1.588, 21.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=18 */
%   | | | else return 0.16554953272806144;  // std dev = 0.003, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.16053896315602575;  // std dev = 0.020, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(F, A) )
%   | then return -0.046746895318806395;  // std dev = 0.105, 217.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=23 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.2882957231199316;  // std dev = 0.362, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.10756254043189643;  // std dev = 0.064, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.07924837348202084;  // std dev = 0.997, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return -0.03136621754014992;  // std dev = 1.296, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.1501598308248878;  // std dev = 0.083, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | | else return 0.0938004428982276;  // std dev = 0.971, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return -0.04690823987276031;  // std dev = 0.846, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(F, A) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.13121438185809825;  // std dev = 0.061, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.22523219799120267;  // std dev = 0.232, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.233221679181162;  // std dev = 0.164, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.42488837831051846;  // std dev = 0.163, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(I, A) )
%   | then return -0.06823169686792876;  // std dev = 0.002, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | else return -0.11654139540984437;  // std dev = 0.036, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */


Results
   AUC ROC   = 0.995297
   AUC PR    = 0.433427
   CLL	      = -0.102837
   Precision = 0.339408 at threshold = 0.5
   Recall    = 0.955128
   F1        = 0.50084


Total learning time: 19.164 seconds
Total inference time: 17.539 seconds
AUC ROC: 0.995297


Results scoring model
   AUC ROC   = 0.994401
   AUC PR    = 0.436844
   CLL	      = -0.102252
   Precision = 0.342391 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.510121


Total scoring time: 14.873 seconds
Refined model CLL: -0.102252


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.995297
   AUC PR    = 0.433427
   CLL	      = -0.102837
   Precision = 0.339408 at threshold = 0.5
   Recall    = 0.955128
   F1        = 0.50084


Total learning time: 57.285000000000004 seconds
Total inference time: 17.539 seconds
AUC ROC: 0.995297
Total revision time: 57.285000000000004
Best scored revision CLL: -0.102252


Dataset: 7_yeast_twitter, Fold: 1, Type: Transfer (trRDN-B), Time: 00:10:14
{'AUC ROC': 0.995297, 'AUC PR': 0.433427, 'CLL': -0.102837, 'Precision': [0.339408, 0.5], 'Recall': 0.955128, 'F1': 0.50084, 'Learning time': 57.285000000000004, 'Inference time': 17.539, 'parameter': {'AUC ROC': 0.993275, 'AUC PR': 0.292611, 'CLL': -0.117626, 'Precision': [0.337292, 0.5], 'Recall': 0.910256, 'F1': 0.492201, 'Learning time': 5.78, 'Inference time': 18.279}}


Starting fold 2

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos	 examples: 126
Target test neg examples: 16128

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A), phenotype(A, D).;true;true
0;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
0;true,true;phenotype(E, D), interaction(A, F).;false;false
0;true,false;interaction(A, C).;false;true
0;true,false,false;recursion_proteinclass(C, B).;false;false
0;false;interaction(A, G), recursion_proteinclass(G, B).;false;true
0;false,false;interaction(A, A).;false;true
0;false,false,false;interaction(H, A), recursion_proteinclass(H, B).;false;false
1;;proteinclass(A, B) :- location(A, C), phenotype(A, D).;true;true
1;true;location(E, C), recursion_proteinclass(E, B).;true;false
1;true,true;phenotype(E, D).;true;false
1;true,true,true;enzyme(E, F), enzyme(A, F).;false;false
1;false;interaction(A, G), recursion_proteinclass(G, B).;false;true
1;false,false;interaction(A, H), location(A, I).;true;true
1;false,false,true;interaction(H, J), recursion_proteinclass(J, B).;false;false
1;false,false,false;interaction(K, A), recursion_proteinclass(K, B).;false;false
2;;proteinclass(A, B) :- location(A, C).;true;true
2;true;location(D, C), recursion_proteinclass(D, B).;true;false
2;true,true;interaction(E, D), interaction(E, A).;false;true
2;true,true,false;interaction(D, F), interaction(A, F).;false;false
2;false;interaction(G, A), phenotype(G, H).;true;true
2;false,true;interaction(G, I), recursion_proteinclass(I, B).;false;false
2;false,false;enzyme(A, J).;false;true
2;false,false,false;interaction(K, A), interaction(L, K).;false;false
3;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;false;true
3;false;interaction(D, A), interaction(A, D).;true;true
3;false,true;complex(A, E), complex(D, E).;true;true
3;false,true,true;interaction(A, A).;false;false
3;false,true,false;enzyme(D, F), enzyme(A, F).;false;false
3;false,false;interaction(A, G), enzyme(G, H).;true;true
3;false,false,true;phenotype(G, I).;false;false
3;false,false,false;interaction(J, A), enzyme(J, K).;false;false
4;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
4;true;location(A, D), location(C, D).;false;true
4;true,false;interaction(C, E), interaction(E, A).;false;false
4;false;interaction(A, F), interaction(F, A).;true;true
4;false,true;interaction(A, A).;false;true
4;false,true,false;enzyme(A, G), location(F, H).;false;false
4;false,false;interaction(A, I), recursion_proteinclass(I, B).;false;true
4;false,false,false;interaction(A, J), location(A, K).;false;false
5;;proteinclass(A, B) :- interaction(A, C), interaction(C, A).;true;true
5;true;recursion_proteinclass(C, B).;false;false
5;false;interaction(D, A), complex(D, E).;true;true
5;false,true;complex(A, E).;true;true
5;false,true,true;phenotype(A, F).;false;false
5;false,true,false;location(A, G), phenotype(A, H).;false;false
5;false,false;interaction(I, A), recursion_proteinclass(I, B).;false;true
5;false,false,false;enzyme(A, J), location(A, K).;false;false
6;;proteinclass(A, B) :- interaction(C, A), complex(A, D).;false;true
6;false;interaction(E, A), complex(E, F).;true;true
6;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
6;false,true,true;interaction(A, H), interaction(G, H).;false;false
6;false,true,false;interaction(A, E).;false;false
6;false,false;interaction(A, I), complex(I, J).;true;true
6;false,false,true;interaction(I, I), location(A, K).;false;false
6;false,false,false;interaction(L, A), location(L, M).;false;false
7;;proteinclass(A, B) :- location(A, C), complex(A, D).;true;true
7;true;location(E, C), recursion_proteinclass(E, B).;false;false
7;false;location(A, F).;true;true
7;false,true;location(G, F), recursion_proteinclass(G, B).;true;false
7;false,true,true;interaction(H, G), interaction(H, A).;false;false
7;false,false;enzyme(A, I), interaction(J, A).;true;true
7;false,false,true;interaction(J, K), recursion_proteinclass(K, B).;false;false
7;false,false,false;interaction(L, A), phenotype(L, M).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;complex(A, D), complex(C, D).;false;false
8;false;interaction(E, A), location(A, F).;true;true
8;false,true;interaction(A, A).;false;true
8;false,true,false;interaction(G, E), interaction(G, A).;false;false
8;false,false;interaction(A, H), enzyme(H, I).;true;true
8;false,false,true;location(A, J), location(H, J).;false;false
8;false,false,false;phenotype(A, K).;false;false
9;;proteinclass(A, B) :- location(A, C).;true;true
9;true;location(D, C), recursion_proteinclass(D, B).;true;false
9;true,true;complex(D, E), complex(A, E).;true;true
9;true,true,true;interaction(A, F), recursion_proteinclass(F, B).;false;false
9;true,true,false;interaction(G, A), interaction(G, D).;false;false
9;false;interaction(H, A), recursion_proteinclass(H, B).;false;true
9;false,false;interaction(A, A).;false;true
9;false,false,false;interaction(I, A), complex(I, J).;false;false


WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then return 0.842764319714895;  // std dev = 1.403, 130.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=128 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048835;  // std dev = 0.000, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
%   else if ( recursion_accounttype(F, B) )
%   | then return 0.8236661764788221;  // std dev = 0.983, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048766;  // std dev = 6.66e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(A, D) )
%   then if ( tweets(E, C), recursion_accounttype(E, B) )
%   | then if ( follows(E, D) )
%   | | then return 0.7023659808390353;  // std dev = 0.141, 99.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=97 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283916;  // std dev = 0.000, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   else if ( recursion_accounttype(F, B) )
%   | then return 0.6759640115387526;  // std dev = 1.691, 62.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=59 */
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else if ( recursion_accounttype(I, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839122;  // std dev = 5.77e-08, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.53965310165274;  // std dev = 0.158, 118.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=115 */
%   | else return -0.11231637819360683;  // std dev = 0.000, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.5709981958068658;  // std dev = 0.013, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else return -0.1123163781936062;  // std dev = 7.88e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3994797330305823;  // std dev = 2.203, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.1015963294878366;  // std dev = 0.000, 316.000 (wgt'ed) examples reached here.  /* #neg=316 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.3197881142964513;  // std dev = 1.405, 117.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=115 */
%   | else return 0.31141513555217;  // std dev = 0.153, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   else if ( tweets(E, F) )
%   | then return -0.09269127618926039;  // std dev = 1.98e-07, 342.000 (wgt'ed) examples reached here.  /* #neg=342 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23257836808395016;  // std dev = 2.403, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( follows(A, D) )
%   | then return -0.08518475138839678;  // std dev = 8.94e-08, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08518475138839679;  // std dev = 2.89e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1834241951575557;  // std dev = 0.203, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   else if ( tweets(A, D) )
%   | then return -0.07877675473109144;  // std dev = 5.96e-08, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
%   | else if ( tweets(E, F) )
%   | | then return -0.07877675473109161;  // std dev = 5.37e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.1871546611457535;  // std dev = 0.997, 116.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=115 */
%   | else return -0.07324622576333663;  // std dev = 1.30e-07, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   else if ( tweets(A, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(F, B) )
%   | | then return 0.1721003466145158;  // std dev = 0.989, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | else if ( follows(G, H) )
%   | | | then return -0.07324622576333706;  // std dev = 0.000, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15592635641598176;  // std dev = 0.112, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( tweets(A, D) )
%   | then return -0.06842697784420261;  // std dev = 4.47e-09, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   | else if ( tweets(A, E), tweets(F, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G) )
%   | | | then return -0.06842697784420268;  // std dev = 2.11e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | | else return -0.06842697784420279;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then return 0.12439238001609315;  // std dev = 1.560, 118.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=115 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 1.05e-08, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
%   else if ( recursion_accounttype(F, B) )
%   | then return 0.08109457897912598;  // std dev = 1.673, 44.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=41 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */


Results
   AUC ROC   = 0.993032
   AUC PR    = 0.359698
   CLL	      = -0.091964
   Precision = 0.336 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.502994


Total learning time: 8.863 seconds
Total inference time: 27.949 seconds
AUC ROC: 0.993032


Results scoring model
   AUC ROC   = 0.994069
   AUC PR    = 0.348874
   CLL	      = -0.086877
   Precision = 0.333333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.5


Total scoring time: 42.272 seconds
Parameter learned model CLL: -0.086877


Structure after Parameter Learning
[['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'recursion_accounttype(D, B)', 'true,true': 'follows(D, C)', 'true,false': 'recursion_accounttype(E, B)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'recursion_accounttype(G, B)'}, {'true,true,true': [1.403, 2, 128], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 240, 0], 'false,true': [0.983, 1, 28], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.66e-08, 66, 0]}], ['accounttype(A, B)', {'': 'tweets(A, C), follows(A, D)', 'true': 'tweets(E, C), recursion_accounttype(E, B)', 'true,true': 'follows(E, D)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'tweets(A, G)', 'false,false,true': 'recursion_accounttype(H, B)', 'false,false,false': 'recursion_accounttype(I, B)'}, {'true,true,true': [0.141, 2, 97], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 193, 0], 'false,true': [1.691, 3, 59], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 32, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [5.77e-08, 74, 0]}], ['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.158, 3, 115], 'true,false': [0.0, 241, 0], 'false,true,true': [0.013, 0, 41], 'false,true,false': [7.88e-08, 100, 0], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.203, 5, 156], 'false,true': [0.0, 316, 0], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'tweets(A, D), tweets(C, D)', 'false': 'tweets(E, F)'}, {'true,true': [1.405, 2, 115], 'true,false': [0.153, 1, 41], 'false,true': [1.98e-07, 342, 0], 'false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,false': 'tweets(A, E), follows(A, F)', 'false,false,false': 'recursion_accounttype(G, B)'}, {'true': [2.403, 6, 156], 'false,true': [8.94e-08, 243, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.89e-08, 62, 0]}], ['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'tweets(E, F)'}, {'true': [0.203, 7, 156], 'false,true': [5.96e-08, 241, 0], 'false,false,true': [5.37e-08, 94, 0], 'false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'tweets(A, E)', 'false,false': 'recursion_accounttype(F, B)', 'false,false,false': 'follows(G, H)'}, {'true,true': [0.997, 1, 115], 'true,false': [1.3e-07, 221, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.989, 1, 41], 'false,false,false,true': [0.0, 92, 0], 'false,false,false,false': [0.0, 0, 0]}], ['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'tweets(A, E), tweets(F, E)', 'false,false,false': 'follows(A, G)'}, {'true': [0.112, 2, 156], 'false,true': [4.47e-09, 224, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.11e-08, 61, 0], 'false,false,false,false': [0.0, 21, 0]}], ['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'true,true': 'recursion_accounttype(E, B)', 'false': 'recursion_accounttype(F, B)'}, {'true,true,true': [1.56, 3, 115], 'true,true,false': [0.0, 0, 0], 'true,false': [1.05e-08, 231, 0], 'false,true': [1.673, 3, 41], 'false,false': [0.0, 75, 0]}]]
[{'': [0.22626734842951338, 0.20786703601108156], 'true': [0.01514792899408716, -1.6653345369377348e-16], 'false': [0.033293697978597984, 6.728624391667616e-17], 'true,true': [0.01514792899408716, nan], 'false,false': [nan, 6.728624391667616e-17], 'true,false': [nan, -1.6653345369377348e-16]}, {'': [0.16027472279647678, 0.16656293766767322], 'false': [0.04609898951224574, 3.142140635731575e-17], 'true': [0.01979389858177786, -2.7611764343009074e-17], 'true,true': [0.01979389858177786, nan], 'false,false': [-1.0408340855860843e-17, 4.50090415388577e-17], 'false,false,false': [nan, 4.50090415388577e-17], 'false,false,true': [nan, -1.0408340855860843e-17]}, {'': [0.1019695888201193, 0.09629246057293941], 'true': [0.024880005234248038, -8.660660938984624e-17], 'false': [0.09629246057293941, nan], 'false,true': [4.030406619483736e-06, 6.217248937900877e-17]}, {'': [0.0301397189864061, -4.356571362453146e-17], 'false': [-4.356571362453146e-17, nan]}, {'': [0.018579960298149914, 1.1426856861639037e-16], 'true': [0.01686912882271538, 0.023294259976906977], 'false': [1.1426856861639037e-16, nan]}, {'': [0.03565484114533347, 3.6400754905742835e-17], 'false': [3.289549702593056e-17, 1.343011723336883e-17], 'false,false': [nan, 1.7906822977825105e-18], 'false,false,false': [nan, 1.343011723336883e-17]}, {'': [0.041018762650878254, 1.4582033756270712e-17], 'false': [1.4741550534441913e-17, 3.0708296425802203e-17], 'false,false': [3.0708296425802203e-17, nan]}, {'': [0.018257280193733346, 0.020249756346095608], 'false': [nan, 0.020249756346095608], 'false,false': [0.023278495834896353, -5.430438707405657e-18], 'true': [0.008572578103339354, 7.635923065295194e-17], 'false,false,false': [-5.430438707405657e-18, nan]}, {'': [0.01247708595968153, -5.877651306839064e-17], 'false': [1.9825411154020653e-17, 1.8278061990780017e-17], 'false,false': [nan, 1.8278061990780017e-17], 'false,false,false': [7.280150981148568e-18, 0.0]}, {'': [0.014934323055769583, 0.028438416239032597], 'false': [0.06360953754794094, -5.921189464667502e-18], 'true': [0.020630657824858248, 4.806160279762582e-19], 'true,true': [0.020630657824858248, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(A, C).;true;true
0;true;recursion_accounttype(D, B).;true;true
0;false;recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- tweets(A, C), follows(A, D).;true;true
1;true;tweets(E, C), recursion_accounttype(E, B).;true;true
1;false;recursion_accounttype(F, B).;true;true
1;false,false;tweets(A, G).;true;true
2;;accounttype(A, B) :- tweets(A, C).;true;true
2;true;tweets(D, C), recursion_accounttype(D, B).;true;true
2;false;recursion_accounttype(G, B).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;false;follows(A, D).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;false;tweets(A, D).;true;true
7;;accounttype(A, B) :- tweets(A, C).;true;true
7;true;tweets(D, C), recursion_accounttype(D, B).;true;true
7;false;recursion_accounttype(F, B).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;tweets(A, D).;true;true
8;false,false;follows(A, G).;true;true
9;;accounttype(A, B) :- tweets(A, C).;true;true
9;true;tweets(D, C), recursion_accounttype(D, B).;true;true
9;false;recursion_accounttype(F, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995127;  // std dev = 0.000, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.6359267128772901;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   | | | else return 0.8359267128772897;  // std dev = 0.989, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | else return -0.14185106490048818;  // std dev = 0.000, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.8581489350995117;  // std dev = 1.69e-07, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.14185106490048766;  // std dev = 5.96e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(A, D) )
%   then if ( tweets(E, C), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), follows(F, A) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109547;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return 0.6372840147270321;  // std dev = 1.307, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | else return 0.7322182957954391;  // std dev = 0.091, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return -0.12544463852839166;  // std dev = 0.000, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(A, I), follows(I, A) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return 0.7194734122109542;  // std dev = 2.98e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.6003561426228211;  // std dev = 0.896, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.7227552340132628;  // std dev = 0.059, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( tweets(A, K) )
%   | | then return -0.1254446385283914;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return -0.1254446385283912;  // std dev = 5.58e-08, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(F, A) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.5245289693920858;  // std dev = 1.722, 75.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=72 */
%   | | | else return 0.2426251182086936;  // std dev = 1.125, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.5730563359356611;  // std dev = 0.098, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.5548708529136621;  // std dev = 0.004, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.1123163781936068;  // std dev = 0.000, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
%   else if ( recursion_accounttype(J, B) )
%   | then if ( follows(K, A), follows(A, K) )
%   | | then if ( follows(K, L), follows(L, A) )
%   | | | then return 0.4371149498263803;  // std dev = 0.885, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.5853230887363553;  // std dev = 0.005, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.5613999654700933;  // std dev = 0.014, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return -0.11231637819360624;  // std dev = 7.21e-09, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.4232557186978288;  // std dev = 0.026, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | | else return 0.4379659906620827;  // std dev = 0.046, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.505963549290226;  // std dev = 0.045, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.45141123185847143;  // std dev = 0.079, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.4647581981242725;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.41626085990271305;  // std dev = 0.006, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.3705428015043256;  // std dev = 0.931, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.2902498840274866;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.10159632948783665;  // std dev = 0.000, 312.000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.30702760789557565;  // std dev = 0.942, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | | else return 0.34383817170650893;  // std dev = 0.081, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( follows(A, G), follows(H, A) )
%   | | | then return 0.35640217251616196;  // std dev = 0.101, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.32444110146963556;  // std dev = 0.077, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(J, A), follows(J, I) )
%   | | | then return 0.34093180900146025;  // std dev = 0.008, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.35048945937774195;  // std dev = 0.051, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(K, A) )
%   | | | then return 0.31839561040507985;  // std dev = 0.022, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.338239960503843;  // std dev = 0.028, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else return -0.0926912761892604;  // std dev = 1.07e-08, 341.000 (wgt'ed) examples reached here.  /* #neg=341 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(D, G) )
%   | | | then return 0.2613861557659142;  // std dev = 0.020, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return 0.26863771866000835;  // std dev = 0.026, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.30755420439539166;  // std dev = 0.034, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2874576241993802;  // std dev = 0.023, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(I, A), follows(A, I) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return -0.060699898302647805;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.19891572430361895;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.2600017601075106;  // std dev = 0.071, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return 0.2240186496265155;  // std dev = 0.968, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   else return -0.08518475138839678;  // std dev = 6.04e-09, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.2178524411607793;  // std dev = 0.070, 72.000 (wgt'ed) examples reached here.  /* #pos=72 */
%   | | | else return -0.10401828494822596;  // std dev = 0.834, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(D, F), follows(F, D) )
%   | | | then return -0.5250572194152379;  // std dev = 0.855, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.24633681545523836;  // std dev = 0.033, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.223993345512945;  // std dev = 0.068, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.15009019735616663;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( tweets(A, I), follows(J, A) )
%   | | | then return 0.23646683516440423;  // std dev = 0.064, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.2157870462539671;  // std dev = 0.058, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   else return -0.07877675473109141;  // std dev = 4.27e-09, 342.000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.1798714051761555;  // std dev = 0.013, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return 0.19292349941061054;  // std dev = 0.179, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.11740905998451424;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.1783907325806097;  // std dev = 0.007, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.0732462257633367;  // std dev = 8.28e-09, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.18582762904402852;  // std dev = 0.015, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.06933456460505927;  // std dev = 0.873, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.1961394891060427;  // std dev = 7.45e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then if ( tweets(D, F), tweets(E, F) )
%   | | | then return 0.15977735975950466;  // std dev = 0.123, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return -0.035403866924657204;  // std dev = 0.880, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return -0.07820806468558446;  // std dev = 1.900, 20.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=15 */
%   | | | else return 0.1590542957471222;  // std dev = 0.042, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, H), follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.12678605407959695;  // std dev = 0.812, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.16534051013071505;  // std dev = 0.004, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.15277081773059006;  // std dev = 0.047, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return 0.16953877465137826;  // std dev = 0.056, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else return -0.06842697784420308;  // std dev = 0.000, 321.000 (wgt'ed) examples reached here.  /* #neg=321 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.14508119850860648;  // std dev = 0.022, 97.000 (wgt'ed) examples reached here.  /* #pos=97 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.14724708395984612;  // std dev = 0.020, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.06578715766221181;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return -0.06419184008202625;  // std dev = 1.49e-08, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.1387477085468909;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.16644766798135918;  // std dev = 0.098, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return -0.08922558184577717;  // std dev = 0.854, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.09880433204591187;  // std dev = 0.983, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */


Results
   AUC ROC   = 0.994285
   AUC PR    = 0.422519
   CLL	      = -0.091866
   Precision = 0.334218 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.500994


Total learning time: 31.192 seconds
Total inference time: 34.943 seconds
AUC ROC: 0.994285


Results scoring model
   AUC ROC   = 0.996338
   AUC PR    = 0.4572
   CLL	      = -0.085542
   Precision = 0.333333 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.5


Total scoring time: 45.828 seconds
Refined model CLL: -0.085542


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.994285
   AUC PR    = 0.422519
   CLL	      = -0.091866
   Precision = 0.334218 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.500994


Total learning time: 128.155 seconds
Total inference time: 34.943 seconds
AUC ROC: 0.994285
Total revision time: 128.155
Best scored revision CLL: -0.085542


Dataset: 7_yeast_twitter, Fold: 2, Type: Transfer (trRDN-B), Time: 00:13:26
{'AUC ROC': 0.994285, 'AUC PR': 0.422519, 'CLL': -0.091866, 'Precision': [0.334218, 0.5], 'Recall': 1.0, 'F1': 0.500994, 'Learning time': 128.155, 'Inference time': 34.943, 'parameter': {'AUC ROC': 0.993032, 'AUC PR': 0.359698, 'CLL': -0.091964, 'Precision': [0.336, 0.5], 'Recall': 1.0, 'F1': 0.502994, 'Learning time': 8.863, 'Inference time': 27.949}}


