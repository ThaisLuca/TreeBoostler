Starting experiment #1 for 4_cora_imdb

Start learning from source dataset

Source train facts examples: 42558
Source train pos examples: 3017
Source train neg examples: 5022

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.25375166443991654;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.11529179224236855;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=27 */
%   | | | else return 0.31078051404687906;  // std dev = 6.861, 190.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.46790503266048855;  // std dev = 4.417, 82.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=50 */
%   | | | else return 0.20814893509951235;  // std dev = 2.133, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.4748156017661778;  // std dev = 3.766, 60.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=37 */
%   | | | else return 0.6142464960751212;  // std dev = 2.750, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.045745834324316524;  // std dev = 0.390, 645.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=121 */
%   | else return 0.02093963277393071;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.2202789253000489;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.0815140714063931;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=27 */
%   | | | else return 0.2685926717395528;  // std dev = 6.861, 190.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.40837613259448097;  // std dev = 4.389, 82.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=50 */
%   | | | else return 0.14101535675698904;  // std dev = 2.134, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.40983809346269734;  // std dev = 3.747, 60.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=37 */
%   | | | else return 0.5220782826498102;  // std dev = 2.750, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.04145180608364211;  // std dev = 0.390, 645.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=121 */
%   | else return 0.015443642182564108;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.18612745546670761;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.1417697000866624;  // std dev = 7.707, 263.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=93 */
%   | | | else return 0.39717383827381164;  // std dev = 2.739, 32.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then if ( haswordauthor(J, C) )
%   | | | then return 0.6966595166023675;  // std dev = 0.045, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.43730493120532127;  // std dev = 1.165, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.2774669084898612;  // std dev = 4.778, 94.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=51 */
%   | | | else return 0.36067094382663084;  // std dev = 4.639, 99.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=66 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.036270579657639114;  // std dev = 0.390, 645.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=121 */
%   | else return 0.013348050031270688;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.15376240055336185;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.039355388262597046;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=27 */
%   | | | else return 0.19026773487392346;  // std dev = 6.825, 190.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.2604255172367739;  // std dev = 4.362, 82.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=50 */
%   | | | else return 0.059237880216161866;  // std dev = 2.148, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.27241260560455793;  // std dev = 3.724, 60.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=37 */
%   | | | else return 0.32923964827471275;  // std dev = 2.744, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.03279533904980068;  // std dev = 0.390, 645.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=121 */
%   | else return 0.008982215589516453;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.12466581290352849;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.020088475454078554;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=27 */
%   | | | else return 0.15190212028896452;  // std dev = 6.822, 190.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.3572564270488233;  // std dev = 0.371, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.15555409568095208;  // std dev = 4.734, 94.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=51 */
%   | | | else return 0.21992172254711284;  // std dev = 4.615, 99.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=66 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then return 0.020954017613541945;  // std dev = 0.384, 557.000 (wgt'ed) examples reached here.  /* #neg=457 #pos=100 */
%   | | else return 0.07683018611674938;  // std dev = 0.426, 88.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=21 */
%   | else return 0.007549432746836227;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.09945562508083261;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.06050965584022756;  // std dev = 7.677, 263.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=93 */
%   | | | else return 0.24305081924403288;  // std dev = 2.739, 32.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordauthor(I, H) )
%   | | then return 0.2828036797139315;  // std dev = 0.360, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.11774268818552289;  // std dev = 4.753, 94.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=51 */
%   | | | else return 0.16517167325680016;  // std dev = 4.596, 99.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=66 */
%   else if ( haswordvenue(B, L), haswordtitle(M, L) )
%   | then if ( haswordauthor(N, L) )
%   | | then return 0.10595515770791611;  // std dev = 0.444, 63.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=17 */
%   | | else return 0.016650387094946564;  // std dev = 0.383, 582.000 (wgt'ed) examples reached here.  /* #neg=478 #pos=104 */
%   | else return 0.005086494281404076;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.07833317677971688;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.0022064891736643588;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=27 */
%   | | | else return 0.09806701314082118;  // std dev = 6.798, 190.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.1307624203733203;  // std dev = 4.020, 71.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=44 */
%   | | | else return -0.0010455610887616892;  // std dev = 2.694, 31.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | | else if ( haswordvenue(A, J), haswordtitle(K, J) )
%   | | | then return 0.12297487576270774;  // std dev = 3.707, 60.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=37 */
%   | | | else return 0.1515179174149486;  // std dev = 2.741, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then return 0.04463193025977474;  // std dev = 0.405, 91.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=19 */
%   | else return 0.013287882881659887;  // std dev = 0.381, 855.000 (wgt'ed) examples reached here.  /* #neg=704 #pos=151 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.06136839292531212;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.016594469267033164;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=27 */
%   | | | else return 0.07547068939781854;  // std dev = 6.797, 190.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordtitle(H, G) )
%   | | then if ( title(I, H), venue(I, B) )
%   | | | then return 0.09839435788746156;  // std dev = 4.020, 71.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=44 */
%   | | | else return -7.96656956088987E-4;  // std dev = 2.694, 31.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | | else if ( haswordvenue(A, J), haswordauthor(K, J) )
%   | | | then return 0.33600664851191486;  // std dev = 0.133, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.09230005317188177;  // std dev = 4.586, 97.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=64 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then return 0.0197323129443569;  // std dev = 0.390, 645.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=121 */
%   | else return 0.0018967293268171656;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), venue(E, B) )
%   | | then return 0.5780059651112117;  // std dev = 0.325, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordtitle(F, C) )
%   | | | then return 0.26363380837943845;  // std dev = 1.957, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | | | else return 0.29119833169849857;  // std dev = 1.163, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | else if ( haswordtitle(G, C) )
%   | | then if ( title(H, G), venue(H, A) )
%   | | | then return 0.04645480576305267;  // std dev = 39.612, 6,576.000 (wgt'ed) examples reached here.  /* #neg=3,982 #pos=2,594 */
%   | | | else return 0.03180756937555254;  // std dev = 8.055, 288.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=110 */
%   | | else if ( haswordvenue(B, I), haswordauthor(J, I) )
%   | | | then return 0.19196561193358855;  // std dev = 1.142, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.057295046782875766;  // std dev = 6.576, 193.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=117 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then return 0.017792576935189347;  // std dev = 0.390, 645.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=121 */
%   | else return -1.457529981859692E-4;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.03681893607350457;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.009502050315691552;  // std dev = 7.660, 263.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=93 */
%   | | | else return 0.1332210164600524;  // std dev = 2.739, 32.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.15326449762484168;  // std dev = 0.362, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.024518014868587523;  // std dev = 4.693, 94.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=51 */
%   | | | else return 0.0616169507969854;  // std dev = 4.600, 99.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=66 */
%   else if ( haswordvenue(A, L), haswordauthor(M, L) )
%   | then if ( haswordtitle(N, L) )
%   | | then return 0.09233846953897866;  // std dev = 0.443, 63.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=17 */
%   | | else return -0.09678435244212871;  // std dev = 0.258, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | else return 0.007841480340445604;  // std dev = 0.381, 855.000 (wgt'ed) examples reached here.  /* #neg=704 #pos=151 */


Starting fold 1

Target train facts examples: 215
Target train pos examples: 56
Target train neg examples: 3308

Target test facts examples: 863
Target test pos	 examples: 326
Target test neg examples: 10928

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
2;true,false,true;haswordauthor(J, C).;false;false
2;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
5;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
5;false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,true;haswordauthor(N, L).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordauthor(D, C).;true;true
8;true,true;author(E, D), venue(E, B).;false;true
8;true,true,false;haswordtitle(F, C).;false;false
8;true,false;haswordtitle(G, C).;true;true
8;true,false,true;title(H, G), venue(H, A).;false;false
8;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;true;false
9;false,true;haswordtitle(N, L).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 7.45e-08, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283914;  // std dev = 0.000, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then return 0.3550615922643163;  // std dev = 0.306, 80.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=56 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360625;  // std dev = 5.48e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4550309000196202;  // std dev = 0.669, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.1528741657724157;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783617;  // std dev = 5.58e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.3571593478163791;  // std dev = 1.03e-07, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.13410875097546435;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2799168317104411;  // std dev = 7.30e-08, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( movie(E, A) )
%   | | then return -0.11851014444151589;  // std dev = 0.034, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.08518475138839679;  // std dev = 3.09e-09, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07639199497725255;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2270944193667658;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.10738573587150102;  // std dev = 2.24e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109161;  // std dev = 5.05e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18971156478807913;  // std dev = 3.65e-08, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.07117347200798543;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09751789974416142;  // std dev = 1.83e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1622478751995864;  // std dev = 3.33e-08, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.06660957130442426;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.08926594988208972;  // std dev = 9.13e-09, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420267;  // std dev = 4.01e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1413836745707257;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( movie(E, B) )
%   | | then return -0.08114519159218658;  // std dev = 0.027, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.978388
   AUC PR    = 0.863056
   CLL	      = -0.083882
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total learning time: 1.438 seconds
Total inference time: 3.189 seconds
AUC ROC: 0.978388


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.068418
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.752 seconds
Parameter learned model CLL: -0.068418


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 56], 'true,false,false,true': [1.83e-08, 25, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-08, 77, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 56], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 28, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 89, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.306, 24, 56], 'true,false,false': [0.0, 0, 0], 'false,true': [5.48e-08, 69, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.669, 1, 56], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [0.0, 33, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.58e-08, 84, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [1.03e-07, 0, 56], 'true,false,false,true': [0.0, 39, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 76, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, B)'}, {'true,true': [7.3e-08, 0, 56], 'true,false,true': [0.034, 44, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [3.09e-09, 81, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 56], 'true,false,false,true': [2.24e-08, 37, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.05e-08, 90, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [3.65e-08, 0, 56], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [1.83e-08, 27, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 79, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [3.33e-08, 0, 56], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [9.13e-09, 29, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.01e-08, 85, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 56], 'true,false,true': [0.027, 35, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 114, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21653777513384853, 7.209240419643874e-17], 'true': [0.0, 0.2133821063862213], 'true,false': [-1.2688263138573217e-16, 1.3322676295501878e-17], 'false': [7.209240419643874e-17, nan], 'true,false,false': [1.3322676295501878e-17, nan]}, {'': [0.16046390259424909, -1.7464182409833923e-17], 'true': [-1.9032394707859825e-16, -5.742532885992189e-18], 'true,false': [0.0, -5.9476233462061954e-18], 'true,false,false': [-5.9476233462061954e-18, nan], 'false': [-1.7464182409833923e-17, nan]}, {'': [0.09653261407331609, 4.344350965924526e-17], 'true': [0.0, 0.09361807168687175], 'true,false': [0.09361807168687175, nan], 'false': [4.344350965924526e-17, nan]}, {'': [0.09134290323134668, 3.700743415417188e-17], 'true': [0.007859273208270443, 0.00020085820440490478], 'true,false': [-1.1564823173178713e-18, -1.3457248783335231e-17], 'false': [3.700743415417188e-17, nan], 'true,false,false': [-1.3457248783335231e-17, nan]}, {'': [0.05844348989295248, 0.0], 'true': [0.0, 0.05840399437573035], 'true,false': [1.9032394707859825e-16, -5.693451408334136e-18], 'false': [0.0, nan], 'true,false,false': [-5.693451408334136e-18, nan]}, {'': [0.039125899325289586, 1.0965165675310187e-17], 'true': [9.516197353929913e-17, 2.582748423595031e-05], 'true,false': [2.582748423595031e-05, nan], 'false': [1.0965165675310187e-17, nan]}, {'': [0.026822369566781305, 2.837236618486511e-17], 'true': [0.0, 0.026801837280876508], 'true,false': [-1.7446361815538174e-16, 1.350271246165731e-17], 'false': [2.837236618486511e-17, nan], 'true,false,false': [1.350271246165731e-17, nan]}, {'': [0.018325462554655843, -5.6213824031653495e-18], 'true': [2.3790493384824782e-17, 4.456309052119911e-05], 'true,false': [0.0, 1.2335811384723961e-17], 'true,false,false': [1.2335811384723961e-17, nan], 'false': [-5.6213824031653495e-18, nan]}, {'': [0.014502787954111066, 1.8939098655370318e-17], 'true': [1.9825411154020653e-17, 6.438595682258372e-05], 'true,false': [0.0, 2.8712664429960945e-18], 'false': [1.8939098655370318e-17, nan], 'true,false,false': [2.8712664429960945e-18, nan]}, {'': [0.011728525222258456, -1.6555957384761105e-17], 'true': [-4.3615904538845435e-17, 2.087556202509032e-05], 'true,false': [2.087556202509032e-05, nan], 'false': [-1.6555957384761105e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.1418510649004877;  // std dev = 2.58e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.14185106490048766;  // std dev = 7.30e-08, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.12544463852839136;  // std dev = 1.05e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.1254446385283914;  // std dev = 0.000, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( female(A) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( female(A) )
%   | then return -0.11231637819360636;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else if ( female(B) )
%   | | then return -0.11231637819360638;  // std dev = 2.28e-09, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return -0.11231637819360636;  // std dev = 3.23e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583103;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.10159632948783634;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( female(B) )
%   | then return -0.10159632948783635;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601496;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.09269127618926097;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.09269127618926107;  // std dev = 0.000, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694894;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( female(B) )
%   | | then if ( female(A) )
%   | | | then return -0.08518475138839686;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( female(A) )
%   | | | then return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.0855798316410739;  // std dev = 0.007, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( actor(B) )
%   | then if ( female(A) )
%   | | then if ( female(B) )
%   | | | then return -0.08518475138839687;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.08518475138839687;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.08518475138839679;  // std dev = 3.09e-09, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else return -0.08518475138839687;  // std dev = 1.32e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08576122157470727;  // std dev = 2.53e-05, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253562;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( female(A) )
%   | | | then return -0.07877675473109172;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.07875470350862651;  // std dev = 4.35e-05, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( female(A) )
%   | then return -0.07877675473109177;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else return -0.07877675473109179;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1770964977452772;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.07927153447098066;  // std dev = 2.35e-05, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( female(B) )
%   | | | then return -0.07324662493077312;  // std dev = 2.56e-06, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.07322271653214406;  // std dev = 2.44e-05, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.07324622576333704;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15274385809367083;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.135533784070077;  // std dev = 0.093, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | else if ( genre(A, E) )
%   | | then return -0.07367078069532963;  // std dev = 1.91e-05, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( female(B) )
%   | | | then return -0.06842742095340103;  // std dev = 2.57e-06, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.06840787119913554;  // std dev = 3.13e-05, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( female(A) )
%   | then return -0.06842697784420275;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else return -0.06842697784420275;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13400703000801087;  // std dev = 5.27e-09, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.13601685420546164;  // std dev = 5.27e-09, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( actor(A) )
%   | | then if ( female(A) )
%   | | | then return -0.06419299439297307;  // std dev = 4.69e-06, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.06417977548973734;  // std dev = 4.44e-05, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else return -0.06879425094834042;  // std dev = 2.07e-05, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06419184008202625;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */


Results
   AUC ROC   = 0.99889
   AUC PR    = 0.966568
   CLL	      = -0.078387
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total learning time: 2.331 seconds
Total inference time: 3.061 seconds
AUC ROC: 0.99889


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06395
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.814 seconds
Refined model CLL: -0.06395


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.99889
   AUC PR    = 0.966568
   CLL	      = -0.078387
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total learning time: 7.335 seconds
Total inference time: 3.061 seconds
AUC ROC: 0.99889
Total revision time: 7.335
Best scored revision CLL: -0.06395


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 03:59:05
{'AUC ROC': 0.99889, 'AUC PR': 0.966568, 'CLL': -0.078387, 'Precision': [1.0, 0.5], 'Recall': 0.819018, 'F1': 0.900506, 'Learning time': 7.335, 'Inference time': 3.061, 'parameter': {'AUC ROC': 0.978388, 'AUC PR': 0.863056, 'CLL': -0.083882, 'Precision': [1.0, 0.5], 'Recall': 0.819018, 'F1': 0.900506, 'Learning time': 1.438, 'Inference time': 3.189}}


Starting fold 2

Target train facts examples: 208
Target train pos examples: 58
Target train neg examples: 3423

Target test facts examples: 870
Target test pos	 examples: 324
Target test neg examples: 10813

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
2;true,false,true;haswordauthor(J, C).;false;false
2;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
5;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
5;false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,true;haswordauthor(N, L).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordauthor(D, C).;true;true
8;true,true;author(E, D), venue(E, B).;false;true
8;true,true,false;haswordtitle(F, C).;false;false
8;true,false;haswordtitle(G, C).;true;true
8;true,false,true;title(H, G), venue(H, A).;false;false
8;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;true;false
9;false,true;haswordtitle(N, L).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.16e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839136;  // std dev = 1.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283914;  // std dev = 0.000, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( movie(E, A) )
%   | | then return 0.3328054984329866;  // std dev = 0.315, 87.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=58 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360618;  // std dev = 8.82e-08, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.47242105838152504;  // std dev = 1.52e-07, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.1500141339733575;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783613;  // std dev = 5.96e-08, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.3582773246510623;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.13187235204336648;  // std dev = 1.83e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926108;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2806729057644635;  // std dev = 2.98e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( movie(E, A) )
%   | | then return -0.11500882902268866;  // std dev = 0.044, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.0851847513883968;  // std dev = 5.59e-09, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07663940138835164;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.22761999129838822;  // std dev = 1.05e-07, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.10608353133827304;  // std dev = 7.45e-09, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109168;  // std dev = 3.80e-08, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19009097921082072;  // std dev = 7.60e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.07138888118664402;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09643585325438092;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16253173369109325;  // std dev = 6.32e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.08835362786944097;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420265;  // std dev = 4.89e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.141602694932466;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( movie(E, B) )
%   | | then return -0.0814910438617318;  // std dev = 1.39e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.977686
   AUC PR    = 0.861626
   CLL	      = -0.084136
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 1.445 seconds
Total inference time: 3.294 seconds
AUC ROC: 0.977686


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.068077
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.824 seconds
Parameter learned model CLL: -0.068077


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 58], 'true,false,false,true': [1.05e-08, 22, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.16e-08, 87, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.49e-08, 35, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 91, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [0.315, 29, 58], 'true,false,false': [0.0, 0, 0], 'false,true': [8.82e-08, 111, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.52e-07, 0, 58], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [1.83e-08, 25, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.96e-08, 79, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [0.0, 0, 58], 'true,false,false,true': [1.83e-08, 27, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 84, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, B)'}, {'true,true': [2.98e-08, 0, 58], 'true,false,true': [0.044, 26, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [5.59e-09, 92, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [1.05e-07, 0, 58], 'true,false,false,true': [7.45e-09, 22, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.8e-08, 72, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [7.6e-08, 0, 58], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [0.0, 26, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 97, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [6.32e-08, 0, 58], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 36, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.89e-08, 102, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [1.39e-08, 29, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 84, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.20701963117192101, 7.656710514656253e-17], 'true': [0.0, 0.19937499999999955], 'true,false': [-3.675221047035001e-16, 5.046468293750712e-18], 'false': [7.656710514656253e-17, nan], 'true,false,false': [5.046468293750712e-18, nan]}, {'': [0.16869568108049943, -1.4640303621430636e-17], 'true': [-1.2250736823450003e-16, 9.25185853854297e-18], 'true,false': [0.0, 6.3441315692866086e-18], 'true,false,false': [6.3441315692866086e-18, nan], 'false': [-1.4640303621430636e-17, nan]}, {'': [0.10303850421140325, 7.001406461600086e-17], 'true': [0.0, 0.09906674252579017], 'true,false': [0.09906674252579017, nan], 'false': [7.001406461600086e-17, nan]}, {'': [0.08373109696962243, 4.4971059225322796e-17], 'true': [3.981489467621251e-16, 0.0002242618422702371], 'true,false': [-1.1564823173178713e-18, 1.3322676295501878e-17], 'false': [4.4971059225322796e-17, nan], 'true,false,false': [1.3322676295501878e-17, nan]}, {'': [0.053474889452317764, 0.0], 'true': [0.0, 0.052072849953312114], 'true,false': [-3.3689526264487507e-16, 1.2335811384723961e-17], 'true,false,false': [1.2335811384723961e-17, nan], 'false': [0.0, nan]}, {'': [0.033483623824920004, 3.137586808723268e-17], 'true': [1.5313421029312504e-17, 7.412296722802328e-05], 'true,false': [7.412296722802328e-05, nan], 'false': [3.137586808723268e-17, nan]}, {'': [0.02273491443973586, 2.0045693500176437e-17], 'true': [0.0, 0.022202009428385863], 'true,false': [1.914177628664063e-16, 2.523234146875356e-18], 'false': [2.0045693500176437e-17, nan], 'true,false,false': [2.523234146875356e-18, nan]}, {'': [0.01781597634523318, -6.867358915207154e-18], 'true': [9.953723669053128e-17, 4.1610002688283586e-05], 'true,false': [0.0, -1.1742743529689156e-17], 'false': [-6.867358915207154e-18, nan], 'true,false,false': [-1.1742743529689156e-17, nan]}, {'': [0.01487391966721505, 2.3401759832785162e-17], 'true': [6.891039463190627e-17, -4.625929269271485e-18], 'false': [2.3401759832785162e-17, nan], 'true,false': [nan, -4.625929269271485e-18], 'true,false,false': [-4.625929269271485e-18, nan]}, {'': [0.011060181397594182, -1.1895246692412391e-17], 'true': [-2.2970131543968756e-17, 6.699621700324221e-18], 'true,false': [6.699621700324221e-18, nan], 'false': [-1.1895246692412391e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.14185106490048768;  // std dev = 3.80e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.14185106490048763;  // std dev = 8.43e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.1254446385283914;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.12544463852839133;  // std dev = 0.000, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16991733837313952;  // std dev = 0.081, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.5553664367462842;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( female(B) )
%   | | | then return -0.11231637819360638;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.11231637819360636;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( female(B) )
%   | then return -0.11231637819360642;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else if ( female(A) )
%   | | then if ( actor(B) )
%   | | | then return -0.11231637819360636;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.1123163781936064;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41751358415830986;  // std dev = 1.18e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.4017044761712565;  // std dev = 0.097, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | else if ( genre(A, E) )
%   | | then return -0.09645816320400945;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( female(B) )
%   | | | then return -0.10159632948783635;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.10159632948783635;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(B) )
%   | then return -0.10159632948783635;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( female(A) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783635;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return -0.10159632948783634;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0883724535456327;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.3207118471601496;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.32416566990038126;  // std dev = 2.98e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( female(B) )
%   | | | then return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.09269127618926098;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( female(B) )
%   | then return -0.09269127618926103;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return -0.09269127618926105;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.25517224256948945;  // std dev = 3.73e-09, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2575275750119897;  // std dev = 6.45e-09, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( female(A) )
%   | | then return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( female(B) )
%   | | | then return -0.08457181426990763;  // std dev = 0.003, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.08487828282915226;  // std dev = 0.004, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( female(A) )
%   | then if ( female(B) )
%   | | then return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.08518475138839682;  // std dev = 3.48e-09, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( actor(A) )
%   | | then return -0.08518475138839679;  // std dev = 2.46e-09, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | else return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0753814691132681;  // std dev = 1.74e-05, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.2097577156325356;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.21142011307744832;  // std dev = 5.58e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( female(A) )
%   | | | then return -0.07877675473109176;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.07880147047396639;  // std dev = 2.97e-05, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( female(A) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( female(B) )
%   | | then return -0.07877675473109179;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109179;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.07877675473109177;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17709649774527744;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.17831483040609947;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( genre(A, E) )
%   | | then return -0.07029607787626471;  // std dev = 1.42e-05, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( female(A) )
%   | | | then return -0.07324622576333704;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.07327392309776397;  // std dev = 4.22e-05, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.07324622576333704;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1527438580936708;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.1536674587033984;  // std dev = 5.59e-09, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( female(A) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( female(B) )
%   | | | then return -0.06817217294993733;  // std dev = 0.002, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.06822532413027187;  // std dev = 0.003, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( female(A) )
%   | then return -0.06842697784420275;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else if ( female(B) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( actor(B) )
%   | | | then return -0.0684269778442027;  // std dev = 1.39e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | | else return -0.06842697784420272;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13400703000801117;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.12198003711685998;  // std dev = 0.079, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | else if ( female(B) )
%   | | then return -0.06422994748554345;  // std dev = 2.04e-05, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( female(A) )
%   | | | then return -0.0641918400820262;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.0638672830029488;  // std dev = 0.003, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.06419184008202626;  // std dev = 0.000, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */


Results
   AUC ROC   = 0.998125
   AUC PR    = 0.950144
   CLL	      = -0.077977
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 2.741 seconds
Total inference time: 3.396 seconds
AUC ROC: 0.998125


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063911
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.265 seconds
Refined model CLL: -0.063911


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998125
   AUC PR    = 0.950144
   CLL	      = -0.077977
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 8.275 seconds
Total inference time: 3.396 seconds
AUC ROC: 0.998125
Total revision time: 8.275
Best scored revision CLL: -0.063911


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 03:59:21
{'AUC ROC': 0.998125, 'AUC PR': 0.950144, 'CLL': -0.077977, 'Precision': [1.0, 0.5], 'Recall': 0.817901, 'F1': 0.89983, 'Learning time': 8.275, 'Inference time': 3.396, 'parameter': {'AUC ROC': 0.977686, 'AUC PR': 0.861626, 'CLL': -0.084136, 'Precision': [1.0, 0.5], 'Recall': 0.817901, 'F1': 0.89983, 'Learning time': 1.445, 'Inference time': 3.294}}


Starting fold 3

Target train facts examples: 341
Target train pos examples: 178
Target train neg examples: 3543

Target test facts examples: 737
Target test pos	 examples: 204
Target test neg examples: 10693

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
2;true,false,true;haswordauthor(J, C).;false;false
2;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
5;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
5;false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,true;haswordauthor(N, L).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordauthor(D, C).;true;true
8;true,true;author(E, D), venue(E, B).;false;true
8;true,true,false;haswordtitle(F, C).;false;false
8;true,false;haswordtitle(G, C).;true;true
8;true,false,true;title(H, G), venue(H, A).;false;false
8;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;true;false
9;false,true;haswordtitle(N, L).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995104;  // std dev = 7.54e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.31185263880321695;  // std dev = 5.174, 108.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048824;  // std dev = 0.000, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6759849831287832;  // std dev = 2.177, 136.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.24942835737403693;  // std dev = 5.268, 113.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839197;  // std dev = 0.000, 282.000 (wgt'ed) examples reached here.  /* #neg=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14167529285388183;  // std dev = 0.225, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( movie(E, A) )
%   | | then return 0.37456733450530455;  // std dev = 0.394, 252.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=178 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360685;  // std dev = 0.000, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4576361058321065;  // std dev = 1.146, 132.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.09894777832806827;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.18867584145449368;  // std dev = 5.023, 101.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783662;  // std dev = 0.000, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16805997825962074;  // std dev = 0.382, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.3620823890516866;  // std dev = 1.98e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.07798243951345618;  // std dev = 5.353, 118.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926043;  // std dev = 8.43e-09, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2634829484871168;  // std dev = 1.162, 134.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=129 */
%   | else if ( movie(E, A) )
%   | | then return 0.05723868028414803;  // std dev = 5.304, 131.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.08518475138839678;  // std dev = 5.89e-09, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.15761331695039735;  // std dev = 0.462, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( genre(B, E) )
%   | | then return 0.23291881281072685;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.005917468860895136;  // std dev = 5.538, 131.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109143;  // std dev = 6.50e-08, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17672486661705647;  // std dev = 1.010, 134.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.07067586849572449;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.056581091299779084;  // std dev = 5.303, 115.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333689;  // std dev = 1.07e-07, 276.000 (wgt'ed) examples reached here.  /* #neg=276 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15021797719854432;  // std dev = 1.032, 134.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.06617234581558387;  // std dev = 4.56e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.102366396817023;  // std dev = 5.023, 101.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0684269778442029;  // std dev = 0.000, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13330037782066562;  // std dev = 0.951, 133.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=129 */
%   | else if ( movie(E, B) )
%   | | then return 0.021312991344509376;  // std dev = 5.259, 124.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202602;  // std dev = 5.67e-09, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.993692
   AUC PR    = 0.961008
   CLL	      = -0.183567
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95098
   F1        = 0.974874


Total learning time: 2.01 seconds
Total inference time: 2.956 seconds
AUC ROC: 0.993692


Results scoring model
   AUC ROC   = 0.976419
   AUC PR    = 0.83578
   CLL	      = -0.158616
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total scoring time: 1.793 seconds
Parameter learned model CLL: -0.158616


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [1.05e-08, 22, 0], 'true,false,true': [7.54e-07, 0, 129], 'true,false,false,true': [5.174, 59, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 249, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.177, 7, 129], 'true,false,true': [5.27e-09, 12, 0], 'true,false,false,true': [5.268, 64, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 282, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.225, 22, 0], 'true,false,true': [0.394, 74, 178], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 249, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.146, 3, 129], 'true,false,true': [0.0, 15, 0], 'true,false,false,true': [5.023, 52, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 284, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.382, 17, 0], 'true,false,true': [1.98e-07, 0, 129], 'true,false,false,true': [5.353, 69, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.43e-09, 284, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, B)'}, {'true,true': [1.162, 5, 129], 'true,false,true': [5.304, 82, 49], 'true,false,false': [0.0, 0, 0], 'false,true': [5.89e-09, 279, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.462, 20, 0], 'true,false,true': [0.0, 0, 129], 'true,false,false,true': [5.538, 82, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.5e-08, 240, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [1.01, 5, 129], 'true,false,true': [0.0, 14, 0], 'true,false,false,true': [5.303, 66, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.07e-07, 276, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.032, 5, 129], 'true,false,true': [4.56e-09, 11, 0], 'true,false,false,true': [5.023, 52, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 280, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.951, 4, 129], 'true,false,true': [5.259, 75, 49], 'true,false,false': [0.0, 0, 0], 'false,true': [5.67e-09, 287, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21493418404615858, -1.319783193931913e-16], 'true': [5.046468293750712e-18, 0.18697146112624974], 'true,false': [4.40646657835721e-15, 0.24785665294924575], 'true,false,false': [0.24785665294924575, nan], 'false': [-1.319783193931913e-16, nan]}, {'': [0.1837239230934678, -7.873922160462103e-17], 'true': [0.03485291526578832, 0.2342134340721728], 'true,false': [2.3129646346357427e-18, 0.24559479990602426], 'true,false,false': [0.24559479990602426, nan], 'false': [-7.873922160462103e-17, nan]}, {'': [0.1628316899457088, -9.095803093314535e-17], 'true': [0.0022985223200782186, 0.15544816216748278], 'true,false': [0.15544816216748278, nan], 'false': [-9.095803093314535e-17, nan]}, {'': [0.13471470081914744, -5.785669283257858e-17], 'true': [0.009954740621035536, 0.22679457281281462], 'true,false': [-5.551115123125783e-18, 0.24977943338888237], 'true,false,false': [0.24977943338888237, nan], 'false': [-5.785669283257858e-17, nan]}, {'': [0.13730001224806795, 7.03662480396226e-17], 'true': [0.008600458391952488, 0.1361403714774991], 'true,false': [3.029445772620582e-16, 0.242818155702384], 'true,false,false': [0.242818155702384, nan], 'false': [7.03662480396226e-17, nan]}, {'': [0.12188416857516882, 3.501778715663576e-17], 'true': [0.010076329702369026, 0.2147433694611534], 'true,false': [0.2147433694611534, nan], 'false': [3.501778715663576e-17, nan]}, {'': [0.12732515197321023, 1.7578531223231644e-17], 'true': [0.010686958612103342, 0.13084993151715232], 'true,false': [-2.2032332891786052e-16, 0.2341355398869527], 'true,false,false': [0.2341355398869527, nan], 'false': [1.7578531223231644e-17, nan]}, {'': [0.11606034266301771, 4.1834490782976914e-17], 'true': [0.007616677589383979, 0.2195647632516373], 'true,false': [0.0, 0.24453686200378152], 'true,false,false': [0.24453686200378152, nan], 'false': [4.1834490782976914e-17, nan]}, {'': [0.10905320681472033, -3.9650822308041306e-17], 'true': [0.007944310552481999, 0.22776333286236466], 'true,false': [1.8924256101565167e-18, 0.24977943338888378], 'true,false,false': [0.24977943338888378, nan], 'false': [-3.9650822308041306e-17, nan]}, {'': [0.1142599029333746, 3.249433242805336e-17], 'true': [0.006803422343267344, 0.22302546429295966], 'true,false': [0.22302546429295966, nan], 'false': [3.249433242805336e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995104;  // std dev = 7.54e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995122;  // std dev = 1.69e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.14185106490048768;  // std dev = 5.58e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.14185106490048807;  // std dev = 0.000, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.7194734122109555;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109547;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.12544463852839158;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.1254446385283919;  // std dev = 0.000, 263.000 (wgt'ed) examples reached here.  /* #neg=263 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360635;  // std dev = 1.39e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5553664367462833;  // std dev = 5.78e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.1123163781936063;  // std dev = 3.49e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.1123163781936069;  // std dev = 0.000, 262.000 (wgt'ed) examples reached here.  /* #neg=262 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.4175135841583092;  // std dev = 3.77e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else return -0.10159632948783627;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(A, E) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.41751358415831047;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.1015963294878362;  // std dev = 3.94e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.10159632948783659;  // std dev = 0.000, 264.000 (wgt'ed) examples reached here.  /* #neg=264 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 7.45e-09, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601498;  // std dev = 2.49e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32071184716014944;  // std dev = 2.98e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.09269127618926107;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.09269127618926047;  // std dev = 9.19e-08, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2551722425694887;  // std dev = 3.26e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.0851847513883968;  // std dev = 1.83e-08, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   else return -0.08518475138839678;  // std dev = 1.03e-07, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253537;  // std dev = 2.21e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.209757715632536;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.07877675473109179;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.07877675473109143;  // std dev = 5.37e-08, 273.000 (wgt'ed) examples reached here.  /* #neg=273 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16956739327885362;  // std dev = 0.493, 133.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.17709649774527744;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.07324622576333686;  // std dev = 1.12e-07, 268.000 (wgt'ed) examples reached here.  /* #neg=268 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14479004910726118;  // std dev = 0.525, 134.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.1527438580936709;  // std dev = 4.47e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.0684269778442027;  // std dev = 1.29e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.06842697784420285;  // std dev = 0.000, 270.000 (wgt'ed) examples reached here.  /* #neg=270 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13531658459526102;  // std dev = 0.011, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.06534590112938823;  // std dev = 0.057, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   else return -0.06419184008202615;  // std dev = 6.66e-08, 264.000 (wgt'ed) examples reached here.  /* #neg=264 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063607
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.945 seconds
Total inference time: 3.037 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.066002
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.653 seconds
Refined model CLL: -0.066002


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063607
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.401 seconds
Total inference time: 3.037 seconds
AUC ROC: 1.0
Total revision time: 8.401
Best scored revision CLL: -0.066002


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 03:59:36
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063607, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 8.401, 'Inference time': 3.037, 'parameter': {'AUC ROC': 0.993692, 'AUC PR': 0.961008, 'CLL': -0.183567, 'Precision': [1.0, 0.5], 'Recall': 0.95098, 'F1': 0.974874, 'Learning time': 2.01, 'Inference time': 2.956}}


Starting fold 4

Target train facts examples: 151
Target train pos examples: 45
Target train neg examples: 1891

Target test facts examples: 927
Target test pos	 examples: 337
Target test neg examples: 12345

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
2;true,false,true;haswordauthor(J, C).;false;false
2;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
5;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
5;false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,true;haswordauthor(N, L).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordauthor(D, C).;true;true
8;true,true;author(E, D), venue(E, B).;false;true
8;true,true,false;haswordtitle(F, C).;false;false
8;true,false;haswordtitle(G, C).;true;true
8;true,false,true;title(H, G), venue(H, A).;false;false
8;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;true;false
9;false,true;haswordtitle(N, L).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 6.83e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839158;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( movie(E, A) )
%   | | then return 0.3802365180735255;  // std dev = 0.294, 61.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=45 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360625;  // std dev = 5.48e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4606170331031695;  // std dev = 1.40e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783633;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.1561629774769705;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783623;  // std dev = 3.80e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3501281638325914;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.1366706585350457;  // std dev = 1.29e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2751588296200503;  // std dev = 2.11e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( movie(E, A) )
%   | | then return -0.11872671934410405;  // std dev = 0.047, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.08518475138839679;  // std dev = 2.08e-09, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.26412004030691455;  // std dev = 0.222, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.22378167915860803;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.10923106694982067;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109173;  // std dev = 2.24e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18731611398144035;  // std dev = 1.49e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.0651279930887006;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09904771383979222;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 7.45e-09, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16045309574789807;  // std dev = 4.71e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.06127312936639196;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09055325416972484;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420268;  // std dev = 2.69e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1399971327961653;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( movie(E, B) )
%   | | then return -0.08124013736396453;  // std dev = 0.035, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.978805
   AUC PR    = 0.865091
   CLL	      = -0.081829
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total learning time: 1.374 seconds
Total inference time: 3.177 seconds
AUC ROC: 0.978805


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.069469
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.421 seconds
Parameter learned model CLL: -0.069469


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [2.23e-07, 0, 45], 'true,false,false,true': [0.0, 16, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.83e-08, 69, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 45], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [0.0, 28, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 52, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [0.294, 16, 45], 'true,false,false': [0.0, 0, 0], 'false,true': [5.48e-08, 69, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.4e-07, 0, 45], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 24, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.8e-08, 56, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 45], 'true,false,false,true': [1.29e-08, 25, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 68, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, B)'}, {'true,true': [2.11e-08, 0, 45], 'true,false,true': [0.047, 33, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [2.08e-09, 64, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.222, 3, 0], 'true,false,true': [0.0, 0, 45], 'true,false,false,true': [0.0, 32, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.24e-08, 59, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [1.49e-08, 0, 45], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [0.0, 24, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 58, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [4.71e-08, 0, 45], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [0.0, 28, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.69e-08, 67, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 45], 'true,false,true': [0.035, 24, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 69, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.20874023437500033, 6.75787928032704e-17], 'true': [0.0, 0.19349637194302646], 'true,false': [1.105288700071267e-15, -6.938893903907228e-18], 'false': [6.75787928032704e-17, nan], 'true,false,false': [-6.938893903907228e-18, nan]}, {'': [0.17133276299164268, -3.416070845000482e-17], 'true': [-9.473903143468002e-16, -7.401486830834377e-18], 'true,false': [0.0, -5.9476233462061954e-18], 'true,false,false': [-5.9476233462061954e-18, nan], 'false': [-3.416070845000482e-17, nan]}, {'': [0.0967128839740415, 4.344350965924526e-17], 'true': [0.0, 0.08626074866529472], 'true,false': [0.08626074866529472, nan], 'false': [4.344350965924526e-17, nan]}, {'': [0.08676453517418367, 2.577303450022685e-17], 'true': [4.3422056074228343e-16, 0.00011433673239434227], 'true,false': [0.0, -3.23815048849004e-17], 'false': [2.577303450022685e-17, nan], 'true,false,false': [-3.23815048849004e-17, nan]}, {'': [0.05440708778384348, -1.6326809185664067e-18], 'true': [nan, 0.05440708778384348], 'true,false': [0.0, 6.661338147750939e-18], 'true,false,false': [6.661338147750939e-18, nan], 'false': [-1.6326809185664067e-18, nan]}, {'': [0.03789711181161042, 4.336808689942018e-18], 'true': [9.86864910777917e-18, 6.77844300269131e-05], 'true,false': [6.77844300269131e-05, nan], 'false': [4.336808689942018e-18, nan]}, {'': [0.030946998637364255, 8.467802730191872e-18], 'true': [0.016370075525479966, 0.026934117770580912], 'true,false': [-3.947459643111668e-17, -1.734723475976807e-18], 'false': [8.467802730191872e-18, nan], 'true,false,false': [-1.734723475976807e-18, nan]}, {'': [0.018717581821178816, 9.570888143320315e-19], 'true': [4.934324553889585e-18, 8.169567733718123e-05], 'true,false': [0.0, -2.3129646346357427e-18], 'false': [9.570888143320315e-19, nan], 'true,false,false': [-2.3129646346357427e-18, nan]}, {'': [0.01490807350074404, 1.0770820388154504e-17], 'true': [4.9343245538895844e-17, 5.3344710751026166e-05], 'true,false': [0.0, -7.93016446160826e-18], 'false': [1.0770820388154504e-17, nan], 'true,false,false': [-7.93016446160826e-18, nan]}, {'': [0.011120357706281085, -5.6315660669392e-18], 'true': [-2.960594732333751e-17, 4.976990040196754e-05], 'true,false': [4.976990040196754e-05, nan], 'false': [-5.6315660669392e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.14185106490048766;  // std dev = 6.99e-08, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109544;  // std dev = 2.98e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.6953328964755449;  // std dev = 0.141, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.12544463852839152;  // std dev = 0.000, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( actor(B) )
%   | | then if ( female(B) )
%   | | | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.11231637819360635;  // std dev = 1.67e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( female(A) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.5613193187610706;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else if ( female(A) )
%   | then return -0.11231637819360636;  // std dev = 3.48e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( female(B) )
%   | | then return -0.11231637819360636;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return -0.11231637819360638;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.4175135841583098;  // std dev = 1.29e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.42194326721682524;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else if ( female(A) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( actor(A) )
%   | | then if ( actor(B) )
%   | | | then return -0.10159632948783633;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.10159632948783628;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.3207118471601497;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.30649939262471765;  // std dev = 0.100, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | else if ( female(B), actor(A) )
%   | | then return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( female(A) )
%   | | | then return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.09447228684897604;  // std dev = 0.011, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.09269127618926103;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.2551722425694894;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.26052458366002257;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( actor(A) )
%   | | then if ( female(A) )
%   | | | then return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.0850691775121919;  // std dev = 0.000179, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return -0.0932921463450307;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( actor(A) )
%   | then if ( actor(B) )
%   | | then if ( female(B) )
%   | | | then return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.0851847513883968;  // std dev = 1.83e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else return -0.08518475138839687;  // std dev = 9.31e-10, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08569446863497629;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.20975771563253562;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.2135314855963424;  // std dev = 4.71e-08, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( female(B) )
%   | | | then return -0.07878234654276597;  // std dev = 6.85e-06, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.07865597711142149;  // std dev = 6.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( female(A) )
%   | then return -0.07877675473109176;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return -0.07877675473109176;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17709649774527736;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.1798594700654688;  // std dev = 3.73e-09, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( genre(A, E) )
%   | | then return -0.07921426395218681;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( female(A) )
%   | | | then return -0.07325442471762998;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.07316695294961427;  // std dev = 0.000221, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else return -0.07324622576333704;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15274385809367094;  // std dev = 1.86e-09, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.15483663462963107;  // std dev = 6.97e-09, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( genre(A, E) )
%   | | then return -0.07362562958983403;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( female(B) )
%   | | | then return -0.06843472814031924;  // std dev = 1.49e-05, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.06834851931927978;  // std dev = 0.000186, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else if ( female(A) )
%   | then return -0.06842697784420272;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( female(B) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( actor(A) )
%   | | | then return -0.0684269778442027;  // std dev = 1.05e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | | else return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13400703000801117;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.1184332797606944;  // std dev = 0.100, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | else if ( female(A) )
%   | | then return -0.06420331687988635;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( female(B) )
%   | | | then return -0.06420274415124207;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.06410857593809426;  // std dev = 7.45e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.06419184008202625;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */


Results
   AUC ROC   = 0.999064
   AUC PR    = 0.968999
   CLL	      = -0.077276
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total learning time: 2.71 seconds
Total inference time: 3.806 seconds
AUC ROC: 0.999064


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065293
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.656 seconds
Refined model CLL: -0.065293


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999064
   AUC PR    = 0.968999
   CLL	      = -0.077276
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total learning time: 7.161 seconds
Total inference time: 3.806 seconds
AUC ROC: 0.999064
Total revision time: 7.161
Best scored revision CLL: -0.065293


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 03:59:51
{'AUC ROC': 0.999064, 'AUC PR': 0.968999, 'CLL': -0.077276, 'Precision': [1.0, 0.5], 'Recall': 0.824926, 'F1': 0.904065, 'Learning time': 7.161, 'Inference time': 3.806, 'parameter': {'AUC ROC': 0.978805, 'AUC PR': 0.865091, 'CLL': -0.081829, 'Precision': [1.0, 0.5], 'Recall': 0.824926, 'F1': 0.904065, 'Learning time': 1.374, 'Inference time': 3.177}}


Starting fold 5

Target train facts examples: 163
Target train pos examples: 45
Target train neg examples: 2071

Target test facts examples: 915
Target test pos	 examples: 337
Target test neg examples: 12165

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
2;true,false,true;haswordauthor(J, C).;false;false
2;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
5;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
5;false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,true;haswordauthor(N, L).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordauthor(D, C).;true;true
8;true,true;author(E, D), venue(E, B).;false;true
8;true,true,false;haswordtitle(F, C).;false;false
8;true,false;haswordtitle(G, C).;true;true
8;true,false,true;title(H, G), venue(H, A).;false;false
8;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;true;false
9;false,true;haswordtitle(N, L).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995115;  // std dev = 2.38e-07, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.17064893509951234;  // std dev = 2.622, 32.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 5.96e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109548;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.03608072177992909;  // std dev = 2.828, 50.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283916;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.34339709809189295;  // std dev = 0.385, 69.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=45 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360624;  // std dev = 6.05e-08, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46978200996715447;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.16189330312652622;  // std dev = 2.481, 26.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783615;  // std dev = 5.67e-08, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.19759018740117967;  // std dev = 0.136, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.3564509843648907;  // std dev = 7.30e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.03371542638463586;  // std dev = 2.673, 35.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2794377140906928;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( movie(E, A) )
%   | | then return 0.04081294137578741;  // std dev = 2.643, 34.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.08518475138839679;  // std dev = 2.08e-09, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.22676125118805673;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.04619508434445847;  // std dev = 2.622, 32.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109166;  // std dev = 3.80e-08, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18947095967117464;  // std dev = 4.21e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.08815371894222326;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.027602623438971168;  // std dev = 2.640, 33.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16206780806756796;  // std dev = 4.08e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.08132021080847233;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.010699994998112706;  // std dev = 2.701, 37.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420268;  // std dev = 2.47e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1412446994333374;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( movie(E, B) )
%   | | then return 0.04639668048536347;  // std dev = 2.588, 32.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.982257
   AUC PR    = 0.888508
   CLL	      = -0.134657
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.854599
   F1        = 0.9216


Total learning time: 1.343 seconds
Total inference time: 3.309 seconds
AUC ROC: 0.982257


Results scoring model
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.138919
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total scoring time: 1.372 seconds
Parameter learned model CLL: -0.138919


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [2.38e-07, 0, 35], 'true,false,false,true': [2.622, 22, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.96e-08, 57, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 35], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [2.828, 40, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 65, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.385, 24, 45], 'true,false,false': [0.0, 0, 0], 'false,true': [6.05e-08, 75, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 35], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.481, 16, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.67e-08, 74, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.136, 2, 0], 'true,false,true': [7.3e-08, 0, 35], 'true,false,false,true': [2.673, 25, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 52, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, B)'}, {'true,true': [0.0, 0, 35], 'true,false,true': [2.643, 24, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [2.08e-09, 65, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 35], 'true,false,false,true': [2.622, 22, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.8e-08, 72, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [4.21e-08, 0, 35], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.64, 23, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 67, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [4.08e-08, 0, 35], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [2.701, 27, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.47e-08, 64, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 35], 'true,false,true': [2.588, 22, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 63, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.22959183673469416, 6.232831015439475e-17], 'true': [0.0, 0.22053909556694173], 'true,false': [1.6240976817373718e-15, 0.21484375000000008], 'true,false,false': [0.21484375000000008, nan], 'false': [6.232831015439475e-17, nan]}, {'': [0.2072380271744593, -3.75767792950053e-17], 'true': [-7.105427357601002e-16, 0.16000000000000017], 'true,false': [nan, 0.16000000000000017], 'true,false,false': [0.16000000000000017, nan], 'false': [-3.75767792950053e-17, nan]}, {'': [0.14952740659137312, 4.884981308350689e-17], 'true': [0.0, 0.14855429082648586], 'true,false': [0.14855429082648586, nan], 'false': [4.884981308350689e-17, nan]}, {'': [0.1263756107786347, 4.350874015422911e-17], 'true': [-1.0150610510858574e-16, 0.2247673745826992], 'true,false': [0.0, 0.23668639053254445], 'true,false,false': [0.23668639053254445, nan], 'false': [4.350874015422911e-17, nan]}, {'': [0.12894270185856482, -2.135044278125301e-18], 'true': [0.009214820757087155, 0.12808037642273726], 'true,false': [1.5225915766287861e-16, 0.2040816326530612], 'true,false,false': [0.2040816326530612, nan], 'false': [-2.135044278125301e-18, nan]}, {'': [0.11547864105003991, 4.270088556250602e-18], 'true': [0.0, 0.2054702000327723], 'true,false': [0.2054702000327723, nan], 'false': [4.270088556250602e-18, nan]}, {'': [0.11074663343319704, 2.0045693500176437e-17], 'true': [nan, 0.11074663343319704], 'true,false': [-1.1419436824715895e-16, 0.21484375], 'true,false,false': [0.21484375, nan], 'false': [2.0045693500176437e-17, nan]}, {'': [0.10702469552471243, -2.4855739357279623e-18], 'true': [5.075305255429287e-17, 0.19985613303860525], 'true,false': [0.0, 0.21120293847566604], 'true,false,false': [0.21120293847566604, nan], 'false': [-2.4855739357279623e-18, nan]}, {'': [0.10764020162582871, 9.540979117872439e-18], 'true': [4.7580986769649563e-17, 0.1921619281495138], 'true,false': [0.0, 0.1972242512783052], 'true,false,false': [0.1972242512783052, nan], 'false': [9.540979117872439e-18, nan]}, {'': [0.10221972889404367, -2.64338815386942e-18], 'true': [-6.3441315692866086e-18, 0.20932307775336012], 'true,false': [0.20932307775336012, nan], 'false': [-2.64338815386942e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995115;  // std dev = 2.38e-07, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.14185106490048766;  // std dev = 6.99e-08, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109548;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( actor(B) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.12544463852839144;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.1123163781936064;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0.555366436746284;  // std dev = 1.79e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.11231637819360628;  // std dev = 4.21e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415831047;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783633;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return 0.4175135841583102;  // std dev = 2.11e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1015963294878362;  // std dev = 4.34e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601495;  // std dev = 2.98e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926096;  // std dev = 9.13e-09, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0.3207118471601497;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.09269127618926107;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25517224256948956;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( actor(B) )
%   | | then return -0.0855798316410739;  // std dev = 0.007, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else return 0.2551722425694894;  // std dev = 1.83e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.08518475138839679;  // std dev = 2.36e-08, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253542;  // std dev = 5.37e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( actor(A) )
%   | | then if ( actor(B) )
%   | | | then return -0.07874808814188695;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.2097577156325357;  // std dev = 1.97e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.3182436480136126;  // std dev = 0.578, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07877675473109175;  // std dev = 1.97e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1770964977452775;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.06386238891983669;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.07199790334056796;  // std dev = 0.014, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0.17709649774527736;  // std dev = 7.45e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07324622576333704;  // std dev = 0.000, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1527438580936709;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.06014912748895563;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.06795292862266786;  // std dev = 0.014, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0.15274385809367094;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06842697784420268;  // std dev = 1.49e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801115;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( actor(B) )
%   | | then return -0.06427334232007526;  // std dev = 1.29e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else return 0.13400703000801117;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06419184008202625;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.073409
   Precision = 0.873057 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.932227


Total learning time: 1.915 seconds
Total inference time: 3.209 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064873
   Precision = 0.978261 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.989011


Total scoring time: 1.348 seconds
Refined model CLL: -0.064873


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.073409
   Precision = 0.873057 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.932227


Total learning time: 5.978 seconds
Total inference time: 3.209 seconds
AUC ROC: 1.0
Total revision time: 5.978
Best scored revision CLL: -0.064873


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 04:00:04
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.073409, 'Precision': [0.873057, 0.5], 'Recall': 1.0, 'F1': 0.932227, 'Learning time': 5.978, 'Inference time': 3.209, 'parameter': {'AUC ROC': 0.982257, 'AUC PR': 0.888508, 'CLL': -0.134657, 'Precision': [1.0, 0.5], 'Recall': 0.854599, 'F1': 0.9216, 'Learning time': 1.343, 'Inference time': 3.309}}


Starting fold 1

Target train facts examples: 215
Target train pos examples: 56
Target train neg examples: 3308

Target test facts examples: 863
Target test pos	 examples: 326
Target test neg examples: 10928

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
2;true,false,true;haswordauthor(J, C).;false;false
2;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
5;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
5;false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,true;haswordauthor(N, L).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordauthor(D, C).;true;true
8;true,true;author(E, D), venue(E, B).;false;true
8;true,true,false;haswordtitle(F, C).;false;false
8;true,false;haswordtitle(G, C).;true;true
8;true,false,true;title(H, G), venue(H, A).;false;false
8;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;true;false
9;false,true;haswordtitle(N, L).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1418510649004877;  // std dev = 2.79e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 6.99e-08, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839152;  // std dev = 0.000, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then return 0.3381684126092106;  // std dev = 0.313, 83.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=56 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360624;  // std dev = 5.87e-08, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.47108460972792116;  // std dev = 2.02e-07, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.15069924285835204;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783616;  // std dev = 5.58e-08, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3573521103213012;  // std dev = 5.16e-08, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.13240879951168957;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926107;  // std dev = 1.32e-09, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2800472028117086;  // std dev = 8.94e-08, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( movie(E, A) )
%   | | then return -0.11792426397040756;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.08518475138839679;  // std dev = 2.46e-09, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09132720544465345;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.22718506080522846;  // std dev = 6.66e-08, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.10619984153153976;  // std dev = 1.97e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109168;  // std dev = 3.73e-08, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18977701171493602;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.08402585793648812;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09653258374822299;  // std dev = 1.05e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16229684732417662;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.07778072226273405;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.08843524678272983;  // std dev = 7.45e-09, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420267;  // std dev = 3.80e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14142146591271024;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( movie(E, B) )
%   | | then return -0.08103624500781206;  // std dev = 0.013, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.978388
   AUC PR    = 0.863056
   CLL	      = -0.084216
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total learning time: 1.609 seconds
Total inference time: 2.771 seconds
AUC ROC: 0.978388


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.068427
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.807 seconds
Parameter learned model CLL: -0.068427


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 56], 'true,false,false,true': [2.79e-08, 31, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.99e-08, 72, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 56], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 31, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 72, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.313, 27, 56], 'true,false,false': [0.0, 0, 0], 'false,true': [5.87e-08, 74, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.02e-07, 0, 56], 'true,false,true': [2.63e-09, 3, 0], 'true,false,false,true': [0.0, 28, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.58e-08, 73, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [5.16e-08, 0, 56], 'true,false,false,true': [0.0, 30, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 82, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, B)'}, {'true,true': [8.94e-08, 0, 56], 'true,false,true': [0.0, 32, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [2.46e-09, 73, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [6.66e-08, 0, 56], 'true,false,false,true': [1.97e-08, 33, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.73e-08, 71, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 56], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [1.05e-08, 25, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 82, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 56], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [7.45e-09, 26, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.8e-08, 83, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 56], 'true,false,true': [0.013, 35, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 70, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.23330387577326067, 6.78469626159818e-17], 'true': [0.0, 0.22935658607477835], 'true,false': [-1.2688263138573217e-16, 2.5069552168955147e-17], 'false': [6.78469626159818e-17, nan], 'true,false,false': [2.5069552168955147e-17, nan]}, {'': [0.16373457334384328, -3.0839528461809905e-17], 'true': [-1.9032394707859825e-16, -7.162729191130042e-18], 'true,false': [nan, -7.162729191130042e-18], 'true,false,false': [-7.162729191130042e-18, nan], 'false': [-3.0839528461809905e-17, nan]}, {'': [0.10048053145682921, 4.650934292348629e-17], 'true': [0.0, 0.09784440646617455], 'true,false': [0.09784440646617455, nan], 'false': [4.650934292348629e-17, nan]}, {'': [0.08766233981986586, 4.258389683493751e-17], 'true': [7.2957513046796e-16, 0.00012877473588891787], 'true,false': [2.3129646346357427e-18, 0.0], 'false': [4.258389683493751e-17, nan], 'true,false,false': [0.0, nan]}, {'': [0.0544854594354702, 0.0], 'true': [nan, 0.0544854594354702], 'true,false': [4.7580986769649563e-17, -1.4802973661668754e-17], 'false': [0.0, nan], 'true,false,false': [-1.4802973661668754e-17, nan]}, {'': [0.03665021549120555, 6.083413833562501e-18], 'true': [1.427429603089487e-16, -3.122502256758253e-17], 'false': [6.083413833562501e-18, nan], 'true,false': [-3.122502256758253e-17, nan]}, {'': [0.02617725845795495, 1.9546180011006276e-17], 'true': [0.0, 0.025930674316382574], 'true,false': [7.930164461608261e-17, 1.1775092685418327e-17], 'false': [1.9546180011006276e-17, nan], 'true,false,false': [1.1775092685418327e-17, nan]}, {'': [0.01821050998134495, -5.415722071342227e-18], 'true': [-1.586032892321652e-17, 1.859907140665299e-05], 'true,false': [0.0, 4.440892098500626e-18], 'true,false,false': [4.440892098500626e-18, nan], 'false': [-5.415722071342227e-18, nan]}, {'': [0.013888182917730339, 1.738903532545426e-17], 'true': [-1.1895246692412391e-17, 7.5293143148639856e-06], 'true,false': [0.0, 2.135044278125301e-18], 'false': [1.738903532545426e-17, nan], 'true,false,false': [2.135044278125301e-18, nan]}, {'': [0.011714747965529501, -6.3441315692866086e-18], 'true': [-1.586032892321652e-17, 4.539696223810579e-06], 'true,false': [4.539696223810579e-06, nan], 'false': [-6.3441315692866086e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.14185106490048768;  // std dev = 4.59e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   else return -0.14185106490048766;  // std dev = 7.15e-08, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.12657611620922563;  // std dev = 0.022, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.1254446385283915;  // std dev = 0.000, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1271300368171203;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( actor(B) )
%   | | then return -0.1122036177491457;  // std dev = 1.83e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return 0.5553664367462837;  // std dev = 1.03e-07, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.11231637819360624;  // std dev = 6.14e-08, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583103;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.11367843045914103;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.10150338429667284;  // std dev = 2.58e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.10159632948783615;  // std dev = 5.67e-08, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.32071184716014955;  // std dev = 2.11e-08, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.29961685369866126;  // std dev = 0.114, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | else if ( female(B) )
%   | | then if ( female(A) )
%   | | | then return -0.09261344847976481;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.0955004168817183;  // std dev = 0.012, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.09261344847976478;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.09269127618926107;  // std dev = 1.49e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.25517224256948956;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.25920220759520896;  // std dev = 4.94e-08, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( actor(A) )
%   | | then return -0.08509278623112837;  // std dev = 0.000366, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else return -0.09432605334105133;  // std dev = 0.000201, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.08518475138839678;  // std dev = 3.49e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08672268426003246;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.2097577156325355;  // std dev = 2.98e-08, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.21260041567312007;  // std dev = 2.98e-08, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return -0.07868973739803359;  // std dev = 0.000471, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.07877675473109165;  // std dev = 4.15e-08, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17709649774527747;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.17917869225231411;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( genre(A, E) )
%   | | then return -0.07993641032482993;  // std dev = 0.000184, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.07316526189190979;  // std dev = 0.000433, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.07324622576333704;  // std dev = 0.000, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15274385809367083;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.15432158322282055;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( genre(A, E) )
%   | | then return -0.07440021032316237;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.06836167125151041;  // std dev = 0.000378, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.06842697784420267;  // std dev = 3.80e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13400703000801117;  // std dev = 7.45e-09, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.13523753392516003;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( actor(A) )
%   | | then return -0.06412747196877198;  // std dev = 0.000312, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return -0.0692498201123348;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.06419184008202625;  // std dev = 0.000, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */


Results
   AUC ROC   = 0.99889
   AUC PR    = 0.966568
   CLL	      = -0.079633
   Precision = 0.799401 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.809091


Total learning time: 1.943 seconds
Total inference time: 2.834 seconds
AUC ROC: 0.99889


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06413
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total scoring time: 1.59 seconds
Refined model CLL: -0.06413


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.99889
   AUC PR    = 0.966568
   CLL	      = -0.079633
   Precision = 0.799401 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.809091


Total learning time: 6.949 seconds
Total inference time: 2.834 seconds
AUC ROC: 0.99889
Total revision time: 6.949
Best scored revision CLL: -0.06413


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 04:00:17
{'AUC ROC': 0.99889, 'AUC PR': 0.966568, 'CLL': -0.079633, 'Precision': [0.799401, 0.5], 'Recall': 0.819018, 'F1': 0.809091, 'Learning time': 6.949, 'Inference time': 2.834, 'parameter': {'AUC ROC': 0.978388, 'AUC PR': 0.863056, 'CLL': -0.084216, 'Precision': [1.0, 0.5], 'Recall': 0.819018, 'F1': 0.900506, 'Learning time': 1.609, 'Inference time': 2.771}}


Starting fold 2

Target train facts examples: 208
Target train pos examples: 58
Target train neg examples: 3423

Target test facts examples: 870
Target test pos	 examples: 324
Target test neg examples: 10813

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
2;true,false,true;haswordauthor(J, C).;false;false
2;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
5;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
5;false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,true;haswordauthor(N, L).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordauthor(D, C).;true;true
8;true,true;author(E, D), venue(E, B).;false;true
8;true,true,false;haswordtitle(F, C).;false;false
8;true,false;haswordtitle(G, C).;true;true
8;true,false,true;title(H, G), venue(H, A).;false;false
8;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;true;false
9;false,true;haswordtitle(N, L).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 7.88e-08, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839152;  // std dev = 0.000, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( movie(E, A) )
%   | | then return 0.3432789543536124;  // std dev = 0.311, 85.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=58 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360622;  // std dev = 6.66e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46981143812652326;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.15135450418026417;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783615;  // std dev = 5.96e-08, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.3564713354171783;  // std dev = 2.98e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.13292144619043839;  // std dev = 2.79e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926105;  // std dev = 2.28e-09, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2794514796514259;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( movie(E, A) )
%   | | then return -0.11596711353196647;  // std dev = 0.045, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.08518475138839678;  // std dev = 3.61e-09, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07657161512109908;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.22677082474556032;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.10676116001666731;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109164;  // std dev = 4.47e-08, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18947787439704267;  // std dev = 7.88e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.07132987035107653;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09699917681580489;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16207298363479053;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.06674691862251221;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.08882877842266444;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420267;  // std dev = 3.80e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14124869433330547;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( movie(E, B) )
%   | | then return -0.08047543319338742;  // std dev = 0.026, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.977686
   AUC PR    = 0.861626
   CLL	      = -0.084098
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 1.484 seconds
Total inference time: 2.919 seconds
AUC ROC: 0.977686


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.068121
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.766 seconds
Parameter learned model CLL: -0.068121


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.0, 0, 58], 'true,false,false,true': [2.58e-08, 28, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.88e-08, 86, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [0.0, 33, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 74, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [2.63e-09, 3, 0], 'true,false,true': [0.311, 27, 58], 'true,false,false': [0.0, 0, 0], 'false,true': [6.66e-08, 82, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [0.0, 22, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.96e-08, 78, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [2.98e-08, 0, 58], 'true,false,false,true': [2.79e-08, 34, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.28e-09, 88, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, B)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [0.045, 28, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [3.61e-09, 86, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.0, 0, 58], 'true,false,false,true': [1.05e-08, 22, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.47e-08, 81, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [7.88e-08, 0, 58], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [0.0, 24, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 81, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [0.0, 26, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.8e-08, 84, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [0.026, 27, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 86, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.22699154147203596, 7.229359230117299e-17], 'true': [0.0, 0.2195781503515409], 'true,false': [-3.675221047035001e-16, 2.3790493384824782e-17], 'false': [7.229359230117299e-17, nan], 'true,false,false': [2.3790493384824782e-17, nan]}, {'': [0.16869568108049943, -2.700542492331462e-17], 'true': [-1.2250736823450003e-16, 9.25185853854297e-18], 'true,false': [0.0, -3.3643121958338078e-18], 'true,false,false': [-3.3643121958338078e-18, nan], 'false': [-2.700542492331462e-17, nan]}, {'': [0.10016691554454248, 5.415722071342227e-17], 'true': [2.3129646346357427e-18, 0.09662606706979147], 'true,false': [0.09662606706979147, nan], 'false': [5.415722071342227e-17, nan]}, {'': [0.07973821056884253, 4.554761126667309e-17], 'true': [-6.431636832311252e-16, 0.00026145250018504206], 'true,false': [-1.1564823173178713e-18, -2.0185873175002847e-17], 'false': [4.554761126667309e-17, nan], 'true,false,false': [-2.0185873175002847e-17, nan]}, {'': [0.05611330407972487, 5.046468293750712e-18], 'true': [0.0, 0.05580156440547841], 'true,false': [1.5313421029312504e-17, 2.2857532859929692e-17], 'true,false,false': [2.2857532859929692e-17, nan], 'false': [5.046468293750712e-18, nan]}, {'': [0.03435606260019779, 1.290957005378089e-17], 'true': [-1.0719394720518753e-16, 7.28887553182872e-05], 'true,false': [7.28887553182872e-05, nan], 'false': [1.290957005378089e-17, nan]}, {'': [0.022937706761945065, 2.4671622769447922e-17], 'true': [0.0, 0.02217918973134885], 'true,false': [-1.761043418370938e-16, 5.046468293750712e-18], 'false': [2.4671622769447922e-17, nan], 'true,false,false': [5.046468293750712e-18, nan]}, {'': [0.017313239101332117, -5.482582837655094e-18], 'true': [1.0719394720518753e-16, 4.6786742796216146e-05], 'true,false': [0.0, -5.782411586589357e-18], 'false': [-5.482582837655094e-18, nan], 'true,false,false': [-5.782411586589357e-18, nan]}, {'': [0.013750769668233478, 1.7182023000151233e-17], 'true': [-3.062684205862501e-17, 4.5224096925342114e-05], 'true,false': [-5.782411586589357e-19, -6.4051328343759035e-18], 'false': [1.7182023000151233e-17, nan], 'true,false,false': [-6.4051328343759035e-18, nan]}, {'': [0.010663669300626824, -1.0973134545713756e-17], 'true': [-3.828355257328126e-17, 2.5256100133363786e-05], 'true,false': [2.5256100133363786e-05, nan], 'false': [-1.0973134545713756e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.14185106490048766;  // std dev = 7.30e-08, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.1254446385283914;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then if ( female(B) )
%   | | | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.11231637819360636;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( female(A) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.5553664367462842;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else if ( female(A) )
%   | then if ( female(B) )
%   | | then return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.11231637819360636;  // std dev = 2.95e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( female(B) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.11231637819360636;  // std dev = 1.86e-09, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583103;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(A) )
%   | then return -0.10159632948783635;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else if ( female(B) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( actor(A), actor(B) )
%   | | | then return -0.10159632948783633;  // std dev = 1.49e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | | else return -0.10159632948783633;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.32071184716014967;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.09269127618926103;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.09269127618926107;  // std dev = 0.000, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.2551722425694892;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2551722425694892;  // std dev = 6.45e-09, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( female(A) )
%   | | then return -0.08518475138839687;  // std dev = 1.61e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( female(B) )
%   | | | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.08518475138839687;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( female(B) )
%   | then return -0.08518475138839682;  // std dev = 1.32e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( actor(B) )
%   | | then if ( female(A) )
%   | | | then return -0.08518475138839685;  // std dev = 9.13e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.08518475138839679;  // std dev = 2.24e-08, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08577154659631757;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253562;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.07877675473109176;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else if ( female(A) )
%   | then return -0.07877675473109176;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( female(B) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( actor(A) )
%   | | | then return -0.07877675473109179;  // std dev = 5.27e-09, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return -0.07877675473109177;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527733;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.07928039224098118;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( female(A) )
%   | | | then return -0.07324622576333704;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.07324622576333704;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1527438580936708;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.15274385809367083;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( genre(A, E) )
%   | | then return -0.07368295219576419;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( female(A) )
%   | | | then return -0.06842697784420272;  // std dev = 2.63e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.06842697784420276;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else if ( female(B) )
%   | then return -0.06842697784420276;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( female(A) )
%   | | then return -0.06842697784420272;  // std dev = 9.31e-10, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( actor(A) )
%   | | | then return -0.06842697784420272;  // std dev = 5.27e-09, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13400703000801117;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.1340070300080111;  // std dev = 2.63e-09, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( female(A) )
%   | | then if ( female(B) )
%   | | | then return -0.06419184008202618;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.06419184008202618;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( female(B) )
%   | | | then return -0.06419184008202618;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.06470487072332262;  // std dev = 0.006, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.06419184008202625;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */


Results
   AUC ROC   = 0.99881
   AUC PR    = 0.964909
   CLL	      = -0.078519
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 2.562 seconds
Total inference time: 3.233 seconds
AUC ROC: 0.99881


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064074
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.793 seconds
Refined model CLL: -0.064074


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.99881
   AUC PR    = 0.964909
   CLL	      = -0.078519
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 7.6049999999999995 seconds
Total inference time: 3.233 seconds
AUC ROC: 0.99881
Total revision time: 7.6049999999999995
Best scored revision CLL: -0.064074


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 04:00:32
{'AUC ROC': 0.99881, 'AUC PR': 0.964909, 'CLL': -0.078519, 'Precision': [1.0, 0.5], 'Recall': 0.817901, 'F1': 0.89983, 'Learning time': 7.6049999999999995, 'Inference time': 3.233, 'parameter': {'AUC ROC': 0.977686, 'AUC PR': 0.861626, 'CLL': -0.084098, 'Precision': [1.0, 0.5], 'Recall': 0.817901, 'F1': 0.89983, 'Learning time': 1.484, 'Inference time': 2.919}}


Starting fold 3

Target train facts examples: 341
Target train pos examples: 178
Target train neg examples: 3543

Target test facts examples: 737
Target test pos	 examples: 204
Target test neg examples: 10693

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
2;true,false,true;haswordauthor(J, C).;false;false
2;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
5;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
5;false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,true;haswordauthor(N, L).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordauthor(D, C).;true;true
8;true,true;author(E, D), venue(E, B).;false;true
8;true,true,false;haswordtitle(F, C).;false;false
8;true,false;haswordtitle(G, C).;true;true
8;true,false,true;title(H, G), venue(H, A).;false;false
8;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;true;false
9;false,true;haswordtitle(N, L).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995104;  // std dev = 7.54e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.3633035742747709;  // std dev = 4.924, 97.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048796;  // std dev = 0.000, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6940623430157872;  // std dev = 1.664, 133.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.28833470953757423;  // std dev = 5.046, 102.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839194;  // std dev = 0.000, 273.000 (wgt'ed) examples reached here.  /* #neg=273 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14462335515815783;  // std dev = 0.247, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( movie(E, A) )
%   | | then return 0.40001935733814675;  // std dev = 0.380, 238.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=178 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360685;  // std dev = 0.000, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.42799162033778815;  // std dev = 1.703, 136.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.09868524818332912;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.11631740023914053;  // std dev = 5.250, 112.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783659;  // std dev = 0.000, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1391289120333153;  // std dev = 0.357, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.35888145421412737;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.04810976383970145;  // std dev = 5.444, 124.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926043;  // std dev = 8.43e-09, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2651368571640329;  // std dev = 1.044, 133.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=129 */
%   | else if ( movie(E, A) )
%   | | then return 0.07557466328985821;  // std dev = 5.210, 122.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.08518475138839678;  // std dev = 5.89e-09, 278.000 (wgt'ed) examples reached here.  /* #neg=278 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13934074347158254;  // std dev = 0.375, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.230721702330137;  // std dev = 8.43e-08, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.11936687076063707;  // std dev = 4.975, 99.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109144;  // std dev = 4.71e-08, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16835865688492752;  // std dev = 1.200, 136.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.07491723079585878;  // std dev = 3.73e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.022122561135422335;  // std dev = 5.303, 115.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333692;  // std dev = 1.05e-07, 282.000 (wgt'ed) examples reached here.  /* #neg=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14977404468974173;  // std dev = 1.043, 134.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.06988764368584066;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.01678483103348976;  // std dev = 5.303, 115.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420278;  // std dev = 0.000, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.12251479520589899;  // std dev = 1.259, 136.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=129 */
%   | else if ( movie(E, B) )
%   | | then return 0.01678834746645356;  // std dev = 5.257, 122.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202612;  // std dev = 4.56e-09, 268.000 (wgt'ed) examples reached here.  /* #neg=268 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.993692
   AUC PR    = 0.961008
   CLL	      = -0.185822
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95098
   F1        = 0.974874


Total learning time: 1.987 seconds
Total inference time: 3.137 seconds
AUC ROC: 0.993692


Results scoring model
   AUC ROC   = 0.976419
   AUC PR    = 0.83578
   CLL	      = -0.160103
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total scoring time: 1.762 seconds
Parameter learned model CLL: -0.160103


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 17, 0], 'true,false,true': [7.54e-07, 0, 129], 'true,false,false,true': [4.924, 48, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 284, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.664, 4, 129], 'true,false,true': [0.0, 19, 0], 'true,false,false,true': [5.046, 53, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 273, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.247, 24, 0], 'true,false,true': [0.38, 60, 178], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 298, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.703, 7, 129], 'true,false,true': [0.0, 8, 0], 'true,false,false,true': [5.25, 63, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 261, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.357, 19, 0], 'true,false,true': [0.0, 0, 129], 'true,false,false,true': [5.444, 75, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.43e-09, 286, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, B)'}, {'true,true': [1.044, 4, 129], 'true,false,true': [5.21, 73, 49], 'true,false,false': [0.0, 0, 0], 'false,true': [5.89e-09, 278, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.375, 16, 0], 'true,false,true': [8.43e-08, 0, 129], 'true,false,false,true': [4.975, 50, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.71e-08, 272, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [1.2, 7, 129], 'true,false,true': [3.73e-09, 13, 0], 'true,false,false,true': [5.303, 66, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.05e-07, 282, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.043, 5, 129], 'true,false,true': [0.0, 15, 0], 'true,false,false,true': [5.303, 66, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 259, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [1.259, 7, 129], 'true,false,true': [5.257, 73, 49], 'true,false,false': [0.0, 0, 0], 'false,true': [4.56e-09, 268, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.19593896594354412, -1.2509555207044018e-17], 'true': [-3.2653618371328133e-18, 0.1672801315686487], 'true,false': [4.40646657835721e-15, 0.249973429694973], 'true,false,false': [0.249973429694973, nan], 'false': [-1.2509555207044018e-17, nan]}, {'': [0.1772060217419403, -7.1574817704772e-17], 'true': [0.020824548613940824, 0.2330828749471793], 'true,false': [0.0, 0.2496155324875046], 'true,false,false': [0.2496155324875046, nan], 'false': [-7.1574817704772e-17, nan]}, {'': [0.1559437751366286, -8.643347037350212e-17], 'true': [0.002534798989999564, 0.14424085341986206], 'true,false': [0.14424085341986206, nan], 'false': [-8.643347037350212e-17, nan]}, {'': [0.14681420894107827, -6.295517534272918e-17], 'true': [0.021333573661817873, 0.23256379308267325], 'true,false': [-1.734723475976807e-18, 0.24609375000000006], 'true,false,false': [0.24609375000000006, nan], 'false': [-6.295517534272918e-17, nan]}, {'': [0.13964131765838453, 7.142693585001007e-17], 'true': [0.00669002056687615, 0.1412780056602618], 'true,false': [-1.3770208057366282e-16, 0.23900884495317393], 'true,false,false': [0.23900884495317393, nan], 'false': [7.142693585001007e-17, nan]}, {'': [0.11970824015566174, 3.5143750419789125e-17], 'true': [0.008198892622957206, 0.22252975322223614], 'true,false': [0.22252975322223614, nan], 'false': [3.5143750419789125e-17, nan]}, {'': [0.11118973132885883, 8.163404592832034e-18], 'true': [0.008805169938012485, 0.11158786061759245], 'true,false': [5.508083222946513e-17, 0.2499744923987346], 'true,false,false': [0.2499744923987346, nan], 'false': [8.163404592832034e-18, nan]}, {'': [0.11847760695733808, 3.936961080231052e-17], 'true': [0.010586592318025808, 0.2205603397776288], 'true,false': [1.0675221390626506e-18, 0.2445368620037815], 'true,false,false': [0.2445368620037815, nan], 'false': [3.936961080231052e-17, nan]}, {'': [0.11613273655618479, -1.6288986461681835e-17], 'true': [0.008123059929793217, 0.217087839662079], 'true,false': [0.0, 0.24453686200378152], 'true,false,false': [0.24453686200378152, nan], 'false': [-1.6288986461681835e-17, nan]}, {'': [0.11604425275012253, 1.9884591485823698e-17], 'true': [0.011649499335815472, 0.2265264098024366], 'true,false': [0.2265264098024366, nan], 'false': [1.9884591485823698e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995104;  // std dev = 7.54e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995122;  // std dev = 1.69e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.1418510649004877;  // std dev = 4.08e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.14185106490048813;  // std dev = 0.000, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.7194734122109555;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.7194734122109547;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.12544463852839127;  // std dev = 4.59e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.12544463852839197;  // std dev = 0.000, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462833;  // std dev = 5.72e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.11231637819360632;  // std dev = 3.94e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   else return -0.11231637819360696;  // std dev = 0.000, 278.000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.4175135841583092;  // std dev = 3.77e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else return -0.10159632948783634;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.41751358415831047;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.10159632948783628;  // std dev = 2.79e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.10159632948783662;  // std dev = 0.000, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926103;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601498;  // std dev = 2.49e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32071184716014944;  // std dev = 2.98e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.09269127618926105;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.09269127618926046;  // std dev = 1.13e-07, 260.000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694887;  // std dev = 3.21e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.0851847513883968;  // std dev = 2.58e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   else return -0.08518475138839678;  // std dev = 1.03e-07, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253537;  // std dev = 2.21e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.209757715632536;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.07877675473109179;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.07877675473109141;  // std dev = 4.71e-08, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16775535134570294;  // std dev = 0.549, 134.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.17709649774527744;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.073246225763337;  // std dev = 9.19e-08, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14331498331762152;  // std dev = 0.573, 135.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1527438580936709;  // std dev = 4.47e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.0684269778442027;  // std dev = 1.49e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.0684269778442029;  // std dev = 0.000, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13559651834810127;  // std dev = 0.013, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.06688198759739392;  // std dev = 0.078, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   else return -0.06419184008202597;  // std dev = 1.08e-07, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063588
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 2.846 seconds
Total inference time: 2.83 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065989
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.769 seconds
Refined model CLL: -0.065989


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063588
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.364 seconds
Total inference time: 2.83 seconds
AUC ROC: 1.0
Total revision time: 8.364
Best scored revision CLL: -0.065989


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 04:00:47
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063588, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 8.364, 'Inference time': 2.83, 'parameter': {'AUC ROC': 0.993692, 'AUC PR': 0.961008, 'CLL': -0.185822, 'Precision': [1.0, 0.5], 'Recall': 0.95098, 'F1': 0.974874, 'Learning time': 1.987, 'Inference time': 3.137}}


Starting fold 4

Target train facts examples: 151
Target train pos examples: 45
Target train neg examples: 1891

Target test facts examples: 927
Target test pos	 examples: 337
Target test neg examples: 12345

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
2;true,false,true;haswordauthor(J, C).;false;false
2;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
5;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
5;false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,true;haswordauthor(N, L).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordauthor(D, C).;true;true
8;true,true;author(E, D), venue(E, B).;false;true
8;true,true,false;haswordtitle(F, C).;false;false
8;true,false;haswordtitle(G, C).;true;true
8;true,false,true;title(H, G), venue(H, A).;false;false
8;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;true;false
9;false,true;haswordtitle(N, L).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 6.14e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7007489670563585;  // std dev = 0.852, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839155;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then return 0.30211611757667806;  // std dev = 0.327, 73.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=45 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360628;  // std dev = 4.47e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4847512253379743;  // std dev = 1.26e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.14614281933551798;  // std dev = 2.11e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783621;  // std dev = 4.08e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.36684746143553126;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.1288323596882095;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.28646549435329943;  // std dev = 4.71e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( movie(E, A) )
%   | | then return -0.1144776482566946;  // std dev = 0.022, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.08518475138839679;  // std dev = 2.63e-09, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08350224811097022;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.2316392400319565;  // std dev = 4.71e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.10389913437558908;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.0787767547310917;  // std dev = 2.98e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19298692324540226;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.07733009665662366;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.0946160874320688;  // std dev = 1.29e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16469462649419753;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.07198979182658387;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.0868159066315542;  // std dev = 1.29e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420268;  // std dev = 1.67e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1432691240925026;  // std dev = 2.58e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( movie(E, B) )
%   | | then return -0.07946173776780918;  // std dev = 0.012, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.978805
   AUC PR    = 0.865091
   CLL	      = -0.08212
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total learning time: 1.282 seconds
Total inference time: 3.084 seconds
AUC ROC: 0.978805


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06917
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.598 seconds
Parameter learned model CLL: -0.06917


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [2.23e-07, 0, 45], 'true,false,false,true': [1.05e-08, 21, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.14e-08, 61, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.852, 1, 45], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 19, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 69, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.327, 28, 45], 'true,false,false': [0.0, 0, 0], 'false,true': [4.47e-08, 60, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.26e-07, 0, 45], 'true,false,true': [2.63e-09, 3, 0], 'true,false,false,true': [2.11e-08, 23, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.08e-08, 58, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.0, 0, 45], 'true,false,false,true': [0.0, 18, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 62, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, B)'}, {'true,true': [4.71e-08, 0, 45], 'true,false,true': [0.022, 39, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 76, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [4.71e-08, 0, 45], 'true,false,false,true': [0.0, 24, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.98e-08, 64, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 45], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [1.29e-08, 23, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 62, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 45], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [1.29e-08, 24, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.67e-08, 56, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [2.58e-08, 0, 45], 'true,false,true': [0.012, 18, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 64, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21694214876033094, 6.188128333976282e-17], 'true': [nan, 0.21694214876033094], 'true,false': [1.105288700071267e-15, 5.28677630773884e-18], 'false': [6.188128333976282e-17, nan], 'true,false,false': [5.28677630773884e-18, nan]}, {'': [0.1554527969668372, -3.539841527790354e-17], 'true': [0.015777218085636358, 1.2785614249388733e-05], 'true,false': [0.0, 0.0], 'true,false,false': [0.0, nan], 'false': [-3.539841527790354e-17, nan]}, {'': [0.10876437758551347, 3.3306690738754695e-17], 'true': [0.0, 0.10686933820913005], 'true,false': [0.10686933820913005, nan], 'false': [3.3306690738754695e-17, nan]}, {'': [0.09128413317222338, 2.871266442996095e-17], 'true': [3.552713678800501e-16, 0.00011679251524052351], 'true,false': [2.3129646346357427e-18, 1.9308226515220113e-17], 'false': [2.871266442996095e-17, nan], 'true,false,false': [1.9308226515220113e-17, nan]}, {'': [0.05249774430392551, 0.0], 'true': [-1.1564823173178713e-18, 0.05014254797331893], 'true,false': [-5.921189464667501e-17, 0.0], 'false': [0.0, nan], 'true,false,false': [0.0, nan]}, {'': [0.03998960499017046, 7.304098846218135e-18], 'true': [4.9343245538895844e-17, 1.249068441740627e-05], 'true,false': [1.249068441740627e-05, nan], 'false': [7.304098846218135e-18, nan]}, {'': [0.02589786243165909, 1.3877787807814457e-17], 'true': [0.0, 0.025539357436686207], 'true,false': [4.9343245538895844e-17, -2.3129646346357427e-18], 'false': [1.3877787807814457e-17, nan], 'true,false,false': [-2.3129646346357427e-18, nan]}, {'': [0.018943815881475267, -8.953411488912552e-19], 'true': [-2.960594732333751e-17, 3.0499375620010594e-05], 'true,false': [0.0, 7.240584943207542e-18], 'true,false,false': [7.240584943207542e-18, nan], 'false': [-8.953411488912552e-19, nan]}, {'': [0.014554742995542925, 4.956352788505163e-18], 'true': [-3.454027187722709e-17, 1.560807196759136e-05], 'true,false': [0.0, 6.938893903907228e-18], 'true,false,false': [6.938893903907228e-18, nan], 'false': [4.956352788505163e-18, nan]}, {'': [0.01012676843201913, -3.469446951953614e-18], 'true': [1.4802973661668754e-17, 8.663208468887789e-06], 'true,false': [8.663208468887789e-06, nan], 'false': [-3.469446951953614e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.14185106490048766;  // std dev = 5.77e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.12544463852839147;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( director(B) )
%   | | then return 0.5553664367462839;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( female(A) )
%   | | | then return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( actor(A) )
%   | then if ( actor(B) )
%   | | then if ( female(A) )
%   | | | then return -0.11231637819360639;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415831025;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783633;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else if ( female(B) )
%   | then return -0.10159632948783635;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( female(A) )
%   | | then return -0.10159632948783634;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.3207118471601497;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.3207118471601495;  // std dev = 2.11e-08, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( female(B) )
%   | | | then return -0.09269127618926098;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.09269127618926101;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.09269127618926105;  // std dev = 0.000, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694896;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( female(B) )
%   | | then if ( female(A) )
%   | | | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( female(A) )
%   | | | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.08518475138839683;  // std dev = 1.18e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( female(A) )
%   | then return -0.08518475138839686;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( female(B) )
%   | | then return -0.08518475138839685;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( actor(A) )
%   | | | then return -0.0851847513883968;  // std dev = 1.67e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return -0.08518475138839685;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.20975771563253562;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.20975771563253542;  // std dev = 4.94e-08, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else return -0.07877675473109176;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else if ( female(B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( female(A) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.07877675473109177;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527753;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.07877675473109177;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.07324622576333704;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15274385809367078;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.1527438580936709;  // std dev = 5.89e-09, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420274;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then if ( female(B) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.06842697784420272;  // std dev = 9.31e-10, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( actor(A) )
%   | | then if ( actor(B) )
%   | | | then return -0.06842697784420272;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.06842697784420271;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13400703000801095;  // std dev = 1.86e-09, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.11189401323291528;  // std dev = 0.129, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | else if ( actor(A) )
%   | | then return -0.06419184008202622;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06419184008202625;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */


Results
   AUC ROC   = 0.999064
   AUC PR    = 0.968999
   CLL	      = -0.079487
   Precision = 0.80814 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.816446


Total learning time: 2.368 seconds
Total inference time: 3.254 seconds
AUC ROC: 0.999064


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.066225
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total scoring time: 1.589 seconds
Refined model CLL: -0.066225


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999064
   AUC PR    = 0.968999
   CLL	      = -0.079487
   Precision = 0.80814 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.816446


Total learning time: 6.837 seconds
Total inference time: 3.254 seconds
AUC ROC: 0.999064
Total revision time: 6.837
Best scored revision CLL: -0.066225


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 04:01:01
{'AUC ROC': 0.999064, 'AUC PR': 0.968999, 'CLL': -0.079487, 'Precision': [0.80814, 0.5], 'Recall': 0.824926, 'F1': 0.816446, 'Learning time': 6.837, 'Inference time': 3.254, 'parameter': {'AUC ROC': 0.978805, 'AUC PR': 0.865091, 'CLL': -0.08212, 'Precision': [1.0, 0.5], 'Recall': 0.824926, 'F1': 0.904065, 'Learning time': 1.282, 'Inference time': 3.084}}


Starting fold 5

Target train facts examples: 163
Target train pos examples: 45
Target train neg examples: 2071

Target test facts examples: 915
Target test pos	 examples: 337
Target test neg examples: 12165

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
2;true,false,true;haswordauthor(J, C).;false;false
2;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
5;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
5;false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,true;haswordauthor(N, L).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordauthor(D, C).;true;true
8;true,true;author(E, D), venue(E, B).;false;true
8;true,true,false;haswordtitle(F, C).;false;false
8;true,false;haswordtitle(G, C).;true;true
8;true,false,true;title(H, G), venue(H, A).;false;false
8;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;true;false
9;false,true;haswordtitle(N, L).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995115;  // std dev = 2.38e-07, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.18072958026080266;  // std dev = 2.603, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 6.66e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109548;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.12040877291097303;  // std dev = 2.673, 35.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283916;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.30820823778317386;  // std dev = 0.396, 73.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=45 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360625;  // std dev = 5.27e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.47855551703820415;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.06097555260683706;  // std dev = 2.657, 34.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783616;  // std dev = 5.37e-08, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.36253320896803304;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06827944374198641;  // std dev = 2.622, 32.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.283550137248301;  // std dev = 3.65e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( movie(E, A) )
%   | | then return 0.013227963347493293;  // std dev = 2.701, 37.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.08518475138839679;  // std dev = 2.79e-09, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09380975255239353;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.22961799801733213;  // std dev = 3.65e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.009576579492041775;  // std dev = 2.739, 40.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109169;  // std dev = 3.16e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19153180735613348;  // std dev = 3.65e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.08613317577377616;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.07559309756236546;  // std dev = 2.582, 30.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16360866042811392;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.07959054136201989;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.05011603941871638;  // std dev = 2.603, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420268;  // std dev = 2.69e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1424329611876548;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( movie(E, B) )
%   | | then return 0.0010596503042973296;  // std dev = 2.674, 36.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.982257
   AUC PR    = 0.888508
   CLL	      = -0.132969
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.854599
   F1        = 0.9216


Total learning time: 1.413 seconds
Total inference time: 3.283 seconds
AUC ROC: 0.982257


Results scoring model
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.137039
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total scoring time: 1.457 seconds
Parameter learned model CLL: -0.137039


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [2.38e-07, 0, 35], 'true,false,false,true': [2.603, 21, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.66e-08, 65, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 35], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [2.673, 25, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 57, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.396, 28, 45], 'true,false,false': [0.0, 0, 0], 'false,true': [5.27e-08, 67, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 35], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [2.657, 24, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.37e-08, 72, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 35], 'true,false,false,true': [2.622, 22, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 66, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, B)'}, {'true,true': [3.65e-08, 0, 35], 'true,false,true': [2.701, 27, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [2.79e-09, 52, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [3.65e-08, 0, 35], 'true,false,false,true': [2.739, 30, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.16e-08, 66, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [3.65e-08, 0, 35], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.582, 20, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 63, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 35], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.603, 21, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.69e-08, 67, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 35], 'true,false,true': [2.674, 26, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 52, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.22053909556694173, 6.832141690000964e-17], 'true': [0.0, 0.21694214876033094], 'true,false': [1.6240976817373718e-15, 0.21852237252861612], 'true,false,false': [0.21852237252861612, nan], 'false': [6.832141690000964e-17, nan]}, {'': [0.19318994507027223, -3.895519384649672e-17], 'true': [-7.105427357601002e-16, 0.2000450568209336], 'true,false': [0.0, 0.204081632653061], 'true,false,false': [0.204081632653061, nan], 'false': [-3.895519384649672e-17, nan]}, {'': [0.1574348787021751, 4.142623226213271e-17], 'true': [0.0, 0.1572017782729016], 'true,false': [0.1572017782729016, nan], 'false': [4.142623226213271e-17, nan]}, {'': [0.14588589063135238, 4.0091387000352874e-17], 'true': [-3.0451831532575723e-16, 0.2076124567474049], 'true,false': [nan, 0.2076124567474049], 'true,false,false': [0.2076124567474049, nan], 'false': [4.0091387000352874e-17, nan]}, {'': [0.12390539114502583, -1.6821560979169039e-18], 'true': [0.0, 0.12421486116098719], 'true,false': [-1.0150610510858574e-16, 0.2148437500000002], 'true,false,false': [0.2148437500000002, nan], 'false': [-1.6821560979169039e-18, nan]}, {'': [0.11960577469716228, 7.472654973438553e-18], 'true': [3.8064789415719653e-17, 0.19722425127830542], 'true,false': [0.19722425127830542, nan], 'false': [7.472654973438553e-18, nan]}, {'': [0.11224315536482551, 1.5139404881252134e-17], 'true': [0.0, 0.11423994031535001], 'true,false': [3.8064789415719653e-17, 0.18749999999999972], 'true,false,false': [0.18749999999999972, nan], 'false': [1.5139404881252134e-17, nan]}, {'': [0.10419842115525316, -8.8112938462314e-19], 'true': [3.8064789415719653e-17, 0.20986587556891137], 'true,false': [0.0, 0.22222222222222238], 'true,false,false': [0.22222222222222238, nan], 'false': [-8.8112938462314e-19, nan]}, {'': [0.10376381276677552, 1.0770820388154504e-17], 'true': [-4.4408920985006264e-17, 0.2062364210439298], 'true,false': [0.0, 0.21852237252861595], 'true,false,false': [0.21852237252861595, nan], 'false': [1.0770820388154504e-17, nan]}, {'': [0.10568074743954899, -2.6688053476566264e-18], 'true': [-3.1720657846433043e-18, 0.1985734614338076], 'true,false': [0.1985734614338076, nan], 'false': [-2.6688053476566264e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995115;  // std dev = 2.38e-07, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( actor(B) )
%   | | | then return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.14185106490048766;  // std dev = 5.58e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109548;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.12544463852839158;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( director(B) )
%   | | then return 0.555366436746284;  // std dev = 1.79e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.11231637819360635;  // std dev = 1.67e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.11231637819360625;  // std dev = 5.27e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415831047;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( actor(B) )
%   | | then return -0.10288273533252874;  // std dev = 0.017, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return 0.4175135841583102;  // std dev = 2.11e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.10159632948783616;  // std dev = 5.37e-08, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10246062261551375;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601495;  // std dev = 2.98e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( actor(B) )
%   | | | then return -0.09258314663871056;  // std dev = 1.49e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return 0.3207118471601497;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.09269127618926107;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25517224256948956;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( actor(B) )
%   | | then return -0.08509297517644711;  // std dev = 5.27e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return 0.2551722425694894;  // std dev = 1.83e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.08518475138839679;  // std dev = 1.83e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08645314806491854;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253542;  // std dev = 5.37e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( actor(B) )
%   | | | then return -0.07869794243483243;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return 0.2097577156325357;  // std dev = 1.97e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07877675473109168;  // std dev = 3.49e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1770964977452775;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.07986481661796806;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.07317785209972795;  // std dev = 5.27e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return 0.17709649774527736;  // std dev = 7.45e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07324622576333704;  // std dev = 0.000, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15274385809367091;  // std dev = 1.97e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.127088335468564;  // std dev = 0.109, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return -0.07418928969329107;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.06836712578971736;  // std dev = 6.45e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return 0.15274385809367094;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06842697784420267;  // std dev = 3.25e-08, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13555264174794074;  // std dev = 0.009, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( actor(B) )
%   | | then return -0.06451775532345627;  // std dev = 0.007, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0.13400703000801117;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06419184008202625;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */


Results
   AUC ROC   = 0.99752
   AUC PR    = 0.885213
   CLL	      = -0.074719
   Precision = 0.873057 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.932227


Total learning time: 2.037 seconds
Total inference time: 3.082 seconds
AUC ROC: 0.99752


Results scoring model
   AUC ROC   = 0.999753
   AUC PR    = 0.984351
   CLL	      = -0.065201
   Precision = 0.978261 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.989011


Total scoring time: 1.553 seconds
Refined model CLL: -0.065201


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.99752
   AUC PR    = 0.885213
   CLL	      = -0.074719
   Precision = 0.873057 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.932227


Total learning time: 6.46 seconds
Total inference time: 3.082 seconds
AUC ROC: 0.99752
Total revision time: 6.46
Best scored revision CLL: -0.065201


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 04:01:14
{'AUC ROC': 0.99752, 'AUC PR': 0.885213, 'CLL': -0.074719, 'Precision': [0.873057, 0.5], 'Recall': 1.0, 'F1': 0.932227, 'Learning time': 6.46, 'Inference time': 3.082, 'parameter': {'AUC ROC': 0.982257, 'AUC PR': 0.888508, 'CLL': -0.132969, 'Precision': [1.0, 0.5], 'Recall': 0.854599, 'F1': 0.9216, 'Learning time': 1.413, 'Inference time': 3.283}}


Starting fold 1

Target train facts examples: 215
Target train pos examples: 56
Target train neg examples: 3308

Target test facts examples: 863
Target test pos	 examples: 326
Target test neg examples: 10928

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
2;true,false,true;haswordauthor(J, C).;false;false
2;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
5;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
5;false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,true;haswordauthor(N, L).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordauthor(D, C).;true;true
8;true,true;author(E, D), venue(E, B).;false;true
8;true,true,false;haswordtitle(F, C).;false;false
8;true,false;haswordtitle(G, C).;true;true
8;true,false,true;title(H, G), venue(H, A).;false;false
8;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;true;false
9;false,true;haswordtitle(N, L).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1418510649004877;  // std dev = 2.58e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 7.30e-08, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283915;  // std dev = 0.000, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.3436621295702206;  // std dev = 0.311, 82.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=56 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360626;  // std dev = 5.05e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46971599463403546;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.15140372820142864;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783615;  // std dev = 5.77e-08, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.35640533262329616;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.13295993989799598;  // std dev = 1.97e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.279406834863249;  // std dev = 7.30e-08, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( movie(E, A) )
%   | | then return -0.11587723674260024;  // std dev = 0.055, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.08518475138839679;  // std dev = 3.09e-09, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.22673977528424816;  // std dev = 7.88e-08, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.10679791230065144;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109161;  // std dev = 5.16e-08, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1894554479905335;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.0970297135193487;  // std dev = 1.18e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16205619767329812;  // std dev = 6.50e-08, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.07657797040718597;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.08885452381091122;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420267;  // std dev = 3.49e-08, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1412357375503026;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( movie(E, B) )
%   | | then return -0.0813140840186298;  // std dev = 0.015, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.978388
   AUC PR    = 0.863056
   CLL	      = -0.084265
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total learning time: 1.556 seconds
Total inference time: 2.899 seconds
AUC ROC: 0.978388


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.0685
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.985 seconds
Parameter learned model CLL: -0.0685


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 6, 0], 'true,false,true': [0.0, 0, 56], 'true,false,false,true': [2.58e-08, 29, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.3e-08, 76, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 56], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [5.27e-09, 10, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 77, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.311, 26, 56], 'true,false,false': [0.0, 0, 0], 'false,true': [5.05e-08, 65, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 56], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 27, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.77e-08, 76, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 56], 'true,false,false,true': [1.97e-08, 18, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 73, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, B)'}, {'true,true': [7.3e-08, 0, 56], 'true,false,true': [0.055, 40, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [3.09e-09, 81, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [7.88e-08, 0, 56], 'true,false,false,true': [0.0, 18, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.16e-08, 91, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 56], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.18e-08, 25, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 73, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [6.5e-08, 0, 56], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [0.0, 30, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.49e-08, 75, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 56], 'true,false,true': [0.015, 35, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 66, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2366863905325441, 7.011934892369409e-17], 'true': [-6.938893903907228e-18, 0.22477508650518999], 'true,false': [-1.2688263138573217e-16, 2.2970131543968756e-17], 'false': [7.011934892369409e-17, nan], 'true,false,false': [2.2970131543968756e-17, nan]}, {'': [0.10374821288421267, -2.5953265510717945e-17], 'true': [-1.9032394707859825e-16, 2.3129646346357427e-18], 'true,false': [0.0, 2.7755575615628915e-18], 'true,false,false': [2.7755575615628915e-18, nan], 'false': [-2.5953265510717945e-17, nan]}, {'': [0.09784440646617455, 3.928481471750554e-17], 'true': [0.0, 0.09653261407331609], 'true,false': [0.09653261407331609, nan], 'false': [3.928481471750554e-17, nan]}, {'': [0.08526917486633817, 4.382459307730881e-17], 'true': [-5.709718412357948e-16, 8.543492104413313e-05], 'true,false': [0.0, -4.11193712824132e-18], 'false': [4.382459307730881e-17, nan], 'true,false,false': [-4.11193712824132e-18, nan]}, {'': [0.04571357389762147, 0.0], 'true': [0.0, 0.044082212729992076], 'true,false': [-3.0134624954111393e-16, 2.1587669923266933e-17], 'true,false,false': [2.1587669923266933e-17, nan], 'false': [0.0, nan]}, {'': [0.038009133655567184, 1.0965165675310187e-17], 'true': [9.516197353929913e-17, 7.638070193659585e-05], 'true,false': [7.638070193659585e-05, nan], 'false': [1.0965165675310187e-17, nan]}, {'': [0.02047797080931305, 2.928060724286127e-17], 'true': [nan, 0.02047797080931305], 'true,false': [1.1102230246251565e-16, -3.0839528461809902e-18], 'false': [2.928060724286127e-17, nan], 'true,false,false': [-3.0839528461809902e-18, nan]}, {'': [0.017513069177180415, -5.3229871043671886e-18], 'true': [-3.9650822308041306e-17, 5.551115123125783e-18], 'true,false': [nan, 5.551115123125783e-18], 'true,false,false': [5.551115123125783e-18, nan], 'false': [-5.3229871043671886e-18, nan]}, {'': [0.014482621913621043, 1.628327102783563e-17], 'true': [7.533656238527848e-17, 8.830884578586197e-06], 'true,false': [0.0, -9.251858538542971e-19], 'false': [1.628327102783563e-17, nan], 'true,false,false': [-9.251858538542971e-19, nan]}, {'': [0.011725024761585474, -5.046468293750712e-18], 'true': [-2.7755575615628914e-17, 6.0347922061181654e-06], 'true,false': [6.0347922061181654e-06, nan], 'false': [-5.046468293750712e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.1418510649004877;  // std dev = 2.79e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.14185106490048766;  // std dev = 7.15e-08, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.12544463852839144;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360642;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else if ( female(A) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( female(A) )
%   | then return -0.11231637819360642;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else return -0.11231637819360636;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583103;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else if ( female(A) )
%   | then return -0.10159632948783635;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else if ( female(B) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601496;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.09269127618926105;  // std dev = 0.000, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694894;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( female(B) )
%   | | then if ( female(A) )
%   | | | then return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.08518475138839686;  // std dev = 2.08e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( actor(A) )
%   | then if ( actor(B) )
%   | | then if ( female(A) )
%   | | | then return -0.0851847513883968;  // std dev = 1.39e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.08518475138839679;  // std dev = 2.24e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.08518475138839685;  // std dev = 1.86e-09, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253562;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.07877675473109176;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else if ( female(B) )
%   | then return -0.07877675473109176;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return -0.07877675473109179;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17709649774527708;  // std dev = 2.63e-09, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.15895865607000273;  // std dev = 0.098, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | else if ( female(B) )
%   | | then if ( female(A) )
%   | | | then return -0.07324622576333704;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( female(A) )
%   | | | then return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.07324622576333704;  // std dev = 0.000, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15274385809367083;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.1551059465193223;  // std dev = 2.63e-09, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06842697784420276;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else if ( female(A) )
%   | then if ( female(B) )
%   | | then return -0.06842697784420274;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else return -0.06842697784420276;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( female(B) )
%   | | then return -0.06842697784420274;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else return -0.06842697784420276;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13400703000801087;  // std dev = 5.27e-09, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.1358483861594841;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( female(A) )
%   | | then if ( female(B) )
%   | | | then return -0.06419184008202618;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.06419184008202618;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( female(B) )
%   | | | then return -0.06419184008202618;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.06475652511698304;  // std dev = 0.006, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return -0.06419184008202626;  // std dev = 0.000, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */


Results
   AUC ROC   = 0.998813
   AUC PR    = 0.964914
   CLL	      = -0.078905
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total learning time: 2.397 seconds
Total inference time: 2.967 seconds
AUC ROC: 0.998813


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064024
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.722 seconds
Refined model CLL: -0.064024


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998813
   AUC PR    = 0.964914
   CLL	      = -0.078905
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total learning time: 7.66 seconds
Total inference time: 2.967 seconds
AUC ROC: 0.998813
Total revision time: 7.66
Best scored revision CLL: -0.064024


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 04:01:28
{'AUC ROC': 0.998813, 'AUC PR': 0.964914, 'CLL': -0.078905, 'Precision': [1.0, 0.5], 'Recall': 0.819018, 'F1': 0.900506, 'Learning time': 7.66, 'Inference time': 2.967, 'parameter': {'AUC ROC': 0.978388, 'AUC PR': 0.863056, 'CLL': -0.084265, 'Precision': [1.0, 0.5], 'Recall': 0.819018, 'F1': 0.900506, 'Learning time': 1.556, 'Inference time': 2.899}}


Starting fold 2

Target train facts examples: 208
Target train pos examples: 58
Target train neg examples: 3423

Target test facts examples: 870
Target test pos	 examples: 324
Target test neg examples: 10813

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
2;true,false,true;haswordauthor(J, C).;false;false
2;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
5;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
5;false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,true;haswordauthor(N, L).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordauthor(D, C).;true;true
8;true,true;author(E, D), venue(E, B).;false;true
8;true,true,false;haswordtitle(F, C).;false;false
8;true,false;haswordtitle(G, C).;true;true
8;true,false,true;title(H, G), venue(H, A).;false;false
8;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;true;false
9;false,true;haswordtitle(N, L).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 7.60e-08, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839136;  // std dev = 1.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283914;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.3379813342077145;  // std dev = 0.313, 86.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=58 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360621;  // std dev = 7.45e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.47113122316410005;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.1506753004489916;  // std dev = 2.36e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783616;  // std dev = 5.58e-08, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.3573843689687748;  // std dev = 5.96e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.1323900601095347;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926107;  // std dev = 1.86e-09, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2800690199717409;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( movie(E, A) )
%   | | then return -0.11574770475724393;  // std dev = 0.042, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.08518475138839682;  // std dev = 5.19e-09, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08340510256690015;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.22720022868068843;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.10639289174935436;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109161;  // std dev = 5.27e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18978796306217122;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.07724645075804074;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09669309923927964;  // std dev = 2.69e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16230504158525066;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.0719170549291393;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.08857065947455237;  // std dev = 5.27e-09, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420265;  // std dev = 4.83e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14142778913384846;  // std dev = 6.14e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( movie(E, B) )
%   | | then return -0.08167644879124872;  // std dev = 7.45e-09, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.977686
   AUC PR    = 0.861626
   CLL	      = -0.08442
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 1.418 seconds
Total inference time: 3.122 seconds
AUC ROC: 0.977686


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.068173
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 2.087 seconds
Parameter learned model CLL: -0.068173


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [0.0, 0, 58], 'true,false,false,true': [1.49e-08, 24, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.6e-08, 113, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.49e-08, 35, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 90, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.313, 28, 58], 'true,false,false': [0.0, 0, 0], 'false,true': [7.45e-08, 93, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.36e-08, 36, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.58e-08, 73, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [5.96e-08, 0, 58], 'true,false,false,true': [0.0, 25, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 89, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, B)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [0.042, 35, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [5.19e-09, 74, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 58], 'true,false,false,true': [0.0, 25, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.27e-08, 92, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [2.69e-08, 38, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 78, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [5.27e-09, 26, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.83e-08, 100, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [6.14e-08, 0, 58], 'true,false,true': [7.45e-09, 25, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 77, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2222222222222218, 5.1089909097794814e-17], 'true': [-2.7755575615628915e-18, 0.20701963117192101], 'true,false': [-3.675221047035001e-16, 9.25185853854297e-18], 'false': [5.1089909097794814e-17, nan], 'true,false,false': [9.25185853854297e-18, nan]}, {'': [0.16869568108049943, -1.7270135938613546e-17], 'true': [-1.2250736823450003e-16, 9.25185853854297e-18], 'true,false': [0.0, 6.3441315692866086e-18], 'true,false,false': [6.3441315692866086e-18, nan], 'false': [-1.7270135938613546e-17, nan]}, {'': [0.09788801438324427, 5.968940992608368e-17], 'true': [nan, 0.09788801438324427], 'true,false': [0.09788801438324427, nan], 'false': [5.968940992608368e-17, nan]}, {'': [0.09189506835613703, 4.258389683493751e-17], 'true': [-6.431636832311252e-16, 7.33665498579152e-05], 'true,false': [0.0, 1.5419764230904953e-17], 'false': [4.258389683493751e-17, nan], 'true,false,false': [1.5419764230904953e-17, nan]}, {'': [0.05153064233249437, 3.742324802107269e-18], 'true': [0.0, 0.050489844316958674], 'true,false': [6.125368411725002e-17, -4.440892098500626e-18], 'false': [3.742324802107269e-18, nan], 'true,false,false': [-4.440892098500626e-18, nan]}, {'': [0.036790855158275855, 2.700542492331462e-17], 'true': [0.0, 4.983739671660738e-05], 'true,false': [4.983739671660738e-05, nan], 'false': [2.700542492331462e-17, nan]}, {'': [0.02388649638045331, 3.0169103930031426e-17], 'true': [0.0, 0.02342318718209713], 'true,false': [-6.125368411725002e-17, -8.881784197001253e-18], 'false': [3.0169103930031426e-17, nan], 'true,false,false': [-8.881784197001253e-18, nan]}, {'': [0.01966580529250493, -6.4051328343759035e-18], 'true': [-1.0719394720518753e-16, 9.448087581746919e-06], 'true,false': [0.0, 1.8990657000167152e-17], 'true,false,false': [1.8990657000167152e-17, nan], 'false': [-6.4051328343759035e-18, nan]}, {'': [0.01357792738648118, 2.3314683517128286e-17], 'true': [-8.80521709185469e-17, 9.891503639547289e-06], 'true,false': [0.0, 1.0675221390626506e-18], 'false': [2.3314683517128286e-17, nan], 'true,false,false': [1.0675221390626506e-18, nan]}, {'': [0.010476771145478415, -1.0092936587501423e-17], 'true': [6.508203937457814e-17, 2.220446049250313e-18], 'true,false': [2.220446049250313e-18, nan], 'false': [-1.0092936587501423e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.14185106490048763;  // std dev = 8.16e-08, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.12544463852839144;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then if ( female(A) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5553664367462842;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else return -0.11231637819360642;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else if ( female(A) )
%   | then if ( female(B) )
%   | | then return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.11231637819360635;  // std dev = 3.48e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( female(B) )
%   | | then if ( actor(A) )
%   | | | then return -0.11231637819360635;  // std dev = 1.67e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.11231637819360636;  // std dev = 1.05e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.41751358415830986;  // std dev = 1.18e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.39811153322486603;  // std dev = 0.120, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.10159632948783634;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else if ( female(B) )
%   | then return -0.10159632948783635;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else if ( female(A) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783635;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.10159632948783633;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.3207118471601496;  // std dev = 2.11e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.32495331682164924;  // std dev = 6.66e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else if ( female(A) )
%   | then return -0.09269127618926104;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else if ( actor(B) )
%   | | then return -0.09269127618926107;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.25517224256948945;  // std dev = 3.73e-09, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2580643323485053;  // std dev = 1.05e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( female(A) )
%   | | then return -0.08518475138839687;  // std dev = 1.32e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( female(B) )
%   | | | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.08572093173131574;  // std dev = 0.007, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then if ( female(B) )
%   | | then return -0.08518475138839685;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.08518475138839687;  // std dev = 1.61e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839679;  // std dev = 2.28e-09, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08577154659631757;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.2097577156325356;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.21179857518779444;  // std dev = 4.94e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( female(B) )
%   | | | then return -0.07877675473109173;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.07875023040523492;  // std dev = 8.50e-05, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( female(A) )
%   | then return -0.07877675473109175;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( actor(B) )
%   | | then if ( actor(A) )
%   | | | then return -0.07877675473109175;  // std dev = 2.11e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | | else return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.07877675473109179;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17709649774527744;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.17859193027477546;  // std dev = 8.33e-09, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( genre(A, E) )
%   | | then return -0.07926082740972736;  // std dev = 3.91e-05, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( female(A) )
%   | | | then return -0.07324742611258907;  // std dev = 2.55e-06, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.07322073946584717;  // std dev = 6.64e-05, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.07324622576333704;  // std dev = 0.000, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1527438580936708;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.12142861547695147;  // std dev = 0.141, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( female(B) )
%   | | | then return -0.06842780193756992;  // std dev = 3.50e-06, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.06840477998762438;  // std dev = 5.56e-05, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( female(A) )
%   | then return -0.06842697784420275;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( female(B) )
%   | | then return -0.06842697784420272;  // std dev = 9.31e-10, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( actor(B) )
%   | | | then return -0.06842697784420271;  // std dev = 1.05e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | | else return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13400703000801117;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.13872299344437167;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( actor(A) )
%   | | then if ( female(A) )
%   | | | then return -0.06419337200779715;  // std dev = 4.44e-06, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.06417073697529466;  // std dev = 5.74e-05, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return -0.07364769900201584;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06419184008202626;  // std dev = 0.000, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */


Results
   AUC ROC   = 0.998889
   AUC PR    = 0.966587
   CLL	      = -0.080186
   Precision = 0.800604 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.80916


Total learning time: 2.964 seconds
Total inference time: 3.044 seconds
AUC ROC: 0.998889


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064486
   Precision = 0.935484 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.966667


Total scoring time: 1.904 seconds
Refined model CLL: -0.064486


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998889
   AUC PR    = 0.966587
   CLL	      = -0.080186
   Precision = 0.800604 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.80916


Total learning time: 8.373 seconds
Total inference time: 3.044 seconds
AUC ROC: 0.998889
Total revision time: 8.373
Best scored revision CLL: -0.064486


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 04:01:44
{'AUC ROC': 0.998889, 'AUC PR': 0.966587, 'CLL': -0.080186, 'Precision': [0.800604, 0.5], 'Recall': 0.817901, 'F1': 0.80916, 'Learning time': 8.373, 'Inference time': 3.044, 'parameter': {'AUC ROC': 0.977686, 'AUC PR': 0.861626, 'CLL': -0.08442, 'Precision': [1.0, 0.5], 'Recall': 0.817901, 'F1': 0.89983, 'Learning time': 1.418, 'Inference time': 3.122}}


Starting fold 3

Target train facts examples: 341
Target train pos examples: 178
Target train neg examples: 3543

Target test facts examples: 737
Target test pos	 examples: 204
Target test neg examples: 10693

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
2;true,false,true;haswordauthor(J, C).;false;false
2;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
5;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
5;false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,true;haswordauthor(N, L).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordauthor(D, C).;true;true
8;true,true;author(E, D), venue(E, B).;false;true
8;true,true,false;haswordtitle(F, C).;false;false
8;true,false;haswordtitle(G, C).;true;true
8;true,false,true;title(H, G), venue(H, A).;false;false
8;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;true;false
9;false,true;haswordtitle(N, L).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995104;  // std dev = 7.54e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.3685656017661798;  // std dev = 4.898, 96.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048807;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #neg=267 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6759849831287832;  // std dev = 2.177, 136.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.24462471324330634;  // std dev = 5.250, 112.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839186;  // std dev = 0.000, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13922871663219225;  // std dev = 0.228, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( movie(E, A) )
%   | | then return 0.4221531878622202;  // std dev = 0.370, 232.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=178 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360688;  // std dev = 0.000, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.42713906556682885;  // std dev = 1.696, 136.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.0991661221379137;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.14030778010229186;  // std dev = 5.154, 107.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1015963294878366;  // std dev = 0.000, 282.000 (wgt'ed) examples reached here.  /* #neg=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.18197518363509213;  // std dev = 0.316, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( genre(B, E) )
%   | | then return 0.3581446132302427;  // std dev = 1.19e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.1269351044693721;  // std dev = 5.068, 103.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926043;  // std dev = 8.64e-09, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25385638858486287;  // std dev = 1.338, 136.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=129 */
%   | else if ( movie(E, A) )
%   | | then return 0.11010727214627672;  // std dev = 4.928, 109.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.08518475138839678;  // std dev = 5.89e-09, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.17507949302399875;  // std dev = 0.428, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( genre(B, E) )
%   | | then return 0.23228969561194976;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.11691068350623383;  // std dev = 4.843, 94.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109143;  // std dev = 5.96e-08, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18001881122279886;  // std dev = 0.880, 133.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.07224946552094494;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.038343881732760314;  // std dev = 5.091, 104.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.0732462257633368;  // std dev = 1.17e-07, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15319734258561438;  // std dev = 0.898, 133.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.06755378272810965;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.028907860596922248;  // std dev = 5.091, 104.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420289;  // std dev = 0.000, 278.000 (wgt'ed) examples reached here.  /* #neg=278 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1292129148639137;  // std dev = 1.027, 134.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=129 */
%   | else if ( movie(E, B) )
%   | | then return -0.017247376464508718;  // std dev = 5.253, 125.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202604;  // std dev = 5.74e-09, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.993692
   AUC PR    = 0.961008
   CLL	      = -0.19791
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95098
   F1        = 0.974874


Total learning time: 2.036 seconds
Total inference time: 3.187 seconds
AUC ROC: 0.993692


Results scoring model
   AUC ROC   = 0.976419
   AUC PR    = 0.83578
   CLL	      = -0.166531
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total scoring time: 1.676 seconds
Parameter learned model CLL: -0.166531


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 13, 0], 'true,false,true': [7.54e-07, 0, 129], 'true,false,false,true': [4.898, 47, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 267, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.177, 7, 129], 'true,false,true': [7.45e-09, 15, 0], 'true,false,false,true': [5.25, 63, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 249, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.228, 24, 0], 'true,false,true': [0.37, 54, 178], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 257, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.696, 7, 129], 'true,false,true': [3.73e-09, 8, 0], 'true,false,false,true': [5.154, 58, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 282, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.316, 12, 0], 'true,false,true': [1.19e-07, 0, 129], 'true,false,false,true': [5.068, 54, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.64e-09, 290, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, B)'}, {'true,true': [1.338, 7, 129], 'true,false,true': [4.928, 60, 49], 'true,false,false': [0.0, 0, 0], 'false,true': [5.89e-09, 292, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.428, 18, 0], 'true,false,true': [0.0, 0, 129], 'true,false,false,true': [4.843, 45, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.96e-08, 253, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.88, 4, 129], 'true,false,true': [7.45e-09, 13, 0], 'true,false,false,true': [5.091, 55, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.17e-07, 253, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.898, 4, 129], 'true,false,true': [0.0, 11, 0], 'true,false,false,true': [5.091, 55, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 278, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [1.027, 5, 129], 'true,false,true': [5.253, 76, 49], 'true,false,false': [0.0, 0, 0], 'false,true': [5.74e-09, 283, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.18854600663795507, -6.653021870412923e-17], 'true': [-1.2810265668751807e-17, 0.16525432098766032], 'true,false': [4.40646657835721e-15, 0.24989149305555566], 'true,false,false': [0.24989149305555566, nan], 'false': [-6.653021870412923e-17, nan]}, {'': [0.1860681681210867, -6.420566889398495e-17], 'true': [0.03485291526578832, 0.23129243760945117], 'true,false': [3.7007434154171884e-18, 0.24609375000000133], 'true,false,false': [0.24609375000000133, nan], 'false': [-6.420566889398495e-17, nan]}, {'': [0.15083897892383635, -9.676652043425489e-17], 'true': [0.002172821880698938, 0.13667295754644734], 'true,false': [0.13667295754644734, nan], 'false': [-9.676652043425489e-17, nan]}, {'': [0.14183956324480895, -5.984180841951198e-17], 'true': [0.02113895100054887, 0.2346749077643524], 'true,false': [1.734723475976807e-18, 0.24823128657524637], 'true,false,false': [0.24823128657524637, nan], 'false': [-5.984180841951198e-17, nan]}, {'': [0.12719111871211322, 7.503576304363127e-17], 'true': [0.008339783587228899, 0.12392643819742123], 'true,false': [1.1016166445893026e-16, 0.2494108775567913], 'true,false,false': [0.2494108775567913, nan], 'false': [7.503576304363127e-17, nan]}, {'': [0.11154127890332727, 3.650048300137501e-17], 'true': [0.013163903434199565, 0.22281683980091543], 'true,false': [0.22281683980091543, nan], 'false': [3.650048300137501e-17, nan]}, {'': [0.10999052134212835, 1.4042346556523718e-17], 'true': [0.010165412156569582, 0.10843644125927579], 'true,false': [-2.2720843294654367e-16, 0.2495473064735178], 'true,false,false': [0.2495473064735178, nan], 'false': [1.4042346556523718e-17, nan]}, {'': [0.11321829082552282, 5.441409290652941e-17], 'true': [0.005821845733636376, 0.22269056623519454], 'true,false': [4.270088556250602e-18, 0.24916789940828504], 'true,false,false': [0.24916789940828504, nan], 'false': [5.441409290652941e-17, nan]}, {'': [0.11254512540894028, -3.6741193620688633e-17], 'true': [0.0060581989259883735, 0.22613934395154478], 'true,false': [-6.30808536718839e-19, 0.24916789940828302], 'true,false,false': [0.24916789940828302, nan], 'false': [-3.6741193620688633e-17, nan]}, {'': [0.11596405284428142, 3.2169006367230685e-17], 'true': [0.007865719884434871, 0.22074746319258434], 'true,false': [0.22074746319258434, nan], 'false': [3.2169006367230685e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995104;  // std dev = 7.54e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995122;  // std dev = 1.69e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.14185106490048768;  // std dev = 5.16e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.1418510649004881;  // std dev = 0.000, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( director(A) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.7194734122109555;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109547;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.12544463852839152;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.125444638528392;  // std dev = 0.000, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360636;  // std dev = 1.29e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5553664367462833;  // std dev = 5.84e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.11231637819360636;  // std dev = 1.83e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.11231637819360692;  // std dev = 0.000, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.4175135841583092;  // std dev = 3.77e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else return -0.10159632948783627;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(A, E) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.41751358415831047;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.10159632948783621;  // std dev = 3.65e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   else return -0.10159632948783662;  // std dev = 0.000, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926097;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601498;  // std dev = 2.49e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32071184716014944;  // std dev = 2.98e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.09269127618926107;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.09269127618926044;  // std dev = 1.21e-07, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694887;  // std dev = 3.29e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.0851847513883968;  // std dev = 2.58e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   else return -0.08518475138839678;  // std dev = 1.07e-07, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253537;  // std dev = 2.21e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.209757715632536;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.07877675473109175;  // std dev = 2.24e-08, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   else return -0.07877675473109143;  // std dev = 5.16e-08, 274.000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17140689039280962;  // std dev = 0.429, 132.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.17709649774527744;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.07324622576333681;  // std dev = 1.17e-07, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14284836271160076;  // std dev = 0.573, 135.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.1527438580936709;  // std dev = 4.47e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.0684269778442027;  // std dev = 1.97e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.06842697784420292;  // std dev = 0.000, 282.000 (wgt'ed) examples reached here.  /* #neg=282 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.135325277061586;  // std dev = 0.011, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.06649934115777088;  // std dev = 0.079, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   else return -0.06419184008202611;  // std dev = 7.88e-08, 271.000 (wgt'ed) examples reached here.  /* #neg=271 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063588
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.113 seconds
Total inference time: 2.757 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065987
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.625 seconds
Refined model CLL: -0.065987


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063588
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.45 seconds
Total inference time: 2.757 seconds
AUC ROC: 1.0
Total revision time: 8.45
Best scored revision CLL: -0.065987


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 04:01:59
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063588, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 8.45, 'Inference time': 2.757, 'parameter': {'AUC ROC': 0.993692, 'AUC PR': 0.961008, 'CLL': -0.19791, 'Precision': [1.0, 0.5], 'Recall': 0.95098, 'F1': 0.974874, 'Learning time': 2.036, 'Inference time': 3.187}}


Starting fold 4

Target train facts examples: 151
Target train pos examples: 45
Target train neg examples: 1891

Target test facts examples: 927
Target test pos	 examples: 337
Target test neg examples: 12345

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
2;true,false,true;haswordauthor(J, C).;false;false
2;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
5;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
5;false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,true;haswordauthor(N, L).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordauthor(D, C).;true;true
8;true,true;author(E, D), venue(E, B).;false;true
8;true,true,false;haswordtitle(F, C).;false;false
8;true,false;haswordtitle(G, C).;true;true
8;true,false,true;title(H, G), venue(H, A).;false;false
8;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;true;false
9;false,true;haswordtitle(N, L).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 5.77e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839158;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.3231289358976259;  // std dev = 0.318, 69.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=45 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360626;  // std dev = 5.16e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4748334640142392;  // std dev = 1.19e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.14878445062896983;  // std dev = 2.11e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783617;  // std dev = 5.77e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14386057665583554;  // std dev = 0.177, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.3599491747956632;  // std dev = 1.03e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.13090833948337605;  // std dev = 1.05e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.281803351632597;  // std dev = 8.94e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( movie(E, A) )
%   | | then return -0.1117983318260883;  // std dev = 0.074, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.08518475138839679;  // std dev = 2.28e-09, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.15786608381948575;  // std dev = 0.207, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.22840538038088876;  // std dev = 5.16e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.10567906464728698;  // std dev = 1.97e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109176;  // std dev = 1.49e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18013850561949898;  // std dev = 0.479, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.06328484208391454;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09609934545070807;  // std dev = 1.49e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1643953826017717;  // std dev = 4.71e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.05963540389341027;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.08806959685490055;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420268;  // std dev = 2.79e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.143038821939074;  // std dev = 5.37e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( movie(E, B) )
%   | | then return -0.08021202960724354;  // std dev = 0.024, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.978805
   AUC PR    = 0.865091
   CLL	      = -0.081474
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total learning time: 1.393 seconds
Total inference time: 3.311 seconds
AUC ROC: 0.978805


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.068951
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.615 seconds
Parameter learned model CLL: -0.068951


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [2.23e-07, 0, 45], 'true,false,false,true': [1.49e-08, 23, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.77e-08, 56, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 45], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [0.0, 30, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 68, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.318, 24, 45], 'true,false,false': [0.0, 0, 0], 'false,true': [5.16e-08, 66, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.19e-07, 0, 45], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [2.11e-08, 21, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.77e-08, 83, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.177, 4, 0], 'true,false,true': [1.03e-07, 0, 45], 'true,false,false,true': [1.05e-08, 19, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 67, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, B)'}, {'true,true': [8.94e-08, 0, 45], 'true,false,true': [0.074, 36, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [2.28e-09, 60, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.207, 3, 0], 'true,false,true': [5.16e-08, 0, 45], 'true,false,false,true': [1.97e-08, 24, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.49e-08, 55, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.479, 1, 45], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [1.49e-08, 28, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 60, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [4.71e-08, 0, 45], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [0.0, 31, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.79e-08, 68, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [5.37e-08, 0, 45], 'true,false,true': [0.024, 24, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 64, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2343750000000003, 5.947623346206196e-17], 'true': [0.0, 0.22383217993079618], 'true,false': [1.105288700071267e-15, 9.654113257610057e-18], 'false': [5.947623346206196e-17, nan], 'true,false,false': [9.654113257610057e-18, nan]}, {'': [0.1733844793303856, -3.591898020846095e-17], 'true': [-9.473903143468002e-16, -6.938893903907228e-18], 'true,false': [0.0, -7.401486830834377e-18], 'true,false,false': [-7.401486830834377e-18, nan], 'false': [-3.591898020846095e-17, nan]}, {'': [0.10235211919118678, 4.0371746350005693e-17], 'true': [0.0, 0.1011267315008071], 'true,false': [0.1011267315008071, nan], 'false': [4.0371746350005693e-17, nan]}, {'': [0.08664287995785419, 4.01285430587406e-17], 'true': [3.1579677144893343e-16, 0.00024354736621582987], 'true,false': [-1.1564823173178713e-18, 2.114710523095536e-17], 'false': [4.01285430587406e-17, nan], 'true,false,false': [2.114710523095536e-17, nan]}, {'': [0.054896688611536876, -1.6570492904853082e-18], 'true': [0.007854891930715775, 0.05029410154350327], 'true,false': [2.3684757858670006e-16, 5.843279076974508e-18], 'true,false,false': [5.843279076974508e-18, nan], 'false': [-1.6570492904853082e-18, nan]}, {'': [0.03831917681701622, 5.551115123125783e-18], 'true': [1.7763568394002506e-16, 0.0001502116041135266], 'true,false': [0.0001502116041135266, nan], 'false': [5.551115123125783e-18, nan]}, {'': [0.02777173510195328, 4.037174635000569e-18], 'true': [0.014298204539907475, 0.02531850655798517], 'true,false': [5.921189464667501e-17, 1.61907524424502e-17], 'true,false,false': [1.61907524424502e-17, nan], 'false': [4.037174635000569e-18, nan]}, {'': [0.020983972460734218, 0.0], 'true': [0.0049793490051807015, 6.70003681641366e-05], 'true,false': [0.0, 7.93016446160826e-18], 'true,false,false': [7.93016446160826e-18, nan], 'false': [0.0, nan]}, {'': [0.015261291667645685, 1.1428766429964846e-17], 'true': [4.9343245538895844e-17, 0.00010984778616730918], 'true,false': [0.0, -8.058070340021298e-18], 'false': [1.1428766429964846e-17, nan], 'true,false,false': [-8.058070340021298e-18, nan]}, {'': [0.01131466494454051, -3.469446951953614e-18], 'true': [6.41462192005646e-17, 2.4699074582576936e-05], 'true,false': [2.4699074582576936e-05, nan], 'false': [-3.469446951953614e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.14185106490048766;  // std dev = 7.88e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.1254446385283916;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then if ( female(B) )
%   | | | then return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.11231637819360636;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return 0.5553664367462839;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else if ( female(A) )
%   | then if ( female(B) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.11231637819360636;  // std dev = 2.95e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return -0.11231637819360636;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415831025;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else if ( female(A) )
%   | then return -0.10159632948783633;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( female(B) )
%   | | then return -0.10159632948783627;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.10159632948783634;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.3207118471601497;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.3207118471601495;  // std dev = 2.11e-08, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else return -0.092691276189261;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.09269127618926104;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694896;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( female(A) )
%   | | then if ( female(B) )
%   | | | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( female(B) )
%   | | | then return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.08518475138839683;  // std dev = 1.18e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( female(B) )
%   | then return -0.08518475138839685;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( female(A) )
%   | | then return -0.08518475138839685;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( actor(A) )
%   | | | then return -0.0851847513883968;  // std dev = 1.67e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.08518475138839683;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.20975771563253562;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.20975771563253542;  // std dev = 4.94e-08, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else return -0.07877675473109176;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( female(B) )
%   | then return -0.07877675473109172;  // std dev = 9.31e-10, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return -0.07877675473109177;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527753;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( female(B) )
%   | | | then return -0.07324622576333704;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.07324622576333704;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15274385809367078;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.1527438580936709;  // std dev = 5.89e-09, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.06842697784420276;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else if ( actor(A) )
%   | then if ( actor(B) )
%   | | then if ( female(A) )
%   | | | then return -0.06842697784420271;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.06842697784420271;  // std dev = 7.45e-09, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else return -0.06842697784420271;  // std dev = 1.32e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return -0.06842697784420271;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13400703000801095;  // std dev = 1.86e-09, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.13400703000801115;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else return -0.06419184008202622;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.06419184008202625;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */


Results
   AUC ROC   = 0.998709
   AUC PR    = 0.960275
   CLL	      = -0.076309
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total learning time: 2.451 seconds
Total inference time: 2.919 seconds
AUC ROC: 0.998709


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064803
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.478 seconds
Refined model CLL: -0.064803


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998709
   AUC PR    = 0.960275
   CLL	      = -0.076309
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total learning time: 6.936999999999999 seconds
Total inference time: 2.919 seconds
AUC ROC: 0.998709
Total revision time: 6.936999999999999
Best scored revision CLL: -0.064803


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 04:02:13
{'AUC ROC': 0.998709, 'AUC PR': 0.960275, 'CLL': -0.076309, 'Precision': [1.0, 0.5], 'Recall': 0.824926, 'F1': 0.904065, 'Learning time': 6.936999999999999, 'Inference time': 2.919, 'parameter': {'AUC ROC': 0.978805, 'AUC PR': 0.865091, 'CLL': -0.081474, 'Precision': [1.0, 0.5], 'Recall': 0.824926, 'F1': 0.904065, 'Learning time': 1.393, 'Inference time': 3.311}}


Starting fold 5

Target train facts examples: 163
Target train pos examples: 45
Target train neg examples: 2071

Target test facts examples: 915
Target test pos	 examples: 337
Target test neg examples: 12165

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
2;true,false,true;haswordauthor(J, C).;false;false
2;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
5;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
5;false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,true;haswordauthor(N, L).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordauthor(D, C).;true;true
8;true,true;author(E, D), venue(E, B).;false;true
8;true,true,false;haswordtitle(F, C).;false;false
8;true,false;haswordtitle(G, C).;true;true
8;true,false,true;title(H, G), venue(H, A).;false;false
8;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;true;false
9;false,true;haswordtitle(N, L).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995115;  // std dev = 2.38e-07, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.15226658215833588;  // std dev = 2.657, 34.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 5.77e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109548;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.13270212707734708;  // std dev = 2.657, 34.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283916;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.3533075522135926;  // std dev = 0.384, 67.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=45 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360628;  // std dev = 4.21e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4673142051809266;  // std dev = 4.21e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.08422643117679339;  // std dev = 2.603, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783617;  // std dev = 4.47e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.35474551761170386;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.049050382919981546;  // std dev = 2.640, 33.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2782839824119734;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( movie(E, A) )
%   | | then return 0.030961485138017508;  // std dev = 2.648, 35.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.08518475138839679;  // std dev = 2.08e-09, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.115440532368074;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.2259585928555792;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.00627820642415467;  // std dev = 2.714, 38.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109173;  // std dev = 2.36e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18889101843999193;  // std dev = 2.11e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.011791831108919326;  // std dev = 2.727, 39.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16163359663086654;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.10416549579970129;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.01982024230552169;  // std dev = 2.673, 35.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420268;  // std dev = 2.47e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1409094538187735;  // std dev = 2.79e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( movie(E, B) )
%   | | then return 0.0025846411058240907;  // std dev = 2.691, 38.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.982257
   AUC PR    = 0.888508
   CLL	      = -0.130209
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.854599
   F1        = 0.9216


Total learning time: 1.382 seconds
Total inference time: 3.224 seconds
AUC ROC: 0.982257


Results scoring model
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.133416
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total scoring time: 1.522 seconds
Parameter learned model CLL: -0.133416


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [2.38e-07, 0, 35], 'true,false,false,true': [2.657, 24, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.77e-08, 56, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 35], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.657, 24, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 65, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.384, 22, 45], 'true,false,false': [0.0, 0, 0], 'false,true': [4.21e-08, 58, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [4.21e-08, 0, 35], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [2.603, 21, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.47e-08, 66, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 35], 'true,false,false,true': [2.64, 23, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 75, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, B)'}, {'true,true': [0.0, 0, 35], 'true,false,true': [2.648, 25, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [2.08e-09, 63, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 35], 'true,false,false,true': [2.714, 28, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.36e-08, 60, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [2.11e-08, 0, 35], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [2.727, 29, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 62, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 35], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [2.673, 25, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.47e-08, 65, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [2.79e-08, 0, 35], 'true,false,true': [2.691, 28, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 72, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2268431001890362, 5.947623346206196e-17], 'true': [nan, 0.2268431001890362], 'true,false': [1.6240976817373718e-15, 0.20761245674740494], 'true,false,false': [0.20761245674740494, nan], 'false': [5.947623346206196e-17, nan]}, {'': [0.19201577211719512, -3.75767792950053e-17], 'true': [-7.105427357601002e-16, 0.20003352624547702], 'true,false': [0.0, 0.20761245674740472], 'true,false,false': [0.20761245674740472, nan], 'false': [-3.75767792950053e-17, nan]}, {'': [0.14726733869384662, 3.062684205862501e-17], 'true': [nan, 0.14726733869384662], 'true,false': [0.14726733869384662, nan], 'false': [3.062684205862501e-17, nan]}, {'': [0.13919359444565263, 3.027880976250427e-17], 'true': [5.075305255429287e-17, 0.21852237252861614], 'true,false': [nan, 0.21852237252861614], 'true,false,false': [0.21852237252861614, nan], 'false': [3.027880976250427e-17, nan]}, {'': [0.12529864509906644, 0.0], 'true': [0.0, 0.12583771284528214], 'true,false': [-1.7763568394002506e-16, 0.21120293847566557], 'true,false,false': [0.21120293847566557, nan], 'false': [0.0, nan]}, {'': [0.1154812811367341, 5.28677630773884e-18], 'true': [0.0, 0.2003783534445554], 'true,false': [0.2003783534445554, nan], 'false': [5.28677630773884e-18, nan]}, {'': [0.112609438205373, 9.25185853854297e-18], 'true': [0.0, 0.11439798554923994], 'true,false': [-6.3441315692866086e-18, 0.193905817174515], 'true,false,false': [0.193905817174515, nan], 'false': [9.25185853854297e-18, nan]}, {'': [0.11052408374490547, -8.953411488912552e-19], 'true': [1.2688263138573217e-17, 0.19066403681788302], 'true,false': [nan, 0.19066403681788302], 'true,false,false': [0.19066403681788302, nan], 'false': [-8.953411488912552e-19, nan]}, {'': [0.1032232403445433, 9.394194823751325e-18], 'true': [-5.709718412357947e-17, 0.1845651370328195], 'true,false': [0.0, 0.20408163265306148], 'true,false,false': [0.20408163265306148, nan], 'false': [9.394194823751325e-18, nan]}, {'': [0.10398439083481008, -6.938893903907228e-18], 'true': [2.2204460492503132e-17, 0.19058577007521496], 'true,false': [0.19058577007521496, nan], 'false': [-6.938893903907228e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995115;  // std dev = 2.38e-07, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( actor(B) )
%   | | then return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.14185106490048766;  // std dev = 6.32e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109548;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.12544463852839158;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11433611055280408;  // std dev = 0.024, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else return 0.555366436746284;  // std dev = 1.79e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.11231637819360626;  // std dev = 4.83e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415831047;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( actor(B) )
%   | | then return -0.10184129072471125;  // std dev = 0.012, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else return 0.4175135841583102;  // std dev = 2.11e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.10159632948783623;  // std dev = 3.80e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1035833729580875;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601495;  // std dev = 2.98e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( actor(B) )
%   | | | then return -0.09250099196087072;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0.3207118471601497;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.09269127618926107;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.2551722425694894;  // std dev = 2.11e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.20719918612810526;  // std dev = 0.204, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else if ( actor(B) )
%   | | then return -0.0850232352151657;  // std dev = 7.45e-09, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return 0.2551722425694894;  // std dev = 1.83e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.08518475138839679;  // std dev = 2.79e-08, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0873336065456104;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.21390424867449934;  // std dev = 0.024, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( actor(B) )
%   | | | then return -0.07863804600939318;  // std dev = 1.18e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return 0.2097577156325357;  // std dev = 1.97e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07877675473109169;  // std dev = 3.33e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1801347256207023;  // std dev = 0.021, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( actor(B) )
%   | | then return -0.07339348803040083;  // std dev = 0.007, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else return 0.17709649774527736;  // std dev = 7.45e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07324622576333704;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15504666056321836;  // std dev = 0.019, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.07534367354137902;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.06830459726827874;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 0.15274385809367094;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06842697784420267;  // std dev = 3.65e-08, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13580353241215914;  // std dev = 0.017, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( actor(B) )
%   | | then return -0.064408900942159;  // std dev = 0.006, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else return 0.13400703000801117;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06419184008202625;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */


Results
   AUC ROC   = 0.99752
   AUC PR    = 0.885213
   CLL	      = -0.080124
   Precision = 0.742291 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.852086


Total learning time: 1.925 seconds
Total inference time: 2.728 seconds
AUC ROC: 0.99752


Results scoring model
   AUC ROC   = 0.999753
   AUC PR    = 0.984351
   CLL	      = -0.066144
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total scoring time: 1.289 seconds
Refined model CLL: -0.066144


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.99752
   AUC PR    = 0.885213
   CLL	      = -0.080124
   Precision = 0.742291 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.852086


Total learning time: 6.117999999999999 seconds
Total inference time: 2.728 seconds
AUC ROC: 0.99752
Total revision time: 6.117999999999999
Best scored revision CLL: -0.066144


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 04:02:25
{'AUC ROC': 0.99752, 'AUC PR': 0.885213, 'CLL': -0.080124, 'Precision': [0.742291, 0.5], 'Recall': 1.0, 'F1': 0.852086, 'Learning time': 6.117999999999999, 'Inference time': 2.728, 'parameter': {'AUC ROC': 0.982257, 'AUC PR': 0.888508, 'CLL': -0.130209, 'Precision': [1.0, 0.5], 'Recall': 0.854599, 'F1': 0.9216, 'Learning time': 1.382, 'Inference time': 3.224}}


Starting fold 1

Target train facts examples: 215
Target train pos examples: 56
Target train neg examples: 3308

Target test facts examples: 863
Target test pos	 examples: 326
Target test neg examples: 10928

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
2;true,false,true;haswordauthor(J, C).;false;false
2;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
5;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
5;false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,true;haswordauthor(N, L).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordauthor(D, C).;true;true
8;true,true;author(E, D), venue(E, B).;false;true
8;true,true,false;haswordtitle(F, C).;false;false
8;true,false;haswordtitle(G, C).;true;true
8;true,false,true;title(H, G), venue(H, A).;false;false
8;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;true;false
9;false,true;haswordtitle(N, L).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1418510649004877;  // std dev = 2.98e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 7.30e-08, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839136;  // std dev = 1.05e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283915;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.27314998919437083;  // std dev = 0.330, 97.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=56 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360625;  // std dev = 5.67e-08, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4873096418889905;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.14256519853339403;  // std dev = 2.58e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783616;  // std dev = 5.37e-08, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3686338756678719;  // std dev = 1.43e-07, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.12600964232565381;  // std dev = 7.45e-09, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2876723449180697;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( movie(E, A) )
%   | | then return -0.1127733366454988;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.08518475138839679;  // std dev = 3.23e-09, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.23247502870529543;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.10197283247052784;  // std dev = 9.13e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109166;  // std dev = 3.87e-08, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19358790024829747;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.07679774759871852;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09300643050840357;  // std dev = 9.13e-09, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1651426635318087;  // std dev = 4.21e-08, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.07152670306885527;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.08545215510010189;  // std dev = 2.58e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420265;  // std dev = 4.01e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1436137875633341;  // std dev = 5.58e-08, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( movie(E, B) )
%   | | then return -0.07867058230611504;  // std dev = 0.012, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.978388
   AUC PR    = 0.863056
   CLL	      = -0.083886
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total learning time: 1.496 seconds
Total inference time: 2.803 seconds
AUC ROC: 0.978388


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.067759
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.683 seconds
Parameter learned model CLL: -0.067759


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 56], 'true,false,false,true': [2.98e-08, 32, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.3e-08, 76, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 56], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [1.05e-08, 34, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 75, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.33, 41, 56], 'true,false,false': [0.0, 0, 0], 'false,true': [5.67e-08, 71, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 56], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.58e-08, 27, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.37e-08, 72, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [1.43e-07, 0, 56], 'true,false,false,true': [7.45e-09, 31, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 73, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, B)'}, {'true,true': [0.0, 0, 56], 'true,false,true': [0.0, 31, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [3.23e-09, 82, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 56], 'true,false,false,true': [9.13e-09, 19, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.87e-08, 73, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 56], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [9.13e-09, 25, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 84, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [4.21e-08, 0, 56], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [2.58e-08, 36, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.01e-08, 87, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [5.58e-08, 0, 56], 'true,false,true': [0.012, 36, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 75, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2350617283950614, 7.011934892369409e-17], 'true': [0.0, 0.23140495867768565], 'true,false': [-1.2688263138573217e-16, 2.7755575615628914e-17], 'false': [7.011934892369409e-17, nan], 'true,false,false': [2.7755575615628914e-17, nan]}, {'': [0.17102241343829921, -2.6645352591003756e-17], 'true': [-1.9032394707859825e-16, 1.200241107702872e-17], 'true,false': [0.0, 3.2653618371328133e-18], 'true,false,false': [3.2653618371328133e-18, nan], 'false': [-2.6645352591003756e-17, nan]}, {'': [0.1091755938039319, 4.5347137625534564e-17], 'true': [0.0, 0.10878494885497532], 'true,false': [0.10878494885497532, nan], 'false': [4.5347137625534564e-17, nan]}, {'': [0.08841629939171247, 4.0091387000352874e-17], 'true': [-9.833403932394244e-16, 0.0001077719434805119], 'true,false': [0.0, 2.4671622769447922e-17], 'false': [4.0091387000352874e-17, nan], 'true,false,false': [2.4671622769447922e-17, nan]}, {'': [0.0563924767632579, 0.0], 'true': [0.0, 0.0561171827684332], 'true,false': [3.6478756523398e-16, 1.7906822977825105e-18], 'true,false,false': [1.7906822977825105e-18, nan], 'false': [0.0, nan]}, {'': [0.03677887533105192, 1.0831444142684454e-17], 'true': [-1.427429603089487e-16, -2.686023446673766e-17], 'false': [1.0831444142684454e-17, nan], 'true,false': [-2.686023446673766e-17, nan]}, {'': [0.021158065003229917, 2.0531521688273442e-17], 'true': [nan, 0.021158065003229917], 'true,false': [-7.93016446160826e-18, 4.382459307730881e-18], 'false': [2.0531521688273442e-17, nan], 'true,false,false': [4.382459307730881e-18, nan]}, {'': [0.017882437407406263, -5.9476233462061954e-18], 'true': [-7.93016446160826e-18, 1.8019300525844727e-05], 'true,false': [0.0, 3.3306690738754695e-18], 'true,false,false': [3.3306690738754695e-18, nan], 'false': [-5.9476233462061954e-18, nan]}, {'': [0.01510145289048419, 1.850371707708594e-17], 'true': [3.172065784643304e-17, 1.7452639284729064e-05], 'true,false': [0.0, 1.850371707708594e-17], 'false': [1.850371707708594e-17, nan], 'true,false,false': [1.850371707708594e-17, nan]}, {'': [0.011770358482776862, -7.401486830834377e-18], 'true': [5.551115123125783e-17, 3.945218688119108e-06], 'true,false': [3.945218688119108e-06, nan], 'false': [-7.401486830834377e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.1418510649004877;  // std dev = 2.98e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.14185106490048766;  // std dev = 7.88e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.12544463852839144;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( director(B) )
%   | | then if ( female(A) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return -0.1123163781936064;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else if ( female(B) )
%   | then return -0.11231637819360638;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else if ( actor(A) )
%   | | then return -0.1123163781936064;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583103;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( female(A) )
%   | | | then return -0.10159632948783634;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return -0.10159632948783635;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(A) )
%   | then if ( female(B) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else if ( female(B) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601496;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else return -0.09269127618926105;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694894;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( female(A) )
%   | | then if ( female(B) )
%   | | | then return -0.08518475138839685;  // std dev = 1.18e-08, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.08518475138839687;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( female(B) )
%   | | | then return -0.08518475138839687;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.0861501383354227;  // std dev = 0.016, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( actor(A) )
%   | then if ( female(B) )
%   | | then return -0.0851847513883968;  // std dev = 2.79e-09, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else if ( female(A) )
%   | | | then return -0.08518475138839683;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.08518475138839682;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return -0.08518475138839683;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253562;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( actor(A) )
%   | | then if ( female(B) )
%   | | | then return -0.07877675473109175;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return -0.07872073025778523;  // std dev = 0.000125, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else return -0.09405332444152174;  // std dev = 6.72e-05, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( female(B) )
%   | then return -0.07877675473109176;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( female(A) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return -0.07877675473109175;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17709649774527708;  // std dev = 2.63e-09, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.1770964977452775;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( female(B) )
%   | | | then return -0.07324622576333704;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.07319907836751305;  // std dev = 8.17e-05, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.07324622576333704;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15274385809367083;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.13428011211505514;  // std dev = 0.099, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | else if ( genre(A, E) )
%   | | then return -0.08631411788373404;  // std dev = 6.22e-05, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( female(B) )
%   | | | then return -0.06842697784420275;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return -0.06837927405938231;  // std dev = 8.17e-05, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( female(A) )
%   | then return -0.06842697784420275;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else if ( female(B) )
%   | | then return -0.06842697784420275;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else return -0.06842697784420274;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13400703000801087;  // std dev = 5.27e-09, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.13616424829578744;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( female(B) )
%   | | then if ( female(A) )
%   | | | then return -0.06419184008202618;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.06419184008202618;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.06414614958323303;  // std dev = 1.33e-05, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.06419184008202626;  // std dev = 0.000, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */


Results
   AUC ROC   = 0.99889
   AUC PR    = 0.966568
   CLL	      = -0.079071
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total learning time: 2.895 seconds
Total inference time: 3.681 seconds
AUC ROC: 0.99889


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064203
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.746 seconds
Refined model CLL: -0.064203


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.99889
   AUC PR    = 0.966568
   CLL	      = -0.079071
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total learning time: 7.82 seconds
Total inference time: 3.681 seconds
AUC ROC: 0.99889
Total revision time: 7.82
Best scored revision CLL: -0.064203


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 04:02:41
{'AUC ROC': 0.99889, 'AUC PR': 0.966568, 'CLL': -0.079071, 'Precision': [1.0, 0.5], 'Recall': 0.819018, 'F1': 0.900506, 'Learning time': 7.82, 'Inference time': 3.681, 'parameter': {'AUC ROC': 0.978388, 'AUC PR': 0.863056, 'CLL': -0.083886, 'Precision': [1.0, 0.5], 'Recall': 0.819018, 'F1': 0.900506, 'Learning time': 1.496, 'Inference time': 2.803}}


Starting fold 2

Target train facts examples: 208
Target train pos examples: 58
Target train neg examples: 3423

Target test facts examples: 870
Target test pos	 examples: 324
Target test neg examples: 10813

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
2;true,false,true;haswordauthor(J, C).;false;false
2;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
5;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
5;false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,true;haswordauthor(N, L).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordauthor(D, C).;true;true
8;true,true;author(E, D), venue(E, B).;false;true
8;true,true,false;haswordtitle(F, C).;false;false
8;true,false;haswordtitle(G, C).;true;true
8;true,false,true;title(H, G), venue(H, A).;false;false
8;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;true;false
9;false,true;haswordtitle(N, L).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1418510649004877;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 7.30e-08, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7051527672831688;  // std dev = 0.838, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839144;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then return 0.40675749481844253;  // std dev = 0.281, 75.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=58 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360624;  // std dev = 5.77e-08, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.457587366374273;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.1596897620710366;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783616;  // std dev = 5.37e-08, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.3480443637012934;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.13940652053657623;  // std dev = 1.49e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926103;  // std dev = 3.23e-09, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2737476341082451;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( movie(E, A) )
%   | | then return -0.12130551421054228;  // std dev = 0.042, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.08518475138839682;  // std dev = 5.59e-09, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.22279734166782997;  // std dev = 8.94e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.11096320091174082;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109161;  // std dev = 5.27e-08, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1866030055760053;  // std dev = 4.21e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.08298119788798018;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.10047994384077696;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15991792122471715;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.09175575289789921;  // std dev = 2.11e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420267;  // std dev = 3.73e-08, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13958311039416582;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( movie(E, B) )
%   | | then return -0.08394850792637688;  // std dev = 0.007, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.977686
   AUC PR    = 0.861626
   CLL	      = -0.084834
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 1.471 seconds
Total inference time: 3.117 seconds
AUC ROC: 0.977686


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.068886
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.721 seconds
Parameter learned model CLL: -0.068886


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.0, 0, 58], 'true,false,false,true': [2.36e-08, 27, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.3e-08, 75, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.838, 1, 58], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [0.0, 31, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 84, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.281, 17, 58], 'true,false,false': [0.0, 0, 0], 'false,true': [5.77e-08, 72, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 31, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.37e-08, 72, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [0.0, 0, 58], 'true,false,false,true': [1.49e-08, 27, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.23e-09, 91, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, B)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [0.042, 28, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [5.59e-09, 104, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.94e-08, 0, 58], 'true,false,false,true': [0.0, 31, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.27e-08, 91, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [4.21e-08, 0, 58], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 40, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 75, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [2.11e-08, 35, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.73e-08, 80, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [0.007, 17, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 109, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2246900826446277, 7.105427357601002e-17], 'true': [0.0, 0.21674740484429023], 'true,false': [-3.675221047035001e-16, 2.05596856412066e-17], 'false': [7.105427357601002e-17, nan], 'true,false,false': [2.05596856412066e-17, nan]}, {'': [0.16755574289563102, -2.114710523095536e-17], 'true': [0.011894690526567029, 3.2653618371328133e-18], 'true,false': [0.0, -7.162729191130042e-18], 'true,false,false': [-7.162729191130042e-18, nan], 'false': [-2.114710523095536e-17, nan]}, {'': [0.08373847032753487, 4.625929269271486e-17], 'true': [0.0, 0.07897311475764415], 'true,false': [0.07897311475764415, nan], 'false': [4.625929269271486e-17, nan]}, {'': [0.08649082613766294, 4.0091387000352874e-17], 'true': [-8.269247355828752e-16, -5.372046893347532e-17], 'false': [4.0091387000352874e-17, nan], 'true,false': [nan, -5.372046893347532e-17], 'true,false,false': [-5.372046893347532e-17, nan]}, {'': [0.05291681650105336, 1.0980227716072976e-17], 'true': [0.0, 0.05150099638426862], 'true,false': [-1.9907447338106256e-16, 8.22387425648264e-18], 'false': [1.0980227716072976e-17, nan], 'true,false,false': [8.22387425648264e-18, nan]}, {'': [0.034289406977648214, 3.0958142032816866e-17], 'true': [-2.9095499955693757e-16, 6.298266288759513e-05], 'true,false': [6.298266288759513e-05, nan], 'false': [3.0958142032816866e-17, nan]}, {'': [0.02528597240371814, 3.050063254464716e-17], 'true': [nan, 0.02528597240371814], 'true,false': [1.3782078926381254e-16, -1.2534776084477573e-17], 'false': [3.050063254464716e-17, nan], 'true,false,false': [-1.2534776084477573e-17, nan]}, {'': [0.019940209526238845, -5.921189464667502e-18], 'true': [3.062684205862501e-17, 7.28628459060648e-06], 'true,false': [0.0, -8.326672684688674e-18], 'false': [-5.921189464667502e-18, nan], 'true,false,false': [-8.326672684688674e-18, nan]}, {'': [0.014866396767273112, 1.734723475976807e-17], 'true': [0.0, 1.2688263138573217e-17], 'false': [1.734723475976807e-17, nan], 'true,false': [nan, 1.2688263138573217e-17], 'true,false,false': [1.2688263138573217e-17, nan]}, {'': [0.008759259561124772, -1.6806128354417508e-17], 'true': [-3.828355257328126e-18, 3.1215872722346475e-06], 'true,false': [3.1215872722346475e-06, nan], 'false': [-1.6806128354417508e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.14185106490048766;  // std dev = 7.74e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.12544463852839147;  // std dev = 0.000, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360643;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else if ( female(A) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.5553664367462842;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else if ( female(B) )
%   | then if ( female(A) )
%   | | then return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.11231637819360635;  // std dev = 3.73e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( female(A) )
%   | | then return -0.11231637819360636;  // std dev = 2.95e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( actor(A) )
%   | | | then return -0.11231637819360636;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | | else return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583103;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else if ( female(A) )
%   | then return -0.10159632948783635;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else if ( female(B) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.15697176608553642;  // std dev = 0.157, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.32071184716014967;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( female(A) )
%   | | | then return -0.09269127618926097;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.09269127618926096;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then return -0.092691276189261;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else return -0.09269127618926107;  // std dev = 0.000, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.2551722425694892;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2551722425694892;  // std dev = 6.45e-09, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( actor(A) )
%   | | then if ( female(B) )
%   | | | then return -0.08518475138839687;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.08518475138839683;  // std dev = 1.29e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else return -0.08030721797321061;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( female(A) )
%   | then if ( female(B) )
%   | | then return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.08518475138839683;  // std dev = 2.95e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839679;  // std dev = 2.08e-09, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253562;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( actor(A) )
%   | | then return -0.07877675473109176;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return -0.07457226475422507;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( female(A) )
%   | then return -0.07877675473109176;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( female(B) )
%   | | then return -0.07877675473109179;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return -0.07877675473109179;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527733;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.06958642671312289;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.07324622576333704;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15274385809367078;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( female(B) )
%   | | then if ( female(A) )
%   | | | then return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.06842697784420272;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( female(A) )
%   | | | then return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.06826632093451983;  // std dev = 0.003, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else if ( female(A) )
%   | then return -0.06842697784420276;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( female(B) )
%   | | then return -0.06842697784420272;  // std dev = 9.31e-10, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( actor(A) )
%   | | | then return -0.06842697784420272;  // std dev = 5.27e-09, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.12443732918886305;  // std dev = 0.073, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | else if ( female(A) )
%   | | then return -0.06419184008202618;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( female(B) )
%   | | | then return -0.06391662868973284;  // std dev = 0.003, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.06401225719798476;  // std dev = 0.003, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.06419184008202625;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */


Results
   AUC ROC   = 0.998046
   AUC PR    = 0.948453
   CLL	      = -0.078689
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 2.7 seconds
Total inference time: 3.257 seconds
AUC ROC: 0.998046


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064033
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.746 seconds
Refined model CLL: -0.064033


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998046
   AUC PR    = 0.948453
   CLL	      = -0.078689
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 7.638 seconds
Total inference time: 3.257 seconds
AUC ROC: 0.998046
Total revision time: 7.638
Best scored revision CLL: -0.064033


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 04:02:55
{'AUC ROC': 0.998046, 'AUC PR': 0.948453, 'CLL': -0.078689, 'Precision': [1.0, 0.5], 'Recall': 0.817901, 'F1': 0.89983, 'Learning time': 7.638, 'Inference time': 3.257, 'parameter': {'AUC ROC': 0.977686, 'AUC PR': 0.861626, 'CLL': -0.084834, 'Precision': [1.0, 0.5], 'Recall': 0.817901, 'F1': 0.89983, 'Learning time': 1.471, 'Inference time': 3.117}}


Starting fold 3

Target train facts examples: 341
Target train pos examples: 178
Target train neg examples: 3543

Target test facts examples: 737
Target test pos	 examples: 204
Target test neg examples: 10693

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
2;true,false,true;haswordauthor(J, C).;false;false
2;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
5;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
5;false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,true;haswordauthor(N, L).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordauthor(D, C).;true;true
8;true,true;author(E, D), venue(E, B).;false;true
8;true,true,false;haswordtitle(F, C).;false;false
8;true,false;haswordtitle(G, C).;true;true
8;true,false,true;title(H, G), venue(H, A).;false;false
8;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;true;false
9;false,true;haswordtitle(N, L).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995104;  // std dev = 7.54e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.28423589162125246;  // std dev = 5.303, 115.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048796;  // std dev = 0.000, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6940623430157872;  // std dev = 1.664, 133.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.2778578021244324;  // std dev = 5.154, 107.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283919;  // std dev = 0.000, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1400080727346505;  // std dev = 0.235, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( movie(E, A) )
%   | | then return 0.3867840402445942;  // std dev = 0.387, 246.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=178 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360689;  // std dev = 0.000, 260.000 (wgt'ed) examples reached here.  /* #neg=260 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.44530500047498234;  // std dev = 1.310, 133.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.09909652228684243;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.11960592918097551;  // std dev = 5.337, 117.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783662;  // std dev = 0.000, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.15702533000307717;  // std dev = 0.405, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( genre(B, E) )
%   | | then return 0.3579436917840202;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.12059247947628951;  // std dev = 5.213, 110.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926043;  // std dev = 8.64e-09, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25687938950009664;  // std dev = 1.270, 135.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=129 */
%   | else if ( movie(E, A) )
%   | | then return 0.08154525229700105;  // std dev = 5.223, 120.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.08518475138839678;  // std dev = 5.89e-09, 275.000 (wgt'ed) examples reached here.  /* #neg=275 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16780128994011137;  // std dev = 0.380, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.2316311954521948;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.06683816980461887;  // std dev = 5.250, 112.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109141;  // std dev = 4.47e-08, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17915030730371;  // std dev = 0.906, 133.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.07244787422741662;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.03970362121486565;  // std dev = 5.303, 115.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333689;  // std dev = 1.08e-07, 275.000 (wgt'ed) examples reached here.  /* #neg=275 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14241195488023256;  // std dev = 1.211, 136.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.0677277091418139;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.019416112161807223;  // std dev = 5.353, 118.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420294;  // std dev = 0.000, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1367997990900853;  // std dev = 0.825, 132.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=129 */
%   | else if ( movie(E, B) )
%   | | then return 0.0157672117328211;  // std dev = 5.326, 125.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202612;  // std dev = 4.66e-09, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.993692
   AUC PR    = 0.961008
   CLL	      = -0.180133
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95098
   F1        = 0.974874


Total learning time: 2.176 seconds
Total inference time: 3.075 seconds
AUC ROC: 0.993692


Results scoring model
   AUC ROC   = 0.976419
   AUC PR    = 0.83578
   CLL	      = -0.156661
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total scoring time: 1.735 seconds
Parameter learned model CLL: -0.156661


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [7.45e-09, 20, 0], 'true,false,true': [7.54e-07, 0, 129], 'true,false,false,true': [5.303, 66, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 283, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.664, 4, 129], 'true,false,true': [0.0, 6, 0], 'true,false,false,true': [5.154, 58, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 266, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.235, 24, 0], 'true,false,true': [0.387, 68, 178], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 260, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.31, 4, 129], 'true,false,true': [0.0, 13, 0], 'true,false,false,true': [5.337, 68, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 294, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.405, 20, 0], 'true,false,true': [0.0, 0, 129], 'true,false,false,true': [5.213, 61, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.64e-09, 290, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, B)'}, {'true,true': [1.27, 6, 129], 'true,false,true': [5.223, 71, 49], 'true,false,false': [0.0, 0, 0], 'false,true': [5.89e-09, 275, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.38, 13, 0], 'true,false,true': [0.0, 0, 129], 'true,false,false,true': [5.25, 63, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.47e-08, 289, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.906, 4, 129], 'true,false,true': [2.63e-09, 8, 0], 'true,false,false,true': [5.303, 66, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.08e-07, 275, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.211, 7, 129], 'true,false,true': [0.0, 15, 0], 'true,false,false,true': [5.353, 69, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 287, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.825, 3, 129], 'true,false,true': [5.326, 76, 49], 'true,false,false': [0.0, 0, 0], 'false,true': [4.66e-09, 269, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21963957759412847, -1.5692198227917407e-17], 'true': [2.7755575615628915e-18, 0.19732598763773745], 'true,false': [4.40646657835721e-15, 0.24453686200378097], 'true,false,false': [0.24453686200378097, nan], 'false': [-1.5692198227917407e-17, nan]}, {'': [0.17054691565355828, -7.34583655391081e-17], 'true': [0.020824548613940824, 0.24322872748265068], 'true,false': [-2.3129646346357427e-18, 0.24823128657524743], 'true,false,false': [0.24823128657524743, nan], 'false': [-7.34583655391081e-17, nan]}, {'': [0.15886700515784474, -1.0077408992751421e-16], 'true': [0.0023004898396634665, 0.14947423778036084], 'true,false': [0.14947423778036084, nan], 'false': [-1.0077408992751421e-16, nan]}, {'': [0.14713366722032695, -5.437827059388522e-17], 'true': [0.012902588908363944, 0.22337117228681186], 'true,false': [-2.135044278125301e-18, 0.24340711520198752], 'true,false,false': [0.24340711520198752, nan], 'false': [-5.437827059388522e-17, nan]}, {'': [0.1301910851429472, 7.503576304363127e-17], 'true': [0.00819572906644997, 0.12768830996610847], 'true,false': [-7.986720673272444e-16, 0.24702479338842864], 'true,false,false': [0.24702479338842864, nan], 'false': [7.503576304363127e-17, nan]}, {'': [0.12097149351609987, 3.47197018610049e-17], 'true': [0.01194208336085575, 0.22735437188082327], 'true,false': [0.22735437188082327, nan], 'false': [3.47197018610049e-17, nan]}, {'': [0.12055241203592879, 6.9148838903988985e-18], 'true': [0.011085278528824186, 0.121122623548707], 'true,false': [-2.0655312086049424e-17, 0.2460937499999993], 'true,false,false': [0.2460937499999993, nan], 'false': [6.9148838903988985e-18, nan]}, {'': [0.11879813498929202, 4.279405113100603e-17], 'true': [0.0061691619255288275, 0.2293968956533156], 'true,false': [8.673617379884035e-19, 0.24453686200378], 'true,false,false': [0.24453686200378, nan], 'false': [4.279405113100603e-17, nan]}, {'': [0.11675260482471679, -4.564680031559877e-17], 'true': [0.010783468036987105, 0.2161925262191195], 'true,false': [-2.7755575615628915e-18, 0.24281815570238507], 'true,false,false': [0.24281815570238507, nan], 'false': [-4.564680031559877e-17, nan]}, {'': [0.11667123855732997, 2.063611569935235e-17], 'true': [0.005160906832724605, 0.2269022067934711], 'true,false': [0.2269022067934711, nan], 'false': [2.063611569935235e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995104;  // std dev = 7.54e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995122;  // std dev = 1.69e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.14185106490048768;  // std dev = 5.16e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.14185106490048816;  // std dev = 0.000, 260.000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.7194734122109555;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109547;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.1254446385283916;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   else return -0.12544463852839194;  // std dev = 0.000, 274.000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360635;  // std dev = 1.39e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5553664367462833;  // std dev = 5.72e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.1123163781936063;  // std dev = 3.49e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.11231637819360694;  // std dev = 0.000, 276.000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.4175135841583092;  // std dev = 3.77e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else return -0.10159632948783633;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.41751358415831047;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.10159632948783631;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.10159632948783658;  // std dev = 0.000, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926094;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601498;  // std dev = 2.49e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.32071184716014944;  // std dev = 2.98e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.09269127618926103;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else return -0.09269127618926047;  // std dev = 9.88e-08, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2551722425694888;  // std dev = 3.21e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.0851847513883968;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   else return -0.08518475138839678;  // std dev = 9.77e-08, 274.000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253537;  // std dev = 2.21e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.209757715632536;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.07877675473109175;  // std dev = 7.45e-09, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   else return -0.07877675473109143;  // std dev = 5.37e-08, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.17709649774527816;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.17709649774527744;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.07324622576333704;  // std dev = 1.05e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.07324622576333693;  // std dev = 1.02e-07, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15274385809367094;  // std dev = 3.65e-08, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else if ( actor(A) )
%   | | | then return 0.15274385809367122;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.1527438580936709;  // std dev = 4.47e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.0684269778442027;  // std dev = 1.29e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return -0.06842697784420292;  // std dev = 0.000, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801095;  // std dev = 9.42e-08, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   else return -0.0641918400820261;  // std dev = 8.02e-08, 275.000 (wgt'ed) examples reached here.  /* #neg=275 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063555
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.024 seconds
Total inference time: 3.348 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065435
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.805 seconds
Refined model CLL: -0.065435


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063555
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 8.74 seconds
Total inference time: 3.348 seconds
AUC ROC: 1.0
Total revision time: 8.74
Best scored revision CLL: -0.065435


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 04:03:11
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063555, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 8.74, 'Inference time': 3.348, 'parameter': {'AUC ROC': 0.993692, 'AUC PR': 0.961008, 'CLL': -0.180133, 'Precision': [1.0, 0.5], 'Recall': 0.95098, 'F1': 0.974874, 'Learning time': 2.176, 'Inference time': 3.075}}


Starting fold 4

Target train facts examples: 151
Target train pos examples: 45
Target train neg examples: 1891

Target test facts examples: 927
Target test pos	 examples: 337
Target test neg examples: 12345

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
2;true,false,true;haswordauthor(J, C).;false;false
2;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
5;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
5;false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,true;haswordauthor(N, L).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordauthor(D, C).;true;true
8;true,true;author(E, D), venue(E, B).;false;true
8;true,true,false;haswordtitle(F, C).;false;false
8;true,false;haswordtitle(G, C).;true;true
8;true,false,true;title(H, G), venue(H, A).;false;false
8;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;true;false
9;false,true;haswordtitle(N, L).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 6.83e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839158;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.32953254345779115;  // std dev = 0.316, 68.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=45 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360626;  // std dev = 5.05e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4732368806338721;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.14959727770873596;  // std dev = 1.05e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783619;  // std dev = 4.59e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.35884245205363235;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.1315457236933502;  // std dev = 1.29e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2810550518268951;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( movie(E, A) )
%   | | then return -0.1148582626037361;  // std dev = 0.044, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.08518475138839679;  // std dev = 2.08e-09, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07665005702118677;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.2278855475032262;  // std dev = 5.16e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.10585815162312177;  // std dev = 1.67e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.0787767547310917;  // std dev = 2.79e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19028262150443645;  // std dev = 4.47e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.07139815677988537;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09624836682574721;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16267506769318274;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.06680687592788699;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.08819539701244362;  // std dev = 9.13e-09, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420265;  // std dev = 4.01e-08, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1417132608730081;  // std dev = 2.36e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( movie(E, B) )
%   | | then return -0.07973884563358272;  // std dev = 0.025, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.978805
   AUC PR    = 0.865091
   CLL	      = -0.08191
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total learning time: 1.44 seconds
Total inference time: 3.486 seconds
AUC ROC: 0.978805


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.069226
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.342 seconds
Parameter learned model CLL: -0.069226


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [2.23e-07, 0, 45], 'true,false,false,true': [2.58e-08, 28, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.83e-08, 68, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 45], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [0.0, 27, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 68, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.316, 23, 45], 'true,false,false': [0.0, 0, 0], 'false,true': [5.05e-08, 65, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 45], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [1.05e-08, 25, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.59e-08, 63, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 45], 'true,false,false,true': [1.29e-08, 19, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 71, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, B)'}, {'true,true': [0.0, 0, 45], 'true,false,true': [0.044, 27, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [2.08e-09, 71, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [5.16e-08, 0, 45], 'true,false,false,true': [1.67e-08, 26, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.79e-08, 63, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [4.47e-08, 0, 45], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [0.0, 29, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 74, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 45], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [9.13e-09, 22, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.01e-08, 86, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [2.36e-08, 0, 45], 'true,false,true': [0.025, 23, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 73, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2400000000000003, 6.857259857978908e-17], 'true': [0.0, 0.23644210921373646], 'true,false': [1.105288700071267e-15, 2.3790493384824782e-17], 'false': [6.857259857978908e-17, nan], 'true,false,false': [2.3790493384824782e-17, nan]}, {'': [0.1701281772766722, -3.591898020846095e-17], 'true': [-9.473903143468002e-16, -5.742532885992189e-18], 'true,false': [0.0, -4.11193712824132e-18], 'true,false,false': [-4.11193712824132e-18, nan], 'false': [-3.591898020846095e-17, nan]}, {'': [0.1011267315008071, 3.928481471750554e-17], 'true': [0.0, 0.09978446222185769], 'true,false': [0.09978446222185769, nan], 'false': [3.928481471750554e-17, nan]}, {'': [0.09029723754031453, 3.348291661567932e-17], 'true': [-1.5789838572446671e-16, 0.0002204168715024427], 'true,false': [-1.1564823173178713e-18, 4.440892098500626e-18], 'false': [3.348291661567932e-17, nan], 'true,false,false': [4.440892098500626e-18, nan]}, {'': [0.05142738576085449, 0.0], 'true': [0.0, 0.050197969064977185], 'true,false': [-3.552713678800501e-16, 8.764918615461762e-18], 'true,false,false': [8.764918615461762e-18, nan], 'false': [0.0, nan]}, {'': [0.036764076270406086, 4.6910832026415064e-18], 'true': [0.0, 7.044138142775697e-05], 'true,false': [7.044138142775697e-05, nan], 'false': [4.6910832026415064e-18, nan]}, {'': [0.02602953993428762, 1.2335811384723961e-17], 'true': [0.0, 0.02585206949943463], 'true,false': [5.921189464667501e-17, 1.0675221390626506e-17], 'false': [1.2335811384723961e-17, nan], 'true,false,false': [1.0675221390626506e-17, nan]}, {'': [0.019647924500833358, -4.50090415388577e-18], 'true': [4.4408920985006264e-17, 6.577944991874685e-05], 'true,false': [0.0, -1.914177628664063e-18], 'true,false,false': [-1.914177628664063e-18, nan], 'false': [-4.50090415388577e-18, nan]}, {'': [0.014172691435622676, 1.871887657798229e-17], 'true': [-4.934324553889585e-18, 4.830870888988703e-05], 'true,false': [-5.782411586589357e-19, 3.784851220313033e-18], 'false': [1.871887657798229e-17, nan], 'true,false,false': [3.784851220313033e-18, nan]}, {'': [0.010986247704190695, -7.604267291953127e-18], 'true': [1.2335811384723961e-17, 2.7453750833786197e-05], 'true,false': [2.7453750833786197e-05, nan], 'false': [-7.604267291953127e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.14185106490048766;  // std dev = 7.74e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.1254446385283916;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.11231637819360642;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else return 0.5553664367462839;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else if ( female(B) )
%   | then return -0.11231637819360638;  // std dev = 1.32e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( female(A) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( actor(A) )
%   | | | then return -0.1123163781936064;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415831025;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( female(B) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( actor(A) )
%   | | then return -0.10159632948783633;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.10159632948783627;  // std dev = 1.32e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.3207118471601497;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.3207118471601495;  // std dev = 2.11e-08, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( female(A) )
%   | | | then return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.09269127618926097;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.09269127618926104;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694896;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( female(B) )
%   | | then return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.08711552528244856;  // std dev = 0.005, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( actor(B) )
%   | then if ( actor(A) )
%   | | then if ( female(A) )
%   | | | then return -0.08518475138839685;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.08518475138839679;  // std dev = 1.49e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | else return -0.08518475138839683;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.08518475138839685;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09391631011817918;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.20975771563253562;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.20975771563253542;  // std dev = 4.94e-08, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( female(B) )
%   | | | then return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.07863675048909037;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( female(B) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return -0.07877675473109177;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527753;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.08622344742123471;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(B) )
%   | | | then return -0.07324622576333704;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.07312475900097826;  // std dev = 6.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.07324622576333704;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15274385809367078;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.1527438580936709;  // std dev = 5.89e-09, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( female(B) )
%   | | | then return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.06832064521746548;  // std dev = 6.45e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( actor(A) )
%   | then if ( actor(B) )
%   | | then if ( female(B) )
%   | | | then return -0.06842697784420272;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return -0.0684269778442027;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.06842697784420271;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13400703000801095;  // std dev = 1.86e-09, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.13400703000801115;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( actor(A) )
%   | | then if ( female(B) )
%   | | | then return -0.0641918400820262;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.06409801443706183;  // std dev = 9.13e-09, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return -0.07971516182577229;  // std dev = 0.000116, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06419184008202625;  // std dev = 0.000, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */


Results
   AUC ROC   = 0.999064
   AUC PR    = 0.968999
   CLL	      = -0.076781
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total learning time: 2.303 seconds
Total inference time: 3.307 seconds
AUC ROC: 0.999064


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065192
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.514 seconds
Refined model CLL: -0.065192


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.999064
   AUC PR    = 0.968999
   CLL	      = -0.076781
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total learning time: 6.599 seconds
Total inference time: 3.307 seconds
AUC ROC: 0.999064
Total revision time: 6.599
Best scored revision CLL: -0.065192


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 04:03:25
{'AUC ROC': 0.999064, 'AUC PR': 0.968999, 'CLL': -0.076781, 'Precision': [1.0, 0.5], 'Recall': 0.824926, 'F1': 0.904065, 'Learning time': 6.599, 'Inference time': 3.307, 'parameter': {'AUC ROC': 0.978805, 'AUC PR': 0.865091, 'CLL': -0.08191, 'Precision': [1.0, 0.5], 'Recall': 0.824926, 'F1': 0.904065, 'Learning time': 1.44, 'Inference time': 3.486}}


Starting fold 5

Target train facts examples: 163
Target train pos examples: 45
Target train neg examples: 2071

Target test facts examples: 915
Target test pos	 examples: 337
Target test neg examples: 12165

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
2;true,false,true;haswordauthor(J, C).;false;false
2;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
5;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
5;false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,true;haswordauthor(N, L).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordauthor(D, C).;true;true
8;true,true;author(E, D), venue(E, B).;false;true
8;true,true,false;haswordtitle(F, C).;false;false
8;true,false;haswordtitle(G, C).;true;true
8;true,false,true;title(H, G), venue(H, A).;false;false
8;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;true;false
9;false,true;haswordtitle(N, L).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995115;  // std dev = 2.38e-07, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.17064893509951234;  // std dev = 2.622, 32.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 7.30e-08, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109548;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.13911102481023213;  // std dev = 2.640, 33.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283916;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.28813830956169073;  // std dev = 0.401, 76.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=45 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360621;  // std dev = 7.60e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4835657577958693;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.0546127443626966;  // std dev = 2.673, 35.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783615;  // std dev = 5.77e-08, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.3660207000498447;  // std dev = 8.43e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.0090519711931627;  // std dev = 2.739, 40.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.28590689957707843;  // std dev = 5.16e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( movie(E, A) )
%   | | then return 0.04713573216521874;  // std dev = 2.661, 35.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.08518475138839679;  // std dev = 2.28e-09, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.23125220945268035;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.10576953957787118;  // std dev = 2.535, 28.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19270848587582182;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.10598013262544217;  // std dev = 2.63e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.02179554489382244;  // std dev = 2.739, 40.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 7.45e-09, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16448695301359526;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.018211055288647478;  // std dev = 2.673, 35.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420267;  // std dev = 3.16e-08, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14310930440674718;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( movie(E, B) )
%   | | then return 0.023030973508102855;  // std dev = 2.657, 34.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.982257
   AUC PR    = 0.888508
   CLL	      = -0.131987
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.854599
   F1        = 0.9216


Total learning time: 1.367 seconds
Total inference time: 3.145 seconds
AUC ROC: 0.982257


Results scoring model
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.135262
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total scoring time: 1.507 seconds
Parameter learned model CLL: -0.135262


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [2.38e-07, 0, 35], 'true,false,false,true': [2.622, 22, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.3e-08, 74, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 35], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [2.64, 23, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 62, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.401, 31, 45], 'true,false,false': [0.0, 0, 0], 'false,true': [7.6e-08, 94, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 35], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [2.673, 25, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.77e-08, 76, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [8.43e-08, 0, 35], 'true,false,false,true': [2.739, 30, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 65, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, B)'}, {'true,true': [5.16e-08, 0, 35], 'true,false,true': [2.661, 25, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [2.28e-09, 60, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 35], 'true,false,false,true': [2.535, 18, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 50, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 35], 'true,false,true': [2.63e-09, 5, 0], 'true,false,false,true': [2.739, 30, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-09, 52, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 35], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [2.673, 25, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.16e-08, 73, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 35], 'true,false,true': [2.657, 24, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 85, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.22053909556694173, 7.201446646217232e-17], 'true': [nan, 0.22053909556694173], 'true,false': [1.6240976817373718e-15, 0.21484375000000008], 'true,false,false': [0.21484375000000008, nan], 'false': [7.201446646217232e-17, nan]}, {'': [0.18662782704559358, -4.118569284899774e-17], 'true': [-7.105427357601002e-16, 0.21120293847566596], 'true,false': [nan, 0.21120293847566596], 'true,false,false': [0.21120293847566596, nan], 'false': [-4.118569284899774e-17, nan]}, {'': [0.16073328995149203, 6.141659285160441e-17], 'true': [0.0, 0.1604470216334531], 'true,false': [0.1604470216334531, nan], 'false': [6.141659285160441e-17, nan]}, {'': [0.14809108987019498, 4.382459307730881e-17], 'true': [0.0, 0.19032738285844752], 'true,false': [0.0, 0.20408163265306126], 'true,false,false': [0.20408163265306126, nan], 'false': [4.382459307730881e-17, nan]}, {'': [0.13039166976933425, 0.0], 'true': [0.0, 0.131715083152743], 'true,false': [2.0301221021717148e-16, 0.18749999999999986], 'true,false,false': [0.18749999999999986, nan], 'false': [0.0, nan]}, {'': [0.11541856588072351, 5.551115123125783e-18], 'true': [7.612957883143931e-17, 0.2023312965678362], 'true,false': [0.2023312965678362, nan], 'false': [5.551115123125783e-18, nan]}, {'': [0.10592869297811351, -1.1102230246251566e-18], 'true': [nan, 0.10592869297811351], 'true,false': [-3.172065784643304e-17, 0.22959183673469377], 'true,false,false': [0.22959183673469377, nan], 'false': [-1.1102230246251566e-18, nan]}, {'': [0.10647606027487296, 1.0675221390626506e-18], 'true': [-4.4408920985006264e-17, 0.1673666217097821], 'true,false': [1.3877787807814458e-18, 0.18750000000000008], 'true,false,false': [0.18750000000000008, nan], 'false': [1.0675221390626506e-18, nan]}, {'': [0.10738997589034044, 1.3687681125515628e-17], 'true': [-2.5376526277146434e-17, 0.20408163265306115], 'true,false': [nan, 0.20408163265306115], 'true,false,false': [0.20408163265306115, nan], 'false': [1.3687681125515628e-17, nan]}, {'': [0.10590573453803473, -1.1102230246251566e-17], 'true': [-6.3441315692866086e-18, 0.207612456747405], 'true,false': [0.207612456747405, nan], 'false': [-1.1102230246251566e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995115;  // std dev = 2.38e-07, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( actor(B) )
%   | | then return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.14185106490048766;  // std dev = 5.96e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109548;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( actor(B) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1254446385283916;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.22308877321364276;  // std dev = 0.271, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return 0.555366436746284;  // std dev = 1.79e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.11231637819360625;  // std dev = 5.48e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415831047;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.09192245158628297;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783635;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0.4175135841583102;  // std dev = 2.11e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.10159632948783617;  // std dev = 5.05e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601495;  // std dev = 2.98e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926094;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.3207118471601497;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.09269127618926107;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25517224256948956;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( actor(B) )
%   | | then return -0.08515636524336948;  // std dev = 0.000639, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return 0.2551722425694894;  // std dev = 1.83e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.08518475138839679;  // std dev = 1.67e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253542;  // std dev = 5.37e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( actor(B) )
%   | | then return -0.0787180168000499;  // std dev = 0.000816, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else return 0.2097577156325357;  // std dev = 1.97e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.0787767547310917;  // std dev = 2.79e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1770964977452775;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.07268344758255511;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.07325214007147209;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return 0.17709649774527736;  // std dev = 7.45e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07324622576333704;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1527438580936709;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( actor(B) )
%   | | then return -0.06840951772515753;  // std dev = 0.000487, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return 0.15274385809367094;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.0684269778442027;  // std dev = 1.39e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801115;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( actor(B) )
%   | | then return -0.0641523508211518;  // std dev = 0.000773, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else return 0.13400703000801117;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06419184008202625;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */


Results
   AUC ROC   = 0.997986
   AUC PR    = 0.873057
   CLL	      = -0.078584
   Precision = 0.742291 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.852086


Total learning time: 1.768 seconds
Total inference time: 2.868 seconds
AUC ROC: 0.997986


Results scoring model
   AUC ROC   = 0.999759
   AUC PR    = 0.978261
   CLL	      = -0.065804
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total scoring time: 1.502 seconds
Refined model CLL: -0.065804


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.997986
   AUC PR    = 0.873057
   CLL	      = -0.078584
   Precision = 0.742291 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.852086


Total learning time: 6.143999999999999 seconds
Total inference time: 2.868 seconds
AUC ROC: 0.997986
Total revision time: 6.143999999999999
Best scored revision CLL: -0.065804


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 04:03:38
{'AUC ROC': 0.997986, 'AUC PR': 0.873057, 'CLL': -0.078584, 'Precision': [0.742291, 0.5], 'Recall': 1.0, 'F1': 0.852086, 'Learning time': 6.143999999999999, 'Inference time': 2.868, 'parameter': {'AUC ROC': 0.982257, 'AUC PR': 0.888508, 'CLL': -0.131987, 'Precision': [1.0, 0.5], 'Recall': 0.854599, 'F1': 0.9216, 'Learning time': 1.367, 'Inference time': 3.145}}


Starting fold 1

Target train facts examples: 215
Target train pos examples: 56
Target train neg examples: 3308

Target test facts examples: 863
Target test pos	 examples: 326
Target test neg examples: 10928

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
2;true,false,true;haswordauthor(J, C).;false;false
2;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
5;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
5;false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,true;haswordauthor(N, L).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordauthor(D, C).;true;true
8;true,true;author(E, D), venue(E, B).;false;true
8;true,true,false;haswordtitle(F, C).;false;false
8;true,false;haswordtitle(G, C).;true;true
8;true,false,true;title(H, G), venue(H, A).;false;false
8;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;true;false
9;false,true;haswordtitle(N, L).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1418510649004877;  // std dev = 2.58e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 6.83e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7046502885137729;  // std dev = 0.837, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839147;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.3248353069705583;  // std dev = 0.320, 86.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=56 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360622;  // std dev = 6.99e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46610441812321207;  // std dev = 0.678, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.14900068803418878;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783616;  // std dev = 5.77e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.36499738015919186;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.13107796725987117;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926107;  // std dev = 1.86e-09, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2852154459561725;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( movie(E, A) )
%   | | then return -0.11233213817104333;  // std dev = 0.059, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.08518475138839682;  // std dev = 5.27e-09, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07682903434718429;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.2307729638383282;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.10575343947619487;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109169;  // std dev = 3.49e-08, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19236358251208688;  // std dev = 5.58e-08, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.07155393034810263;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09616123881567966;  // std dev = 1.29e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16422962255219534;  // std dev = 4.94e-08, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.08812184916942792;  // std dev = 1.83e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420267;  // std dev = 3.94e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14291121573019966;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( movie(E, B) )
%   | | then return -0.08047300871483398;  // std dev = 0.020, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.978388
   AUC PR    = 0.863056
   CLL	      = -0.083891
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total learning time: 1.537 seconds
Total inference time: 3.231 seconds
AUC ROC: 0.978388


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.068271
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.737 seconds
Parameter learned model CLL: -0.068271


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 56], 'true,false,false,true': [2.58e-08, 29, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.83e-08, 68, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.837, 1, 56], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [0.0, 29, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 79, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.32, 30, 56], 'true,false,false': [0.0, 0, 0], 'false,true': [6.99e-08, 85, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.678, 1, 56], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [0.0, 35, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.77e-08, 82, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 56], 'true,false,false,true': [0.0, 25, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 87, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, B)'}, {'true,true': [0.0, 0, 56], 'true,false,true': [0.059, 28, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [5.27e-09, 79, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 56], 'true,false,false,true': [0.0, 39, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.49e-08, 70, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [5.58e-08, 0, 56], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [1.29e-08, 36, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 73, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [4.94e-08, 0, 56], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.83e-08, 34, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.94e-08, 83, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 56], 'true,false,true': [0.02, 35, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 70, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.22714981070849077, 6.857259857978908e-17], 'true': [0.0, 0.22477508650518999], 'true,false': [-1.2688263138573217e-16, 2.2970131543968756e-17], 'false': [6.857259857978908e-17, nan], 'true,false,false': [2.2970131543968756e-17, nan]}, {'': [0.16519687891756196, -2.5296220814244072e-17], 'true': [0.012304599783948732, -7.162729191130042e-18], 'true,false': [0.0, -5.742532885992189e-18], 'true,false,false': [-5.742532885992189e-18, nan], 'false': [-2.5296220814244072e-17, nan]}, {'': [0.10337044308608508, 5.747036833353752e-17], 'true': [0.0, 0.10237585491528699], 'true,false': [0.10237585491528699, nan], 'false': [5.747036833353752e-17, nan]}, {'': [0.09469894374960819, 4.06179155350667e-17], 'true': [0.008065289822422148, 0.0002068404005830128], 'true,false': [0.0, -3.1720657846433043e-18], 'false': [4.06179155350667e-17, nan], 'true,false,false': [-3.1720657846433043e-18, nan]}, {'': [0.05342754606402858, 2.5522368382187506e-18], 'true': [0.0, 0.05251136266479495], 'true,false': [-2.220446049250313e-16, -1.7763568394002505e-17], 'false': [2.5522368382187506e-18, nan], 'true,false,false': [-1.7763568394002505e-17, nan]}, {'': [0.03516185039948178, 2.810691201582675e-17], 'true': [0.0, 0.00012283010152110735], 'true,false': [0.00012283010152110735, nan], 'false': [2.810691201582675e-17, nan]}, {'': [0.02742062144902757, 1.7446361815538174e-17], 'true': [0.0, 0.027405877446995516], 'true,false': [-1.189524669241239e-16, -1.850371707708594e-17], 'false': [1.7446361815538174e-17, nan], 'true,false,false': [-1.850371707708594e-17, nan]}, {'': [0.019899401499022768, -5.3229871043671886e-18], 'true': [5.551115123125783e-17, 4.299547668770649e-05], 'true,false': [0.0, 4.625929269271485e-18], 'true,false,false': [4.625929269271485e-18, nan], 'false': [-5.3229871043671886e-18, nan]}, {'': [0.014969028283117495, 1.8726653427412278e-17], 'true': [4.3615904538845435e-17, 9.79608551139844e-18], 'false': [1.8726653427412278e-17, nan], 'true,false': [nan, 9.79608551139844e-18], 'true,false,false': [9.79608551139844e-18, nan]}, {'': [0.011815038773030665, -6.3441315692866086e-18], 'true': [-2.7755575615628914e-17, 1.1093590858835783e-05], 'true,false': [1.1093590858835783e-05, nan], 'false': [-6.3441315692866086e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.14185106490048766;  // std dev = 7.15e-08, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839138;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else return -0.12544463852839158;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360643;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else if ( female(A) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( female(A) )
%   | then return -0.1123163781936064;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( actor(A) )
%   | | then if ( actor(B) )
%   | | | then return -0.1123163781936064;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583103;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else if ( female(A) )
%   | then return -0.10159632948783634;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else if ( female(B) )
%   | | then return -0.10159632948783633;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return -0.10159632948783633;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601496;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( female(A) )
%   | | | then return -0.09269127618926094;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.09269127618926096;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.09269127618926098;  // std dev = 0.000, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694894;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( female(A) )
%   | | then if ( female(B) )
%   | | | then return -0.08518475138839687;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( female(B) )
%   | | | then return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.08816867467920403;  // std dev = 0.021, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( female(A) )
%   | then if ( female(B) )
%   | | then return -0.08518475138839683;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else return -0.08518475138839682;  // std dev = 1.32e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( actor(A) )
%   | | then return -0.08518475138839679;  // std dev = 2.46e-09, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | else return -0.08518475138839683;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09408074019581554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253562;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( female(A) )
%   | | | then return -0.07877675473109175;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return -0.0786085414369398;  // std dev = 0.000381, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( female(A) )
%   | then return -0.07877675473109177;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else if ( female(B) )
%   | | then return -0.07877675473109176;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return -0.07877675473109176;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17709649774527708;  // std dev = 2.63e-09, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.1770964977452775;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( genre(A, E) )
%   | | then return -0.08624514074383263;  // std dev = 0.000166, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( female(B) )
%   | | | then return -0.07324908059901251;  // std dev = 2.21e-05, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.07309003133655835;  // std dev = 0.000244, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.07324622576333704;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1527438580936708;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( female(B) )
%   | | then if ( female(A) )
%   | | | then return -0.06842679586370747;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.07070920507456613;  // std dev = 0.010, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.0682935007856819;  // std dev = 7.17e-05, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( female(A) )
%   | then if ( female(B) )
%   | | then return -0.06842697784420267;  // std dev = 2.63e-09, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return -0.06842697784420276;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else if ( female(B) )
%   | | then return -0.06842697784420276;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else return -0.06842697784420274;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13400703000801087;  // std dev = 5.27e-09, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.13400703000801084;  // std dev = 5.59e-09, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( actor(A) )
%   | | then if ( female(A) )
%   | | | then return -0.0641968453104638;  // std dev = 3.30e-05, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.06404571577407978;  // std dev = 4.33e-05, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return -0.07473215400527997;  // std dev = 4.30e-05, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else return -0.06419184008202625;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */


Results
   AUC ROC   = 0.99889
   AUC PR    = 0.966568
   CLL	      = -0.078427
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total learning time: 2.826 seconds
Total inference time: 2.915 seconds
AUC ROC: 0.99889


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064006
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.846 seconds
Refined model CLL: -0.064006


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.99889
   AUC PR    = 0.966568
   CLL	      = -0.078427
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total learning time: 7.946 seconds
Total inference time: 2.915 seconds
AUC ROC: 0.99889
Total revision time: 7.946
Best scored revision CLL: -0.064006


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 04:03:53
{'AUC ROC': 0.99889, 'AUC PR': 0.966568, 'CLL': -0.078427, 'Precision': [1.0, 0.5], 'Recall': 0.819018, 'F1': 0.900506, 'Learning time': 7.946, 'Inference time': 2.915, 'parameter': {'AUC ROC': 0.978388, 'AUC PR': 0.863056, 'CLL': -0.083891, 'Precision': [1.0, 0.5], 'Recall': 0.819018, 'F1': 0.900506, 'Learning time': 1.537, 'Inference time': 3.231}}


Starting fold 2

Target train facts examples: 208
Target train pos examples: 58
Target train neg examples: 3423

Target test facts examples: 870
Target test pos	 examples: 324
Target test neg examples: 10813

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
2;true,false,true;haswordauthor(J, C).;false;false
2;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
5;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
5;false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,true;haswordauthor(N, L).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordauthor(D, C).;true;true
8;true,true;author(E, D), venue(E, B).;false;true
8;true,true,false;haswordtitle(F, C).;false;false
8;true,false;haswordtitle(G, C).;true;true
8;true,false,true;title(H, G), venue(H, A).;false;false
8;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;true;false
9;false,true;haswordtitle(N, L).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 7.74e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( movie(E, A) )
%   | | then return 0.3328054984329866;  // std dev = 0.315, 87.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=58 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360622;  // std dev = 6.66e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.46088198997740754;  // std dev = 0.675, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.15001413397335747;  // std dev = 2.58e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783615;  // std dev = 5.96e-08, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.3609346420613409;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.13187235204336648;  // std dev = 1.83e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926092;  // std dev = 5.74e-09, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.28246958056606164;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( movie(E, A) )
%   | | then return -0.1155360223142039;  // std dev = 0.044, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.08518475138839682;  // std dev = 5.43e-09, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07660210245717428;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.22886801564381007;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.10603354807677898;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109161;  // std dev = 5.58e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19099125669831968;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.07135641167884309;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09639427909834808;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333707;  // std dev = 3.94e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16320482357234914;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.06677022341673357;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.08831854488346912;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420267;  // std dev = 4.21e-08, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14212174399829897;  // std dev = 5.16e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( movie(E, B) )
%   | | then return -0.08029025495983946;  // std dev = 0.026, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.977686
   AUC PR    = 0.861626
   CLL	      = -0.084043
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 1.565 seconds
Total inference time: 3.078 seconds
AUC ROC: 0.977686


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06803
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.785 seconds
Parameter learned model CLL: -0.06803


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 58], 'true,false,false,true': [2.11e-08, 26, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.74e-08, 82, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 31, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 97, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [2.63e-09, 3, 0], 'true,false,true': [0.315, 29, 58], 'true,false,false': [0.0, 0, 0], 'false,true': [6.66e-08, 82, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.675, 1, 58], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [2.58e-08, 34, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.96e-08, 80, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 58], 'true,false,false,true': [1.83e-08, 26, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.74e-09, 108, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, B)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [0.044, 33, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [5.43e-09, 89, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 58], 'true,false,false,true': [0.0, 29, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.58e-08, 95, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [0.0, 33, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.94e-08, 84, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 20, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.21e-08, 86, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [5.16e-08, 0, 58], 'true,false,true': [0.026, 32, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 103, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2195781503515409, 7.311224796312007e-17], 'true': [0.0, 0.2137188208616776], 'true,false': [-3.675221047035001e-16, 1.708035422500241e-17], 'false': [7.311224796312007e-17, nan], 'true,false,false': [1.708035422500241e-17, nan]}, {'': [0.16357695890560142, -1.1445598192011922e-17], 'true': [-1.2250736823450003e-16, -6.938893903907228e-18], 'true,false': [0.0, -7.162729191130042e-18], 'true,false,false': [-7.162729191130042e-18, nan], 'false': [-1.1445598192011922e-17, nan]}, {'': [0.10214881895992584, 5.415722071342227e-17], 'true': [2.3129646346357427e-18, 0.09906674252579017], 'true,false': [0.09906674252579017, nan], 'false': [5.415722071342227e-17, nan]}, {'': [0.09169348965506893, 4.4408920985006264e-17], 'true': [0.007722705778824825, 6.506583583735079e-05], 'true,false': [0.0, 1.959217102279688e-17], 'false': [4.4408920985006264e-17, nan], 'true,false,false': [1.959217102279688e-17, nan]}, {'': [0.05234684007954611, 3.39234813079909e-17], 'true': [0.0, 0.051903482146440444], 'true,false': [-1.6844763132243754e-16, 1.2810265668751807e-17], 'false': [3.39234813079909e-17, nan], 'true,false,false': [1.2810265668751807e-17, nan]}, {'': [0.0366347382317638, 2.993859841685815e-17], 'true': [-2.9095499955693757e-16, 5.9432235278184816e-05], 'true,false': [5.9432235278184816e-05, nan], 'false': [2.993859841685815e-17, nan]}, {'': [0.025189491969568916, 3.272236283105724e-17], 'true': [0.0, 0.02492423497388788], 'true,false': [-8.422381566121877e-17, -5.742532885992189e-18], 'false': [3.272236283105724e-17, nan], 'true,false,false': [-5.742532885992189e-18, nan]}, {'': [0.019204918458945345, 1.850371707708594e-17], 'true': [-1.5313421029312504e-17, 3.377555683632563e-05], 'true,false': [0.0, 0.0], 'false': [1.850371707708594e-17, nan], 'true,false,false': [0.0, nan]}, {'': [0.012251733144208049, 2.0655312086049424e-17], 'true': [-2.6798486801296883e-17, 2.105805705368161e-05], 'true,false': [0.0, -2.7755575615628915e-18], 'false': [2.0655312086049424e-17, nan], 'true,false,false': [-2.7755575615628915e-18, nan]}, {'': [0.011341993973997004, -1.6168296475123638e-17], 'true': [4.594026308793751e-17, 2.056202661986778e-05], 'true,false': [2.056202661986778e-05, nan], 'false': [-1.6168296475123638e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.1418510649004877;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.14185106490048763;  // std dev = 8.16e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.12544463852839124;  // std dev = 4.08e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   else return -0.12544463852839152;  // std dev = 0.000, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.11231637819360642;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else if ( female(A) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.5553664367462842;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else if ( female(A) )
%   | then if ( female(B) )
%   | | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.11231637819360636;  // std dev = 1.18e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( female(B) )
%   | | then return -0.11231637819360636;  // std dev = 1.18e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return -0.11231637819360635;  // std dev = 1.49e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4175135841583103;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else if ( female(B) )
%   | then return -0.10159632948783635;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( female(A) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783627;  // std dev = 2.79e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | | else return -0.10159632948783633;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.32071184716014967;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.09269127618926105;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.09269127618926101;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.2551722425694892;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2551722425694892;  // std dev = 6.45e-09, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( female(B) )
%   | | then return -0.08518475138839687;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( female(A) )
%   | | | then return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.08518475138839683;  // std dev = 1.39e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else if ( female(B) )
%   | then return -0.08518475138839682;  // std dev = 3.36e-09, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( actor(A) )
%   | | then if ( actor(B) )
%   | | | then return -0.08518475138839679;  // std dev = 1.83e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253562;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.07877675473109175;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else if ( female(B) )
%   | then return -0.07877675473109176;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else if ( female(A) )
%   | | then return -0.07877675473109179;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return -0.07877675473109179;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527733;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.09408074019581554;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( female(A) )
%   | | | then return -0.07324622576333704;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.07324622576333704;  // std dev = 0.000, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15274385809367078;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.08636271757394182;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.06842697784420275;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else if ( female(A) )
%   | then return -0.06842697784420274;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else if ( female(B) )
%   | | then return -0.06842697784420275;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( actor(A) )
%   | | | then return -0.06842697784420274;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13400703000801117;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.1340070300080111;  // std dev = 2.63e-09, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( actor(A) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return -0.07978731499793648;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06419184008202626;  // std dev = 0.000, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */


Results
   AUC ROC   = 0.998889
   AUC PR    = 0.966587
   CLL	      = -0.078908
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 2.62 seconds
Total inference time: 2.971 seconds
AUC ROC: 0.998889


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064276
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.704 seconds
Refined model CLL: -0.064276


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998889
   AUC PR    = 0.966587
   CLL	      = -0.078908
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 7.6739999999999995 seconds
Total inference time: 2.971 seconds
AUC ROC: 0.998889
Total revision time: 7.6739999999999995
Best scored revision CLL: -0.064276


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 04:04:07
{'AUC ROC': 0.998889, 'AUC PR': 0.966587, 'CLL': -0.078908, 'Precision': [1.0, 0.5], 'Recall': 0.817901, 'F1': 0.89983, 'Learning time': 7.6739999999999995, 'Inference time': 2.971, 'parameter': {'AUC ROC': 0.977686, 'AUC PR': 0.861626, 'CLL': -0.084043, 'Precision': [1.0, 0.5], 'Recall': 0.817901, 'F1': 0.89983, 'Learning time': 1.565, 'Inference time': 3.078}}


Starting fold 3

Target train facts examples: 341
Target train pos examples: 178
Target train neg examples: 3543

Target test facts examples: 737
Target test pos	 examples: 204
Target test neg examples: 10693

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
2;true,false,true;haswordauthor(J, C).;false;false
2;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
5;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
5;false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,true;haswordauthor(N, L).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordauthor(D, C).;true;true
8;true,true;author(E, D), venue(E, B).;false;true
8;true,true,false;haswordtitle(F, C).;false;false
8;true,false;haswordtitle(G, C).;true;true
8;true,false,true;title(H, G), venue(H, A).;false;false
8;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;true;false
9;false,true;haswordtitle(N, L).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995104;  // std dev = 7.54e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.28797349650302206;  // std dev = 5.286, 114.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048807;  // std dev = 0.000, 270.000 (wgt'ed) examples reached here.  /* #neg=270 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6879466192729201;  // std dev = 1.854, 134.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.3193613403945999;  // std dev = 4.950, 98.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283919;  // std dev = 0.000, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13843747682294427;  // std dev = 0.214, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( movie(E, A) )
%   | | then return 0.40990241549024914;  // std dev = 0.375, 236.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=178 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360692;  // std dev = 0.000, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.42253262781683454;  // std dev = 1.812, 137.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.09923682775366888;  // std dev = 9.13e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.1317297890846055;  // std dev = 5.213, 110.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783659;  // std dev = 0.000, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11834313261599924;  // std dev = 0.294, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( genre(B, E) )
%   | | then return 0.3592707731584449;  // std dev = 2.06e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.10269774520428453;  // std dev = 5.213, 110.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926046;  // std dev = 7.21e-09, 263.000 (wgt'ed) examples reached here.  /* #neg=263 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2614450044655622;  // std dev = 1.170, 134.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=129 */
%   | else if ( movie(E, A) )
%   | | then return 0.04009083654805132;  // std dev = 5.355, 129.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.08518475138839678;  // std dev = 5.89e-09, 277.000 (wgt'ed) examples reached here.  /* #neg=277 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16441766261866497;  // std dev = 0.496, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( genre(B, E) )
%   | | then return 0.23160930927441395;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.05802314389344772;  // std dev = 5.268, 113.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109143;  // std dev = 4.94e-08, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17566482266258063;  // std dev = 1.017, 134.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.0725851945764379;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.015650510447355066;  // std dev = 5.400, 121.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333693;  // std dev = 1.02e-07, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14268546939151125;  // std dev = 1.221, 136.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.06784805193580663;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.008603929192231338;  // std dev = 5.415, 122.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420292;  // std dev = 0.000, 282.000 (wgt'ed) examples reached here.  /* #neg=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13001218257293962;  // std dev = 1.066, 134.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=129 */
%   | else if ( movie(E, B) )
%   | | then return 0.04824991380321115;  // std dev = 5.187, 118.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202605;  // std dev = 5.59e-09, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.993692
   AUC PR    = 0.961008
   CLL	      = -0.181212
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95098
   F1        = 0.974874


Total learning time: 2.047 seconds
Total inference time: 2.828 seconds
AUC ROC: 0.993692


Results scoring model
   AUC ROC   = 0.976419
   AUC PR    = 0.83578
   CLL	      = -0.157415
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total scoring time: 1.764 seconds
Parameter learned model CLL: -0.157415


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 17, 0], 'true,false,true': [7.54e-07, 0, 129], 'true,false,false,true': [5.286, 65, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 270, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.854, 5, 129], 'true,false,true': [7.45e-09, 13, 0], 'true,false,false,true': [4.95, 49, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 266, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.214, 21, 0], 'true,false,true': [0.375, 58, 178], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 269, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.812, 8, 129], 'true,false,true': [9.13e-09, 19, 0], 'true,false,false,true': [5.213, 61, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 259, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.294, 20, 0], 'true,false,true': [2.06e-07, 0, 129], 'true,false,false,true': [5.213, 61, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.21e-09, 263, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, B)'}, {'true,true': [1.17, 5, 129], 'true,false,true': [5.355, 80, 49], 'true,false,false': [0.0, 0, 0], 'false,true': [5.89e-09, 277, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.496, 22, 0], 'true,false,true': [0.0, 0, 129], 'true,false,false,true': [5.268, 64, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.94e-08, 280, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [1.017, 5, 129], 'true,false,true': [0.0, 18, 0], 'true,false,false,true': [5.4, 72, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.02e-07, 288, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.221, 7, 129], 'true,false,true': [0.0, 12, 0], 'true,false,false,true': [5.415, 73, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 282, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [1.066, 5, 129], 'true,false,true': [5.187, 69, 49], 'true,false,false': [0.0, 0, 0], 'false,true': [5.59e-09, 280, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2159171597633191, -5.592234494408195e-17], 'true': [-3.2653618371328133e-18, 0.19593896594354412], 'true,false': [4.40646657835721e-15, 0.24507540781779033], 'true,false,false': [0.24507540781779033, nan], 'false': [-5.592234494408195e-17, nan]}, {'': [0.16714718286255414, -7.34583655391081e-17], 'true': [0.025643617762308328, 0.24117879272951112], 'true,false': [4.270088556250602e-18, 0.24999999999999978], 'true,false,false': [0.24999999999999978, nan], 'false': [-7.34583655391081e-17, nan]}, {'': [0.15208456442247087, -1.0730780163663223e-16], 'true': [0.002183397739531515, 0.14085431943677684], 'true,false': [0.14085431943677684, nan], 'false': [-1.0730780163663223e-16, nan]}, {'': [0.14409561719635108, -6.687057600058858e-17], 'true': [0.023959395573924586, 0.2173411499547923], 'true,false': [4.382459307730881e-18, 0.2470247933884306], 'true,false,false': [0.2470247933884306, nan], 'false': [-6.687057600058858e-17, nan]}, {'': [0.12954930915435317, 5.234511598993133e-17], 'true': [0.00432632656144428, 0.1300468396239518], 'true,false': [3.304849933767908e-16, 0.24702479338842906], 'true,false,false': [0.24702479338842906, nan], 'false': [5.234511598993133e-17, nan]}, {'': [0.12647691970875016, 3.366741302112388e-17], 'true': [0.010216713831822646, 0.2222787439914668], 'true,false': [0.2222787439914668, nan], 'false': [3.366741302112388e-17, nan]}, {'': [0.12050779188117595, 8.723180907769087e-18], 'true': [0.011187852169194091, 0.12217867372573316], 'true,false': [-3.0982968129074137e-16, 0.24559479990602306], 'true,false,false': [0.24559479990602306, nan], 'false': [8.723180907769087e-18, nan]}, {'': [0.11838502410570552, 3.623644594262664e-17], 'true': [0.0077221917413607495, 0.2106404094829041], 'true,false': [-1.5419764230904951e-18, 0.24096714705279704], 'true,false,false': [0.24096714705279704, nan], 'false': [3.623644594262664e-17, nan]}, {'': [0.11931325934794738, -4.0944395234402934e-17], 'true': [0.010959754482308718, 0.21928007390879525], 'true,false': [-4.04768811061255e-18, 0.24032518140284964], 'true,false,false': [0.24032518140284964, nan], 'false': [-4.0944395234402934e-17, nan]}, {'': [0.11294399745815016, 3.013462495411139e-17], 'true': [0.008485238809884325, 0.2280118968871382], 'true,false': [0.2280118968871382, nan], 'false': [3.013462495411139e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995104;  // std dev = 7.54e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995122;  // std dev = 1.69e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.14185106490048768;  // std dev = 5.16e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.14185106490048788;  // std dev = 7.30e-08, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.7194734122109555;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.7194734122109547;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.12544463852839158;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   else return -0.12544463852839194;  // std dev = 0.000, 270.000 (wgt'ed) examples reached here.  /* #neg=270 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.5553664367462833;  // std dev = 5.78e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | | else return -0.11231637819360632;  // std dev = 3.49e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.11231637819360693;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.4175135841583092;  // std dev = 3.77e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.41751358415831047;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.10159632948783623;  // std dev = 3.49e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   else return -0.1015963294878366;  // std dev = 0.000, 278.000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926093;  // std dev = 1.18e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( genre(B, E) )
%   | | then return 0.3207118471601498;  // std dev = 2.49e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.32071184716014944;  // std dev = 2.98e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.09269127618926104;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.09269127618926046;  // std dev = 1.07e-07, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2551722425694887;  // std dev = 3.29e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.0851847513883968;  // std dev = 7.45e-09, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   else return -0.08518475138839678;  // std dev = 9.77e-08, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253537;  // std dev = 2.21e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.209757715632536;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.07877675473109176;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.07877675473109144;  // std dev = 5.16e-08, 264.000 (wgt'ed) examples reached here.  /* #neg=264 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.17709649774527816;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else return -0.07324622576333704;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.17709649774527744;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.07324622576333688;  // std dev = 1.10e-07, 274.000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.15274385809367141;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1527438580936709;  // std dev = 4.47e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.06842697784420272;  // std dev = 5.27e-09, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   else return -0.06842697784420289;  // std dev = 0.000, 277.000 (wgt'ed) examples reached here.  /* #neg=277 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801092;  // std dev = 7.88e-08, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.06419184008202623;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else return -0.0641918400820261;  // std dev = 8.16e-08, 273.000 (wgt'ed) examples reached here.  /* #neg=273 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063555
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 3.639 seconds
Total inference time: 3.081 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065435
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.81 seconds
Refined model CLL: -0.065435


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063555
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 9.26 seconds
Total inference time: 3.081 seconds
AUC ROC: 1.0
Total revision time: 9.26
Best scored revision CLL: -0.065435


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 04:04:23
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063555, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 9.26, 'Inference time': 3.081, 'parameter': {'AUC ROC': 0.993692, 'AUC PR': 0.961008, 'CLL': -0.181212, 'Precision': [1.0, 0.5], 'Recall': 0.95098, 'F1': 0.974874, 'Learning time': 2.047, 'Inference time': 2.828}}


Starting fold 4

Target train facts examples: 151
Target train pos examples: 45
Target train neg examples: 1891

Target test facts examples: 927
Target test pos	 examples: 337
Target test neg examples: 12345

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
2;true,false,true;haswordauthor(J, C).;false;false
2;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
5;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
5;false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,true;haswordauthor(N, L).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordauthor(D, C).;true;true
8;true,true;author(E, D), venue(E, B).;false;true
8;true,true,false;haswordtitle(F, C).;false;false
8;true,false;haswordtitle(G, C).;true;true
8;true,false,true;title(H, G), venue(H, A).;false;false
8;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;true;false
9;false,true;haswordtitle(N, L).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 7.30e-08, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.12544463852839158;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14111685828337298;  // std dev = 0.100, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( movie(E, A) )
%   | | then return 0.2882933107703272;  // std dev = 0.327, 75.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=45 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360624;  // std dev = 5.77e-08, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.48352704945578623;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.09899757789545373;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.144426362101969;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783623;  // std dev = 3.80e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09051111305984999;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.3659937147628403;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.12747970325733068;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2858886665197384;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( movie(E, A) )
%   | | then return -0.1123485519871514;  // std dev = 0.030, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.08518475138839679;  // std dev = 3.23e-09, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07514135722215042;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.2312395744471345;  // std dev = 5.58e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.10309888778033958;  // std dev = 1.05e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109173;  // std dev = 2.36e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19269939449065213;  // std dev = 3.65e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.0700832554099592;  // std dev = 3.73e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09394794586599738;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16448017116278102;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.08625024522064063;  // std dev = 1.18e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420268;  // std dev = 2.69e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14310408462402904;  // std dev = 3.80e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( movie(E, B) )
%   | | then return -0.07898892062540835;  // std dev = 0.014, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.978805
   AUC PR    = 0.865091
   CLL	      = -0.081719
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total learning time: 1.393 seconds
Total inference time: 3.142 seconds
AUC ROC: 0.978805


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.068897
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.484 seconds
Parameter learned model CLL: -0.068897


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [2.23e-07, 0, 45], 'true,false,false,true': [2.11e-08, 26, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.3e-08, 74, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 45], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [0.0, 24, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 68, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.1, 4, 0], 'true,false,true': [0.327, 30, 45], 'true,false,false': [0.0, 0, 0], 'false,true': [5.77e-08, 72, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 45], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 27, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.8e-08, 55, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.0, 0, 45], 'true,false,false,true': [0.0, 24, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 70, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, B)'}, {'true,true': [0.0, 0, 45], 'true,false,true': [0.03, 19, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [3.23e-09, 83, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [5.58e-08, 0, 45], 'true,false,false,true': [1.05e-08, 23, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.36e-08, 60, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [3.65e-08, 0, 45], 'true,false,true': [3.73e-09, 7, 0], 'true,false,false,true': [0.0, 28, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 66, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 45], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.18e-08, 24, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.69e-08, 67, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [3.8e-08, 0, 45], 'true,false,true': [0.014, 20, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 69, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2400000000000003, 7.201446646217232e-17], 'true': [0.0, 0.23209680618924847], 'true,false': [1.105288700071267e-15, 1.708035422500241e-17], 'false': [7.201446646217232e-17, nan], 'true,false,false': [1.708035422500241e-17, nan]}, {'': [0.1656907795247486, -3.591898020846095e-17], 'true': [-9.473903143468002e-16, -4.270088556250602e-18], 'true,false': [0.0, -4.625929269271485e-18], 'true,false,false': [-4.625929269271485e-18, nan], 'false': [-3.591898020846095e-17, nan]}, {'': [0.11056438851850302, 4.625929269271486e-17], 'true': [0.002488402960203119, 0.10699208192785392], 'true,false': [0.10699208192785392, nan], 'false': [4.625929269271486e-17, nan]}, {'': [0.09278124621629653, 2.62416351275037e-17], 'true': [-1.1842378929335003e-16, 7.107386445279989e-05], 'true,false': [0.0, -2.878355989768924e-17], 'false': [2.62416351275037e-17, nan], 'true,false,false': [-2.878355989768924e-17, nan]}, {'': [0.056178480895437505, 0.0], 'true': [0.0, 0.05523992762779038], 'true,false': [-3.3553406966449175e-16, -1.3877787807814457e-17], 'false': [0.0, nan], 'true,false,false': [-1.3877787807814457e-17, nan]}, {'': [0.03311860252263356, 1.203856291762218e-17], 'true': [-6.908054375445419e-17, 4.6777671215532756e-05], 'true,false': [4.6777671215532756e-05, nan], 'false': [1.203856291762218e-17, nan]}, {'': [0.025690572007052045, 9.25185853854297e-18], 'true': [0.0, 0.02502045514294856], 'true,false': [6.908054375445419e-17, 4.827056628805028e-18], 'false': [9.25185853854297e-18, nan], 'true,false,false': [4.827056628805028e-18, nan]}, {'': [0.019592797325553114, -1.6821560979169039e-18], 'true': [2.960594732333751e-17, 9.112375208999276e-05], 'true,false': [1.982541115402065e-18, -4.956352788505163e-18], 'false': [-1.6821560979169039e-18, nan], 'true,false,false': [-4.956352788505163e-18, nan]}, {'': [0.014260659742866683, 1.0770820388154504e-17], 'true': [-9.86864910777917e-18, 5.782411586589357e-18], 'false': [1.0770820388154504e-17, nan], 'true,false': [nan, 5.782411586589357e-18], 'true,false,false': [5.782411586589357e-18, nan]}, {'': [0.010510046032035036, -5.6315660669392e-18], 'true': [3.20731096002823e-17, 9.362925149219992e-06], 'true,false': [9.362925149219992e-06, nan], 'false': [-5.6315660669392e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(A, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
3;true,false;genre(A, E).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(A, D).;true;true
4;true,false;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else return -0.14185106490048766;  // std dev = 7.15e-08, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.12544463852839158;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then if ( female(B) )
%   | | | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.11231637819360635;  // std dev = 1.67e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return 0.5553664367462839;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else if ( female(A) )
%   | then if ( female(B) )
%   | | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.11231637819360638;  // std dev = 1.86e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( female(B) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( actor(B) )
%   | | | then return -0.11231637819360638;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415831025;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( female(B) )
%   | | | then return -0.10159632948783633;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.10159632948783635;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else if ( female(A) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( female(B) )
%   | | then return -0.10159632948783627;  // std dev = 1.32e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.10159632948783634;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.3207118471601497;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.3207118471601495;  // std dev = 2.11e-08, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else return -0.09269127618926104;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else return -0.09269127618926104;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.2551722425694896;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( female(A) )
%   | | then return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.08518475138839686;  // std dev = 2.08e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( actor(A) )
%   | then if ( actor(B) )
%   | | then if ( female(B) )
%   | | | then return -0.08518475138839683;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.08518475138839679;  // std dev = 1.49e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | else return -0.08518475138839683;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.08518475138839683;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2097577156325355;  // std dev = 7.90e-09, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.07877675473109175;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( female(B) )
%   | then return -0.07877675473109175;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return -0.07877675473109176;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527753;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.07324622576333704;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15274385809367083;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.06842697784420276;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else if ( actor(B) )
%   | then if ( actor(A) )
%   | | then if ( female(A) )
%   | | | then return -0.06842697784420272;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.06842697784420274;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else return -0.06842697784420271;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.0684269778442027;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13400703000801095;  // std dev = 1.86e-09, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.13400703000801115;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else return -0.06419184008202625;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */


Results
   AUC ROC   = 0.998709
   AUC PR    = 0.960275
   CLL	      = -0.076309
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total learning time: 2.053 seconds
Total inference time: 3.109 seconds
AUC ROC: 0.998709


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064803
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.32 seconds
Refined model CLL: -0.064803


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998709
   AUC PR    = 0.960275
   CLL	      = -0.076309
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total learning time: 6.25 seconds
Total inference time: 3.109 seconds
AUC ROC: 0.998709
Total revision time: 6.25
Best scored revision CLL: -0.064803


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 04:04:36
{'AUC ROC': 0.998709, 'AUC PR': 0.960275, 'CLL': -0.076309, 'Precision': [1.0, 0.5], 'Recall': 0.824926, 'F1': 0.904065, 'Learning time': 6.25, 'Inference time': 3.109, 'parameter': {'AUC ROC': 0.978805, 'AUC PR': 0.865091, 'CLL': -0.081719, 'Precision': [1.0, 0.5], 'Recall': 0.824926, 'F1': 0.904065, 'Learning time': 1.393, 'Inference time': 3.142}}


Starting fold 5

Target train facts examples: 163
Target train pos examples: 45
Target train neg examples: 2071

Target test facts examples: 915
Target test pos	 examples: 337
Target test neg examples: 12165

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordauthor(I, H).;true;true
2;true,false,true;haswordauthor(J, C).;false;false
2;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, B).;false;true
3;true,true,false;title(F, D), venue(F, A).;false;false
3;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
3;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
3;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
3;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, A).;false;true
4;true,true,false;title(F, D), venue(F, B).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, B).;false;true
5;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
5;true,false;haswordvenue(A, H), haswordauthor(I, H).;false;true
5;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
5;false;haswordvenue(B, L), haswordtitle(M, L).;true;false
5;false,true;haswordauthor(N, L).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;title(E, D), venue(E, A).;false;true
6;true,true,false;title(F, D), venue(F, B).;false;false
6;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
6;true,false,true;title(I, H), venue(I, B).;false;false
6;true,false,false;haswordvenue(A, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordauthor(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;title(F, D), venue(F, A).;false;false
7;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
7;true,false,true;title(I, H), venue(I, B).;false;false
7;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordauthor(D, C).;true;true
8;true,true;author(E, D), venue(E, B).;false;true
8;true,true,false;haswordtitle(F, C).;false;false
8;true,false;haswordtitle(G, C).;true;true
8;true,false,true;title(H, G), venue(H, A).;false;false
8;true,false,false;haswordvenue(B, I), haswordauthor(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
9;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordauthor(M, L).;true;false
9;false,true;haswordtitle(N, L).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995115;  // std dev = 2.38e-07, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.2029765213064089;  // std dev = 2.560, 29.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 6.99e-08, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109548;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.1346322670348601;  // std dev = 2.640, 33.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1254446385283914;  // std dev = 0.000, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.3576767784358792;  // std dev = 0.383, 66.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=45 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.11231637819360626;  // std dev = 4.83e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.4662267235720879;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return 0.13575779039320096;  // std dev = 2.481, 26.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.10159632948783626;  // std dev = 3.16e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.35399468113246135;  // std dev = 7.30e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.0374114857353678;  // std dev = 2.622, 32.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.27777595508847974;  // std dev = 8.69e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( movie(E, A) )
%   | | then return -0.024096592673159056;  // std dev = 2.717, 40.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B) )
%   | then return -0.08518475138839679;  // std dev = 2.79e-09, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10993626379061573;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.22560498450200603;  // std dev = 4.94e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.00748136688146237;  // std dev = 2.701, 37.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109169;  // std dev = 3.33e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18863540000961274;  // std dev = 4.21e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.09963124742913303;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.019843074416183583;  // std dev = 2.727, 39.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16144212656903206;  // std dev = 3.65e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.09104350137756365;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.0054741546180193884;  // std dev = 2.687, 36.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420268;  // std dev = 2.47e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14076156850749466;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( movie(E, B) )
%   | | then return 0.03538621280151822;  // std dev = 2.625, 33.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.982257
   AUC PR    = 0.888508
   CLL	      = -0.132996
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.854599
   F1        = 0.9216


Total learning time: 1.356 seconds
Total inference time: 3.523 seconds
AUC ROC: 0.982257


Results scoring model
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.136572
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total scoring time: 1.595 seconds
Parameter learned model CLL: -0.136572


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [2.38e-07, 0, 35], 'true,false,false,true': [2.56, 19, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.99e-08, 71, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 35], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [2.64, 23, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 89, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.383, 21, 45], 'true,false,false': [0.0, 0, 0], 'false,true': [4.83e-08, 63, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 35], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [2.481, 16, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.16e-08, 51, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [7.3e-08, 0, 35], 'true,false,false,true': [2.622, 22, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 75, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, B)'}, {'true,true': [8.69e-08, 0, 35], 'true,false,true': [2.717, 30, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [2.79e-09, 75, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [4.94e-08, 0, 35], 'true,false,false,true': [2.701, 27, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.33e-08, 67, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [4.21e-08, 0, 35], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [2.727, 29, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 70, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [3.65e-08, 0, 35], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.687, 26, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.47e-08, 64, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 35], 'true,false,true': [2.625, 23, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 62, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.22053909556694173, 6.880255363874209e-17], 'true': [0.0, 0.20874023437500033], 'true,false': [1.6240976817373718e-15, 0.22592152199762194], 'true,false,false': [0.22592152199762194, nan], 'false': [6.880255363874209e-17, nan]}, {'': [0.18970436345725478, -1.7464182409833923e-17], 'true': [-7.105427357601002e-16, 0.20692198690686822], 'true,false': [0.0, 0.2112029384756657], 'true,false,false': [0.2112029384756657, nan], 'false': [-1.7464182409833923e-17, nan]}, {'': [0.14676323280384324, 3.700743415417188e-17], 'true': [nan, 0.14676323280384324], 'true,false': [0.14676323280384324, nan], 'false': [3.700743415417188e-17, nan]}, {'': [0.12759082417611695, 1.959217102279688e-17], 'true': [-3.2989484160290367e-16, 0.2366863905325444], 'true,false': [nan, 0.2366863905325444], 'true,false,false': [0.2366863905325444, nan], 'false': [1.959217102279688e-17, nan]}, {'': [0.12761793494336662, 0.0], 'true': [nan, 0.12761793494336662], 'true,false': [1.5225915766287861e-16, 0.21484374999999994], 'true,false,false': [0.21484374999999994, nan], 'false': [0.0, nan]}, {'': [0.12114458315903405, 7.401486830834377e-18], 'true': [2.157004733557447e-16, 0.18462014371354055], 'true,false': [0.18462014371354055, nan], 'false': [7.401486830834377e-18, nan]}, {'': [0.11304132735823248, 1.657049290485308e-17], 'true': [0.0, 0.11492318297280733], 'true,false': [6.97854472621527e-17, 0.19722425127830506], 'true,false,false': [0.19722425127830506, nan], 'false': [1.657049290485308e-17, nan]}, {'': [0.10715880368504567, -2.3790493384824783e-18], 'true': [5.075305255429287e-17, 0.17346495918973415], 'true,false': [0.0, 0.19066403681788327], 'true,false,false': [0.19066403681788327, nan], 'false': [-2.3790493384824783e-18, nan]}, {'': [0.10564949324087787, 9.540979117872439e-18], 'true': [3.8064789415719653e-17, 0.19052297217077854], 'true,false': [0.0, 0.20061728395061748], 'true,false,false': [0.20061728395061748, nan], 'false': [9.540979117872439e-18, nan]}, {'': [0.10409190569164108, -3.581364595565021e-18], 'true': [-4.123685520036296e-17, 0.20877713532152942], 'true,false': [0.20877713532152942, nan], 'false': [-3.581364595565021e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
1;true,false;genre(A, E).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(B, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, D).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
7;true,false;genre(A, E).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, D).;true;true
8;true,false;genre(A, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995115;  // std dev = 2.38e-07, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.14185106490048766;  // std dev = 6.83e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109548;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.12544463852839138;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.12544463852839144;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360642;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else return 0.555366436746284;  // std dev = 1.79e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.11231637819360629;  // std dev = 4.08e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.41751358415831047;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( actor(B) )
%   | | then return -0.10159632948783633;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.4175135841583102;  // std dev = 2.11e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.10159632948783616;  // std dev = 5.58e-08, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3207118471601495;  // std dev = 2.98e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( actor(B) )
%   | | then return -0.09269127618926096;  // std dev = 7.45e-09, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else return 0.3207118471601497;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.09269127618926107;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.25517224256948956;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( actor(B) )
%   | | then return -0.0851847513883968;  // std dev = 2.24e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else return 0.2551722425694894;  // std dev = 1.83e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.08518475138839679;  // std dev = 1.67e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109177;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253542;  // std dev = 5.37e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109179;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.2097577156325357;  // std dev = 1.97e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07877675473109168;  // std dev = 3.57e-08, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17709649774527741;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.13821836206354074;  // std dev = 0.165, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( actor(B) )
%   | | | then return -0.07324622576333704;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return 0.17709649774527736;  // std dev = 7.45e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07324622576333704;  // std dev = 7.45e-09, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.15536648270635942;  // std dev = 0.015, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.06842697784420275;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return 0.15274385809367094;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06842697784420268;  // std dev = 2.47e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1360520146028689;  // std dev = 0.014, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( actor(A), director(B) )
%   | | then return 0.13400703000801117;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( actor(A) )
%   | | | then return -0.06419184008202622;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.18175995704214692;  // std dev = 0.739, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.06419184008202625;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.076652
   Precision = 0.742291 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.852086


Total learning time: 2.188 seconds
Total inference time: 3.217 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065486
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total scoring time: 1.507 seconds
Refined model CLL: -0.065486


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.076652
   Precision = 0.742291 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.852086


Total learning time: 6.646 seconds
Total inference time: 3.217 seconds
AUC ROC: 1.0
Total revision time: 6.646
Best scored revision CLL: -0.065486


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 04:04:51
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.076652, 'Precision': [0.742291, 0.5], 'Recall': 1.0, 'F1': 0.852086, 'Learning time': 6.646, 'Inference time': 3.217, 'parameter': {'AUC ROC': 0.982257, 'AUC PR': 0.888508, 'CLL': -0.132996, 'Precision': [1.0, 0.5], 'Recall': 0.854599, 'F1': 0.9216, 'Learning time': 1.356, 'Inference time': 3.523}}


