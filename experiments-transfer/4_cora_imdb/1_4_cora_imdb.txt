Starting experiment #1 for 4_cora_imdb

Start learning from source dataset

Source train facts examples: 42558
Source train pos examples: 3017
Source train neg examples: 5022

WILL Produced-Tree #1
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.25375166443991654;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return 0.11529179224236855;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=27 */
%   | | | else return 0.31078051404687906;  // std dev = 6.861, 190.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.46790503266048855;  // std dev = 4.417, 82.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=50 */
%   | | | else return 0.20814893509951235;  // std dev = 2.133, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.4748156017661778;  // std dev = 3.766, 60.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=37 */
%   | | | else return 0.6142464960751212;  // std dev = 2.750, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   else if ( haswordvenue(A, M), haswordtitle(N, M) )
%   | then return 0.045745834324316524;  // std dev = 0.390, 645.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=121 */
%   | else return 0.02093963277393071;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #2
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( haswordauthor(E, C) )
%   | | then if ( author(F, E), title(F, D) )
%   | | | then return 0.8243712142635358;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.42044649091023856;  // std dev = 1.903, 15.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=9 */
%   | | else if ( title(G, D), venue(G, B) )
%   | | | then return 0.21948155214684198;  // std dev = 39.653, 6,583.000 (wgt'ed) examples reached here.  /* #neg=3,984 #pos=2,599 */
%   | | | else return 0.20097172735639102;  // std dev = 8.232, 288.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=110 */
%   | else if ( haswordvenue(B, H), haswordtitle(I, H) )
%   | | then if ( title(J, I), venue(J, B) )
%   | | | then return 0.41902761832596436;  // std dev = 4.064, 71.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=44 */
%   | | | else return 0.21148997118528182;  // std dev = 2.742, 31.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
%   | | else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | | | then return 0.40983809346269734;  // std dev = 3.747, 60.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=37 */
%   | | | else return 0.5220782826498102;  // std dev = 2.750, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   else return 0.03317648120602601;  // std dev = 0.384, 946.000 (wgt'ed) examples reached here.  /* #neg=776 #pos=170 */
WILL Produced-Tree #3
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.18614483420181113;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.05049919570350143;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=27 */
%   | | | else return 0.235027252940324;  // std dev = 6.863, 190.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordtitle(H, G) )
%   | | then if ( haswordtitle(H, I), haswordauthor(J, I) )
%   | | | then return 0.335051560702741;  // std dev = 4.395, 82.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=50 */
%   | | | else return 0.1156728717963746;  // std dev = 2.127, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   | | else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | | | then return 0.3349703664798137;  // std dev = 3.740, 60.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=37 */
%   | | | else return 0.41618305303018954;  // std dev = 2.750, 41.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=31 */
%   else if ( haswordvenue(B, M), haswordtitle(N, M) )
%   | then return 0.03726311275272423;  // std dev = 0.390, 645.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=121 */
%   | else return 0.011226549148428957;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #4
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.15370493926506432;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.11015648481190979;  // std dev = 7.705, 263.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=93 */
%   | | | else return 0.36639284496466645;  // std dev = 2.739, 32.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   | else if ( haswordvenue(A, H), haswordtitle(I, H) )
%   | | then if ( haswordtitle(I, J), haswordauthor(K, J) )
%   | | | then return 0.2636839334242075;  // std dev = 4.392, 82.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=50 */
%   | | | else return 0.09429315932534059;  // std dev = 2.126, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   | | else if ( haswordvenue(B, L), haswordauthor(M, L) )
%   | | | then return 0.6428515350342678;  // std dev = 0.101, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.27022727323427087;  // std dev = 4.588, 97.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=64 */
%   else if ( haswordvenue(A, N), haswordtitle(P, N) )
%   | then return 0.03251173897538828;  // std dev = 0.390, 645.000 (wgt'ed) examples reached here.  /* #neg=524 #pos=121 */
%   | else return 0.009626070414147833;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #5
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.12449840390214753;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return 0.015019349103334306;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=27 */
%   | | | else return 0.1614714091622345;  // std dev = 6.825, 190.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=86 */
%   | else if ( haswordvenue(B, G), haswordauthor(H, G) )
%   | | then return 0.3806089007698947;  // std dev = 0.351, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.15600887461398324;  // std dev = 4.754, 94.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=51 */
%   | | | else return 0.2165600384100094;  // std dev = 4.595, 99.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=66 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then return 0.02181962786783059;  // std dev = 0.384, 557.000 (wgt'ed) examples reached here.  /* #neg=457 #pos=100 */
%   | | else return 0.0778474255614158;  // std dev = 0.426, 88.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=21 */
%   | else return 0.005673435859160722;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #6
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.09945820899728545;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.0031538607474979456;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=27 */
%   | | | else return 0.1271415208705842;  // std dev = 6.823, 190.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.29916229121854804;  // std dev = 0.374, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.11513690040180247;  // std dev = 4.722, 94.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=51 */
%   | | | else return 0.16581716387283996;  // std dev = 4.596, 99.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=66 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordauthor(M, K) )
%   | | then return 0.1069609372816654;  // std dev = 0.443, 63.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=17 */
%   | | else return 0.016649779369951313;  // std dev = 0.383, 582.000 (wgt'ed) examples reached here.  /* #neg=478 #pos=104 */
%   | else return 0.0049206433464650265;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #7
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordauthor(D, C) )
%   | then if ( author(E, D), venue(E, A) )
%   | | then return 0.5424341242371896;  // std dev = 0.191, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( haswordtitle(F, C) )
%   | | | then return 0.2427611246139393;  // std dev = 1.941, 16.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=10 */
%   | | | else return 0.333364221334972;  // std dev = 1.158, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | else if ( haswordtitle(G, C) )
%   | | then if ( title(H, G), venue(H, B) )
%   | | | then return 0.0773919506783051;  // std dev = 39.616, 6,576.000 (wgt'ed) examples reached here.  /* #neg=3,982 #pos=2,594 */
%   | | | else return 0.06184377797350324;  // std dev = 8.101, 288.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=110 */
%   | | else if ( haswordvenue(B, I), haswordtitle(J, I) )
%   | | | then return 0.08996458359057498;  // std dev = 4.878, 101.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=56 */
%   | | | else return 0.12890615731344177;  // std dev = 4.582, 99.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=66 */
%   else if ( haswordvenue(A, K), haswordauthor(L, K) )
%   | then return 0.04463279490391327;  // std dev = 0.405, 91.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=19 */
%   | else return 0.013305092606846508;  // std dev = 0.381, 855.000 (wgt'ed) examples reached here.  /* #neg=704 #pos=151 */
WILL Produced-Tree #8
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.06122005872407654;  // std dev = 0.489, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( haswordtitle(D, F), haswordauthor(G, F) )
%   | | | then return 0.02700132138347227;  // std dev = 7.675, 263.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=93 */
%   | | | else return 0.20830871550228836;  // std dev = 2.739, 32.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=20 */
%   | else if ( haswordvenue(B, H), haswordauthor(I, H) )
%   | | then return 0.2071554496505928;  // std dev = 0.337, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(B, J), haswordtitle(K, J) )
%   | | | then return 0.05880931485283275;  // std dev = 4.749, 94.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=51 */
%   | | | else return 0.09749233601638689;  // std dev = 4.582, 99.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=66 */
%   else if ( haswordvenue(A, L), haswordtitle(M, L) )
%   | then if ( haswordauthor(N, L) )
%   | | then return 0.09775892182128522;  // std dev = 0.443, 63.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=17 */
%   | | else return 0.011836756481367701;  // std dev = 0.383, 582.000 (wgt'ed) examples reached here.  /* #neg=478 #pos=104 */
%   | else return 8.744914217971358E-4;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #9
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, A) )
%   | | then return 0.04755899111560781;  // std dev = 0.488, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, B) )
%   | | | then return -0.03006804512802009;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=27 */
%   | | | else return 0.06900850890376736;  // std dev = 6.803, 190.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.1615565673055408;  // std dev = 0.366, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.03728828717489368;  // std dev = 4.715, 94.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=51 */
%   | | | else return 0.08078606493729007;  // std dev = 4.590, 99.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=66 */
%   else if ( haswordvenue(B, K), haswordtitle(L, K) )
%   | then if ( haswordauthor(M, K) )
%   | | then return 0.08759338083439447;  // std dev = 0.443, 63.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=17 */
%   | | else return 0.009952768549954655;  // std dev = 0.383, 582.000 (wgt'ed) examples reached here.  /* #neg=478 #pos=104 */
%   | else return 3.243883971583071E-4;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */
WILL Produced-Tree #10
% FOR samevenue(A, B):
%   if ( haswordvenue(A, C), haswordvenue(B, C) )
%   then if ( haswordtitle(D, C) )
%   | then if ( title(E, D), venue(E, B) )
%   | | then return 0.03685567801211311;  // std dev = 0.488, 6,595.000 (wgt'ed) examples reached here.  /* #neg=3,986 #pos=2,609 */
%   | | else if ( title(F, D), venue(F, A) )
%   | | | then return -0.033927592349327615;  // std dev = 4.479, 105.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=27 */
%   | | | else return 0.052689951618680377;  // std dev = 6.802, 190.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=86 */
%   | else if ( haswordvenue(A, G), haswordauthor(H, G) )
%   | | then return 0.12673288642462927;  // std dev = 0.367, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( haswordvenue(A, I), haswordtitle(J, I) )
%   | | | then return 0.028181037116975293;  // std dev = 4.715, 94.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=51 */
%   | | | else return 0.06161148343934828;  // std dev = 4.590, 99.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=66 */
%   else if ( haswordvenue(A, K), haswordtitle(L, K) )
%   | then if ( haswordtitle(L, M), haswordauthor(N, M) )
%   | | then return 0.007409755711312396;  // std dev = 0.382, 557.000 (wgt'ed) examples reached here.  /* #neg=457 #pos=100 */
%   | | else return 0.06686352450153286;  // std dev = 0.427, 88.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=21 */
%   | else return -9.171741729624564E-4;  // std dev = 0.369, 301.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=49 */


Starting fold 1

Target train facts examples: 215
Target train pos examples: 56
Target train neg examples: 3308

Target test facts examples: 863
Target test pos	 examples: 326
Target test neg examples: 10928

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
1;true;haswordtitle(D, C).;true;true
1;true,true;haswordauthor(E, C).;true;true
1;true,true,true;author(F, E), title(F, D).;false;false
1;true,true,false;title(G, D), venue(G, B).;false;false
1;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
1;true,false,true;title(J, I), venue(J, B).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, B).;false;true
2;true,true,false;title(F, D), venue(F, A).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
2;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
2;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
3;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
3;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
3;true,false,false;haswordvenue(B, L), haswordauthor(M, L).;false;false
3;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordauthor(D, C).;true;true
6;true,true;author(E, D), venue(E, A).;false;true
6;true,true,false;haswordtitle(F, C).;false;false
6;true,false;haswordtitle(G, C).;true;true
6;true,false,true;title(H, G), venue(H, B).;false;false
6;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
7;false,true;haswordauthor(N, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14185106490048768;  // std dev = 4.08e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 6.99e-08, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7046502885137729;  // std dev = 0.837, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.1254446385283915;  // std dev = 0.000, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5590237097370758;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.11231637819360642;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.11231637819360624;  // std dev = 6.32e-08, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.24628892309069012;  // std dev = 0.246, 84.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=56 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.10159632948783619;  // std dev = 5.58e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3616726181740547;  // std dev = 1.23e-07, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.12638321275862988;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926105;  // std dev = 2.28e-09, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.282968441980755;  // std dev = 7.88e-08, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.11307527453168205;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839679;  // std dev = 2.08e-09, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.22921431657200883;  // std dev = 7.60e-08, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.10222147295906849;  // std dev = 1.29e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.0787767547310917;  // std dev = 3.07e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19124089607772918;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( movie(E, B) )
%   | | then return -0.09271660757750413;  // std dev = 0.014, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1269504889121306;  // std dev = 0.299, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.1633913535171754;  // std dev = 5.16e-08, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.08566758151606135;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420267;  // std dev = 4.06e-09, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14226551197265722;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.06423888361790762;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.0791911945206731;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.978388
   AUC PR    = 0.863056
   CLL	      = -0.08322
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total learning time: 0.982 seconds
Total inference time: 1.675 seconds
AUC ROC: 0.978388


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.067655
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.973 seconds
Parameter learned model CLL: -0.067655


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.0, 0, 56], 'true,false,false,true': [4.08e-08, 39, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.99e-08, 72, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)'}, {'true,true': [0.837, 1, 56], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 25, 0], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 76, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 56], 'true,false,true': [2.63e-09, 3, 0], 'true,false,false,true': [0.0, 32, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.32e-08, 77, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.246, 28, 56], 'true,false,false': [0.0, 0, 0], 'false,true': [5.58e-08, 85, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.23e-07, 0, 56], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 37, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.28e-09, 88, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [2.63e-09, 3, 0], 'true,false,true': [7.88e-08, 0, 56], 'true,false,false,true': [0.0, 21, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.08e-09, 71, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [7.6e-08, 0, 56], 'true,false,false,true': [1.29e-08, 25, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.07e-08, 65, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 56], 'true,false,true': [0.014, 29, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 71, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.299, 6, 0], 'true,false,true': [5.16e-08, 0, 56], 'true,false,false,true': [0.0, 42, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.06e-09, 83, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 56], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 30, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 80, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.24489795918367324, 6.78469626159818e-17], 'true': [0.0, 0.24199445983379475], 'true,false': [-1.2688263138573217e-16, 4.2700885562506023e-17], 'false': [6.78469626159818e-17, nan], 'true,false,false': [4.2700885562506023e-17, nan]}, {'': [0.1545833971072724, -2.6294755846385285e-17], 'true': [0.012304599783948732, -6.661338147750939e-18], 'true,false': [-6.661338147750939e-18, nan], 'true,false,true': [nan, -6.661338147750939e-18]}, {'': [0.10667396773083437, 5.190653102143589e-17], 'true': [-1.2688263138573217e-16, -1.2688263138573217e-17], 'false': [5.190653102143589e-17, nan], 'true,false': [2.3129646346357427e-18, -1.0408340855860843e-17], 'true,false,false': [-1.0408340855860843e-17, nan]}, {'': [0.061207230492149545, 3.657205257588751e-17], 'true': [0.0, 0.060512074480812875], 'true,false': [0.060512074480812875, nan], 'false': [3.657205257588751e-17, nan]}, {'': [0.05706408599728502, 5.046468293750712e-18], 'true': [2.6962559169468085e-16, -2.400482215405744e-17], 'false': [5.046468293750712e-18, nan], 'true,false': [nan, -2.400482215405744e-17], 'true,false,false': [-2.400482215405744e-17, nan]}, {'': [0.03252979844228947, 4.6910832026415064e-18], 'true': [2.3129646346357427e-18, 0.031110867845748885], 'true,false': [1.1102230246251565e-16, -5.28677630773884e-18], 'false': [4.6910832026415064e-18, nan], 'true,false,false': [-5.28677630773884e-18, nan]}, {'': [0.023696048661852567, 1.4518301091252048e-17], 'true': [0.0, 0.023439956655224043], 'true,false': [1.030921380009074e-16, 6.661338147750939e-18], 'false': [1.4518301091252048e-17, nan], 'true,false,false': [6.661338147750939e-18, nan]}, {'': [0.01812640193775786, -3.1273888017610044e-18], 'true': [-6.344131569286608e-17, 6.939982049260745e-06], 'true,false': [6.939982049260745e-06, nan], 'false': [-3.1273888017610044e-18, nan]}, {'': [0.017008658604927097, 1.738903532545426e-17], 'true': [0.014930328924573492, 0.015191106886503679], 'true,false': [4.7580986769649563e-17, -1.7182023000151233e-17], 'false': [1.738903532545426e-17, nan], 'true,false,false': [-1.7182023000151233e-17, nan]}, {'': [0.011201894200000923, -9.714451465470119e-18], 'true': [-1.1895246692412391e-17, 6.97934239331367e-06], 'true,false': [0.0, -1.572815951552305e-17], 'false': [-9.714451465470119e-18, nan], 'true,false,false': [-1.572815951552305e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(B, D).;true;true
2;true,false;genre(A, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(A, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
5;true,false;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
8;true,false;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.14185106490048763;  // std dev = 8.30e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.12544463852839147;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.529270278902986;  // std dev = 0.141, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1123163781936064;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   else return -0.1123163781936062;  // std dev = 7.88e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( actor(B) )
%   | | then if ( female(B) )
%   | | | then return -0.10159632948783634;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return -0.10159632948783635;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( female(A) )
%   | | | then return 0.41751358415831;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.42387339420197057;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( female(B) )
%   | then return -0.10159632948783635;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else if ( female(A) )
%   | | then return -0.10159632948783634;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783635;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.10159632948783633;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.3207118471601494;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.3250266520245421;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return -0.09269127618926101;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else if ( female(A) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else return -0.09269127618926105;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.23780063458482742;  // std dev = 0.204, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.2551722425694891;  // std dev = 3.65e-08, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.2581143010844664;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( female(A) )
%   | | | then return -0.08518475138839687;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.08518475138839687;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( female(B) )
%   | then if ( female(A) )
%   | | then return -0.08518475138839685;  // std dev = 2.63e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return -0.0851847513883968;  // std dev = 3.73e-09, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839679;  // std dev = 3.36e-09, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.2097577156325355;  // std dev = 2.98e-08, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.21183380047602335;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return -0.07877675473109176;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else if ( female(B) )
%   | then if ( female(A) )
%   | | then return -0.07877675473109179;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else return -0.07877675473109179;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else if ( female(A) )
%   | | then return -0.07877675473109179;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( actor(A), actor(B) )
%   | | | then return -0.07877675473109179;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.07877675473109177;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17709649774527747;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.16173745983238821;  // std dev = 0.091, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | else if ( female(B) )
%   | | then if ( female(A) )
%   | | | then return -0.07324622576333704;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.07400888792959844;  // std dev = 0.002, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.07324622576333704;  // std dev = 1.32e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.07324622576333704;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07019280159345169;  // std dev = 3.52e-05, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.15274385809367083;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.15610776485816572;  // std dev = 3.16e-08, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( female(A) )
%   | | | then return -0.06842697784420272;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.06841077794668164;  // std dev = 8.87e-05, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( female(B) )
%   | then return -0.06842697784420276;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( female(A) )
%   | | then return -0.06842697784420275;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else if ( actor(A), actor(B) )
%   | | | then return -0.06842697784420272;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13400703000801117;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.13662773456563704;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( genre(A, E) )
%   | | then return -0.06572412651022724;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(B) )
%   | | | then return -0.06418392955229395;  // std dev = 7.05e-05, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.06419258425932406;  // std dev = 1.70e-06, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.06419184008202625;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */


Results
   AUC ROC   = 0.99814
   AUC PR    = 0.950369
   CLL	      = -0.078471
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total learning time: 1.656 seconds
Total inference time: 1.718 seconds
AUC ROC: 0.99814


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063835
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.063 seconds
Refined model CLL: -0.063835


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.99814
   AUC PR    = 0.950369
   CLL	      = -0.078471
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total learning time: 4.6739999999999995 seconds
Total inference time: 1.718 seconds
AUC ROC: 0.99814
Total revision time: 4.6739999999999995
Best scored revision CLL: -0.063835


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 02:32:48
{'AUC ROC': 0.99814, 'AUC PR': 0.950369, 'CLL': -0.078471, 'Precision': [1.0, 0.5], 'Recall': 0.819018, 'F1': 0.900506, 'Learning time': 4.6739999999999995, 'Inference time': 1.718, 'parameter': {'AUC ROC': 0.978388, 'AUC PR': 0.863056, 'CLL': -0.08322, 'Precision': [1.0, 0.5], 'Recall': 0.819018, 'F1': 0.900506, 'Learning time': 0.982, 'Inference time': 1.675}}


Starting fold 2

Target train facts examples: 208
Target train pos examples: 58
Target train neg examples: 3423

Target test facts examples: 870
Target test pos	 examples: 324
Target test neg examples: 10813

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
1;true;haswordtitle(D, C).;true;true
1;true,true;haswordauthor(E, C).;true;true
1;true,true,true;author(F, E), title(F, D).;false;false
1;true,true,false;title(G, D), venue(G, B).;false;false
1;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
1;true,false,true;title(J, I), venue(J, B).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, B).;false;true
2;true,true,false;title(F, D), venue(F, A).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
2;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
2;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
3;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
3;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
3;true,false,false;haswordvenue(B, L), haswordauthor(M, L).;false;false
3;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordauthor(D, C).;true;true
6;true,true;author(E, D), venue(E, A).;false;true
6;true,true,false;haswordtitle(F, C).;false;false
6;true,false;haswordtitle(G, C).;true;true
6;true,false,true;title(H, G), venue(H, B).;false;false
6;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
7;false,true;haswordauthor(N, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 7.30e-08, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.12544463852839144;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5420972039446066;  // std dev = 0.776, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.11231637819360638;  // std dev = 1.29e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.11231637819360621;  // std dev = 7.15e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( movie(E, A) )
%   | | then return 0.23502305639336482;  // std dev = 0.250, 90.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=58 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.10159632948783619;  // std dev = 5.48e-08, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.36476478935279;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.12514456952030176;  // std dev = 2.11e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.28505827618687407;  // std dev = 7.30e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1120735466208288;  // std dev = 3.07e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839682;  // std dev = 5.59e-09, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.23066400457508063;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.10139615161315846;  // std dev = 7.45e-09, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109166;  // std dev = 3.87e-08, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18294665986007697;  // std dev = 0.546, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | else if ( movie(E, B) )
%   | | then return -0.09100174226294229;  // std dev = 0.032, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1230469064476404;  // std dev = 0.305, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.16545652910087424;  // std dev = 7.60e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.08516095915287039;  // std dev = 5.27e-09, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420265;  // std dev = 4.56e-09, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14385512805929082;  // std dev = 3.33e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.05997888004011759;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.07875632438099504;  // std dev = 9.13e-09, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.977686
   AUC PR    = 0.861626
   CLL	      = -0.083342
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 0.919 seconds
Total inference time: 1.679 seconds
AUC ROC: 0.977686


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.067343
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.004 seconds
Parameter learned model CLL: -0.067343


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 58], 'true,false,false,true': [2.11e-08, 26, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.3e-08, 75, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)'}, {'true,true': [0.0, 0, 58], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 22, 0], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 84, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.776, 1, 58], 'true,false,true': [2.63e-09, 3, 0], 'true,false,false,true': [1.29e-08, 22, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.15e-08, 87, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.25, 32, 58], 'true,false,false': [0.0, 0, 0], 'false,true': [5.48e-08, 86, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [2.63e-09, 3, 0], 'true,false,false,true': [2.11e-08, 35, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 75, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [7.3e-08, 0, 58], 'true,false,false,true': [3.07e-08, 37, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.59e-09, 106, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.0, 0, 58], 'true,false,false,true': [7.45e-09, 25, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.87e-08, 74, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.546, 1, 58], 'true,false,true': [0.032, 38, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 81, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.305, 6, 0], 'true,false,true': [7.6e-08, 0, 58], 'true,false,false,true': [5.27e-09, 26, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.56e-09, 88, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [3.33e-08, 0, 58], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [9.13e-09, 29, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 82, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2195781503515409, 7.105427357601002e-17], 'true': [0.0, 0.2137188208616776], 'true,false': [-3.675221047035001e-16, 1.708035422500241e-17], 'false': [7.105427357601002e-17, nan], 'true,false,false': [1.708035422500241e-17, nan]}, {'': [0.14233112342274495, -2.114710523095536e-17], 'true': [-1.2250736823450003e-16, -2.523234146875356e-18], 'true,false': [-2.523234146875356e-18, nan], 'true,false,true': [nan, -2.523234146875356e-18]}, {'': [0.09669656682971375, 5.870144727903127e-17], 'true': [0.010212207270416458, 0.0], 'false': [5.870144727903127e-17, nan], 'true,false': [2.3129646346357427e-18, 7.569702440626067e-18], 'true,false,false': [7.569702440626067e-18, nan]}, {'': [0.06403794978215346, 3.4855839145208403e-17], 'true': [-1.1564823173178713e-18, 0.06251730259367566], 'true,false': [0.06251730259367566, nan], 'false': [3.4855839145208403e-17, nan]}, {'': [0.056830032113398744, 0.0], 'true': [-4.594026308793752e-16, 7.658428396344867e-05], 'true,false': [2.3129646346357427e-18, 1.2688263138573217e-17], 'true,false,false': [1.2688263138573217e-17, nan], 'false': [0.0, nan]}, {'': [0.037590164146805743, 3.2468786569226275e-17], 'true': [0.0, 0.03750178031439078], 'true,false': [9.188052617587502e-17, 2.550512353868603e-17], 'false': [3.2468786569226275e-17, nan], 'true,false,false': [2.550512353868603e-17, nan]}, {'': [0.023875367758433384, 2.0254068692485963e-17], 'true': [0.0, 0.0232084081325662], 'true,false': [-6.125368411725002e-17, 2.220446049250313e-18], 'false': [2.0254068692485963e-17, nan], 'true,false,false': [2.220446049250313e-18, nan]}, {'': [0.020969677143416826, -6.853228547068867e-18], 'true': [0.005058026318664972, 2.702214567153413e-05], 'true,false': [2.702214567153413e-05, nan], 'false': [-6.853228547068867e-18, nan]}, {'': [0.01633275102679923, 2.0185873175002847e-17], 'true': [0.015536473179473055, 0.013423492223819939], 'true,false': [9.953723669053128e-17, 1.0675221390626506e-18], 'false': [2.0185873175002847e-17, nan], 'true,false,false': [1.0675221390626506e-18, nan]}, {'': [0.011134074980668915, -1.0154478883766675e-17], 'true': [1.914177628664063e-17, 2.12802914948353e-05], 'true,false': [0.0, 2.8712664429960945e-18], 'true,false,false': [2.8712664429960945e-18, nan], 'false': [-1.0154478883766675e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(B, D).;true;true
2;true,false;genre(A, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(A, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
4;true,false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
5;true,false;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
8;true,false;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.1418510649004877;  // std dev = 2.79e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.14185106490048766;  // std dev = 7.74e-08, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109542;  // std dev = 5.96e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.6978088468073818;  // std dev = 0.134, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | else return -0.12544463852839133;  // std dev = 2.11e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.12544463852839144;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5588670962570225;  // std dev = 0.019, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.11231637819360624;  // std dev = 5.87e-08, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783633;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( actor(B) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else if ( female(A) )
%   | | | then return 0.416662484428777;  // std dev = 4.71e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.42193747984077656;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else if ( female(B) )
%   | then return -0.10159632948783634;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( female(A) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.320134899712551;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.3237125322461166;  // std dev = 1.18e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926098;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.09269127618926105;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.09269127618926107;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.2547785231039893;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2572187130132063;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( female(B) )
%   | | | then return -0.08518475138839687;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.08518475138839687;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( actor(B) )
%   | then if ( actor(A) )
%   | | then if ( female(A) )
%   | | | then return -0.08518475138839683;  // std dev = 1.18e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return -0.0851847513883968;  // std dev = 1.97e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109177;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.20947955893769507;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2112022737235535;  // std dev = 4.94e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return -0.07877675473109175;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else if ( female(B) )
%   | then if ( female(A) )
%   | | then return -0.07877675473109177;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.07877675473109179;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( female(A) )
%   | | then return -0.07877675473109179;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( actor(A) )
%   | | | then return -0.07877675473109179;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return -0.07877675473109177;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17689245612269433;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.17815528959846103;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( female(A) )
%   | | then return -0.07324622576333704;  // std dev = 1.32e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( actor(A) )
%   | | | then return -0.07324622576333704;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07324622576333704;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.15258905440468434;  // std dev = 1.05e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.15354658430585563;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return -0.06842697784420275;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( female(A) )
%   | then return -0.06842697784420275;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( female(B) )
%   | | then if ( actor(A) )
%   | | | then return -0.06842697784420272;  // std dev = 2.63e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( actor(B) )
%   | | | then return -0.06842697784420272;  // std dev = 5.27e-09, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1338861655629086;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.1346333944322895;  // std dev = 3.73e-09, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( female(A) )
%   | | | then return -0.06419184008202618;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.06419184008202618;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.06419184008202625;  // std dev = 0.000, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */


Results
   AUC ROC   = 0.998125
   AUC PR    = 0.950144
   CLL	      = -0.079046
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 1.398 seconds
Total inference time: 1.737 seconds
AUC ROC: 0.998125


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064052
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.027 seconds
Refined model CLL: -0.064052


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998125
   AUC PR    = 0.950144
   CLL	      = -0.079046
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 4.348 seconds
Total inference time: 1.737 seconds
AUC ROC: 0.998125
Total revision time: 4.348
Best scored revision CLL: -0.064052


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 02:32:56
{'AUC ROC': 0.998125, 'AUC PR': 0.950144, 'CLL': -0.079046, 'Precision': [1.0, 0.5], 'Recall': 0.817901, 'F1': 0.89983, 'Learning time': 4.348, 'Inference time': 1.737, 'parameter': {'AUC ROC': 0.977686, 'AUC PR': 0.861626, 'CLL': -0.083342, 'Precision': [1.0, 0.5], 'Recall': 0.817901, 'F1': 0.89983, 'Learning time': 0.919, 'Inference time': 1.679}}


Starting fold 3

Target train facts examples: 341
Target train pos examples: 178
Target train neg examples: 3543

Target test facts examples: 737
Target test pos	 examples: 204
Target test neg examples: 10693

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
1;true;haswordtitle(D, C).;true;true
1;true,true;haswordauthor(E, C).;true;true
1;true,true,true;author(F, E), title(F, D).;false;false
1;true,true,false;title(G, D), venue(G, B).;false;false
1;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
1;true,false,true;title(J, I), venue(J, B).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, B).;false;true
2;true,true,false;title(F, D), venue(F, A).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
2;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
2;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
3;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
3;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
3;true,false,false;haswordvenue(B, L), haswordauthor(M, L).;false;false
3;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordauthor(D, C).;true;true
6;true,true;author(E, D), venue(E, A).;false;true
6;true,true,false;haswordtitle(F, C).;false;false
6;true,false;haswordtitle(G, C).;true;true
6;true,false,true;title(H, G), venue(H, B).;false;false
6;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
7;false,true;haswordauthor(N, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995104;  // std dev = 7.54e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.2805627282029616;  // std dev = 5.320, 116.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004881;  // std dev = 0.000, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6701351318758111;  // std dev = 2.319, 137.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=129 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2189475723071472;  // std dev = 5.403, 125.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.12544463852839194;  // std dev = 0.000, 271.000 (wgt'ed) examples reached here.  /* #neg=271 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5381679299930766;  // std dev = 1.725, 134.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.15149755338380877;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.23962109083249938;  // std dev = 5.174, 108.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.11231637819360696;  // std dev = 0.000, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.18087913572743572;  // std dev = 0.406, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( movie(E, A) )
%   | | then return 0.3567627953556619;  // std dev = 0.339, 225.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=178 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1015963294878366;  // std dev = 0.000, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.334615527621211;  // std dev = 1.088, 132.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.11351993459564542;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.11455199983025535;  // std dev = 5.213, 110.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926042;  // std dev = 8.93e-09, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.18355223454714603;  // std dev = 0.519, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.27731281119814377;  // std dev = 1.98e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.11441660939247097;  // std dev = 5.091, 104.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839678;  // std dev = 5.89e-09, 270.000 (wgt'ed) examples reached here.  /* #neg=270 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1498891788548469;  // std dev = 0.341, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(B, E) )
%   | | then return 0.22528252538011012;  // std dev = 1.33e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.08326560739419858;  // std dev = 5.112, 105.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109143;  // std dev = 6.14e-08, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16068037034719054;  // std dev = 1.303, 137.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=129 */
%   | else if ( movie(E, B) )
%   | | then return 0.03147053933290308;  // std dev = 5.226, 121.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.0732462257633369;  // std dev = 6.38e-09, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.24756253794623362;  // std dev = 0.351, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( genre(B, E) )
%   | | then return 0.16505239204537045;  // std dev = 3.65e-08, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.034592060720627774;  // std dev = 5.213, 110.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420283;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #neg=267 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.11945914985939206;  // std dev = 1.132, 137.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.061900165212080534;  // std dev = 1.86e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.030280577523946525;  // std dev = 5.194, 109.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06419184008202619;  // std dev = 3.36e-09, 258.000 (wgt'ed) examples reached here.  /* #neg=258 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.993692
   AUC PR    = 0.961008
   CLL	      = -0.189466
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95098
   F1        = 0.974874


Total learning time: 1.252 seconds
Total inference time: 1.673 seconds
AUC ROC: 0.993692


Results scoring model
   AUC ROC   = 0.976419
   AUC PR    = 0.83578
   CLL	      = -0.16024
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total scoring time: 1.022 seconds
Parameter learned model CLL: -0.16024


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [1.05e-08, 22, 0], 'true,false,true': [7.54e-07, 0, 129], 'true,false,false,true': [5.32, 67, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 266, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)'}, {'true,true': [2.319, 8, 129], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [5.403, 76, 49], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 271, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.725, 5, 129], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [5.174, 59, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 286, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.406, 24, 0], 'true,false,true': [0.339, 47, 178], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 272, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.088, 3, 129], 'true,false,true': [0.0, 21, 0], 'true,false,false,true': [5.213, 61, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.93e-09, 298, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.519, 19, 0], 'true,false,true': [1.98e-07, 0, 129], 'true,false,false,true': [5.091, 55, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.89e-09, 270, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.341, 11, 0], 'true,false,true': [1.33e-07, 0, 129], 'true,false,false,true': [5.112, 56, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.14e-08, 250, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [1.303, 8, 129], 'true,false,true': [5.226, 72, 49], 'true,false,false': [0.0, 0, 0], 'false,true': [6.38e-09, 279, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.351, 10, 0], 'true,false,true': [3.65e-08, 0, 129], 'true,false,false,true': [5.213, 61, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 267, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [1.132, 8, 129], 'true,false,true': [1.86e-09, 8, 0], 'true,false,false,true': [5.194, 60, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.36e-09, 258, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.22222222222222762, -7.011934892369409e-17], 'true': [5.046468293750712e-18, 0.19868388171595736], 'true,false': [4.40646657835721e-15, 0.24398038049940568], 'true,false,false': [0.24398038049940568, nan], 'false': [-7.011934892369409e-17, nan]}, {'': [0.18274005942436763, -7.210304514170758e-17], 'true': [0.03925253774117052, 0.23355536293875412], 'true,false': [0.23355536293875412, nan], 'true,false,true': [nan, 0.23355536293875412]}, {'': [0.1493267411847491, -1.1024592272501555e-16], 'true': [0.022218923865159085, 0.24151439075863557], 'true,false': [0.0, 0.24785665294924555], 'true,false,false': [0.24785665294924555, nan], 'false': [-1.1024592272501555e-16, nan]}, {'': [0.12938342572772618, -6.204187490552346e-17], 'true': [0.006867670369020441, 0.11459067936996248], 'true,false': [0.11459067936996248, nan], 'false': [-6.204187490552346e-17, nan]}, {'': [0.12776683762015606, 8.047254138222611e-17], 'true': [0.008960029406356068, 0.21442725351246322], 'true,false': [-7.93016446160826e-18, 0.24702479338843045], 'true,false,false': [0.24702479338843045, nan], 'false': [8.047254138222611e-17, nan]}, {'': [0.12046826798826228, 3.454027187722709e-17], 'true': [0.014203143470566294, 0.11777399498172626], 'true,false': [3.029445772620582e-16, 0.24916789940828482], 'true,false,false': [0.24916789940828482, nan], 'false': [3.454027187722709e-17, nan]}, {'': [0.11606668947514164, 1.509903313490213e-17], 'true': [0.010587428233516704, 0.1166700720221831], 'true,false': [1.3770208057366282e-16, 0.24888888888888813], 'true,false,false': [0.24888888888888813, nan], 'false': [1.509903313490213e-17, nan]}, {'': [0.11659736000573924, 4.0588798749736907e-17], 'true': [0.01239208743704842, 0.22571657194156344], 'true,false': [0.22571657194156344, nan], 'false': [4.0588798749736907e-17, nan]}, {'': [0.11847266826931724, -2.6612087481651693e-17], 'true': [0.012331818493826651, 0.11792150297617773], 'true,false': [1.0327656043024712e-17, 0.2470247933884291], 'true,false,false': [0.2470247933884291, nan], 'false': [-2.6612087481651693e-17, nan]}, {'': [0.1137505405876409, 1.1188294046610105e-17], 'true': [0.009354068676414511, 0.23107527597419114], 'true,false': [4.336808689942018e-19, 0.2474539180203678], 'true,false,false': [0.2474539180203678, nan], 'false': [1.1188294046610105e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(B, D).;true;true
2;true,false;genre(A, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
4;true,false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
5;true,false;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
8;true,false;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995104;  // std dev = 7.54e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995122;  // std dev = 1.69e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.14185106490048768;  // std dev = 5.37e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.1418510649004881;  // std dev = 0.000, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109565;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.12544463852839155;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   else return -0.12544463852839197;  // std dev = 0.000, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.5553664367462839;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else return 0.5394692268667625;  // std dev = 0.102, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360635;  // std dev = 1.39e-08, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.5553664367462833;  // std dev = 1.40e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.11231637819360632;  // std dev = 3.49e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.11231637819360689;  // std dev = 0.000, 260.000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.4192969148231371;  // std dev = 0.026, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.10694858004497725;  // std dev = 0.181, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   else return -0.10159632948783662;  // std dev = 0.000, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.32252978603666227;  // std dev = 0.019, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else return -0.16317727593547707;  // std dev = 9.13e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(A, E) )
%   | | then return -0.09224213424939776;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3203234625871047;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.09224213424939787;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.09269127618926046;  // std dev = 1.17e-07, 262.000 (wgt'ed) examples reached here.  /* #neg=262 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10165551680110985;  // std dev = 0.108, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.2564130626714406;  // std dev = 0.017, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.25490721055234344;  // std dev = 6.32e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.084803436736232;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.08518475138839678;  // std dev = 1.01e-07, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09104300872881643;  // std dev = 0.111, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( genre(B, E) )
%   | | then return 0.21063427489285244;  // std dev = 0.014, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.20957048315757443;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.07844922811534437;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.07877675473109143;  // std dev = 5.58e-08, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17752463385150277;  // std dev = 0.014, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.07724806090396971;  // std dev = 0.120, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   else return -0.07324622576333686;  // std dev = 1.12e-07, 268.000 (wgt'ed) examples reached here.  /* #neg=268 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08454217981799723;  // std dev = 0.101, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( genre(B, E) )
%   | | then return 0.15325946640848156;  // std dev = 0.011, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.152566540661516;  // std dev = 3.65e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.06790636397072007;  // std dev = 2.36e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.06842697784420297;  // std dev = 0.000, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.12550982215974135;  // std dev = 0.523, 134.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.0610372450055381;  // std dev = 5.27e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.13386858581121047;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.06373230332889245;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.06419184008202605;  // std dev = 9.19e-08, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06349
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.564 seconds
Total inference time: 1.615 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.066249
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.929 seconds
Refined model CLL: -0.066249


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06349
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.767 seconds
Total inference time: 1.615 seconds
AUC ROC: 1.0
Total revision time: 4.767
Best scored revision CLL: -0.066249


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 02:33:05
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.06349, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 4.767, 'Inference time': 1.615, 'parameter': {'AUC ROC': 0.993692, 'AUC PR': 0.961008, 'CLL': -0.189466, 'Precision': [1.0, 0.5], 'Recall': 0.95098, 'F1': 0.974874, 'Learning time': 1.252, 'Inference time': 1.673}}


Starting fold 4

Target train facts examples: 151
Target train pos examples: 45
Target train neg examples: 1891

Target test facts examples: 927
Target test pos	 examples: 337
Target test neg examples: 12345

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
1;true;haswordtitle(D, C).;true;true
1;true,true;haswordauthor(E, C).;true;true
1;true,true,true;author(F, E), title(F, D).;false;false
1;true,true,false;title(G, D), venue(G, B).;false;false
1;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
1;true,false,true;title(J, I), venue(J, B).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, B).;false;true
2;true,true,false;title(F, D), venue(F, A).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
2;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
2;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
3;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
3;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
3;true,false,false;haswordvenue(B, L), haswordauthor(M, L).;false;false
3;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordauthor(D, C).;true;true
6;true,true;author(E, D), venue(E, A).;false;true
6;true,true,false;haswordtitle(F, C).;false;false
6;true,false;haswordtitle(G, C).;true;true
6;true,false,true;title(H, G), venue(H, B).;false;false
6;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
7;false,true;haswordauthor(N, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 6.83e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.70110562849923;  // std dev = 0.836, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.1254446385283916;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5598973421649127;  // std dev = 5.96e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.11231637819360636;  // std dev = 1.29e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.11231637819360628;  // std dev = 4.59e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.2716027978669853;  // std dev = 0.236, 63.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=45 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.10159632948783619;  // std dev = 4.47e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3564617089902953;  // std dev = 7.30e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926096;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.12920466398063774;  // std dev = 1.67e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.27944496828970367;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.11535073004821196;  // std dev = 7.45e-09, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839679;  // std dev = 1.86e-09, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.2267662962874066;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.10409180675917311;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109168;  // std dev = 3.57e-08, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18947460361928586;  // std dev = 4.21e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( movie(E, B) )
%   | | then return -0.09146443336533147;  // std dev = 0.040, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06727475439293844;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.1620705355120442;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.08721524782811113;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420268;  // std dev = 3.09e-09, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14124680468736894;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.0631742580785026;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.08051752176174617;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.978805
   AUC PR    = 0.865091
   CLL	      = -0.08162
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total learning time: 0.852 seconds
Total inference time: 1.897 seconds
AUC ROC: 0.978805


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.068951
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.858 seconds
Parameter learned model CLL: -0.068951


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [2.23e-07, 0, 45], 'true,false,false,true': [2.58e-08, 28, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.83e-08, 69, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)'}, {'true,true': [0.836, 1, 45], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 27, 0], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 61, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [5.96e-08, 0, 45], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.29e-08, 21, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.59e-08, 61, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.236, 18, 45], 'true,false,false': [0.0, 0, 0], 'false,true': [4.47e-08, 65, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [7.3e-08, 0, 45], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [1.67e-08, 18, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 41, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 45], 'true,false,false,true': [7.45e-09, 27, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 66, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.0, 0, 45], 'true,false,false,true': [0.0, 20, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.57e-08, 70, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [4.21e-08, 0, 45], 'true,false,true': [0.04, 26, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 61, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 45], 'true,false,false,true': [0.0, 22, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.09e-09, 63, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 45], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [0.0, 18, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 57, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.24287400910777565, 6.75787928032704e-17], 'true': [0.0, 0.23644210921373646], 'true,false': [1.105288700071267e-15, 2.3790493384824782e-17], 'false': [6.75787928032704e-17, nan], 'true,false,false': [2.3790493384824782e-17, nan]}, {'': [0.16879283274650478, -4.186086814160426e-17], 'true': [0.015181896531630958, -4.11193712824132e-18], 'true,false': [-4.11193712824132e-18, nan], 'true,false,true': [nan, -4.11193712824132e-18]}, {'': [0.09965528469143714, 3.45807171604557e-17], 'true': [7.894919286223336e-17, 7.569702440626067e-18], 'false': [3.45807171604557e-17, nan], 'true,false': [0.0, 7.93016446160826e-18], 'true,false,false': [7.93016446160826e-18, nan]}, {'': [0.05698275953948903, 3.0744637605004337e-17], 'true': [0.0, 0.05571103546336008], 'true,false': [0.05571103546336008, nan], 'false': [3.0744637605004337e-17, nan]}, {'': [0.0495291435465851, -6.769652589177784e-18], 'true': [1.1842378929335003e-16, 0.00011999047392032281], 'true,false': [0.0, 1.5419764230904953e-17], 'true,false,false': [1.5419764230904953e-17, nan], 'false': [-6.769652589177784e-18, nan]}, {'': [0.03666388888220135, 4.20539024479226e-18], 'true': [0.0, 0.036530541427997214], 'true,false': [-1.8750433304780422e-16, 2.05596856412066e-18], 'false': [4.20539024479226e-18, nan], 'true,false,false': [2.05596856412066e-18, nan]}, {'': [0.02404021671527727, 1.8239378261699e-17], 'true': [0.0, 0.023318432169567475], 'true,false': [-1.282924384011292e-16, -1.3877787807814457e-17], 'false': [1.8239378261699e-17, nan], 'true,false,false': [-1.3877787807814457e-17, nan]}, {'': [0.018340743398684953, -9.10018872643571e-19], 'true': [3.947459643111668e-17, 6.0346016041707074e-05], 'true,false': [6.0346016041707074e-05, nan], 'false': [-9.10018872643571e-19, nan]}, {'': [0.013920058131097446, 7.93016446160826e-18], 'true': [0.0, 0.013705049623025087], 'true,false': [-4.9343245538895844e-17, -1.2616170734376778e-17], 'false': [7.93016446160826e-18, nan], 'true,false,false': [-1.2616170734376778e-17, nan]}, {'': [0.0103212007410732, -2.921639538487254e-18], 'true': [-1.4802973661668754e-17, 2.7070991566781333e-05], 'true,false': [0.0, -5.396917480816733e-18], 'false': [-2.921639538487254e-18, nan], 'true,false,false': [-5.396917480816733e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(B, D).;true;true
2;true,false;genre(A, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(A, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
4;true,false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
5;true,false;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
8;true,false;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else return -0.14185106490048766;  // std dev = 6.83e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.12544463852839155;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5553664367462839;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.11231637819360626;  // std dev = 4.94e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else return 0.41751358415831025;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else if ( female(B) )
%   | then return -0.10159632948783635;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( female(A) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783634;  // std dev = 1.05e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | | else return -0.10159632948783633;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.3207118471601497;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.3207118471601495;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( genre(A, E) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( female(A) )
%   | | | then return -0.09269127618926097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.09269127618926094;  // std dev = 9.13e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.09269127618926104;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.2551722425694896;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( female(B) )
%   | | | then return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.08518475138839685;  // std dev = 1.18e-08, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( actor(B) )
%   | then if ( actor(A) )
%   | | then if ( female(B) )
%   | | | then return -0.08518475138839686;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.08518475138839679;  // std dev = 1.67e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.08518475138839683;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.20975771563253562;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.20975771563253542;  // std dev = 4.94e-08, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else return -0.07877675473109176;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else if ( female(B) )
%   | then if ( female(A) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.07877675473109177;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1647252368244046;  // std dev = 0.083, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | else if ( female(A) )
%   | | then return -0.07324622576333704;  // std dev = 9.31e-10, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( female(B) )
%   | | | then return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.07404212747167437;  // std dev = 0.012, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return -0.07324622576333704;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.4318602447261008;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.1543517491972354;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.15435174919723557;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( female(B) )
%   | | | then return -0.06842697784420272;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.06838819416934695;  // std dev = 8.87e-05, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( female(B) )
%   | then return -0.06842697784420274;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( actor(A) )
%   | | then if ( actor(B) )
%   | | | then return -0.06842697784420272;  // std dev = 5.27e-09, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.0684269778442027;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13526103771082584;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.05318113683143524;  // std dev = 4.01e-05, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( female(A) )
%   | | | then return -0.06419416990514601;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.0641615294014226;  // std dev = 9.82e-05, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.06419184008202625;  // std dev = 0.000, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */


Results
   AUC ROC   = 0.998998
   AUC PR    = 0.967423
   CLL	      = -0.076256
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total learning time: 1.221 seconds
Total inference time: 2.137 seconds
AUC ROC: 0.998998


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06442
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.878 seconds
Refined model CLL: -0.06442


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998998
   AUC PR    = 0.967423
   CLL	      = -0.076256
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total learning time: 3.809 seconds
Total inference time: 2.137 seconds
AUC ROC: 0.998998
Total revision time: 3.809
Best scored revision CLL: -0.06442


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 02:33:13
{'AUC ROC': 0.998998, 'AUC PR': 0.967423, 'CLL': -0.076256, 'Precision': [1.0, 0.5], 'Recall': 0.824926, 'F1': 0.904065, 'Learning time': 3.809, 'Inference time': 2.137, 'parameter': {'AUC ROC': 0.978805, 'AUC PR': 0.865091, 'CLL': -0.08162, 'Precision': [1.0, 0.5], 'Recall': 0.824926, 'F1': 0.904065, 'Learning time': 0.852, 'Inference time': 1.897}}


Starting fold 5

Target train facts examples: 163
Target train pos examples: 45
Target train neg examples: 2071

Target test facts examples: 915
Target test pos	 examples: 337
Target test neg examples: 12165

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
1;true;haswordtitle(D, C).;true;true
1;true,true;haswordauthor(E, C).;true;true
1;true,true,true;author(F, E), title(F, D).;false;false
1;true,true,false;title(G, D), venue(G, B).;false;false
1;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
1;true,false,true;title(J, I), venue(J, B).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, B).;false;true
2;true,true,false;title(F, D), venue(F, A).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
2;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
2;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
3;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
3;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
3;true,false,false;haswordvenue(B, L), haswordauthor(M, L).;false;false
3;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordauthor(D, C).;true;true
6;true,true;author(E, D), venue(E, A).;false;true
6;true,true,false;haswordtitle(F, C).;false;false
6;true,false;haswordtitle(G, C).;true;true
6;true,false,true;title(H, G), venue(H, B).;false;false
6;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
7;false,true;haswordauthor(N, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995115;  // std dev = 2.38e-07, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.18072958026080266;  // std dev = 2.603, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 6.99e-08, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109548;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10559866146433124;  // std dev = 2.699, 37.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.1254446385283916;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5329005252325678;  // std dev = 0.797, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.15519789783390064;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.14218536903892806;  // std dev = 2.603, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.11231637819360625;  // std dev = 5.27e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.288202384076372;  // std dev = 0.352, 65.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=45 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.10159632948783624;  // std dev = 3.49e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.35463538909116776;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.13591995811614524;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.01738521787536589;  // std dev = 2.701, 37.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.12073171715394095;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.27820947145896135;  // std dev = 5.58e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.06639684165420967;  // std dev = 2.603, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839679;  // std dev = 2.46e-09, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1084907485966699;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.22590673665612118;  // std dev = 4.94e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.03399094695948619;  // std dev = 2.640, 33.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109177;  // std dev = 1.29e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18885353721632905;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( movie(E, B) )
%   | | then return 0.015005032051368682;  // std dev = 2.659, 35.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09977414248860579;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.16160552468984957;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.033716920612377785;  // std dev = 2.622, 32.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420267;  // std dev = 3.48e-09, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1408877740729423;  // std dev = 2.58e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.029202343402561122;  // std dev = 2.727, 39.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.982257
   AUC PR    = 0.888508
   CLL	      = -0.132641
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.854599
   F1        = 0.9216


Total learning time: 0.832 seconds
Total inference time: 1.842 seconds
AUC ROC: 0.982257


Results scoring model
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.136359
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total scoring time: 0.928 seconds
Parameter learned model CLL: -0.136359


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [2.38e-07, 0, 35], 'true,false,false,true': [2.603, 21, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.99e-08, 71, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)'}, {'true,true': [0.0, 0, 35], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [2.699, 27, 10], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 62, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.797, 1, 35], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [2.603, 21, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.27e-08, 67, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.352, 20, 45], 'true,false,false': [0.0, 0, 0], 'false,true': [3.49e-08, 53, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 35], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [2.701, 27, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 56, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [5.58e-08, 0, 35], 'true,false,false,true': [2.603, 21, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.46e-09, 73, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [4.94e-08, 0, 35], 'true,false,false,true': [2.64, 23, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.29e-08, 54, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 35], 'true,false,true': [2.659, 25, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 68, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.86e-09, 3, 0], 'true,false,true': [0.0, 0, 35], 'true,false,false,true': [2.622, 22, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.48e-09, 70, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [2.58e-08, 0, 35], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [2.727, 29, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 68, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21694214876033094, 6.880255363874209e-17], 'true': [nan, 0.21694214876033094], 'true,false': [1.6240976817373718e-15, 0.21852237252861612], 'true,false,false': [0.21852237252861612, nan], 'false': [6.880255363874209e-17, nan]}, {'': [0.1953205599153646, -4.118569284899774e-17], 'true': [-7.105427357601002e-16, 0.19689606650291785], 'true,false': [0.19689606650291785, nan], 'true,false,true': [nan, 0.19689606650291785]}, {'': [0.15274218494008587, 4.142623226213271e-17], 'true': [0.017665101304975266, 0.20635571257339555], 'true,false': [-4.625929269271485e-18, 0.21852237252861606], 'true,false,false': [0.21852237252861606, nan], 'false': [4.142623226213271e-17, nan]}, {'': [0.12375884741802186, 2.3042364662031552e-17], 'true': [nan, 0.12375884741802186], 'true,false': [0.12375884741802186, nan], 'false': [2.3042364662031552e-17, nan]}, {'': [0.12843805206118175, -9.912705577010326e-19], 'true': [-2.5376526277146434e-17, 0.18406291677332148], 'true,false': [-4.625929269271485e-18, 0.1972242512783053], 'true,false,false': [0.1972242512783053, nan], 'false': [-9.912705577010326e-19, nan]}, {'': [0.11302661909208661, 6.083413833562501e-18], 'true': [0.0, 0.11381424575313653], 'true,false': [8.881784197001253e-17, 0.21852237252861625], 'true,false,false': [0.21852237252861625, nan], 'false': [6.083413833562501e-18, nan]}, {'': [0.11090807876258367, 3.0839528461809902e-18], 'true': [0.0, 0.1116954959291053], 'true,false': [6.97854472621527e-17, 0.21120293847566585], 'true,false,false': [0.21120293847566585, nan], 'false': [3.0839528461809902e-18, nan]}, {'': [0.10858540477840728, -2.44902137784961e-18], 'true': [-6.97854472621527e-17, 0.20205915818276887], 'true,false': [0.20205915818276887, nan], 'false': [-2.44902137784961e-18, nan]}, {'': [0.10376579409996053, 1.1895246692412391e-17], 'true': [1.1564823173178713e-18, 0.10669261627516845], 'true,false': [-1.586032892321652e-17, 0.21484375000000028], 'true,false,false': [0.21484375000000028, nan], 'false': [1.1895246692412391e-17, nan]}, {'': [0.1076966298141296, -5.714383214982423e-18], 'true': [1.9032394707859827e-17, 0.1906640368178829], 'true,false': [nan, 0.1906640368178829], 'true,false,false': [0.1906640368178829, nan], 'false': [-5.714383214982423e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(B, D).;true;true
2;true,false;genre(A, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
4;true,false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
5;true,false;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
8;true,false;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995115;  // std dev = 2.38e-07, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( actor(B) )
%   | | then return -0.1418510649004877;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.14185106490048766;  // std dev = 6.66e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109548;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( actor(B) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1254446385283916;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5553664367462844;  // std dev = 9.42e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.11231637819360635;  // std dev = 1.49e-08, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.11231637819360625;  // std dev = 5.37e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.41751358415831025;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.1015963294878362;  // std dev = 4.47e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3207118471601495;  // std dev = 2.98e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926103;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return 0.3207118471601494;  // std dev = 2.58e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.09269127618926107;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.25517224256948956;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( actor(B) )
%   | | | then return -0.08518475138839683;  // std dev = 1.49e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return 0.2551722425694894;  // std dev = 1.83e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.08518475138839679;  // std dev = 1.83e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.40353985444844553;  // std dev = 0.459, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253542;  // std dev = 5.37e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109175;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return 0.2097577156325356;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.0787767547310917;  // std dev = 2.79e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1770964977452775;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( actor(B) )
%   | | then return -0.07138682405768434;  // std dev = 0.032, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else return 0.17709649774527736;  // std dev = 7.45e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07324622576333704;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.050497654195271004;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.1527438580936709;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( actor(B) )
%   | | | then return -0.0685456000537758;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0.15274385809367094;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06842697784420268;  // std dev = 2.47e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801115;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( actor(B) )
%   | | then return -0.06367472685548553;  // std dev = 0.016, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else return 0.13400703000801117;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06419184008202625;  // std dev = 0.000, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */


Results
   AUC ROC   = 0.997986
   AUC PR    = 0.873057
   CLL	      = -0.078034
   Precision = 0.742291 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.852086


Total learning time: 1.084 seconds
Total inference time: 1.631 seconds
AUC ROC: 0.997986


Results scoring model
   AUC ROC   = 0.999759
   AUC PR    = 0.978261
   CLL	      = -0.06554
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total scoring time: 0.864 seconds
Refined model CLL: -0.06554


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.997986
   AUC PR    = 0.873057
   CLL	      = -0.078034
   Precision = 0.742291 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.852086


Total learning time: 3.708 seconds
Total inference time: 1.631 seconds
AUC ROC: 0.997986
Total revision time: 3.708
Best scored revision CLL: -0.06554


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 02:33:21
{'AUC ROC': 0.997986, 'AUC PR': 0.873057, 'CLL': -0.078034, 'Precision': [0.742291, 0.5], 'Recall': 1.0, 'F1': 0.852086, 'Learning time': 3.708, 'Inference time': 1.631, 'parameter': {'AUC ROC': 0.982257, 'AUC PR': 0.888508, 'CLL': -0.132641, 'Precision': [1.0, 0.5], 'Recall': 0.854599, 'F1': 0.9216, 'Learning time': 0.832, 'Inference time': 1.842}}


Starting fold 1

Target train facts examples: 215
Target train pos examples: 56
Target train neg examples: 3308

Target test facts examples: 863
Target test pos	 examples: 326
Target test neg examples: 10928

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
1;true;haswordtitle(D, C).;true;true
1;true,true;haswordauthor(E, C).;true;true
1;true,true,true;author(F, E), title(F, D).;false;false
1;true,true,false;title(G, D), venue(G, B).;false;false
1;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
1;true,false,true;title(J, I), venue(J, B).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, B).;false;true
2;true,true,false;title(F, D), venue(F, A).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
2;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
2;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
3;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
3;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
3;true,false,false;haswordvenue(B, L), haswordauthor(M, L).;false;false
3;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordauthor(D, C).;true;true
6;true,true;author(E, D), venue(E, A).;false;true
6;true,true,false;haswordtitle(F, C).;false;false
6;true,false;haswordtitle(G, C).;true;true
6;true,false,true;title(H, G), venue(H, B).;false;false
6;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
7;false,true;haswordauthor(N, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1418510649004877;  // std dev = 3.16e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.30e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.12544463852839147;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5553664367462837;  // std dev = 1.03e-07, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.11231637819360642;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.11231637819360625;  // std dev = 5.67e-08, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.21098598410554212;  // std dev = 0.254, 93.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=56 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.10159632948783615;  // std dev = 5.96e-08, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3672634352855962;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926096;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.12253653405511283;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.2867465293629814;  // std dev = 8.94e-08, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.10995873854284478;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0851847513883968;  // std dev = 5.74e-09, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.23183391531852096;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09964983490135425;  // std dev = 1.05e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109168;  // std dev = 3.80e-08, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19312694252784185;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( movie(E, B) )
%   | | then return -0.09042924589898374;  // std dev = 0.017, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07245916325783547;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.16479903775372126;  // std dev = 2.11e-08, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.08384617199092792;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420267;  // std dev = 4.17e-09, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13364961972443223;  // std dev = 0.548, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.06773760347955449;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.07762612427625766;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.978388
   AUC PR    = 0.863056
   CLL	      = -0.083522
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total learning time: 1.0 seconds
Total inference time: 1.696 seconds
AUC ROC: 0.978388


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.067422
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.998 seconds
Parameter learned model CLL: -0.067422


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 56], 'true,false,false,true': [3.16e-08, 33, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.3e-08, 89, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)'}, {'true,true': [0.0, 0, 56], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 31, 0], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 82, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.03e-07, 0, 56], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 36, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.67e-08, 71, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.254, 37, 56], 'true,false,false': [0.0, 0, 0], 'false,true': [5.96e-08, 78, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 56], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [0.0, 36, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 81, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [8.94e-08, 0, 56], 'true,false,false,true': [0.0, 34, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.74e-09, 93, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 56], 'true,false,false,true': [1.05e-08, 48, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.8e-08, 72, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 56], 'true,false,true': [0.017, 39, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 81, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [2.11e-08, 0, 56], 'true,false,false,true': [0.0, 34, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.17e-09, 81, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.548, 1, 56], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [0.0, 30, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 92, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2366863905325441, 7.734137924355023e-17], 'true': [0.0, 0.23330387577326067], 'true,false': [-1.2688263138573217e-16, 3.027880976250427e-17], 'false': [7.734137924355023e-17, nan], 'true,false,false': [3.027880976250427e-17, nan]}, {'': [0.16373457334384328, -2.166288828536891e-17], 'true': [-1.9032394707859825e-16, -7.162729191130042e-18], 'true,false': [-7.162729191130042e-18, nan], 'true,false,true': [nan, -7.162729191130042e-18]}, {'': [0.10679827810272481, 4.5347137625534564e-17], 'true': [1.9032394707859825e-16, -9.00180830777154e-18], 'false': [4.5347137625534564e-17, nan], 'true,false': [0.0, -1.0793834961633467e-17], 'true,false,false': [-1.0793834961633467e-17, nan]}, {'': [0.06489848551431303, 4.554761126667309e-17], 'true': [0.0, 0.06455687504538214], 'true,false': [0.06455687504538214, nan], 'false': [4.554761126667309e-17, nan]}, {'': [0.05742475679378583, 0.0], 'true': [-7.930164461608261e-17, 4.441359974355352e-05], 'true,false': [0.0, -6.1679056923619804e-18], 'false': [0.0, nan], 'true,false,false': [-6.1679056923619804e-18, nan]}, {'': [0.03723737592268675, 3.1038493161563513e-17], 'true': [0.0, 0.036992855862763005], 'true,false': [1.427429603089487e-16, -8.163404592832034e-18], 'false': [3.1038493161563513e-17, nan], 'true,false,false': [-8.163404592832034e-18, nan]}, {'': [0.027307822601851772, 2.0045693500176437e-17], 'true': [nan, 0.027307822601851772], 'true,false': [-7.930164461608261e-17, 2.3129646346357427e-18], 'false': [2.0045693500176437e-17, nan], 'true,false,false': [2.3129646346357427e-18, nan]}, {'': [0.019460362704147992, -6.853228547068867e-18], 'true': [-2.3790493384824782e-17, 7.3394892117844115e-06], 'true,false': [7.3394892117844115e-06, nan], 'false': [-6.853228547068867e-18, nan]}, {'': [0.014791953946383305, 1.7818394222379055e-17], 'true': [0.0, 0.014532559800782854], 'true,false': [7.93016446160826e-18, -3.2653618371328133e-18], 'false': [1.7818394222379055e-17, nan], 'true,false,false': [-3.2653618371328133e-18, nan]}, {'': [0.013595295141715915, -1.2671023650613199e-17], 'true': [0.005268867865829634, 5.729463489066028e-06], 'true,false': [0.0, -6.47630097698008e-18], 'true,false,false': [-6.47630097698008e-18, nan], 'false': [-1.2671023650613199e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(B, D).;true;true
2;true,false;genre(A, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(A, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
4;true,false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
5;true,false;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
8;true,false;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.14185106490048766;  // std dev = 7.74e-08, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.12544463852839133;  // std dev = 2.11e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.12544463852839155;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5553664367462837;  // std dev = 1.03e-07, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.1123163781936064;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else return -0.11231637819360622;  // std dev = 6.99e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783633;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( actor(B) )
%   | | then if ( female(A) )
%   | | | then return -0.10159632948783635;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.10159632948783635;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else return 0.4175135841583103;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else if ( female(A) )
%   | then if ( female(B) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( female(B) )
%   | | then return -0.10159632948783634;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.32071184716014955;  // std dev = 5.27e-09, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.2994621056183229;  // std dev = 0.114, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.092691276189261;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   else if ( female(A) )
%   | then return -0.09269127618926105;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else return -0.09269127618926107;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16009319516071888;  // std dev = 0.259, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.25517224256948956;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.2592319228753095;  // std dev = 5.58e-08, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( female(A) )
%   | | | then return -0.08518475138839686;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.08518475138839685;  // std dev = 9.13e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( female(A) )
%   | then if ( female(B) )
%   | | then return -0.08518475138839686;  // std dev = 2.28e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return -0.08518475138839682;  // std dev = 3.36e-09, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( female(B) )
%   | | then return -0.08518475138839682;  // std dev = 3.36e-09, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return -0.08518475138839682;  // std dev = 3.48e-09, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.2097577156325355;  // std dev = 5.27e-09, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.2126213471009252;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( female(B) )
%   | | then return -0.07877675473109175;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return -0.07781902574083731;  // std dev = 0.002, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( female(A) )
%   | then if ( female(B) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.07877675473109176;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else if ( female(B) )
%   | | then if ( actor(A) )
%   | | | then return -0.07877675473109176;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.07877675473109176;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17709649774527747;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.1791940033364802;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( female(A) )
%   | | then if ( female(B) )
%   | | | then return -0.07324622576333704;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.07331126414911882;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( female(B) )
%   | | | then return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.07286315686607611;  // std dev = 0.005, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else if ( actor(B) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | else if ( female(A) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06382362246108889;  // std dev = 6.94e-05, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.15274385809367083;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.1543331712822171;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( female(B) )
%   | | | then return -0.06842697784420272;  // std dev = 2.63e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.06850105930299895;  // std dev = 5.42e-05, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( female(B) )
%   | then if ( female(A) )
%   | | then return -0.06842697784420272;  // std dev = 9.31e-10, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return -0.06842697784420274;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else if ( female(A) )
%   | | then return -0.06842697784420276;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return -0.06842697784420276;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13400703000801117;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.13524656285218306;  // std dev = 1.86e-09, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( genre(A, E) )
%   | | then return -0.06017149468384713;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(B) )
%   | | | then return -0.06419184008202618;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.06425899439285056;  // std dev = 3.81e-05, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.06419184008202625;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */


Results
   AUC ROC   = 0.99814
   AUC PR    = 0.950369
   CLL	      = -0.079144
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total learning time: 1.668 seconds
Total inference time: 1.861 seconds
AUC ROC: 0.99814


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063866
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.074 seconds
Refined model CLL: -0.063866


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.99814
   AUC PR    = 0.950369
   CLL	      = -0.079144
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total learning time: 4.74 seconds
Total inference time: 1.861 seconds
AUC ROC: 0.99814
Total revision time: 4.74
Best scored revision CLL: -0.063866


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 02:33:30
{'AUC ROC': 0.99814, 'AUC PR': 0.950369, 'CLL': -0.079144, 'Precision': [1.0, 0.5], 'Recall': 0.819018, 'F1': 0.900506, 'Learning time': 4.74, 'Inference time': 1.861, 'parameter': {'AUC ROC': 0.978388, 'AUC PR': 0.863056, 'CLL': -0.083522, 'Precision': [1.0, 0.5], 'Recall': 0.819018, 'F1': 0.900506, 'Learning time': 1.0, 'Inference time': 1.696}}


Starting fold 2

Target train facts examples: 208
Target train pos examples: 58
Target train neg examples: 3423

Target test facts examples: 870
Target test pos	 examples: 324
Target test neg examples: 10813

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
1;true;haswordtitle(D, C).;true;true
1;true,true;haswordauthor(E, C).;true;true
1;true,true,true;author(F, E), title(F, D).;false;false
1;true,true,false;title(G, D), venue(G, B).;false;false
1;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
1;true,false,true;title(J, I), venue(J, B).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, B).;false;true
2;true,true,false;title(F, D), venue(F, A).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
2;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
2;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
3;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
3;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
3;true,false,false;haswordvenue(B, L), haswordauthor(M, L).;false;false
3;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordauthor(D, C).;true;true
6;true,true;author(E, D), venue(E, A).;false;true
6;true,true,false;haswordtitle(F, C).;false;false
6;true,false;haswordtitle(G, C).;true;true
6;true,false,true;title(H, G), venue(H, B).;false;false
6;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
7;false,true;haswordauthor(N, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1418510649004877;  // std dev = 2.79e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 7.60e-08, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.12544463852839138;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5553664367462838;  // std dev = 1.19e-07, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.11231637819360643;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.11231637819360622;  // std dev = 6.99e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.2444769462762613;  // std dev = 0.245, 87.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=58 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.10159632948783623;  // std dev = 5.05e-08, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3595159373170879;  // std dev = 2.98e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926096;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.12618328690077887;  // std dev = 1.83e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926108;  // std dev = 0.000, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.28151043465344466;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.11291370395269475;  // std dev = 2.36e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839678;  // std dev = 4.06e-09, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.22820192141622203;  // std dev = 8.69e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.1020884359024811;  // std dev = 2.36e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109161;  // std dev = 4.94e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18117115990351026;  // std dev = 0.546, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | else if ( movie(E, B) )
%   | | then return -0.09054097627879865;  // std dev = 0.037, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0673327234345474;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.16412301958140693;  // std dev = 3.94e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.08573482612560226;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420265;  // std dev = 4.66e-09, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.142829136903055;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.06322549986183322;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.07924888927080224;  // std dev = 1.29e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.977686
   AUC PR    = 0.861626
   CLL	      = -0.083616
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 0.887 seconds
Total inference time: 1.711 seconds
AUC ROC: 0.977686


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.067519
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.041 seconds
Parameter learned model CLL: -0.067519


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 58], 'true,false,false,true': [2.79e-08, 30, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.6e-08, 80, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)'}, {'true,true': [0.0, 0, 58], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 32, 0], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 96, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.19e-07, 0, 58], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [0.0, 35, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.99e-08, 85, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.245, 29, 58], 'true,false,false': [0.0, 0, 0], 'false,true': [5.05e-08, 91, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [2.98e-08, 0, 58], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [1.83e-08, 33, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 86, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.0, 0, 58], 'true,false,false,true': [2.36e-08, 29, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.06e-09, 95, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [8.69e-08, 0, 58], 'true,false,false,true': [2.36e-08, 29, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.94e-08, 87, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.546, 1, 58], 'true,false,true': [0.037, 31, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 89, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [3.94e-08, 0, 58], 'true,false,false,true': [0.0, 28, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.66e-09, 91, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [1.86e-09, 3, 0], 'true,false,false,true': [1.29e-08, 35, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 94, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2291358024691354, 7.216449660063518e-17], 'true': [0.0, 0.2246900826446277], 'true,false': [-3.675221047035001e-16, 2.590520390792032e-17], 'false': [7.216449660063518e-17, nan], 'true,false,false': [2.590520390792032e-17, nan]}, {'': [0.16357695890560142, -1.3877787807814457e-17], 'true': [-1.2250736823450003e-16, -6.938893903907228e-18], 'true,false': [-6.938893903907228e-18, nan], 'true,false,true': [nan, -6.938893903907228e-18]}, {'': [0.10717402191200098, 5.747036833353752e-17], 'true': [2.4501473646900006e-16, -5.693451408334136e-18], 'false': [5.747036833353752e-17, nan], 'true,false': [0.0, -1.2688263138573217e-17], 'true,false,false': [-1.2688263138573217e-17, nan]}, {'': [0.06054838303919607, 2.8060581941075384e-17], 'true': [0.0, 0.05988335609904653], 'true,false': [0.05988335609904653, nan], 'false': [2.8060581941075384e-17, nan]}, {'': [0.054956039180740594, 0.0], 'true': [1.5313421029312504e-17, 6.0435245370642804e-05], 'true,false': [0.0, 1.0092936587501423e-17], 'true,false,false': [1.0092936587501423e-17, nan], 'false': [0.0, nan]}, {'': [0.035201639638442334, 1.636118141552862e-17], 'true': [0.0, 0.03457120024782089], 'true,false': [-1.5313421029312505e-16, 1.914177628664063e-17], 'true,false,false': [1.914177628664063e-17, nan], 'false': [1.636118141552862e-17, nan]}, {'': [0.024805946411850258, 2.807460522040626e-17], 'true': [0.0, 0.024242604475048127], 'true,false': [1.3016407874915627e-16, 1.914177628664063e-17], 'false': [2.807460522040626e-17, nan], 'true,false,false': [1.914177628664063e-17, nan]}, {'': [0.02000238444618267, -7.484649604214538e-18], 'true': [0.005059362066424507, 4.431235487290501e-05], 'true,false': [4.431235487290501e-05, nan], 'false': [-7.484649604214538e-18, nan]}, {'': [0.013806480052175867, 2.1350442781253012e-17], 'true': [0.0, 0.013708031845812407], 'true,false': [2.6798486801296883e-17, -4.956352788505163e-18], 'false': [2.1350442781253012e-17, nan], 'true,false,false': [-4.956352788505163e-18, nan]}, {'': [0.011667925225207182, -1.299197156476247e-17], 'true': [-7.656710514656252e-18, 1.8669422337890202e-05], 'true,false': [1.1564823173178713e-18, 4.758098676964957e-18], 'true,false,false': [4.758098676964957e-18, nan], 'false': [-1.299197156476247e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(B, D).;true;true
2;true,false;genre(A, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(A, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
4;true,false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
5;true,false;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
8;true,false;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.1418510649004877;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else return -0.14185106490048763;  // std dev = 8.94e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.12544463852839144;  // std dev = 0.000, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5553664367462838;  // std dev = 1.19e-07, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.1272556476027624;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.11231637819360638;  // std dev = 1.29e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else return -0.11231637819360621;  // std dev = 7.45e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11377981661576062;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( actor(B) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else return 0.4175135841583103;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else return -0.10159632948783619;  // std dev = 5.58e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3207118471601497;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.10280123101792009;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.09269127618926093;  // std dev = 1.18e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else return -0.09269127618926107;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09369922332610636;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.25517224256948967;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.08518475138839682;  // std dev = 1.75e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.0851847513883968;  // std dev = 5.37e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253562;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.07877675473109179;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.0787767547310916;  // std dev = 5.58e-08, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527733;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( female(A) )
%   | | then return -0.07324622576333704;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( female(B) )
%   | | | then return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.07452555557494152;  // std dev = 0.012, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.07324622576333707;  // std dev = 0.000, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08035701709646446;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.15274385809367078;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.06838913599715554;  // std dev = 0.000215, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.06842697784420265;  // std dev = 4.21e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801098;  // std dev = 3.94e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06415954853961846;  // std dev = 0.000171, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.06419184008202626;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */


Results
   AUC ROC   = 0.99881
   AUC PR    = 0.964909
   CLL	      = -0.079645
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 0.891 seconds
Total inference time: 1.515 seconds
AUC ROC: 0.99881


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064294
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.992 seconds
Refined model CLL: -0.064294


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.99881
   AUC PR    = 0.964909
   CLL	      = -0.079645
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 3.811 seconds
Total inference time: 1.515 seconds
AUC ROC: 0.99881
Total revision time: 3.811
Best scored revision CLL: -0.064294


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 02:33:37
{'AUC ROC': 0.99881, 'AUC PR': 0.964909, 'CLL': -0.079645, 'Precision': [1.0, 0.5], 'Recall': 0.817901, 'F1': 0.89983, 'Learning time': 3.811, 'Inference time': 1.515, 'parameter': {'AUC ROC': 0.977686, 'AUC PR': 0.861626, 'CLL': -0.083616, 'Precision': [1.0, 0.5], 'Recall': 0.817901, 'F1': 0.89983, 'Learning time': 0.887, 'Inference time': 1.711}}


Starting fold 3

Target train facts examples: 341
Target train pos examples: 178
Target train neg examples: 3543

Target test facts examples: 737
Target test pos	 examples: 204
Target test neg examples: 10693

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
1;true;haswordtitle(D, C).;true;true
1;true,true;haswordauthor(E, C).;true;true
1;true,true,true;author(F, E), title(F, D).;false;false
1;true,true,false;title(G, D), venue(G, B).;false;false
1;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
1;true,false,true;title(J, I), venue(J, B).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, B).;false;true
2;true,true,false;title(F, D), venue(F, A).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
2;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
2;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
3;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
3;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
3;true,false,false;haswordvenue(B, L), haswordauthor(M, L).;false;false
3;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordauthor(D, C).;true;true
6;true,true;author(E, D), venue(E, A).;false;true
6;true,true,false;haswordtitle(F, C).;false;false
6;true,false;haswordtitle(G, C).;true;true
6;true,false,true;title(H, G), venue(H, B).;false;false
6;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
7;false,true;haswordauthor(N, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995104;  // std dev = 7.54e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.2956489350995133;  // std dev = 5.250, 112.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048827;  // std dev = 0.000, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7129740425898836;  // std dev = 0.842, 130.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=129 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1991486734905578;  // std dev = 5.481, 131.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.1254446385283919;  // std dev = 0.000, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.49542193796750456;  // std dev = 2.494, 140.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.14897000580573636;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.19847394087342707;  // std dev = 5.369, 119.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1123163781936069;  // std dev = 0.000, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.17655580487715203;  // std dev = 0.338, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( movie(E, A) )
%   | | then return 0.3153398822445974;  // std dev = 0.362, 243.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=178 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1015963294878366;  // std dev = 0.000, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3390855847386094;  // std dev = 1.271, 133.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.11222344036766628;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.1685215621931885;  // std dev = 5.046, 102.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926043;  // std dev = 8.33e-09, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.20132880864149516;  // std dev = 0.455, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.28476021341365926;  // std dev = 1.03e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.10041160760287401;  // std dev = 5.194, 109.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839678;  // std dev = 5.89e-09, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1851896110982894;  // std dev = 0.550, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( genre(B, E) )
%   | | then return 0.23045734441573276;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.08998589206459258;  // std dev = 5.133, 106.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109143;  // std dev = 5.58e-08, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.16796954877633372;  // std dev = 1.210, 136.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=129 */
%   | else if ( movie(E, B) )
%   | | then return 0.030210495013771356;  // std dev = 5.280, 124.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333688;  // std dev = 6.65e-09, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14360355378546774;  // std dev = 0.449, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.16740135021574176;  // std dev = 7.60e-08, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.05717421591095309;  // std dev = 5.154, 107.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420303;  // std dev = 0.000, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13562927671083266;  // std dev = 0.732, 132.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.06414207557661801;  // std dev = 5.27e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.02686659080511121;  // std dev = 5.232, 111.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06419184008202607;  // std dev = 5.02e-09, 278.000 (wgt'ed) examples reached here.  /* #neg=278 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.993692
   AUC PR    = 0.961008
   CLL	      = -0.187113
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95098
   F1        = 0.974874


Total learning time: 1.318 seconds
Total inference time: 1.72 seconds
AUC ROC: 0.993692


Results scoring model
   AUC ROC   = 0.976419
   AUC PR    = 0.83578
   CLL	      = -0.159295
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total scoring time: 1.011 seconds
Parameter learned model CLL: -0.159295


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [1.05e-08, 21, 0], 'true,false,true': [7.54e-07, 0, 129], 'true,false,false,true': [5.25, 63, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 246, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)'}, {'true,true': [0.842, 1, 129], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [5.481, 82, 49], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 261, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [2.494, 11, 129], 'true,false,true': [0.0, 12, 0], 'true,false,false,true': [5.369, 70, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 292, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.338, 17, 0], 'true,false,true': [0.362, 65, 178], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 272, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.271, 4, 129], 'true,false,true': [0.0, 16, 0], 'true,false,false,true': [5.046, 53, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.33e-09, 285, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.455, 13, 0], 'true,false,true': [1.03e-07, 0, 129], 'true,false,false,true': [5.194, 60, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.89e-09, 281, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.55, 23, 0], 'true,false,true': [0.0, 0, 129], 'true,false,false,true': [5.133, 57, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.58e-08, 266, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [1.21, 7, 129], 'true,false,true': [5.28, 75, 49], 'true,false,false': [0.0, 0, 0], 'false,true': [6.65e-09, 272, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.449, 17, 0], 'true,false,true': [7.6e-08, 0, 129], 'true,false,false,true': [5.154, 58, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 305, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.732, 3, 129], 'true,false,true': [5.27e-09, 16, 0], 'true,false,false,true': [5.232, 62, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.02e-09, 278, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21781947438960975, -1.408087738548979e-16], 'true': [5.28677630773884e-18, 0.19307518809938418], 'true,false': [4.40646657835721e-15, 0.24609375000000022], 'true,false,false': [0.24609375000000022, nan], 'false': [-1.408087738548979e-16, nan]}, {'': [0.18382097328048116, -6.805964901916668e-17], 'true': [0.005449192905797636, 0.22932866080071504], 'true,false': [0.22932866080071504, nan], 'true,false,true': [nan, 0.22932866080071504]}, {'': [0.1611597528579573, -9.733462133700002e-17], 'true': [0.04442594718853289, 0.2300720617533433], 'true,false': [-4.625929269271485e-18, 0.24221453287197264], 'true,false,false': [0.24221453287197264, nan], 'false': [-9.733462133700002e-17, nan]}, {'': [0.13751205355610377, -6.204187490552346e-17], 'true': [0.006728875480113994, 0.13084094307781646], 'true,false': [0.13084094307781646, nan], 'false': [-6.204187490552346e-17, nan]}, {'': [0.12306364178249701, 7.011934892369409e-17], 'true': [0.012154423735160185, 0.225007406461294], 'true,false': [-5.204170427930421e-18, 0.24961553248750523], 'true,false,false': [0.24961553248750523, nan], 'false': [7.011934892369409e-17, nan]}, {'': [0.12420779294336376, 3.476855023737145e-17], 'true': [0.01593896520932621, 0.12176584119592582], 'true,false': [8.26212483441977e-17, 0.24745391802036906], 'true,false,false': [0.24745391802036906, nan], 'false': [3.476855023737145e-17, nan]}, {'': [0.11782896353727385, 1.1686558153949016e-17], 'true': [0.01316091229305519, 0.1170094486231956], 'true,false': [-2.0655312086049424e-17, 0.24857600569597665], 'true,false,false': [0.24857600569597665, nan], 'false': [1.1686558153949016e-17, nan]}, {'': [0.11758174291556264, 4.408238480129298e-17], 'true': [0.010762928196623134, 0.22481114021732249], 'true,false': [0.22481114021732249, nan], 'false': [4.408238480129298e-17, nan]}, {'': [0.11285924795453699, -6.188128333976282e-17], 'true': [0.011855115964162983, 0.11555665021460747], 'true,false': [4.475317618644042e-17, 0.2482312865752466], 'true,false,false': [0.2482312865752466, nan], 'false': [-6.188128333976282e-17, nan]}, {'': [0.11180301345709241, 2.5559091214392094e-17], 'true': [0.004061988099822876, 0.21641885841001876], 'true,false': [1.734723475976807e-18, 0.24657089521954337], 'true,false,false': [0.24657089521954337, nan], 'false': [2.5559091214392094e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(B, D).;true;true
2;true,false;genre(A, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
4;true,false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
5;true,false;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
8;true,false;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995104;  // std dev = 7.54e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.8581489350995122;  // std dev = 1.69e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.14185106490048768;  // std dev = 5.16e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.1418510649004882;  // std dev = 0.000, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109565;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.1254446385283915;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   else return -0.125444638528392;  // std dev = 0.000, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.5553664367462834;  // std dev = 4.21e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360636;  // std dev = 1.18e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.5553664367462833;  // std dev = 1.40e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.11231637819360636;  // std dev = 1.83e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.11231637819360685;  // std dev = 0.000, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.4175135841583096;  // std dev = 3.58e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.10159632948783634;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.10159632948783662;  // std dev = 0.000, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.32071184716014967;  // std dev = 1.84e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else return -0.09269127618926097;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926096;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3207118471601494;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.09269127618926103;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.09269127618926044;  // std dev = 1.28e-07, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0851847513883968;  // std dev = 1.29e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( genre(B, E) )
%   | | then return 0.25517224256948967;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.25517224256948934;  // std dev = 2.98e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.0851847513883968;  // std dev = 1.97e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.08518475138839678;  // std dev = 9.54e-08, 268.000 (wgt'ed) examples reached here.  /* #neg=268 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109175;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( genre(B, E) )
%   | | then return 0.2097577156325353;  // std dev = 1.55e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.20975771563253554;  // std dev = 4.21e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.07877675473109179;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.07877675473109141;  // std dev = 3.94e-08, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1770964977452778;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   else return -0.07324622576333674;  // std dev = 1.22e-07, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06842697784420276;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( genre(B, E) )
%   | | then return 0.1527438580936714;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.15274385809367083;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.0684269778442027;  // std dev = 1.29e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.06842697784420285;  // std dev = 0.000, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.12804616173462632;  // std dev = 0.390, 133.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.06419184008202618;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1340070300080108;  // std dev = 4.71e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.06419184008202625;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.0641918400820262;  // std dev = 4.94e-08, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063583
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.789 seconds
Total inference time: 1.687 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065655
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.034 seconds
Refined model CLL: -0.065655


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063583
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.151999999999999 seconds
Total inference time: 1.687 seconds
AUC ROC: 1.0
Total revision time: 5.151999999999999
Best scored revision CLL: -0.065655


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 02:33:46
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063583, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 5.151999999999999, 'Inference time': 1.687, 'parameter': {'AUC ROC': 0.993692, 'AUC PR': 0.961008, 'CLL': -0.187113, 'Precision': [1.0, 0.5], 'Recall': 0.95098, 'F1': 0.974874, 'Learning time': 1.318, 'Inference time': 1.72}}


Starting fold 4

Target train facts examples: 151
Target train pos examples: 45
Target train neg examples: 1891

Target test facts examples: 927
Target test pos	 examples: 337
Target test neg examples: 12345

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
1;true;haswordtitle(D, C).;true;true
1;true,true;haswordauthor(E, C).;true;true
1;true,true,true;author(F, E), title(F, D).;false;false
1;true,true,false;title(G, D), venue(G, B).;false;false
1;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
1;true,false,true;title(J, I), venue(J, B).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, B).;false;true
2;true,true,false;title(F, D), venue(F, A).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
2;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
2;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
3;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
3;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
3;true,false,false;haswordvenue(B, L), haswordauthor(M, L).;false;false
3;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordauthor(D, C).;true;true
6;true,true;author(E, D), venue(E, A).;false;true
6;true,true,false;haswordtitle(F, C).;false;false
6;true,false;haswordtitle(G, C).;true;true
6;true,false,true;title(H, G), venue(H, B).;false;false
6;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
7;false,true;haswordauthor(N, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 5.96e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.1254446385283915;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5553664367462839;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1123163781936064;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.11231637819360625;  // std dev = 5.27e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783633;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( movie(E, A) )
%   | | then return 0.22741699606253807;  // std dev = 0.250, 71.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=45 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.10159632948783615;  // std dev = 5.87e-08, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3486658801343315;  // std dev = 0.673, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926098;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.12431420364719119;  // std dev = 1.29e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.2871898418311946;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.11140104670533282;  // std dev = 2.47e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839679;  // std dev = 2.28e-09, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109177;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.23214094202920083;  // std dev = 5.16e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.10084141048525079;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109168;  // std dev = 3.57e-08, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19334772399298947;  // std dev = 2.98e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( movie(E, B) )
%   | | then return -0.09205883084838482;  // std dev = 9.13e-09, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06723746621943022;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.16496364202843244;  // std dev = 5.16e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.08464773903108026;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0684269778442027;  // std dev = 1.86e-09, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1434760927119667;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.06314129454999726;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.07831543632423472;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.978805
   AUC PR    = 0.865091
   CLL	      = -0.081347
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total learning time: 0.804 seconds
Total inference time: 1.823 seconds
AUC ROC: 0.978805


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.068473
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.88 seconds
Parameter learned model CLL: -0.068473


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [2.23e-07, 0, 45], 'true,false,false,true': [1.05e-08, 22, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.96e-08, 58, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)'}, {'true,true': [0.0, 0, 45], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 23, 0], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 75, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 45], 'true,false,true': [0.0, 5, 0], 'true,false,false,true': [0.0, 27, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.27e-08, 67, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.25, 26, 45], 'true,false,false': [0.0, 0, 0], 'false,true': [5.87e-08, 77, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.673, 1, 45], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [1.29e-08, 24, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 55, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [0.0, 0, 45], 'true,false,false,true': [2.47e-08, 29, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.28e-09, 61, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [5.16e-08, 0, 45], 'true,false,false,true': [0.0, 13, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.57e-08, 70, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [2.98e-08, 0, 45], 'true,false,true': [9.13e-09, 25, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 62, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [5.16e-08, 0, 45], 'true,false,false,true': [0.0, 24, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 51, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 45], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [1.05e-08, 21, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 79, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.22959183673469416, 6.125368411725002e-17], 'true': [0.0, 0.22053909556694173], 'true,false': [1.105288700071267e-15, 5.046468293750712e-18], 'false': [6.125368411725002e-17, nan], 'true,false,false': [5.046468293750712e-18, nan]}, {'': [0.15979077430827388, -2.6645352591003756e-17], 'true': [-9.473903143468002e-16, -2.413528314402514e-18], 'true,false': [-2.413528314402514e-18, nan], 'true,false,true': [nan, -2.413528314402514e-18]}, {'': [0.10827331616918932, 4.142623226213271e-17], 'true': [-3.947459643111668e-17, -1.0408340855860843e-17], 'false': [4.142623226213271e-17, nan], 'true,false': [0.0, -4.11193712824132e-18], 'true,false,false': [-4.11193712824132e-18, nan]}, {'': [0.06421932225924955, 4.469729060179202e-17], 'true': [-1.1564823173178713e-18, 0.06254431062516955], 'true,false': [0.06254431062516955, nan], 'false': [4.469729060179202e-17, nan]}, {'': [0.05778146187083368, -2.0185873175002845e-18], 'true': [0.009840416678659801, 0.00012245014787871933], 'true,false': [0.0, 6.938893903907228e-18], 'true,false,false': [6.938893903907228e-18, nan], 'false': [-2.0185873175002845e-18, nan]}, {'': [0.03819370738586471, 4.550094363217854e-18], 'true': [0.0, 0.03786184785130786], 'true,false': [-1.3816108750890837e-16, 2.1055953915304692e-17], 'true,false,false': [2.1055953915304692e-17, nan], 'false': [4.550094363217854e-18, nan]}, {'': [0.020437814137361603, 1.8239378261699e-17], 'true': [0.0, 0.01928156645224263], 'true,false': [5.921189464667501e-17, -4.270088556250602e-18], 'false': [1.8239378261699e-17, nan], 'true,false,false': [-4.270088556250602e-18, nan]}, {'': [0.01870183964076028, -8.953411488912552e-19], 'true': [1.973729821555834e-17, 3.3306690738754695e-18], 'true,false': [3.3306690738754695e-18, nan], 'false': [-8.953411488912552e-19, nan]}, {'': [0.014229360134978905, 3.8095888099882826e-18], 'true': [0.0, 0.014133650258095464], 'true,false': [5.921189464667501e-17, 0.0], 'false': [3.8095888099882826e-18, nan], 'true,false,false': [0.0, nan]}, {'': [0.010886199943739443, -9.134746405143692e-18], 'true': [-9.86864910777917e-18, 1.8281081853607652e-05], 'true,false': [0.0, 5.28677630773884e-18], 'true,false,false': [5.28677630773884e-18, nan], 'false': [-9.134746405143692e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(B, D).;true;true
2;true,false;genre(A, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(A, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
4;true,false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
5;true,false;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
8;true,false;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.14185106490048766;  // std dev = 7.45e-08, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.1254446385283916;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.5553664367462844;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.5118728403407866;  // std dev = 0.179, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.11231637819360642;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.11231637819360628;  // std dev = 4.34e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.10159632948783634;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( female(A) )
%   | | | then return 0.4175135841583098;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.42812745797878327;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else if ( female(A) )
%   | then return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( female(B) )
%   | | then return -0.10159632948783627;  // std dev = 1.32e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.10159632948783633;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.3207118471601497;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.3279167072350754;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( female(B) )
%   | | | then return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.09269127618926096;  // std dev = 7.45e-09, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.09269127618926103;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.2551722425694894;  // std dev = 2.11e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.26008258703180487;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( female(B) )
%   | | | then return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.08518475138839683;  // std dev = 1.39e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else if ( actor(A) )
%   | then if ( actor(B) )
%   | | then if ( female(B) )
%   | | | then return -0.08518475138839687;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.0851847513883968;  // std dev = 1.97e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | else return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.2123739465183967;  // std dev = 0.001, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( female(A) )
%   | | | then return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.07877675473109176;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( actor(A) )
%   | then if ( actor(B) )
%   | | then if ( female(A) )
%   | | | then return -0.07877675473109177;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.07877675473109179;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17671554775093776;  // std dev = 3.23e-09, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.17975682492259829;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( actor(A) )
%   | | then if ( female(B) )
%   | | | then return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( actor(B) )
%   | then if ( actor(A) )
%   | | then if ( female(B) )
%   | | | then return -0.07324622576333704;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.07324622576333704;  // std dev = 1.05e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | else return -0.07324622576333704;  // std dev = 9.31e-10, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.1524548077889334;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.1547590018656706;  // std dev = 2.58e-08, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else return -0.06842697784420275;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( female(B) )
%   | then return -0.06842697784420274;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( female(A) )
%   | | then if ( actor(B) )
%   | | | then return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.06842697784420275;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.06842697784420272;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13378133244778737;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.12128809067179519;  // std dev = 0.083, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( female(A) )
%   | | | then return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.06419184008202618;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return -0.06419184008202625;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */


Results
   AUC ROC   = 0.998487
   AUC PR    = 0.955282
   CLL	      = -0.076851
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total learning time: 1.459 seconds
Total inference time: 2.099 seconds
AUC ROC: 0.998487


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064897
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.872 seconds
Refined model CLL: -0.064897


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998487
   AUC PR    = 0.955282
   CLL	      = -0.076851
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total learning time: 4.015000000000001 seconds
Total inference time: 2.099 seconds
AUC ROC: 0.998487
Total revision time: 4.015000000000001
Best scored revision CLL: -0.064897


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 02:33:55
{'AUC ROC': 0.998487, 'AUC PR': 0.955282, 'CLL': -0.076851, 'Precision': [1.0, 0.5], 'Recall': 0.824926, 'F1': 0.904065, 'Learning time': 4.015000000000001, 'Inference time': 2.099, 'parameter': {'AUC ROC': 0.978805, 'AUC PR': 0.865091, 'CLL': -0.081347, 'Precision': [1.0, 0.5], 'Recall': 0.824926, 'F1': 0.904065, 'Learning time': 0.804, 'Inference time': 1.823}}


Starting fold 5

Target train facts examples: 163
Target train pos examples: 45
Target train neg examples: 2071

Target test facts examples: 915
Target test pos	 examples: 337
Target test neg examples: 12165

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
1;true;haswordtitle(D, C).;true;true
1;true,true;haswordauthor(E, C).;true;true
1;true,true,true;author(F, E), title(F, D).;false;false
1;true,true,false;title(G, D), venue(G, B).;false;false
1;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
1;true,false,true;title(J, I), venue(J, B).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, B).;false;true
2;true,true,false;title(F, D), venue(F, A).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
2;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
2;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
3;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
3;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
3;true,false,false;haswordvenue(B, L), haswordauthor(M, L).;false;false
3;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordauthor(D, C).;true;true
6;true,true;author(E, D), venue(E, A).;false;true
6;true,true,false;haswordtitle(F, C).;false;false
6;true,false;haswordtitle(G, C).;true;true
6;true,false,true;title(H, G), venue(H, B).;false;false
6;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
7;false,true;haswordauthor(N, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995115;  // std dev = 2.38e-07, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.18072958026080266;  // std dev = 2.603, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048768;  // std dev = 5.37e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109548;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10686646945907854;  // std dev = 2.695, 37.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.12544463852839152;  // std dev = 0.000, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5553664367462844;  // std dev = 9.42e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.1553641947281411;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.23608386559695263;  // std dev = 2.415, 24.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.11231637819360626;  // std dev = 5.16e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1360493777729905;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.2704466642300698;  // std dev = 0.356, 66.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=45 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1015963294878362;  // std dev = 4.59e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3535581112212683;  // std dev = 5.96e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.12083494812629456;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.054792439991577936;  // std dev = 2.603, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10857481381207149;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.27748053794912225;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.05466585328872887;  // std dev = 2.582, 30.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839679;  // std dev = 2.08e-09, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09850414067086342;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.22539931349693193;  // std dev = 6.14e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.055039839625819084;  // std dev = 2.560, 29.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109169;  // std dev = 3.16e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18848668744186262;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( movie(E, B) )
%   | | then return -0.026974210522419072;  // std dev = 2.689, 38.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08790918931527249;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.16133071015512537;  // std dev = 3.33e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.06154500400169421;  // std dev = 2.535, 28.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420267;  // std dev = 3.48e-09, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14067549846909577;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.08111117434314703;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.024761476992277234;  // std dev = 2.582, 30.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.982257
   AUC PR    = 0.888508
   CLL	      = -0.142609
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.854599
   F1        = 0.9216


Total learning time: 0.808 seconds
Total inference time: 1.863 seconds
AUC ROC: 0.982257


Results scoring model
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.147578
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total scoring time: 0.864 seconds
Parameter learned model CLL: -0.147578


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [2.38e-07, 0, 35], 'true,false,false,true': [2.603, 21, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.37e-08, 50, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)'}, {'true,true': [0.0, 0, 35], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [2.695, 27, 10], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 73, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [9.42e-08, 0, 35], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.415, 14, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.16e-08, 66, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.356, 21, 45], 'true,false,false': [0.0, 0, 0], 'false,true': [4.59e-08, 62, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [5.96e-08, 0, 35], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [2.603, 21, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 65, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 35], 'true,false,false,true': [2.582, 20, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.08e-09, 65, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [6.14e-08, 0, 35], 'true,false,false,true': [2.56, 19, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.16e-08, 66, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 35], 'true,false,true': [2.689, 28, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 68, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [2.63e-09, 6, 0], 'true,false,true': [3.33e-08, 0, 35], 'true,false,false,true': [2.535, 18, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.48e-09, 70, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 35], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [2.582, 20, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 61, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21694214876033094, 5.773159728050814e-17], 'true': [nan, 0.21694214876033094], 'true,false': [1.6240976817373718e-15, 0.21852237252861612], 'true,false,false': [0.21852237252861612, nan], 'false': [5.773159728050814e-17, nan]}, {'': [0.1945935840335675, -3.0417069167812506e-17], 'true': [-7.105427357601002e-16, 0.19623728594647605], 'true,false': [0.19623728594647605, nan], 'true,false,true': [nan, 0.19623728594647605]}, {'': [0.1301206272775005, 4.0371746350005693e-17], 'true': [2.5376526277146434e-16, 0.235239323513929], 'true,false': [0.0, 0.24305555555555555], 'true,false,false': [0.24305555555555555, nan], 'false': [4.0371746350005693e-17, nan]}, {'': [0.12759181726597024, 3.40229636578677e-17], 'true': [0.0, 0.12705877240707966], 'true,false': [0.12705877240707966, nan], 'false': [3.40229636578677e-17, nan]}, {'': [0.12464958214811474, 0.0], 'true': [1.0150610510858574e-16, 0.2126273319448803], 'true,false': [0.0, 0.21852237252861606], 'true,false,false': [0.21852237252861606, nan], 'false': [0.0, nan]}, {'': [0.11435823784642171, 4.270088556250602e-18], 'true': [0.0, 0.11490225709317389], 'true,false': [-3.8064789415719653e-17, 0.22222222222222252], 'true,false,false': [0.22222222222222252, nan], 'false': [4.270088556250602e-18, nan]}, {'': [0.10803094897957613, 1.5139404881252134e-17], 'true': [0.0, 0.10956250742682942], 'true,false': [1.0785023667787235e-16, 0.22592152199762197], 'true,false,false': [0.22592152199762197, nan], 'false': [1.5139404881252134e-17, nan]}, {'': [0.11063602555797683, -2.44902137784961e-18], 'true': [-7.612957883143931e-17, 0.19027983421948974], 'true,false': [0.19027983421948974, nan], 'false': [-2.44902137784961e-18, nan]}, {'': [0.09874549971531253, 1.1895246692412391e-17], 'true': [1.1564823173178713e-18, 0.10449938105555233], 'true,false': [3.172065784643304e-17, 0.2295918367346936], 'true,false,false': [0.2295918367346936, nan], 'false': [1.1895246692412391e-17, nan]}, {'': [0.10242536501707979, -2.7300566179307128e-18], 'true': [-1.2688263138573217e-17, 0.20294656716902756], 'true,false': [-1.1564823173178713e-18, 0.22222222222222196], 'true,false,false': [0.22222222222222196, nan], 'false': [-2.7300566179307128e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(B, D).;true;true
2;true,false;genre(A, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(A, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
4;true,false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
5;true,false;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
8;true,false;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995115;  // std dev = 2.38e-07, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( actor(B) )
%   | | then return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.14185106490048766;  // std dev = 6.32e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109548;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( actor(B) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1254446385283916;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5553664367462844;  // std dev = 9.42e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.11231637819360639;  // std dev = 7.45e-09, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.11231637819360626;  // std dev = 4.94e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return 0.41751358415831025;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.1015963294878362;  // std dev = 4.59e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.32071184716014967;  // std dev = 1.49e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.27317509647584226;  // std dev = 0.202, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783633;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926094;  // std dev = 9.13e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return 0.3207118471601494;  // std dev = 2.58e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.09269127618926107;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2598725320013808;  // std dev = 0.027, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( actor(B) )
%   | | | then return -0.08518475138839685;  // std dev = 1.18e-08, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return 0.2551722425694894;  // std dev = 1.83e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.0851847513883968;  // std dev = 1.83e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.21307691398297926;  // std dev = 0.024, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109175;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return 0.2097577156325356;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.0787767547310917;  // std dev = 3.07e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17952995767199853;  // std dev = 0.021, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( actor(B) )
%   | | then return -0.07444007832584304;  // std dev = 0.016, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else return 0.17709649774527736;  // std dev = 7.45e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07324622576333704;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07956004371633339;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.15458922402258923;  // std dev = 0.018, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( actor(B) )
%   | | | then return -0.06835091523818539;  // std dev = 1.05e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return 0.15274385809367094;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06842697784420267;  // std dev = 3.41e-08, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13544729932472047;  // std dev = 0.016, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.07392529778872223;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.06412472574581764;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.13400703000801117;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06419184008202625;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */


Results
   AUC ROC   = 0.99752
   AUC PR    = 0.885213
   CLL	      = -0.078262
   Precision = 0.742291 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.852086


Total learning time: 1.151 seconds
Total inference time: 1.767 seconds
AUC ROC: 0.99752


Results scoring model
   AUC ROC   = 0.999753
   AUC PR    = 0.984351
   CLL	      = -0.065867
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total scoring time: 0.842 seconds
Refined model CLL: -0.065867


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.99752
   AUC PR    = 0.885213
   CLL	      = -0.078262
   Precision = 0.742291 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.852086


Total learning time: 3.6650000000000005 seconds
Total inference time: 1.767 seconds
AUC ROC: 0.99752
Total revision time: 3.6650000000000005
Best scored revision CLL: -0.065867


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 02:34:03
{'AUC ROC': 0.99752, 'AUC PR': 0.885213, 'CLL': -0.078262, 'Precision': [0.742291, 0.5], 'Recall': 1.0, 'F1': 0.852086, 'Learning time': 3.6650000000000005, 'Inference time': 1.767, 'parameter': {'AUC ROC': 0.982257, 'AUC PR': 0.888508, 'CLL': -0.142609, 'Precision': [1.0, 0.5], 'Recall': 0.854599, 'F1': 0.9216, 'Learning time': 0.808, 'Inference time': 1.863}}


Starting fold 1

Target train facts examples: 215
Target train pos examples: 56
Target train neg examples: 3308

Target test facts examples: 863
Target test pos	 examples: 326
Target test neg examples: 10928

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
1;true;haswordtitle(D, C).;true;true
1;true,true;haswordauthor(E, C).;true;true
1;true,true,true;author(F, E), title(F, D).;false;false
1;true,true,false;title(G, D), venue(G, B).;false;false
1;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
1;true,false,true;title(J, I), venue(J, B).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, B).;false;true
2;true,true,false;title(F, D), venue(F, A).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
2;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
2;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
3;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
3;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
3;true,false,false;haswordvenue(B, L), haswordauthor(M, L).;false;false
3;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordauthor(D, C).;true;true
6;true,true;author(E, D), venue(E, A).;false;true
6;true,true,false;haswordtitle(F, C).;false;false
6;true,false;haswordtitle(G, C).;true;true
6;true,false,true;title(H, G), venue(H, B).;false;false
6;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
7;false,true;haswordauthor(N, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1418510649004877;  // std dev = 2.79e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 7.60e-08, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7046502885137729;  // std dev = 0.837, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.1254446385283916;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5590237097370758;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1123163781936064;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.11231637819360621;  // std dev = 7.45e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then return 0.23047595706439344;  // std dev = 0.251, 88.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=56 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.10159632948783615;  // std dev = 5.96e-08, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.36533121349464054;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, B) )
%   | | | then return -0.12464758556513766;  // std dev = 1.29e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2854410229521336;  // std dev = 8.43e-08, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.11167114000918267;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839679;  // std dev = 2.46e-09, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.23092933071249314;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.10106427364672782;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.0787767547310916;  // std dev = 5.48e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19247613177472075;  // std dev = 4.21e-08, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( movie(E, B) )
%   | | then return -0.09134768857596962;  // std dev = 0.018, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07239746003086489;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.16431360504156345;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.0848761083543292;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420268;  // std dev = 3.36e-09, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14297587066262898;  // std dev = 3.94e-08, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.06768352108304766;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.07851166392469128;  // std dev = 1.18e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.978388
   AUC PR    = 0.863056
   CLL	      = -0.083362
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total learning time: 0.832 seconds
Total inference time: 1.651 seconds
AUC ROC: 0.978388


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.067575
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.919 seconds
Parameter learned model CLL: -0.067575


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 56], 'true,false,false,true': [2.79e-08, 30, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.6e-08, 79, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)'}, {'true,true': [0.837, 1, 56], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 28, 0], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 65, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 56], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [0.0, 37, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-08, 92, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.251, 32, 56], 'true,false,false': [0.0, 0, 0], 'false,true': [5.96e-08, 78, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 56], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [1.29e-08, 23, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 79, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [8.43e-08, 0, 56], 'true,false,false,true': [0.0, 31, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.46e-09, 72, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 56], 'true,false,false,true': [0.0, 22, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.48e-08, 95, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [4.21e-08, 0, 56], 'true,false,true': [0.018, 30, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 86, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 56], 'true,false,false,true': [0.0, 27, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.36e-09, 68, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [3.94e-08, 0, 56], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [1.18e-08, 24, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 69, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.23140495867768565, 7.307797124114954e-17], 'true': [0.0, 0.22714981070849077], 'true,false': [-1.2688263138573217e-16, 2.590520390792032e-17], 'false': [7.307797124114954e-17, nan], 'true,false,false': [2.590520390792032e-17, nan]}, {'': [0.16046390259424909, -3.75767792950053e-17], 'true': [0.012304599783948732, -5.9476233462061954e-18], 'true,false': [-5.9476233462061954e-18, nan], 'true,false,true': [nan, -5.9476233462061954e-18]}, {'': [0.1099799650727741, 6.033820786006285e-17], 'true': [-1.2688263138573217e-16, -2.7078610356711136e-18], 'false': [6.033820786006285e-17, nan], 'true,false': [0.0, -9.00180830777154e-18], 'true,false,false': [-9.00180830777154e-18, nan]}, {'': [0.0640083276730376, 4.554761126667309e-17], 'true': [0.0, 0.063012573426301], 'true,false': [0.063012573426301, nan], 'false': [4.554761126667309e-17, nan]}, {'': [0.049546873883054725, 0.0], 'true': [-2.220446049250313e-16, 7.240584943207542e-18], 'true,false': [nan, 7.240584943207542e-18], 'true,false,false': [7.240584943207542e-18, nan], 'false': [0.0, nan]}, {'': [0.03638715428200429, 4.625929269271485e-18], 'true': [0.0, 0.036169090959316995], 'true,false': [1.2688263138573217e-16, -1.4325458382260084e-17], 'false': [4.625929269271485e-18, nan], 'true,false,false': [-1.4325458382260084e-17, nan]}, {'': [0.022655385023999684, 3.1553707015662343e-17], 'true': [0.0, 0.02231931888712119], 'true,false': [-1.3481279584734043e-16, -1.261617073437678e-18], 'false': [3.1553707015662343e-17, nan], 'true,false,false': [-1.261617073437678e-18, nan]}, {'': [0.0183022088764037, -6.454785026890445e-18], 'true': [3.172065784643304e-17, 1.1287741266589416e-05], 'true,false': [1.1287741266589416e-05, nan], 'false': [-6.454785026890445e-18, nan]}, {'': [0.013751476699109774, 1.1428766429964846e-17], 'true': [0.0, 0.013628743802095885], 'true,false': [0.0, -3.0839528461809902e-18], 'false': [1.1428766429964846e-17, nan], 'true,false,false': [-3.0839528461809902e-18, nan]}, {'': [0.010545528974331088, -5.6315660669392e-18], 'true': [2.7755575615628914e-17, 8.325349874490757e-06], 'true,false': [0.0, 5.782411586589357e-18], 'true,false,false': [5.782411586589357e-18, nan], 'false': [-5.6315660669392e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(B, D).;true;true
2;true,false;genre(A, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(A, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
5;true,false;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
8;true,false;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.1418510649004877;  // std dev = 3.65e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.14185106490048766;  // std dev = 6.83e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.12544463852839158;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5553664367462837;  // std dev = 1.03e-07, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.11231637819360643;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.11231637819360625;  // std dev = 5.27e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( actor(B) )
%   | | then if ( female(A) )
%   | | | then return -0.10159632948783635;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return -0.10159632948783635;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return 0.4175135841583103;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else if ( female(B) )
%   | then if ( female(A) )
%   | | then return -0.10159632948783634;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( female(A) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( actor(A) )
%   | | | then return -0.10159632948783634;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return -0.10159632948783633;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.32071184716014967;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( female(A) )
%   | | then if ( female(B) )
%   | | | then return -0.09269127618926097;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( female(B) )
%   | | | then return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( female(A) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else return -0.09269127618926105;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.25517224256948967;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( female(B) )
%   | | | then return -0.08518475138839687;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.08518475138839686;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( actor(A) )
%   | then if ( actor(B) )
%   | | then if ( female(A) )
%   | | | then return -0.0851847513883968;  // std dev = 1.90e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return -0.08518475138839679;  // std dev = 2.24e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253562;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( female(A) )
%   | | | then return -0.07877675473109172;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( female(A) )
%   | then if ( female(B) )
%   | | then return -0.07877675473109179;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return -0.07877675473109179;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( female(B) )
%   | | then return -0.07877675473109179;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( actor(B) )
%   | | | then return -0.07877675473109179;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527736;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( female(B) )
%   | | then if ( female(A) )
%   | | | then return -0.07324622576333704;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.07403630133015915;  // std dev = 0.005, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( female(A) )
%   | | | then return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.07324622576333704;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.07324622576333704;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0735686651986284;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.1527438580936708;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( female(B) )
%   | | | then return -0.0684143913488018;  // std dev = 6.17e-05, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.06842697784420272;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( female(A) )
%   | then return -0.06842697784420274;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else if ( female(B) )
%   | | then return -0.06842697784420276;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else return -0.06842697784420275;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13400703000801087;  // std dev = 5.27e-09, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.13400703000801084;  // std dev = 5.59e-09, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( genre(A, E) )
%   | | then return -0.06870914047562629;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(A) )
%   | | | then return -0.06419232931714028;  // std dev = 1.49e-06, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.06418016785292868;  // std dev = 7.00e-05, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.06419184008202626;  // std dev = 0.000, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */


Results
   AUC ROC   = 0.99814
   AUC PR    = 0.950369
   CLL	      = -0.078971
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total learning time: 1.588 seconds
Total inference time: 1.685 seconds
AUC ROC: 0.99814


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063931
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.018 seconds
Refined model CLL: -0.063931


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.99814
   AUC PR    = 0.950369
   CLL	      = -0.078971
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total learning time: 4.357 seconds
Total inference time: 1.685 seconds
AUC ROC: 0.99814
Total revision time: 4.357
Best scored revision CLL: -0.063931


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 02:34:11
{'AUC ROC': 0.99814, 'AUC PR': 0.950369, 'CLL': -0.078971, 'Precision': [1.0, 0.5], 'Recall': 0.819018, 'F1': 0.900506, 'Learning time': 4.357, 'Inference time': 1.685, 'parameter': {'AUC ROC': 0.978388, 'AUC PR': 0.863056, 'CLL': -0.083362, 'Precision': [1.0, 0.5], 'Recall': 0.819018, 'F1': 0.900506, 'Learning time': 0.832, 'Inference time': 1.651}}


Starting fold 2

Target train facts examples: 208
Target train pos examples: 58
Target train neg examples: 3423

Target test facts examples: 870
Target test pos	 examples: 324
Target test neg examples: 10813

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
1;true;haswordtitle(D, C).;true;true
1;true,true;haswordauthor(E, C).;true;true
1;true,true,true;author(F, E), title(F, D).;false;false
1;true,true,false;title(G, D), venue(G, B).;false;false
1;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
1;true,false,true;title(J, I), venue(J, B).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, B).;false;true
2;true,true,false;title(F, D), venue(F, A).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
2;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
2;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
3;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
3;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
3;true,false,false;haswordvenue(B, L), haswordauthor(M, L).;false;false
3;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordauthor(D, C).;true;true
6;true,true;author(E, D), venue(E, A).;false;true
6;true,true,false;haswordtitle(F, C).;false;false
6;true,false;haswordtitle(G, C).;true;true
6;true,false,true;title(H, G), venue(H, B).;false;false
6;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
7;false,true;haswordauthor(N, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1418510649004877;  // std dev = 2.98e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 7.30e-08, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.12544463852839147;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5420972039446066;  // std dev = 0.776, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1123163781936064;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.11231637819360621;  // std dev = 7.15e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( movie(E, A) )
%   | | then return 0.2818941101236587;  // std dev = 0.231, 79.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=58 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.10159632948783615;  // std dev = 5.96e-08, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.34265442847036826;  // std dev = 0.662, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926096;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.13036697302772227;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926108;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.28003901508965073;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.11628557480673272;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839682;  // std dev = 5.43e-09, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.22717936843213965;  // std dev = 1.03e-07, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.10485844975963411;  // std dev = 5.27e-09, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109164;  // std dev = 4.59e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18977290173189232;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( movie(E, B) )
%   | | then return -0.09449159105685051;  // std dev = 0.016, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07218661152855602;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.16229377203673143;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.0875661916900672;  // std dev = 9.13e-09, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420267;  // std dev = 4.27e-09, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14141909280633855;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.06749867267734948;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.08081782760087698;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.977686
   AUC PR    = 0.861626
   CLL	      = -0.084046
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 0.885 seconds
Total inference time: 1.843 seconds
AUC ROC: 0.977686


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.067945
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.024 seconds
Parameter learned model CLL: -0.067945


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.0, 0, 58], 'true,false,false,true': [2.98e-08, 32, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.3e-08, 75, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)'}, {'true,true': [0.0, 0, 58], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 32, 0], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 82, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.776, 1, 58], 'true,false,true': [0.0, 4, 0], 'true,false,false,true': [0.0, 27, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.15e-08, 87, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.231, 21, 58], 'true,false,false': [0.0, 0, 0], 'false,true': [5.96e-08, 80, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.662, 1, 58], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [0.0, 26, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 78, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 58], 'true,false,false,true': [0.0, 30, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.43e-09, 90, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [1.03e-07, 0, 58], 'true,false,false,true': [5.27e-09, 22, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.59e-08, 82, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [0.016, 18, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 85, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 58], 'true,false,false,true': [9.13e-09, 23, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.27e-09, 83, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 31, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 73, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.23470921493814276, 7.105427357601002e-17], 'true': [0.0, 0.2291358024691354], 'true,false': [-3.675221047035001e-16, 2.7755575615628914e-17], 'false': [7.105427357601002e-17, nan], 'true,false,false': [2.7755575615628914e-17, nan]}, {'': [0.16357695890560142, -2.166288828536891e-17], 'true': [-1.2250736823450003e-16, -6.938893903907228e-18], 'true,false': [-6.938893903907228e-18, nan], 'true,false,true': [nan, -6.938893903907228e-18]}, {'': [0.10339618805439184, 5.870144727903127e-17], 'true': [0.010212207270416458, -8.953411488912552e-18], 'false': [5.870144727903127e-17, nan], 'true,false': [0.0, -4.11193712824132e-18], 'true,false,false': [-4.11193712824132e-18, nan]}, {'': [0.056483137010199205, 4.4408920985006264e-17], 'true': [-1.1564823173178713e-18, 0.053247642461065045], 'true,false': [0.053247642461065045, nan], 'false': [4.4408920985006264e-17, nan]}, {'': [0.05335185024394514, 0.0], 'true': [0.007432484851864367, 9.414773326237223e-05], 'true,false': [0.0, -1.0675221390626506e-17], 'false': [0.0, nan], 'true,false,false': [-1.0675221390626506e-17, nan]}, {'': [0.0352927859205028, 2.960594732333751e-17], 'true': [nan, 0.0352927859205028], 'true,false': [-1.0719394720518753e-16, -2.2204460492503132e-17], 'false': [2.960594732333751e-17, nan], 'true,false,false': [-2.2204460492503132e-17, nan]}, {'': [0.02288878315450888, 2.572467983887558e-17], 'true': [0.0, 0.02198091684646733], 'true,false': [1.8376105235175005e-16, 1.261617073437678e-18], 'false': [2.572467983887558e-17, nan], 'true,false,false': [1.261617073437678e-18, nan]}, {'': [0.014609011745738648, -7.836868409118752e-18], 'true': [0.0, 1.4526828279140536e-05], 'true,false': [1.4526828279140536e-05, nan], 'false': [-7.836868409118752e-18, nan]}, {'': [0.012860791657638823, 1.8726653427412278e-17], 'true': [0.0, 0.012693434227362462], 'true,false': [-7.656710514656252e-18, 3.620292471603771e-18], 'false': [1.8726653427412278e-17, nan], 'true,false,false': [3.620292471603771e-18, nan]}, {'': [0.011276404126333612, -8.364694021148439e-18], 'true': [-1.1485065771984378e-17, 5.370504418145475e-06], 'true,false': [0.0, -4.476705744456276e-18], 'true,false,false': [-4.476705744456276e-18, nan], 'false': [-8.364694021148439e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(B, D).;true;true
2;true,false;genre(A, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(A, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
4;true,false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
8;true,false;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.14185106490048763;  // std dev = 8.16e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else return -0.12544463852839138;  // std dev = 0.000, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5553664367462838;  // std dev = 1.19e-07, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.1123163781936064;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.11231637819360622;  // std dev = 6.83e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then if ( female(B) )
%   | | | then return -0.10159632948783635;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.10159632948783635;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return 0.4175135841583103;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else if ( female(B) )
%   | then if ( female(A) )
%   | | then return -0.10159632948783634;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( female(A) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783635;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | | else return -0.10159632948783633;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.30990689383379716;  // std dev = 0.082, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( female(A) )
%   | | | then return -0.09269127618926096;  // std dev = 7.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.09269127618926094;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( female(B) )
%   | then return -0.09269127618926104;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else if ( female(A) )
%   | | then return -0.092691276189261;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( actor(A) )
%   | | | then return -0.09269127618926105;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | | else return -0.09269127618926098;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.2572312519565587;  // std dev = 3.73e-09, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.25723125195655855;  // std dev = 8.33e-09, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( female(B) )
%   | | then return -0.08518475138839687;  // std dev = 1.61e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( female(A) )
%   | | | then return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.08518475138839687;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( female(B) )
%   | then return -0.08518475138839689;  // std dev = 9.31e-10, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( actor(A) )
%   | | then if ( actor(B) )
%   | | | then return -0.08518475138839679;  // std dev = 2.24e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.08518475138839691;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.21121111831055644;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.21121111831055644;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return -0.07877675473109172;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( female(A) )
%   | then if ( female(B) )
%   | | then return -0.07877675473109177;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.07877675473109179;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( female(B) )
%   | | then if ( actor(A) )
%   | | | then return -0.07877675473109179;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.07877675473109177;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.07877675473109179;  // std dev = 9.31e-10, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.1781617678177662;  // std dev = 5.27e-09, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.17816176781776613;  // std dev = 6.97e-09, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( female(A) )
%   | | then if ( female(B) )
%   | | | then return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( female(B) )
%   | | | then return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.07324622576333704;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.07324622576333704;  // std dev = 0.000, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.15355149287704611;  // std dev = 1.83e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.1535514928770461;  // std dev = 2.98e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return -0.06842697784420275;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else if ( female(B) )
%   | then return -0.06842697784420275;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( female(A) )
%   | | then return -0.06842697784420272;  // std dev = 9.31e-10, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( actor(A), actor(B) )
%   | | | then return -0.06842697784420272;  // std dev = 5.27e-09, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13463722265940326;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(A) )
%   | | | then return -0.06419184008202619;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.06419184008202622;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else return -0.06419184008202625;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */


Results
   AUC ROC   = 0.998467
   AUC PR    = 0.957288
   CLL	      = -0.079709
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 1.497 seconds
Total inference time: 1.658 seconds
AUC ROC: 0.998467


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064136
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.009 seconds
Refined model CLL: -0.064136


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998467
   AUC PR    = 0.957288
   CLL	      = -0.079709
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 4.415 seconds
Total inference time: 1.658 seconds
AUC ROC: 0.998467
Total revision time: 4.415
Best scored revision CLL: -0.064136


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 02:34:20
{'AUC ROC': 0.998467, 'AUC PR': 0.957288, 'CLL': -0.079709, 'Precision': [1.0, 0.5], 'Recall': 0.817901, 'F1': 0.89983, 'Learning time': 4.415, 'Inference time': 1.658, 'parameter': {'AUC ROC': 0.977686, 'AUC PR': 0.861626, 'CLL': -0.084046, 'Precision': [1.0, 0.5], 'Recall': 0.817901, 'F1': 0.89983, 'Learning time': 0.885, 'Inference time': 1.843}}


Starting fold 3

Target train facts examples: 341
Target train pos examples: 178
Target train neg examples: 3543

Target test facts examples: 737
Target test pos	 examples: 204
Target test neg examples: 10693

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
1;true;haswordtitle(D, C).;true;true
1;true,true;haswordauthor(E, C).;true;true
1;true,true,true;author(F, E), title(F, D).;false;false
1;true,true,false;title(G, D), venue(G, B).;false;false
1;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
1;true,false,true;title(J, I), venue(J, B).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, B).;false;true
2;true,true,false;title(F, D), venue(F, A).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
2;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
2;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
3;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
3;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
3;true,false,false;haswordvenue(B, L), haswordauthor(M, L).;false;false
3;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordauthor(D, C).;true;true
6;true,true;author(E, D), venue(E, A).;false;true
6;true,true,false;haswordtitle(F, C).;false;false
6;true,false;haswordtitle(G, C).;true;true
6;true,false,true;title(H, G), venue(H, B).;false;false
6;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
7;false,true;haswordauthor(N, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995104;  // std dev = 7.54e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.2917772536835841;  // std dev = 5.268, 113.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.1418510649004881;  // std dev = 0.000, 264.000 (wgt'ed) examples reached here.  /* #neg=264 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6586879409347435;  // std dev = 2.574, 139.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=129 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2507028191396417;  // std dev = 5.252, 115.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.12544463852839186;  // std dev = 0.000, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5297970006028875;  // std dev = 2.029, 136.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.1556248943148491;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.18355755931665022;  // std dev = 5.400, 121.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.11231637819360671;  // std dev = 0.000, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.17803313757286257;  // std dev = 0.361, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( movie(E, A) )
%   | | then return 0.30809776199583994;  // std dev = 0.367, 246.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=178 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.10159632948783662;  // std dev = 0.000, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.35005350709270694;  // std dev = 1.109, 132.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.11662292534665622;  // std dev = 7.45e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.09787988407269037;  // std dev = 5.353, 118.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926046;  // std dev = 6.72e-09, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1857901701079821;  // std dev = 0.554, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( genre(B, E) )
%   | | then return 0.2880681419454117;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04386425793084575;  // std dev = 5.499, 128.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839678;  // std dev = 5.89e-09, 268.000 (wgt'ed) examples reached here.  /* #neg=268 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.17296927791244754;  // std dev = 0.480, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.2327490159811177;  // std dev = 1.12e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.0966096481793322;  // std dev = 5.213, 110.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109143;  // std dev = 4.21e-08, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1564897993913092;  // std dev = 1.511, 140.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=129 */
%   | else if ( movie(E, B) )
%   | | then return 0.09093312361377469;  // std dev = 5.067, 115.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333695;  // std dev = 5.89e-09, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16912147390397875;  // std dev = 0.447, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( genre(B, E) )
%   | | then return 0.17049939324791097;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04494326183039326;  // std dev = 5.250, 112.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420287;  // std dev = 0.000, 274.000 (wgt'ed) examples reached here.  /* #neg=274 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13182304384775306;  // std dev = 0.935, 134.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.07054307149326407;  // std dev = 5.27e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.058940244050851555;  // std dev = 5.133, 106.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.0641918400820262;  // std dev = 3.23e-09, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.993692
   AUC PR    = 0.961008
   CLL	      = -0.18574
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95098
   F1        = 0.974874


Total learning time: 1.25 seconds
Total inference time: 1.653 seconds
AUC ROC: 0.993692


Results scoring model
   AUC ROC   = 0.976419
   AUC PR    = 0.83578
   CLL	      = -0.158617
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total scoring time: 0.992 seconds
Parameter learned model CLL: -0.158617


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 15, 0], 'true,false,true': [7.54e-07, 0, 129], 'true,false,false,true': [5.268, 64, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 264, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)'}, {'true,true': [2.574, 10, 129], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [5.252, 66, 49], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 246, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [2.029, 7, 129], 'true,false,true': [7.45e-09, 13, 0], 'true,false,false,true': [5.4, 72, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 314, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.361, 22, 0], 'true,false,true': [0.367, 68, 178], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 291, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.109, 3, 129], 'true,false,true': [7.45e-09, 19, 0], 'true,false,false,true': [5.353, 69, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.72e-09, 253, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.554, 22, 0], 'true,false,true': [0.0, 0, 129], 'true,false,false,true': [5.499, 79, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.89e-09, 268, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.48, 19, 0], 'true,false,true': [1.12e-07, 0, 129], 'true,false,false,true': [5.213, 61, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.21e-08, 286, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [1.511, 11, 129], 'true,false,true': [5.067, 66, 49], 'true,false,false': [0.0, 0, 0], 'false,true': [5.89e-09, 293, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.447, 16, 0], 'true,false,true': [0.0, 0, 129], 'true,false,false,true': [5.25, 63, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 274, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.935, 5, 129], 'true,false,true': [5.27e-09, 21, 0], 'true,false,false,true': [5.133, 57, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.23e-09, 257, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21290254205211834, -7.737918050417758e-17], 'true': [-1.4802973661668754e-17, 0.1945222320879779], 'true,false': [4.40646657835721e-15, 0.24559479990602262], 'true,false,false': [0.24559479990602262, nan], 'false': [-7.737918050417758e-17, nan]}, {'': [0.17592745917830058, -6.137818347521191e-17], 'true': [0.04766386838569656, 0.2398693065154907], 'true,false': [0.2398693065154907, nan], 'true,false,true': [nan, 0.2398693065154907]}, {'': [0.16417072479955266, -5.657187386625001e-17], 'true': [0.03026409780392115, 0.22766800475503665], 'true,false': [4.270088556250602e-18, 0.2409671470527971], 'true,false,false': [0.2409671470527971, nan], 'false': [-5.657187386625001e-17, nan]}, {'': [0.14180786257299632, -5.493887132165723e-17], 'true': [0.005935195327842959, 0.13455940681634718], 'true,false': [0.13455940681634718, nan], 'false': [-5.493887132165723e-17, nan]}, {'': [0.13374551803905266, 4.388233298913662e-17], 'true': [0.00930935440459032, 0.21463881867720921], 'true,false': [2.921639538487254e-18, 0.24281815570238433], 'true,false,false': [0.24281815570238433, nan], 'false': [4.388233298913662e-17, nan]}, {'': [0.13223884279904854, 3.396951045494882e-17], 'true': [0.013939886428044472, 0.13258253984030394], 'true,false': [-1.3770208057366282e-16, 0.23626708984375097], 'true,false,false': [0.23626708984375097, nan], 'false': [3.396951045494882e-17, nan]}, {'': [0.1185070045520248, 6.211037900000876e-18], 'true': [0.012117801247976123, 0.11829761819500459], 'true,false': [9.639145640156398e-17, 0.24702479338842998], 'true,false,false': [0.24702479338842998, nan], 'false': [6.211037900000876e-18, nan]}, {'': [0.11069054255986627, 3.4102413725687404e-17], 'true': [0.016311682374422383, 0.22322703691698298], 'true,false': [0.22322703691698298, nan], 'false': [3.4102413725687404e-17, nan]}, {'': [0.11632222923551999, -3.241527079197537e-17], 'true': [0.012514235694533929, 0.11828869535973283], 'true,false': [-8.26212483441977e-17, 0.24609374999999942], 'true,false,false': [0.24609374999999942, nan], 'false': [-3.241527079197537e-17, nan]}, {'': [0.10764907607922154, 1.0367841475098738e-17], 'true': [0.006520519907178796, 0.20978679066543623], 'true,false': [1.32169407693471e-18, 0.2485760056959779], 'true,false,false': [0.2485760056959779, nan], 'false': [1.0367841475098738e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(B, D).;true;true
2;true,false;genre(A, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
4;true,false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
5;true,false;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
8;true,false;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995104;  // std dev = 7.54e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048766;  // std dev = 5.58e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | | else return 0.8581489350995122;  // std dev = 1.69e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.1418510649004879;  // std dev = 0.000, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109565;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.13626430940704182;  // std dev = 0.366, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   else return -0.125444638528392;  // std dev = 0.000, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.5553664367462834;  // std dev = 4.21e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else return -0.11124215817059603;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( genre(A, E) )
%   | | then return -0.11124215817059603;  // std dev = 9.13e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.5553664367462833;  // std dev = 1.40e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.12482507931909617;  // std dev = 0.332, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return -0.11231637819360685;  // std dev = 0.000, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.4175135841583096;  // std dev = 3.58e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.1087002508053042;  // std dev = 0.283, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   else return -0.10159632948783662;  // std dev = 0.000, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.32071184716014967;  // std dev = 1.84e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else return -0.09128394235147806;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( genre(A, E) )
%   | | then return -0.09128394235147803;  // std dev = 5.27e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.3207118471601494;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.10735345550626686;  // std dev = 0.358, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   else return -0.09269127618926043;  // std dev = 1.46e-07, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08398906230289119;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( genre(B, E) )
%   | | then return 0.25517224256948967;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.25517224256948934;  // std dev = 2.98e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.10058298352119688;  // std dev = 0.342, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   else return -0.08518475138839678;  // std dev = 9.06e-08, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07774906766020927;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( genre(B, E) )
%   | | then return 0.2097577156325353;  // std dev = 1.55e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.20975771563253554;  // std dev = 4.21e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.0816907043783815;  // std dev = 0.227, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   else return -0.07877675473109143;  // std dev = 4.21e-08, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1770964977452778;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.07591917584342685;  // std dev = 0.212, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   else return -0.07324622576333689;  // std dev = 1.07e-07, 278.000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06742089266527537;  // std dev = 5.27e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.1527438580936714;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.15274385809367083;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.07445639826454782;  // std dev = 0.197, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   else return -0.0684269778442029;  // std dev = 0.000, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.12952270142508193;  // std dev = 0.338, 132.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.06330342764086136;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.1340070300080108;  // std dev = 4.71e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.06836020117820736;  // std dev = 0.205, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return -0.06419184008202612;  // std dev = 7.30e-08, 268.000 (wgt'ed) examples reached here.  /* #neg=268 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.062448
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.621 seconds
Total inference time: 1.561 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.066094
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.959 seconds
Refined model CLL: -0.066094


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.062448
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 4.822 seconds
Total inference time: 1.561 seconds
AUC ROC: 1.0
Total revision time: 4.822
Best scored revision CLL: -0.066094


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 02:34:28
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.062448, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 4.822, 'Inference time': 1.561, 'parameter': {'AUC ROC': 0.993692, 'AUC PR': 0.961008, 'CLL': -0.18574, 'Precision': [1.0, 0.5], 'Recall': 0.95098, 'F1': 0.974874, 'Learning time': 1.25, 'Inference time': 1.653}}


Starting fold 4

Target train facts examples: 151
Target train pos examples: 45
Target train neg examples: 1891

Target test facts examples: 927
Target test pos	 examples: 337
Target test neg examples: 12345

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
1;true;haswordtitle(D, C).;true;true
1;true,true;haswordauthor(E, C).;true;true
1;true,true,true;author(F, E), title(F, D).;false;false
1;true,true,false;title(G, D), venue(G, B).;false;false
1;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
1;true,false,true;title(J, I), venue(J, B).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, B).;false;true
2;true,true,false;title(F, D), venue(F, A).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
2;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
2;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
3;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
3;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
3;true,false,false;haswordvenue(B, L), haswordauthor(M, L).;false;false
3;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordauthor(D, C).;true;true
6;true,true;author(E, D), venue(E, A).;false;true
6;true,true,false;haswordtitle(F, C).;false;false
6;true,false;haswordtitle(G, C).;true;true
6;true,false,true;title(H, G), venue(H, B).;false;false
6;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
7;false,true;haswordauthor(N, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 6.50e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.70110562849923;  // std dev = 0.836, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.1254446385283916;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5598973421649127;  // std dev = 5.96e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.11231637819360639;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.11231637819360625;  // std dev = 5.58e-08, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.21883418626504558;  // std dev = 0.166, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then return 0.20776610502997625;  // std dev = 0.257, 76.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=45 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.10159632948783619;  // std dev = 4.83e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3712359994878474;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.08329125309258957;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.12219074892982064;  // std dev = 1.05e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07714840574965977;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.28942999650272355;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.10967777241038514;  // std dev = 1.29e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839679;  // std dev = 2.63e-09, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0718317843115757;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.233691312669194;  // std dev = 4.71e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09941742154628143;  // std dev = 2.36e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109169;  // std dev = 3.33e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17185332047979213;  // std dev = 0.735, 47.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=45 */
%   | else if ( movie(E, B) )
%   | | then return -0.08938413040521229;  // std dev = 0.023, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.21901470786293836;  // std dev = 0.222, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.16894417441800133;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.08374516826505192;  // std dev = 1.49e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420267;  // std dev = 3.73e-09, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14653092446709665;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.07753920348362174;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.978805
   AUC PR    = 0.865091
   CLL	      = -0.080536
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total learning time: 0.919 seconds
Total inference time: 1.9 seconds
AUC ROC: 0.978805


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.067909
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.866 seconds
Parameter learned model CLL: -0.067909


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [2.23e-07, 0, 45], 'true,false,false,true': [0.0, 13, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.5e-08, 64, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)'}, {'true,true': [0.836, 1, 45], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 20, 0], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 61, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [5.96e-08, 0, 45], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [0.0, 25, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.58e-08, 70, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.166, 2, 0], 'true,false,true': [0.257, 31, 45], 'true,false,false': [0.0, 0, 0], 'false,true': [4.83e-08, 65, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 45], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.05e-08, 25, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 65, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.0, 0, 45], 'true,false,false,true': [1.29e-08, 25, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.63e-09, 76, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [4.71e-08, 0, 45], 'true,false,false,true': [2.36e-08, 33, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.33e-08, 68, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.735, 2, 45], 'true,false,true': [0.023, 16, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 62, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.222, 2, 0], 'true,false,true': [0.0, 0, 45], 'true,false,false,true': [1.49e-08, 27, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.73e-09, 71, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 45], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 26, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 53, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.18098247629991426, 6.591949208711867e-17], 'true': [0.0, 0.17390011890606466], 'true,false': [1.105288700071267e-15, -1.2810265668751807e-17], 'false': [6.591949208711867e-17, nan], 'true,false,false': [-1.2810265668751807e-17, nan]}, {'': [0.15487207398521405, -4.186086814160426e-17], 'true': [0.015181896531630958, 0.0], 'true,false': [0.0, nan], 'true,false,true': [nan, 0.0]}, {'': [0.10590733261833839, 4.4408920985006264e-17], 'true': [7.894919286223336e-17, -4.11193712824132e-18], 'false': [4.4408920985006264e-17, nan], 'true,false': [0.0, 0.0], 'true,false,false': [0.0, nan]}, {'': [0.06913880578244302, 3.586874387250506e-17], 'true': [0.01374471506171343, 0.06593019094698724], 'true,false': [0.06593019094698724, nan], 'false': [3.586874387250506e-17, nan]}, {'': [0.05618692836350329, 0.0], 'true': [-1.9737298215558337e-16, 5.596045770676371e-05], 'true,false': [0.0, 4.440892098500626e-18], 'true,false,false': [4.440892098500626e-18, nan], 'false': [0.0, nan]}, {'': [0.03704607101886241, 7.304098846218135e-18], 'true': [-1.1564823173178713e-18, 0.03657099747094875], 'true,false': [-1.9737298215558337e-16, 6.661338147750939e-18], 'false': [7.304098846218135e-18, nan], 'true,false,false': [6.661338147750939e-18, nan]}, {'': [0.027046874947577355, 1.6326809185664067e-17], 'true': [0.0, 0.027083780700820983], 'true,false': [4.9343245538895844e-17, 1.682156097916904e-17], 'true,false,false': [1.682156097916904e-17, nan], 'false': [1.6326809185664067e-17, nan]}, {'': [0.021518466802011766, -8.953411488912552e-19], 'true': [0.011500655686822105, 3.2846159070714503e-05], 'true,false': [3.2846159070714503e-05, nan], 'false': [-8.953411488912552e-19, nan]}, {'': [0.017489478772230248, 1.2509555207044018e-17], 'true': [0.024717231150356664, 0.014965289977873445], 'true,false': [-4.9343245538895844e-17, 8.22387425648264e-18], 'false': [1.2509555207044018e-17, nan], 'true,false,false': [8.22387425648264e-18, nan]}, {'': [0.011652982348864468, -3.142140635731575e-18], 'true': [-6.167905692361981e-17, -4.270088556250602e-18], 'false': [-3.142140635731575e-18, nan], 'true,false': [nan, -4.270088556250602e-18], 'true,false,false': [-4.270088556250602e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(B, D).;true;true
2;true,false;genre(A, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
4;true,false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
5;true,false;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
8;true,false;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.14185106490048766;  // std dev = 5.96e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.1280696667479268;  // std dev = 0.030, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.12544463852839158;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5553664367462839;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.12696439279301783;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.11205492540597253;  // std dev = 1.49e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.11231637819360628;  // std dev = 4.34e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.41751358415831025;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( actor(A) )
%   | | then return -0.10138079834263906;  // std dev = 7.45e-09, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return -0.11354470500255201;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.10159632948783616;  // std dev = 5.37e-08, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.32071184716014944;  // std dev = 2.98e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.10260782614554724;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.09251078450111101;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.09269127618926107;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.2467136100041205;  // std dev = 0.375, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.2551722425694896;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.08503154842970975;  // std dev = 9.13e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.08518475138839679;  // std dev = 1.67e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0746127978987241;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.2097577156325355;  // std dev = 5.58e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.07864518619079133;  // std dev = 8.33e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.07877675473109168;  // std dev = 3.49e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527753;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.07301507019001637;  // std dev = 0.003, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.07324622576333704;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06503837114360335;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.15274385809367083;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.06833450232251012;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.06842697784420267;  // std dev = 3.07e-08, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801104;  // std dev = 2.36e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.06397766853401829;  // std dev = 0.003, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else return -0.06419184008202625;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */


Results
   AUC ROC   = 0.998709
   AUC PR    = 0.960275
   CLL	      = -0.078032
   Precision = 0.80814 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.816446


Total learning time: 0.881 seconds
Total inference time: 1.675 seconds
AUC ROC: 0.998709


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06521
   Precision = 0.918367 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.957447


Total scoring time: 0.754 seconds
Refined model CLL: -0.06521


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998709
   AUC PR    = 0.960275
   CLL	      = -0.078032
   Precision = 0.80814 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.816446


Total learning time: 3.4200000000000004 seconds
Total inference time: 1.675 seconds
AUC ROC: 0.998709
Total revision time: 3.4200000000000004
Best scored revision CLL: -0.06521


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 02:34:36
{'AUC ROC': 0.998709, 'AUC PR': 0.960275, 'CLL': -0.078032, 'Precision': [0.80814, 0.5], 'Recall': 0.824926, 'F1': 0.816446, 'Learning time': 3.4200000000000004, 'Inference time': 1.675, 'parameter': {'AUC ROC': 0.978805, 'AUC PR': 0.865091, 'CLL': -0.080536, 'Precision': [1.0, 0.5], 'Recall': 0.824926, 'F1': 0.904065, 'Learning time': 0.919, 'Inference time': 1.9}}


Starting fold 5

Target train facts examples: 163
Target train pos examples: 45
Target train neg examples: 2071

Target test facts examples: 915
Target test pos	 examples: 337
Target test neg examples: 12165

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
1;true;haswordtitle(D, C).;true;true
1;true,true;haswordauthor(E, C).;true;true
1;true,true,true;author(F, E), title(F, D).;false;false
1;true,true,false;title(G, D), venue(G, B).;false;false
1;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
1;true,false,true;title(J, I), venue(J, B).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, B).;false;true
2;true,true,false;title(F, D), venue(F, A).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
2;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
2;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
3;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
3;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
3;true,false,false;haswordvenue(B, L), haswordauthor(M, L).;false;false
3;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordauthor(D, C).;true;true
6;true,true;author(E, D), venue(E, A).;false;true
6;true,true,false;haswordtitle(F, C).;false;false
6;true,false;haswordtitle(G, C).;true;true
6;true,false,true;title(H, G), venue(H, B).;false;false
6;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
7;false,true;haswordauthor(N, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995115;  // std dev = 2.38e-07, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.14386322081379807;  // std dev = 2.673, 35.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 6.14e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109548;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.21008910010526818;  // std dev = 2.509, 27.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.12544463852839155;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5553664367462844;  // std dev = 9.42e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.15036234386167283;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.10350706964055527;  // std dev = 2.657, 34.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.11231637819360625;  // std dev = 5.67e-08, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13214506156350223;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then return 0.31522243787783144;  // std dev = 0.339, 61.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=45 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.10159632948783615;  // std dev = 5.67e-08, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3433927475123273;  // std dev = 4.21e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.11771285161149843;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.014173414986458114;  // std dev = 2.687, 36.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926107;  // std dev = 1.32e-09, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1060269595157876;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.2705953800908966;  // std dev = 3.65e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.05621577716424512;  // std dev = 2.603, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839679;  // std dev = 2.08e-09, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.0963887987579972;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.2205955187962295;  // std dev = 5.96e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.008220800232764077;  // std dev = 2.673, 35.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109172;  // std dev = 2.69e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18500564204114586;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( movie(E, B) )
%   | | then return -0.021279025549287837;  // std dev = 2.717, 41.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.1587176482702403;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.0476975925747213;  // std dev = 2.603, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420268;  // std dev = 3.36e-09, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.12413916719488845;  // std dev = 0.515, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.08661559034748054;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.060335986376117035;  // std dev = 2.560, 29.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.982257
   AUC PR    = 0.888508
   CLL	      = -0.13724
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.854599
   F1        = 0.9216


Total learning time: 0.822 seconds
Total inference time: 1.814 seconds
AUC ROC: 0.982257


Results scoring model
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.141828
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total scoring time: 0.873 seconds
Parameter learned model CLL: -0.141828


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [2.38e-07, 0, 35], 'true,false,false,true': [2.673, 25, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.14e-08, 60, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)'}, {'true,true': [0.0, 0, 35], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [2.509, 17, 10], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 48, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [9.42e-08, 0, 35], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.657, 24, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.67e-08, 71, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.339, 16, 45], 'true,false,false': [0.0, 0, 0], 'false,true': [5.67e-08, 75, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [4.21e-08, 0, 35], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.687, 26, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.32e-09, 78, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [2.63e-09, 3, 0], 'true,false,true': [3.65e-08, 0, 35], 'true,false,false,true': [2.603, 21, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.08e-09, 68, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [5.96e-08, 0, 35], 'true,false,false,true': [2.673, 25, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.69e-08, 62, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 35], 'true,false,true': [2.717, 31, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 80, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 35], 'true,false,false,true': [2.603, 21, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.36e-09, 69, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.515, 1, 35], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [2.56, 19, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 62, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2343750000000003, 6.29126380620922e-17], 'true': [0.0, 0.22959183673469416], 'true,false': [1.6240976817373718e-15, 0.20408163265306134], 'true,false,false': [0.20408163265306134, nan], 'false': [6.29126380620922e-17, nan]}, {'': [0.16534125052853435, -3.0068540250264654e-17], 'true': [-7.105427357601002e-16, 0.23319615912208497], 'true,false': [0.23319615912208497, nan], 'true,false,true': [nan, 0.23319615912208497]}, {'': [0.15540433701356032, 4.5347137625534564e-17], 'true': [2.5376526277146434e-16, 0.19946005033830005], 'true,false': [0.0, 0.2076124567474046], 'true,false,false': [0.2076124567474046, nan], 'false': [4.5347137625534564e-17, nan]}, {'': [0.1174702687136632, 4.2928623618839385e-17], 'true': [0.0, 0.114968175805009], 'true,false': [0.114968175805009, nan], 'false': [4.2928623618839385e-17, nan]}, {'': [0.12758931136839016, 0.0], 'true': [5.075305255429287e-17, 0.1909257697585038], 'true,false': [0.0, 0.2006172839506176], 'true,false,false': [0.2006172839506176, nan], 'false': [0.0, nan]}, {'': [0.11229282155353387, 4.081702296416017e-18], 'true': [2.3129646346357427e-18, 0.11408674714127029], 'true,false': [3.8064789415719653e-17, 0.21852237252861598], 'true,false,false': [0.21852237252861598, nan], 'false': [4.081702296416017e-18, nan]}, {'': [0.11233759886412319, 1.1639434935586319e-17], 'true': [0.0, 0.11331657159775844], 'true,false': [1.0150610510858574e-16, 0.20408163265306134], 'true,false,false': [0.20408163265306134, nan], 'false': [1.1639434935586319e-17, nan]}, {'': [0.10771632998974731, -5.551115123125783e-18], 'true': [-2.5376526277146434e-17, 0.18007235062959714], 'true,false': [0.18007235062959714, nan], 'false': [-5.551115123125783e-18, nan]}, {'': [0.10570934124089733, 1.206764157201257e-17], 'true': [nan, 0.10570934124089733], 'true,false': [-6.026924990822278e-17, 0.2185223725286161], 'true,false,false': [0.2185223725286161, nan], 'false': [1.206764157201257e-17, nan]}, {'': [0.10477690726798382, -3.581364595565021e-18], 'true': [0.007373388552842728, 0.21908663594341807], 'true,false': [0.0, 0.22592152199762217], 'true,false,false': [0.22592152199762217, nan], 'false': [-3.581364595565021e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(B, D).;true;true
2;true,false;genre(A, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(A, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
4;true,false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
5;true,false;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995115;  // std dev = 2.38e-07, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.14185106490048766;  // std dev = 6.66e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109548;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( actor(B) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1254446385283916;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5553664367462844;  // std dev = 9.42e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.1272556476027624;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( actor(B) )
%   | | | then return -0.11231637819360636;  // std dev = 1.29e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.11231637819360626;  // std dev = 4.94e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1137798166157606;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( actor(B) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return 0.41751358415831025;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.10159632948783617;  // std dev = 4.83e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3207118471601495;  // std dev = 2.98e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.10280123101792009;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3207118471601494;  // std dev = 2.58e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.11615515125528454;  // std dev = 0.575, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.09269127618926107;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09369922332610636;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.25517224256948956;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( actor(B) )
%   | | | then return -0.08337395910202282;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return 0.2551722425694894;  // std dev = 1.83e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.08518475138839679;  // std dev = 2.98e-08, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08603952387938174;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253542;  // std dev = 5.37e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( actor(B) )
%   | | | then return -0.07721963235652483;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return 0.2097577156325356;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07877675473109165;  // std dev = 4.28e-08, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1770964977452775;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( actor(B) )
%   | | then return -0.07215637021576217;  // std dev = 0.007, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return 0.17709649774527736;  // std dev = 7.45e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07324622576333704;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1527438580936709;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( actor(B) )
%   | | then return -0.06722533158984553;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return 0.15274385809367094;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06842697784420267;  // std dev = 3.41e-08, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801115;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( actor(B) )
%   | | | then return -0.06313056684082284;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0.13400703000801117;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06419184008202625;  // std dev = 0.000, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.074062
   Precision = 0.873057 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.932227


Total learning time: 1.197 seconds
Total inference time: 1.687 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065017
   Precision = 0.978261 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.989011


Total scoring time: 0.856 seconds
Refined model CLL: -0.065017


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.074062
   Precision = 0.873057 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.932227


Total learning time: 3.7479999999999998 seconds
Total inference time: 1.687 seconds
AUC ROC: 1.0
Total revision time: 3.7479999999999998
Best scored revision CLL: -0.065017


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 02:34:44
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.074062, 'Precision': [0.873057, 0.5], 'Recall': 1.0, 'F1': 0.932227, 'Learning time': 3.7479999999999998, 'Inference time': 1.687, 'parameter': {'AUC ROC': 0.982257, 'AUC PR': 0.888508, 'CLL': -0.13724, 'Precision': [1.0, 0.5], 'Recall': 0.854599, 'F1': 0.9216, 'Learning time': 0.822, 'Inference time': 1.814}}


Starting fold 1

Target train facts examples: 215
Target train pos examples: 56
Target train neg examples: 3308

Target test facts examples: 863
Target test pos	 examples: 326
Target test neg examples: 10928

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
1;true;haswordtitle(D, C).;true;true
1;true,true;haswordauthor(E, C).;true;true
1;true,true,true;author(F, E), title(F, D).;false;false
1;true,true,false;title(G, D), venue(G, B).;false;false
1;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
1;true,false,true;title(J, I), venue(J, B).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, B).;false;true
2;true,true,false;title(F, D), venue(F, A).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
2;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
2;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
3;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
3;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
3;true,false,false;haswordvenue(B, L), haswordauthor(M, L).;false;false
3;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordauthor(D, C).;true;true
6;true,true;author(E, D), venue(E, A).;false;true
6;true,true,false;haswordtitle(F, C).;false;false
6;true,false;haswordtitle(G, C).;true;true
6;true,false,true;title(H, G), venue(H, B).;false;false
6;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
7;false,true;haswordauthor(N, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 7.74e-08, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.12544463852839152;  // std dev = 0.000, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5553664367462837;  // std dev = 1.03e-07, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1123163781936064;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.11231637819360622;  // std dev = 6.32e-08, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.22038136586692447;  // std dev = 0.168, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then return 0.2759381531639066;  // std dev = 0.231, 77.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=56 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.10159632948783615;  // std dev = 5.87e-08, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.352304016887602;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.08317319615697588;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.12969322296259386;  // std dev = 2.36e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926105;  // std dev = 2.28e-09, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07704671864348014;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.2766318050580861;  // std dev = 8.43e-08, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.11574385735687528;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839679;  // std dev = 2.46e-09, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07174333184203084;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.22480822251845525;  // std dev = 9.88e-08, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.10441432521278006;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109164;  // std dev = 4.47e-08, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1880591454178932;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( movie(E, B) )
%   | | then return -0.09305038428177556;  // std dev = 0.038, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06151377305775675;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.16101029522823218;  // std dev = 2.58e-08, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.08733833772367527;  // std dev = 1.05e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420267;  // std dev = 3.95e-09, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1404279114860014;  // std dev = 3.65e-08, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.058056924814141854;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.08062286970245093;  // std dev = 1.18e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.978388
   AUC PR    = 0.863056
   CLL	      = -0.083183
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total learning time: 0.925 seconds
Total inference time: 1.76 seconds
AUC ROC: 0.978388


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.067872
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.013 seconds
Parameter learned model CLL: -0.067872


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 6, 0], 'true,false,true': [0.0, 0, 56], 'true,false,false,true': [1.49e-08, 23, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.74e-08, 81, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)'}, {'true,true': [0.0, 0, 56], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 28, 0], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 74, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.03e-07, 0, 56], 'true,false,true': [2.63e-09, 3, 0], 'true,false,false,true': [0.0, 27, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.32e-08, 79, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.168, 2, 0], 'true,false,true': [0.231, 21, 56], 'true,false,false': [0.0, 0, 0], 'false,true': [5.87e-08, 77, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 56], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.36e-08, 32, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.28e-09, 88, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [8.43e-08, 0, 56], 'true,false,false,true': [0.0, 25, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.46e-09, 73, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [9.88e-08, 0, 56], 'true,false,false,true': [0.0, 26, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.47e-08, 80, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 56], 'true,false,true': [0.038, 28, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 97, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [2.58e-08, 0, 56], 'true,false,false,true': [1.05e-08, 35, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.95e-09, 78, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [3.65e-08, 0, 56], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [1.18e-08, 31, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 89, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.22477508650518999, 7.401486830834377e-17], 'true': [-6.938893903907228e-18, 0.20637718314372658], 'true,false': [-1.2688263138573217e-16, 9.654113257610057e-18], 'false': [7.401486830834377e-17, nan], 'true,false,false': [9.654113257610057e-18, nan]}, {'': [0.15864144721448412, -2.700542492331462e-17], 'true': [-1.9032394707859825e-16, -5.9476233462061954e-18], 'true,false': [-5.9476233462061954e-18, nan], 'true,false,true': [nan, -5.9476233462061954e-18]}, {'': [0.10126346315508025, 5.0592441628488145e-17], 'true': [1.9032394707859825e-16, -7.401486830834377e-18], 'false': [5.0592441628488145e-17, nan], 'true,false': [2.3129646346357427e-18, -4.11193712824132e-18], 'true,false,false': [-4.11193712824132e-18, nan]}, {'': [0.058532064378088784, 4.469729060179202e-17], 'true': [0.014109884867581308, 0.05344960709666958], 'true,false': [0.05344960709666958, nan], 'false': [4.469729060179202e-17, nan]}, {'': [0.054036798550405114, 5.046468293750712e-18], 'true': [-1.427429603089487e-16, 0.00011981247856031248], 'true,false': [0.0, 1.734723475976807e-17], 'true,false,false': [1.734723475976807e-17, nan], 'false': [5.046468293750712e-18, nan]}, {'': [0.03333240090801955, 6.083413833562501e-18], 'true': [0.0, 0.032852023264412736], 'true,false': [1.2688263138573217e-16, -1.7763568394002505e-17], 'false': [6.083413833562501e-18, nan], 'true,false,false': [-1.7763568394002505e-17, nan]}, {'': [0.023769455829214463, 2.4980018054066023e-17], 'true': [0.0, 0.023469985056639574], 'true,false': [1.7446361815538174e-16, 0.0], 'false': [2.4980018054066023e-17, nan], 'true,false,false': [0.0, nan]}, {'': [0.01757782473934696, -5.722799096005961e-18], 'true': [-3.568574007723718e-17, 5.1762426061659996e-05], 'true,false': [5.1762426061659996e-05, nan], 'false': [-5.722799096005961e-18, nan]}, {'': [0.014612865883463217, 1.5656991372918874e-17], 'true': [0.0, 0.014598116802149444], 'true,false': [1.1895246692412391e-17, 3.1720657846433043e-18], 'false': [1.5656991372918874e-17, nan], 'true,false,false': [3.1720657846433043e-18, nan]}, {'': [0.011295416025461849, -1.1850695206673019e-17], 'true': [2.3790493384824782e-17, 4.09668112364262e-05], 'true,false': [-5.782411586589357e-19, 4.476705744456276e-18], 'true,false,false': [4.476705744456276e-18, nan], 'false': [-1.1850695206673019e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(B, D).;true;true
2;true,false;genre(A, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
4;true,false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
5;true,false;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
8;true,false;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else return -0.14185106490048766;  // std dev = 7.88e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.12544463852839127;  // std dev = 3.33e-08, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else return -0.1254446385283915;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5553664367462837;  // std dev = 1.03e-07, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.11231637819360642;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else return -0.11231637819360624;  // std dev = 5.87e-08, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then if ( actor(A) )
%   | | then if ( female(A) )
%   | | | then return -0.10159632948783635;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.10159632948783635;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0.4175135841583103;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else if ( female(A) )
%   | then if ( female(B) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return -0.10159632948783634;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( female(B) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( actor(A), actor(B) )
%   | | | then return -0.10159632948783634;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return -0.10159632948783633;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.32071184716014955;  // std dev = 5.27e-09, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.2954232138243512;  // std dev = 0.136, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09269127618926105;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else if ( female(B) )
%   | then return -0.09269127618926105;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else return -0.09269127618926105;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783633;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.25517224256948956;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.26000826811803884;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( female(B) )
%   | | | then return -0.08518475138839685;  // std dev = 9.13e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.08518475138839687;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( female(A) )
%   | then if ( female(B) )
%   | | then return -0.08518475138839687;  // std dev = 1.61e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return -0.08518475138839683;  // std dev = 2.95e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( actor(A) )
%   | | then return -0.0851847513883968;  // std dev = 2.63e-09, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | else return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.2097577156325355;  // std dev = 2.98e-08, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.21316805356966384;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return -0.07877675473109176;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   else if ( female(B) )
%   | then if ( female(A) )
%   | | then return -0.07877675473109172;  // std dev = 1.32e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.07877675473109179;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( female(A) )
%   | | then return -0.07877675473109175;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( actor(A), actor(B) )
%   | | | then return -0.07877675473109179;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return -0.07877675473109177;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17709649774527747;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.17959380672128847;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( female(A) )
%   | | then if ( female(B) )
%   | | | then return -0.07324622576333704;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( female(B), actor(A) )
%   | | | then return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.07713523584852183;  // std dev = 0.025, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.07324622576333704;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16049424294677445;  // std dev = 0.406, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.15274385809367083;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.1546356895769793;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( female(A) )
%   | | | then return -0.06842697784420272;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.06826198571731204;  // std dev = 0.000452, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( female(A) )
%   | then if ( female(B) )
%   | | then return -0.06842697784420272;  // std dev = 9.31e-10, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return -0.06842697784420276;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( female(B) )
%   | | then return -0.06842697784420276;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13400703000801117;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.13548222675708044;  // std dev = 5.89e-09, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( genre(A, E) )
%   | | then return -0.07454808028351045;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( female(A) )
%   | | | then return -0.06419184008202618;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.06400181864996263;  // std dev = 0.000374, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.06419184008202625;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */


Results
   AUC ROC   = 0.998813
   AUC PR    = 0.964914
   CLL	      = -0.08022
   Precision = 0.799401 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.809091


Total learning time: 1.825 seconds
Total inference time: 1.84 seconds
AUC ROC: 0.998813


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064183
   Precision = 0.949153 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.973913


Total scoring time: 1.048 seconds
Refined model CLL: -0.064183


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998813
   AUC PR    = 0.964914
   CLL	      = -0.08022
   Precision = 0.799401 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.809091


Total learning time: 4.811 seconds
Total inference time: 1.84 seconds
AUC ROC: 0.998813
Total revision time: 4.811
Best scored revision CLL: -0.064183


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 02:34:53
{'AUC ROC': 0.998813, 'AUC PR': 0.964914, 'CLL': -0.08022, 'Precision': [0.799401, 0.5], 'Recall': 0.819018, 'F1': 0.809091, 'Learning time': 4.811, 'Inference time': 1.84, 'parameter': {'AUC ROC': 0.978388, 'AUC PR': 0.863056, 'CLL': -0.083183, 'Precision': [1.0, 0.5], 'Recall': 0.819018, 'F1': 0.900506, 'Learning time': 0.925, 'Inference time': 1.76}}


Starting fold 2

Target train facts examples: 208
Target train pos examples: 58
Target train neg examples: 3423

Target test facts examples: 870
Target test pos	 examples: 324
Target test neg examples: 10813

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
1;true;haswordtitle(D, C).;true;true
1;true,true;haswordauthor(E, C).;true;true
1;true,true,true;author(F, E), title(F, D).;false;false
1;true,true,false;title(G, D), venue(G, B).;false;false
1;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
1;true,false,true;title(J, I), venue(J, B).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, B).;false;true
2;true,true,false;title(F, D), venue(F, A).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
2;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
2;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
3;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
3;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
3;true,false,false;haswordvenue(B, L), haswordauthor(M, L).;false;false
3;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordauthor(D, C).;true;true
6;true,true;author(E, D), venue(E, A).;false;true
6;true,true,false;haswordtitle(F, C).;false;false
6;true,false;haswordtitle(G, C).;true;true
6;true,false,true;title(H, G), venue(H, B).;false;false
6;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
7;false,true;haswordauthor(N, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14185106490048768;  // std dev = 4.08e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.30e-08, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.1254446385283914;  // std dev = 0.000, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5553664367462838;  // std dev = 1.19e-07, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.11231637819360642;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.1123163781936062;  // std dev = 7.74e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( movie(E, A) )
%   | | then return 0.24054429541530561;  // std dev = 0.246, 88.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=58 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.10159632948783626;  // std dev = 4.71e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.36042198553315324;  // std dev = 6.66e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.1257503057081669;  // std dev = 2.24e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926107;  // std dev = 1.86e-09, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.28212300691019193;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.11256363692620829;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839682;  // std dev = 5.35e-09, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.22862737340506936;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.10180008482551674;  // std dev = 1.29e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109161;  // std dev = 5.37e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1908177408051835;  // std dev = 5.96e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( movie(E, B) )
%   | | then return -0.08979691122324024;  // std dev = 0.040, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06737946504213939;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.16307514425177133;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.08556901729295774;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420265;  // std dev = 4.75e-09, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14202177488851575;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.06326681354149469;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.07910661702026768;  // std dev = 5.27e-09, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.977686
   AUC PR    = 0.861626
   CLL	      = -0.083602
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 0.891 seconds
Total inference time: 1.75 seconds
AUC ROC: 0.977686


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06748
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.013 seconds
Parameter learned model CLL: -0.06748


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 58], 'true,false,false,true': [4.08e-08, 39, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.3e-08, 91, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)'}, {'true,true': [0.0, 0, 58], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 28, 0], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 88, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.19e-07, 0, 58], 'true,false,true': [2.63e-09, 3, 0], 'true,false,false,true': [0.0, 32, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.74e-08, 96, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.246, 30, 58], 'true,false,false': [0.0, 0, 0], 'false,true': [4.71e-08, 95, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [6.66e-08, 0, 58], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [2.24e-08, 30, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 87, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 58], 'true,false,false,true': [0.0, 24, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.35e-09, 85, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 58], 'true,false,false,true': [1.29e-08, 29, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.37e-08, 93, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [5.96e-08, 0, 58], 'true,false,true': [0.04, 32, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 89, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [0.0, 0, 58], 'true,false,false,true': [0.0, 33, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.75e-09, 96, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [5.27e-09, 30, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 87, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2426283032343635, 7.564156871072495e-17], 'true': [0.0, 0.24040811988521593], 'true,false': [-3.675221047035001e-16, 4.2700885562506023e-17], 'false': [7.564156871072495e-17, nan], 'true,false,false': [4.2700885562506023e-17, nan]}, {'': [0.15675387996801649, -1.766263902812749e-17], 'true': [-1.2250736823450003e-16, -7.93016446160826e-18], 'true,false': [-7.93016446160826e-18, nan], 'true,false,true': [nan, -7.93016446160826e-18]}, {'': [0.1046334481411831, 6.245004513516506e-17], 'true': [2.4501473646900006e-16, -1.2688263138573217e-17], 'false': [6.245004513516506e-17, nan], 'true,false': [2.3129646346357427e-18, -1.0408340855860843e-17], 'true,false,false': [-1.0408340855860843e-17, nan]}, {'': [0.06228418621918705, 2.337311630789803e-17], 'true': [-1.1564823173178713e-18, 0.06054838303919607], 'true,false': [0.06054838303919607, nan], 'false': [2.337311630789803e-17, nan]}, {'': [0.05342928238672648, 2.5522368382187506e-18], 'true': [7.656710514656253e-17, 3.411756813940666e-05], 'true,false': [0.0, 1.6653345369377347e-17], 'true,false,false': [1.6653345369377347e-17, nan], 'false': [2.5522368382187506e-18, nan]}, {'': [0.03261509726202946, 3.004132890162188e-17], 'true': [0.0, 0.03224901028813125], 'true,false': [-1.5313421029312504e-17, 0.0], 'false': [3.004132890162188e-17, nan], 'true,false,false': [0.0, nan]}, {'': [0.02442418035753272, 3.1038493161563513e-17], 'true': [0.0, 0.024262734478383403], 'true,false': [-1.761043418370938e-16, 5.742532885992189e-18], 'false': [3.1038493161563513e-17, nan], 'true,false,false': [5.742532885992189e-18, nan]}, {'': [0.018061239426907027, -7.484649604214538e-18], 'true': [6.125368411725002e-17, 5.072688688752096e-05], 'true,false': [5.072688688752096e-05, nan], 'false': [-7.484649604214538e-18, nan]}, {'': [0.01448155329050168, 2.1973164029039556e-17], 'true': [0.0, 0.014289455512681884], 'true,false': [-3.828355257328126e-18, 0.0], 'false': [2.1973164029039556e-17, nan], 'true,false,false': [0.0, nan]}, {'': [0.011050871957673248, -1.2761184191093753e-17], 'true': [-2.2970131543968756e-17, 7.832446646602947e-06], 'true,false': [0.0, 9.251858538542971e-19], 'true,false,false': [9.251858538542971e-19, nan], 'false': [-1.2761184191093753e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(B, D).;true;true
2;true,false;genre(A, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(A, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
4;true,false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
5;true,false;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
8;true,false;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.14185106490048766;  // std dev = 7.88e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.12544463852839124;  // std dev = 4.08e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   else return -0.12544463852839147;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5553664367462838;  // std dev = 1.19e-07, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.11231637819360643;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.11231637819360624;  // std dev = 6.14e-08, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783633;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then if ( female(A) )
%   | | | then return -0.10159632948783635;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.10159632948783635;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return 0.4175135841583103;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   else if ( actor(A) )
%   | then if ( actor(B) )
%   | | then if ( female(A) )
%   | | | then return -0.10159632948783635;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return -0.10159632948783621;  // std dev = 3.94e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else return -0.10159632948783634;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3207118471601497;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926098;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.09269127618926104;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( female(A) )
%   | then return -0.09269127618926104;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( female(B) )
%   | | then return -0.09269127618926101;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return -0.09269127618926105;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.18674356724776875;  // std dev = 0.249, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.25517224256948967;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( female(A) )
%   | | | then return -0.08518475138839687;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.08518475138839683;  // std dev = 1.18e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( female(B) )
%   | then if ( female(A) )
%   | | then return -0.08518475138839687;  // std dev = 9.31e-10, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.08518475138839691;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( actor(A) )
%   | | then if ( actor(B) )
%   | | | then return -0.08518475138839679;  // std dev = 1.83e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07171470791024671;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253562;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( female(A) )
%   | | | then return -0.07877675473109179;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.07877675473109179;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(B) )
%   | then if ( female(A) )
%   | | then return -0.07877675473109179;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.07877675473109179;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( female(A) )
%   | | then return -0.07877675473109179;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( actor(A) )
%   | | | then return -0.07877675473109179;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | | else return -0.07877675473109179;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527733;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( actor(A) )
%   | | then if ( female(A) )
%   | | | then return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else return -0.06708472827264694;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.07324622576333704;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.13992720888085985;  // std dev = 0.266, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.1527438580936708;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.15274385809367083;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return -0.06842697784420276;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else if ( female(B) )
%   | then return -0.06842697784420275;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( female(A) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( actor(B) )
%   | | | then return -0.06842697784420275;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13400703000801117;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.1340070300080111;  // std dev = 2.63e-09, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( genre(A, E) )
%   | | then return -0.05523340889640352;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( female(A) )
%   | | | then return -0.06419184008202619;  // std dev = 6.97e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.0641918400820262;  // std dev = 5.27e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.06419184008202625;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */


Results
   AUC ROC   = 0.998046
   AUC PR    = 0.948453
   CLL	      = -0.078227
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 1.388 seconds
Total inference time: 1.77 seconds
AUC ROC: 0.998046


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063738
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.037 seconds
Refined model CLL: -0.063738


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998046
   AUC PR    = 0.948453
   CLL	      = -0.078227
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 4.329 seconds
Total inference time: 1.77 seconds
AUC ROC: 0.998046
Total revision time: 4.329
Best scored revision CLL: -0.063738


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 02:35:01
{'AUC ROC': 0.998046, 'AUC PR': 0.948453, 'CLL': -0.078227, 'Precision': [1.0, 0.5], 'Recall': 0.817901, 'F1': 0.89983, 'Learning time': 4.329, 'Inference time': 1.77, 'parameter': {'AUC ROC': 0.977686, 'AUC PR': 0.861626, 'CLL': -0.083602, 'Precision': [1.0, 0.5], 'Recall': 0.817901, 'F1': 0.89983, 'Learning time': 0.891, 'Inference time': 1.75}}


Starting fold 3

Target train facts examples: 341
Target train pos examples: 178
Target train neg examples: 3543

Target test facts examples: 737
Target test pos	 examples: 204
Target test neg examples: 10693

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
1;true;haswordtitle(D, C).;true;true
1;true,true;haswordauthor(E, C).;true;true
1;true,true,true;author(F, E), title(F, D).;false;false
1;true,true,false;title(G, D), venue(G, B).;false;false
1;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
1;true,false,true;title(J, I), venue(J, B).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, B).;false;true
2;true,true,false;title(F, D), venue(F, A).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
2;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
2;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
3;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
3;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
3;true,false,false;haswordvenue(B, L), haswordauthor(M, L).;false;false
3;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordauthor(D, C).;true;true
6;true,true;author(E, D), venue(E, A).;false;true
6;true,true,false;haswordtitle(F, C).;false;false
6;true,false;haswordtitle(G, C).;true;true
6;true,false,true;title(H, G), venue(H, B).;false;false
6;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
7;false,true;haswordauthor(N, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004877;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995104;  // std dev = 7.54e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.32041308604290947;  // std dev = 5.133, 106.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048832;  // std dev = 0.000, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7002707292396068;  // std dev = 1.447, 132.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=129 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2972338890428926;  // std dev = 5.004, 103.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.1254446385283919;  // std dev = 0.000, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5365161714980271;  // std dev = 1.545, 133.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.16183778140105995;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.24576277697717464;  // std dev = 5.046, 102.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.11231637819360696;  // std dev = 0.000, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.17140684597028633;  // std dev = 0.348, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( movie(E, A) )
%   | | then return 0.31577947021205455;  // std dev = 0.357, 235.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=178 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.10159632948783662;  // std dev = 0.000, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.33247331789873324;  // std dev = 1.272, 133.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.12154695552102039;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.12155677099708774;  // std dev = 5.091, 104.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926046;  // std dev = 6.45e-09, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.18084980227092884;  // std dev = 0.490, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( genre(B, E) )
%   | | then return 0.28025670561186816;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.07598770770865065;  // std dev = 5.174, 108.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839678;  // std dev = 5.82e-09, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1372579009192015;  // std dev = 0.420, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( genre(B, E) )
%   | | then return 0.22733070496142813;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.0037354182583642656;  // std dev = 5.458, 125.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109143;  // std dev = 5.37e-08, 268.000 (wgt'ed) examples reached here.  /* #neg=268 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17881893913760072;  // std dev = 0.833, 132.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=129 */
%   | else if ( movie(E, B) )
%   | | then return 0.025487727972889798;  // std dev = 5.285, 127.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333693;  // std dev = 6.11e-09, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.17263396602698217;  // std dev = 0.496, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.16388585332620176;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.05275506160524081;  // std dev = 5.174, 108.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420276;  // std dev = 0.000, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13262742835570282;  // std dev = 0.755, 132.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.07144758675981909;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.05298325646678306;  // std dev = 5.112, 105.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06419184008202605;  // std dev = 5.51e-09, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.993692
   AUC PR    = 0.961008
   CLL	      = -0.189611
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95098
   F1        = 0.974874


Total learning time: 1.245 seconds
Total inference time: 1.67 seconds
AUC ROC: 0.993692


Results scoring model
   AUC ROC   = 0.976419
   AUC PR    = 0.83578
   CLL	      = -0.161193
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total scoring time: 1.08 seconds
Parameter learned model CLL: -0.161193


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [2.36e-08, 27, 0], 'true,false,true': [7.54e-07, 0, 129], 'true,false,false,true': [5.133, 57, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 241, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)'}, {'true,true': [1.447, 3, 129], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [5.004, 54, 49], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 269, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.545, 4, 129], 'true,false,true': [0.0, 7, 0], 'true,false,false,true': [5.046, 53, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 281, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.348, 25, 0], 'true,false,true': [0.357, 57, 178], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 286, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.272, 4, 129], 'true,false,true': [0.0, 12, 0], 'true,false,false,true': [5.091, 55, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.45e-09, 252, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.49, 18, 0], 'true,false,true': [0.0, 0, 129], 'true,false,false,true': [5.174, 59, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.82e-09, 259, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.42, 21, 0], 'true,false,true': [0.0, 0, 129], 'true,false,false,true': [5.458, 76, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.37e-08, 268, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.833, 3, 129], 'true,false,true': [5.285, 78, 49], 'true,false,false': [0.0, 0, 0], 'false,true': [6.11e-09, 286, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.496, 17, 0], 'true,false,true': [0.0, 0, 129], 'true,false,false,true': [5.174, 59, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 256, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.755, 3, 129], 'true,false,true': [0.0, 13, 0], 'true,false,false,true': [5.112, 56, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.51e-09, 281, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.21781947438960975, -1.6584244351247152e-16], 'true': [2.05596856412066e-17, 0.18372114078769256], 'true,false': [4.40646657835721e-15, 0.2485760056959774], 'true,false,false': [0.2485760056959774, nan], 'false': [-1.6584244351247152e-16, nan]}, {'': [0.15545918483385085, -7.263912726172028e-17], 'true': [0.01585595043181773, 0.2431260239154939], 'true,false': [0.2431260239154939, nan], 'true,false,true': [nan, 0.2431260239154939]}, {'': [0.14443168640251955, -1.1378798259503384e-16], 'true': [0.017942009228746798, 0.2435694113157076], 'true,false': [-3.96508223080413e-18, 0.24961553248750523], 'true,false,false': [0.24961553248750523, nan], 'false': [-1.1378798259503384e-16, nan]}, {'': [0.13599159676560127, -5.74521005750081e-17], 'true': [0.004832618876210546, 0.12712251541639538], 'true,false': [0.12712251541639538, nan], 'false': [-5.74521005750081e-17, nan]}, {'': [0.12698875028209258, 4.229421046191072e-17], 'true': [0.0121660640919553, 0.22887318794044217], 'true,false': [0.0, 0.24916789940828454], 'true,false,false': [0.24916789940828454, nan], 'false': [4.229421046191072e-17, nan]}, {'': [0.12442258875401344, 3.429260307722491e-17], 'true': [0.013364637120373958, 0.1232968908464086], 'true,false': [-3.442552014341571e-16, 0.2478566529492447], 'true,false,false': [0.2478566529492447, nan], 'false': [3.429260307722491e-17, nan]}, {'': [0.12574155535213288, 1.0770820388154504e-17], 'true': [0.00841103698998822, 0.13063591662470847], 'true,false': [-2.134382248891774e-16, 0.23833600000000082], 'true,false,false': [0.23833600000000082, nan], 'false': [1.0770820388154504e-17, nan]}, {'': [0.11640900814482413, 3.8042607137505364e-17], 'true': [0.005262980970751551, 0.21994869805662934], 'true,false': [0.21994869805662934, nan], 'false': [3.8042607137505364e-17, nan]}, {'': [0.1143185793183675, -1.474514954580286e-17], 'true': [0.014473379866700086, 0.11601060772762958], 'true,false': [-9.639145640156398e-17, 0.2478566529492462], 'true,false,false': [0.2478566529492462, nan], 'false': [-1.474514954580286e-17, nan]}, {'': [0.10970066445202994, 3.160777294306496e-17], 'true': [0.004316412006210835, 0.22298676212020577], 'true,false': [-2.135044278125301e-18, 0.24888888888888974], 'true,false,false': [0.24888888888888974, nan], 'false': [3.160777294306496e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(B, D).;true;true
2;true,false;genre(A, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
4;true,false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
5;true,false;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
8;true,false;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995104;  // std dev = 7.54e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995122;  // std dev = 1.69e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.14185106490048768;  // std dev = 5.16e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.14185106490048774;  // std dev = 1.52e-07, 317.000 (wgt'ed) examples reached here.  /* #neg=317 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.7194734122109565;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.1254446385283915;  // std dev = 0.000, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   else return -0.1254446385283919;  // std dev = 0.000, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.5553664367462834;  // std dev = 4.21e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else return -0.11231637819360639;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.5553664367462833;  // std dev = 1.40e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.11231637819360635;  // std dev = 2.58e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.11231637819360699;  // std dev = 0.000, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.4175135841583096;  // std dev = 3.58e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.10159632948783624;  // std dev = 3.65e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   else return -0.10159632948783662;  // std dev = 0.000, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.32071184716014967;  // std dev = 1.84e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926097;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.3207118471601494;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.09269127618926107;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   else return -0.09269127618926044;  // std dev = 1.71e-07, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839685;  // std dev = 9.13e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.25517224256948967;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.25517224256948934;  // std dev = 2.98e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.08518475138839679;  // std dev = 1.97e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.08518475138839678;  // std dev = 9.42e-08, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109175;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.2097577156325353;  // std dev = 1.55e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.20975771563253554;  // std dev = 4.21e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.07877675473109175;  // std dev = 1.97e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.07877675473109144;  // std dev = 4.47e-08, 278.000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1770964977452778;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   else return -0.07324622576333689;  // std dev = 1.08e-07, 275.000 (wgt'ed) examples reached here.  /* #neg=275 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06842697784420274;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( genre(B, E) )
%   | | then return 0.1527438580936714;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.15274385809367083;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.0684269778442027;  // std dev = 2.11e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   else return -0.0684269778442029;  // std dev = 0.000, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.13400703000801084;  // std dev = 8.16e-08, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else return -0.06419184008202618;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( genre(A, E) )
%   | | then return -0.06419184008202618;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.1340070300080108;  // std dev = 4.71e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.06419184008202623;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.06419184008202615;  // std dev = 6.66e-08, 264.000 (wgt'ed) examples reached here.  /* #neg=264 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063555
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.791 seconds
Total inference time: 1.67 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065435
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.013 seconds
Refined model CLL: -0.065435


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063555
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.129 seconds
Total inference time: 1.67 seconds
AUC ROC: 1.0
Total revision time: 5.129
Best scored revision CLL: -0.065435


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 02:35:10
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063555, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 5.129, 'Inference time': 1.67, 'parameter': {'AUC ROC': 0.993692, 'AUC PR': 0.961008, 'CLL': -0.189611, 'Precision': [1.0, 0.5], 'Recall': 0.95098, 'F1': 0.974874, 'Learning time': 1.245, 'Inference time': 1.67}}


Starting fold 4

Target train facts examples: 151
Target train pos examples: 45
Target train neg examples: 1891

Target test facts examples: 927
Target test pos	 examples: 337
Target test neg examples: 12345

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
1;true;haswordtitle(D, C).;true;true
1;true,true;haswordauthor(E, C).;true;true
1;true,true,true;author(F, E), title(F, D).;false;false
1;true,true,false;title(G, D), venue(G, B).;false;false
1;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
1;true,false,true;title(J, I), venue(J, B).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, B).;false;true
2;true,true,false;title(F, D), venue(F, A).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
2;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
2;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
3;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
3;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
3;true,false,false;haswordvenue(B, L), haswordauthor(M, L).;false;false
3;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordauthor(D, C).;true;true
6;true,true;author(E, D), venue(E, A).;false;true
6;true,true,false;haswordtitle(F, C).;false;false
6;true,false;haswordtitle(G, C).;true;true
6;true,false,true;title(H, G), venue(H, B).;false;false
6;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
7;false,true;haswordauthor(N, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1418510649004877;  // std dev = 2.79e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 7.45e-08, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.12544463852839158;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5553664367462839;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1123163781936064;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.11231637819360624;  // std dev = 5.87e-08, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.24705958266256045;  // std dev = 0.244, 67.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=45 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.10159632948783617;  // std dev = 5.27e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3442322936106334;  // std dev = 0.668, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926096;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.126468326167038;  // std dev = 1.97e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.2840864837345796;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.11314404568611502;  // std dev = 1.29e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839679;  // std dev = 2.08e-09, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109173;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.22999009350503094;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.10227808967387747;  // std dev = 7.45e-09, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109175;  // std dev = 1.97e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1917998686461714;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( movie(E, B) )
%   | | then return -0.0926552848323812;  // std dev = 0.020, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.16380884038361015;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.08571627382169388;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0684269778442027;  // std dev = 2.46e-09, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14258717480634991;  // std dev = 4.21e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.06720006831421214;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.07923297231480463;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.978805
   AUC PR    = 0.865091
   CLL	      = -0.081691
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total learning time: 0.806 seconds
Total inference time: 1.843 seconds
AUC ROC: 0.978805


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.06882
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.85 seconds
Parameter learned model CLL: -0.06882


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 4, 0], 'true,false,true': [2.23e-07, 0, 45], 'true,false,false,true': [2.79e-08, 30, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.45e-08, 77, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)'}, {'true,true': [0.0, 0, 45], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 25, 0], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 66, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 45], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [0.0, 28, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.87e-08, 74, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.244, 22, 45], 'true,false,false': [0.0, 0, 0], 'false,true': [5.27e-08, 69, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.668, 1, 45], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [1.97e-08, 22, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 67, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 45], 'true,false,false,true': [1.29e-08, 29, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.08e-09, 65, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.0, 0, 45], 'true,false,false,true': [7.45e-09, 24, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.97e-08, 57, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 45], 'true,false,true': [0.02, 33, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 68, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 45], 'true,false,false,true': [0.0, 25, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.46e-09, 59, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [4.21e-08, 0, 45], 'true,false,true': [1.32e-09, 3, 0], 'true,false,false,true': [0.0, 24, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 46, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.24515302034930328, 7.209240419643874e-17], 'true': [0.0, 0.2400000000000003], 'true,false': [1.105288700071267e-15, 2.590520390792032e-17], 'false': [7.209240419643874e-17, nan], 'true,false,false': [2.590520390792032e-17, nan]}, {'': [0.16390251561700503, -3.700743415417188e-17], 'true': [-9.473903143468002e-16, -4.440892098500626e-18], 'true,false': [-4.440892098500626e-18, nan], 'true,false,true': [nan, -4.440892098500626e-18]}, {'': [0.10699208192785392, 4.650934292348629e-17], 'true': [-3.947459643111668e-17, -7.401486830834377e-18], 'false': [4.650934292348629e-17, nan], 'true,false': [0.0, -5.9476233462061954e-18], 'true,false,false': [-5.9476233462061954e-18, nan]}, {'': [0.0603171996174976, 4.022547190670857e-17], 'true': [0.0, 0.05942979537118555], 'true,false': [0.05942979537118555, nan], 'false': [4.022547190670857e-17, nan]}, {'': [0.05573394081312757, -1.6570492904853082e-18], 'true': [0.009709728442611299, 8.715125109177758e-05], 'true,false': [0.0, 1.766263902812749e-17], 'true,false,false': [1.766263902812749e-17, nan], 'false': [-1.6570492904853082e-18, nan]}, {'': [0.037783333442612886, 4.270088556250602e-18], 'true': [0.0, 0.03760384989454297], 'true,false': [-1.6776703483224587e-16, 5.742532885992189e-18], 'true,false,false': [5.742532885992189e-18, nan], 'false': [4.270088556250602e-18, nan]}, {'': [0.025360276770529655, 6.817158923136926e-18], 'true': [0.0, 0.025043964964766508], 'true,false': [-9.86864910777917e-18, 2.3129646346357427e-18], 'false': [6.817158923136926e-18, nan], 'true,false,false': [2.3129646346357427e-18, nan]}, {'': [0.019754878736502585, -2.44902137784961e-18], 'true': [-4.9343245538895844e-17, 1.1772236685813166e-05], 'true,false': [1.1772236685813166e-05, nan], 'false': [-2.44902137784961e-18, nan]}, {'': [0.014295026621748152, 6.586068790149234e-18], 'true': [nan, 0.014295026621748152], 'true,false': [-5.427757009278543e-17, 0.0], 'false': [6.586068790149234e-18, nan], 'true,false,false': [0.0, nan]}, {'': [0.01139899298113452, -1.8101462358018856e-18], 'true': [3.947459643111668e-17, 1.4300323820988555e-05], 'true,false': [5.782411586589357e-19, 0.0], 'true,false,false': [0.0, nan], 'false': [-1.8101462358018856e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(B, D).;true;true
2;true,false;genre(A, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(A, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
4;true,false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
5;true,false;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.14185106490048766;  // std dev = 6.99e-08, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.7194734122109544;  // std dev = 2.98e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.6953328964755449;  // std dev = 0.141, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.1254446385283916;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.559864169824123;  // std dev = 0.017, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.11231637819360639;  // std dev = 7.45e-09, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.11231637819360625;  // std dev = 5.37e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then return -0.10159632948783631;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( female(A) )
%   | | | then return 0.4164201610096221;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.4222982286970916;  // std dev = 8.94e-08, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else if ( female(B) )
%   | then return -0.10159632948783635;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( female(A) )
%   | | then return -0.10159632948783634;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( actor(A) )
%   | | | then return -0.10159632948783635;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return -0.10159632948783633;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.3199706517454706;  // std dev = 6.45e-09, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.30513635880993395;  // std dev = 0.110, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( female(B) )
%   | | | then return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.09269127618926094;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return -0.09269127618926101;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.40576091301233486;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.25466642280042295;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.2609994068433704;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( female(B) )
%   | | | then return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.08518475138839682;  // std dev = 1.67e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else if ( actor(B) )
%   | then if ( actor(A) )
%   | | then if ( female(B) )
%   | | | then return -0.08518475138839687;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.0851847513883968;  // std dev = 2.24e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return -0.08518475138839686;  // std dev = 2.08e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.2094003476149577;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.21386559900602076;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else return -0.07877675473109176;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else if ( female(A) )
%   | then if ( female(B) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.07877675473109177;  // std dev = 1.32e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( actor(A) )
%   | | then return -0.07877675473109179;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17683434086970395;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.16602199610599477;  // std dev = 0.082, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else return -0.07324622576333704;  // std dev = 0.000, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.15254495667198578;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.142407050050447;  // std dev = 0.084, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | else if ( female(B) )
%   | | then return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( female(A) )
%   | | | then return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.06705548900315919;  // std dev = 0.012, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( female(B) )
%   | then return -0.06842697784420272;  // std dev = 9.31e-10, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( actor(A) )
%   | | then return -0.06842697784420271;  // std dev = 1.32e-09, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13385173159212363;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.1389456663098114;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( genre(A, E) )
%   | | then return -0.05586816786924421;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( female(A) )
%   | | | then return -0.06419184008202618;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.0642632848803084;  // std dev = 0.000109, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return -0.06419184008202623;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */


Results
   AUC ROC   = 0.998421
   AUC PR    = 0.953557
   CLL	      = -0.076822
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total learning time: 1.315 seconds
Total inference time: 1.891 seconds
AUC ROC: 0.998421


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064734
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.904 seconds
Refined model CLL: -0.064734


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998421
   AUC PR    = 0.953557
   CLL	      = -0.076822
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total learning time: 3.875 seconds
Total inference time: 1.891 seconds
AUC ROC: 0.998421
Total revision time: 3.875
Best scored revision CLL: -0.064734


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 02:35:18
{'AUC ROC': 0.998421, 'AUC PR': 0.953557, 'CLL': -0.076822, 'Precision': [1.0, 0.5], 'Recall': 0.824926, 'F1': 0.904065, 'Learning time': 3.875, 'Inference time': 1.891, 'parameter': {'AUC ROC': 0.978805, 'AUC PR': 0.865091, 'CLL': -0.081691, 'Precision': [1.0, 0.5], 'Recall': 0.824926, 'F1': 0.904065, 'Learning time': 0.806, 'Inference time': 1.843}}


Starting fold 5

Target train facts examples: 163
Target train pos examples: 45
Target train neg examples: 2071

Target test facts examples: 915
Target test pos	 examples: 337
Target test neg examples: 12165

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
1;true;haswordtitle(D, C).;true;true
1;true,true;haswordauthor(E, C).;true;true
1;true,true,true;author(F, E), title(F, D).;false;false
1;true,true,false;title(G, D), venue(G, B).;false;false
1;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
1;true,false,true;title(J, I), venue(J, B).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, B).;false;true
2;true,true,false;title(F, D), venue(F, A).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
2;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
2;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
3;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
3;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
3;true,false,false;haswordvenue(B, L), haswordauthor(M, L).;false;false
3;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordauthor(D, C).;true;true
6;true,true;author(E, D), venue(E, A).;false;true
6;true,true,false;haswordtitle(F, C).;false;false
6;true,false;haswordtitle(G, C).;true;true
6;true,false,true;title(H, G), venue(H, B).;false;false
6;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
7;false,true;haswordauthor(N, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995115;  // std dev = 2.38e-07, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.21529179224236947;  // std dev = 2.535, 28.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 6.83e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109548;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.15336314164961337;  // std dev = 2.599, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.1254446385283916;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5553664367462844;  // std dev = 9.42e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.1615640059919177;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.12969145129702608;  // std dev = 2.603, 31.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.11231637819360626;  // std dev = 4.83e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14085570816575388;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then return 0.3038392024835136;  // std dev = 0.344, 62.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=45 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.10159632948783624;  // std dev = 3.65e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.34596392892129285;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.12465626579344952;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return 8.989193399483363E-4;  // std dev = 2.701, 37.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926105;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11167817073675329;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.27233815800075667;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.06378502903112378;  // std dev = 2.582, 30.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839679;  // std dev = 2.79e-09, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.22181336199710525;  // std dev = 3.65e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.08808032732599444;  // std dev = 2.509, 27.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109169;  // std dev = 3.16e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18588953928087723;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( movie(E, B) )
%   | | then return -0.03383622585972294;  // std dev = 2.703, 39.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09803711547799465;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.15938207025355935;  // std dev = 2.36e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.009621697929836354;  // std dev = 2.640, 33.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420268;  // std dev = 3.09e-09, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13916829734796468;  // std dev = 2.79e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.08970319239823232;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.04942025316262333;  // std dev = 2.560, 29.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.982257
   AUC PR    = 0.888508
   CLL	      = -0.140375
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.854599
   F1        = 0.9216


Total learning time: 0.898 seconds
Total inference time: 1.921 seconds
AUC ROC: 0.982257


Results scoring model
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.144928
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total scoring time: 0.873 seconds
Parameter learned model CLL: -0.144928


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [2.38e-07, 0, 35], 'true,false,false,true': [2.535, 18, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.83e-08, 69, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)'}, {'true,true': [0.0, 0, 35], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [2.599, 21, 10], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 57, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [9.42e-08, 0, 35], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [2.603, 21, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.83e-08, 63, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.344, 17, 45], 'true,false,false': [0.0, 0, 0], 'false,true': [3.65e-08, 54, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 35], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.701, 27, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 51, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 35], 'true,false,false,true': [2.582, 20, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.79e-09, 52, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [3.65e-08, 0, 35], 'true,false,false,true': [2.509, 17, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.16e-08, 66, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 35], 'true,false,true': [2.703, 29, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 71, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [2.36e-08, 0, 35], 'true,false,false,true': [2.64, 23, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.09e-09, 64, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [2.79e-08, 0, 35], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [2.56, 19, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 67, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.20408163265306156, 6.75787928032704e-17], 'true': [nan, 0.20408163265306156], 'true,false': [1.6240976817373718e-15, 0.22959183673469394], 'true,false,false': [0.22959183673469394, nan], 'false': [6.75787928032704e-17, nan]}, {'': [0.18220051356163824, -3.895519384649672e-17], 'true': [-7.105427357601002e-16, 0.21795881103249373], 'true,false': [0.21795881103249373, nan], 'true,false,true': [nan, 0.21795881103249373]}, {'': [0.14949686756028338, 3.700743415417188e-17], 'true': [2.5376526277146434e-16, 0.21426163626152867], 'true,false': [0.0, 0.21852237252861592], 'true,false,false': [0.21852237252861592, nan], 'false': [3.700743415417188e-17, nan]}, {'': [0.12059342039944677, 2.4671622769447922e-17], 'true': [0.0, 0.1183037318737453], 'true,false': [0.1183037318737453, nan], 'false': [2.4671622769447922e-17, nan]}, {'': [0.12981480081365196, -3.2653618371328133e-18], 'true': [-1.5225915766287861e-16, 0.18787714551520207], 'true,false': [0.0, 0.19722425127830567], 'true,false,false': [0.19722425127830567, nan], 'false': [-3.2653618371328133e-18, nan]}, {'': [0.11289121830650908, 7.472654973438553e-18], 'true': [0.0, 0.1133733636252088], 'true,false': [-1.1419436824715895e-16, 0.22222222222222227], 'true,false,false': [0.22222222222222227, nan], 'false': [7.472654973438553e-18, nan]}, {'': [0.10594985590056874, 1.5139404881252134e-17], 'true': [nan, 0.10594985590056874], 'true,false': [3.8064789415719653e-17, 0.23319615912208505], 'true,false,false': [0.23319615912208505, nan], 'false': [1.5139404881252134e-17, nan]}, {'': [0.11077548905873259, -3.1273888017610044e-18], 'true': [-3.8064789415719653e-17, 0.1873545325321137], 'true,false': [0.1873545325321137, nan], 'false': [-3.1273888017610044e-18, nan]}, {'': [0.10701856173195622, 9.540979117872439e-18], 'true': [0.0, 0.10809773556905442], 'true,false': [1.586032892321652e-17, 0.21120293847566574], 'true,false,false': [0.21120293847566574, nan], 'false': [9.540979117872439e-18, nan]}, {'': [0.10224487732953344, -4.9711478714559245e-18], 'true': [2.2204460492503132e-17, 0.2125141078001416], 'true,false': [0.0, 0.2259215219976219], 'true,false,false': [0.2259215219976219, nan], 'false': [-4.9711478714559245e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(B, D).;true;true
2;true,false;genre(A, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(A, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
4;true,false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
5;true,false;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
8;true,false;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.8581489350995115;  // std dev = 2.38e-07, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( actor(B) )
%   | | then return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.14185106490048766;  // std dev = 5.96e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109548;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( actor(B) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.12544463852839158;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5553664367462844;  // std dev = 9.42e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( actor(B) )
%   | | | then return -0.11231637819360639;  // std dev = 7.45e-09, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.11231637819360628;  // std dev = 4.59e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783633;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( actor(B) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return 0.41751358415831025;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.10159632948783617;  // std dev = 4.83e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3207118471601495;  // std dev = 2.98e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926098;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.09269127618926093;  // std dev = 1.18e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return 0.3207118471601494;  // std dev = 2.58e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.09269127618926107;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.25517224256948956;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( actor(B) )
%   | | | then return -0.08518475138839683;  // std dev = 1.18e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return 0.2551722425694894;  // std dev = 1.83e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.08518475138839679;  // std dev = 1.83e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.20975771563253542;  // std dev = 5.37e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( actor(B) )
%   | | then return -0.07877675473109179;  // std dev = 5.27e-09, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else return 0.2097577156325356;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.0787767547310917;  // std dev = 2.98e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1770964977452775;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( actor(B) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return 0.17709649774527736;  // std dev = 7.45e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07324622576333704;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.1527438580936709;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( actor(B) )
%   | | | then return -0.06842697784420276;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0.15274385809367094;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06842697784420267;  // std dev = 2.98e-08, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.13400703000801115;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( actor(B) )
%   | | | then return -0.06419184008202619;  // std dev = 7.45e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return 0.13400703000801117;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06419184008202625;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */


Results
   AUC ROC   = 0.997986
   AUC PR    = 0.873057
   CLL	      = -0.079026
   Precision = 0.742291 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.852086


Total learning time: 1.142 seconds
Total inference time: 1.787 seconds
AUC ROC: 0.997986


Results scoring model
   AUC ROC   = 0.999759
   AUC PR    = 0.978261
   CLL	      = -0.065935
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total scoring time: 0.866 seconds
Refined model CLL: -0.065935


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.997986
   AUC PR    = 0.873057
   CLL	      = -0.079026
   Precision = 0.742291 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.852086


Total learning time: 3.779 seconds
Total inference time: 1.787 seconds
AUC ROC: 0.997986
Total revision time: 3.779
Best scored revision CLL: -0.065935


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 02:35:26
{'AUC ROC': 0.997986, 'AUC PR': 0.873057, 'CLL': -0.079026, 'Precision': [0.742291, 0.5], 'Recall': 1.0, 'F1': 0.852086, 'Learning time': 3.779, 'Inference time': 1.787, 'parameter': {'AUC ROC': 0.982257, 'AUC PR': 0.888508, 'CLL': -0.140375, 'Precision': [1.0, 0.5], 'Recall': 0.854599, 'F1': 0.9216, 'Learning time': 0.898, 'Inference time': 1.921}}


Starting fold 1

Target train facts examples: 215
Target train pos examples: 56
Target train neg examples: 3308

Target test facts examples: 863
Target test pos	 examples: 326
Target test neg examples: 10928

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
1;true;haswordtitle(D, C).;true;true
1;true,true;haswordauthor(E, C).;true;true
1;true,true,true;author(F, E), title(F, D).;false;false
1;true,true,false;title(G, D), venue(G, B).;false;false
1;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
1;true,false,true;title(J, I), venue(J, B).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, B).;false;true
2;true,true,false;title(F, D), venue(F, A).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
2;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
2;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
3;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
3;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
3;true,false,false;haswordvenue(B, L), haswordauthor(M, L).;false;false
3;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordauthor(D, C).;true;true
6;true,true;author(E, D), venue(E, A).;false;true
6;true,true,false;haswordtitle(F, C).;false;false
6;true,false;haswordtitle(G, C).;true;true
6;true,false,true;title(H, G), venue(H, B).;false;false
6;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
7;false,true;haswordauthor(N, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1418510649004877;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.56e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.1254446385283915;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5416316168287582;  // std dev = 0.776, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.11231637819360642;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.11231637819360624;  // std dev = 5.87e-08, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then return 0.21299956894047103;  // std dev = 0.256, 93.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=56 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.10159632948783617;  // std dev = 5.05e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.36999144076447943;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.12275320198468488;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926107;  // std dev = 1.86e-09, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926096;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.2885893731311398;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.11013472216755589;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839678;  // std dev = 4.17e-09, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.2331097466898875;  // std dev = 4.21e-08, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.09979535902714623;  // std dev = 1.29e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109164;  // std dev = 4.47e-08, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19404401865895743;  // std dev = 5.16e-08, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( movie(E, B) )
%   | | then return -0.09118129969190171;  // std dev = 7.45e-09, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07240863484909017;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.16548252101216926;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.083901753979475;  // std dev = 2.11e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420267;  // std dev = 4.06e-09, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14387511001250264;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.06769331612999184;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.07767395054382796;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.978388
   AUC PR    = 0.863056
   CLL	      = -0.083246
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total learning time: 0.894 seconds
Total inference time: 1.727 seconds
AUC ROC: 0.978388


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.067381
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.024 seconds
Parameter learned model CLL: -0.067381


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 56], 'true,false,false,true': [2.36e-08, 27, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.56e-08, 94, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)'}, {'true,true': [0.0, 0, 56], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 32, 0], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 78, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.776, 1, 56], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 34, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.87e-08, 73, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [0.256, 37, 56], 'true,false,false': [0.0, 0, 0], 'false,true': [5.05e-08, 68, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 56], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [0.0, 30, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [1.86e-09, 87, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 5, 0], 'true,false,true': [0.0, 0, 56], 'true,false,false,true': [0.0, 25, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.17e-09, 99, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [4.21e-08, 0, 56], 'true,false,false,true': [1.29e-08, 26, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.47e-08, 81, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [5.16e-08, 0, 56], 'true,false,true': [7.45e-09, 26, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 85, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.0, 0, 56], 'true,false,false,true': [2.11e-08, 36, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.06e-09, 82, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 56], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [0.0, 31, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 79, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2222222222222219, 7.795182938857482e-17], 'true': [0.0, 0.2194803309624035], 'true,false': [-1.2688263138573217e-16, 2.05596856412066e-17], 'false': [7.795182938857482e-17, nan], 'true,false,false': [2.05596856412066e-17, nan]}, {'': [0.16519687891756196, -2.5620531337503614e-17], 'true': [-1.9032394707859825e-16, -6.938893903907228e-18], 'true,false': [-6.938893903907228e-18, nan], 'true,false,true': [nan, -6.938893903907228e-18]}, {'': [0.10669942722560205, 4.7146457210109385e-17], 'true': [0.010564135577344215, -1.1428766429964846e-17], 'false': [4.7146457210109385e-17, nan], 'true,false': [nan, -1.1428766429964846e-17], 'true,false,false': [-1.1428766429964846e-17, nan]}, {'': [0.06619572150987217, 3.7551661127027356e-17], 'true': [0.0, 0.06539127561415779], 'true,false': [0.06539127561415779, nan], 'false': [3.7551661127027356e-17, nan]}, {'': [0.05621791248212961, 2.5522368382187506e-18], 'true': [-4.282288809268461e-16, 3.699283089651994e-05], 'true,false': [-1.1564823173178713e-18, 0.0], 'false': [2.5522368382187506e-18, nan], 'true,false,false': [0.0, nan]}, {'': [0.03560252588687814, 1.682156097916904e-17], 'true': [0.0, 0.033923680207356935], 'true,false': [-2.061842760018148e-16, -6.661338147750939e-18], 'false': [1.682156097916904e-17, nan], 'true,false,false': [-6.661338147750939e-18, nan]}, {'': [0.02447850826783154, 2.4671622769447922e-17], 'true': [0.0, 0.023997974197584166], 'true,false': [3.172065784643304e-17, 6.4051328343759035e-18], 'false': [2.4671622769447922e-17, nan], 'true,false,false': [6.4051328343759035e-18, nan]}, {'': [0.017616102041117875, -5.877651306839064e-18], 'true': [4.7580986769649563e-17, 2.135044278125301e-18], 'true,false': [2.135044278125301e-18, nan], 'false': [-5.877651306839064e-18, nan]}, {'': [0.014863456134864478, 1.692413147294446e-17], 'true': [0.0, 0.014813340440929358], 'true,false': [-3.172065784643304e-17, 1.2335811384723961e-17], 'false': [1.692413147294446e-17, nan], 'true,false,false': [1.2335811384723961e-17, nan]}, {'': [0.011327416741579955, -9.134746405143692e-18], 'true': [-7.93016446160826e-18, 3.0156298460723083e-06], 'true,false': [0.0, -3.581364595565021e-18], 'true,false,false': [-3.581364595565021e-18, nan], 'false': [-9.134746405143692e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(B, D).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(A, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
4;true,false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
5;true,false;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
8;true,false;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else return -0.14185106490048766;  // std dev = 7.60e-08, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else return -0.12544463852839147;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5553664367462837;  // std dev = 1.03e-07, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return -0.11231637819360638;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.11231637819360622;  // std dev = 6.83e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.10159632948783633;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( actor(B) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else return 0.4175135841583103;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   else return -0.10159632948783624;  // std dev = 4.71e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.32071184716014967;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926098;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else return -0.09269127618926096;  // std dev = 9.13e-09, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.09269127618926107;  // std dev = 0.000, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(B, E) )
%   | | then return 0.25517224256948967;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( female(B) )
%   | | | then return -0.08518475138839686;  // std dev = 8.33e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.08518475138839685;  // std dev = 9.13e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( actor(B) )
%   | then if ( female(B) )
%   | | then if ( female(A) )
%   | | | then return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.08518475138839682;  // std dev = 1.83e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( female(A) )
%   | | | then return -0.08518475138839683;  // std dev = 1.49e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return -0.08518475138839683;  // std dev = 1.49e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109177;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.20975771563253562;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.07877675473109176;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else if ( female(A) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else return -0.07877675473109179;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17709649774527736;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( female(A) )
%   | | then if ( female(B) )
%   | | | then return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.07324622576333704;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.1527438580936708;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( female(A) )
%   | | | then return -0.06842697784420275;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return -0.06842697784420275;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( female(A) )
%   | then return -0.06842697784420274;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else if ( female(B) )
%   | | then return -0.06842697784420276;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return -0.06842697784420275;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13400703000801087;  // std dev = 5.27e-09, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.13400703000801084;  // std dev = 5.59e-09, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( genre(A, E) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.06419184008202623;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.06419184008202625;  // std dev = 0.000, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */


Results
   AUC ROC   = 0.998476
   AUC PR    = 0.957409
   CLL	      = -0.078688
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total learning time: 1.258 seconds
Total inference time: 1.716 seconds
AUC ROC: 0.998476


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063834
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.016 seconds
Refined model CLL: -0.063834


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998476
   AUC PR    = 0.957409
   CLL	      = -0.078688
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.819018
   F1        = 0.900506


Total learning time: 4.192 seconds
Total inference time: 1.716 seconds
AUC ROC: 0.998476
Total revision time: 4.192
Best scored revision CLL: -0.063834


Dataset: 4_cora_imdb, Fold: 1, Type: Transfer (trRDN-B), Time: 02:35:34
{'AUC ROC': 0.998476, 'AUC PR': 0.957409, 'CLL': -0.078688, 'Precision': [1.0, 0.5], 'Recall': 0.819018, 'F1': 0.900506, 'Learning time': 4.192, 'Inference time': 1.716, 'parameter': {'AUC ROC': 0.978388, 'AUC PR': 0.863056, 'CLL': -0.083246, 'Precision': [1.0, 0.5], 'Recall': 0.819018, 'F1': 0.900506, 'Learning time': 0.894, 'Inference time': 1.727}}


Starting fold 2

Target train facts examples: 208
Target train pos examples: 58
Target train neg examples: 3423

Target test facts examples: 870
Target test pos	 examples: 324
Target test neg examples: 10813

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
1;true;haswordtitle(D, C).;true;true
1;true,true;haswordauthor(E, C).;true;true
1;true,true,true;author(F, E), title(F, D).;false;false
1;true,true,false;title(G, D), venue(G, B).;false;false
1;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
1;true,false,true;title(J, I), venue(J, B).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, B).;false;true
2;true,true,false;title(F, D), venue(F, A).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
2;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
2;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
3;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
3;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
3;true,false,false;haswordvenue(B, L), haswordauthor(M, L).;false;false
3;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordauthor(D, C).;true;true
6;true,true;author(E, D), venue(E, A).;false;true
6;true,true,false;haswordtitle(F, C).;false;false
6;true,false;haswordtitle(G, C).;true;true
6;true,false,true;title(H, G), venue(H, B).;false;false
6;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
7;false,true;haswordauthor(N, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048763;  // std dev = 8.30e-08, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.1254446385283914;  // std dev = 0.000, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5553664367462838;  // std dev = 1.19e-07, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1123163781936064;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.11231637819360621;  // std dev = 7.30e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( movie(E, A) )
%   | | then return 0.24850105413398335;  // std dev = 0.243, 86.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=58 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.10159632948783615;  // std dev = 5.67e-08, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.3585898540132259;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926096;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.12662765717599245;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926108;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.2808842454108459;  // std dev = 1.15e-07, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.11327276265424656;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839683;  // std dev = 5.02e-09, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.17874076087142635;  // std dev = 0.245, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.2277668599467426;  // std dev = 5.16e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.10238404247740894;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109168;  // std dev = 3.57e-08, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19019697436022587;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( movie(E, B) )
%   | | then return -0.09049967755164887;  // std dev = 0.044, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06132251552565262;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.16261101364112582;  // std dev = 5.58e-08, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.08596762915010832;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420267;  // std dev = 3.95e-09, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.14166385276132146;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.07944858318971844;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.977686
   AUC PR    = 0.861626
   CLL	      = -0.083366
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 0.923 seconds
Total inference time: 1.72 seconds
AUC ROC: 0.977686


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.067475
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.013 seconds
Parameter learned model CLL: -0.067475


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.0, 0, 58], 'true,false,false,true': [1.49e-08, 23, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [8.3e-08, 91, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)'}, {'true,true': [0.0, 0, 58], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 31, 0], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 88, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.19e-07, 0, 58], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [0.0, 27, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.3e-08, 90, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.243, 28, 58], 'true,false,false': [0.0, 0, 0], 'false,true': [5.67e-08, 75, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [0.0, 2, 0], 'true,false,false,true': [0.0, 41, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 81, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [1.15e-07, 0, 58], 'true,false,false,true': [0.0, 30, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.02e-09, 66, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.245, 3, 0], 'true,false,true': [5.16e-08, 0, 58], 'true,false,false,true': [0.0, 17, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.57e-08, 70, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [0.044, 28, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 80, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [5.58e-08, 0, 58], 'true,false,false,true': [0.0, 23, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.95e-09, 77, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 58], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 33, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 99, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.2137188208616776, 7.564156871072495e-17], 'true': [0.0, 0.2033226642280136], 'true,false': [-3.675221047035001e-16, 9.654113257610057e-18], 'false': [7.564156871072495e-17, nan], 'true,false,false': [9.654113257610057e-18, nan]}, {'': [0.162046199900567, -1.766263902812749e-17], 'true': [-1.2250736823450003e-16, -7.162729191130042e-18], 'true,false': [-7.162729191130042e-18, nan], 'true,false,true': [nan, -7.162729191130042e-18]}, {'': [0.09906674252579017, 5.921189464667501e-17], 'true': [2.4501473646900006e-16, -7.656710514656252e-18], 'false': [5.921189464667501e-17, nan], 'true,false': [0.0, -4.11193712824132e-18], 'true,false,false': [-4.11193712824132e-18, nan]}, {'': [0.061168568892486494, 4.2928623618839385e-17], 'true': [-1.1564823173178713e-18, 0.05917084456082099], 'true,false': [0.05917084456082099, nan], 'false': [4.2928623618839385e-17, nan]}, {'': [0.057208632961586015, 0.0], 'true': [-6.125368411725002e-17, 5.1074955255286804e-05], 'true,false': [0.0, -2.7078610356711135e-17], 'false': [0.0, nan], 'true,false,false': [-2.7078610356711135e-17, nan]}, {'': [0.03546843338708582, 2.4391263419795106e-17], 'true': [0.0, 0.03490779439461212], 'true,false': [2.297013154396876e-16, -2.590520390792032e-17], 'false': [2.4391263419795106e-17, nan], 'true,false,false': [-2.590520390792032e-17, nan]}, {'': [0.023208552372166635, 1.8239378261699e-17], 'true': [0.01998560504724971, 0.01910642199364997], 'true,false': [4.594026308793751e-17, -4.89804275569922e-18], 'false': [1.8239378261699e-17, nan], 'true,false,false': [-4.89804275569922e-18, nan]}, {'': [0.01732274598693072, -5.551115123125783e-18], 'true': [-1.0719394720518753e-16, 6.77234379623169e-05], 'true,false': [6.77234379623169e-05, nan], 'false': [-5.551115123125783e-18, nan]}, {'': [0.012693649705413514, 1.5139404881252134e-17], 'true': [0.0, 0.012563580210894284], 'true,false': [5.3596973602593766e-17, -1.0860877414811314e-17], 'false': [1.5139404881252134e-17, nan], 'true,false,false': [-1.0860877414811314e-17, nan]}, {'': [0.01130018327035814, -1.4017967482640866e-17], 'true': [-1.1485065771984378e-17, -1.3457248783335231e-17], 'true,false': [nan, -1.3457248783335231e-17], 'true,false,false': [-1.3457248783335231e-17, nan], 'false': [-1.4017967482640866e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(B, D).;true;true
2;true,false;genre(A, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(A, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
4;true,false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
5;true,false;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
8;true,false;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   else return -0.14185106490048766;  // std dev = 7.74e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   else return -0.12544463852839147;  // std dev = 0.000, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.535292469174516;  // std dev = 0.124, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.11231637819360642;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.11231637819360622;  // std dev = 6.83e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( actor(B) )
%   | | then if ( female(A) )
%   | | | then return -0.10159632948783634;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.10159632948783635;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( female(A) )
%   | | | then return 0.41751358415830986;  // std dev = 5.16e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.4224034251414355;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else if ( female(B) )
%   | then return -0.10159632948783634;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( female(A) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( actor(B) )
%   | | | then return -0.10159632948783635;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return -0.10159632948783633;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.3207118471601496;  // std dev = 3.73e-09, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.3071387481167226;  // std dev = 0.104, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | else if ( genre(A, E) )
%   | | then return -0.10159632948783633;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( female(B) )
%   | | | then return -0.09269127618926096;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.09269127618926094;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( female(A) )
%   | then return -0.09269127618926104;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( female(B) )
%   | | then return -0.09269127618926097;  // std dev = 1.86e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.09269127618926107;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09269127618926098;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.25517224256948945;  // std dev = 1.49e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.26067619437591;  // std dev = 2.98e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( female(A) )
%   | | | then return -0.08518475138839686;  // std dev = 8.33e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.08518475138839683;  // std dev = 1.39e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else if ( female(A) )
%   | then if ( female(B) )
%   | | then return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.08518475138839686;  // std dev = 2.28e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( actor(B) )
%   | | then return -0.08518475138839679;  // std dev = 2.08e-09, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.38399212296342355;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.2097577156325356;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.21363817945365673;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return -0.07877675473109175;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else if ( female(B) )
%   | then if ( female(A) )
%   | | then return -0.07877675473109179;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.07877675473109179;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( female(A) )
%   | | then return -0.07877675473109179;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( actor(A) )
%   | | | then return -0.07877675473109179;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | | else return -0.07877675473109177;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17709649774527744;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.17993744465332617;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( female(B) )
%   | | then return -0.07324622576333704;  // std dev = 1.32e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( female(A) )
%   | | | then return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.0724460062862262;  // std dev = 0.013, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.07324622576333704;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.055706624963278044;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.1527438580936708;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.15489560264407753;  // std dev = 2.36e-08, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( female(A) )
%   | | | then return -0.06842697784420272;  // std dev = 2.63e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.06846099610519812;  // std dev = 0.000102, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( female(B) )
%   | then return -0.06842697784420276;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else if ( female(A) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( actor(B) )
%   | | | then return -0.06842697784420274;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13400703000801117;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.13568463082511337;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( female(B) )
%   | | then return -0.06093806750263542;  // std dev = 0.005, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( female(A) )
%   | | | then return -0.06419184008202618;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.06423788211705884;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.06419184008202626;  // std dev = 0.000, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */


Results
   AUC ROC   = 0.998125
   AUC PR    = 0.950144
   CLL	      = -0.078066
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 1.656 seconds
Total inference time: 1.802 seconds
AUC ROC: 0.998125


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063703
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.105 seconds
Refined model CLL: -0.063703


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998125
   AUC PR    = 0.950144
   CLL	      = -0.078066
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.817901
   F1        = 0.89983


Total learning time: 4.696999999999999 seconds
Total inference time: 1.802 seconds
AUC ROC: 0.998125
Total revision time: 4.696999999999999
Best scored revision CLL: -0.063703


Dataset: 4_cora_imdb, Fold: 2, Type: Transfer (trRDN-B), Time: 02:35:43
{'AUC ROC': 0.998125, 'AUC PR': 0.950144, 'CLL': -0.078066, 'Precision': [1.0, 0.5], 'Recall': 0.817901, 'F1': 0.89983, 'Learning time': 4.696999999999999, 'Inference time': 1.802, 'parameter': {'AUC ROC': 0.977686, 'AUC PR': 0.861626, 'CLL': -0.083366, 'Precision': [1.0, 0.5], 'Recall': 0.817901, 'F1': 0.89983, 'Learning time': 0.923, 'Inference time': 1.72}}


Starting fold 3

Target train facts examples: 341
Target train pos examples: 178
Target train neg examples: 3543

Target test facts examples: 737
Target test pos	 examples: 204
Target test neg examples: 10693

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
1;true;haswordtitle(D, C).;true;true
1;true,true;haswordauthor(E, C).;true;true
1;true,true,true;author(F, E), title(F, D).;false;false
1;true,true,false;title(G, D), venue(G, B).;false;false
1;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
1;true,false,true;title(J, I), venue(J, B).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, B).;false;true
2;true,true,false;title(F, D), venue(F, A).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
2;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
2;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
3;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
3;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
3;true,false,false;haswordvenue(B, L), haswordauthor(M, L).;false;false
3;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordauthor(D, C).;true;true
6;true,true;author(E, D), venue(E, A).;false;true
6;true,true,false;haswordtitle(F, C).;false;false
6;true,false;haswordtitle(G, C).;true;true
6;true,false,true;title(H, G), venue(H, B).;false;false
6;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
7;false,true;haswordauthor(N, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995104;  // std dev = 7.54e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.3160928603331581;  // std dev = 5.154, 107.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048818;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.6701351318758111;  // std dev = 2.319, 137.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=129 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.23695957894324438;  // std dev = 5.296, 118.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.12544463852839197;  // std dev = 0.000, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5162220869741668;  // std dev = 2.281, 138.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.15382748813472974;  // std dev = 1.49e-08, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.20285797862523272;  // std dev = 5.303, 115.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.11231637819360696;  // std dev = 0.000, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.17884599861186107;  // std dev = 0.361, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( movie(E, A) )
%   | | then return 0.32468195147138956;  // std dev = 0.359, 238.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=178 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.10159632948783662;  // std dev = 0.000, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.32830444451950885;  // std dev = 1.658, 136.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.11531491456298014;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.12201784436186881;  // std dev = 5.194, 109.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926044;  // std dev = 7.68e-09, 270.000 (wgt'ed) examples reached here.  /* #neg=270 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.23583389864985177;  // std dev = 0.512, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( genre(B, E) )
%   | | then return 0.2895660515627582;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.09051344912383716;  // std dev = 5.213, 110.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839678;  // std dev = 6.04e-09, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16846665992964305;  // std dev = 0.449, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( genre(B, E) )
%   | | then return 0.2337854152450661;  // std dev = 1.84e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.061573929986490465;  // std dev = 5.250, 112.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109143;  // std dev = 5.16e-08, 277.000 (wgt'ed) examples reached here.  /* #neg=277 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.17077853870314885;  // std dev = 1.189, 136.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=129 */
%   | else if ( movie(E, B) )
%   | | then return 0.028099108845158267;  // std dev = 5.287, 130.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=49 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333692;  // std dev = 6.18e-09, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.169753315520144;  // std dev = 0.490, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( genre(B, E) )
%   | | then return 0.1691557371969833;  // std dev = 7.30e-08, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.02522762351555451;  // std dev = 5.320, 116.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420265;  // std dev = 2.46e-09, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.12252894036777526;  // std dev = 1.136, 137.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.06304215557694062;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.026582773577514818;  // std dev = 5.286, 114.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06419184008202607;  // std dev = 5.35e-09, 278.000 (wgt'ed) examples reached here.  /* #neg=278 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.993692
   AUC PR    = 0.961008
   CLL	      = -0.182195
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.95098
   F1        = 0.974874


Total learning time: 1.286 seconds
Total inference time: 1.775 seconds
AUC ROC: 0.993692


Results scoring model
   AUC ROC   = 0.976419
   AUC PR    = 0.83578
   CLL	      = -0.156121
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.724719
   F1        = 0.840391


Total scoring time: 1.054 seconds
Parameter learned model CLL: -0.156121


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 17, 0], 'true,false,true': [7.54e-07, 0, 129], 'true,false,false,true': [5.154, 58, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 255, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)'}, {'true,true': [2.319, 8, 129], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [5.296, 69, 49], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 289, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [2.281, 9, 129], 'true,false,true': [1.49e-08, 15, 0], 'true,false,false,true': [5.303, 66, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 280, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.361, 21, 0], 'true,false,true': [0.359, 60, 178], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 294, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [1.658, 7, 129], 'true,false,true': [0.0, 15, 0], 'true,false,false,true': [5.194, 60, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.68e-09, 270, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.512, 17, 0], 'true,false,true': [0.0, 0, 129], 'true,false,false,true': [5.213, 61, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.04e-09, 284, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.449, 18, 0], 'true,false,true': [1.84e-07, 0, 129], 'true,false,false,true': [5.25, 63, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.16e-08, 277, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [1.189, 7, 129], 'true,false,true': [5.287, 81, 49], 'true,false,false': [0.0, 0, 0], 'false,true': [6.18e-09, 283, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.49, 19, 0], 'true,false,true': [7.3e-08, 0, 129], 'true,false,false,true': [5.32, 67, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.46e-09, 240, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [1.136, 8, 129], 'true,false,true': [2.63e-09, 10, 0], 'true,false,false,true': [5.286, 65, 49], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.35e-09, 278, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.20856442062835467, -1.0797463141452503e-16], 'true': [-3.2653618371328133e-18, 0.18536340132146512], 'true,false': [4.40646657835721e-15, 0.24823128657524693], 'true,false,false': [0.24823128657524693, nan], 'false': [-1.0797463141452503e-16, nan]}, {'': [0.1777466929083715, -7.990532495572061e-17], 'true': [0.03925253774117052, 0.2377296753054446], 'true,false': [0.2377296753054446, nan], 'true,false,true': [nan, 0.2377296753054446]}, {'': [0.16204154856072214, -1.1419436824715895e-16], 'true': [0.037709167951114925, 0.22930700519217], 'true,false': [1.4802973661668754e-17, 0.24453686200378041], 'true,false,false': [0.24453686200378041, nan], 'false': [-1.1419436824715895e-16, nan]}, {'': [0.13778984898635366, -5.588877811038203e-17], 'true': [0.006193387411038412, 0.12884397203112774], 'true,false': [0.12884397203112774, nan], 'false': [-5.588877811038203e-17, nan]}, {'': [0.13094701812585888, 5.756711979537848e-17], 'true': [0.020214618838606275, 0.22350946519534273], 'true,false': [-9.25185853854297e-18, 0.24745391802037006], 'true,false,false': [0.24745391802037006, nan], 'false': [5.756711979537848e-17, nan]}, {'': [0.1280235421443393, 3.596497122025155e-17], 'true': [0.015434421240243856, 0.12353630234120215], 'true,false': [-8.26212483441977e-17, 0.24702479338843006], 'true,false,false': [0.24702479338843006, nan], 'false': [3.596497122025155e-17, nan]}, {'': [0.12077622729881705, 9.619260863178251e-18], 'true': [0.011201618052316164, 0.12174452718828781], 'true,false': [2.616339530899594e-16, 0.24609375000000008], 'true,false,false': [0.24609375000000008, nan], 'false': [9.619260863178251e-18, nan]}, {'': [0.11546930365369246, 3.923049556979352e-17], 'true': [0.010395534669385316, 0.2149843263951309], 'true,false': [0.2149843263951309, nan], 'false': [3.923049556979352e-17, nan]}, {'': [0.11780291623462456, 5.551115123125783e-18], 'true': [0.012647951731903858, 0.12068148590658576], 'true,false': [4.131062417209885e-17, 0.24398038049940457], 'true,false,false': [0.24398038049940457, nan], 'false': [5.551115123125783e-18, nan]}, {'': [0.11492413746629455, 2.8753977616191105e-17], 'true': [0.009415331178535678, 0.2259068132640378], 'true,false': [6.938893903907229e-19, 0.24507540781778964], 'true,false,false': [0.24507540781778964, nan], 'false': [2.8753977616191105e-17, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(B, D).;true;true
2;true,false;genre(A, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
4;true,false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
5;true,false;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
8;true,false;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true
9;true,false;genre(A, E).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995104;  // std dev = 7.54e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.8581489350995122;  // std dev = 1.69e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.1418510649004877;  // std dev = 4.94e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   else return -0.14185106490048818;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109565;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.12544463852839124;  // std dev = 6.14e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   else return -0.12544463852839194;  // std dev = 0.000, 276.000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.5553664367462834;  // std dev = 4.21e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else return -0.11231637819360638;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.5553664367462833;  // std dev = 1.40e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.11231637819360633;  // std dev = 3.16e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.11231637819360692;  // std dev = 0.000, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.4175135841583096;  // std dev = 3.63e-07, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.10159632948783627;  // std dev = 3.65e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   else return -0.10159632948783659;  // std dev = 0.000, 262.000 (wgt'ed) examples reached here.  /* #neg=262 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( actor(A) )
%   | | then return 0.32071184716014967;  // std dev = 1.84e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(A, E) )
%   | | then return -0.09269127618926101;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.3207118471601494;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.09269127618926105;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.09269127618926044;  // std dev = 1.35e-07, 278.000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.08518475138839683;  // std dev = 1.18e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( genre(B, E) )
%   | | then return 0.25517224256948967;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.25517224256948934;  // std dev = 2.98e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.0851847513883968;  // std dev = 1.67e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   else return -0.08518475138839678;  // std dev = 9.54e-08, 264.000 (wgt'ed) examples reached here.  /* #neg=264 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( genre(B, E) )
%   | | then return 0.2097577156325353;  // std dev = 1.55e-07, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.20975771563253554;  // std dev = 4.21e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.07877675473109176;  // std dev = 1.83e-08, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   else return -0.07877675473109141;  // std dev = 4.47e-08, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1770964977452778;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #pos=178 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   else return -0.07324622576333695;  // std dev = 1.00e-07, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06842697784420272;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( genre(B, E) )
%   | | then return 0.1527438580936714;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #pos=129 */
%   | | else if ( actor(A), director(B) )
%   | | | then return 0.15274385809367083;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.06842697784420271;  // std dev = 1.05e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.06842697784420305;  // std dev = 0.000, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.12804616173462632;  // std dev = 0.390, 133.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=129 */
%   | else if ( genre(A, E) )
%   | | then return -0.06419184008202619;  // std dev = 6.97e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( director(B), actor(A) )
%   | | | then return 0.1340070300080108;  // std dev = 4.71e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return -0.06419184008202625;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   else return -0.06419184008202597;  // std dev = 1.08e-07, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */


Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063583
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 1.677 seconds
Total inference time: 1.875 seconds
AUC ROC: 1.0


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.065655
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 1.019 seconds
Refined model CLL: -0.065655


******************************************
Best model found
******************************************
Results
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.063583
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total learning time: 5.036 seconds
Total inference time: 1.875 seconds
AUC ROC: 1.0
Total revision time: 5.036
Best scored revision CLL: -0.065655


Dataset: 4_cora_imdb, Fold: 3, Type: Transfer (trRDN-B), Time: 02:35:53
{'AUC ROC': 1.0, 'AUC PR': 1.0, 'CLL': -0.063583, 'Precision': [1.0, 0.5], 'Recall': 1.0, 'F1': 1.0, 'Learning time': 5.036, 'Inference time': 1.875, 'parameter': {'AUC ROC': 0.993692, 'AUC PR': 0.961008, 'CLL': -0.182195, 'Precision': [1.0, 0.5], 'Recall': 0.95098, 'F1': 0.974874, 'Learning time': 1.286, 'Inference time': 1.775}}


Starting fold 4

Target train facts examples: 151
Target train pos examples: 45
Target train neg examples: 1891

Target test facts examples: 927
Target test pos	 examples: 337
Target test neg examples: 12345

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
1;true;haswordtitle(D, C).;true;true
1;true,true;haswordauthor(E, C).;true;true
1;true,true,true;author(F, E), title(F, D).;false;false
1;true,true,false;title(G, D), venue(G, B).;false;false
1;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
1;true,false,true;title(J, I), venue(J, B).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, B).;false;true
2;true,true,false;title(F, D), venue(F, A).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
2;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
2;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
3;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
3;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
3;true,false,false;haswordvenue(B, L), haswordauthor(M, L).;false;false
3;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordauthor(D, C).;true;true
6;true,true;author(E, D), venue(E, A).;false;true
6;true,true,false;haswordtitle(F, C).;false;false
6;true,false;haswordtitle(G, C).;true;true
6;true,false,true;title(H, G), venue(H, B).;false;false
6;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
7;false,true;haswordauthor(N, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.1418510649004877;  // std dev = 2.58e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 6.32e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.12544463852839155;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5553664367462839;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.11231637819360639;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.11231637819360642;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.11231637819360624;  // std dev = 5.77e-08, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.22038136586692458;  // std dev = 0.168, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( movie(E, A) )
%   | | then return 0.24705958266256045;  // std dev = 0.244, 67.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=45 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.1015963294878362;  // std dev = 4.59e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.34477864576608075;  // std dev = 0.643, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return -0.08317319615697588;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.126468326167038;  // std dev = 1.97e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07704671864348012;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.2839753790029333;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.11314404568611502;  // std dev = 1.29e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839679;  // std dev = 2.46e-09, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.16444843261243206;  // std dev = 0.227, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.22991302257335636;  // std dev = 2.98e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.10227808967387751;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109164;  // std dev = 4.47e-08, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.19174435287754144;  // std dev = 2.11e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( movie(E, B) )
%   | | then return -0.09193981339935725;  // std dev = 0.031, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.05643362153862106;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.16376738749663383;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( movie(F, A) )
%   | | | then return -0.0857723612206666;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.06842697784420268;  // std dev = 3.23e-09, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1425552435434338;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.0792810910971659;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.978805
   AUC PR    = 0.865091
   CLL	      = -0.080941
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total learning time: 0.784 seconds
Total inference time: 1.814 seconds
AUC ROC: 0.978805


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.068382
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.887 seconds
Parameter learned model CLL: -0.068382


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 2, 0], 'true,false,true': [2.23e-07, 0, 45], 'true,false,false,true': [2.58e-08, 29, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [6.32e-08, 63, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)'}, {'true,true': [0.0, 0, 45], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [0.0, 31, 0], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 69, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 0, 45], 'true,false,true': [2.63e-09, 3, 0], 'true,false,false,true': [0.0, 30, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.77e-08, 72, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.168, 2, 0], 'true,false,true': [0.244, 22, 45], 'true,false,false': [0.0, 0, 0], 'false,true': [4.59e-08, 62, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.643, 1, 45], 'true,false,true': [0.0, 1, 0], 'true,false,false,true': [1.97e-08, 21, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 62, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.0, 0, 45], 'true,false,false,true': [1.29e-08, 30, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.46e-09, 72, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.227, 3, 0], 'true,false,true': [2.98e-08, 0, 45], 'true,false,false,true': [0.0, 17, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [4.47e-08, 81, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [2.11e-08, 0, 45], 'true,false,true': [0.031, 24, 0], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 67, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [1.32e-09, 3, 0], 'true,false,true': [0.0, 0, 45], 'true,false,false,true': [0.0, 16, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.23e-09, 66, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 45], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 20, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 68, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.24151662049861528, 6.344131569286608e-17], 'true': [0.0, 0.23831263696128588], 'true,false': [1.105288700071267e-15, 2.2970131543968756e-17], 'false': [6.344131569286608e-17, nan], 'true,false,false': [2.2970131543968756e-17, nan]}, {'': [0.1724154579101321, -3.539841527790354e-17], 'true': [-9.473903143468002e-16, -7.162729191130042e-18], 'true,false': [-7.162729191130042e-18, nan], 'true,false,true': [nan, -7.162729191130042e-18]}, {'': [0.1088122134991118, 4.625929269271486e-17], 'true': [-3.947459643111668e-17, -1.1775092685418327e-17], 'false': [4.625929269271486e-17, nan], 'true,false': [2.3129646346357427e-18, -7.401486830834377e-18], 'true,false,false': [-7.401486830834377e-18, nan]}, {'': [0.06426596251233865, 3.40229636578677e-17], 'true': [0.014109884867581343, 0.05942979537118555], 'true,false': [0.05942979537118555, nan], 'false': [3.40229636578677e-17, nan]}, {'': [0.054312684710002876, 0.0], 'true': [0.009000869554235432, 8.133023540157011e-05], 'true,false': [0.0, 1.850371707708594e-17], 'true,false,false': [1.850371707708594e-17, nan], 'false': [0.0, nan]}, {'': [0.03790482265508207, 4.625929269271485e-18], 'true': [0.0, 0.03784892099168641], 'true,false': [-1.7763568394002506e-16, 5.551115123125783e-18], 'true,false,false': [5.551115123125783e-18, nan], 'false': [4.625929269271485e-18, nan]}, {'': [0.025789980878893042, 2.4671622769447922e-17], 'true': [0.0171884714177005, 0.02196109919820016], 'true,false': [1.973729821555834e-17, -6.530723674265627e-18], 'false': [2.4671622769447922e-17, nan], 'true,false,false': [-6.530723674265627e-18, nan]}, {'': [0.01826956709434864, -2.4855739357279623e-18], 'true': [9.86864910777917e-18, 4.019700741386573e-05], 'true,false': [4.019700741386573e-05, nan], 'false': [-2.4855739357279623e-18, nan]}, {'': [0.012554131837660364, 1.0092936587501423e-17], 'true': [5.782411586589357e-19, 0.012049035758323863], 'true,false': [-5.921189464667501e-17, -6.938893903907228e-18], 'false': [1.0092936587501423e-17, nan], 'true,false,false': [-6.938893903907228e-18, nan]}, {'': [0.010482893119549919, -5.714383214982423e-18], 'true': [-3.947459643111668e-17, -1.3877787807814458e-18], 'true,false': [nan, -1.3877787807814458e-18], 'true,false,false': [-1.3877787807814458e-18, nan], 'false': [-5.714383214982423e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(B, D).;true;true
2;true,false;genre(A, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
4;true,false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
5;true,false;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(A, D).;true;true
6;true,false;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
8;true,false;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.858148935099512;  // std dev = 2.23e-07, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.14185106490048766;  // std dev = 6.50e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.719473412210955;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.12544463852839158;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5553664367462839;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1123163781936064;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   else return -0.11231637819360625;  // std dev = 5.27e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then if ( female(A) )
%   | | then return -0.10159632948783633;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( female(B) )
%   | | | then return -0.10159632948783633;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.10293633557605761;  // std dev = 0.014, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0.41751358415831025;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else if ( female(B) )
%   | then return -0.10159632948783635;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( female(A) )
%   | | then return -0.10159632948783635;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( actor(A) )
%   | | | then return -0.10159632948783635;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | | else return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.3207118471601497;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.2990358757294652;  // std dev = 0.126, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | else if ( genre(A, E) )
%   | | then return -0.10245569351118207;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( female(A) )
%   | | | then return -0.09269127618926098;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.09260367314188596;  // std dev = 0.000199, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( female(B) )
%   | then return -0.09269127618926101;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return -0.09269127618926107;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.30289619102308796;  // std dev = 0.296, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.2551722425694894;  // std dev = 2.11e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.2593137805125101;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( female(B) )
%   | | | then return -0.08519157839387026;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.08510671381890562;  // std dev = 0.000123, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( actor(B) )
%   | then if ( actor(A) )
%   | | then return -0.08518475138839679;  // std dev = 2.46e-09, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else return -0.08518475138839687;  // std dev = 9.31e-10, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07077048507969629;  // std dev = 6.23e-05, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.20975771563253562;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.21267900537386727;  // std dev = 5.58e-08, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( female(A) )
%   | | | then return -0.07878036521666132;  // std dev = 7.11e-06, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.0787143332526025;  // std dev = 0.000176, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else if ( female(B) )
%   | then if ( female(A) )
%   | | then return -0.07877675473109177;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.07877675473109179;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( actor(B) )
%   | | then return -0.07877675473109179;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.17709649774527736;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.17923617811448259;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( actor(A) )
%   | | then if ( female(A) )
%   | | | then return -0.07325045514365612;  // std dev = 5.33e-06, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.07318700342626153;  // std dev = 0.000153, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return -0.06624169285429422;  // std dev = 6.77e-05, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( actor(B) )
%   | then if ( actor(A) )
%   | | then if ( female(A) )
%   | | | then return -0.07324622576333704;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.07324622576333704;  // std dev = 1.05e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.06227329284727957;  // std dev = 5.53e-05, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then if ( female(A) )
%   | | | then return 0.15274385809367094;  // std dev = 7.45e-09, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.1543650898778087;  // std dev = 4.34e-08, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( female(A) )
%   | | | then return -0.06843010026349615;  // std dev = 6.63e-06, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.06837872152899106;  // std dev = 0.000140, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( female(A) )
%   | then return -0.06842697784420272;  // std dev = 9.31e-10, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( female(B) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.06842697784420276;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.13400703000801117;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.13527143180878606;  // std dev = 2.63e-09, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( actor(A) )
%   | | then if ( female(B) )
%   | | | then return -0.06420085189808733;  // std dev = 2.21e-05, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.0641493999177276;  // std dev = 0.000122, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return -0.058746778684111566;  // std dev = 6.05e-05, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.06419184008202625;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */


Results
   AUC ROC   = 0.998355
   AUC PR    = 0.951968
   CLL	      = -0.077462
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total learning time: 1.65 seconds
Total inference time: 1.966 seconds
AUC ROC: 0.998355


Results scoring model
   AUC ROC   = 1.0
   AUC PR    = 1.0
   CLL	      = -0.064969
   Precision = 1.0 at threshold = 0.5
   Recall    = 1.0
   F1        = 1.0


Total scoring time: 0.925 seconds
Refined model CLL: -0.064969


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.998355
   AUC PR    = 0.951968
   CLL	      = -0.077462
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.824926
   F1        = 0.904065


Total learning time: 4.2459999999999996 seconds
Total inference time: 1.966 seconds
AUC ROC: 0.998355
Total revision time: 4.2459999999999996
Best scored revision CLL: -0.064969


Dataset: 4_cora_imdb, Fold: 4, Type: Transfer (trRDN-B), Time: 02:36:01
{'AUC ROC': 0.998355, 'AUC PR': 0.951968, 'CLL': -0.077462, 'Precision': [1.0, 0.5], 'Recall': 0.824926, 'F1': 0.904065, 'Learning time': 4.2459999999999996, 'Inference time': 1.966, 'parameter': {'AUC ROC': 0.978805, 'AUC PR': 0.865091, 'CLL': -0.080941, 'Precision': [1.0, 0.5], 'Recall': 0.824926, 'F1': 0.904065, 'Learning time': 0.784, 'Inference time': 1.814}}


Starting fold 5

Target train facts examples: 163
Target train pos examples: 45
Target train neg examples: 2071

Target test facts examples: 915
Target test pos	 examples: 337
Target test neg examples: 12165

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;false
1;true;haswordtitle(D, C).;true;true
1;true,true;haswordauthor(E, C).;true;true
1;true,true,true;author(F, E), title(F, D).;false;false
1;true,true,false;title(G, D), venue(G, B).;false;false
1;true,false;haswordvenue(B, H), haswordtitle(I, H).;true;true
1;true,false,true;title(J, I), venue(J, B).;false;false
1;true,false,false;haswordvenue(A, K), haswordtitle(L, K).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, B).;false;true
2;true,true,false;title(F, D), venue(F, A).;false;false
2;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
2;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
2;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
2;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;title(E, D), venue(E, A).;false;true
3;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
3;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
3;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
3;true,false,false;haswordvenue(B, L), haswordauthor(M, L).;false;false
3;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
4;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
4;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
4;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordauthor(D, C).;true;true
6;true,true;author(E, D), venue(E, A).;false;true
6;true,true,false;haswordtitle(F, C).;false;false
6;true,false;haswordtitle(G, C).;true;true
6;true,false,true;title(H, G), venue(H, B).;false;false
6;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
6;false;haswordvenue(A, K), haswordauthor(L, K).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
7;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
7;false;haswordvenue(A, L), haswordtitle(M, L).;true;false
7;false,true;haswordauthor(N, L).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;title(E, D), venue(E, A).;false;true
8;true,true,false;title(F, D), venue(F, B).;false;false
8;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
8;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
8;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
8;false,true;haswordauthor(M, K).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, B).;false;true
9;true,true,false;title(F, D), venue(F, A).;false;false
9;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
9;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
9;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
9;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false


WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995115;  // std dev = 2.38e-07, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.12130682983635446;  // std dev = 2.714, 38.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.14185106490048766;  // std dev = 7.30e-08, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109548;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( movie(E, B) )
%   | | then if ( genre(B, F) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13778505344701653;  // std dev = 2.654, 34.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else return -0.1254446385283916;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5553664367462844;  // std dev = 9.42e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.1413568324095351;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.15693003322453533;  // std dev = 2.582, 30.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.11231637819360625;  // std dev = 5.58e-08, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1250533087459644;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( movie(E, A) )
%   | | then return 0.36437834543521674;  // std dev = 0.313, 56.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=45 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.10159632948783615;  // std dev = 5.77e-08, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.31450395584816204;  // std dev = 0.635, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.1119996736940419;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( movie(F, B) )
%   | | | then return -0.04288315181801701;  // std dev = 2.789, 45.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.1013352406417024;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( genre(B, E) )
%   | | then return 0.26661383603695826;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.11353511317132652;  // std dev = 2.509, 27.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.08518475138839679;  // std dev = 2.08e-09, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.21780823383971207;  // std dev = 5.58e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( movie(F, B) )
%   | | | then return 0.12090351819225507;  // std dev = 2.449, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.07877675473109169;  // std dev = 3.16e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.18297903751628739;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( movie(E, B) )
%   | | then return 0.005383243909402741;  // std dev = 2.624, 33.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A) )
%   | then return -0.07324622576333704;  // std dev = 9.31e-10, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09292538753767722;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( genre(B, E) )
%   | | then return 0.15719186661727855;  // std dev = 4.47e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( movie(F, A) )
%   | | | then return 0.051943764653545985;  // std dev = 2.535, 28.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, B) )
%   | then return -0.0684269778442027;  // std dev = 2.46e-09, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1374700189804869;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(F, A) )
%   | | | then return -0.0038239711234976763;  // std dev = 2.622, 32.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(G, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.


Results
   AUC ROC   = 0.982257
   AUC PR    = 0.888508
   CLL	      = -0.143131
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.854599
   F1        = 0.9216


Total learning time: 0.869 seconds
Total inference time: 1.872 seconds
AUC ROC: 0.982257


Results scoring model
   AUC ROC   = 0.971565
   AUC PR    = 0.823063
   CLL	      = -0.148243
   Precision = 1.0 at threshold = 0.5
   Recall    = 0.777778
   F1        = 0.875


Total scoring time: 0.888 seconds
Parameter learned model CLL: -0.148243


Structure after Parameter Learning
[['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [2.38e-07, 0, 35], 'true,false,false,true': [2.714, 28, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [7.3e-08, 75, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'true,false,true': 'genre(B, F)'}, {'true,true': [0.0, 0, 35], 'true,false,true,true': [0.0, 0, 0], 'true,false,true,false': [2.654, 24, 10], 'true,false,false': [0.0, 0, 0], 'false': [0.0, 65, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [9.42e-08, 0, 35], 'true,false,true': [3.73e-09, 3, 0], 'true,false,false,true': [2.582, 20, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [5.58e-08, 70, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [0.313, 11, 45], 'true,false,false': [0.0, 0, 0], 'false,true': [5.77e-08, 76, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, B)'}, {'true,true': [0.635, 1, 35], 'true,false,true': [0.0, 3, 0], 'true,false,false,true': [2.789, 35, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 60, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 3, 0], 'true,false,true': [0.0, 0, 35], 'true,false,false,true': [2.509, 17, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.08e-09, 70, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, B)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [5.58e-08, 0, 35], 'true,false,false,true': [2.449, 15, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [3.16e-08, 66, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A)'}, {'true,true': [0.0, 0, 35], 'true,false,true': [2.624, 23, 10], 'true,false,false': [0.0, 0, 0], 'false,true': [9.31e-10, 57, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(A, D)', 'true,false': 'genre(B, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, B)'}, {'true,true': [0.0, 1, 0], 'true,false,true': [4.47e-08, 0, 35], 'true,false,false,true': [2.535, 18, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [2.46e-09, 59, 0], 'false,false': [0.0, 0, 0]}], ['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(B, D)', 'true,false': 'genre(A, E)', 'true,false,false': 'movie(F, A)', 'false': 'movie(G, A)'}, {'true,true': [0.0, 0, 35], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [2.622, 22, 10], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 50, 0], 'false,false': [0.0, 0, 0]}]]
[{'': [0.23831263696128588, 7.105427357601002e-17], 'true': [0.0, 0.23644210921373646], 'true,false': [1.6240976817373718e-15, 0.19390581717451538], 'true,false,false': [0.19390581717451538, nan], 'false': [7.105427357601002e-17, nan]}, {'': [0.18661730170325017, -3.75767792950053e-17], 'true': [-7.105427357601002e-16, 0.20709078039667914], 'true,false': [0.20709078039667914, nan], 'true,false,true': [nan, 0.20709078039667914]}, {'': [0.14684249182382464, 4.4408920985006264e-17], 'true': [2.5376526277146434e-16, 0.2093735122854748], 'true,false': [4.625929269271485e-18, 0.22222222222222243], 'true,false,false': [0.22222222222222243, nan], 'false': [4.4408920985006264e-17, nan]}, {'': [0.10064822928986565, 4.382459307730881e-17], 'true': [0.0, 0.09824300428958645], 'true,false': [0.09824300428958645, nan], 'false': [4.382459307730881e-17, nan]}, {'': [0.12959499968975313, -1.8503717077085942e-18], 'true': [0.011204668325591909, 0.16231694486494155], 'true,false': [0.0, 0.17283950617283936], 'true,false,false': [0.17283950617283936, nan], 'false': [-1.8503717077085942e-18, nan]}, {'': [0.10635711955255145, 4.758098676964957e-18], 'true': [0.0, 0.10731390362067196], 'true,false': [-8.881784197001253e-17, 0.23319615912208513], 'true,false,false': [0.23319615912208513, nan], 'false': [4.758098676964957e-18, nan]}, {'': [0.10228241900704864, 1.5139404881252134e-17], 'true': [nan, 0.10228241900704864], 'true,false': [8.881784197001253e-17, 0.24000000000000007], 'true,false,false': [0.24000000000000007, nan], 'false': [1.5139404881252134e-17, nan]}, {'': [0.1091264074567625, 0.0], 'true': [-3.8064789415719653e-17, 0.20863257618433467], 'true,false': [0.20863257618433467, nan], 'false': [0.0, nan]}, {'': [0.10377475135749409, 6.586068790149234e-18], 'true': [0.0, 0.10477591829368327], 'true,false': [5.709718412357947e-17, 0.22959183673469394], 'true,false,false': [0.22959183673469394, nan], 'false': [6.586068790149234e-18, nan]}, {'': [0.10759293175233811, -2.220446049250313e-18], 'true': [-1.586032892321652e-17, 0.2148437500000002], 'true,false': [nan, 0.2148437500000002], 'true,false,false': [0.2148437500000002, nan], 'false': [-2.220446049250313e-18, nan]}]


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
0;true;genre(A, D).;true;true
0;true,false;genre(B, E).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;true;genre(B, D).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;true;genre(B, D).;true;true
2;true,false;genre(A, E).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;true;genre(A, D).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;true;genre(B, D).;true;true
4;true,false;genre(A, E).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;true;genre(A, D).;true;true
5;true,false;genre(B, E).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;true;genre(B, E).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;true;genre(B, D).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;true;genre(A, D).;true;true
8;true,false;genre(B, E).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;true;genre(B, D).;true;true


Refining candidate
***************************
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(B, E) )
%   | | then return 0.8581489350995115;  // std dev = 2.38e-07, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( actor(B) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.14185106490048766;  // std dev = 6.99e-08, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.7194734122109548;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( actor(B) )
%   | | then return -0.12717163077808574;  // std dev = 0.022, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else return 0.7194734122109544;  // std dev = 2.98e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.12544463852839155;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.5553664367462844;  // std dev = 9.42e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( genre(A, E) )
%   | | then return -0.12706396843447063;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.11214430987939948;  // std dev = 1.29e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.11231637819360629;  // std dev = 3.80e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.11362509667715555;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( actor(B) )
%   | | then return -0.10145449245409478;  // std dev = 6.45e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.41751358415831025;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.10159632948783623;  // std dev = 3.80e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then if ( female(A) )
%   | | then return 0.32071184716014967;  // std dev = 1.49e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.2856469506041953;  // std dev = 0.149, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else if ( genre(A, E) )
%   | | then return -0.10267396438957273;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | else if ( actor(B) )
%   | | | then return -0.09257250452139862;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return 0.3207118471601494;  // std dev = 2.58e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.09269127618926107;  // std dev = 0.000, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.09359284542545614;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( genre(B, E) )
%   | | then return 0.2586289759113641;  // std dev = 0.020, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( actor(B) )
%   | | | then return -0.08508394172918572;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return 0.2551722425694894;  // std dev = 1.83e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.08518475138839679;  // std dev = 1.83e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.21219893054412117;  // std dev = 0.017, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( actor(B) )
%   | | then return -0.07929511689776998;  // std dev = 0.010, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return 0.2097577156325356;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.0787767547310917;  // std dev = 2.79e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1788864547209671;  // std dev = 0.015, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( actor(B) )
%   | | then return -0.07355452980606296;  // std dev = 0.009, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else return 0.17709649774527736;  // std dev = 7.45e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07324622576333704;  // std dev = 0.000, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(A, D) )
%   | then return -0.07467655546984912;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( genre(B, E) )
%   | | then return 0.15410135975811337;  // std dev = 0.014, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( actor(B) )
%   | | | then return -0.06829831476512213;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return 0.15274385809367094;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06842697784420268;  // std dev = 2.24e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(B, D) )
%   | then return 0.1350666030077011;  // std dev = 0.012, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( actor(B) )
%   | | then return -0.06461156561387978;  // std dev = 0.008, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.13400703000801117;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06419184008202625;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */


Results
   AUC ROC   = 0.99752
   AUC PR    = 0.885213
   CLL	      = -0.075752
   Precision = 0.742291 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.852086


Total learning time: 1.304 seconds
Total inference time: 1.656 seconds
AUC ROC: 0.99752


Results scoring model
   AUC ROC   = 0.999753
   AUC PR    = 0.984351
   CLL	      = -0.065366
   Precision = 0.9375 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.967742


Total scoring time: 0.862 seconds
Refined model CLL: -0.065366


******************************************
Best model found
******************************************
Results
   AUC ROC   = 0.99752
   AUC PR    = 0.885213
   CLL	      = -0.075752
   Precision = 0.742291 at threshold = 0.5
   Recall    = 1.0
   F1        = 0.852086


Total learning time: 3.923 seconds
Total inference time: 1.656 seconds
AUC ROC: 0.99752
Total revision time: 3.923
Best scored revision CLL: -0.065366


Dataset: 4_cora_imdb, Fold: 5, Type: Transfer (trRDN-B), Time: 02:36:09
{'AUC ROC': 0.99752, 'AUC PR': 0.885213, 'CLL': -0.075752, 'Precision': [0.742291, 0.5], 'Recall': 1.0, 'F1': 0.852086, 'Learning time': 3.923, 'Inference time': 1.656, 'parameter': {'AUC ROC': 0.982257, 'AUC PR': 0.888508, 'CLL': -0.143131, 'Precision': [1.0, 0.5], 'Recall': 0.854599, 'F1': 0.9216, 'Learning time': 0.869, 'Inference time': 1.872}}


